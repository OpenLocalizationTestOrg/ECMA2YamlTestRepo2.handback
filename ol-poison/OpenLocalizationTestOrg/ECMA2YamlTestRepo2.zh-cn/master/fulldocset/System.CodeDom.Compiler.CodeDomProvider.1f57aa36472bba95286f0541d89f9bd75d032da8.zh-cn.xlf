<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5d0859faa3c5610b80c01a73f81ae4c2752b71a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.Compiler.CodeDomProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31013038a83197f26dc9e6bb8366c17c167ae9e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1266f9254481fb65fe6dbb278edc959c58293ed3</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file: C:\ol\master\ECMA2YamlTestRepo2.handback\838452\ol-handback\OpenLocalizationTestOrg\ECMA2YamlTestRepo2.zh-cn\master\fulldocset\System.CodeDom.Compiler.CodeDomProvider.1f57aa36472bba95286f0541d89f9bd75d032da8.zh-cn.xlf failed.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for CodeDomProvider implementations.</source>
          <target state="translated">为 CodeDomProvider 实现提供基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is abstract.</source>
          <target state="translated">此类为抽象类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compiles an assembly based on the <bpt id="p1">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> trees contained in the specified array of <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects, using the specified compiler settings.</source>
          <target state="translated">将基于程序集编译成<bpt id="p1">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>树中指定的数组包含<bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>对象，使用指定的编译器设置。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the settings for the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示编译的设置。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the code to compile.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，该值指示要编译的代码。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示编译的结果。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">此方法和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;方法在派生类中重写&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;都不</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
          <target state="translated">编译源代码中的代码包含在指定的文件中，使用指定的编译器设置程序集。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the settings for the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示编译的设置。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An array of the names of the files to compile.</source>
          <target state="translated">要编译的文件的名称数组。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示编译的结果。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">此方法和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;方法在派生类中重写&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;都不</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
          <target state="translated">编译来自指定数组的字符串包含源代码，使用指定的编译器设置的程序集。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the compiler settings for this compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示此编译的编译器设置。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An array of source code strings to compile.</source>
          <target state="translated">若要编译的源代码字符串的数组。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，指示编译的结果。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">此方法和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;方法在派生类中重写&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;都不</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code compiler.</source>
          <target state="translated">当在派生类中重写，创建新的代码编译器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">此方法已过时中<ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The recommended alternative is to call the &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; methods that are directly available in the code provider.</source>
          <target state="translated">建议的替代项是调用&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;代码提供程序中直接提供的方法。&lt;/xref:System.CodeDom.Compiler.ICodeCompiler&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeCompiler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used for compilation of <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeCompiler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，可以用于的编译<bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>基于源代码表示形式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">创建指定的值的转义的标识符。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CreateEscapedIdentifier tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated">CreateEscapedIdentifier 测试标识符是否与任何保留相冲突或语言关键字和如果是这样，返回一个等效的带有特定于语言的转义码格式设置的名称。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">这称为转义标识符。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">转义的标识符包含相同<ph id="ph1">`value`</ph>但添加了转义代码格式设置，以使标识符与关键字区分开来。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">两个实现示例是前面<ph id="ph1">`value`</ph>使用"@"或包括<ph id="ph2">`value`</ph>与"["和"]"。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph> 1&gt; 在.NET Framework 1.0 和 1.1 版中，此方法由&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现返回&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;的提供程序的方法。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现称为基的类。&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The string for which to create an escaped identifier.</source>
          <target state="translated">要为其创建转义的标识符字符串。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The escaped identifier for the value.</source>
          <target state="translated">转义的标识符的值。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; method is overridden in a derived class.</source>
          <target state="translated">此方法和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;方法在派生类中重写&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;都不</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">当在派生类中重写，创建新的代码生成器。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">此方法已过时中<ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The recommended alternative is to call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; methods that are directly available in the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; class.</source>
          <target state="translated">建议的替代项是调用&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;类&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;中直接提供的方法&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>可以用于生成<bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>基于源代码表示形式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified &lt;xref:System.IO.TextWriter&gt; for output.</source>
          <target state="translated">当在派生类中重写，创建使用指定的新代码生成器&lt;xref:System.IO.TextWriter&gt;输出。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This method uses the specified &lt;xref:System.IO.TextWriter&gt; for output.</source>
          <target state="translated">此方法使用指定&lt;xref:System.IO.TextWriter&gt;输出。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
          <target state="translated">此方法支持增量更新的源代码的更多优化的代码生成。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base class implementation calls the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> and results in a &lt;xref:System.NotSupportedException&gt; if an &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; object is not returned.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 基类实现调用&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;方法，在中已过时<ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>，并导致&lt;xref:System.NotSupportedException&gt;如果&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;不返回对象。&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; &lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.TextWriter&gt; to use to output.</source>
          <target state="translated">A&lt;xref:System.IO.TextWriter&gt;使用到输出。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>可以用于生成<bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>基于源代码表示形式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
          <target state="translated">当在派生类中重写，创建新的代码生成器使用输出指定的文件名称。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This method uses the specified file name for output.</source>
          <target state="translated">此方法使用输出指定的文件名称。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base class implementation calls the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> and results in a &lt;xref:System.NotSupportedException&gt; if an &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; object is not returned.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 基类实现调用&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;方法，在中已过时<ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>，并导致&lt;xref:System.NotSupportedException&gt;如果&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;不返回对象。&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; &lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The file name to output to.</source>
          <target state="translated">要输出到的文件名称。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>可以用于生成<bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>基于源代码表示形式。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code parser.</source>
          <target state="translated">当在派生类中重写，创建一个新的代码分析器。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to parse source code.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>可以用于分析源代码。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The base implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">基实现始终返回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance for the specified language.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实例指定语言。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The language name.</source>
          <target state="translated">该语言的名称。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
          <target state="translated">CodeDOM 提供程序实现为指定的语言名称。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> does not have a configured provider on this computer.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">language</ph> <ept id="p1">&lt;/code&gt;</ept>在此计算机上没有配置提供程序。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance for the specified language and provider options.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对指定的语言和提供程序选项的实例。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>1&gt; 此方法通常用于应用程序可选择性地使用多个提供商之一中创建的代码提供程序实例。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CreateProvider enables you to specify at run time the version of the code provider you want to instantiate.</source>
          <target state="translated">CreateProvider，可在运行时指定你想要实例化的代码提供程序的版本。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the CreateProvider method.</source>
          <target state="translated">如果你知道在哪个代码提供程序是要使用的设计时，应创建而不是使用 CreateProvider 方法该代码提供程序的实例。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use CreateProvider when you want to dynamically find a configured provider implementation for a specific language and options.</source>
          <target state="translated">当你想要动态查找特定的语言和选项的配置的提供程序实现，请使用 CreateProvider。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Language names are case-insensitive.</source>
          <target state="translated">语言名称不区分大小写。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
          <target state="translated">有关受支持的提供程序选项的信息，请参阅特定 CodeDOM 提供程序文档。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt; method.</source>
          <target state="translated">有关验证提供程序和调用提供程序，如果语言名称为配置了多个提供程序实现的信息，请参阅备注部分的&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;方法。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The language name.</source>
          <target state="translated">该语言的名称。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A collection of provider options from the configuration file.</source>
          <target state="translated">从配置文件的提供程序选项的集合。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
          <target state="translated">CodeDOM 提供程序实现的指定的语言名称和选项。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">创建指定的值的有效标识符。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
          <target state="translated">CreateValidIdentifier 测试是否与保留的标识符冲突或语言关键字和如果因此，尝试返回有效的标识符名称不冲突。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
          <target state="translated">通常返回的标识符仅略有修改以使标识符与关键字; 区分开来例如，名称可能前面使用下划线 (_) 字符。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph> 1&gt; 在.NET Framework 1.0 和 1.1 版中，此方法由&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现返回&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;的提供程序的方法。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现称为基的类。&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The string for which to generate a valid identifier.</source>
          <target state="translated">要为其生成有效的标识符字符串。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">指定的值是有效的标识符。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; method is overridden in a derived class.</source>
          <target state="translated">此方法和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;方法在派生类中重写&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;都不</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
          <target state="translated">获取默认文件扩展名用于中的当前语言的源代码文件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
          <target state="translated">代码生成器和代码编译器通过使用此属性以指示应生成还是使用哪些文件扩展名。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
          <target state="translated">文件扩展名对应的当前语言的源文件的扩展名。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The base implementation always returns &lt;xref:System.String&gt;.</source>
          <target state="translated">基实现始终返回&lt;xref:System.String&gt;.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">为指定的代码文档对象模型 (CodeDOM) 编译单元中生成代码并将其发送到指定的文本编写器，使用指定的选项。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>1&gt; 在.NET framework 1.0 和 1.1 版中，此方法由&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现返回&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;的提供程序的方法。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">在 2.0 版中，此方法可以调用的代码提供程序上直接即使它不被覆盖的代码提供程序。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">如果代码提供程序不重写此方法，&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;实现称为基的类。&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>