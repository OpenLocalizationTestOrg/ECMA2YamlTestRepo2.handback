<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d17d2c1422d4263de7e2b5a836c22102a1eb53f8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.MemoryCache.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7391c2a587da0a773f85101f0f79459c8d568cf3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8affb44efd57fa8aa982356fff7f479008735c96</xliffext:olxliffhash>
      <xliffext:poisonError xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Handback file: C:\ol\master\ECMA2YamlTestRepo2.handback\838452\ol-handback\OpenLocalizationTestOrg\ECMA2YamlTestRepo2.ko-kr\master\fulldocset\System.Runtime.Caching.MemoryCache.7ed60faa935876149151d4dc0494103533d12d13.ko-kr.xlf failed.</xliffext:poisonError>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the type that implements an in-memory cache.</source>
          <target state="translated">메모리 내 캐시를 구현 하는 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MemoryCache class is a concrete implementation of the abstract &lt;xref:System.Runtime.Caching.ObjectCache&gt; class.</source>
          <target state="translated">MemoryCache 클래스는 추상 &lt;xref:System.Runtime.Caching.ObjectCache&gt;클래스&lt;/xref:System.Runtime.Caching.ObjectCache&gt; 의 구체적 구현</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The MemoryCache class is similar to the ASP.NET &lt;xref:System.Web.Caching.Cache&gt; class.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; The MemoryCache 클래스 ASP.NET &lt;xref:System.Web.Caching.Cache&gt;클래스&lt;/xref:System.Web.Caching.Cache&gt; 에 대해 비슷합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET &lt;xref:System.Web.Caching.Cache&gt; class.</source>
          <target state="translated">MemoryCache 클래스에는 여러 속성 및 ASP.NET &lt;xref:System.Web.Caching.Cache&gt;클래스&lt;/xref:System.Web.Caching.Cache&gt; 를 사용한 경우을 이미 알고 수 있는 캐시에 액세스 하기 위한 메서드</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main differences between the &lt;xref:System.Web.Caching.Cache&gt; and MemoryCache classes are that the MemoryCache class has been changed to make it usable by <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> applications that are not ASP.NET applications.</source>
          <target state="translated">주된 차이점은 &lt;xref:System.Web.Caching.Cache&gt;고 MemoryCache 클래스는 사용할 수 있도록 MemoryCache 클래스가 변경 되었음을 <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> 한 응용 프로그램을 ASP.NET 응용 프로그램.&lt;/xref:System.Web.Caching.Cache&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the MemoryCache class has no dependencies on the <ph id="ph1">`System.Web`</ph> assembly.</source>
          <target state="translated">예를 들어 MemoryCache 클래스에 의존 하지 않습니다는 <ph id="ph1">`System.Web`</ph> 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same &lt;xref:System.AppDomain&gt; instance.</source>
          <target state="translated">또 다른 차이점은 동일한 응용 프로그램 및 동일한 용도로 MemoryCache 클래스의 여러 인스턴스를 만들 수 있습니다 &lt;xref:System.AppDomain&gt;인스턴스.&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MemoryCache class does not allow <ph id="ph1">`null`</ph> as a value in the cache.</source>
          <target state="translated">MemoryCache 클래스에서는 <ph id="ph1">`null`</ph> 캐시에 있는 값으로.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to add or change a cache entry with a value of <ph id="ph1">`null`</ph> will fail.</source>
          <target state="translated">추가 하거나 값이 캐시 항목을 변경 하려고 <ph id="ph1">`null`</ph> 실패 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MemoryCache type does not implement <bpt id="p1">*</bpt>cache regions<ept id="p1">*</ept>.</source>
          <target state="translated">MemoryCache 형식을 구현 하지 않는 <bpt id="p1">*</bpt>영역 캐시<ept id="p1">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you call MemoryCache methods that implement base methods that contain a parameter for regions, do not pass a value for the parameter.</source>
          <target state="translated">따라서 영역에 대 한 매개 변수를 포함 하는 기본 메서드를 구현 하는 MemoryCache 메서드를 호출할 때 매개 변수의 값을 전달 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The methods that use the region parameter all supply a default <ph id="ph1">`null`</ph> value.</source>
          <target state="translated">모든 지역 매개 변수를 사용 하는 기본 제공 <ph id="ph1">`null`</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName&gt; method overload has a <ph id="ph1">`regionName`</ph> parameter whose default value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">예를 들어는 &lt;xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName&gt;메서드 오버 로드에는 <ph id="ph1">`regionName`</ph> 매개 변수 값은 <ph id="ph2">`null`</ph>.&lt;/xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Caching.MemoryCache&gt; class is initialized, it checks for configuration entries that might have been overridden by using the optional <ph id="ph1">`config`</ph> parameter in the constructor.</source>
          <target state="translated">경우는 &lt;xref:System.Runtime.Caching.MemoryCache&gt;선택적를 사용 하 여 재정의 된 구성 항목을 확인 클래스는 초기화 <ph id="ph1">`config`</ph> 생성자에서 매개 변수.&lt;/xref:System.Runtime.Caching.MemoryCache&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can pass the following parameters in the <ph id="ph1">`config`</ph> parameter.</source>
          <target state="translated">다음 매개 변수를 전달할 수는 <ph id="ph1">`config`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>All values can be passed as integers.</source>
          <target state="translated">모든 값에 정수로 전달 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A&gt;      -   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A&gt;      -   &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A&gt;       When this constructor is invoked, configuration settings are first retrieved from application configuration files.</source>
          <target state="translated">- &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A&gt;- &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A&gt;- &lt;xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A&gt;이 생성자를 호출 하면 구성 설정을 응용 프로그램 구성 파일에서 먼저 검색 됩니다.&lt;/xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A&gt; &lt;/xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A&gt; &lt;/xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no configuration entries exist in the application configuration file, only the settings provided in <ph id="ph1">`config`</ph> are applied.</source>
          <target state="translated">응용 프로그램 구성 파일에 구성 항목이 없는 경우에 제공 된 설정만 <ph id="ph1">`config`</ph> 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the configuration entries in the application configuration exist, and if information is also passed in <ph id="ph1">`config`</ph>, the information in the <ph id="ph2">`config`</ph> overrides the information that is read from the configuration file.</source>
          <target state="translated">에 전달 되는 경우 및 응용 프로그램 구성에서 구성 항목이 존재 하는 경우 <ph id="ph1">`config`</ph>의 정보는 <ph id="ph2">`config`</ph> 구성 파일에서 읽은 정보를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name value that is assigned to a cache instance is used in two ways:      -   To help you keep track of multiple cache instances when more than one instance exists.</source>
          <target state="translated">캐시 인스턴스에 할당 된 이름 값은 두 가지 방법으로 사용:-한 추적 여러 캐시 인스턴스 인스턴스가 둘 이상 있는 경우 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To reference settings in the configuration file when the &lt;xref:System.Runtime.Caching.MemoryCache&gt; instance is initialized.</source>
          <target state="translated">-참조 하는 구성에서 설정 파일의 &lt;xref:System.Runtime.Caching.MemoryCache&gt;인스턴스 초기화 됩니다.&lt;/xref:System.Runtime.Caching.MemoryCache&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  There is no mechanism to enforce unique names for cache instances.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 캐시 인스턴스에 대 한 고유 이름을 적용 하는 방법은 없습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is possible to have multiple cache instances with the same name.</source>
          <target state="translated">따라서 동일한 이름의 여러 캐시 인스턴스는 것이 같습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph>     &gt;  Do not create &lt;xref:System.Runtime.Caching.MemoryCache&gt; instances unless it is required.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 만들지 마십시오 &lt;xref:System.Runtime.Caching.MemoryCache&gt;필요한 경우가 아니면 인스턴스.&lt;/xref:System.Runtime.Caching.MemoryCache&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create cache instances in client and Web applications, the &lt;xref:System.Runtime.Caching.MemoryCache&gt; instances should be created early in the application life cycle.</source>
          <target state="translated">클라이언트와 웹 응용 프로그램에 캐시 인스턴스를 만들 경우는 &lt;xref:System.Runtime.Caching.MemoryCache&gt;응용 프로그램 수명 주기의 초기 단계에서 인스턴스를 만들어야 합니다.&lt;/xref:System.Runtime.Caching.MemoryCache&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must create only the number of cache instances that will be used in your application, and store references to the cache instances in variables that can be accessed globally.</source>
          <target state="translated">응용 프로그램에서 사용 되 고 전체적으로 액세스할 수 있는 변수에 캐시 인스턴스에 대 한 참조를 저장 하는 캐시 인스턴스의 수만 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in ASP.NET applications, you can store the references in application state.</source>
          <target state="translated">예를 들어 ASP.NET 응용 프로그램에서 응용 프로그램 상태에 대 한 참조를 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create only a single cache instance in your application, use the default cache and get a reference to it from the &lt;xref:System.Runtime.Caching.MemoryCache.Default%2A&gt; property when you need to access the cache.</source>
          <target state="translated">응용 프로그램에 단일 캐시 인스턴스를 만들 경우 기본 캐시를 사용 하 고에서 해당 클래스에 대 한 참조를 가져오려면는 &lt;xref:System.Runtime.Caching.MemoryCache.Default%2A&gt;속성 캐시에 액세스 해야 할 때.&lt;/xref:System.Runtime.Caching.MemoryCache.Default%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name to use to look up configuration information.</source>
          <target state="translated">구성 정보를 조회 하는 데 이름입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Note`</ph> It is not required for configuration information to exist for every name.</source>
          <target state="translated"><ph id="ph1">`Note`</ph>모든 이름에 대해 존재 하는 구성 정보에 대 한 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a matching configuration entry exists, the configuration information is used to configure the <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">구성 정보를 구성 하는 데 사용 일치 하는 구성 엔트리가 있으면는 <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인스턴스.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a matching configuration entry does not exist, the name can be accessed through the &lt;xref:System.Runtime.Caching.MemoryCache.Name*&gt; property, because the specified name is associated with the <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">이름을 통해 액세스할 수는 일치 하는 구성 항목이 없는 경우는 &lt;xref:System.Runtime.Caching.MemoryCache.Name*&gt;속성, 연결 된 지정 된 이름 때문에 <bpt id="p1">&lt;xref href="System.Runtime.Caching.MemoryCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인스턴스.&lt;/xref:System.Runtime.Caching.MemoryCache.Name*&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For information about memory cache configuration, see <bpt id="p1">&lt;xref href="System.Runtime.Caching.Configuration.MemoryCacheElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">메모리 내 캐시 구성에 대 한 정보를 참조 하십시오. <bpt id="p1">&lt;xref href="System.Runtime.Caching.Configuration.MemoryCacheElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A collection of name/value pairs of configuration information to use for configuring the cache.</source>
          <target state="translated">캐시를 구성 하는 데 사용할 구성 정보의 이름/값 쌍의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A name or value in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">config</ph><ept id="p1">&lt;/code&gt;</ept> parameter could not be parsed.</source>
          <target state="translated">이름 또는 값의 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">config</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수를 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A value in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">config</ph><ept id="p1">&lt;/code&gt;</ept> collection is invalid.</source>
          <target state="translated">값은 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">config</ph> <ept id="p1">&lt;/code&gt;</ept> 컬렉션이 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Inserts a cache entry into the cache as a <bpt id="p1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance, and adds details about how the entry should be evicted.</source>
          <target state="translated">캐시에 캐시 엔트리를 삽입 한 <bpt id="p1">&lt;xref href="System.Runtime.Caching.CacheItem"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인스턴스를 선택한 항목을 제거 해야 하는 방법에 대 한 세부 정보를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!WARNING]</ph> &gt;  The &lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt; and &lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt; method overloads do not support the &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt; property.</source>
          <target state="translated"><ph id="ph1">&gt; [!WARNING]</ph>&gt;은 &lt;xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;및 &lt;xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt;메서드 오버 로드를 지원 하지 않습니다는 &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt;속성.&lt;/xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt; &lt;/xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A&gt; &lt;/xref:System.Runtime.Caching.ObjectCache.Add%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, to set the &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt; property for a cache entry, use the &lt;xref:System.Runtime.Caching.MemoryCache.Set%2A&gt; method overloads instead.</source>
          <target state="translated">따라서 설정 하는 &lt;xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt;사용 하 여 엔트리를 캐시에 대 한 속성의 &lt;xref:System.Runtime.Caching.MemoryCache.Set%2A&gt;메서드 대신 오버 로드.&lt;/xref:System.Runtime.Caching.MemoryCache.Set%2A&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The object to add.</source>
          <target state="translated">추가할 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An object that contains eviction details for the cache entry.</source>
          <target state="translated">캐시 항목에 대 한 제거 정보를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This object provides more options for eviction than a simple absolute expiration.</source>
          <target state="translated">이 개체는 간단한 절대 만료 보다 많은 옵션을 제거를 제공합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>