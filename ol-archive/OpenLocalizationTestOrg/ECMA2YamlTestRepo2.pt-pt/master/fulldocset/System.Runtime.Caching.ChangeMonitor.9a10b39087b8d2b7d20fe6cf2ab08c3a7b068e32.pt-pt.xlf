<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-pt">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94cfc43b061383f99108538f95cf073a12ce7bd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">Fornece uma classe base para um tipo derivado personalizado que monitoriza as alterações no estado dos dados que depende de um item de cache.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">A classe de ChangeMonitor é utilizada como a classe base para classes derivadas monitor que são especializadas para implementações de cache específico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">Uma instância de ChangeMonitor monitoriza as alterações no estado de dados dos quais depende de um item de cache.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">Por exemplo, o item pode ser uma entidade de dados ou ficheiros cujo conteúdo é colocadas em cache.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">Se a entidade ou dados de ficheiro é atualizada, a entrada de cache associados deve ser alterada também.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">Itens comuns que podem ser monitorizados incluem entidades de dados (por exemplo, os campos de base de dados, valores, linhas ou tabelas), outra entrada de cache e os ficheiros e os atributos do ficheiro.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">Uma alteração de dependência é uma alteração de estado de uma dependência.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">Numa implementação de cache típica, depois de uma instância de ChangeMonitor notifica a cache uma dependência tiver sido alterado, a cache executa a ação necessária, como invalidar a entrada de cache inseridas.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">Classes derivadas de ChangeMonitor podem ser personalizadas para monitorizar as alterações de dependência para específico diferentes arquivos de dados.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">Por exemplo, são implementações de cache para um sistema de ficheiros, memória física ou uma base de dados.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">A classe de ChangeMonitor examina as alterações que ocorrem fora da cache e, em seguida, a cache que ocorreram alterações de alertas.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated">O <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> inclui as seguintes classes que derivam da classe de ChangeMonitor:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;cada uma destas classes funciona com diferentes tipos de dependências.&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">Por exemplo, o derivada &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;classe monitoriza as alterações a uma cache de dados de sistema de ficheiros (ficheiros e pastas) que o item de cache depende.&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Inicializa uma nova instância do <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">Este construtor é chamado a partir de construtores em classes derivadas para inicializar a classe base.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">O &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;classe tem um construtor predefinido.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">No entanto, as classes que herdar a partir da base de &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;classe e definir personalizado alteração-monitorização de comportamento deve efetuar a inicialização no construtor.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">Para obter mais informações, consulte as notas para a secção os herdeiros.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Versões de todos os recursos que são utilizados pela instância atual do <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">O método de Dispose invoca o &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método de classes derivadas apenas uma vez, a primeira vez que é chamado.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">As chamadas subsequentes para o método de Dispose não tem qualquer efeito.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Depois de ter sido chamado o método, o &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">O &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;sobrecarga tem de ser chamada para eliminar um &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instância.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Seguem-se as regras para chamar o método de dispose:-antes de um item é inserido na cache, é responsabilidade da função invocadora eliminar um &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instância.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">-Item de cache uma vez e o &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instâncias que estão associadas a ele são transmitidas para uma cache, o implementador de cache tem de se certificar que &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;denomina-se, mesmo se falha a inserção.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">-Depois de um item e associado &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instâncias são transmitidas para uma cache, o autor da chamada não deve eliminar a dependência porque quando o &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método é denominado, a chamada é tratada como se a dependência foi alterada.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">Como resultado, o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método automaticamente é invocado.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-Estas regras tendo em consideração, o &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método tem de ser chamado das seguintes formas:-os utilizadores tem de chamar a sobrecarga de método Dispose se decidirem não inserir a instância de derivada de monitor de alterações uma cache.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">-A implementação de cache é responsável por chamar a sobrecarga de Dispose se a implementação tenta inserir a instância de monitor de alterações uma cache de objeto, mas a inserção falha.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">Quando a tentativa de inserção faz com que uma exceção, a implementação de cache tem de eliminar quaisquer dependências associadas.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">-Se a entrada de cache for removida, a implementação de cache tem também a eliminar a dependência.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">A implementação interna do &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;automaticamente chama o método a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método depois chama uma chamada de retorno que é registado através do &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;método.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Este dispose automática durante a acionadas eventos só ocorre se a inicialização do &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instância anteriormente foi concluída.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">Quando o construtor de um monitor de alteração derivada chama o &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;método, se o estado do monitor alterar já tiver sido alterado (ou seja, o estado de que está a ser monitorizado já mudou o construtor não tiver sido ainda ativo), em seguida, &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;método automaticamente irá eliminar o monitor de alteração.&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Os utilizadores não deverão chamar o método de Dispose.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">No entanto, não é possível impedir que os utilizadores a chamada do método.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Por conseguinte, caso contrário, o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método é invocado.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">Nesse caso, a entrada de cache é notificada como se a dependência foi alterada.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">Para impedir que as classes derivadas substituir Dispose método, o método não é uma implementação de interface explícita.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">Inicialização não está concluída na classe derivada de monitor de alterações que chamou o método de Dispose base.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">Versões de todos os recursos geridos e e quaisquer referências para o <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instância.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">Esta sobrecarga tem de ser implementada por classes derivadas de monitor de alterações.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">Quando o valor de <ph id="ph1">`disposing`</ph> valor é <ph id="ph2">`true`</ph>, todos os recursos geridos e são eliminados depois e quaisquer referências a este objeto são lançadas para que a instância de monitor de alterações derivada possam ser recolhidos.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">É garantido que a base de &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método irá invocar o método de Dispose implementado apenas uma vez.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Para libertar recursos geridos e e quaisquer referências a uma <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> instância; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> para libertar recursos apenas não geridos.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">Quando <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> é transmitida Dispose método é denominado por um <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> thread e quaisquer referências externas geridas, é provável que já não é válido devido a já foram recolhidos.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">Obtém um valor que indica que o estado de que é monitorizado pelo <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe foi alterada.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">Pode verificar o valor desta propriedade no derivada de um &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;classe para ver se uma dependência foi alterado.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">O valor é definido como <ph id="ph1">`true`</ph> quando ocorre uma alteração de dependência (ou seja, quando o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método é denominado).&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Depois do &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método é denominado por classe derivada, o valor da propriedade HasChanged será <ph id="ph1">`true`</ph>, independentemente de se um &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;instância foi notificada por uma chamada para o &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;método.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Os chamadores podem verificar a propriedade de HasChanged para ver se uma dependência foi alterado.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">No entanto, num ambiente com vários threads, um mais simples e mais abordagem sustentável é inserir dados de uma implementação de cache sem verificar a propriedade HasChanged.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">Implementações de cache devem verificar a propriedade HasChanged e terá não efetuar uma inserção ou definir operação se um ou mais dependências associadas já foram alterados.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o estado de que é monitorizado pelo <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> instância foi alterada; caso contrário, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">Chamada do construtor de classes derivadas para indicar que inicialização estiver concluída.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Se uma dependência alterações antes da conclusão de uma classe derivada inicialização, o construtor de classe derivada tem de invocar o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">Quando o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;invocar o método, o &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;propriedade é automaticamente definida para <ph id="ph1">`true`</ph> pelo monitor de alteração.&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">Como resultado, quando o construtor do monitor alterar chama o método InitializationComplete, a classe base automaticamente ligará para o &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">Se a inicialização estiver concluída, o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método disposes automaticamente a instância de monitor de alterações derivada.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">Obtém um valor que indica que a instância derivada de um <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe é eliminada.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">A propriedade está definida como <ph id="ph1">`true`</ph> após a base de &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;chamadas de método de &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;método de uma classe derivada eliminar a instância.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se a instância está a ser eliminada; caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">Chamado pelo implementadores de Cache para registar uma chamada de retorno e notificar um <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instância através de <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> delegar quando uma dependência é alterado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">Os implementadores de cache utilizam este método para ligar-se até um monitor de alteração.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">Se associar uma ou mais monitores com o item de cache de alteração, transmita um &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;instância com uma propriedade de monitores de alteração preenchidos para o item de cache.&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">Um implementador de cache que suporta altera monitores é responsável por iterating através de &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;propriedade e registar o &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegados com cada alterar monitor que encontra.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">Porque o &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegado inclui um parâmetro de estado opcional, uma implementação de monitor de alteração concreto pode transmitir informações de estado opcional.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">O implementador de cache determina se uma dependência explícita do tipo de estado que transmite um monitor de alteração personalizada como parte da chamada de retorno pode ser executada.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; A API de extensibilidade de base de cache não tem qualquer requisito para a dependência explícita do tipo de estado.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">A implementação do método NotifyOnChanged determina automaticamente se o estado do monitor já foi alterado no momento NotifyOnChanged método é chamado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Se o &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;propriedade é <ph id="ph1">`true`</ph>, em seguida, o método automaticamente chama o &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;processador de eventos, que se encontrava registado, através de &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">Isto ocorre porque é possível que relativamente ao momento da que implementação de cache cria um monitor de alteração, para o tempo de uma implementação de cache obtém o monitor e wires próprio até, o estado monitorizado subjacente foi alterada.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Se o estado já mudou, em seguida, o objeto que é transferido para o &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;método é <ph id="ph1">`null`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">O método NotifyOnChanged pode ser invocado uma vez e irá gerar uma exceção no chamadas subsequentes.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">Uma referência a um método que é invocada quando existe uma dependência foi alterada.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">O método de chamada de retorno já foi invocado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">Chamado por classes derivadas para aumentar o evento quando uma dependência é alterado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">Normalmente, o método de OnChanged é chamado quando ocorrem alterações de dependência.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">O método OnChanged também é invocado quando existe uma instância de monitor de alterações é eliminada mas a disposal ocorre apenas se a chamada de retorno já não ter sido invocada.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">Se o método de OnChanged é chamado antes do &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;método é denominado, os dados de estado da chamada do método OnChanged são guardados, a implementação de cache.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Além disso, a chamada de retorno para a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;método é a invocar imediatamente quando o &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;método é invocado.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">Os dados para o evento de alteração.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Este valor pode ser <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">Obtém um valor que representa o <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instância de classe.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">O valor da propriedade UniqueId normalmente é composta por nomes combinados de dependência de dados de cadeia que exclusivamente identificadores os dados que está a ser monitorizados por um &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instância.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">O valor da propriedade UniqueId é uma cadeia.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">O valor da cadeia é utilizado para atribuir o ID exclusivo do &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instância.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">O identificador de uma instância de monitor de alterações.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>