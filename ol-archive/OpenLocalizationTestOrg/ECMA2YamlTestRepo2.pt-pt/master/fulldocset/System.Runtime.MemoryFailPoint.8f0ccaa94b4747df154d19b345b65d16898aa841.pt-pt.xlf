<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-pt">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7394e5f549eebeb5d6874d28a8c1acadec70fd95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.MemoryFailPoint.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6367821b3c5ecca26342c3a63d46ad7cb5f28193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5241403282e8494c4010a116ca0146ec85a43ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Verifica a existência de recursos de memória suficiente antes de executar uma operação.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">Esta classe não pode ser herdada.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This class is intended for use in advanced development.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; Esta classe destina-se no desenvolvimento avançado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an instance of the MemoryFailPoint class creates a memory gate.</source>
          <target state="translated">Criar uma instância da classe MemoryFailPoint cria uma porta de memória.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Uma porta de memória verifica a existência de recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing the check results in an &lt;xref:System.InsufficientMemoryException&gt; exception being thrown.</source>
          <target state="translated">A efetuar a verificação resulta num &lt;xref:System.InsufficientMemoryException&gt;exceção que está a ser emitida.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Esta exceção impede que uma operação de que está a ser iniciado e reduz a possibilidade de falha devido à falta de recursos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you decrease performance to avoid an &lt;xref:System.OutOfMemoryException&gt; exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Esta permite que a diminuir o desempenho para evitar um &lt;xref:System.OutOfMemoryException&gt;exceção e quaisquer danos de estado que poderão resultar de processamento incorrecto da exceção nas localizações arbitrários no seu código.&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Este tipo implementa o &lt;xref:System.IDisposable&gt;interface.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Quando tiver terminado com o tipo, deve eliminar-direta ou indiretamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Para eliminar diretamente do tipo, chame o &lt;xref:System.IDisposable.Dispose%2A&gt;método um <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> bloco.&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para eliminar indiretamente dele, utilize uma construção de idioma, tais como <ph id="ph1">`using`</ph> (em c#) ou <ph id="ph2">`Using`</ph> (em Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">Para obter mais informações, consulte a secção "Utilizar um objeto que implementa IDisposable" o &lt;xref:System.IDisposable&gt;tópico de interface.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>By throwing an &lt;xref:System.InsufficientMemoryException&gt; exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Ao gerar uma &lt;xref:System.InsufficientMemoryException&gt;exceção, uma aplicação pode distinguir entre uma estimativa que não será possível concluir uma operação e uma operação parcialmente concluída que pode ter danificado o estado da aplicação.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current &lt;xref:System.AppDomain&gt; or recycling the process.</source>
          <target state="translated">Isto permite que uma aplicação reduzir a frequência de uma política de escalamento pessimistic, que pode exigir o descarregamento atual &lt;xref:System.AppDomain&gt;ou poderá reciclar o processo.&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated">MemoryFailPoint verifica se memória suficiente espaço de endereços virtual consecutivos estão disponíveis em todos os recolha de lixo heaps e pode aumentar o tamanho do ficheiro de troca.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt; method to ensure that resources associated with MemoryFailPoint are released.</source>
          <target state="translated">MemoryFailPoint torna sem garantias sobre a disponibilidade de longo prazo da memória durante a duração da porta de, mas os chamadores devem sempre utilizar os &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;método para se certificar de que os recursos associados MemoryFailPoint são lançados.&lt;/xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use a memory gate, you must create a MemoryFailPoint object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Para utilizar uma porta de memória, tem de criar um objeto de MemoryFailPoint e especifique o número de megabytes (MB) de memória que a próxima operação poderá demorar a utilizar.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If enough memory is not available, an &lt;xref:System.InsufficientMemoryException&gt; exception is thrown.</source>
          <target state="translated">Se não existe memória suficiente disponível um &lt;xref:System.InsufficientMemoryException&gt;exceção é emitida.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">O parâmetro do construtor tem de ser um número inteiro positivo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A negative value raises an &lt;xref:System.ArgumentOutOfRangeException&gt; exception.</source>
          <target state="translated">Um valor negativo desencadeia um &lt;xref:System.ArgumentOutOfRangeException&gt;exceção.&lt;/xref:System.ArgumentOutOfRangeException&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint operates at a granularity of 16 MB.</source>
          <target state="translated">Funciona MemoryFailPoint granularidade de 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Os valores de tamanho inferior a 16 MB são tratados como 16 MB e outros valores são tratados como o múltiplo de maior seguinte de 16 MB.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Inicializa uma nova instância do <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe, especificando a quantidade de memória necessária para a execução com êxito.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">A quantidade de memória utilizada pela sua aplicação para processar um item de trabalho pode ser determinada empirically.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To estimate the amount of memory your application needs to process a request, consider using the &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt; method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Para estimar a quantidade de memória que a aplicação necessita de processar um pedido, considere utilizar o &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;método para determinar a quantidade de memória disponível antes e depois de chamar o método que processa o item de trabalho.&lt;/xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Runtime.MemoryFailPoint&gt; class for a code example that dynamically determines the value for the <ph id="ph1">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Consulte o &lt;xref:System.Runtime.MemoryFailPoint&gt;classe para um exemplo de código que dinamicamente determina o valor para o <ph id="ph1">`sizeInMegabytes`</ph> parâmetro.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">O tamanho de memória necessária, em megabytes.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This must be a positive value.</source>
          <target state="translated">Tem de ser um valor positivo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The specified memory size is negative.</source>
          <target state="translated">O tamanho de memória especificado é negativo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Não há memória suficiente para iniciar a execução de código protegido pela porta.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Versões de todos os recursos utilizados pelo <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call Dispose when you are finished using the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">É possível chamar Dispose quando tiver terminado de utilizando &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method leaves the &lt;xref:System.Runtime.MemoryFailPoint&gt; in an unusable state.</source>
          <target state="translated">O método de Dispose deixa o &lt;xref:System.Runtime.MemoryFailPoint&gt;num Estado não utilizável.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling &lt;xref:System.Runtime.MemoryFailPoint&gt;, you must release all references to the &lt;xref:System.Runtime.MemoryFailPoint&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Runtime.MemoryFailPoint&gt; was occupying.</source>
          <target state="translated">Após a chamada &lt;xref:System.Runtime.MemoryFailPoint&gt;, tem de libertar todas as referências ao &lt;xref:System.Runtime.MemoryFailPoint&gt;para que o recoletor de lixo pode reclame a memória que a &lt;xref:System.Runtime.MemoryFailPoint&gt;foi occupying.&lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>recursos não geridos limpeza<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> e <bpt id="p2">[</bpt>implementar um método eliminar<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Sempre chamada eliminar antes de libertar a última referência &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Runtime.MemoryFailPoint&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">Caso contrário, os recursos que está a utilizar não irão ser libertados até que as chamadas de recoletor de lixo a &lt;xref:System.Runtime.MemoryFailPoint&gt;do objeto <ph id="ph1">`Finalize`</ph> método.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">Garante que os recursos são libertados e outras operações de limpeza são efetuadas quando o recoletor de lixo da memória reclama o <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objeto.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The garbage collector calls the Finalize method when the current object is ready to be finalized.</source>
          <target state="translated">O recoletor de lixo chama o método Finalize quando o objeto atual está pronto para ser finalizada.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>