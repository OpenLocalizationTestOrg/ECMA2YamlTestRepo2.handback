<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4fc65b7facbac2800ad9e9c5023e5e5a31b62db</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.Compiler.ICodeGenerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3e22a102b5e43d50e7c968fa1475ed4e2f85ee0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c653153e7f9cd9813a927f2017f2a34342701c2f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines an interface for generating code.</source>
          <target state="translated">定義用於產生程式碼的介面。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;, ICodeGenerator, &lt;xref:System.CodeDom.Compiler.ICodeParser&gt;, and &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; 在.NET framework 1.0 和 1.1 版中，程式碼提供者所組成的實作&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;，ICodeGenerator， &lt;xref:System.CodeDom.Compiler.ICodeParser&gt;，和&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;。&lt;/xref:System.CodeDom.Compiler.ICodeCompiler&gt; &lt;/xref:System.CodeDom.Compiler.ICodeParser&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>, the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;, &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;, and &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt; methods are obsolete, and the methods of ICodeGenerator and &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; are directly available in the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; class.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>、 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;， &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;，和&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;方法已過時，ICodeGenerator 和&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;可直接使用&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;類別&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;&lt;/xref:System.CodeDom.Compiler.ICodeCompiler&gt;的方法和&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You should override those methods in your code provider implementation and not call the base methods.</source>
          <target state="translated">您應該在您的程式碼提供者實作中覆寫這些方法，並呼叫基底的方法。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developers of compilers can implement this interface to allow people to dynamically generate code in a particular language.</source>
          <target state="translated">編譯器的開發人員可以實作這個介面可讓人以動態方式產生特定語言的程式碼。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This can be used for a variety of purposes, such as creating code-generating wizards, creating dynamic assemblies with content that can be debugged, and for templated documents with embedded code, such as ASP.NET.</source>
          <target state="translated">這可用於各種用途，例如建立程式碼產生的精靈、 建立動態組件的內容才能進行偵錯，和使用內嵌程式碼，例如 ASP.NET 樣板化的文件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An ICodeGenerator implementation is typically obtained through a call to the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;.</source>
          <target state="translated">ICodeGenerator 實作通常取得透過&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;方法&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;呼叫</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">建立指定的值的逸出識別項。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CreateEscapedIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated">CreateEscapedIdentifier 測試是否與保留的識別項相衝突或語言關鍵字，如果是的話，會傳回具有特定語言的逸出程式碼格式設定的對等名稱。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">這被指逸出識別項。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The escaped identifier will contain the same <ph id="ph1">`value`</ph> but will have escape code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">逸出識別項將會包含相同<ph id="ph1">`value`</ph>，但會有逸出程式碼加入至區別的關鍵字的識別項的格式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">兩個實作的範例是前面<ph id="ph1">`value`</ph>與"@"或方括號<ph id="ph2">`value`</ph>與"["和"]"。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The string to create an escaped identifier for.</source>
          <target state="translated">要建立的逸出識別項的字串。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The escaped identifier for the value.</source>
          <target state="translated">值的逸出識別項。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">建立指定的值的有效識別項。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and returns a valid identifier name that does not conflict.</source>
          <target state="translated">CreateValidIdentifier 測試是否與保留的識別項衝突或語言關鍵字，並傳回有效的識別項名稱不會衝突。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The returned identifier will contain the same <ph id="ph1">`value`</ph> but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">傳回的識別項將會包含相同<ph id="ph1">`value`</ph>但如果它與衝突保留或語言關鍵字，就必須逸出程式碼加入至區別的關鍵字的識別項的格式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typically, if the value needs modification, value is returned preceded by an underscore "_".</source>
          <target state="translated">一般而言，如果需要修改這個值，會傳回值前面會加底線"_"上。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The string to generate a valid identifier for.</source>
          <target state="translated">要產生的有效識別項的字串。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">指定的值是有效的識別碼。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</source>
          <target state="translated">為指定的程式碼文件物件模型 (CodeDOM) 編譯單位中產生程式碼，並將它輸出至指定的文字寫入器，使用指定的選項。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to generate code for.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>產生的程式碼。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to output code to.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;輸出程式碼。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the options to use for generating code.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出要用於產生程式碼的選項。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</source>
          <target state="translated">產生指定的程式碼文件物件模型 (CodeDOM) 運算式的程式碼，並將它輸出至指定的文字寫入器。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the expression to generate code for.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出產生的程式碼運算式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to output code to.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;輸出程式碼。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the options to use for generating code.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出要用於產生程式碼的選項。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</source>
          <target state="translated">為指定的程式碼文件物件模型 (CodeDOM) 命名空間產生程式碼，並將它輸出至指定的文字寫入器，使用指定的選項。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeNamespace"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the namespace to generate code for.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeNamespace"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，表示要產生的程式碼的命名空間。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to output code to.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;輸出程式碼。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the options to use for generating code.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出要用於產生程式碼的選項。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</source>
          <target state="translated">產生指定的程式碼文件物件模型 (CodeDOM) 陳述式的程式碼，並將它輸出至指定的文字寫入器，使用指定的選項。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the CodeDOM elements to translate.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>含有要轉譯的 CodeDOM 項目。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to output code to.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;輸出程式碼。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the options to use for generating code.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出要用於產生程式碼的選項。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</source>
          <target state="translated">指定的程式碼文件物件模型 (CodeDOM) 型別宣告為產生程式碼，並將它輸出至指定的文字寫入器，使用指定的選項。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type to generate code for.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，表示要產生的程式碼的型別。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; to output code to.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;輸出程式碼。&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the options to use for generating code.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指出要用於產生程式碼的選項。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the type indicated by the specified <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得由指定的型別<bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type to return.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，表示要傳回的類型。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A text representation of the specified type for the language this code generator is designed to generate code in.</source>
          <target state="translated">指定的型別，此程式碼產生器設計來產生程式碼中的之語言的文字表示。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, passing in type System.Int32 will return "Integer".</source>
          <target state="translated">例如，在 Visual Basic 中，傳入 System.Int32 類型會傳回 「 整數 」。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the specified value is a valid identifier for the current language.</source>
          <target state="translated">取得值，指出指定的值是否為目前語言的有效識別項。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This method tests whether an identifier is valid.</source>
          <target state="translated">這個方法會測試是否為有效的識別項。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When implementing IsValidIdentifier in a derived class, design the method to test the value passed to it, and return <ph id="ph1">`true`</ph> only if the value fits the rules of the language and does not conflict with a keyword.</source>
          <target state="translated">當在衍生類別中實作 IsValidIdentifier，設計方法，即可測試值傳遞給它，並傳回<ph id="ph1">`true`</ph>只有值符合語言的規則，而且不會以關鍵字衝突。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The value to test for being a valid identifier.</source>
          <target state="translated">若要測試的是有效的識別碼值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> parameter is a valid identifier; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept>參數是有效的識別項，否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the generator provides support for the language features represented by the specified <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.GeneratorSupport"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">取得值，指出是否產生器提供代表所指定的語言功能的支援<bpt id="p1">&lt;xref href="System.CodeDom.Compiler.GeneratorSupport"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This method can be called with a number of &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary "Or" operator (&amp;#124;).</source>
          <target state="translated">這個方法可以呼叫具有數&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;旗標，一次，以加入一組適當的功能以及二進位檔的旗標來測試功能的一組 「 或者 」 運算子 (|)。&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The capabilities to test the generator for.</source>
          <target state="translated">若要測試的產生器功能。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified capabilities are supported; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果支援指定的功能。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Throws an exception if the specified value is not a valid identifier.</source>
          <target state="translated">如果指定的值不是有效的識別項，就會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation.</source>
          <target state="translated">而不是傳回值，這個方法擲回例外狀況，如果方法實作中根據指定的識別項無效。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Typically, the exception is an &lt;xref:System.ArgumentException&gt;.</source>
          <target state="translated">例外狀況通常是&lt;xref:System.ArgumentException&gt;.&lt;/xref:System.ArgumentException&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.</source>
          <target state="translated">這個方法可讓程式碼產生器實作此方法以產生無效的識別項的值為基礎的資訊錯誤訊息。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The identifier to validate.</source>
          <target state="translated">要驗證的識別項。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The identifier is not valid.</source>
          <target state="translated">識別項不是有效的。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>