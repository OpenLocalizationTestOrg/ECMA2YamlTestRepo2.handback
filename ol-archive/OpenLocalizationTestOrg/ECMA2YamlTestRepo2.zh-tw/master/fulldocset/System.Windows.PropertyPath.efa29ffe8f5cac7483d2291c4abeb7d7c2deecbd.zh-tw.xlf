<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2b59314fd7b97bb8d24f8a1bef9aa96abd0eb35</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.PropertyPath.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">faaa48ec1da41d4d296202a444d60da183e474f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6add39d459bb1aecf2557abb4d497767b9304fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements a data structure for describing a property as a path below another property, or below an owning type.</source>
          <target state="translated">實作資料結構，用以將屬性描述為路徑下的擁有者型別或另一個屬性下。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Property paths are used in data binding to objects, and in storyboards and timelines for animations.</source>
          <target state="translated">屬性路徑會用於資料物件的繫結，以及分鏡腳本與時間表的動畫。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class contains a string &lt;xref:System.Windows.PropertyPath.Path%2A&gt;, and list of dependency properties that are the &lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt; into the string&lt;xref:System.Windows.PropertyPath.Path%2A&gt;.</source>
          <target state="translated">這個類別包含字串&lt;xref:System.Windows.PropertyPath.Path%2A&gt;，和會&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;插入字串&lt;xref:System.Windows.PropertyPath.Path%2A&gt;.&lt;/xref:System.Windows.PropertyPath.Path%2A&gt;&lt;/xref:System.Windows.PropertyPath.PathParameters%2A&gt;的相依性屬性的清單&lt;/xref:System.Windows.PropertyPath.Path%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>PropertyPath supports two modes of behavior:       <bpt id="p1">**</bpt>Source mode<ept id="p1">**</ept> describes a path to a property that is used as a source for some other operation.</source>
          <target state="translated">PropertyPath 支援兩種模式的行為︰<bpt id="p1">**</bpt>來源模式<ept id="p1">**</ept>描述作業所用做為來源的某些其他屬性的路徑。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This mode is used by the &lt;xref:System.Windows.Data.Binding&gt; class to support data binding.</source>
          <target state="translated">這個模式由&lt;xref:System.Windows.Data.Binding&gt;類別，以支援資料繫結。&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Target mode<ept id="p1">**</ept> describes a path to a property that will be set as a target property.</source>
          <target state="translated"><bpt id="p1">**</bpt>目標模式<ept id="p1">**</ept>描述的路徑會設定為目標屬性的屬性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This mode is used by animation in support of storyboard and timeline setters.</source>
          <target state="translated">此模式會使用以腳本及時間表的 setter 支援動畫。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For instance, <ph id="ph1">`Background.Opacity`</ph> is a two-step path.</source>
          <target state="translated">比方說，<ph id="ph1">`Background.Opacity`</ph>是兩個步驟的路徑。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This path implies: first, find the <ph id="ph1">`Background`</ph> property of an object, get the value object that the <ph id="ph2">`Background`</ph> property is set to, and then get the value of the <ph id="ph3">`Opacity`</ph> property on that object.</source>
          <target state="translated">此路徑所示︰ 首先，尋找<ph id="ph1">`Background`</ph>屬性的物件，會得到值物件，<ph id="ph2">`Background`</ph>屬性設定為，，，然後取得的值<ph id="ph3">`Opacity`</ph>上該物件的屬性。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_PropertyPath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object property="propertyPath" .../&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_PropertyPath"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>propertyPath<ept id="p3">*</ept>    A string that is evaluated to be either a simple or complex property path.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_PropertyPath"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 屬性使用方式<ph id="ph1">```   &lt;object property="propertyPath" .../&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_PropertyPath"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 值<bpt id="p3">*</bpt>propertyPath<ept id="p3">*</ept>評估為簡單或複雜屬性的路徑的字串。      </target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The syntax for setting a PropertyPath in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is versatile but complex, and is described in the separate topic <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">在中設定 PropertyPath 語法<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>靈活，但是複雜，並會在個別的主題描述<bpt id="p1">[</bpt>PropertyPath XAML 語法<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyPath"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.PropertyPath"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</source>
          <target state="translated">這個建構函式有兩個完全不同的使用方式取決於是否它正在使用的繫結，或分鏡腳本目標的目標模式單一步驟的屬性路徑的來源模式屬性路徑。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If using this &lt;xref:System.Windows.PropertyPath&gt; in source mode for a binding, <ph id="ph1">`parameter`</ph> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> object model of the object that is being used as the source for a binding.</source>
          <target state="translated">如果使用這個&lt;xref:System.Windows.PropertyPath&gt;在來源模式下的繫結<ph id="ph1">`parameter`</ph>是字串，表示屬性名稱，或可以是字串，描述中的屬性的 「 逐步執行 「 路徑<ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>繫結做為來源之物件的物件模型。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For a binding property path, the character that identifies a "step" is a dot (.).</source>
          <target state="translated">針對繫結屬性路徑識別 」 步驟"的字元是句點 （.）。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Indexer references (including multiple indexers, and type differentiation) are also supported.</source>
          <target state="translated">也支援索引子 （包括多個索引子和型別差異） 的參考。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more details on the syntax of the string as specifically used by the &lt;xref:System.Windows.Data.Binding&gt; object, see &lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">如需詳細資訊&lt;xref:System.Windows.Data.Binding&gt;，請參閱&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Data.Binding&gt;明確地使用字串的語法</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A property used as a binding source need not be a dependency property.</source>
          <target state="translated">當做來源使用的繫結的屬性不需要相依性屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the binding updates two-way, the property referenced must be read-write.</source>
          <target state="translated">雙向更新繫結，如果參考的屬性必須可讀寫。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Also note that the binding target does have to be a dependency property.</source>
          <target state="translated">也請注意，繫結目標並沒有相依性屬性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>資料繫結概觀<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If using this &lt;xref:System.Windows.PropertyPath&gt; in target mode for a single-step path for a storyboard target, <ph id="ph1">`parameter`</ph> is generally provided as type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">如果使用這個&lt;xref:System.Windows.PropertyPath&gt;分鏡腳本目標的單一步驟路徑的目標模式<ph id="ph1">`parameter`</ph>通常提供做為型別&lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also specify a string that is the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;.</source>
          <target state="translated">您也可以指定為&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;。&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;的字串</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Either of these evaluate to the same result, because it is stored internally as a string.</source>
          <target state="translated">任一種評估相同的結果，因為它在內部儲存為字串。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A provided &lt;xref:System.Windows.DependencyProperty&gt; is converted to a string through &lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty&gt;會轉換成字串，以透過&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;.&lt;/xref:System.Windows.Markup.DependencyPropertyConverter&gt;&lt;/xref:System.Windows.DependencyProperty&gt;提供</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt; supports a qualified naming format for dependency properties, so you can specify a <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> qualified dependency property name string to the PropertyPath constructor in code.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.DependencyPropertyConverter&gt;支援限定的命名格式相依性屬性，因此您可以指定<bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>。<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept>限定 PropertyPath 建構函式程式碼中相依性屬性名稱的字串。&lt;/xref:System.Windows.Markup.DependencyPropertyConverter&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The qualified path to the dependency property identifier is a different concept than a complex path.</source>
          <target state="translated">相依性屬性的識別項的完整的路徑是不同的概念，比複雜的路徑。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A complex-path &lt;xref:System.Windows.PropertyPath&gt; should instead be created with the &lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName&gt; constructor.</source>
          <target state="translated">複合路徑&lt;xref:System.Windows.PropertyPath&gt;改以建立&lt;xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName&gt;建構函式。&lt;/xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A property path that either describes a path to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> property, or a single dependency property.</source>
          <target state="translated">屬性路徑，其中描述的路徑<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>屬性，或是單一相依性屬性。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyPath"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, with the provided pathing token string and parameters.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.PropertyPath"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，以提供的路徑的語彙基元字串和參數。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This signature is generally only used for target-mode &lt;xref:System.Windows.PropertyPath&gt; usages with complex paths.</source>
          <target state="translated">此簽章通常僅用於目標模式&lt;xref:System.Windows.PropertyPath&gt;複雜的路徑與使用方式。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This constructor supports <ph id="ph1">`params`</ph> for the <ph id="ph2">`pathParameters`</ph> constructor argument.</source>
          <target state="translated">這個建構函式支援<ph id="ph1">`params`</ph>如<ph id="ph2">`pathParameters`</ph>建構函式引數。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Therefore you can specify the contents of <ph id="ph1">`pathParameters`</ph> as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the <ph id="ph2">`pathParameters`</ph> items.</source>
          <target state="translated">因此，您可以指定的內容<ph id="ph1">`pathParameters`</ph>為一系列以逗號分隔的建構函式引數所填入的陣列，而不是無須維度陣列，並於其中填入它與<ph id="ph2">`pathParameters`</ph>項目。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Each item you specify must be one of the following types: &lt;xref:System.Windows.DependencyProperty&gt;, &lt;xref:System.Reflection.PropertyInfo&gt;, &lt;xref:System.ComponentModel.PropertyDescriptor&gt;.</source>
          <target state="translated">您指定每個項目必須是下列類型之一: &lt;xref:System.Windows.DependencyProperty&gt; &lt;xref:System.Reflection.PropertyInfo&gt;、 &lt;xref:System.ComponentModel.PropertyDescriptor&gt;.&lt;/xref:System.ComponentModel.PropertyDescriptor&gt; &lt;/xref:System.Reflection.PropertyInfo&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information on the requirements of the parameters, see &lt;xref:System.Windows.PropertyPath.Path%2A&gt; and &lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;.</source>
          <target state="translated">如需有關參數的需求的詳細資訊，請參閱&lt;xref:System.Windows.PropertyPath.Path%2A&gt;和&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;。&lt;/xref:System.Windows.PropertyPath.PathParameters%2A&gt; &lt;/xref:System.Windows.PropertyPath.Path%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A string that specifies the &lt;xref:System.Windows.PropertyPath.Path*&gt;, in a tokenized format.</source>
          <target state="translated">字串，指定&lt;xref:System.Windows.PropertyPath.Path*&gt;，語彙基元化的格式。&lt;/xref:System.Windows.PropertyPath.Path*&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An array of objects that sets the &lt;xref:System.Windows.PropertyPath.PathParameters*&gt;.</source>
          <target state="translated">設定&lt;xref:System.Windows.PropertyPath.PathParameters*&gt;.&lt;/xref:System.Windows.PropertyPath.PathParameters*&gt;物件的陣列</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets the string that describes the path.</source>
          <target state="translated">取得或設定描述路徑的字串。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The string that describes the path.</source>
          <target state="translated">描述路徑的字串。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets the list of parameters to use when the path refers to indexed parameters.</source>
          <target state="translated">取得要使用該路徑參考到索引參數的參數清單。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The properties for a &lt;xref:System.Windows.PropertyPath&gt; are typically established through the constructors.</source>
          <target state="translated">屬性&lt;xref:System.Windows.PropertyPath&gt;通常透過建構函式所建立。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For setting PathParameters, the &lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt; constructor is particularly convenient because the <ph id="ph1">`pathParameters`</ph> constructor argument is designated as <ph id="ph2">`params`</ph>, meaning that you do not need to create or dimension an array for construction.</source>
          <target state="translated">設定 PathParameters，&lt;xref:System.Windows.PropertyPath.%23ctor%2A&gt;建構函式會格外方便因為<ph id="ph1">`pathParameters`</ph>建構函式引數指定為<ph id="ph2">`params`</ph>，這表示您不需要建立或維度的陣列建構的。&lt;/xref:System.Windows.PropertyPath.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You simply specify each member of the array as an additional parameter.</source>
          <target state="translated">您只需指定陣列的每個成員，做為額外的參數。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the final property that is the target is a &lt;xref:System.Windows.Freezable&gt; type, that value will be cloned.</source>
          <target state="translated">如果最後一個屬性的目標是&lt;xref:System.Windows.Freezable&gt;輸入時，值將會複製。&lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>概觀腳本<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</source>
          <target state="translated">實際評估屬性鏈結是由 分鏡腳本動畫機制執行。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>At the &lt;xref:System.Windows.PropertyPath&gt; level, no validation is performed to make sure that the steps of the path connect at all.</source>
          <target state="translated">在&lt;xref:System.Windows.PropertyPath&gt;層級，不會執行驗證以確定路徑的步驟完全連接。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For instance, you can construct a property path that has &lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt; as the first step, and &lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName&gt; as the second step.</source>
          <target state="translated">比方說，您可以建構包含的屬性路徑&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt;的第一個步驟，和&lt;xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName&gt;做為第二個步驟。&lt;/xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName&gt; &lt;/xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>But such a property path would fail if actually applied as a target, because the Brush type that fills &lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt; does not have a &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">但這類屬性的路徑將會失敗實際套用做為目標，如果因為筆刷類型的填滿&lt;xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt;沒有&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName&gt;屬性。&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Invalid property paths fail silently.</source>
          <target state="translated">無效的屬性路徑會以無訊息模式失敗。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../Topic/Storyboards%20Overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>概觀腳本<ept id="p1">](../Topic/Storyboards%20Overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept> When you use a &lt;xref:System.Windows.PropertyPath&gt; to describe a property reference in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, as an attribute value, the string that you specify is first handled by a type converter (&lt;xref:System.Windows.PropertyPathConverter&gt;).</source>
          <target state="translated"><bpt id="p1">**</bpt>XAML:<ept id="p1">**</ept>當您使用&lt;xref:System.Windows.PropertyPath&gt;來描述中的屬性參考<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>，如屬性值，您所指定的字串第一次由型別轉換子 (&lt;xref:System.Windows.PropertyPathConverter&gt;)。&lt;/xref:System.Windows.PropertyPathConverter&gt; &lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This type converter then processes the string and based on its syntax will call one of the &lt;xref:System.Windows.PropertyPath&gt; constructor signatures.</source>
          <target state="translated">此型別轉換子，以處理字串，然後根據它的語法會呼叫其中一種&lt;xref:System.Windows.PropertyPath&gt;建構函式簽章。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This indirection through the type converter handling an attribute value is generally how you use &lt;xref:System.Windows.PropertyPath&gt; in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, rather than declaring a &lt;xref:System.Windows.PropertyPath&gt; object element and then applying specific values to attributes such as &lt;xref:System.Windows.PropertyPath.Path%2A&gt; and PathParameters.</source>
          <target state="translated">處理屬性值的類型轉換子透過這個間接取值通常是您如何使用&lt;xref:System.Windows.PropertyPath&gt;中<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>，而不是宣告&lt;xref:System.Windows.PropertyPath&gt;物件項目，然後這類屬性套用特定值&lt;xref:System.Windows.PropertyPath.Path%2A&gt;和 PathParameters。&lt;/xref:System.Windows.PropertyPath.Path%2A&gt; &lt;/xref:System.Windows.PropertyPath&gt; &lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>PropertyPath XAML 語法<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_PathParameters"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of the &lt;xref:System.Windows.PropertyPath&gt; type are not typically set in a direct <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_PathParameters"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用量成員&lt;xref:System.Windows.PropertyPath&gt;類型未通常設定在直接<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>語法。&lt;/xref:System.Windows.PropertyPath&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The parameter list.</source>
          <target state="translated">參數清單。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>