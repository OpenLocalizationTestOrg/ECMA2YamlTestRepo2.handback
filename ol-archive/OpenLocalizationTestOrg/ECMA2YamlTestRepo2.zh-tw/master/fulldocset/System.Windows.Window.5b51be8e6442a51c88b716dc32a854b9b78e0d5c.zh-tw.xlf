<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7172c27ebcd4693a42b484604cff94ac6acd1306</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Window.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eef6633ff6004bfbc32327bf96ae6582c91a7d5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582455b08242d27076383f3e723bd48f521b75e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">提供建立、 設定、 顯示，以及管理視窗和對話方塊的存留期的能力。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">使用者與獨立應用程式之間點是互動的一個視窗。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window consists of two distinct areas:      -   A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>視窗包含兩個不同區域:-非工作區，於裝載 windows 裝飾，包括圖示、 標題、 系統功能表上，最小化按鈕、 最大化按鈕、 [還原] 按鈕、 [關閉] 按鈕和框線。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   A client area, which hosts application-specific content.</source>
          <target state="translated">的裝載應用程式特定內容工作區。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A standard window is shown in the following figure:       <bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept>       Window encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:       <bpt id="p3">**</bpt>Lifetime Management<ept id="p3">**</ept>: &lt;xref:System.Windows.Window.Activate%2A&gt;, &lt;xref:System.Windows.Window.Activated&gt;, &lt;xref:System.Windows.Window.Close%2A&gt;, &lt;xref:System.Windows.Window.Closed&gt;, &lt;xref:System.Windows.Window.Closing&gt;, &lt;xref:System.Windows.Window.Deactivated&gt;, &lt;xref:System.Windows.Window.Hide%2A&gt;, &lt;xref:System.Windows.Window.IsActive%2A&gt;, &lt;xref:System.Windows.Window.Show%2A&gt;, &lt;xref:System.Windows.Window.SourceInitialized&gt;.</source>
          <target state="translated">下圖顯示標準的視窗︰<bpt id="p1">![</bpt>視窗項目<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>視窗項目<ept id="p2">")</ept>視窗封裝建立、 設定、 顯示，以及管理視窗和對話方塊中的存留期的能力，並提供下列服務︰<bpt id="p3">**</bpt>生命週期管理<ept id="p3">**</ept>: &lt;xref:System.Windows.Window.Activate%2A&gt; &lt;xref:System.Windows.Window.Activated&gt; &lt;xref:System.Windows.Window.Close%2A&gt; &lt;xref:System.Windows.Window.Closed&gt; &lt;xref:System.Windows.Window.Closing&gt; &lt;xref:System.Windows.Window.Deactivated&gt; &lt;xref:System.Windows.Window.Hide%2A&gt; &lt;xref:System.Windows.Window.IsActive%2A&gt; &lt;xref:System.Windows.Window.Show%2A&gt;、 &lt;xref:System.Windows.Window.SourceInitialized&gt;.&lt;/xref:System.Windows.Window.SourceInitialized&gt; &lt;/xref:System.Windows.Window.Show%2A&gt; &lt;/xref:System.Windows.Window.IsActive%2A&gt; &lt;/xref:System.Windows.Window.Hide%2A&gt; &lt;/xref:System.Windows.Window.Deactivated&gt; &lt;/xref:System.Windows.Window.Closing&gt; &lt;/xref:System.Windows.Window.Closed&gt; &lt;/xref:System.Windows.Window.Close%2A&gt; &lt;/xref:System.Windows.Window.Activated&gt; &lt;/xref:System.Windows.Window.Activate%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.GetWindow%2A&gt;, &lt;xref:System.Windows.Window.OwnedWindows%2A&gt;, &lt;xref:System.Windows.Window.Owner%2A&gt;.</source>
          <target state="translated"><bpt id="p1">**</bpt>視窗管理<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.GetWindow%2A&gt; &lt;xref:System.Windows.Window.OwnedWindows%2A&gt;、 &lt;xref:System.Windows.Window.Owner%2A&gt;.&lt;/xref:System.Windows.Window.Owner%2A&gt; &lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.GetWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;, &lt;xref:System.Windows.Window.ContentRendered&gt;, &lt;xref:System.Windows.Window.DragMove%2A&gt;, &lt;xref:System.Windows.Window.Icon%2A&gt;, &lt;xref:System.Windows.Window.Left%2A&gt;, &lt;xref:System.Windows.Window.LocationChanged&gt;, &lt;xref:System.Windows.Window.ResizeMode%2A&gt;, &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;, &lt;xref:System.Windows.Window.ShowActivated%2A&gt;, &lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;, &lt;xref:System.Windows.Window.SizeToContent%2A&gt;, &lt;xref:System.Windows.Window.StateChanged&gt;, &lt;xref:System.Windows.Window.Title%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, &lt;xref:System.Windows.Window.Topmost%2A&gt;, &lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;, &lt;xref:System.Windows.Window.WindowState%2A&gt;, &lt;xref:System.Windows.Window.WindowStyle%2A&gt;       <bpt id="p2">**</bpt>Dialog Boxes<ept id="p2">**</ept>: &lt;xref:System.Windows.Window.DialogResult%2A&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated"><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;, &lt;xref:System.Windows.Window.ContentRendered&gt;, &lt;xref:System.Windows.Window.DragMove%2A&gt;, &lt;xref:System.Windows.Window.Icon%2A&gt;, &lt;xref:System.Windows.Window.Left%2A&gt;, &lt;xref:System.Windows.Window.LocationChanged&gt;, &lt;xref:System.Windows.Window.ResizeMode%2A&gt;, &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;, &lt;xref:System.Windows.Window.ShowActivated%2A&gt;, &lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;, &lt;xref:System.Windows.Window.SizeToContent%2A&gt;, &lt;xref:System.Windows.Window.StateChanged&gt;, &lt;xref:System.Windows.Window.Title%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, &lt;xref:System.Windows.Window.Topmost%2A&gt;, &lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;, &lt;xref:System.Windows.Window.WindowState%2A&gt;, &lt;xref:System.Windows.Window.WindowStyle%2A&gt;       <bpt id="p2">**</bpt>Dialog Boxes<ept id="p2">**</ept>: &lt;xref:System.Windows.Window.DialogResult%2A&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;&lt;/xref:System.Windows.Window.DialogResult%2A&gt;&lt;/xref:System.Windows.Window.WindowStyle%2A&gt;&lt;/xref:System.Windows.Window.WindowState%2A&gt;&lt;/xref:System.Windows.Window.WindowStartupLocation%2A&gt;&lt;/xref:System.Windows.Window.Topmost%2A&gt;&lt;/xref:System.Windows.Window.Top%2A&gt;&lt;/xref:System.Windows.Window.Title%2A&gt;&lt;/xref:System.Windows.Window.StateChanged&gt;&lt;/xref:System.Windows.Window.SizeToContent%2A&gt;&lt;/xref:System.Windows.Window.ShowInTaskbar%2A&gt;&lt;/xref:System.Windows.Window.ShowActivated%2A&gt;&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;&lt;/xref:System.Windows.Window.ResizeMode%2A&gt;&lt;/xref:System.Windows.Window.LocationChanged&gt;&lt;/xref:System.Windows.Window.Left%2A&gt;&lt;/xref:System.Windows.Window.Icon%2A&gt;&lt;/xref:System.Windows.Window.DragMove%2A&gt;&lt;/xref:System.Windows.Window.ContentRendered&gt;&lt;/xref:System.Windows.Window.AllowsTransparency%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;xref:System.Windows.Application&gt; exposes special support for managing all of the windows in an application:      -   Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">此外，&lt;xref:System.Windows.Application&gt;會公開用於管理所有的 windows 應用程式中的特殊支援:-應用程式會維護一份目前具現化應用程式中的所有視窗。&lt;/xref:System.Windows.Application&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This list is exposed by the &lt;xref:System.Windows.Application.Windows%2A&gt; property.</source>
          <target state="translated">這份清單由&lt;xref:System.Windows.Application.Windows%2A&gt;屬性。&lt;/xref:System.Windows.Application.Windows%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>-   By default, &lt;xref:System.Windows.Application.MainWindow%2A&gt; is automatically set with a reference to the first Window that is instantiated in an application.</source>
          <target state="translated">-根據預設，&lt;xref:System.Windows.Application.MainWindow%2A&gt;具現化應用程式中的第一個視窗的參考會自動設定。&lt;/xref:System.Windows.Application.MainWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">這藉此讓主應用程式視窗的視窗。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A Window can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">視窗可以使用標記、 標記和程式碼後置或程式碼來實作。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Window is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated">視窗是主要用來顯示視窗和對話方塊的獨立應用程式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use &lt;xref:System.Windows.Navigation.NavigationWindow&gt; instead; &lt;xref:System.Windows.Navigation.NavigationWindow&gt; derives from Window and extends it with browser-style navigation support.</source>
          <target state="translated">不過，應用程式需要瀏覽視窗層級，例如精靈中，您可以改用&lt;xref:System.Windows.Navigation.NavigationWindow&gt;;&lt;xref:System.Windows.Navigation.NavigationWindow&gt;衍生自視窗，並使用瀏覽器樣式瀏覽支援進行擴充。&lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Islands of navigable content can be incorporated into other content and content containers using &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 島的可瀏覽內容可以納入使用&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt;其他內容與內容的容器</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Window needs <ph id="ph1">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated">視窗必須<ph id="ph1">`UnmanagedCode`</ph>具現化的安全性權限。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This has the following consequences:      -   <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated">這會有下列結果:- <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]</ph>-已部署的獨立應用程式會要求從網際網路或近端內部網路區域啟動時的權限提高權限。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-   <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated">-<ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>所要求的任何項目小於完整權限將無法具現化的視窗和對話方塊。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">獨立應用程式部署和安全性考量的相關資訊，請參閱<bpt id="p1">[</bpt>WPF 安全性策略-平台安全性<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A Window is a &lt;xref:System.Windows.Controls.ContentControl&gt;, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">視窗是&lt;xref:System.Windows.Controls.ContentControl&gt;，這表示它可以包含單一物件的任何類型 （例如字串、 影像或工作面板）。&lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Windows.Controls.ContentControl&gt; class.</source>
          <target state="translated">如需詳細資訊，請參閱&lt;xref:System.Windows.Controls.ContentControl&gt;類別。&lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Also, Window is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">此外，視窗是根項目，因此，不能是另一個項目內容的一部分。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties set on a Window through a style will not be applied at run time.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;， &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;， &lt;xref:System.Windows.Window.Top%2A&gt;，和&lt;xref:System.Windows.Window.Left%2A&gt;透過樣式的視窗上設定的屬性將不會在執行階段套用。&lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Customizing the Window Control    To apply the same property settings to multiple Window controls, use the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.</source>
          <target state="translated">視窗控制項以自訂適用於多個視窗控制項使用相同的屬性設定&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;屬性。&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can modify the default &lt;xref:System.Windows.Controls.ControlTemplate&gt; to give the control a unique appearance.</source>
          <target state="translated">您可以修改預設&lt;xref:System.Windows.Controls.ControlTemplate&gt;來提供獨特的外觀的控制項。&lt;/xref:System.Windows.Controls.ControlTemplate&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about creating a &lt;xref:System.Windows.Controls.ControlTemplate&gt;, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需有關建立&lt;xref:System.Windows.Controls.ControlTemplate&gt;，請參閱<bpt id="p1">[</bpt>自訂現有控制項的外觀，藉由建立 ControlTemplate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。&lt;/xref:System.Windows.Controls.ControlTemplate&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To see the parts and states that are specific to the Window, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">若要查看的組件和特定視窗的狀態，請參閱<bpt id="p1">[</bpt>視窗樣式和範本<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">對這個控制項的相依性屬性可能會設定控制項的預設樣式。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">如果屬性設定為預設樣式，屬性可能會變更其預設值時該控制項會出現在應用程式中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">預設樣式是由決定由哪個桌面主題時，會使用應用程式正在執行。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>預設 WPF 佈景主題<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Setting a visual property will only have an effect if that property is both present in Window control's default template and is set by using a .</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 設定視覺化屬性只會影響如果該屬性會出現在視窗控制項的預設範本，並使用的設定。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)</ept>.</source>
          <target state="translated">您可以找到的視覺屬性清單中的 「 變更 Visual 結構的控制項 」 一節中<bpt id="p1">[</bpt>自訂現有控制項的外觀，藉由建立 ControlTemplate<ept id="p1">](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The constructor initializes the &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties to their default &lt;xref:System.Windows.Window&gt; values.</source>
          <target state="translated">建構函式初始化&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;， &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;， &lt;xref:System.Windows.Window.Top%2A&gt;，和&lt;xref:System.Windows.Window.Left%2A&gt;屬性設為預設&lt;xref:System.Windows.Window&gt;值。&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a window is created within an &lt;xref:System.AppDomain&gt; that has an &lt;xref:System.Windows.Application&gt; object, the constructor adds the &lt;xref:System.Windows.Window&gt; object to the set of &lt;xref:System.Windows.Application&gt;-managed windows via the &lt;xref:System.Windows.Application.Windows%2A&gt; property of the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">如果在建立視窗&lt;xref:System.AppDomain&gt;具有&lt;xref:System.Windows.Application&gt;物件建構函式加入&lt;xref:System.Windows.Window&gt;物件的集合&lt;xref:System.Windows.Application&gt;-管理透過 windows&lt;xref:System.Windows.Application.Windows%2A&gt;屬性&lt;xref:System.Windows.Application&gt;物件。&lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Application.Windows%2A&gt; &lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Application&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">嘗試將視窗帶到前景並啟動它。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">規則，判斷是否已啟動 視窗會與所使用的相同<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph><ph id="ph2">`SetForegroundWindow`</ph>函式 (User32.dll)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, &lt;xref:System.Windows.Application.Activated&gt; event is raised.</source>
          <target state="translated">如果在啟動視窗則<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>不是使用者的前景應用程式的應用程式&lt;xref:System.Windows.Application.Activated&gt;就會引發事件。&lt;/xref:System.Windows.Application.Activated&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 裝載在瀏覽器視窗時，就無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> was successfully activated; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>已成功啟動，否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">視窗變成前景視窗時發生。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A window is activated (becomes the foreground window) when:      -   The window is first opened.</source>
          <target state="translated">在啟動視窗 （變成前景視窗） 時:-第一次開啟視窗。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-   A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">的選取它，使用滑鼠按 ALT + TAB，或從 工作管理員來切換視窗使用者。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-   A user clicks the window's taskbar button.</source>
          <target state="translated">-使用者按一下視窗的工作列按鈕。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows that need to detect when they become activate can handle the Activated event.</source>
          <target state="translated">需要偵測當它們變成啟動的 Windows 可以處理已啟動事件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">視窗第一次啟動之後，它可能會停用並重新啟動幾次在其存留期間。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
          <target state="translated">如果應用程式的狀態或行為取決於其啟動狀態，它可以檢查&lt;xref:System.Windows.Window.IsActive%2A&gt;以判斷哪一個啟用狀態的英吋&lt;/xref:System.Windows.Window.IsActive%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An application can also be &lt;xref:System.Windows.Application.Activated&gt;.</source>
          <target state="translated">應用程式也可以是&lt;xref:System.Windows.Application.Activated&gt;.&lt;/xref:System.Windows.Application.Activated&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">取得或設定值，這個值，指出視窗的工作區是否支援透明度。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Controls.Control.Background%2A&gt; property of a window is set to a transparent color, using &lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt; for example, the window remains opaque.</source>
          <target state="translated">當&lt;xref:System.Windows.Controls.Control.Background%2A&gt;視窗的屬性設定為透明色彩時，使用&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;比方說，視窗會保留不透明。&lt;/xref:System.Windows.Media.Brushes.Transparent%2A&gt; &lt;/xref:System.Windows.Controls.Control.Background%2A&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">這表示無法看到桌面及任何執行中的應用程式"beneath"視窗。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To enable this type of transparency, AllowsTransparency must be set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">若要啟用這種類型的透明度，AllowsTransparency 必須設為<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AllowsTransparency exists to facilitate the creation of non-rectangular windows, and, consequently, when AllowsTransparency is set to <ph id="ph1">`true`</ph>, a window's &lt;xref:System.Windows.Window.WindowStyle%2A&gt; property must be set to &lt;xref:System.Windows.WindowStyle&gt;.</source>
          <target state="translated">AllowsTransparency 用來協助建立非矩形視窗，存在，因此，當 AllowsTransparency 設<ph id="ph1">`true`</ph>，視窗的&lt;xref:System.Windows.Window.WindowStyle%2A&gt;屬性必須設定為&lt;xref:System.Windows.WindowStyle&gt;.&lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.Window.WindowStyle%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowAllowsTransparency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.AllowsTransparencyProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowAllowsTransparency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.AllowsTransparencyProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.AllowsTransparencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window supports transparency; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果視窗支援透明度。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A window that has a &lt;xref:System.Windows.Window.WindowStyle*&gt; value of anything other than <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">擁有的視窗&lt;xref:System.Windows.Window.WindowStyle*&gt;值以外的任何項目<bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Window.WindowStyle*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.AllowsTransparency*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.AllowsTransparency*&gt;相依性屬性。&lt;/xref:System.Windows.Window.AllowsTransparency*&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">覆寫這個方法，以排列和調整大小的視窗和其子項目。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>ArrangeOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">ArrangeOverride 不會呼叫時的&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性的值為&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, ArrangeOverride is called.</source>
          <target state="translated">如果值&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性&lt;xref:System.Windows.Visibility&gt;或&lt;xref:System.Windows.Visibility&gt;，稱為 ArrangeOverride。&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 時&lt;xref:System.Windows.Window.Show%2A&gt;或&lt;xref:System.Windows.Window.ShowDialog%2A&gt;呼叫時，&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性&lt;xref:System.Windows.Window&gt;會設定為&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，以反映最終大小的視窗應該用來排列本身和其子系。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the actual size that was used.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，以反映所使用的實際大小。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Manually closes a <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">手動關閉<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:      -   ALT+F4.</source>
          <target state="translated">A&lt;xref:System.Windows.Window&gt;可以使用其中一種幾個，請關閉已知和系統提供的機制位於標題列，包括:-ALT + F4。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-   System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">系統功能表 |<bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">-<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept> 按鈕。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:      -   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated">&lt;xref:System.Windows.Window&gt;也可以關閉使用其中一種數種知名機制，用戶端區域內所提供的開發人員，包括:-<bpt id="p1">**</bpt>檔案<ept id="p1">**</ept>|<bpt id="p2">**</bpt>結束<ept id="p2">**</ept>主視窗上。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated">-   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> |<bpt id="p2">**</bpt>關閉<ept id="p2">**</ept>或<bpt id="p3">**</bpt>關閉<ept id="p3">**</ept>子視窗上的按鈕。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set &lt;xref:System.Windows.Window.DialogResult%2A&gt;, which automatically closes a window that was opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph><bpt id="p1">**</bpt>確定<ept id="p1">**</ept>和<bpt id="p2">**</bpt>取消<ept id="p2">**</ept>] 對話方塊上的按鈕也是開發人員提供，雖然可能會設定&lt;xref:System.Windows.Window.DialogResult%2A&gt;，這會自動關閉，已藉由呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;開啟的視窗&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These mechanisms require you to explicitly call Close to close a window.</source>
          <target state="translated">這些機制都會要求您明確地關閉視窗呼叫 Close。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If a window, opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, and with a &lt;xref:System.Windows.Controls.Button&gt; with its &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 藉由呼叫開啟的視窗中，如果&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，與&lt;xref:System.Windows.Controls.Button&gt;具有其&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;屬性設為 true，會自動關閉，請按一下按鈕，或按下 esc 鍵時。&lt;/xref:System.Windows.Controls.Button.IsCancel%2A&gt; &lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the window was opened using &lt;xref:System.Windows.Window.Show%2A&gt;, however, Close must be explicitly called, such as from &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the &lt;xref:System.Windows.Controls.Button&gt;.</source>
          <target state="translated">如果視窗已開啟使用&lt;xref:System.Windows.Window.Show%2A&gt;，不過，關閉必須明確呼叫，例如從&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;&lt;xref:System.Windows.Controls.Button&gt;.&lt;/xref:System.Windows.Controls.Button&gt;的事件處理常式&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Closing a window causes the &lt;xref:System.Windows.Window.Closing&gt; event to be raised.</source>
          <target state="translated">關閉視窗會導致&lt;xref:System.Windows.Window.Closing&gt;會引發事件。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Window.Closing&gt; event isn't canceled, the following occurs:      -   The &lt;xref:System.Windows.Window&gt; is removed from &lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt; (if an &lt;xref:System.Windows.Application&gt; object exists).</source>
          <target state="translated">如果&lt;xref:System.Windows.Window.Closing&gt;事件未取消，則發生下列情況:-&lt;xref:System.Windows.Window&gt;被移除了&lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt;(如果&lt;xref:System.Windows.Application&gt;物件存在)。&lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window&gt; is removed from the owner &lt;xref:System.Windows.Window&gt; if the owner/owned relationship was established before the owned &lt;xref:System.Windows.Window&gt; was shown and after the owner &lt;xref:System.Windows.Window&gt; was opened.</source>
          <target state="translated">-&lt;xref:System.Windows.Window&gt;移除擁有者&lt;xref:System.Windows.Window&gt;如果已建立擁有者/擁有關聯性之前擁有&lt;xref:System.Windows.Window&gt;顯示和擁有者之後&lt;xref:System.Windows.Window&gt;已開啟。&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
          <target state="translated">-&lt;xref:System.Windows.Window.Closed&gt;就會引發事件。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-   Unmanaged resources created by the &lt;xref:System.Windows.Window&gt; are disposed.</source>
          <target state="translated">Unmanaged 資源所建立&lt;xref:System.Windows.Window&gt;仍會獲得處置。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-   If &lt;xref:System.Windows.Window.ShowDialog%2A&gt; was called to show the &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt; returns.</source>
          <target state="translated">-如果&lt;xref:System.Windows.Window.ShowDialog%2A&gt;已呼叫以顯示&lt;xref:System.Windows.Window&gt;，&lt;xref:System.Windows.Window.ShowDialog%2A&gt;傳回。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Closing a &lt;xref:System.Windows.Window&gt; causes any windows that it owns to be closed.</source>
          <target state="translated">關閉&lt;xref:System.Windows.Window&gt;會使任何其擁有要關閉的視窗。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Furthermore, closing a &lt;xref:System.Windows.Window&gt; may cause an application to stop running depending on how the &lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt; property is set.</source>
          <target state="translated">此外，關閉&lt;xref:System.Windows.Window&gt;可能會導致應用程式停止執行依據&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt;屬性設定。&lt;/xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 裝載在瀏覽器視窗時，就無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">當視窗關閉時，就會發生。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">之後會引發這個事件，無法防止視窗關閉。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Hide<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>&gt; 設定，或&lt;&gt; <ept id="p1">*</ept>&gt;， &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>&gt;，或&lt;&gt; <ept id="p2">*</ept>&gt; 正在關閉視窗時，會呼叫。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs directly after &lt;xref:System.Windows.Window.Close*&gt; is called, and can be handled to cancel window closure.</source>
          <target state="translated">直接在之後，就會發生&lt;xref:System.Windows.Window.Close*&gt;呼叫，而且可以處理取消關閉視窗。&lt;/xref:System.Windows.Window.Close*&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Closing can be handled to detect when a window is being closed (for example, when &lt;xref:System.Windows.Window.Close%2A&gt; is called).</source>
          <target state="translated">可以處理結尾，以偵測視窗關閉時 (例如，當&lt;xref:System.Windows.Window.Close%2A&gt;稱為)。&lt;/xref:System.Windows.Window.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Furthermore, Closing can be used to prevent a window from closing.</source>
          <target state="translated">此外，右可用來防止無法關閉視窗。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To prevent a window from closing, you can set the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; property of the &lt;xref:System.ComponentModel.CancelEventArgs&gt; argument to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">若要避免關閉視窗，您可以設定&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;屬性&lt;xref:System.ComponentModel.CancelEventArgs&gt;引數<ph id="ph1">`true`</ph>。&lt;/xref:System.ComponentModel.CancelEventArgs&gt; &lt;/xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The Closing event is raised when &lt;xref:System.Windows.Window.Close%2A&gt; is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated">就會引發 Closing 事件時&lt;xref:System.Windows.Window.Close%2A&gt;呼叫時，如果按一下視窗的 [關閉] 按鈕，或如果使用者按下 ALT + F4。&lt;/xref:System.Windows.Window.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's Closing event is not raised.</source>
          <target state="translated">如果擁有的視窗已開啟由其擁有者視窗使用&lt;xref:System.Windows.Window.Show%2A&gt;，而且擁有者視窗已關閉，不會引發擁有的視窗關閉事件。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the owner of a window is closed (see &lt;xref:System.Windows.Window.Owner%2A&gt;), Closing is not raised on the owned window.</source>
          <target state="translated">如果已關閉之視窗的擁有者 (請參閱&lt;xref:System.Windows.Window.Owner%2A&gt;)，擁有的視窗上，不會引發結尾。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called, the Closing event for each window is raised.</source>
          <target state="translated">如果&lt;xref:System.Windows.Application.Shutdown%2A&gt;呼叫時，關閉事件的每個視窗，就會引發。&lt;/xref:System.Windows.Application.Shutdown%2A&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, if Closing is canceled, cancellation is ignored.</source>
          <target state="translated">不過，如果取消關閉時，會忽略取消。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If a session ends because a user logs off or shuts down, Closing is not raised; handle &lt;xref:System.Windows.Application.SessionEnding&gt; to implement code that cancels application closure.</source>
          <target state="translated">如果工作階段結束，因為使用者登出或關機，則不會引發結尾;處理&lt;xref:System.Windows.Application.SessionEnding&gt;實作取消應用程式終止的程式碼。&lt;/xref:System.Windows.Application.SessionEnding&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the Closing event, cancel it, and call the &lt;xref:System.Windows.Window.Hide%2A&gt; method.</source>
          <target state="translated">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不想每次您將其顯示個體化視窗，您可以處理 Closing 事件、 取消，並呼叫&lt;xref:System.Windows.Window.Hide%2A&gt;方法。&lt;/xref:System.Windows.Window.Hide%2A&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to reopen it.</source>
          <target state="translated">然後，您可以呼叫&lt;xref:System.Windows.Window.Show%2A&gt;相同的執行個體開啟。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Close<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>&gt; 設定，或&lt;&gt; <ept id="p1">*</ept>&gt;， &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>&gt;，或&lt;&gt; <ept id="p2">*</ept>&gt; 正在關閉視窗時，會呼叫。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">視窗內容呈現後發生。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">視窗沒有任何內容，不會引發這個事件。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">視窗變成背景視窗時發生。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A window is deactivated (becomes a background window) when:      -   A user switches to another window in the current application.</source>
          <target state="translated">視窗已停用 （變成背景視窗） 時:-使用者切換至目前的應用程式中的另一個視窗。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-   A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">-使用者切換至另一個應用程式視窗，使用 ALT + TAB，或使用 工作管理員。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>-   A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">-使用者按一下另一個應用程式視窗的工作列按鈕。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Windows that need to detect when they become deactivated by handling the Deactivated event.</source>
          <target state="translated">需要偵測當它們變成停用處理停用事件的視窗。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">視窗先停用之後，它可能會重新啟動並在其存留期間多次停用。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
          <target state="translated">如果應用程式的狀態或行為取決於其啟動狀態，它可以檢查&lt;xref:System.Windows.Window.IsActive%2A&gt;以判斷哪一個啟用狀態的英吋&lt;/xref:System.Windows.Window.IsActive%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An application can also be &lt;xref:System.Windows.Application.Deactivated&gt;.</source>
          <target state="translated">應用程式也可以是&lt;xref:System.Windows.Application.Deactivated&gt;.&lt;/xref:System.Windows.Application.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the dialog result value, which is the value that is returned from the &lt;xref:System.Windows.Window.ShowDialog*&gt; method.</source>
          <target state="translated">取得或設定對話方塊的結果值，也就是從傳回的值&lt;xref:System.Windows.Window.ShowDialog*&gt;方法。&lt;/xref:System.Windows.Window.ShowDialog*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>DialogResult can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph1">`true`</ph>) or canceled (<ph id="ph2">`false`</ph>) the dialog box.</source>
          <target state="translated">DialogResult 可從已顯示對話方塊，以判斷使用者是否已接受的程式碼 (<ph id="ph1">`true`</ph>) 或已取消 (<ph id="ph2">`false`</ph>) 對話方塊。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">如果已接受對話方塊中，這表示開啟對話方塊，來擷取使用者所收集的資料，並處理它的程式碼。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">如果已取消對話方塊中，不過，這種情況表示呼叫的程式碼應該停止任何進一步處理。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>By default, a dialog box is canceled when a user does one of the following:      -   PressesALT+F4.</source>
          <target state="translated">根據預設，當使用者執行下列其中一種，已取消對話方塊:-PressesALT + F4。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-   Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">-按一下<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept> 按鈕。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-   Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">-選取<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept>從系統功能表。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In all of these cases, DialogResult is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">DialogResult 是在所有這些情況下，<ph id="ph1">`false`</ph>預設。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">對話方塊通常提供特殊的按鈕，即可取消對話方塊中，這是按鈕其&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Controls.Button.IsCancel%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">如果如此設定的按鈕時請按下，或按下 ESC 鍵時，會自動關閉視窗。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In either of these cases, DialogResult remains <ph id="ph1">`false`</ph>.</source>
          <target state="translated">在任一情況中，還是 DialogResult <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A dialog box also typically provides an accept button, which is the button whose &lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">對話方塊通常也會提供 [接受] 按鈕，為按鈕的&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Controls.Button.IsDefault%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A button configured this way will raise its &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event when either it or the ENTER key is pressed.</source>
          <target state="translated">如果如此設定的按鈕將會引發其&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件時按下它或 ENTER 鍵。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>However, it won't automatically close the dialog box, nor will it set DialogResult to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">不過，它將不會自動關閉對話方塊中，也不將它設 DialogResult <ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You need to manually write this code, usually from the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the default button.</source>
          <target state="translated">您需要以手動方式撰寫此程式碼，通常從&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;預設按鈕的事件處理常式。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>DialogResult is <ph id="ph1">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated">DialogResult 是<ph id="ph1">`null`</ph>對話方塊會顯示當但未接受或已取消。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>After a dialog box closes, you can get the dialog result from the value returned by &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method, or by inspecting the DialogResult property.</source>
          <target state="translated">對話框會關閉之後，您可以從所傳回的值取得的對話方塊結果&lt;xref:System.Windows.Window.ShowDialog%2A&gt;方法，或藉由檢查 DialogResult 屬性。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>DialogResult can only be set when a &lt;xref:System.Windows.Window&gt; is opened by calling its &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method.</source>
          <target state="translated">DialogResult 可以時才設定&lt;xref:System.Windows.Window&gt;開啟藉由呼叫其&lt;xref:System.Windows.Window.ShowDialog%2A&gt;方法。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt;.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> &lt;xref:System.Boolean&gt;.&lt;/xref:System.Boolean&gt;類型的值</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>DialogResult is set before a window is opened by calling &lt;xref:System.Windows.Window.ShowDialog<bpt id="p1">*</bpt>&gt;.       -or-       DialogResult is set on a window that is opened by calling &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">藉由呼叫開啟視窗之前設定 DialogResult &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt;。      -或-上開啟的視窗，藉由呼叫設定 DialogResult &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">此視窗會在其上的螢幕 DPI 顯示變更後發生。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>螢幕視窗的 DPI 上變更時。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">可讓滑鼠左鍵向下拖曳視窗的工作區的公開區域上方的視窗。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The left mouse button must be down when DragMove is called.</source>
          <target state="translated">呼叫 DragMove 時，必須是向下滑鼠左的按鈕。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>One way to detect when the left mouse button is pressed is to handle the &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; event.</source>
          <target state="translated">當按下滑鼠左鍵時偵測到的一種方式為處理&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;事件。&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>When DragMove is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">呼叫 DragMove 時，必須是按下滑鼠左的按鈕的視窗的工作區的公開區域上方。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 裝載在瀏覽器視窗時，就無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The left mouse button is not down.</source>
          <target state="translated">無法向下滑鼠左的按鈕。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a reference to the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">將參考傳回給<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>裝載內容的樹狀結構內的相依性物件的物件。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The dependency object.</source>
          <target state="translated">相依性物件。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> reference to the host window.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>至主控視窗的參考。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph>為 null。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Makes a window invisible.</source>
          <target state="translated">讓視窗隱藏。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A window is not closed when it is hidden, and neither the &lt;xref:System.Windows.Window.Closing&gt; nor &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
          <target state="translated">隱藏時，無法關閉視窗並沒有&lt;xref:System.Windows.Window.Closing&gt;也&lt;xref:System.Windows.Window.Closed&gt;就會引發事件。&lt;/xref:System.Windows.Window.Closed&gt; &lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Instead, the window's &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is set to &lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;.</source>
          <target state="translated">相反地，視窗&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性設定為&lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Visibility?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If a window is the application's &lt;xref:System.Windows.Application.MainWindow%2A&gt; and the application's &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is &lt;xref:System.Windows.ShutdownMode&gt;, the application does not shut down.</source>
          <target state="translated">如果視窗是應用程式的&lt;xref:System.Windows.Application.MainWindow%2A&gt;和應用程式的&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;是&lt;xref:System.Windows.ShutdownMode&gt;，應用程式不會關機。&lt;/xref:System.Windows.ShutdownMode&gt; &lt;/xref:System.Windows.Application.ShutdownMode%2A&gt; &lt;/xref:System.Windows.Application.MainWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is &lt;xref:System.Windows.ShutdownMode&gt;.</source>
          <target state="translated">同樣地，應用程式不會關機如果視窗是唯一的視窗，而且應用程式的關機模式&lt;xref:System.Windows.ShutdownMode&gt;.&lt;/xref:System.Windows.ShutdownMode&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the &lt;xref:System.Windows.Window.Closing&gt; event, cancel it, and call the Hide method.</source>
          <target state="translated">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不想要重新具現化的視窗每次您將其顯示，您可以處理&lt;xref:System.Windows.Window.Closing&gt;事件時，取消，並呼叫隱藏方法。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to re-open it.</source>
          <target state="translated">然後，您可以呼叫&lt;xref:System.Windows.Window.Show%2A&gt;相同的執行個體，即可重新開啟它。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Hide is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">隱藏呼叫正在關閉的視窗 (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已關閉 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">取得或設定視窗的圖示。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:      -   One assembly icon, which is specified by using the <ph id="ph2">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>獨立應用程式有兩種類型的圖示:-一個組件圖示，會透過指定<ph id="ph2">`&lt;ApplicationIcon&gt;`</ph>檔案建置應用程式的專案中的屬性。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">組件做為桌面圖示使用這個圖示。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 偵錯時 Visual Studio 中，您的圖示可能不會出現由於裝載處理序。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">如果您執行可執行檔，則會出現圖示。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>裝載處理序 (vshost.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>-   One icon per window that is specified by setting Icon.</source>
          <target state="translated">-每個設定圖示，來指定的視窗一個圖示。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">針對每個視窗中，在其標題列，其工作列按鈕，和其 ALT TAB 應用程式選取項目清單項目中使用這個圖示。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window always displays an icon.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>視窗一律會顯示圖示。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When one is not provided by setting Icon, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> chooses an icon to display based on the following rules:      1.</source>
          <target state="translated">當藉由設定圖示，不提供一個<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>選擇圖示以顯示根據下列規則︰ 1。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">如果指定，請使用組件圖示。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph> icon.</source>
          <target state="translated">如果未指定組件圖示，則使用預設的<ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph>圖示。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you use Icon to specify a custom window icon, you can restore the default application icon by setting Icon to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果您使用圖示來指定自訂視窗圖示時，您可以藉由設定圖示還原預設應用程式圖示<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">單一圖示可用於各種不同的方式，在<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>，包括標題列的視窗中，視窗的工作列中顯示 ALT + TAB 檔案選取項目清單。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">每一種顯示使用不同的大小; 圖示ALT + TAB 檔案選取清單中顯示 32 x 32 像素圖示時，視窗標題列中，在工作列上，會顯示 16 x 16 像素圖示。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">某些應用程式，例如<ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]</ph>，提供<bpt id="p1">**</bpt>檢視<ept id="p1">**</ept>功能表，讓您選擇您想要檢視的圖示的大小。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">若要符合不同的顯示大小，其中每一個都代表特定的大小與色彩深度為目標的圖示版本的一或多個實際的圖示被由圖示檔。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">例如，一個圖示可能只有單一 16 x 16 像素圖示使用 16 個色彩，而另一個可能包含 16 x 16 像素和 32 x 32 像素 16 個色彩和 256 色圖示。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If icons for all possible sizes and color depths exist within an icon file, &lt;xref:System.Windows.Window&gt; will use the appropriate icon.</source>
          <target state="translated">如果所有可能的大小和色彩深度圖示存在於內的圖示檔&lt;xref:System.Windows.Window&gt;將使用合適的圖示。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If an icon file contains only a subset of all the possible icons, &lt;xref:System.Windows.Window&gt; uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">如果圖示檔只包含一部分的所有可能的圖示，&lt;xref:System.Windows.Window&gt;的順序排列，大小與色彩深度會使用下一個最合適的圖示。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The result is that an icon will always be used by &lt;xref:System.Windows.Window&gt;, although the icon used may not target the required size and color depth.</source>
          <target state="translated">結果是圖示將一律使用由&lt;xref:System.Windows.Window&gt;，但使用的圖示可能不會以目標所需的大小與色彩深度。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">例如，使用 16 個色彩 16 x 16 像素圖示都可能會用於顯示為 32 x 32 像素圖示以 256 色彩。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">這可能會導致非預期的視覺效果，例如化，但可能會建立對所有目標的大小和色彩深度的圖示來避免。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIcon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IconProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIcon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.IconProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.IconProperty&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the icon.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>圖示表示物件。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Icon*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.Icon*&gt;相依性屬性。&lt;/xref:System.Windows.Window.Icon*&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">取得值，指出視窗是否為作用中。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">使用中視窗是使用者目前的前景視窗，並具有焦點，以作用中的標題列的外觀。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the &lt;xref:System.Windows.Window.Topmost%2A&gt; property.</source>
          <target state="translated">使用中視窗也會是最上層不明確設定的所有最上層視窗&lt;xref:System.Windows.Window.Topmost%2A&gt;屬性。&lt;/xref:System.Windows.Window.Topmost%2A&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIsActive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IsActiveProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIsActive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.IsActiveProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.IsActiveProperty&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is active; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果視窗是作用中。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.IsActive*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.IsActive*&gt;相依性屬性。&lt;/xref:System.Windows.Window.IsActive*&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">取得或設定視窗的左邊緣，相對於桌面的位置。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the left edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">當&lt;xref:System.Windows.Window&gt;最大化或最小化，這個值代表，左邊的還原點&lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This property cannot be set through a style.</source>
          <target state="translated">這個屬性不能透過樣式設定。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you do not specify a value, Left is set to the system default value.</source>
          <target state="translated">如果您未指定值，左邊是設定為系統預設值。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You can also specify the system default value by setting Left to &lt;xref:System.Double.NaN&gt;.</source>
          <target state="translated">您也可以藉由設定至&lt;xref:System.Double.NaN&gt;。&lt;/xref:System.Double.NaN&gt;的左邊指定的系統預設值</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Left.</source>
          <target state="translated">既不&lt;xref:System.Double.NegativeInfinity&gt;也&lt;xref:System.Double.PositiveInfinity&gt;維持為有效的值。&lt;/xref:System.Double.PositiveInfinity&gt; &lt;/xref:System.Double.NegativeInfinity&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowLeft"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.LeftProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowLeft"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.LeftProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.LeftProperty&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">視窗的左邊緣的位置，以邏輯單位表示 (1/96 英吋)。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Left*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.Left*&gt;相依性屬性。&lt;/xref:System.Windows.Window.Left*&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">視窗的位置變更時發生。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A window's location changes when:      -   A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">視窗的位置變更時:-使用者將視窗移至視窗的標題列拖曳它。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>-   A window is moved after &lt;xref:System.Windows.Window.DragMove%2A&gt; is called.</source>
          <target state="translated">-視窗移之後&lt;xref:System.Windows.Window.DragMove%2A&gt;稱為。&lt;/xref:System.Windows.Window.DragMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>-   Either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; property is set programmatically.</source>
          <target state="translated">-請&lt;xref:System.Windows.Window.Left%2A&gt;或&lt;xref:System.Windows.Window.Top%2A&gt;屬性以程式設計方式設定。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>-   The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated">-<bpt id="p1">**</bpt>移動<ept id="p1">**</ept>選擇視窗的 [系統] 功能表的功能表項目。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window.WindowState%2A&gt; property is changed.</source>
          <target state="translated">-&lt;xref:System.Windows.Window.WindowState%2A&gt;屬性變更。&lt;/xref:System.Windows.Window.WindowState%2A&gt;</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">取得視窗的邏輯子元素的列舉值。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; a window's logical child elements.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator&gt;視窗的邏輯子項目。&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">覆寫這個方法來測量視窗的大小。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>MeasureOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">MeasureOverride 不會呼叫時的&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性的值為&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, MeasureOverride is called.</source>
          <target state="translated">如果值&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性&lt;xref:System.Windows.Visibility&gt;或&lt;xref:System.Windows.Visibility&gt;，稱為 MeasureOverride。&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 時&lt;xref:System.Windows.Window.Show%2A&gt;或&lt;xref:System.Windows.Window.ShowDialog%2A&gt;呼叫時，&lt;xref:System.Windows.UIElement.Visibility%2A&gt;屬性&lt;xref:System.Windows.Window&gt;會設定為&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the available size that this window can give to the child.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，以反映使用可以提供給子項目此視窗的大小。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">值可以提供無限大表示大小的視窗會有任何內容。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，以反映此視窗會判斷它需要期間配置中，根據它的子系的大小計算的大小。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>OnActivated raises the &lt;xref:System.Windows.Window.Activated&gt; event.</source>
          <target state="translated">OnActivated 引發&lt;xref:System.Windows.Window.Activated&gt;事件。&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnActivated.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnActivated。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnActivated on the base class if &lt;xref:System.Windows.Window.Activated&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnActivated 基底類別上如果&lt;xref:System.Windows.Window.Activated&gt;需要引發。&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>OnClosed raises the &lt;xref:System.Windows.Window.Closed&gt; event.</source>
          <target state="translated">OnClosed 引發&lt;xref:System.Windows.Window.Closed&gt;事件。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosed.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnClosed。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnClosed on the base class if &lt;xref:System.Windows.Window.Closed&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnClosed 基底類別上如果&lt;xref:System.Windows.Window.Closed&gt;需要引發。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>OnClosing raises the &lt;xref:System.Windows.Window.Closing&gt; event.</source>
          <target state="translated">OnClosing 引發&lt;xref:System.Windows.Window.Closing&gt;事件。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosing.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnClosing。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnClosing on the base class if &lt;xref:System.Windows.Window.Closing&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnClosing 基底類別上如果&lt;xref:System.Windows.Window.Closing&gt;需要引發。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.CancelEventArgs&gt;包含事件資料。&lt;/xref:System.ComponentModel.CancelEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Called when the &lt;xref:System.Windows.Controls.ContentControl.Content*&gt; property changes.</source>
          <target state="translated">時呼叫&lt;xref:System.Windows.Controls.ContentControl.Content*&gt;屬性變更。&lt;/xref:System.Windows.Controls.ContentControl.Content*&gt;</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">舊的內容樹狀結構的根參考。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">新的內容樹狀結構的根參考。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>OnContentRendered raises the &lt;xref:System.Windows.Window.ContentRendered&gt; event.</source>
          <target state="translated">OnContentRendered 引發&lt;xref:System.Windows.Window.ContentRendered&gt;事件。&lt;/xref:System.Windows.Window.ContentRendered&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnContentRendered.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnContentRendered。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnContentRendered on the base class if &lt;xref:System.Windows.Window.ContentRendered&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnContentRendered 基底類別上如果&lt;xref:System.Windows.Window.ContentRendered&gt;需要引發。&lt;/xref:System.Windows.Window.ContentRendered&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Creates and returns a <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">建立並傳回<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>這個物件<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;.</source>
          <target state="translated">這個方法會覆寫&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;.&lt;/xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>OnDeactivated raises the &lt;xref:System.Windows.Window.Deactivated&gt; event.</source>
          <target state="translated">OnDeactivated 引發&lt;xref:System.Windows.Window.Deactivated&gt;事件。&lt;/xref:System.Windows.Window.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnDeactivated.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnDeactivated。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnDeactivated on the base class if &lt;xref:System.Windows.Window.Deactivated&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnDeactivated 基底類別上如果&lt;xref:System.Windows.Window.Deactivated&gt;需要引發。&lt;/xref:System.Windows.Window.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">呼叫時，此視窗會呈現變更的 DPI。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The previous DPI scale setting.</source>
          <target state="translated">設定先前 DPI 縮放比例。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The new DPI scale setting.</source>
          <target state="translated">新的 DPI 比例設定。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>OnLocationChanged raises the &lt;xref:System.Windows.Window.LocationChanged&gt; event.</source>
          <target state="translated">OnLocationChanged 引發&lt;xref:System.Windows.Window.LocationChanged&gt;事件。&lt;/xref:System.Windows.Window.LocationChanged&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnLocationChanged.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnLocationChanged。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnLocationChanged on the base class if &lt;xref:System.Windows.Window.LocationChanged&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnLocationChanged 基底類別上如果&lt;xref:System.Windows.Window.LocationChanged&gt;需要引發。&lt;/xref:System.Windows.Window.LocationChanged&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">時呼叫<bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>就會發生事件。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This implementation does not change the handled state (the &lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt; property) of the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event data.</source>
          <target state="translated">此實作不會變更處理的狀態 (&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;屬性) 的&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;事件資料。&lt;/xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; &lt;/xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">事件資料。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>OnSourceInitialized raises the &lt;xref:System.Windows.Window.SourceInitialized&gt; event.</source>
          <target state="translated">OnSourceInitialized 引發&lt;xref:System.Windows.Window.SourceInitialized&gt;事件。&lt;/xref:System.Windows.Window.SourceInitialized&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnSourceInitialized.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnSourceInitialized。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnSourceInitialized on the base class if &lt;xref:System.Windows.Window.SourceInitialized&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnSourceInitialized 基底類別上如果&lt;xref:System.Windows.Window.SourceInitialized&gt;需要引發。&lt;/xref:System.Windows.Window.SourceInitialized&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.StateChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Windows.Window.StateChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>OnStateChanged raises the &lt;xref:System.Windows.Window.StateChanged&gt; event.</source>
          <target state="translated">OnStateChanged 引發&lt;xref:System.Windows.Window.StateChanged&gt;事件。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnStateChanged.</source>
          <target state="translated">從衍生的型別&lt;xref:System.Windows.Window&gt;可能會覆寫 OnStateChanged。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnStateChanged on the base class if &lt;xref:System.Windows.Window.StateChanged&gt; needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫 OnStateChanged 基底類別上如果&lt;xref:System.Windows.Window.StateChanged&gt;需要引發。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件資料。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">當視窗的父項目變更時呼叫。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The previous parent.</source>
          <target state="translated">先前的父系。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Set to null if the <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> did not have a previous parent.</source>
          <target state="translated">設定為 null 如果<bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>沒有先前的父系。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">取得此視窗的擁有者的 windows 集合。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An owned window is one whose &lt;xref:System.Windows.Window.Owner%2A&gt; property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">擁有的視窗是一個其&lt;xref:System.Windows.Window.Owner%2A&gt;屬性設為另一個視窗中，也就是主控視窗的參考。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>To find all the windows that an owner window owns, you can enumerate &lt;xref:System.Windows.WindowCollection&gt; that is returned by the OwnedWindows property.</source>
          <target state="translated">若要尋找擁有者視窗擁有的所有視窗，您可以列舉&lt;xref:System.Windows.WindowCollection&gt;OwnedWindows 屬性所傳回。&lt;/xref:System.Windows.WindowCollection&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains references to the windows for which this window is the owner.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，其中包含的 windows 此視窗的擁有者的參考。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that owns this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得或設定<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，擁有這個<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When a child window is opened by a parent window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">子視窗開啟時，父視窗呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，父和子視窗之間建立隱含關聯性。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">此關聯性會強制執行特定行為，包括相對於最小化、 最大化，以及還原。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>When a child window is created by a parent window by calling &lt;xref:System.Windows.Window.Show%2A&gt;, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">當子視窗由父視窗呼叫&lt;xref:System.Windows.Window.Show%2A&gt;，不過，子視窗並沒有與父視窗的關聯性。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>This means that:      -   The child window does not have a reference to the parent window.</source>
          <target state="translated">這表示:-子視窗並沒有父視窗的參考。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>-   The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">-子視窗的行為不會隨著父視窗; 的行為其中一個視窗可以涵蓋，或最小化，以最大化，並還原個別地。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>To allow you to create a relationship between a child window and a parent window, &lt;xref:System.Windows.Window&gt; supports the notion of ownership.</source>
          <target state="translated">若要可讓您建立的父視窗，子視窗之間的關聯性&lt;xref:System.Windows.Window&gt;支援擁有權的概念。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">使用另一個視窗 （擁有者視窗） 的參考設定為視窗 （擁有視窗） 的擁有者屬性時，會建立擁有權。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Once this relationship is established, the following behaviors are exhibited:      -   If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">一旦建立此關聯性，則會顯示下列行為:-如果主控視窗會最小化，其擁有的所有視窗最小都化以及。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>-   If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">-如果擁有的視窗最小化，其擁有者沒有最小化。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>-   If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">-如果擁有者視窗最大化，擁有者視窗和其擁有的 windows 會還原。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>-   An owner window can never cover an owned window.</source>
          <target state="translated">-主控視窗可以永遠不會涵蓋擁有的視窗。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-   Owned windows that were not opened using &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are not modal.</source>
          <target state="translated">擁有不使用開啟的 windows&lt;xref:System.Windows.Window.ShowDialog%2A&gt;不會強制回應。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">使用者仍然可以互動主控視窗。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>-   If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">-如果您關閉主控視窗，也會關閉其擁有的 windows。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>-   If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's &lt;xref:System.Windows.Window.Closing&gt; event is not raised.</source>
          <target state="translated">-如果擁有的視窗由其擁有者視窗使用開啟&lt;xref:System.Windows.Window.Show%2A&gt;，且擁有者視窗已關閉，擁有的視窗的&lt;xref:System.Windows.Window.Closing&gt;不會引發事件。&lt;/xref:System.Windows.Window.Closing&gt; &lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>When you open a child window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, you should also set the Owner property of the child window.</source>
          <target state="translated">當您開啟子視窗呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，您也應該設定子視窗的擁有者屬性。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">如果沒有，您的使用者無法再還原按工作列按鈕的子視窗與父視窗。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">相反地，按工作列按鈕，將會產生一份 windows，包括子系和父視窗中的，為其選取。還原選取的視窗。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  You should also set the Owner property on a window that that is opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt; to ensure correct behavior with .</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 您也應該設定的擁有者屬性 視窗上，開啟藉由呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;以確定有正確的行為。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the owner of this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件，表示此擁有者<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A window tries to own itself       -or-       Two windows try to own each other.</source>
          <target state="translated">視窗嘗試擁有本身-或者-擁有彼此嘗試兩個視窗。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The Owner property is set on a visible window shown using &lt;xref:System.Windows.Window.ShowDialog*&gt;       -or-       The Owner property is set with a window that has not been previously shown.</source>
          <target state="translated">顯示使用可見的視窗上設定 Owner 屬性&lt;xref:System.Windows.Window.ShowDialog*&gt;-或-從未先前顯示的視窗設定 Owner 屬性。&lt;/xref:System.Windows.Window.ShowDialog*&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">取得或設定調整大小模式。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>There are four options:      -   <bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated">有四個選項:- <bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The user cannot resize the window.</source>
          <target state="translated">使用者無法調整視窗大小。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">不會顯示最大化] 和 [最小化方塊。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">使用者只能視窗最小化和還原從工作列。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">同時會顯示最小化和最大化方塊，但已啟用最小化方塊。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">使用者能夠完整調整視窗大小的視窗周圍使用的最小化和最大化的方塊，並可拖曳的外框。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">最小化和最大化方塊會顯示和啟用狀態。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>(Default).</source>
          <target state="translated">（預設值）。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>This option has the same functionality as &lt;xref:System.Windows.ResizeMode&gt;, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">這個選項擁有相同的功能&lt;xref:System.Windows.ResizeMode&gt;，但將 「 調整大小底框 」 加入至視窗的右下角。&lt;/xref:System.Windows.ResizeMode&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowResizeMode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ResizeModeProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowResizeMode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.ResizeModeProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.Window.ResizeModeProperty&gt;</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.ResizeMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value specifying the resize mode.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.ResizeMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>值，指定的調整大小模式。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ResizeMode*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.ResizeMode*&gt;相依性屬性。&lt;/xref:System.Windows.Window.ResizeMode*&gt;</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">取得大小和視窗的位置之前的最小化或最大化。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">還原矩形是最小化或最大化之前視窗所佔據的區域。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>You can use RestoreBounds to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">您可以使用 RestoreBounds 之前關閉應用程式時，儲存的最後一個大小和視窗的位置，以及下一次應用程式啟動視窗還原成使用者所保留的方式來擷取這些值。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If you query RestoreBounds before the window has been shown or after it has been closed, &lt;xref:System.Windows.Rect.Empty%2A&gt; is returned.</source>
          <target state="translated">如果您在顯示的視窗之前或之後已關閉，查詢 RestoreBounds&lt;xref:System.Windows.Rect.Empty%2A&gt;傳回。&lt;/xref:System.Windows.Rect.Empty%2A&gt;</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 裝載在瀏覽器視窗時，無法取得這個屬性。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，指定的大小和視窗的位置之前降到最低或最大化。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">會開啟視窗，並傳回而不等候新開啟的視窗關閉。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
          <target state="translated">當&lt;xref:System.Windows.Window&gt;類別具現化，則不是預設為可見。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Show shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated">顯示會顯示一個視窗，並會立即傳回，而不需等待要關閉視窗。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">因此，開啟的視窗不會避免使用者互動與其他 windows 應用程式中。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">這類視窗稱為<bpt id="p1">*</bpt>非強制回應<ept id="p1">*</ept>視窗。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">非強制回應視窗的常見範例為 [屬性] 視窗、 工具箱和調色盤。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated">若要限制使用者與特定的視窗進行互動，必須開啟視窗呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A window that is opened by calling Show does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">開啟的視窗，藉由呼叫顯示自動沒有與它; 開啟的視窗之間的關係具體而言，開啟的視窗不知道哪一個視窗開啟它。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
          <target state="translated">此關聯性可以使用建立&lt;xref:System.Windows.Window.Owner%2A&gt;屬性和 managed 使用&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;屬性。&lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Calling Show achieves the same end result as setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of the &lt;xref:System.Windows.Window&gt; object to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">呼叫顯示可達到相同的結果做為&lt;xref:System.Windows.UIElement.Visibility%2A&gt;&lt;xref:System.Windows.Window&gt;物件至&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;&lt;/xref:System.Windows.Window&gt;屬性&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;設定</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">不過，沒有從計時的觀點來看兩者的差異。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Calling Show is a synchronous operation that returns only after the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event on the child window has been raised:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p2">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p4">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync)</ept><ept id="p3">]</ept>       Setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, however, is an asynchronous operation that returns immediately:       <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p6">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)</ept><ept id="p5">]</ept>  <bpt id="p7">[!code-cs</bpt><bpt id="p8">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p8">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync)</ept><ept id="p7">]</ept>       When setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, any window events you register before you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; may not be raised until after the method in which you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; has completed execution.</source>
          <target state="translated">顯示的呼叫是同步作業之後才傳回&lt;xref:System.Windows.FrameworkElement.Loaded&gt;已經引發事件的子視窗上︰ <bpt id="p1">[!code-vb</bpt> <bpt id="p2">[</bpt>WindowShowTimingSnippets #ShowSync<ept id="p2">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets #ShowSync<ept id="p4">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync)</ept> <ept id="p3">]</ept>設定&lt;xref:System.Windows.UIElement.Visibility%2A&gt;，不過，會立即傳回的非同步作業︰ <bpt id="p5">[!code-vb</bpt> <bpt id="p6">[</bpt>WindowShowTimingSnippets #ShowASync<ept id="p6">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cs</bpt><bpt id="p8">[</bpt>WindowShowTimingSnippets #ShowASync<ept id="p8">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync)</ept> <ept id="p7">]</ept>設定時&lt;xref:System.Windows.UIElement.Visibility%2A&gt;，您先在您設定註冊任何視窗事件&lt;xref:System.Windows.UIElement.Visibility%2A&gt;可能不會在您設定的方法之前引發&lt;xref:System.Windows.UIElement.Visibility%2A&gt;才完成執行。&lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;   &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;   &lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Show is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">正在關閉視窗上呼叫 show (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已關閉 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">取得或設定值，指出是否要在第一次顯示時，啟動視窗。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When a window with its ShowActivated property set to <ph id="ph1">`false`</ph> is opened, the window is not activated and its &lt;xref:System.Windows.Window.Activated&gt; event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">當其在 ShowActivated 屬性設定為與視窗<ph id="ph1">`false`</ph>會開啟，視窗不會啟動和其&lt;xref:System.Windows.Window.Activated&gt;事件就不會引發直到使用者手動啟動視窗中的選取它。&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">已選取視窗之後，它會啟用，並通常會停用。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>To prevent a window from being activated when it opens, the ShowActivated property must be set to <ph id="ph1">`false`</ph> before the window is shown (by calling &lt;xref:System.Windows.Window.Show%2A&gt;); setting ShowActivated to <ph id="ph2">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">若要防止視窗開啟時啟動，在 ShowActivated 屬性必須設定為<ph id="ph1">`false`</ph>顯示視窗之前 (藉由呼叫&lt;xref:System.Windows.Window.Show%2A&gt;); 設為在 ShowActivated<ph id="ph2">`false`</ph>後一個視窗會顯示沒有任何作用。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Setting ShowActivated to <ph id="ph1">`false`</ph> on a window that is opened modally, by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, has no real impact.</source>
          <target state="translated">若要設定在 ShowActivated<ph id="ph1">`false`</ph>上開啟的視窗，以強制回應方式，藉由呼叫&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，沒有任何實際的影響。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">雖然將不會啟動強制回應視窗，強制回應視窗會防止使用者啟動任何其他開啟的應用程式視窗。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowActivated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowActivatedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowActivated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.ShowActivatedProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.ShowActivatedProperty&gt;</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a window is activated when first shown; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果第一次顯示; 啟動視窗則否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowActivated*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.ShowActivated*&gt;相依性屬性。&lt;/xref:System.Windows.Window.ShowActivated*&gt;</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">會開啟視窗，並傳回新開啟的視窗關閉時，才。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>When a &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
          <target state="translated">當&lt;xref:System.Windows.Window&gt;類別具現化，則不是預設為可見。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>ShowDialog shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated">ShowDialog 顯示的視窗會停用應用程式中的所有其他視窗和視窗已關閉時，才會傳回。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">這類視窗稱為<bpt id="p1">*</bpt>強制回應<ept id="p1">*</ept>視窗。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">強制回應視窗，主要用對話方塊。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">對話方塊是一種特殊類型的應用程式用來與使用者互動以完成工作，例如開啟檔案或列印文件視窗。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">對話方塊通常可讓使用者接受或取消其所顯示的對話方塊關閉之前的工作。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>ShowDialog returns a &lt;xref:System.Nullable%601&gt;&lt;xref:System.Boolean&gt; value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated">ShowDialog 傳回&lt;xref:System.Nullable%601&gt;&lt;xref:System.Boolean&gt;值，指定是否接受或取消的活動。&lt;/xref:System.Boolean&gt;&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult%2A&gt; property before a window closes.</source>
          <target state="translated">傳回值是值&lt;xref:System.Windows.Window.DialogResult%2A&gt;視窗關閉之前的屬性。&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Windows.Window.DialogResult%2A&gt;.</source>
          <target state="translated">如需詳細資訊，請參閱&lt;xref:System.Windows.Window.DialogResult%2A&gt;.&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A window that is opened by calling the ShowDialog method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">藉由呼叫 ShowDialog 方法開啟的視窗自動沒有與它; 開啟的視窗之間的關係具體而言，開啟的視窗不知道哪一個視窗開啟它。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
          <target state="translated">此關聯性可以使用建立&lt;xref:System.Windows.Window.Owner%2A&gt;屬性和 managed 使用&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;屬性。&lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>), &lt;xref:System.Windows.Window.Owner%2A&gt; must be set for a window opened by calling ShowDialog.</source>
          <target state="translated">若要支援<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>自動化 (請參閱<bpt id="p1">[</bpt>UI 自動化概觀<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>)，&lt;xref:System.Windows.Window.Owner%2A&gt;必須設定視窗呼叫 ShowDialog 開啟。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window (a window opened by calling ShowDialog) is closed, the previously activated window is reactivated.</source>
          <target state="translated">當強制回應<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>（視窗呼叫 ShowDialog 開啟） 視窗已關閉，先前已啟動 視窗會重新啟動。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window has an owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), the owner window is not reactivated when the modal <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">如果強制回應<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>視窗有主控視窗 (請參閱&lt;xref:System.Windows.Window.Owner%2A&gt;)，不是主控視窗會重新啟動時強制回應<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>視窗已關閉，除非它是先前已啟動的視窗。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 裝載在瀏覽器視窗時，就無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt; that specifies whether the activity was accepted (<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or canceled (<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph>型別的值&lt;xref:System.Boolean&gt;，指定是否已接受的活動 (<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已取消 (<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。&lt;/xref:System.Boolean&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult*&gt; property before a window closes.</source>
          <target state="translated">傳回值是值&lt;xref:System.Windows.Window.DialogResult*&gt;視窗關閉之前的屬性。&lt;/xref:System.Windows.Window.DialogResult*&gt;</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>ShowDialog is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">正在關閉的視窗呼叫 ShowDialog (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已關閉 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">取得或設定值，指出視窗是否有工作列按鈕。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>If ShowInTaskbar is set to <ph id="ph1">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">如果設為 ShowInTaskbar <ph id="ph1">`true`</ph>，視窗也會出現在 ALT + TAB 應用程式選取項目清單。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the &lt;xref:System.Windows.Window.Icon%2A&gt; property.</source>
          <target state="translated">使用 ALT + TAB 應用程式選取項目清單和工作列按鈕的圖示是值&lt;xref:System.Windows.Window.Icon%2A&gt;屬性。&lt;/xref:System.Windows.Window.Icon%2A&gt;</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowInTaskbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowInTaskbarProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowInTaskbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.ShowInTaskbarProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.ShowInTaskbarProperty&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window has a task bar button; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果視窗的工作列按鈕。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">當瀏覽器中裝載的視窗不適用。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowInTaskbar*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.ShowInTaskbar*&gt;相依性屬性。&lt;/xref:System.Windows.Window.ShowInTaskbar*&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">取得或設定值，指出是否視窗會自動調整本身的大小以符合其內容的大小。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting either &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; or &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">當 SizeToContent 設&lt;xref:System.Windows.SizeToContent&gt;，設定&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;或&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;沒有任何作用，則可以設定這兩個屬性，但它們會以設定的值不會套用至視窗。&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; does not change the height of the window.</source>
          <target state="translated">當 SizeToContent 設&lt;xref:System.Windows.SizeToContent&gt;，設定&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;不會變更視窗的高度。&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; does not change the width of the window.</source>
          <target state="translated">當 SizeToContent 設&lt;xref:System.Windows.SizeToContent&gt;，設定&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;不會變更視窗的寬度。&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>If SizeToContent has a value other than &lt;xref:System.Windows.SizeToContent&gt;:      -   SizeToContent is automatically set to &lt;xref:System.Windows.SizeToContent&gt; if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated">如果 SizeToContent 的值以外&lt;xref:System.Windows.SizeToContent&gt;:-SizeToContent 會自動設為&lt;xref:System.Windows.SizeToContent&gt;如果使用者將視窗調整使用調整大小底框或拖曳框線。&lt;/xref:System.Windows.SizeToContent&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>-   If the size of the content changes in a way that causes the window to resize itself, &lt;xref:System.Windows.FrameworkElement.SizeChanged&gt; is raised.</source>
          <target state="translated">-如果會造成視窗本身，調整大小的方式變更內容的大小&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;，就會引發。&lt;/xref:System.Windows.FrameworkElement.SizeChanged&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>If a window is transparent (see &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;), you should consider setting SizeToContent to &lt;xref:System.Windows.SizeToContent&gt; to ensure the window is no larger than its visible content.</source>
          <target state="translated">如果視窗是透明 (請參閱&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;)，您應該考慮設 SizeToContent&lt;xref:System.Windows.SizeToContent&gt;來確定視窗是不能大於其可見的內容。&lt;/xref:System.Windows.SizeToContent&gt; &lt;/xref:System.Windows.Window.AllowsTransparency%2A&gt;</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowSizeToContent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.SizeToContentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowSizeToContent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.SizeToContentProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.SizeToContentProperty&gt;</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.SizeToContent*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.SizeToContent*&gt;相依性屬性。&lt;/xref:System.Windows.Window.SizeToContent*&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">會引發這個事件，以支援與互通<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when the window's &lt;xref:System.Windows.Window.WindowState*&gt; property changes.</source>
          <target state="translated">發生時的視窗&lt;xref:System.Windows.Window.WindowState*&gt;屬性變更。&lt;/xref:System.Windows.Window.WindowState*&gt;</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得或設定<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>工作列縮圖<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail, see the &lt;xref:System.Windows.Shell.TaskbarItemInfo&gt; class.</source>
          <target state="translated">如需有關如何使用<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>工作列縮圖，請參閱&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;類別。&lt;/xref:System.Windows.Shell.TaskbarItemInfo&gt;</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>工作列縮圖<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.TaskbarItemInfo*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.TaskbarItemInfo*&gt;相依性屬性。&lt;/xref:System.Windows.Window.TaskbarItemInfo*&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's title.</source>
          <target state="translated">取得或設定視窗的標題。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The title of a &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Navigation.NavigationWindow&gt;, or <ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using &lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">標題&lt;xref:System.Windows.Window&gt;， &lt;xref:System.Windows.Navigation.NavigationWindow&gt;，或<ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]</ph>，也可以設定使用&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TitleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.TitleProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TitleProperty&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that contains the window's title.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含視窗的標題。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Title*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.Title*&gt;相依性屬性。&lt;/xref:System.Windows.Window.Title*&gt;</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">取得或設定視窗的頂端位置，相對於桌面。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the top edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">當&lt;xref:System.Windows.Window&gt;最大化或最小化，這個值代表， &lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt;的上邊緣的還原點&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This property cannot be set through a style.</source>
          <target state="translated">這個屬性不能透過樣式設定。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If you do not specify a value, Top is set to the system default value.</source>
          <target state="translated">如果您未指定值前, 是設定為系統預設值。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>You can also specify the system default value by setting Top to &lt;xref:System.Double.NaN&gt;.</source>
          <target state="translated">您也可以藉由設定至&lt;xref:System.Double.NaN&gt;。&lt;/xref:System.Double.NaN&gt;頂端指定的系統預設值</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Top.</source>
          <target state="translated">既不&lt;xref:System.Double.NegativeInfinity&gt;也&lt;xref:System.Double.PositiveInfinity&gt;是有效的值為 Top。&lt;/xref:System.Double.PositiveInfinity&gt; &lt;/xref:System.Double.NegativeInfinity&gt;</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.TopProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TopProperty&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">以邏輯單位表示 （1/96"） 視窗的頂端位置。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">取得或設定值，指出視窗是否會出現在最上層的疊置順序。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>A window whose Topmost property is set to <ph id="ph1">`true`</ph> appears above all windows whose Topmost properties are set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">視窗的最上層的屬性設定成<ph id="ph1">`true`</ph>優先於所有出現的最上層的屬性會設為 windows <ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>In the group of windows that have Topmost property is set to <ph id="ph1">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">屬性設定為群組中的所有 windows 有 Topmost <ph id="ph1">`true`</ph>，目前啟動的視窗是最上層視窗。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Likewise for the group of windows that have Topmost property is set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">同樣有 Topmost 的 windows 群組的屬性設定為<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTopmost"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopmostProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTopmost"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.TopmostProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TopmostProperty&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is topmost; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果視窗是最上層。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Topmost*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.Topmost*&gt;相依性屬性。&lt;/xref:System.Windows.Window.Topmost*&gt;</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Top*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.Top*&gt;相依性屬性。&lt;/xref:System.Windows.Window.Top*&gt;</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">取得或設定視窗第一次顯示的位置。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned according to its &lt;xref:System.Windows.Window.Left%2A&gt; and &lt;xref:System.Windows.Window.Top%2A&gt; property values.</source>
          <target state="translated">設定&lt;xref:System.Windows.WindowStartupLocation&gt;至&lt;xref:System.Windows.WindowStartupLocation&gt;致使視窗放置根據其&lt;xref:System.Windows.Window.Left%2A&gt;和&lt;xref:System.Windows.Window.Top%2A&gt;屬性值。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>If either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; properties aren't specified, their values are determined by <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>.</source>
          <target state="translated">如果有任一個&lt;xref:System.Windows.Window.Left%2A&gt;或&lt;xref:System.Windows.Window.Top%2A&gt;未指定屬性，其值由<ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt;</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">設定&lt;xref:System.Windows.WindowStartupLocation&gt;致使視窗中央的畫面，其中包含滑鼠游標位於。&lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of its owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), if specified.</source>
          <target state="translated">設定&lt;xref:System.Windows.WindowStartupLocation&gt;至&lt;xref:System.Windows.WindowStartupLocation&gt;致使視窗在其擁有者視窗的中央位於 (請參閱&lt;xref:System.Windows.Window.Owner%2A&gt;)，如果指定。&lt;/xref:System.Windows.Window.Owner%2A&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">另一個 WPF 視窗中或非 WPF 視窗，可以是主控視窗。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and &lt;xref:System.Windows.Interop.WindowInteropHelper&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 與非 WPF 視窗的 WPF 視窗的詳細資訊，請參閱<bpt id="p1">[</bpt>WPF 和 Win32 互通<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;。&lt;/xref:System.Windows.Interop.WindowInteropHelper&gt;</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if &lt;xref:System.Windows.WindowStartupLocation&gt; is set to &lt;xref:System.Windows.WindowStartupLocation&gt;.</source>
          <target state="translated">如果未指定擁有者視窗，視窗的位置由決定在相同的方式如同&lt;xref:System.Windows.WindowStartupLocation&gt;設定至&lt;xref:System.Windows.WindowStartupLocation&gt;。&lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性的值。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>值，指定第一次顯示視窗的左上角位置。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">取得或設定值，指出是否還原、 最小化或最大化視窗。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Before a window is minimized or maximized, its size and location are stored in &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
          <target state="translated">最小化或最大化視窗之前，會將其大小和位置儲存在&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>When a window is subsequently restored, its size and location values are restored with the values from &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
          <target state="translated">後續還原視窗時，其大小和位置的值是從&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;值以還原</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>When the WindowState property is changed, &lt;xref:System.Windows.Window.StateChanged&gt; is raised.</source>
          <target state="translated">WindowState 屬性變更時， &lt;xref:System.Windows.Window.StateChanged&gt;，就會引發。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowState"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStateProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowState"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.WindowStateProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt; &lt;/xref:System.Windows.Window.WindowStateProperty&gt;</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，決定是否還原、 最小化或最大化視窗。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (restored).</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> （還原）。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowState*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.WindowState*&gt;相依性屬性。&lt;/xref:System.Windows.Window.WindowState*&gt;</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">取得或設定視窗的框線樣式。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>WindowStyle can be one of the &lt;xref:System.Windows.WindowStyle&gt; enumeration values, including &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt; (default), and &lt;xref:System.Windows.WindowStyle&gt;.</source>
          <target state="translated">WindowStyle 可以是其中一個&lt;xref:System.Windows.WindowStyle&gt;列舉值，包括&lt;xref:System.Windows.WindowStyle&gt;， &lt;xref:System.Windows.WindowStyle&gt;， &lt;xref:System.Windows.WindowStyle&gt;（預設值） 和&lt;xref:System.Windows.WindowStyle&gt;。&lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt;</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):       <bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">下圖顯示在視窗樣式<ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]</ph>（Windows Vista Aero 佈景主題，以啟用透明玻璃）︰<bpt id="p1">![</bpt>視窗樣式<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>視窗樣式<ept id="p2">")</ept><ph id="ph2">      &gt; </ph> <ph id="ph3">[!NOTE]</ph> &gt; 您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |&lt;xref:System.Windows.Window.WindowStyleProperty&gt;|  |中繼資料屬性設定為<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.WindowStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies a window's border style.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定視窗的框線樣式。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowStyle*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Window.WindowStyle*&gt;相依性屬性。&lt;/xref:System.Windows.Window.WindowStyle*&gt;</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>