<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbe3038dbd6853d5b2ffd171a900755dfb7aaa05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.DesignSurfaceManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aea0c34999ff3a5943b421338c09c8f382ab8a46</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffb49dee0809272db3f921eda0f01b188e02d6d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Manages a collection of <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurface"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">管理集合<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurface"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class is designed to be a container of &lt;xref:System.ComponentModel.Design.DesignSurface&gt; objects.</source>
          <target state="translated">DesignSurfaceManager 類別設計為容器&lt;xref:System.ComponentModel.Design.DesignSurface&gt;物件。&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It provides common services that handle event routing between designers, property windows, and other global objects.</source>
          <target state="translated">它會提供該控制代碼之間，設計工具中，屬性視窗和其他全域物件的事件路由通用服務。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.</source>
          <target state="translated">使用 DesignSurfaceManager 是選擇性的但建議如果您想要擁有數個設計工具視窗。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class provides several design-time services automatically.</source>
          <target state="translated">DesignSurfaceManager 類別會自動提供數個設計階段服務。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can override each of these services by replacing them in the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.</source>
          <target state="translated">您可以覆寫每個服務中受保護取代這些&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;屬性。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To replace a service, override the constructor, call base, and make any changes through the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.</source>
          <target state="translated">若要取代的服務，覆寫建構函式，呼叫基底，並進行任何變更透過受保護&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;屬性。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All services added to the service container that implement the &lt;xref:System.IDisposable&gt; interface are disposed when the design surface manager is disposed.</source>
          <target state="translated">所有的服務加入至服務容器中實作&lt;xref:System.IDisposable&gt;處置設計介面管理員時，會處置介面。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class provides the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface as the default service.</source>
          <target state="translated">DesignSurfaceManager 類別提供&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;為預設服務的介面。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; provides a global eventing mechanism for designer events.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;提供通用的事件處理機制的設計工具事件。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With this mechanism, an application is informed when a designer becomes active.</source>
          <target state="translated">這項機制，與應用程式會收到通知，當設計工具變成作用中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.</source>
          <target state="translated">服務會提供設計工具的集合和全域物件，例如 [屬性] 視窗中，可以監視選取的其中一個位置變更事件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A parent service provider.</source>
          <target state="translated">父服務提供者。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.</source>
          <target state="translated">服務要求都會轉送到此提供者，如果他們無法解析的設計介面的管理員。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets the active designer.</source>
          <target state="translated">取得或設定使用中的設計工具。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The ActiveDesignSurface property should be set by the designer's user interface whenever a designer becomes the active window.</source>
          <target state="translated">設計工具會變成作用中視窗時，應該設定 ActiveDesignSurface 屬性在設計工具使用者介面。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default implementation of this property works with the default implementation of the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface to notify interested parties that a new designer is now active.</source>
          <target state="translated">這個屬性的預設實作會使用的預設實作&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;介面，以通知相關的人員的新設計工具目前為作用中。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you provide your own implementation of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, you should override this property to notify your service appropriately.</source>
          <target state="translated">如果您提供自己的實作&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;，您應該覆寫此屬性，以適當地通知您的服務。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This property can be set to <ph id="ph1">`null`</ph>, indicating that no designer is active.</source>
          <target state="translated">這個屬性可以設定為<ph id="ph1">`null`</ph>，指出沒有設計工具為作用中。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The active designer.</source>
          <target state="translated">使用中的設計工具。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Occurs when the currently active designer changes.</source>
          <target state="translated">目前作用中的設計工具變更時發生。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">建立設計介面的執行個體。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新的設計介面執行個體。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">建立設計介面的執行個體。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you want to conveniently add additional per-designer services, use the <ph id="ph1">`parentProvider`</ph> parameter to provide a service provider for this design surface.</source>
          <target state="translated">如果您想要輕鬆地加入每個設計工具的其他服務，使用<ph id="ph1">`parentProvider`</ph>參數，以提供此設計介面的服務提供者。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; itself.</source>
          <target state="translated">CreateDesignSurface 方法會建立合併的服務提供者，可滿足這兩個指定的服務提供者的服務要求以及&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;本身。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurface method then passes this service provider into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; method.</source>
          <target state="translated">CreateDesignSurface 方法接著會將傳遞到此服務提供者&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;方法。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; returns the design surface, the CreateDesignSurface method tries to obtain the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;傳回設計介面，方法會嘗試取得&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;.&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt; CreateDesignSurface&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;之後</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If it is present, and if it is the instance of the service that &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; provided by default, the CreateDesignSurface method raises the &lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt; event.</source>
          <target state="translated">如果存在，而且如果它是服務的執行個體，&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;提供根據預設，CreateDesignSurface 方法就會引發&lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt;事件。&lt;/xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt; &lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A parent service provider.</source>
          <target state="translated">父服務提供者。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object.</source>
          <target state="translated">新的合併的服務提供者就會建立會先要求服務時，此提供者，然後委派至設計介面管理員物件的任何失敗。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This merged provider will be passed into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt; method.</source>
          <target state="translated">這個合併的提供者會傳遞至&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt;方法。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新的設計介面執行個體。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;parentProvider&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;parentProvider&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implementation that creates the design surface.</source>
          <target state="translated">建立設計介面的實作。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurfaceCore method is called by both &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt; methods.</source>
          <target state="translated">同時會呼叫 CreateDesignSurfaceCore 方法&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;方法。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is the implementation that actually creates the design surface.</source>
          <target state="translated">它是實際上會建立在設計介面的實作。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default implementation just returns a new &lt;xref:System.ComponentModel.Design.DesignSurface&gt;.</source>
          <target state="translated">預設實作只會傳回新的&lt;xref:System.ComponentModel.Design.DesignSurface&gt;。&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may override this method to provide a custom object that derives from the &lt;xref:System.ComponentModel.Design.DesignSurface&gt; class.</source>
          <target state="translated">您可能會覆寫這個方法以提供自訂物件衍生自&lt;xref:System.ComponentModel.Design.DesignSurface&gt;類別。&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A service provider to pass to the design surface.</source>
          <target state="translated">要傳遞至設計介面服務提供者。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is either an instance of <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or an object that implements &lt;xref:System.IServiceProvider&gt;, and represents a merge between the service provider of the <bpt id="p2">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class and an externally passed provider.</source>
          <target state="translated">這是執行個體<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或該物件會實作&lt;xref:System.IServiceProvider&gt;，並代表之間的服務提供者的合併<bpt id="p2">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>類別和外部傳遞提供者。&lt;/xref:System.IServiceProvider&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新的設計介面執行個體。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Occurs when a designer is created.</source>
          <target state="translated">發生於設計工具建立時。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when a designer is disposed.</source>
          <target state="translated">發生於設計工具已處置。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a collection of design surfaces.</source>
          <target state="translated">取得在設計介面的集合。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The DesignSurfaces property is implemented directly on top of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, so if you provide your own implementation of that service, this property uses your implementation.</source>
          <target state="translated">DesignSurfaces 屬性是直接頂端實作&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;，因此如果您提供該服務的實作，這個屬性會使用您的實作。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A collection of design surfaces that are currently hosted by the design surface manager.</source>
          <target state="translated">目前裝載的設計介面管理員的設計介面的集合。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Releases the resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">所使用的資源釋出<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The public Dispose method follows the standard &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">公用的 Dispose 方法會依循標準&lt;xref:System.IDisposable&gt;模式。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">呼叫這個方法會終結設計介面的管理員。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.</source>
          <target state="translated">它也會處置服務容器，這會導致所有服務，可實作&lt;xref:System.IDisposable&gt;也被處置。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">這個方法的受保護的版本是<ph id="ph1">`virtual`</ph>就會遵循一般&lt;xref:System.IDisposable&gt;模式。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 因為&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;並沒有任何原生程式碼以清除，它並沒有呼叫&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt; finalizer&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you need to call &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;, you must add a finalizer yourself.</source>
          <target state="translated">如果您需要呼叫&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;，您必須自己加入完成項。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">所使用的 unmanaged 的資源釋出<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>並選擇性釋放 managed 的資源。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The public &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt; method follows the standard &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">公用&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;方法會依循標準&lt;xref:System.IDisposable&gt;模式。&lt;/xref:System.IDisposable&gt; &lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">呼叫這個方法會終結設計介面的管理員。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.</source>
          <target state="translated">它也會處置服務容器，這會導致所有服務，可實作&lt;xref:System.IDisposable&gt;也被處置。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">這個方法的受保護的版本是<ph id="ph1">`virtual`</ph>就會遵循一般&lt;xref:System.IDisposable&gt;模式。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls Dispose.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 因為&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;並沒有任何原生程式碼以清除，它並沒有完成項呼叫 Dispose。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you need to call Dispose, you must add a finalizer yourself.</source>
          <target state="translated">如果您需要呼叫 Dispose，您必須自己加入完成項。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">這個方法會呼叫公用<ph id="ph1">`Dispose()`</ph>方法和&lt;xref:System.Object.Finalize%2A&gt;方法。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>叫用受保護<ph id="ph2">`Dispose(Boolean)`</ph>方法<ph id="ph3">`disposing`</ph>參數設定為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;叫用<ph id="ph1">`Dispose`</ph>與<ph id="ph2">`disposing`</ph>設<ph id="ph3">`false`</ph>。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; references.</source>
          <target state="translated">當<ph id="ph1">`disposing`</ph>參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;參考。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用<ph id="ph1">`Dispose()`</ph>每個參考物件的方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示釋放 managed 和 unmanaged 資源，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>表示只釋放 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets a service in the design surface manager’s service container.</source>
          <target state="translated">取得在設計介面管理員服務容器中的服務。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The GetService method forwards to any service provider that was given to the design surface manager at construction time.</source>
          <target state="translated">任何服務提供者所提供的設計介面的管理員在建構階段轉送給 GetService 方法。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The service type to retrieve.</source>
          <target state="translated">要擷取的服務類型。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An object that implements, or is a derived class of, the given service type; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the service does not exist in the service container.</source>
          <target state="translated">實作，或為衍生的類別，將指定的服務類型的物件否則， <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>如果服務不存在服務容器中。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Occurs when the global selection changes.</source>
          <target state="translated">全域選取範圍變更時發生。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This event is raised when the active designer's selection of component set changes.</source>
          <target state="translated">使用中的設計工具選取的元件集變更時，會引發這個事件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is mapped through the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface.</source>
          <target state="translated">這會對應到&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;介面。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets the design surface manager's ServiceContainer.</source>
          <target state="translated">取得在設計介面管理員 ServiceContainer。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The design surface manager's ServiceContainer.</source>
          <target state="translated">設計介面管理員 ServiceContainer。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>