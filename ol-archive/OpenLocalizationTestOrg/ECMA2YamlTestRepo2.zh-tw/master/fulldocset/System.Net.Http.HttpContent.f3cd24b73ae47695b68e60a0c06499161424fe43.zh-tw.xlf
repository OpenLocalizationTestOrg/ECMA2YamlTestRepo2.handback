<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1756cb392cf75827aed67a2c1411f494a569f96f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Net.Http.HttpContent.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b49f29763b01507532b0e6945245afc8e3acb2f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc619630c315d2d1226d2fb6d7dc287de871321e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A base class representing an HTTP entity body and content headers.</source>
          <target state="translated">代表 HTTP 實體內容和內容標頭的基底類別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated">將 HTTP 內容序列化成位元組和複製至資料流物件所提供的資料流<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">stream</ph> <ept id="p1">&lt;/code&gt;</ept>參數。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the stream object passed as the <ph id="ph1">`stream`</ph> parameter.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件的所有內容寫入至做為傳遞資料流物件之後，會完成<ph id="ph1">`stream`</ph>參數。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The target stream.</source>
          <target state="translated">目標資料流中。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated">將 HTTP 內容序列化成位元組和複製至資料流物件所提供的資料流<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">stream</ph> <ept id="p1">&lt;/code&gt;</ept>參數。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the stream object passed as the <ph id="ph1">`stream`</ph> parameter.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件的所有內容寫入至做為傳遞資料流物件之後，會完成<ph id="ph1">`stream`</ph>參數。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The target stream.</source>
          <target state="translated">目標資料流中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">傳輸 （例如繫結語彙基元，通道） 的相關資訊。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This parameter may be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">這個參數可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a memory stream as an asynchronous operation.</source>
          <target state="translated">將記憶體資料流的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written to the memory stream.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件的所有內容寫入至記憶體資料流之後，會完成。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the memory stream that that represents the HTTP content.</source>
          <target state="translated">當作業完成時，&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;屬性傳回的工作物件上包含表示的 HTTP 內容的記憶體資料流。&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">傳回的資料流可用來讀取內容使用不同的資料流 Api。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The CreateContentReadStreamAsync method buffers the content to a memory stream.</source>
          <target state="translated">CreateContentReadStreamAsync 方法緩衝到記憶體資料流內容。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Derived classes can override this behavior if there is a better way to retrieve the content as stream.</source>
          <target state="translated">在衍生的類別可以覆寫此行為，如果沒有更好的方法來擷取為資料流的內容。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, a byte array or a string could use a more efficient method way such as wrapping a read-only &lt;xref:System.IO.MemoryStream&gt; around the bytes or string.)</source>
          <target state="translated">例如，位元組陣列或字串，可以使用更有效率的方法方式，例如自動換行的唯讀&lt;xref:System.IO.MemoryStream&gt;位元組或字串周圍。)&lt;/xref:System.IO.MemoryStream&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources and disposes of the managed resources used by the <bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">版本所使用的 unmanaged 的資源並處置 managed 資源<bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally disposes of the managed resources.</source>
          <target state="translated">所使用的 unmanaged 的資源釋出<bpt id="p1">&lt;xref href="System.Net.Http.HttpContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>並選擇性處置 managed 資源。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">這個方法會呼叫公用<ph id="ph1">`Dispose()`</ph>方法和&lt;xref:System.Object.Finalize%2A&gt;方法。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>叫用受保護<ph id="ph2">`Dispose(Boolean)`</ph>方法<ph id="ph3">`disposing`</ph>參數設定為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.When the <ph id="ph4">`disposing`</ph> parameter is <ph id="ph5">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Http.HttpContent&gt; references.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;叫用<ph id="ph1">`Dispose`</ph>與<ph id="ph2">`disposing`</ph>設<ph id="ph3">`false`</ph>。當<ph id="ph4">`disposing`</ph>參數是<ph id="ph5">`true`</ph>，這個方法的任何 managed 物件所持有的資源全部釋出這個&lt;xref:System.Net.Http.HttpContent&gt;參考。&lt;/xref:System.Net.Http.HttpContent&gt;&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用<ph id="ph1">`Dispose()`</ph>每個參考物件的方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to releases only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示釋放 managed 和 unmanaged 資源，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>表示只釋放 unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the HTTP content headers as defined in RFC 2616.</source>
          <target state="translated">取得 HTTP 內容標頭，如 RFC 2616 中所定義。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The content headers as defined in RFC 2616.</source>
          <target state="translated">如 RFC 2616 中所定義的內容標頭。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">將記憶體緩衝區的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task&gt;物件會在記憶體緩衝區中已序列化的所有內容之後, 完成。&lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After content is serialized to a memory buffer, calls to one of the  &lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt; methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">記憶體緩衝區序列化內容後，會呼叫其中一個&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;方法會將記憶體緩衝區的內容複製到目標資料流。&lt;/xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">將記憶體緩衝區的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task&gt;物件會在記憶體緩衝區中已序列化的所有內容之後, 完成。&lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After content is serialized to a memory buffer, calls to one of the  &lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt; methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">記憶體緩衝區序列化內容後，會呼叫其中一個&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;方法會將記憶體緩衝區的內容複製到目標資料流。&lt;/xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the content exceeds the value  passed in the <ph id="ph1">`maxBufferSize`</ph> parameter , an exception is thrown.</source>
          <target state="translated">若內容超過傳入的值<ph id="ph1">`maxBufferSize`</ph>參數時，擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The maximum size, in bytes, of the buffer to use.</source>
          <target state="translated">以位元組為單位，要使用之緩衝區的最大大小。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a byte array as an asynchronous operation.</source>
          <target state="translated">將位元組陣列的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written as a byte array.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件做為位元組陣列的所有內容寫入之後，會完成。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the byte array with the HTTP content.</source>
          <target state="translated">當作業完成時，&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;傳回的工作物件上的屬性包含 HTTP 內容的位元組陣列。&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.</source>
          <target state="translated">將 HTTP 內容序列化並傳回資料流，表示以非同步作業的內容。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the stream that represents content has been read.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件之後才會完成所有的資料流，表示讀取內容之後。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the stream that that represents the HTTP content.</source>
          <target state="translated">當作業完成時，&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;屬性傳回的工作物件包含表示的 HTTP 內容的資料流。&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">傳回的資料流可用來讀取內容使用不同的資料流 Api。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a string as an asynchronous operation.</source>
          <target state="translated">將字串的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been written as a string.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件做為字串的所有內容寫入之後，會完成。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Once the operation completes, the  &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the returned task object contains the string with the HTTP content.</source>
          <target state="translated">當作業完成時，&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;傳回的工作物件上的屬性包含 HTTP 內容的字串。&lt;/xref:System.Threading.Tasks.Task%601.Result%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Serialize the HTTP content to a stream as an asynchronous operation.</source>
          <target state="translated">將資料流的 HTTP 內容序列化以非同步作業。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This operation will not block.</source>
          <target state="translated">這項作業不會封鎖。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after all of the content has been serialized to the stream object passed in the <ph id="ph1">`stream`</ph> parameter.</source>
          <target state="translated">傳回&lt;xref:System.Threading.Tasks.Task%601&gt;物件會完成之後的所有內容已序列化資料流物件傳入<ph id="ph1">`stream`</ph>參數。&lt;/xref:System.Threading.Tasks.Task%601&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The target stream.</source>
          <target state="translated">目標資料流中。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">傳輸 （例如繫結語彙基元，通道） 的相關資訊。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This parameter may be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">這個參數可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">工作物件，表示非同步作業。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Determines whether the HTTP content has a valid length in bytes.</source>
          <target state="translated">判斷 HTTP 內容是否有有效的長度，以位元組為單位。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The TryComputeLength method gives a HTTP content the ability to calculate the content length.</source>
          <target state="translated">TryComputeLength 方法可讓 HTTP 內容來計算內容的長度。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This is useful for content types which are able to easily calculate the content length.</source>
          <target state="translated">這是適用於內容的類型，也就是能夠輕易地計算內容的長度。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果計算內容的長度不可能或昂貴 （而需要讓系統用來緩衝整個內容序列化會其中可能高度耗費資源，或需要配置大量記憶體系統），這個方法可以傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.</source>
          <target state="translated">如果此方法傳回<ph id="ph1">`false`</ph>，這表示，需要區塊的傳輸或內容必須在傳送到伺服器之前會緩衝處理。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The length in bytes of the HTTP content.</source>
          <target state="translated">HTTP 內容長度以位元組為單位。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">length</ph><ept id="p2">&lt;/code&gt;</ept> is a valid length; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">length</ph> <ept id="p2">&lt;/code&gt;</ept>是有效的長度，否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>