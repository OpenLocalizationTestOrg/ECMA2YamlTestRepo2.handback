<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51a0d5ce91f2a5965601d5393328e3271f62cda2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7911838c5f9d0db57319abc7d6f89a14bf5ebb20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6316eb7a14139e3850c25c65a9b2cfcf556f0720</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes an object to a new type.</source>
          <target state="translated">將物件序列化為新的類型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The TypeCodeDomSerializer class performs the same tasks as a &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, but serializing an object through this class defines a new type.</source>
          <target state="translated">TypeCodeDomSerializer 類別的執行與相同的工作&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;，但將物件序列化為透過此類別會定義新型別。&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Deserializes the given type declaration.</source>
          <target state="translated">還原序列化指定型別宣告。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Deserialize method deserializes a previously serialized code type declaration.</source>
          <target state="translated">還原序列化方法還原序列化序列化先前的程式碼型別宣告。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table shows the tasks default implementation performs.</source>
          <target state="translated">下表顯示工作預設實作會執行。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>|Task|Description|   |----------|-----------------|   |Case Sensitivity Checks|The implementation searches for a &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; service to decide if it should treat members as case sensitive or case insensitive.|   |Statement Sorting|All member variables and local variables from init methods are stored in a table.</source>
          <target state="translated">|工作 |描述 |  |----------|-----------------|  |大小寫區分檢查 |實作搜尋&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;服務決定如果它應該將成員視為區分大小寫或不區分大小寫。 |  |陳述式排序 |所有成員變數和 init 方法的本機變數會都儲存在資料表中。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</source>
          <target state="translated">則 init 方法中的每個陳述式加入至其左邊，根據組成群組，以便在該變數底下的分組指派或作業在特定變數的所有陳述式的陳述式集合。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Variables that have no statements are discarded.|   |Deserialization|The statement collections for each variable are deserialized according to the variable.|       The following table shows the services the Deserialize method requires.</source>
          <target state="translated">沒有陳述式的變數會被捨棄。 |  |還原序列化 |根據變數的陳述式集合，每個變數都會還原序列化。 |      下表顯示此還原序列化方法要求的服務。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>|Service|Description|   |-------------|-----------------|   |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.|   |&lt;xref:System.ComponentModel.IContainer&gt;|If an object does not exist in the name table during deserialization, a query for &lt;xref:System.ComponentModel.IContainer&gt; is made.</source>
          <target state="translated">|服務 |描述 |  |-------------|-----------------|  |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|雖然並非絕對必要，服務，如果有的話，用於判斷是否序列化應區分大小寫或不區分大小寫。 |  |&lt;xref:System.ComponentModel.IContainer&gt;|如果物件不存在名稱表格中還原序列化時，查詢&lt;xref:System.ComponentModel.IContainer&gt;進行。&lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If this query succeeds, the container is checked for the object.</source>
          <target state="translated">如果這個查詢成功，容器會檢查物件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The container is also used as a stand-in for any container argument needed by components.|</source>
          <target state="translated">容器也作為替代元件所需的任何容器引數。 |</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用於序列化的序列化管理員。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type declaration to use for serialization.</source>
          <target state="translated">型別供序列化使用的宣告。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The root object.</source>
          <target state="translated">根物件。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the method where statements used to serialize a member are stored.</source>
          <target state="translated">傳回儲存用於序列化成員陳述式的方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The GetInitializeMethod method returns the method to emit all of the initialization code for the given member.</source>
          <target state="translated">GetInitializeMethod 方法會傳回指定成員發出所有初始化程式碼的方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default implementation returns an empty constructor.</source>
          <target state="translated">預設實作會傳回空的建構函式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the same method is to be returned for multiple values, the same instance of the method should be returned.</source>
          <target state="translated">如果傳回多個值相同的方法，則應該會傳回相同的執行個體的方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt; dictionary to remember methods you have created.</source>
          <target state="translated">您可以使用&lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;記住您建立的方法的字典。&lt;/xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeDecl`</ph> parameter can also be used to add infrastructure methods.</source>
          <target state="translated"><ph id="ph1">`typeDecl`</ph>參數也可用來新增基礎結構的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</source>
          <target state="translated">例如，如果您想要發出的每個物件不同的方法，您需要依次呼叫所有這些方法的單一方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This method can be added to the code type declaration as needed.</source>
          <target state="translated">這個方法可以加入所需的程式碼型別宣告。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用於序列化的序列化管理員。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">供序列化使用的型別宣告。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value to use for serialization.</source>
          <target state="translated">要用於序列化的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method used to emit all of the initialization code for the given member.</source>
          <target state="translated">用來指定成員發出所有初始化程式碼的方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an array of methods to be interpreted during deserialization.</source>
          <target state="translated">傳回要在還原序列化期間解譯的方法陣列。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default implementation returns a single-element array with the constructor in it.</source>
          <target state="translated">預設實作會傳回在其建構函式的單一元素陣列。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用於序列化的序列化管理員。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">供序列化使用的型別宣告。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array of methods to be interpreted during deserialization.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>的還原序列化期間解譯的方法陣列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Serializes the object root by creating a new type declaration that defines root.</source>
          <target state="translated">藉由建立定義根的新型別宣告序列化物件根。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Serialize method serializes the given root object and optional collection of members to create a new type definition.</source>
          <target state="translated">Serialize 方法會序列化給定的根物件和要建立新的類型定義之成員的選擇性集合。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`members`</ph> collection contains values, these values are serialized.</source>
          <target state="translated">如果<ph id="ph1">`members`</ph>集合包含值，這些值序列化。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Values themselves may serialize as either member variables or local variables.</source>
          <target state="translated">做為成員變數或本機變數，將這些值可能會序列化。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This determination is done by searching for an extender property on the object called <ph id="ph1">`GenerateMember`</ph>.</source>
          <target state="translated">這項判斷是藉由擴充項屬性上呼叫的物件搜尋<ph id="ph1">`GenerateMember`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, a member is generated.</source>
          <target state="translated">如果<ph id="ph1">`true`</ph>，成員就會產生。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Otherwise, a local variable is generated.</source>
          <target state="translated">否則，會產生的本機變數。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For convenience, the <ph id="ph1">`members`</ph> collection can contain the root object.</source>
          <target state="translated">為了方便起見，<ph id="ph1">`members`</ph>集合可以包含根物件。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this case, the root object is not also added as a member or local variable.</source>
          <target state="translated">在此情況下，根物件不也會加入做為成員或本機變數。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name of the returned type is taken from the root object’s name, if it was a named object.</source>
          <target state="translated">如果是具名的物件的傳回型別名稱是取自根物件的名稱。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If not, a name is fabricated from the simple type name of the root class.</source>
          <target state="translated">如果沒有，則名稱簡單類型名稱的根類別中傳遞。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following table shows the tasks performed by the default implementation of the Serialize method.</source>
          <target state="translated">下表顯示 Serialize 方法的預設實作所執行的工作。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>|Task|Description|   |----------|-----------------|   |Context Seeding|The serialization context is initialized with data including the &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt; and &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   |Member Serialization|Next, Serialize walks all of the members and calls &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.</source>
          <target state="translated">|工作 |描述 |  |----------|-----------------|  |內容植入 |序列化內容初始化的資料，包括&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;和&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|  |成員序列化 |接下來，序列化會引導所有成員和呼叫&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because serialization is done opportunistically in &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, this ensures that serialization is not done twice.|   |Root Serialization|Next, the root object is serialized and its statements are added to the statement collection.|   |Statement Integration|After all objects are serialized, the Serialize method orders the statements and adds them to a method returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.</source>
          <target state="translated">序列化是在&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;的 」，因為這可確保，序列化不是兩次。 |  |根序列化 |接下來，序列化根物件，並將其陳述式加入到陳述式集合。 |  |陳述式的整合 |Serialize 方法所有物件都會都序列化之後，排序陳述式，並且將它們加入至方法，傳回從&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt; &lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Finally, a constructor is fabricated that calls all of the methods returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.|      -       The following table shows the objects the Serialize method places on the context stack.</source>
          <target state="translated">最後，建構函式會傳遞可呼叫的所有方法所傳回的&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;。 |     -下表顯示的物件序列化方法數位內容堆疊上。&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>|Instance|Description|   |--------------|-----------------|   |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|This serializer.</source>
          <target state="translated">|執行個體 |描述 |  |--------------|-----------------|  |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|這個序列化程式。&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Deriving classes may find it useful to add public properties to this class.|   |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|The type being created.</source>
          <target state="translated">衍生類別可能會發現將這個類別的公用屬性。 |  |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|正在建立的類型。&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Most objects do not need direct access to this.|</source>
          <target state="translated">大部分的物件不需要直接存取。 |</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用於序列化的序列化管理員。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">要序列化的物件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optional collection of members.</source>
          <target state="translated">選擇性成員的集合。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or empty.</source>
          <target state="translated">可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或空白。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that defines the root object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>定義根物件。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>