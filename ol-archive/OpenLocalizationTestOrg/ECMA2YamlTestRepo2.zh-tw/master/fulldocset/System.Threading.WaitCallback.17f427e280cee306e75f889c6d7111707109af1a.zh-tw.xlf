<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dba0a1f31d37c2ef074aebf914cd8537b07928cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.WaitCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">694702c94445c6967e6ebdee42164f5d285c2dc1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ebb0a826ec285d368fb4b791b375598335ad4f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a callback method to be executed by a thread pool thread.</source>
          <target state="translated">表示要執行之執行緒集區執行緒的回呼方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WaitCallback represents a callback method that you want to execute on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">WaitCallback 代表您想要在上執行的回呼方法&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create the delegate by passing your callback method to the WaitCallback constructor.</source>
          <target state="translated">將回呼方法傳遞至 WaitCallback 建構函式建立委派。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your method must have the signature shown here.</source>
          <target state="translated">您的方法必須有簽章如下所示。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Queue your task for execution by passing the WaitCallback delegate to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">佇列工作，來執行，藉由傳遞至&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;。&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt; WaitCallback 委派</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your callback method executes when a thread pool thread becomes available.</source>
          <target state="translated">使用執行緒集區執行緒時執行回呼方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the WaitCallback constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Visual Basic 使用者可以省略 WaitCallback 建構函式，並想要使用<ph id="ph2">`AddressOf`</ph>運算子時傳遞至&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;。&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;回呼方法</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic 會自動呼叫正確的委派建構函式。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; when you queue your task for execution.</source>
          <target state="translated">如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;時您排入佇列工作，來執行。&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each time your callback method executes, the <ph id="ph1">`state`</ph> parameter contains this object.</source>
          <target state="translated">執行回呼方法時，每次<ph id="ph1">`state`</ph>參數包含此物件。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about using callbacks to synchronize thread pool threads, see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需使用回呼來同步處理執行緒集區執行緒的詳細資訊，請參閱<bpt id="p1">[</bpt>Managed 執行緒集區<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>