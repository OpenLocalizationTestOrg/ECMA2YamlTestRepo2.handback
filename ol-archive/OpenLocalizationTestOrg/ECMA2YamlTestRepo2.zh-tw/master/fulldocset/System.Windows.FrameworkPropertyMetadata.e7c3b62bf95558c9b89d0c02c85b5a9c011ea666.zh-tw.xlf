<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09a32cf05909536a9016c9613e848634f520d8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.FrameworkPropertyMetadata.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29b3c61b2644d36cb422407c298e0fbc1a081977</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3d94579fab6a7da9eb09e2f1fbaa83afdfae263</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</source>
          <target state="translated">回報或套用中繼資料相依性屬性，特別加入架構專屬的屬性系統特性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class derives from &lt;xref:System.Windows.PropertyMetadata&gt; (through &lt;xref:System.Windows.UIPropertyMetadata&gt;) .</source>
          <target state="translated">此類別衍生自&lt;xref:System.Windows.PropertyMetadata&gt;(透過&lt;xref:System.Windows.UIPropertyMetadata&gt;)。&lt;/xref:System.Windows.UIPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types &lt;xref:System.Windows.PropertyMetadata&gt; or &lt;xref:System.Windows.UIPropertyMetadata&gt;.</source>
          <target state="translated">大部分的 WPF 架構層級應用程式開發用途而言，FrameworkPropertyMetadata 是用於相依性屬性中繼資料，而不是基底中繼資料型別&lt;xref:System.Windows.PropertyMetadata&gt;或&lt;xref:System.Windows.UIPropertyMetadata&gt;.&lt;/xref:System.Windows.UIPropertyMetadata&gt;&lt;/xref:System.Windows.PropertyMetadata&gt;的類型</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is true both for existing dependency properties and for most custom dependency property scenarios.</source>
          <target state="translated">這適用於現有的相依性屬性和大部分自訂相依性屬性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The members declared by this class that supplement the &lt;xref:System.Windows.PropertyMetadata&gt; base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</source>
          <target state="translated">這個宣告的成員類別該補充&lt;xref:System.Windows.PropertyMetadata&gt;基底類別包含各種布林屬性，可指定或報表 WPF 架構層級屬性的系統行為，例如屬性繼承、 資料繫結和版面配置。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Several constructor signatures for creating a FrameworkPropertyMetadata instance take a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; parameter.</source>
          <target state="translated">建立 FrameworkPropertyMetadata 執行個體的數個建構函式簽章需要&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;參數。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;列舉型別只用於指定初始的行為在建構函式，而且否則未公開 FrameworkPropertyMetadata 建構後。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</source>
          <target state="translated">建構的執行個體中，您可以取得或設定共用的建構函式呼叫中使用的列舉值名稱的各種屬性對應的資訊。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    This class is not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字用法中通常不使用這個類別<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This signature initializes all values of FrameworkPropertyMetadata to their property defaults.</source>
          <target state="translated">此簽章初始化 FrameworkPropertyMetadata 為其屬性的預設值的所有值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; will be <ph id="ph1">`null`</ph>, and the various &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; Boolean properties will be <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;將<ph id="ph1">`null`</ph>，各種&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;將布林值屬性<ph id="ph2">`false`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified default value.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，而指定的預設值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">預設值的相依性屬性，通常是提供給特定類型的值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別具有指定<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>回呼。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework-level metadata options.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>架構層級中繼資料 選項提供的預設值與類別。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">值標記中設定旗標為<ph id="ph1">`flags`</ph>參數會設定的布林值&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;屬性，使其符合&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;旗標的名稱，以<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">接下來，只要中繼資料尚未套用至特定的屬性系統作業，您可以變更在中繼資料，屬性的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">預設值的相依性屬性，通常是提供給特定類型的值。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">中繼資料的選項旗標 (的組合<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">這些選項會指定配置或資料繫結之類的系統互動的相依性屬性的特性。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別提供的預設值，並指定<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>回呼。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">預設值的相依性屬性，通常是提供給特定類型的值。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified callbacks.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別指定的回呼。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This implementation calls a base initializer and then adds the <ph id="ph1">`coerceValueCallback`</ph> by setting the property on the base instance.</source>
          <target state="translated">此實作會呼叫基底的初始設定式，然後新增<ph id="ph1">`coerceValueCallback`</ph>基底的執行個體上設定的屬性。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">每當對屬性系統呼叫，就會呼叫處理常式實作的參考&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;這個相依性屬性。&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別提供的預設值和架構中繼資料 選項，並指定<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>回呼。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">值標記中設定旗標為<ph id="ph1">`flags`</ph>參數會設定的布林值&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;屬性，使其符合&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;旗標的名稱，以<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">預設值的相依性屬性，通常是提供給特定類型的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">中繼資料的選項旗標 (的組合<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值)。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">這些選項會指定配置或資料繫結之類的系統互動的相依性屬性的特性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified callbacks.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別提供的預設值與指定的回呼。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">相依性屬性，通常提供做為特定類型的預設值。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">每當對屬性系統呼叫將會呼叫處理常式實作的參考&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;這個相依性屬性。&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified callbacks.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別提供的預設值和架構中繼資料 選項，並指定的回呼。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">值標記中設定旗標為<ph id="ph1">`flags`</ph>參數會設定的布林值&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;屬性，使其符合&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;旗標的名稱，以<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">相依性屬性，通常提供做為特定類型的預設值。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">中繼資料的選項旗標 (的組合<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值)。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">這些選項會指定配置或資料繫結之類的系統互動的相依性屬性的特性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">每當對屬性系統呼叫將會呼叫處理常式實作的參考&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;針對這個屬性。&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用提供的預設值和架構中繼資料 選項、 指定的回呼和布林值，可用來防止動畫之屬性的類別。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph>參數集的&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;立即的基底&lt;xref:System.Windows.UIPropertyMetadata&gt;類別&lt;/xref:System.Windows.UIPropertyMetadata&gt;所宣告的屬性&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;的初始值</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">值標記中設定旗標為<ph id="ph1">`flags`</ph>參數會設定的布林值&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;屬性，使其符合&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;旗標的名稱，以<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">相依性屬性，通常提供做為特定類型的預設值。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">中繼資料的選項旗標 (的組合<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">這些選項會指定配置或資料繫結之類的系統互動的相依性屬性的特性。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; on this dependency property.</source>
          <target state="translated">每當對屬性系統呼叫將會呼叫處理常式實作的參考&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;此相依性屬性。&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要防止對屬性系統要套用這個中繼資料的屬性顯示動畫。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">這類屬性會引發執行階段例外狀況源自屬性系統，如果嘗試的這些動畫。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to permit animating the property.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要允許的屬性顯示動畫。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別提供的預設值和架構中繼資料的選項，指定的回呼，布林值，可用來防止動畫的屬性和資料繫結更新觸發程序預設值。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">提供值的型別<ph id="ph1">`defaultValue`</ph>必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">值&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph>參數集的&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;立即的基底&lt;xref:System.Windows.UIPropertyMetadata&gt;類別&lt;/xref:System.Windows.UIPropertyMetadata&gt;所宣告的屬性&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;的初始值</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information about the update source behavior for bindings, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需繫結的更新來源行為的詳細資訊，請參閱<bpt id="p1">[</bpt>資料繫結概觀<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">值標記中設定旗標為<ph id="ph1">`flags`</ph>參數會設定的布林值&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;屬性，使其符合&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;旗標的名稱，以<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">相依性屬性，通常提供做為特定類型的預設值。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">中繼資料的選項旗標 (的組合<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值)。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">這些選項會指定配置或資料繫結之類的系統互動的相依性屬性的特性。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">對屬性系統有效的屬性值變更時，會呼叫處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">每當對屬性系統呼叫將會呼叫處理常式實作的參考&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;針對這個屬性。&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要防止對屬性系統要套用這個中繼資料的屬性顯示動畫。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">這類屬性會引發執行階段例外狀況源自屬性系統，如果嘗試的這些動畫。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for this property are applied that have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>時套用這個屬性的繫結所要使用其<bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>設<bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定為<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</source>
          <target state="translated">取得或設定值，這個值指出相依性屬性可能會在配置引擎作業期間影響排列傳遞。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;和&lt;xref:System.Windows.FrameworkContentElement&gt;包含實作&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;，監視存在的項目的所有相依性屬性的有效值變更。&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element (a call to &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).</source>
          <target state="translated">有效的值變更，並具有 AffectsArrange 的中繼資料的相依性屬性設定為該邏輯的一部分，<ph id="ph1">`true`</ph>會初始化延後的要求，使該元素的視覺效果 (呼叫&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;)。&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">因為此 WPF 架構層級實作已備妥，通常不需要尋找 AffectsArrange 與相依性屬性，除非您基本上要取代或修改的 WPF 架構層級配置行為。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">自訂&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;實作可能會選擇將相依性屬性變更的類似行為 AffectsArrange 所在<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are either not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不常使用中<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在潛在的相依性屬性會影響排列傳遞。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</source>
          <target state="translated">取得或設定值，指出相依性屬性是否可能影響在版面配置引擎作業期間的測量傳遞。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;和&lt;xref:System.Windows.FrameworkContentElement&gt;包含實作&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;，監視存在的項目的所有相依性屬性的有效值變更。&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">有效的值變更，並具有 AffectsMeasure 的中繼資料的相依性屬性設定為該邏輯的一部分，<ph id="ph1">`true`</ph>會初始化延後的要求，使該元素的視覺效果。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">因為此 WPF 架構層級實作已備妥，通常不需要尋找 AffectsMeasure 與相依性屬性，除非您基本上要取代或修改的 WPF 架構層級配置行為。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">自訂&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;實作可能會選擇將相依性屬性變更的類似行為 AffectsMeasure 所在<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在潛在的相依性屬性會影響測量行程。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">取得或設定值，這個值指出相依性屬性可能會在配置引擎作業期間影響其父項目配置的排列傳遞。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;和&lt;xref:System.Windows.FrameworkContentElement&gt;包含實作&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;，監視存在的項目的所有相依性屬性的有效值變更。&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">有效的值變更，並具有 AffectsParentArrange 的中繼資料的相依性屬性設定為該邏輯的一部分，<ph id="ph1">`true`</ph>會初始化延後的要求，使視覺效果的父項目。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentArrange because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">一般而言，您不需要來報告變更的&lt;xref:System.Windows.FrameworkElement&gt;使用 AffectsParentArrange，因為項目本身會已經有它自己的父項目屬性&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</source>
          <target state="translated">通常已足夠，因為子元素中的變更通常起始父代排列在適當時。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>AffectsParentArrange is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">AffectsParentArrange 有時會用&lt;xref:System.Windows.FrameworkContentElement&gt;在衍生類別。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">在此情況下，子系項目集合的屬性，但有&lt;xref:System.Windows.FrameworkContentElement&gt;衍生的類別不會控制自己的轉譯。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">轉譯由&lt;xref:System.Windows.FrameworkElement&gt;做為內容主機的父項目。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</source>
          <target state="translated">比方說的值變更&lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;失效附加的屬性的子元素所排列的父代，因為必須變更子系的父系中的位置。&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property has metadata where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">因此，&lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;附加的屬性的中繼資料所在 AffectsParentArrange <ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Another example is &lt;xref:System.Windows.Controls.Control.Padding%2A&gt;; when this property changes, the parent might change the positioning of the child, depending on available space.</source>
          <target state="translated">另一個例子是&lt;xref:System.Windows.Controls.Control.Padding%2A&gt;; 當此屬性的變更，父代可能會變更位置的子系，視可用空間而定。&lt;/xref:System.Windows.Controls.Control.Padding%2A&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">因為此 WPF 架構層級實作已備妥，通常不需要尋找 AffectsParentArrange 與相依性屬性，除非您基本上要取代或修改的 WPF 架構層級配置行為。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">自訂&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;實作可能會選擇將相依性屬性變更的類似行為 AffectsParentArrange 所在<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">任何屬性衍生的類別&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在潛在的相依性屬性會影響排列傳遞，特別是在其父項目。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">取得或設定值，這個值指出相依性屬性可能會在配置引擎作業期間影響其父項目配置的測量傳遞。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;和&lt;xref:System.Windows.FrameworkContentElement&gt;包含實作&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;，監視存在的項目的所有相依性屬性的有效值變更。&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">有效的值變更，並具有 AffectsParentMeasure 的中繼資料的相依性屬性設定為該邏輯的一部分，<ph id="ph1">`true`</ph>會初始化延後的要求，使視覺效果的父項目。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">因為此 WPF 架構層級實作已備妥，通常不需要尋找 AffectsParentMeasure 與相依性屬性，除非您基本上要取代或修改的 WPF 架構層級配置行為。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentMeasure because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">一般而言，您不需要來報告變更的&lt;xref:System.Windows.FrameworkElement&gt;使用 AffectsParentMeasure，因為項目本身會已經有它自己的父項目屬性&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</source>
          <target state="translated">通常已足夠，因為子元素中的變更通常會起始時適當的父量值傳遞。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>AffectsParentMeasure is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">AffectsParentMeasure 有時會用&lt;xref:System.Windows.FrameworkContentElement&gt;在衍生類別。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">在此情況下，子系項目集合的屬性，但有&lt;xref:System.Windows.FrameworkContentElement&gt;衍生的類別不會控制自己的轉譯。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">轉譯由&lt;xref:System.Windows.FrameworkElement&gt;做為內容主機的父項目。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</source>
          <target state="translated">比方說的值變更&lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;是被子元素的屬性會使量值的父代，因為段落的相對間距可能變更，可能會增加或減少內容主機大小。&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property has metadata where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">因此，&lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;屬性的中繼資料所在 AffectsParentMeasure <ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is <ph id="ph1">`true`</ph>, as part of content host rendering logic.</source>
          <target state="translated">內容主機項目也經常尋找相依性屬性的變更 AffectsParentMeasure 所在<ph id="ph1">`true`</ph>，內容主機轉譯邏輯的一部分。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;xref:System.Windows.Controls.TextBox&gt; element must respond to certain changes within text that might require that the bounding box of the &lt;xref:System.Windows.Controls.TextBox&gt; itself be changed.</source>
          <target state="translated">比方說，&lt;xref:System.Windows.Controls.TextBox&gt;項目必須回應某些變更可能會要求的文字中的週框方塊&lt;xref:System.Windows.Controls.TextBox&gt;本身變更。&lt;/xref:System.Windows.Controls.TextBox&gt; &lt;/xref:System.Windows.Controls.TextBox&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">自訂&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;實作可能會選擇將相依性屬性變更的類似行為 AffectsParentMeasure 所在<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">任何屬性衍生的類別&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.The default is <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在潛在的相依性屬性會影響測量行程，特別是在其父項目。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。預設值是<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</source>
          <target state="translated">取得或設定值，指出相依性屬性是否可能影響一般的版面配置，而不會特別影響排列或測量，但需要重新繪製。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;和&lt;xref:System.Windows.FrameworkContentElement&gt;包含實作&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;，監視存在的項目的所有相依性屬性的有效值變更。&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">有效的值變更，並具有 AffectsRender 的中繼資料的相依性屬性設定為該邏輯的一部分，<ph id="ph1">`true`</ph>會初始化延後的要求，使該元素的視覺效果。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">因為此 WPF 架構層級實作已備妥，通常不需要尋找 AffectsRender 與相依性屬性，除非您基本上要取代或修改的 WPF 架構層級配置行為。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsRender is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">自訂&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;實作可能會選擇將相依性屬性變更的類似行為 AffectsRender 所在<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">任何屬性衍生的類別&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists affects rendering; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在的相依性屬性會影響呈現。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property binds two-way by default.</source>
          <target state="translated">取得或設定值，指出是否將屬性預設雙向繫結。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In absence of this property being <ph id="ph1">`true`</ph>, binding updates are one-way by default, based on the default behavior of the &lt;xref:System.Windows.Data.Binding&gt; constructors or equivalent <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">沒有這個屬性被<ph id="ph1">`true`</ph>，更新繫結預設為單向，根據的預設行為&lt;xref:System.Windows.Data.Binding&gt;建構函式或對等項目<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>語法。&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In existing elements, you will usually find this property set to <ph id="ph1">`true`</ph> in metadata for dependency properties that both report state and are modifiable by user action, for example &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">在現有的項目，您通常會發現這個屬性設定為<ph id="ph1">`true`</ph>中的報告狀態和可修改的使用者動作，例如&lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;的相依性屬性的中繼資料</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This property only reports the default binding update characteristics of the dependency property in general.</source>
          <target state="translated">這個屬性只在一般情況下報告的相依性屬性的預設繫結更新特性。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Any binding set to this property on an instance can locally set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property of the binding and change this default.</source>
          <target state="translated">任何繫結設定為執行個體上的這個屬性可以在本機設定&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;繫結屬性和變更這個預設值。&lt;/xref:System.Windows.Data.Binding.Mode%2A&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">任何屬性衍生的類別&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists binds two-way by default; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個中繼資料所在的相依性屬性預設雙向繫結。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Gets or sets the default for <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for the property with this metadata are applied, which have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得或設定的預設值為<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>套用繫結屬性與這個中繼資料時使用，其具有其<bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>設<bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, other than <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">列舉型別，而不是值<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This property is set to <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; the value you set is supposed to become the default when requested by bindings.</source>
          <target state="translated">這個屬性設定為<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 您設定的值應該是成為繫結要求時的預設值。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the value of the dependency property is inheritable.</source>
          <target state="translated">取得或設定值，指出相依性屬性的值是否可繼承。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Property value inheritance is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</source>
          <target state="translated">屬性值繼承是一項功能<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>屬性系統，在 WPF 架構層級，讓特定相依性屬性可以在本機設定的項目或附近的根目錄<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>項目樹狀結構，然後將其也會包含該屬性的子項目之邏輯樹狀結構內的所有項目繼承的值。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Property value inheritance is not enabled by default, and enabling it does have some performance implications.</source>
          <target state="translated">根據預設，未啟用屬性值繼承，且啟用一些效能隱含作用。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>屬性值繼承<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 雖然繼承屬性值可能會顯示適用於非附加相依性屬性，請透過在執行階段樹狀目錄中的某些物件部門附加屬性的繼承行為是未定義。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Always use &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; to register properties where you specify Inherits in the metadata.</source>
          <target state="translated">一律使用&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;註冊，您指定 Inherits 中繼資料中的屬性。&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value is inheritable; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果屬性值為可繼承。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether data binding is supported for the dependency property.</source>
          <target state="translated">取得值，指出是否支援資料繫結的相依性屬性。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This property reports <ph id="ph1">`false`</ph> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;, is set to <ph id="ph2">`true`</ph> in this metadata.</source>
          <target state="translated">這個屬性會報告<ph id="ph1">`false`</ph>其中兩個可能的狀況︰ 不允許其中一個相依性屬性的資料繫結，因為相依性屬性是唯讀的 （如報告相依性屬性的識別項，不是中繼資料中），或另一個中繼資料屬性的值&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;，設為<ph id="ph2">`true`</ph>此中繼資料中。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This property is exposed as a convenience so that callers do not have to check both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;.</source>
          <target state="translated">這個屬性公開為方便起見，讓呼叫端沒有檢查這兩個&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;和&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt; &lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; (note the slight naming convention difference versus &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).</source>
          <target state="translated">如果您嘗試建立其他的讀/寫屬性應該不支援資料繫結所指定的中繼資料，請指定此旗標&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;(請注意有些微的命名慣例差異與&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;)。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if data binding is supported on the dependency property to which this metadata applies; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果要套用這個中繼資料; 的相依性屬性支援資料繫結否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the dependency property supports data binding.</source>
          <target state="translated">取得或設定值，這個值，指出相依性屬性是否支援資料繫結。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Note that this metadata property is set to <ph id="ph1">`true`</ph> specifically for properties that should not support data binding, despite being read-write properties.</source>
          <target state="translated">請注意，此中繼資料屬性設定為<ph id="ph1">`true`</ph>特別針對不支援資料繫結，儘管讀寫屬性的屬性。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</source>
          <target state="translated">預期是，在其中宣告相依性屬性的大部分情況下，資料繫結想要使用，因為資料繫結是其中一個重要的案例，其中的相依性屬性是很有用。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;, this does not merely change a default that can later be changed on a specific binding.</source>
          <target state="translated">不同於&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;，這並不只是變更稍後可變更特定的繫結的預設值。&lt;/xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Setting this property <ph id="ph1">`true`</ph> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</source>
          <target state="translated">設定這個屬性<ph id="ph1">`true`</ph>相依性屬性的中繼資料中的中繼資料將會停用透過運算式將值套用至該相依性屬性的所有繫結。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <ph id="ph1">`false`</ph> for IsNotDataBindable.</source>
          <target state="translated">唯讀相依性屬性不支援資料繫結 （因為它們沒有 setter 可套用變更的值），但仍會報告<ph id="ph1">`false`</ph>IsNotDataBindable 的。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>This is because properties that correspond to a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</source>
          <target state="translated">這是因為屬性對應到&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;值將會報告使用方式中繼資料已實際建立，而不是一律報告結束結果行為的屬性命名可能會隱含的權限的同位檢查。&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>To determine whether a given dependency property permits data binding, you should usually check &lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; instead.</source>
          <target state="translated">若要判斷給定的相依性屬性是否允許資料繫結，您應該通常檢查&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;改用。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; is a convenience for checking both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and IsNotDataBindable as a single operation, yielding the expected result.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;同時檢查方便&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;和 IsNotDataBindable 成單一作業，而產生預期的結果。&lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property does not support data binding; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果屬性不支援資料繫結。，否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</source>
          <target state="translated">取得或設定值，指出此屬性是否包含日誌記錄資訊的應用程式可以或應該儲存為日誌記錄實作的一部分。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果日誌記錄應該執行; 套用這個中繼資料的相依性屬性否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Enables a merge of the source metadata with base metadata.</source>
          <target state="translated">可讓基底中繼資料的來源中繼資料的合併。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>This method is used internally when metadata is being overridden.</source>
          <target state="translated">中繼資料覆寫時，為內部使用這個方法。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The base metadata to merge.</source>
          <target state="translated">要合併的基底中繼資料。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The dependency property this metadata is being applied to.</source>
          <target state="translated">此中繼資料套用至相依性屬性。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
          <target state="translated">此中繼資料已套用至屬性，指出密封的中繼資料時呼叫。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Any mutability of the data structure of a &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; instance should be marked as immutable when this method is invoked.</source>
          <target state="translated">任何可變動性的資料結構的&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;執行個體應該標記為當做不變時叫用此方法。&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The dependency property to which the metadata has been applied.</source>
          <target state="translated">相依性屬性中繼資料套用。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
          <target state="translated">如果這是特定類型的中繼資料，此中繼資料與相關聯的類型。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If this is default metadata, this value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">如果這是預設的中繼資料時，這個值可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</source>
          <target state="translated">取得或設定值，指出屬性值繼承評估是否應該跨越特定內容界限邏輯樹狀結構中的項目。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</source>
          <target state="translated">此中繼資料會報告跨特殊的父項目子系項目界限少見修改屬性值繼承行為。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The canonical example of such a boundary is the contents of a &lt;xref:System.Windows.Controls.Frame&gt;, where the &lt;xref:System.Windows.Controls.Frame&gt; content might get reloaded independently of the existence of the &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">這類界限的標準範例是內容&lt;xref:System.Windows.Controls.Frame&gt;，其中的&lt;xref:System.Windows.Controls.Frame&gt;內容可能會取得獨立的&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt;存在重新載入&lt;/xref:System.Windows.Controls.Frame&gt;&lt;/xref:System.Windows.Controls.Frame&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The desired property system behavior is that property value inheritance should not traverse into the contents of the &lt;xref:System.Windows.Controls.Frame&gt;, because these contents might be elements that the application hosting the frame does not own or control.</source>
          <target state="translated">所需的屬性系統行為是屬性值繼承應該周遊到的內容&lt;xref:System.Windows.Controls.Frame&gt;，因為這些內容可能會裝載框架的應用程式不會擁有或控制的項目。&lt;/xref:System.Windows.Controls.Frame&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Specifying metadata with OverridesInheritanceBehavior set to <ph id="ph1">`true`</ph>, as well as specifying &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; as <ph id="ph2">`true`</ph>, will cause the property on which the metadata is applied to be inheritable even across the &lt;xref:System.Windows.Controls.Frame&gt; boundary or similar boundaries.</source>
          <target state="translated">指定中繼資料與 OverridesInheritanceBehavior 設<ph id="ph1">`true`</ph>，也會為指定&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;做為<ph id="ph2">`true`</ph>，會導致的屬性的中繼資料套用為可繼承即使透過&lt;xref:System.Windows.Controls.Frame&gt;界限或類似的界限。&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，呼叫的一部分，會使用中繼資料之後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value inheritance should span across certain content boundaries; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果屬性值繼承應該跨越特定內容界限。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</source>
          <target state="translated">取得或設定值，指出是否相依性屬性的子屬性不會影響包含物件的轉譯。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</source>
          <target state="translated">此中繼資料的選項是相關的是參考類型，其中該類型有它自己的屬性值的相依性屬性。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</source>
          <target state="translated">一般而言，配置系統邏輯是假設任何具有子屬性的相依性屬性可能會影響配置，因為檢查所有的子屬性的變更會耗用更多時間比實際執行另一個呈現的傳遞。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Setting this option to <ph id="ph1">`true`</ph> is useful for optimizing performance of the WPF framework level layout system implementation.</source>
          <target state="translated">此選項設為<ph id="ph1">`true`</ph>適用於最佳化 WPF 架構層級的版面配置系統實作的效能。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">在衍生類別的屬性&lt;xref:System.Windows.PropertyMetadata&gt;通常定義為讀寫物件模型中。&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">這是讓可在執行個體的初始設定之後加以調整。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">不過，一旦一部分的呼叫會使用中繼資料&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;， &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;，或&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">嘗試設定此屬性之後&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;是<ph id="ph1">`true`</ph>此中繼資料執行個體將會引發例外狀況。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文字使用這個類別的成員不通常會以<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if changes to sub-property values do not affect rendering if changed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果子屬性值的變更不會影響呈現，如果變更，否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">中繼資料已套用至相依性屬性作業，使中繼資料已密封且無法設定屬性的中繼資料。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>