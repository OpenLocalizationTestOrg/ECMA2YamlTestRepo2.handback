<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">622d983b53c274129793847d685acbdd440b7fa2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3114df2d94f35da3a16257cd30002677db5ea038</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7dba3e780d88fd1bff1362801691f4fb4116ef3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</source>
          <target state="translated">提供管理-到-COM interop 案例中的 interop 虛設常式的使用者自訂的支援。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:      -   Take advantage of customized interop stubs at build time instead of run time.</source>
          <target state="translated">這個屬性可讓具有認知封送處理和 interop 呼叫，執行下列動作的內部運作的 interop 開發人員:-利用自訂 interop 虛設常式在建置階段，而不是執行階段。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   Debug customized interop stubs.</source>
          <target state="translated">偵錯自訂 interop 虛設常式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Provide marshaling capabilities within a stub that the runtime does not provide.</source>
          <target state="translated">-提供在執行階段不會提供 stub 封送處理功能。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   Provide user-specific method dispatch capabilities.</source>
          <target state="translated">-提供使用者特定方法分派功能。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.</source>
          <target state="translated">您可以套用的屬性上指定的受管理的原生 COM interop 對應虛設常式方法的介面中的方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub.</source>
          <target state="translated">如果在執行階段期間遇到這個屬性時，common language runtime 不會以動態方式產生 interop 的虛設常式。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Instead, it invokes the custom stub that was created at build time.</source>
          <target state="translated">相反地，它會叫用自訂在建置期間建立的虛設常式。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked <ph id="ph1">`[ComImport]`</ph>.</source>
          <target state="translated">ManagedToNativeComInteropStubAttribute 屬性具有下列特性:-屬性只能用於從標記的介面方法<ph id="ph1">`[ComImport]`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the attribute is applied to non-interface types, it is ignored by the runtime.</source>
          <target state="translated">如果此屬性會套用至非介面類型，則會忽略由執行階段。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-   The attribute can be used only once on the same method in an interface.</source>
          <target state="translated">-屬性能一次在介面中的相同方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If it is used more than once, the compiler generates a duplicated attribute error.</source>
          <target state="translated">如果使用超過一次，編譯器會產生重複的屬性時發生錯誤。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>-   The attribute is not inheritable from a base interface.</source>
          <target state="translated">-屬性不是繼承自基底介面的。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Derived interfaces must explicitly assign the attribute.</source>
          <target state="translated">衍生的介面必須明確地指派屬性。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   The assembly that contains the attributed method must also contain the customized stub.</source>
          <target state="translated">-包含的屬性化的方法的組件也必須包含自訂的虛設常式。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overloaded stub methods are valid.</source>
          <target state="translated">多載的虛設常式方法都是有效的。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub.</source>
          <target state="translated">雖然您指定的型別和虛設常式方法的名稱，執行階段會探索對應的虛設常式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit <ph id="ph1">`this`</ph> pointer.</source>
          <target state="translated">它會檢查在介面方法中，所有引數，然後執行 比對的方式使用明確的完整簽章<ph id="ph1">`this`</ph>指標。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.</source>
          <target state="translated">也可能會共用相同的虛設常式方法; 介面中的多個方法不過，您應該注意當您使用共用的虛設常式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Stub methods must be static.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 虛設常式方法必須是靜態。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      <ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>       You could then use the following code to declare the corresponding stub method:      <ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></source>
          <target state="translated">您可以通知執行階段使用自訂 interop 虛設常式在建置階段，而不是以下列 C# 程式碼的執行時間︰<ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>您接著可以使用下列程式碼來宣告對應的虛設常式方法︰<ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified class type and method name.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別指定的類別類型和方法名稱。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The class that contains the required stub method.</source>
          <target state="translated">包含必要的虛設常式方法的類別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the stub method.</source>
          <target state="translated">虛設常式方法的名稱。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph> cannot be found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph>找不到。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-or-       The method is not static or non-generic.</source>
          <target state="translated">-或者-方法不是靜態或非泛型。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-       The method's parameter list does not match the expected parameter list for the stub.</source>
          <target state="translated">-或者-方法的參數清單不符合預期的參數清單，為虛設常式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</source>
          <target state="translated">包含 managed interop 方法的介面有沒有存取權的虛設常式方法，因為虛設常式方法具有私用或受保護的存取範圍，或因為安全性問題。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the class that contains the required stub method.</source>
          <target state="translated">取得包含所需的虛設常式方法的類別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The class that contains the customized interop stub.</source>
          <target state="translated">包含自訂 interop 虛設常式的類別。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the name of the stub method.</source>
          <target state="translated">取得虛設常式方法的名稱。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The name of a customized interop stub.</source>
          <target state="translated">自訂 interop 虛設常式的名稱。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>