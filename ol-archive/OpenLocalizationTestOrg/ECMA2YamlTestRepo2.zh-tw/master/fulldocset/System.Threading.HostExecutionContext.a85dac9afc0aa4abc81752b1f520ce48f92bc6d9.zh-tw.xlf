<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28b1e81979ebc849327a7bcfeaf3313aabfc00d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.HostExecutionContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c89f039547f44265d7ffd8217f003ceb25aa5dfd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad0dfa8499f5dc01731c0f78d674dd7bbbb60fd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates and propagates the host execution context across threads.</source>
          <target state="translated">封裝並散佈跨執行緒的主控件執行內容。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The HostExecutionContext is part of a larger &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">HostExecutionContext 是較大的&lt;xref:System.Threading.ExecutionContext&gt;.&lt;/xref:System.Threading.ExecutionContext&gt;的一部分</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The host context migrates, or flows, with the execution context.</source>
          <target state="translated">主機內容移轉或流動，與執行內容。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default constructor creates a host execution context whose &lt;xref:System.Threading.HostExecutionContext.State%2A&gt; property value is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">預設建構函式會建立主機執行內容的&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;屬性值是<ph id="ph1">`null`</ph>。&lt;/xref:System.Threading.HostExecutionContext.State%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified state.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別使用指定的狀態。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.HostExecutionContext&gt; is included with the &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext&gt;隨附於&lt;xref:System.Threading.ExecutionContext&gt;.&lt;/xref:System.Threading.ExecutionContext&gt; &lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`state`</ph> represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">`state`</ph>代表一個安全控制代碼，其中包含<ph id="ph2">`IUnknown`</ph>主控件的指標。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">代表主機執行的內容狀態的物件。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current host execution context.</source>
          <target state="translated">建立一份目前的主機執行內容。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The copy can be used as the parameter to a &lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt; method call.</source>
          <target state="translated">複製可以當做參數來&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;方法呼叫。&lt;/xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the host context for the current thread.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件，代表目前執行緒的主機內容。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">目前的執行個體所使用的資源全部釋出<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">呼叫<ph id="ph1">`Dispose`</ph>當您完成使用&lt;xref:System.Threading.HostExecutionContext&gt;.&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the &lt;xref:System.Threading.HostExecutionContext&gt; in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>方法會使&lt;xref:System.Threading.HostExecutionContext&gt;中無法使用的狀態。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the &lt;xref:System.Threading.HostExecutionContext&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Threading.HostExecutionContext&gt; was occupying.</source>
          <target state="translated">在呼叫<ph id="ph1">`Dispose`</ph>，您必須釋放所有參考&lt;xref:System.Threading.HostExecutionContext&gt;讓記憶體回收行程可以回收記憶體的&lt;xref:System.Threading.HostExecutionContext&gt;所佔用。&lt;/xref:System.Threading.HostExecutionContext&gt; &lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call <ph id="ph2">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 永遠呼叫<ph id="ph2">`Dispose`</ph>釋放您的最後一個參考至&lt;xref:System.Threading.HostExecutionContext&gt;。&lt;/xref:System.Threading.HostExecutionContext&gt;之前</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Threading.HostExecutionContext&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫&lt;xref:System.Threading.HostExecutionContext&gt;物件的<ph id="ph1">`Finalize`</ph>方法。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, releases the unmanaged resources used by the &lt;xref:System.Threading.WaitHandle&gt;, and optionally releases the managed resources.</source>
          <target state="translated">當在衍生類別中覆寫時，釋放所使用的 unmanaged 的資源&lt;xref:System.Threading.WaitHandle&gt;，並選擇性釋放 managed 的資源。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method is called by the &lt;xref:System.Threading.HostExecutionContext.Dispose&gt; method overload and the finalizer.</source>
          <target state="translated">這個方法會呼叫&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;方法多載和完成項。&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.HostExecutionContext.Dispose&gt; invokes this protected method with the <ph id="ph1">`disposing`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;叫用這個受保護的方法與<ph id="ph1">`disposing`</ph>參數設定為<ph id="ph2">`true`</ph>。&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The finalizer invokes this method with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">完成項會叫用此方法時<ph id="ph1">`disposing`</ph>設<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Threading.HostExecutionContext&gt; references.</source>
          <target state="translated">當<ph id="ph1">`disposing`</ph>參數是<ph id="ph2">`true`</ph>，這個方法的任何 managed 物件所持有的資源全部釋出這個&lt;xref:System.Threading.HostExecutionContext&gt;參考。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用<ph id="ph1">`Dispose`</ph>每個參考物件的方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method can be called multiple times by other objects.</source>
          <target state="translated">這個方法可以被其他物件呼叫多次。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</source>
          <target state="translated">在覆寫這個方法，小心不要參考先前處置的早期呼叫中的物件。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示釋放 managed 和 unmanaged 資源，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>表示只釋放 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets the state of the host execution context.</source>
          <target state="translated">取得或設定主控件執行內容的狀態。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The State property value represents a safe handle containing the <ph id="ph1">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated">狀態屬性值都代表一個安全控制代碼，其中包含<ph id="ph1">`IUnknown`</ph>主控件的指標。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">代表主機執行的內容狀態的物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>