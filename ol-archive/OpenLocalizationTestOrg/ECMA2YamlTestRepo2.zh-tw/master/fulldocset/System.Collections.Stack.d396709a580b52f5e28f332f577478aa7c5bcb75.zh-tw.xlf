<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d86a014a28c7d85d71d3be809df53d48b1c0214</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Stack.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72c687772085fd5e4a64bc42f2c69b2cb6dbfde8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cb911518e52431583334a585119d2d8e10ee71f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</source>
          <target state="translated">代表物件的簡單後進先出 (LIFO) 非泛型集合。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For the generic version of this collection, see &lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;.</source>
          <target state="translated">這個集合的泛型版本，請參閱&lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;.&lt;/xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The capacity of a Stack is the number of elements the Stack can hold.</source>
          <target state="translated">在堆疊的容量是堆疊可以保存的項目數目。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As elements are added to a Stack, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">當項目加入至堆疊時，會自動增加容量視需要透過重新配置。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, &lt;xref:System.Collections.Stack.Push%2A&gt; is an O(1) operation.</source>
          <target state="translated">如果&lt;xref:System.Collections.Stack.Count%2A&gt;小於堆疊中的容量&lt;xref:System.Collections.Stack.Push%2A&gt;是一種 o （1） 運算。&lt;/xref:System.Collections.Stack.Push%2A&gt; &lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, &lt;xref:System.Collections.Stack.Push%2A&gt; becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">如果需要以容納新項目中，增加的容量&lt;xref:System.Collections.Stack.Push%2A&gt;會變成 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt; &lt;/xref:System.Collections.Stack.Push%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Stack.Pop%2A&gt; is an O(1) operation.</source>
          <target state="translated">&lt;xref:System.Collections.Stack.Pop%2A&gt;是一種 o （1） 運算。&lt;/xref:System.Collections.Stack.Pop%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Stack accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">堆疊接受<ph id="ph1">`null`</ph>有效的值，並允許重複的項目。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the default initial capacity.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別為空白且具有預設初始容量。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量&lt;xref:System.Collections.Stack&gt;是項目數目，&lt;xref:System.Collections.Stack&gt;可以保存。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">當項目加入至&lt;xref:System.Collections.Stack&gt;，就會自動增加容量的要求以重新配置內部的陣列。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;時調整大小作業</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">這個建構函式是 o （1） 運算。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，其中包含從指定之集合複製項目，且具有相同的初始容量，以複製的項目數目。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量&lt;xref:System.Collections.Stack&gt;是項目數目，&lt;xref:System.Collections.Stack&gt;可以保存。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">當項目加入至&lt;xref:System.Collections.Stack&gt;，就會自動增加容量的要求以重新配置內部的陣列。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;時調整大小作業</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the &lt;xref:System.Collections.Stack&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">將元素複製到&lt;xref:System.Collections.Stack&gt;相同的順序讀取&lt;xref:System.Collections.IEnumerator&gt;的&lt;xref:System.Collections.ICollection&gt;。&lt;/xref:System.Collections.ICollection&gt; &lt;/xref:System.Collections.IEnumerator&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">這個建構函式為 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>是中的項目數<ph id="ph3">`col`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; to copy elements from.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;要複製的項目。&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別的空的而且指定的初始容量或預設的初始容量、 較長者為準。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量&lt;xref:System.Collections.Stack&gt;是項目數目，&lt;xref:System.Collections.Stack&gt;可以保存。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">當項目加入至&lt;xref:System.Collections.Stack&gt;，就會自動增加容量的要求以重新配置內部的陣列。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;時調整大小作業</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`initialCapacity`</ph>.</source>
          <target state="translated">這個建構函式為 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>是<ph id="ph3">`initialCapacity`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">初始項目數， <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>可以包含。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;initialCapacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;initialCapacity&lt;/code&gt;</ph>小於零。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">移除所有的物件，從<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Stack.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.Stack.Count%2A&gt;已設為零，並從項目集合的其他物件的參考也會釋放。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">這個方法是 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">建立的淺層複本<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">集合的淺層複本只會複製元素的集合，不論它們是參考類型或實值類型，但是不會複製參考所參考的物件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">新的集合中的參考都指向相同原始集合中的參考所指向的物件。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">相反地，項目複製集合的深層複本，並直接或間接參考之項目，所有項目。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">這個方法是 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">淺層複本<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">判斷元素是否在<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This method determines equality by calling the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">這個方法會判斷是否相等，藉由呼叫&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">這個方法會執行線性搜尋;因此，這個方法是 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id="ph1">`obj`</ph> argument to the &lt;xref:System.Object.Equals%2A&gt; method of individual objects in the collection.</source>
          <target state="translated">從.NET Framework 2.0 開始，這個方法會測試是否相等藉由傳遞<ph id="ph1">`obj`</ph>引數&lt;xref:System.Object.Equals%2A&gt;集合中的個別物件的方法。&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the &lt;xref:System.Object.Equals%2A&gt; method of the <ph id="ph1">`obj`</ph> argument.</source>
          <target state="translated">在舊版的.NET Framework 中，使用傳遞的個別項目集合中要進行這項判斷&lt;xref:System.Object.Equals%2A&gt;方法<ph id="ph1">`obj`</ph>引數。&lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The object to locate in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">要在中尋找的物件<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">這個值可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.</source>
          <target state="translated">複製<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>至現有一維&lt;xref:System.Array&gt;、 指定的陣列索引處開始。&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.</source>
          <target state="translated">將元素複製到後進先出 (LIFO) 順序，類似且連續的&lt;xref:System.Collections.Stack.Pop%2A&gt;.&lt;/xref:System.Collections.Stack.Pop%2A&gt;呼叫所傳回的項目順序中的陣列</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">這個方法是 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">一維&lt;xref:System.Array&gt;也就是從複製之元素的目的地<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;必須有以零為起始的索引。&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">中以零為起始的索引<ph id="ph1">`array`</ph>由此開始複製。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>小於零。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>是多維的。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">-在來源中的項目數<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>大於可用空間<ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>至目的地結尾<ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">來源類型<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>無法自動轉換成目的地類型<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p2">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得所包含的元素數目<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The capacity is the number of elements that the &lt;xref:System.Collections.Stack&gt; can store.</source>
          <target state="translated">容量則是項目數目，&lt;xref:System.Collections.Stack&gt;可以儲存。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Count is the number of elements that are actually in the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">計數是實際&lt;xref:System.Collections.Stack&gt;.&lt;/xref:System.Collections.Stack&gt;中的項目數目</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The capacity is always greater than or equal to Count.</source>
          <target state="translated">容量永遠是大於或等於 Count。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">如果計數超過容量加入項目時，容量會自動增加之前複製的舊項目並加入新項目後，重新配置內部的陣列。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">擷取這個屬性的值是一種 o （1） 運算。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">中包含的元素數目<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回&lt;xref:System.Collections.IEnumerator&gt;如<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[Visual Basic, C#]       The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">[Visual Basic、 C#]      <ph id="ph1">`foreach`</ph> C# 語言的陳述式 (<ph id="ph2">`for each`</ph>在 Visual Basic 中) 會隱藏列舉值的複雜度。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，使用<ph id="ph1">`foreach`</ph>建議，而不是直接管理 列舉值。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">一開始，列舉程式位在集合中的第一個項目之前。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;也會列舉值帶回至這個位置。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">此位置&lt;xref:System.Collections.IEnumerator.Current%2A&gt;是未定義。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">因此，您必須呼叫&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;前進的第一個元素之前讀取&lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;值集合的列舉值&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;會傳回相同的物件直到&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;或&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;稱為。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;下一個項目。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;超過集合的列舉值的結尾會位於集合中的最後一個元素之後和&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;傳回<ph id="ph1">`false`</ph>。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">列舉值位於這個位置上，後續呼叫&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;也會傳回<ph id="ph1">`false`</ph>。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">如果最後一個呼叫&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;傳回<ph id="ph1">`false`</ph>，&lt;xref:System.Collections.IEnumerator.Current%2A&gt;是未定義。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">若要設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;的第一個元素的集合，您可以呼叫&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;後面加上&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合維持不變，列舉程式就持續有效。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果對集合進行變更，例如加入、 修改或刪除元素，列舉程式會永久失效，且其行為未定義。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列舉程式沒有集合的獨佔存取因此，列舉集合在本質上並非安全執行緒程序。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要保證列舉過程的執行緒安全，您可以鎖定在整個列舉過程的集合。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要讓集合以便進行讀取和寫入的多重執行緒能夠存取，您必須實作自己的同步處理。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">這個方法是一種 o （1） 運算。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">取得值，指出是否存取<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是同步 （安全執行緒）。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.</source>
          <target state="translated">若要保證的執行緒安全&lt;xref:System.Collections.Stack&gt;，所有作業都必須都透過包裝函式所傳回&lt;xref:System.Collections.Stack.Synchronized%2A&gt;方法。&lt;/xref:System.Collections.Stack.Synchronized%2A&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">透過集合進行列舉在本質上並不是安全執行緒程序。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.</source>
          <target state="translated">下列程式碼範例示範如何鎖定集合使用&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;在整個列舉過程。&lt;/xref:System.Collections.Stack.SyncRoot%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)</ept><ept id="p5">]</ept>       Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)</ept> <ept id="p5">]</ept>擷取這個屬性的值是一種 o （1） 運算。    </target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if access to the <bpt id="p2">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果存取<bpt id="p2">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>是同步 （安全執行緒），否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> without removing it.</source>
          <target state="translated">傳回的物件，在頂端<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>而不移除它。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Stack.Pop%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">這個方法是類似的&lt;xref:System.Collections.Stack.Pop%2A&gt;方法，但查看不會修改&lt;xref:System.Collections.Stack&gt;.&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack.Pop%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>可推入至&lt;xref:System.Collections.Stack&gt;做為預留位置，視。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.</source>
          <target state="translated">若要在區別 null 值和堆疊的結尾，請檢查&lt;xref:System.Collections.Stack.Count%2A&gt;屬性或 catch &lt;xref:System.InvalidOperationException&gt;，它就會擲回時&lt;xref:System.Collections.Stack&gt;是空的。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">這個方法是一種 o （1） 運算。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;頂端<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>是空的。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Removes and returns the object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">移除並傳回頂端的物件<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Stack.Peek%2A&gt; method, but &lt;xref:System.Collections.Stack.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">這個方法是類似的&lt;xref:System.Collections.Stack.Peek%2A&gt;方法，但&lt;xref:System.Collections.Stack.Peek%2A&gt;不是會修改&lt;xref:System.Collections.Stack&gt;.&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack.Peek%2A&gt; &lt;/xref:System.Collections.Stack.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>可推入至&lt;xref:System.Collections.Stack&gt;做為預留位置，視。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.</source>
          <target state="translated">若要在區別 null 值和堆疊的結尾，請檢查&lt;xref:System.Collections.Stack.Count%2A&gt;屬性或 catch &lt;xref:System.InvalidOperationException&gt;，它就會擲回時&lt;xref:System.Collections.Stack&gt;是空的。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">這個方法是一種 o （1） 運算。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; removed from the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;從頂端移除<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>是空的。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Inserts an object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">將物件插入頂端<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; already equals the capacity, the capacity of the &lt;xref:System.Collections.Stack&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">如果&lt;xref:System.Collections.Stack.Count%2A&gt;已等於容量，容量&lt;xref:System.Collections.Stack&gt;增加的自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>可推入至&lt;xref:System.Collections.Stack&gt;做為預留位置，視。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">它會佔據堆疊中的位置，並會被視為任何物件。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, Push is an O(1) operation.</source>
          <target state="translated">如果&lt;xref:System.Collections.Stack.Count%2A&gt;小於比堆疊的容量，推入是 o （1） 運算。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, Push becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">如果需要增加，以容納新項目容量，推入就會變成 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to push onto the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;要推送至<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">這個值可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns a synchronized (thread safe) wrapper for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回同步 （安全執行緒） 包裝函式<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through this wrapper.</source>
          <target state="translated">若要保證的執行緒安全&lt;xref:System.Collections.Stack&gt;，所有作業必須透過這個包裝函式來都完成。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">透過集合進行列舉在本質上並不是安全執行緒程序。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.</source>
          <target state="translated">下列程式碼範例示範如何鎖定集合使用&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;在整個列舉過程。&lt;/xref:System.Collections.Stack.SyncRoot%2A&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)</ept><ept id="p5">]</ept>       This method is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p4">](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p6">](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)</ept> <ept id="p5">]</ept>這個方法是 o （1） 運算。    </target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>來同步處理。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A synchronized wrapper around the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">已同步處理的包裝函式周圍<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得物件，可用來同步處理存取具備<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To create a synchronized version of the &lt;xref:System.Collections.Stack&gt;, use the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.</source>
          <target state="translated">若要建立的同步化的版本&lt;xref:System.Collections.Stack&gt;，使用&lt;xref:System.Collections.Stack.Synchronized%2A&gt;方法。&lt;/xref:System.Collections.Stack.Synchronized%2A&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Stack&gt; using the SyncRoot property.</source>
          <target state="translated">不過，在衍生的類別可以提供自己的同步處理的版本&lt;xref:System.Collections.Stack&gt;使用 SyncRoot 屬性。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Stack&gt;, not directly on the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">同步處理的程式碼必須在上執行作業的 SyncRoot &lt;xref:System.Collections.Stack&gt;，不是直接在&lt;xref:System.Collections.Stack&gt;.&lt;/xref:System.Collections.Stack&gt; &lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">這可確保衍生自其他物件的集合正常運作。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Stack&gt; object.</source>
          <target state="translated">具體而言，保持正常的同步處理與其他可能同時修改的執行緒&lt;xref:System.Collections.Stack&gt;物件。&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">透過集合進行列舉在本質上並不是安全執行緒程序。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.</source>
          <target state="translated">下列程式碼範例示範如何中鎖定集合，在整個列舉過程中使用 syncroot 同步。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)</ept><ept id="p5">]</ept>       Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>傳統 Stack.IsSynchronized 範例&amp;#2;<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)</ept> <ept id="p5">]</ept>擷取這個屬性的值是一種 o （1） 運算。    </target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;可用以同步存取<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a new array.</source>
          <target state="translated">複製<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>到新的陣列。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.</source>
          <target state="translated">將元素複製到後進先出 (LIFO) 順序，類似且連續的&lt;xref:System.Collections.Stack.Pop%2A&gt;.&lt;/xref:System.Collections.Stack.Pop%2A&gt;呼叫所傳回的項目順序中的陣列</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">這個方法是 O (<ph id="ph1">`n`</ph>) 作業，其中<ph id="ph2">`n`</ph>為&lt;xref:System.Collections.Stack.Count%2A&gt;。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A new array containing copies of the elements of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新陣列，包含的項目複本<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>