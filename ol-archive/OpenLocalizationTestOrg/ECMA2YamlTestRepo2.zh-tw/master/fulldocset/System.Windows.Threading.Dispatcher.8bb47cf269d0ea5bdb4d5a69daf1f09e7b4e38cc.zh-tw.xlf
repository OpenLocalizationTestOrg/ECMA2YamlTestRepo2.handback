<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9471ecf37d14e3c9866cdceab3911bc1e16e81d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9df8a6cafad73f0a72de665b44a9020445c9a629</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1749f49a8457313de1aebbbb85b52e79efa4befd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
          <target state="translated">提供用於管理執行緒的工作項目佇列的服務。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Dispatcher maintains a prioritized queue of work items for a specific thread.</source>
          <target state="translated">發送器會維護優先順序的佇列特定執行緒的工作項目。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When a Dispatcher is created on a thread, it becomes the only Dispatcher that can be associated with the thread, even if the Dispatcher is shut down.</source>
          <target state="translated">發送器執行緒上建立時，即使關閉發送器會變成只可以與執行緒相關聯的發送器。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you attempt to get the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; for the current thread and a Dispatcher is not associated with the thread, a Dispatcher will be created.</source>
          <target state="translated">如果您嘗試取得&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;目前的執行緒和發送器未與執行緒相關聯，則將會建立發送器。&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A Dispatcher is also created when you create a &lt;xref:System.Windows.Threading.DispatcherObject&gt;.</source>
          <target state="translated">當您建立&lt;xref:System.Windows.Threading.DispatcherObject&gt;.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;時，也會建立發送器</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you create a Dispatcher on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
          <target state="translated">如果您在背景執行緒上建立的發送器，請務必關閉發送器在結束的執行緒之前。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a Dispatcher is shut down, it cannot be restarted.</source>
          <target state="translated">如果發送器關閉時，就無法重新啟動。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, a &lt;xref:System.Windows.Threading.DispatcherObject&gt; can only be accessed by the Dispatcher it is associated with.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、&lt;xref:System.Windows.Threading.DispatcherObject&gt;只能存取由發送器相關聯。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a background thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that is associated with the Dispatcher on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">例如，背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;與發送器關聯上<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>執行緒。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the Dispatcher associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">為了讓背景執行緒存取&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;屬性&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派至發送器相關聯的工作<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>執行緒。&lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Controls.ContentControl.Content%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The operation is added to the queue of the Dispatcher at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業加入佇列的位置指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;發送器</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a Dispatcher that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫的已關閉的 status 屬性&lt;xref:System.Windows.Threading.DispatcherOperation&gt;設為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的發送器上&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All of the methods on Dispatcher, with the exception of &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, are free-threaded.</source>
          <target state="translated">所有發生的例外狀況的方法上發送器， &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;，是無限制執行緒。&lt;/xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Objects that derive from &lt;xref:System.Windows.Threading.DispatcherObject&gt; have thread affinity.</source>
          <target state="translated">衍生自&lt;xref:System.Windows.Threading.DispatcherObject&gt;具有執行緒相似性。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.</source>
          <target state="translated">衍生自&lt;xref:System.Windows.Freezable&gt;是無限制執行緒時就會凍結。&lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Freezable 物件概觀<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">在執行緒上執行指定的委派，使用指定的引數以非同步方式， <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>上建立。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;所傳回物件&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;可以用數種方式，與指定的委派，例如互動:-變更&lt;xref:System.Windows.Threading.DispatcherPriority&gt;委派的暫止，所以執行事件佇列中。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-從事件佇列中移除的委派。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-正在等候要傳回的委派。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-取得委派之後，它會傳回的值會執行。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫&lt;xref:System.Windows.Threading.Dispatcher&gt;的已關閉，&lt;xref:System.Windows.Threading.DispatcherOperation&gt;會設定為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的 status 屬性&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，傳回後立即&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;呼叫時，可用以互動的委派，因為它是暫止執行的事件佇列。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上執行指定的委派，以非同步方式在指定的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If multiple BeginInvoke calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">如果同時進行多個 BeginInvoke 呼叫&lt;xref:System.Windows.Threading.DispatcherPriority&gt;，將會執行被呼叫的順序。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;傳回&lt;xref:System.Windows.Threading.DispatcherOperation&gt;物件，可以用互動與委派，當委派被在事件佇列。&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;所傳回物件&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;可以用數種方式，與指定的委派，例如互動:-變更&lt;xref:System.Windows.Threading.DispatcherPriority&gt;委派的暫止，所以執行事件佇列中。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-從事件佇列中移除的委派。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-正在等候要傳回的委派。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-取得委派之後，它會傳回的值會執行。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫&lt;xref:System.Windows.Threading.Dispatcher&gt;的已關閉，&lt;xref:System.Windows.Threading.DispatcherOperation&gt;會設定為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的 status 屬性&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，採用任何引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，傳回後立即&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;呼叫時，可用以互動的委派，因為它是暫止執行的事件佇列。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">在執行緒上執行指定的委派，使用指定的引數，以指定的優先權，以非同步方式， <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>上建立。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;所傳回物件&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;可以用數種方式，與指定的委派，例如互動:-變更&lt;xref:System.Windows.Threading.DispatcherPriority&gt;委派的暫止，所以執行事件佇列中。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-從事件佇列中移除的委派。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-正在等候要傳回的委派。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-取得委派之後，它會傳回的值會執行。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫&lt;xref:System.Windows.Threading.Dispatcher&gt;的已關閉，&lt;xref:System.Windows.Threading.DispatcherOperation&gt;會設定為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的 status 屬性&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，傳回後立即&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;呼叫時，可用以互動的委派，因為它是暫止執行的事件佇列。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行緒上執行指定的委派，以指定的引數，以非同步方式在指定的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>可以是<ph id="ph2">`null`</ph>如果不需要任何引數。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;傳回&lt;xref:System.Windows.Threading.DispatcherOperation&gt;物件，可以用互動與委派，當委派被在事件佇列。&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;所傳回物件&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;可以用數種方式，與指定的委派，例如互動:-變更&lt;xref:System.Windows.Threading.DispatcherPriority&gt;委派的暫止，所以執行事件佇列中。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-從事件佇列中移除的委派。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-正在等候要傳回的委派。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-取得委派之後，它會傳回的值會執行。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">若為多個&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫會在相同&lt;xref:System.Windows.Threading.DispatcherPriority&gt;，將會執行被呼叫的順序。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫&lt;xref:System.Windows.Threading.Dispatcher&gt;的已關閉，&lt;xref:System.Windows.Threading.DispatcherOperation&gt;會設定為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的 status 屬性&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">委派的方法會接受一個引數，推入至<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，傳回後立即&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;呼叫時，可用以互動的委派，因為它是暫止執行的事件佇列。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行緒上執行指定的委派，以指定的引數的陣列，以非同步方式在指定的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>參數可以是<ph id="ph2">`null`</ph>如果不需要任何引數。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;傳回&lt;xref:System.Windows.Threading.DispatcherOperation&gt;物件，可以用互動與委派，當委派被在事件佇列。&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;所傳回物件&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;可以用數種方式，與指定的委派，例如互動:-變更&lt;xref:System.Windows.Threading.DispatcherPriority&gt;委派的暫止，所以執行事件佇列中。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-從事件佇列中移除的委派。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-正在等候要傳回的委派。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-取得委派之後，它會傳回的值會執行。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。因此，控制項會立即傳回呼叫的物件後呼叫。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">若為多個&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫會在相同&lt;xref:System.Windows.Threading.DispatcherPriority&gt;，將會執行被呼叫的順序。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;呼叫&lt;xref:System.Windows.Threading.Dispatcher&gt;的已關閉，&lt;xref:System.Windows.Threading.DispatcherOperation&gt;會設定為&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;傳回的 status 屬性&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，使用多個引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">物件，傳回後立即&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;呼叫時，可用互動與委派，因為它是暫止中的執行<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>佇列。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not a valid priority.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>不是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> asynchronously.</source>
          <target state="translated">起始關機的<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以非同步的方式。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>BeginInvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">BeginInvokeShutdown 要求不受限制的 UI 權限。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當&lt;xref:System.Windows.Threading.Dispatcher&gt;開始關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;便不會關閉完全直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
          <target state="translated">要開始進行關閉發送器優先權。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">判斷呼叫的執行緒是否與此相關聯的執行緒<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Only the &lt;xref:System.Windows.Threading.Dispatcher&gt; that a &lt;xref:System.Windows.Threading.DispatcherObject&gt; is created on may access the object.</source>
          <target state="translated">只有&lt;xref:System.Windows.Threading.Dispatcher&gt;，&lt;xref:System.Windows.Threading.DispatcherObject&gt;建立在可以存取的物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; to access the object from a different thread.</source>
          <target state="translated">使用&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;來從不同的執行緒存取的物件。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CheckAccess can be called from any thread.</source>
          <target state="translated">CheckAccess 可以從任何執行緒呼叫。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The difference between CheckAccess and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; is CheckAccess returns a Boolean indicating whether the calling thread has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; throws an exception.</source>
          <target state="translated">CheckAccess 之間的差異和&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;是 CheckAccess 傳回布林值，指出呼叫的執行緒是否有存取權&lt;xref:System.Windows.Threading.Dispatcher&gt;和&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;擲回例外狀況。&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the calling thread is the thread associated with this <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果呼叫執行緒是與此相關聯的執行緒<bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the thread currently executing and creates a new <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if one is not already associated with the thread.</source>
          <target state="translated">取得<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>執行緒目前正在執行，並建立新<bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果其中一個尚未與執行緒相關聯。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Windows.Threading.Dispatcher&gt; is not associated with the current thread, a new &lt;xref:System.Windows.Threading.Dispatcher&gt; will be created.</source>
          <target state="translated">如果&lt;xref:System.Windows.Threading.Dispatcher&gt;未與目前的執行緒相關聯的新&lt;xref:System.Windows.Threading.Dispatcher&gt;將會建立。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This is not the case with the &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; method.</source>
          <target state="translated">這不是使用的情況下&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;方法。&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; will return <ph id="ph1">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;會傳回<ph id="ph1">`null`</ph>如果不指定的執行緒相關聯的發送器。&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
          <target state="translated">與目前執行緒關聯的發送器。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Disables processing of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">停用處理<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>佇列。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
          <target state="translated">停用發送器處理是一種進階的方法，目的是要避免不相關的重新進入的機會。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The effects of disabling processing are as follows:      -   <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
          <target state="translated">停用處理的影響如下:-<ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph>鎖定將會不提取的訊息在內部。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Windows.Threading.DispatcherFrame&gt; objects are not allowed to be pushed.</source>
          <target state="translated">-&lt;xref:System.Windows.Threading.DispatcherFrame&gt;物件不允許推送。&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>-   Message processing is not permitted.</source>
          <target state="translated">的不允許訊息處理。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure that DisableProcessing returns when it is called can be used to re-enable dispatcher processing.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;DisableProcessing 傳回呼叫時的結構可用來重新啟用發送器處理。&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Calling &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure re-enables processing.</source>
          <target state="translated">呼叫&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;上&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;結構重新啟用處理。&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; &lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>DisableProcessing can only be called on the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is associated with.</source>
          <target state="translated">只可以在執行緒上呼叫 DisableProcessing&lt;xref:System.Windows.Threading.Dispatcher&gt;相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
          <target state="translated">若要重新啟用發送器處理用的結構。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
          <target state="translated">結束所有框架，包括巢狀的框架的要求。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified thread.</source>
          <target state="translated">取得<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>針對指定的執行緒。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
          <target state="translated">如果無法使用指定的執行緒，發送器<ph id="ph1">`null`</ph>會傳回。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>FromThread does not create a &lt;xref:System.Windows.Threading.Dispatcher&gt; on a thread that does not have a &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">FromThread 不會&lt;xref:System.Windows.Threading.Dispatcher&gt;在沒有&lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt;執行緒上&lt;/xref:System.Windows.Threading.Dispatcher&gt;建立</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A new &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on a thread that does not already have a &lt;xref:System.Windows.Threading.Dispatcher&gt; when attempting to get the &lt;xref:System.Windows.Threading.Dispatcher&gt; by using the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; property.</source>
          <target state="translated">新&lt;xref:System.Windows.Threading.Dispatcher&gt;還沒有執行緒上所建立&lt;xref:System.Windows.Threading.Dispatcher&gt;時嘗試取得&lt;xref:System.Windows.Threading.Dispatcher&gt;使用&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;屬性。&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from.</source>
          <target state="translated">若要取得執行緒<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>從。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">發送器<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">thread</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has finished shutting down.</source>
          <target state="translated">決定是否<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>關閉已完成。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當&lt;xref:System.Windows.Threading.Dispatcher&gt;開始關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;不完全會關閉，直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the HasShutdownFinished property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;就會引發事件和 HasShutdownFinished 屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dispatcher has finished shutting down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果發送器已完成關機;否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is shutting down.</source>
          <target state="translated">決定是否<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>正在關機而關閉。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and HasShutdownStarted is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當&lt;xref:System.Windows.Threading.Dispatcher&gt;開始關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;就會引發事件和 HasShutdownStarted 設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;便不會關閉完全直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has started shutting down; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>已啟動正在關閉，否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得攔截程序，提供下列其他事件資訊的集合<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherHooks&gt; class provides additional event information about the &lt;xref:System.Windows.Threading.Dispatcher&gt;, such as when the &lt;xref:System.Windows.Threading.Dispatcher&gt; is inactive or when an operation has competed.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherHooks&gt;類別提供有關的其他事件資訊&lt;xref:System.Windows.Threading.Dispatcher&gt;，例如當&lt;xref:System.Windows.Threading.Dispatcher&gt;非使用中或當作業完成。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.DispatcherHooks&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">與此相關聯的攔截<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;的執行緒上同步<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;以同步方式在指定的優先順序的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定的順序指定叫用的回呼相較於其他暫止的作業中的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的引數與指定的委派<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">所在的執行緒上執行指定的委派，以同步方式在指定的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，採用任何引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等於<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;以同步方式在指定的優先順序的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定的順序指定叫用的回呼相較於其他暫止的作業中的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">物件，指出是否要取消此動作。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">以同步方式將指定的委派，在指定的優先順序，與指定的引數指定的時間範圍內執行的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">最大等待作業完成的時間量。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的委派，在指定的引數的指定優先權<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的委派，在指定的引數的指定優先權<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>可以是<ph id="ph2">`null`</ph>如果引數中不需要<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">委派的方法會接受一個引數，推入至<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等於<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created.</source>
          <target state="translated">執行緒上執行指定的委派，以指定的逾時值，以同步方式在指定的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>所建立。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">等待作業完成的時間上限。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，採用任何引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;以同步方式在指定的優先順序的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定的順序指定叫用的回呼相較於其他暫止的作業中的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">物件，指出是否要取消此動作。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
          <target state="translated">最小等待啟動作業的時間量。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">以同步方式將指定的委派，在指定的優先順序，與指定的引數指定的時間範圍內執行的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">參數中指定的方法委派<ph id="ph1">`args`</ph>，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">最大等待作業完成的時間量。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的委派，在指定的引數的指定優先權<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>可以是<ph id="ph2">`null`</ph>如果引數中不需要<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，使用多個引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等於<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的委派，在指定的引數的指定優先權<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>可以是<ph id="ph2">`null`</ph>如果引數中不需要<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">等待作業完成的時間上限。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，使用多個引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no arguments are needed.</source>
          <target state="translated">這可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不需要任何引數。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等於<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">在執行緒上，以同步方式執行指定的委派，在指定的引數的指定優先權<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>可以是<ph id="ph2">`null`</ph>如果不需要引數。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>，建立的執行緒&lt;xref:System.Windows.Threading.DispatcherObject&gt;可以存取該物件。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">例如，會開始從主要 UI 執行緒背景執行緒無法更新的內容&lt;xref:System.Windows.Controls.Button&gt;UI 執行緒上所建立。&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">為了讓背景執行緒存取的內容屬性將&lt;xref:System.Windows.Controls.Button&gt;，背景執行緒必須委派工作給&lt;xref:System.Windows.Threading.Dispatcher&gt;與 UI 執行緒相關聯。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">這會透過使用其中一個&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步方法，和&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;為非同步。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">作業會加入到事件佇列&lt;xref:System.Windows.Threading.Dispatcher&gt;在指定&lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;的</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;是同步作業。因此，控制項不會傳回至呼叫的物件直到回呼傳回之後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">優先權，相較於其他暫止的作業中<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列中，指定的方法會叫用。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">等待作業完成的時間上限。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">方法的委派，使用多個引數，這會推送到<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件佇列。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
          <target state="translated">要做為引數傳遞至指定方法的物件。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">做為引數傳遞至指定方法的物件陣列。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">所叫用委派的傳回值或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果委派沒有傳回值。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等於<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;在執行緒上非同步<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，稱為 InvokeAsync 之後立即傳回，可用以互動的委派，因為它是暫止執行的事件佇列。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;以非同步方式在指定的優先順序的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定的順序指定叫用的回呼相較於其他暫止的作業中的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，稱為 InvokeAsync 之後立即傳回，可用以互動的委派，因為它是暫止執行的事件佇列。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">執行指定&lt;xref:System.Action&gt;以非同步方式在指定的優先順序的執行緒上<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">若要透過發送器叫用委派。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定的順序指定叫用的回呼相較於其他暫止的作業中的優先順序<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">物件，指出是否要取消此動作。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">物件，稱為 InvokeAsync 之後立即傳回，可用以互動的委派，因為它是暫止執行的事件佇列。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> synchronously.</source>
          <target state="translated">起始關機程序的<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>同步。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>InvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">InvokeShutdown 要求不受限制的 UI 權限。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當&lt;xref:System.Windows.Threading.Dispatcher&gt;開始關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;便不會關閉完全直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
          <target state="translated">輸入執行迴圈。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Threading.DispatcherFrame&gt; represents a loop that processes pending work items.</source>
          <target state="translated">A&lt;xref:System.Windows.Threading.DispatcherFrame&gt;代表處理暫止的工作項目迴圈。&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The Dispatcher processes the work item queue in a loop.</source>
          <target state="translated">發送器處理迴圈中的工作項目佇列。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">迴圈被指在範圍內。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The initial loop is typically initiated by the application by calling &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.</source>
          <target state="translated">初始迴圈通常藉由呼叫&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;起始應用程式</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>PushFrame enters a loop represented by the parameter <ph id="ph1">`frame`</ph>.</source>
          <target state="translated">PushFrame 進入迴圈參數代表<ph id="ph1">`frame`</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>At each iteration of the loop, the &lt;xref:System.Windows.Threading.Dispatcher&gt; will check the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property on the &lt;xref:System.Windows.Threading.DispatcherFrame&gt; class to determine whether the loop should continue or if it should stop.</source>
          <target state="translated">在迴圈的每個反覆項目&lt;xref:System.Windows.Threading.Dispatcher&gt;會檢查&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;屬性&lt;xref:System.Windows.Threading.DispatcherFrame&gt;類別以決定迴圈是否應該繼續，或如果應該停止。&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.DispatcherFrame&gt; allows for the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property to be set explicitly and it respects the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; property on the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;允許的&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;屬性來明確設定，而且它會遵守&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;xref:System.Windows.Threading.Dispatcher&gt;。&lt;/xref:System.Windows.Threading.Dispatcher&gt;屬性&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>This means when the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, frames that use the default &lt;xref:System.Windows.Threading.DispatcherFrame&gt; implementation will exit, which enables all nested frames to exit.</source>
          <target state="translated">這表示當&lt;xref:System.Windows.Threading.Dispatcher&gt;關閉啟動，使用預設的框架&lt;xref:System.Windows.Threading.DispatcherFrame&gt;實作將會結束，可讓所有巢狀的畫面格結束。&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
          <target state="translated">發送器處理框架。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-or-       Dispatcher processing has been disabled.</source>
          <target state="translated">-或者-發送器處理已停用。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">將主要執行畫面格推入的事件佇列<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; processes the event queue in a loop.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;處理迴圈中的事件佇列。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">迴圈被指在範圍內。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The initial loop is typically initiated by the application by calling Run.</source>
          <target state="translated">初始迴圈通常是藉由呼叫執行起始應用程式。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The main execution frame will continue until the &lt;xref:System.Windows.Threading.Dispatcher&gt; is shutdown.</source>
          <target state="translated">主要執行畫面格將會繼續直到&lt;xref:System.Windows.Threading.Dispatcher&gt;關機。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> finishes shutting down.</source>
          <target state="translated">發生時<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>完成正在關閉。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當關機程序的&lt;xref:System.Windows.Threading.Dispatcher&gt;已啟動，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;不完全會關閉，直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the ShutdownFinished event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成正在關閉時，就會引發 ShutdownFinished 事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> begins to shut down.</source>
          <target state="translated">發生時<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>開始關閉。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the ShutdownStarted event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當關機程序的&lt;xref:System.Windows.Threading.Dispatcher&gt;會啟動，就會引發 ShutdownStarted 事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;不完全會關閉，直到事件佇列會回溯。&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">當發送器完成關閉，&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;就會引發事件和&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">關機程序開始時，所有暫止的工作佇列中的項目都被中止。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets the thread this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">取得這個執行緒<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相關聯。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The thread.</source>
          <target state="translated">執行緒。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">發生於執行緒例外狀況會擲回，並藉由委派的執行期間未能攔截&lt;&gt; <bpt id="p1">*</bpt>&gt; 或&lt;&gt; <ept id="p1">*</ept>&gt;。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is uncaught.</source>
          <target state="translated">藉由委派的執行期間擲回的例外狀況時，會引發這個事件&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;是無法攔截。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
          <target state="translated">處理常式可以標示例外狀況為已處理，這可以防止內部例外狀況處理常式呼叫。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">必須小心避免建立次要的例外狀況，並攔截，就會發生寫入此事件的事件處理常式。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the UnhandledException event.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;事件提供將不會引發 UnhandledException 事件的方法。&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the UnhandledException event will not be raised.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;第一次，就會引發事件，而且當&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;上&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;設<ph id="ph1">`false`</ph>，不會引發 UnhandledException 事件。&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt; when in the filter stage.</source>
          <target state="translated">發生於執行緒例外狀況會擲回，並藉由委派的執行期間未能攔截&lt;&gt; <bpt id="p1">*</bpt>&gt; 或&lt;&gt; <ept id="p1">*</ept>&gt; 中的篩選器階段時。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; and is uncaught.</source>
          <target state="translated">藉由委派的執行期間引發的例外狀況的篩選器階段會引發這個事件&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;或&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;而且無法攔截。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
          <target state="translated">無法在此時間點 （第一個可能發生例外狀況） 回溯呼叫堆疊。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">必須小心避免建立次要的例外狀況，並攔截，就會發生寫入此事件的事件處理常式。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">建議您避免配置記憶體，或執行任何資源的處理常式中的大量作業。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The UnhandledExceptionFilter event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.</source>
          <target state="translated">UnhandledExceptionFilter 事件提供方法來引發&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;事件。&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The UnhandledExceptionFilter event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.</source>
          <target state="translated">UnhandledExceptionFilter 引發此事件是第一次，而且如果&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;上&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;設<ph id="ph1">`false`</ph>、&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;不會引發事件。&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a valid priority.</source>
          <target state="translated">決定是否指定<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是有效的優先順序。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
          <target state="translated">要檢查的優先權。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
          <target state="translated">如果是無效的優先順序，就會發生的例外狀況會傳回字串。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>不是有效<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">判斷呼叫的執行緒是否有存取這個<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Only the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on may access the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">只有執行緒&lt;xref:System.Windows.Threading.Dispatcher&gt;建立在可以存取&lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>This method is public; therefore, any thread can check to see whether it has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">這個方法是公用的。因此，任何執行緒可以檢查以查看是否有存取權&lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The difference between &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; and VerifyAccess is &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; returns a Boolean if the calling thread does not have access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and VerifyAccess throws an exception.</source>
          <target state="translated">之間的差異&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;VerifyAccess 且&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;傳回布林值，如果呼叫的執行緒沒有存取權&lt;xref:System.Windows.Threading.Dispatcher&gt;VerifyAccess 擲回例外狀況。&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">呼叫的執行緒沒有存取這個<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">建立的 awaitable 物件，以非同步方式傳回給目前的發送器可以產生控制項，並提供處理其他事件發送器的機會。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">這個方法可讓您可以暫時釋目前發送器的執行控制項，因此它可以執行其他工作，例如處理其他事件。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">使用<ph id="ph1">`await`</ph>，或<ph id="ph2">`Await`</ph>在 Visual Basic，對傳回值的運算子，將控制權傳回給目前的發送器。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多 UI 執行緒上的工作。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">例如，您可以使用這個方法在更新控制項的長時間執行迴圈。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling the &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt; method and passing in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.</source>
          <target state="translated">這個方法相當於呼叫的&lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;方法然後傳入&lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Awaitable 物件，以非同步方式傳回給目前的發送器可以產生控制項，並提供處理其他事件發送器的機會。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">建立的 awaitable 物件，以非同步方式傳回給目前的發送器可以產生控制項，並提供處理其他事件發送器的機會。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
          <target state="translated">當控制項傳回正在等候此方法的結果的程式碼時，就會發生的工作會排定與指定的優先順序。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">這個方法可讓您可以暫時釋目前發送器的執行控制項，因此它可以執行其他工作，例如處理其他事件。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">使用<ph id="ph1">`await`</ph>，或<ph id="ph2">`Await`</ph>在 Visual Basic，對傳回值的運算子，將控制權傳回給目前的發送器。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">使用這個方法，如果想要讓您的應用程式有機會處理事件，而您的應用程式正在執行許多 UI 執行緒上的工作。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">例如，您可以使用這個方法在更新控制項的長時間執行迴圈。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
          <target state="translated">在排程接續要務。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Awaitable 物件，以非同步方式傳回給目前的發送器可以產生控制項，並提供處理其他事件發送器的機會。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>