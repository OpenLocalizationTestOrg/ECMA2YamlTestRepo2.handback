<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7394e5f549eebeb5d6874d28a8c1acadec70fd95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.MemoryFailPoint.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">301c2bbb9e8f3e4623258c10bfc6082ee2d520ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5241403282e8494c4010a116ca0146ec85a43ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">將記憶體資源不足，無法執行作業前檢查。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This class is intended for use in advanced development.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; 這個類別僅供進階程式開發中的使用。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Creating an instance of the MemoryFailPoint class creates a memory gate.</source>
          <target state="translated">建立 MemoryFailPoint 類別的執行個體建立記憶體閘道。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">記憶體閘檢查足夠的資源，再起始活動需要大量的記憶體。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Failing the check results in an &lt;xref:System.InsufficientMemoryException&gt; exception being thrown.</source>
          <target state="translated">在檢查失敗會導致&lt;xref:System.InsufficientMemoryException&gt;擲回例外狀況。&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">這個例外狀況會防止從正在啟動作業，並減少可能的失敗，因為缺少資源。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This enables you decrease performance to avoid an &lt;xref:System.OutOfMemoryException&gt; exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">這樣做可讓您降低效能，以避免&lt;xref:System.OutOfMemoryException&gt;例外狀況，可能導致不適當的程式碼中的任意位置中的例外狀況處理的任何狀態損毀。&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 這個型別實作&lt;xref:System.IDisposable&gt;介面。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其&lt;xref:System.IDisposable.Dispose%2A&gt;方法中的<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>區塊。&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節&lt;xref:System.IDisposable&gt;介面 &gt; 主題。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>By throwing an &lt;xref:System.InsufficientMemoryException&gt; exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">藉由擲回&lt;xref:System.InsufficientMemoryException&gt;例外狀況，應用程式可以區分作業將無法完成評估部分完成的作業可能已損毀的應用程式狀態。&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current &lt;xref:System.AppDomain&gt; or recycling the process.</source>
          <target state="translated">這可讓應用程式的封閉式擴大原則，這可能需要卸載目前頻率減少為&lt;xref:System.AppDomain&gt;或回收處理序。&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>MemoryFailPoint checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated">MemoryFailPoint 檢查是否足夠的記憶體和連續虛擬位址空間可以在所有記憶體回收堆積，而且可能會增加分頁檔大小。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>MemoryFailPoint makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt; method to ensure that resources associated with MemoryFailPoint are released.</source>
          <target state="translated">MemoryFailPoint 可讓長期記憶體可用性的閘道，存留期間不保證，但呼叫端應該一律使用&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;方法，以確保並釋出 MemoryFailPoint 相關聯的資源。&lt;/xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To use a memory gate, you must create a MemoryFailPoint object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">若要使用的記憶體閘道，您必須建立 MemoryFailPoint 物件，並指定百萬位元組 (MB) 的記憶體數目預期在下次執行作業使用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If enough memory is not available, an &lt;xref:System.InsufficientMemoryException&gt; exception is thrown.</source>
          <target state="translated">如果記憶體不足，無法使用，&lt;xref:System.InsufficientMemoryException&gt;擲回例外狀況。&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">建構函式的參數必須是正整數。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A negative value raises an &lt;xref:System.ArgumentOutOfRangeException&gt; exception.</source>
          <target state="translated">負值會引發&lt;xref:System.ArgumentOutOfRangeException&gt;例外狀況。&lt;/xref:System.ArgumentOutOfRangeException&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>MemoryFailPoint operates at a granularity of 16 MB.</source>
          <target state="translated">MemoryFailPoint 16 MB 的資料粒度的運作方式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">任何小於 16 MB 的值會被視為 16 MB，和其他值會被視為 16 MB 的下一個最大倍數。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，指定順利執行所需的記憶體數量。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">可以憑應用程式所處理的工作項目使用的記憶體數量。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To estimate the amount of memory your application needs to process a request, consider using the &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt; method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">若要估計您應用程式需要處理要求的記憶體數量，請考慮使用&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;方法，以判斷數量記憶體可用之前與之後呼叫此方法會處理工作項目。&lt;/xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Runtime.MemoryFailPoint&gt; class for a code example that dynamically determines the value for the <ph id="ph1">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">請參閱&lt;xref:System.Runtime.MemoryFailPoint&gt;類別程式碼範例以動態方式決定的值<ph id="ph1">`sizeInMegabytes`</ph>參數。&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">所需的記憶體大小 （mb）。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This must be a positive value.</source>
          <target state="translated">這必須是正值。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The specified memory size is negative.</source>
          <target state="translated">指定的記憶體大小是負數。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">沒有記憶體不足，無法開始執行的閘道所保護的程式碼。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">所使用的資源全部釋出<bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Call Dispose when you are finished using the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">當您完成使用&lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;呼叫 Dispose</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Dispose method leaves the &lt;xref:System.Runtime.MemoryFailPoint&gt; in an unusable state.</source>
          <target state="translated">Dispose 方法會使&lt;xref:System.Runtime.MemoryFailPoint&gt;中無法使用的狀態。&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After calling &lt;xref:System.Runtime.MemoryFailPoint&gt;, you must release all references to the &lt;xref:System.Runtime.MemoryFailPoint&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Runtime.MemoryFailPoint&gt; was occupying.</source>
          <target state="translated">在呼叫&lt;xref:System.Runtime.MemoryFailPoint&gt;，您必須釋放所有參考&lt;xref:System.Runtime.MemoryFailPoint&gt;讓記憶體回收行程可以回收記憶體的&lt;xref:System.Runtime.MemoryFailPoint&gt;所佔用。&lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>實作 Dispose 方法<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 永遠呼叫 Dispose 之後，再放開您的最後一個參考至&lt;xref:System.Runtime.MemoryFailPoint&gt;。&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Runtime.MemoryFailPoint&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫&lt;xref:System.Runtime.MemoryFailPoint&gt;物件的<ph id="ph1">`Finalize`</ph>方法。&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">確認釋出資源，並在記憶體回收行程回收時執行其他清除作業<bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The garbage collector calls the Finalize method when the current object is ready to be finalized.</source>
          <target state="translated">準備最終處理而目前的物件時，記憶體回收行程會呼叫 Finalize 方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>