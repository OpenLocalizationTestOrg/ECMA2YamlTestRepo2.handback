<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98a5f21694485805037062331e61c84ab6c7b89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.CoerceValueCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0dbcacc268be5eccf7d087f65cc65526a3b6163</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8a15d9a78bddc35a28aedda845459834d8a028d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</source>
          <target state="translated">提供範本的重新評估相依性屬性值，或強制轉型會在特別要求時呼叫的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Callbacks based on CoerceValueCallback can be assigned to a dependency property through several different techniques.</source>
          <target state="translated">根據 CoerceValueCallback 回呼可以指派透過數種不同技術的相依性屬性。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each of these techniques requires that you first create a new property metadata object (&lt;xref:System.Windows.PropertyMetadata&gt;, or a derived class such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).</source>
          <target state="translated">這些技術的每個需要您先建立新的屬性中繼資料物件 (&lt;xref:System.Windows.PropertyMetadata&gt;，或衍生的類別，例如&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;)。&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create the metadata object using a constructor signature that takes the <ph id="ph1">`coerceValueCallback`</ph> parameter, and assign that parameter to your callback handler.</source>
          <target state="translated">建立使用會採用的建構函式簽章的中繼資料物件<ph id="ph1">`coerceValueCallback`</ph>參數，並將該參數指派給您的回呼處理常式。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Or construct the metadata by any signature and set the &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; property prior to putting the metadata in use.</source>
          <target state="translated">建構的任何簽章和集合的中繼資料或&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;屬性，再將中繼資料放在使用中。&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you have this metadata, you can:      -   Define a new dependency property on a new class, using either signature of  &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, giving the metadata as the <ph id="ph1">`typeMetadata`</ph> value.</source>
          <target state="translated">當您擁有此中繼資料時，您可以:-新的類別，並使用其中一個簽章上定義新的相依性屬性&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;，讓中繼資料當做<ph id="ph1">`typeMetadata`</ph>值。&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>-   Override the metadata (call &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for an existing dependency property, when you derive from the class that owns the dependency property.</source>
          <target state="translated">-覆寫中繼資料 (呼叫&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) 針對現有的相依性屬性，當您從擁有相依性屬性的類別衍生。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   Add an existing dependency property to a new &lt;xref:System.Windows.DependencyObject&gt; class, using new metadata, by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">-將現有的相依性屬性新增至新的&lt;xref:System.Windows.DependencyObject&gt;類別，使用新的中繼資料，藉由呼叫&lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; &lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implementations of this callback should check the value in <ph id="ph1">`baseValue`</ph> and determine based on either the value or the type whether this is a value that needs to be further coerced.</source>
          <target state="translated">此回呼的實作應該檢查值<ph id="ph1">`baseValue`</ph>並判斷這是否需要進一步強制轉型的值為基礎的值或型別。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for a dependency property is invoked any time that the property system or any other caller calls &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt; on a &lt;xref:System.Windows.DependencyObject&gt; instance, specifying that property's identifier as the <ph id="ph1">`dp`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;相依性屬性會叫用屬性系統或其他呼叫端呼叫任何時間&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;上&lt;xref:System.Windows.DependencyObject&gt;執行個體，並指定該屬性的識別碼，則為<ph id="ph1">`dp`</ph>。&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.CoerceValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Changes to the property value may have come from any possible participant in the property system.</source>
          <target state="translated">屬性值的變更可能會有來自屬性系統中任何可能的參與者。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</source>
          <target state="translated">這包括樣式、 泛型失效，觸發程序、 屬性值繼承，以及本機值設定。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Generally you should avoid specifying more than one &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for any given dependency property (overriding or adding with new metadata for a dependency property that already had a &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).</source>
          <target state="translated">您通常應該避免指定一個以上的&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;針對任何指定的相依性屬性 (覆寫或新增具有新的中繼資料已經有相依性屬性的&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;)。&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Only one of the callbacks will be able to act.</source>
          <target state="translated">只有其中一個回呼會起作用。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the &lt;xref:System.Windows.DependencyObject&gt; caller.</source>
          <target state="translated">做回呼將會套用到繼承相較之下中最常衍生的類別的一個&lt;xref:System.Windows.DependencyObject&gt;呼叫端。&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</source>
          <target state="translated">中繼資料遭到覆寫時，會取代其他回呼仍所指派的相依性屬性的中繼資料的擁有者階層更高版本存在。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>