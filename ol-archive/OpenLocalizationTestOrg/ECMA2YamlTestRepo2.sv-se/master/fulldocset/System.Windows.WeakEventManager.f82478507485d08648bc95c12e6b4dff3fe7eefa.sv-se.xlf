<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sv-se">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3babf752cda1959b9fe1dc4066dab91e524618cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.WeakEventManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">405ac814751751e817156a9b131a12310f85f791</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea2a89fc5ac37f0d3a6ebf9c4b7068aa0c1bba2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">Innehåller en basklass för händelsehanteraren för som används i den <bpt id="p1">*</bpt>svaga händelse mönster<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">Hanteraren lägger till och tar bort lyssnare för händelser (eller återanrop) som också använder mönstret.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">Normalt använder du svaga händelse mönstret när händelsekällan har en livslängd för objekt som är oberoende av händelseavlyssnare.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">Om du använder centrala händelse avsändande möjligheterna för en WeakEventManager kan på lyssnaren hanterare på att skräpinsamlas även om källobjektet kvarstår.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">Däremot kommer en vanlig händelse hookup med hjälp av den <ph id="ph1">`+=`</ph> operatorn orsakar potentiellt frånkopplade källan ska innehålla en referens till lyssnarna.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">Detta förhindrar att mottagaren skräpinsamlats inom rimlig tid.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">En gemensam situation där livstid relationerna mellan datakällor och lyssnare ska använda svaga händelse mönstret är hantering av update-händelser som kommer från databindningar.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">Svag händelse mönster kan också användas för återanrop och regelbundna händelser.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">Initierar basera klassen värden när den används som initieraren i konstruktorn i en härledd klass.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">Levererar händelsen hanteras varje lyssnaren.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the DeliverEvent method from within the event handlers that are added or removed by the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; and &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; implementations of subclasses.</source>
          <target state="translated">Anropa metoden DeliverEvent från händelsehanterare som läggs till eller tas bort med den &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;och &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;implementeringar av underklasser.&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; method in your <ph id="ph1">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">Om du anropar den &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;metod i din <ph id="ph1">`AddListener`</ph> implementering av din klass i listan över lyssnare som tar emot händelsen sparas i en underliggande samling.&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph> ingår inte i ett gränssnitt eller klassen avtal.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; and adds weak event pattern listeners for the event.)       &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>är det föreslagna namnet för metoden i klassen manager som anropar &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;och lägger till svaga händelse mönster lyssnare för händelsen.)       &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;lägger till lyssnare i en lista.&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.</source>
          <target state="translated">Om din implementering manager upprätthåller mer än en lista över lyssnare per händelse, Använd inte DeliverEvent eller &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.</source>
          <target state="translated">I stället implementeringen ska skapa en egen &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;instanser <ph id="ph1">`AddListener`</ph> bör lägga till lyssnare i listan med lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.&lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Det objekt som händelsen hanteras.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data for the event to deliver.</source>
          <target state="translated">En &lt;xref:System.EventArgs&gt;som innehåller informationen om händelsen för händelsen att leverera.&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Som ska läggas till.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Som ska läggas till.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Som ska läggas till.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is used for the provided type.</source>
          <target state="translated">Returnerar den <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> implementering som används för den angivna typen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt; implementations call this method using their passed <ph id="ph1">`managerType`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;implementeringar anropa den här metoden med deras skickade <ph id="ph1">`managerType`</ph>.&lt;/xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned &lt;xref:System.Windows.WeakEventManager&gt; is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">Den returnerade &lt;xref:System.Windows.WeakEventManager&gt;används sedan som fördelar som avgör vilken händelse som togs emot och vilka privata klass-hanterare för att anropa.&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type to obtain the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">Typen för att hämta den <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> för.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The matching <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">Det matchande <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> implementering.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">Hämtar eller anger den data som lagras för den angivna källan.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">Härledda klasser kan välja vilka data och för lagring i indexeraren.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically this is implemented as a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;, which is a list of weak references to listeners.</source>
          <target state="translated">Vanligtvis det implementeras som en &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;, vilket är en lista över svaga referenser till lyssnare.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You would only have to change this type if the &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; type cannot contain your required information.</source>
          <target state="translated">Du behöver bara ändra den här typen om det &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;typ får inte innehålla informationen som krävs.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, you will have to override the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">Om så behöver du åsidosätta den &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;metoden så att alla rensning av den underliggande typen utförs på rätt sätt.&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">Det nollbaserade indexet för den begärda källan.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">Data som lagras av hanteraren för den här källan.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">Returnerar ett nytt objekt att innehålla lyssnare på en händelse.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">Ett nytt objekt att innehålla lyssnare på en händelse.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">Lägger till angivna delegat som en händelsehanterare för den angivna källan.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">Källobjektet som hanterardelegaten prenumererar på.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The delegate that handles the event that is raised by <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Det ombud som hanterar den händelse som aktiveras av <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">Lägger till den angivna lyssnaren till den angivna källan för händelsen hanteras.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">Anropa den här metoden i klassen manager <ph id="ph1">`AddListener`</ph> metoder i &lt;xref:System.Windows.WeakEventManager&gt;implementeringar.&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>är det föreslagna namnet för den statiska metoden som du definierar på manager-klass för att aktivera andra klasser att lägga till en lyssnare för svag händelse mönstret.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>tar två parametrar: den <ph id="ph2">`source`</ph> där lyssnaren är ansluten och <ph id="ph3">`listener`</ph> instans.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.</source>
          <target state="translated">För din <ph id="ph1">`AddListener`</ph> -implementering måste anropa metoden ProtectedAddListener aktuella manager och skicka samma två parametrar.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the list of listeners was previously empty, ProtectedAddListener calls the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; override through polymorphism.</source>
          <target state="translated">Om listan över lyssnare var tidigare tomt ProtectedAddListener anropar den &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;metoden internt, som anropar ditt specifika &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;åsidosätta via polymorfism.&lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>ProtectedAddListener adds listeners to a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">ProtectedAddListener lägger till lyssnare för en enskild interna &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;per <ph id="ph1">`source`</ph>.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener.</source>
          <target state="translated">Om din implementering manager upprätthåller mer än en lista över lyssnare för varje händelsekälla kombination, Använd inte ProtectedAddListener.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; event instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">I stället implementeringen ska skapa en egen &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;instanser <ph id="ph1">`AddListener`</ph> bör lägga till lyssnare i listan med lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa den &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;händelsen i stället för den &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;metoden.&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; &lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The source to attach listeners to.</source>
          <target state="translated">Källan för att bifoga lyssnare till.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">Klassen lyssnande (som måste implementera <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">Tar bort tillagd hanteraren från angiven källa.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The source to remove the handler from.</source>
          <target state="translated">Källan för att ta bort från hanteraren.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to remove from <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Delegaten att ta bort från <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">Tar bort en lyssnare har redan lagts till från den angivna källan.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">Anropa den här metoden i klassen manager <ph id="ph1">`RemoveListener`</ph> metoder i &lt;xref:System.Windows.WeakEventManager&gt;implementeringar.&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>är det föreslagna namnet för den statiska metoden som du definierar på manager-klass för att aktivera andra klasser för att ta bort en lyssnare för svag händelse mönstret.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>tar två parametrar: den <ph id="ph2">`source`</ph> där lyssnaren tas bort och <ph id="ph3">`listener`</ph> klass.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.</source>
          <target state="translated">För din <ph id="ph1">`RemoveListener`</ph> -implementering måste anropa metoden ProtectedRemoveListener aktuella manager och skicka samma två parametrar.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; override through polymorphism.</source>
          <target state="translated">Om ett anrop till ProtectedRemoveListener tar bort den sista lyssnaren i listan, ProtectedRemoveListener anropar den &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;metoden internt, som anropar ditt specifika &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;åsidosätta via polymorfism.&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>ProtectedRemoveListener removes listeners from a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">ProtectedRemoveListener tar bort lyssnare från en enda interna &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;per <ph id="ph1">`source`</ph>.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener.</source>
          <target state="translated">Om din implementering manager upprätthåller mer än en lista över lyssnare för varje händelsekälla kombination, Använd inte ProtectedRemoveListener.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; method instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">I stället implementeringen ska skapa en egen &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;instanser <ph id="ph1">`RemoveListener`</ph> bör ta bort lyssnare från listan över lämpliga och händelser som ska levereras till lämplig lyssnare listan genom att anropa den &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;metoden i stället för den &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;metoden.&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; &lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The source to remove listeners from.</source>
          <target state="translated">Källan för att ta bort lyssnare från.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">Klassen lyssnande (som måste implementera <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">Inaktiva lyssnare poster tas bort från datalistan över för den angivna källan.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed from the list.</source>
          <target state="translated">Returnerar <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> om vissa poster faktiskt har tagits bort från listan.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Purge method has a default implementation that will remove all entries when data is a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;.</source>
          <target state="translated">Rensa-metoden har en standardimplementering som tar bort alla poster när data är ett &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The source for events being listened to.</source>
          <target state="translated">Källan för händelser som lyssnar på.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The data to check.</source>
          <target state="translated">Data att kontrollera.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This object is expected to be a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; implementation.</source>
          <target state="translated">Det här objektet förväntas vara en &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;implementering.&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to stop listening to <ph id="ph1">`source`</ph>, and completely remove all entries from <ph id="ph2">`data`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>slutar att lyssna till <ph id="ph1">`source`</ph>, och ta bort alla poster från <ph id="ph2">`data`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Om vissa poster togs bort faktiskt; Annars <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Establishes a read-lock on the underlying data table, and returns an &lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">Upprättar en Läs-Lås för underliggande tabellen och returnerar &lt;xref:System.IDisposable&gt;.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>In derived classes, queries to the table contained in &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; should always occur within a <ph id="ph1">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">I härledda klasser frågor till tabellen som ingår i &lt;xref:System.Windows.WeakEventManager.Item%2A&gt;ska alltid ske inom en <ph id="ph1">`using (ReadLock) { ... }`</ph> -satsen, förutom frågor som redan finns inom ett skrivlås.&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">Dessa frågor kan vara nödvändigt om klassen stöder en mer avancerad <ph id="ph1">`AddListener`</ph> implementering som kräver mer data utöver den <ph id="ph2">`source`</ph> och <ph id="ph3">`listener`</ph>, och använder den &lt;xref:System.Windows.WeakEventManager.Item%2A&gt;samling för att lagra den extra informationen.&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">Ett objekt som kan användas för att upprätta ett lås på tabellen datamedlemmar och klicka sedan på lämpligt sätt tas bort med en <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> konstruera.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">Tar bort alla lyssnare för den angivna källan.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The source to remove listener information for.</source>
          <target state="translated">Källan för att ta bort informationen om lyssnaren för.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">Begäranden om att en rensning av oanvända poster i den underliggande listan lyssnare ska utföras på en lägre prioritet tråd.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the ScheduleCleanup method is similar to calling the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method on the current manager's list, at lower thread priority, with the <ph id="ph1">`purgeAll`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Att anropa metoden ScheduleCleanup liknar anropar den &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;metoden på den aktuella hanteraren listan på lägre trådprioritet med den <ph id="ph1">`purgeAll`</ph> parametern <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">Anger den aktuella hanteraren för den angivna manager.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the SetCurrentManager method to initialize a manager, if that is required by a call to your <ph id="ph1">`CurrentManager`</ph> property on a &lt;xref:System.Windows.WeakEventManager&gt; implementation.</source>
          <target state="translated">Anropa metoden SetCurrentManager för att initiera en hanterare om som krävs av ett anrop till din <ph id="ph1">`CurrentManager`</ph> -egenskapen i en &lt;xref:System.Windows.WeakEventManager&gt;implementering.&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The type to set the new event manager.</source>
          <target state="translated">Ange nya händelsehanteraren typ.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The new event manager.</source>
          <target state="translated">Händelsehanteraren.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">När åsidosätts i en härledd klass börjar lyssna efter händelsen hanteras.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After the StartListening method is first called, the manager should be in the state of calling &lt;xref:System.Windows.WeakEventManager.DeliverEvent<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.WeakEventManager.DeliverEventToList<ept id="p1">*</ept>&gt; whenever the relevant event from the provided source is handled.</source>
          <target state="translated">När metoden StartListening först anropas hanteraren måste vara i tillståndet för anropar &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; eller &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; när den relevanta händelsen från den angivna källan hanteras.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The source to begin listening on.</source>
          <target state="translated">Källan för att börja lyssna på.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">När åsidosätts i en härledd klass, stoppar du lyssnar på den angivna källan för händelsen hanteras.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The source to stop listening on.</source>
          <target state="translated">Källan slutar att lyssna på.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Establishes a write-lock on the underlying data table, and returns an&lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">Upprättar ett skrivlås på underliggande tabellen och returnerar&lt;xref:System.IDisposable&gt;.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">I härledda klasser alla ändringar i den underliggande datatabellen ska ske inom en <ph id="ph1">`using (WriteLock) { ... }`</ph> satsen.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">De här ändringarna kan vara nödvändigt om klassen stöder en mer avancerad <ph id="ph1">`AddListener`</ph> implementering som kräver mer data utöver den <ph id="ph2">`source`</ph> och <ph id="ph3">`listener`</ph>, och använder den &lt;xref:System.Windows.WeakEventManager.Item%2A&gt;samling för att lagra den extra informationen.&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">Ett objekt som kan användas för att upprätta ett lås på tabellen datamedlemmar och klicka sedan på lämpligt sätt tas bort med en <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> konstruera.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>