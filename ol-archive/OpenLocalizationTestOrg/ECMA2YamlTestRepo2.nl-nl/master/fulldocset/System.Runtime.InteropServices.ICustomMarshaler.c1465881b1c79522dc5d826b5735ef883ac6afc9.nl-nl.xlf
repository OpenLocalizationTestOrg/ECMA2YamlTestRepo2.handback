<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac9498873469daff17ad3b38bfa9cf967028530a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ICustomMarshaler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">213a6099db9f52670cebea5a2dbbccb2b08631ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d826986e297e5e712358c7a49dc0ecaf8dc024fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom wrappers for handling method calls.</source>
          <target state="translated">Aangepaste wrappers biedt voor het verwerken van methode-aanroepen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A marshaler provides a bridge between the functionality of old and new interfaces.</source>
          <target state="translated">Een marshaller biedt een brug tussen de functionaliteit van de oude en nieuwe interfaces.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom marshaling provides the following benefits:      -   It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</source>
          <target state="translated">Aangepaste marshaling biedt de volgende voordelen:-Hiermee kunt clienttoepassingen die zijn ontworpen voor gebruik met een oude interface ook werken met servers die een nieuwe interface implementeren.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   It enables client applications built to work with a new interface to work with servers that implement an old interface.</source>
          <target state="translated">-Kunnen clienttoepassingen die compatibel zijn met een nieuwe interface werken met servers die een oude-interface implementeren.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</source>
          <target state="translated">Als u een interface die verschillende Marshal gedrag introduceert of die het Component Object Model (COM) wordt weergegeven in een andere manier hebt, kunt u een aangepaste marshaller in plaats van de interop-marshaller ontwerpen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</source>
          <target state="translated">Met behulp van een aangepaste marshaller minimaliseert u het verschil tussen nieuwe onderdelen van .NET Framework en bestaande COM-onderdelen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that you are developing a managed interface called <ph id="ph1">`INew`</ph>.</source>
          <target state="translated">Stel bijvoorbeeld dat u een beheerde interface naam ontwikkelt <ph id="ph1">`INew`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</source>
          <target state="translated">Wanneer deze interface wordt blootgesteld aan COM via een standaard COM callable wrapper (CCW), heeft dezelfde methoden als de beheerde-interface en gebruikt de Marshal regels die zijn ingebouwd in de interop-marshaller.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Now suppose that a well-known COM interface called <ph id="ph1">`IOld`</ph> already provides the same functionality as the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">Stel nu dat een bekende COM-interface aangeroepen <ph id="ph1">`IOld`</ph> al bieden dezelfde functionaliteit als de <ph id="ph2">`INew`</ph> interface.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>By designing a custom marshaler, you can provide an unmanaged implementation of <ph id="ph1">`IOld`</ph> that simply delegates the calls to the managed implementation of the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">Een aangepaste marshaller ontwerpt, kunt u een niet-beheerde implementatie van bieden <ph id="ph1">`IOld`</ph> die het aanroepen van de beheerde implementatie van gewoon delegeert de <ph id="ph2">`INew`</ph> interface.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</source>
          <target state="translated">Daarom worden de aangepaste marshaller fungeert als een brug tussen de interfaces beheerde en onbeheerde.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Aangepaste marshallers zijn niet aangeroepen bij het aanroepen van beheerde code naar onbegeleide code op een interface verzending alleen-lezen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defining the Marshaling Type    Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</source>
          <target state="translated">Definieert de Marshal-Type voordat u een aangepaste marshaller kunt maken, moet u de beheerde en onbeheerde interfaces die zal worden gemarshald definiÃ«ren.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</source>
          <target state="translated">Deze interfaces vervullen dezelfde functie vaak maar anders worden blootgesteld aan beheerde en onbeheerde objecten.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</source>
          <target state="translated">Een beheerde compiler produceert een beheerde-interface van metagegevens en de resulterende interface ziet eruit als een beheerde interface.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows a typical interface.</source>
          <target state="translated">Het volgende voorbeeld toont een typische interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept><ept id="p5">]</ept>       You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept> <ept id="p5">]</ept> u definieert het type zonder begeleiding in Interface Definition Language (IDL) en met de compiler Interface Definition Language (MIDL) worden gecompileerd.    </target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</source>
          <target state="translated">U definieert de interface binnen een instructie bibliotheek en deze de interface-ID met het kenmerk universal UUID (unique identifier) toewijzen als het volgende voorbeeld laat zien.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>       The MIDL compiler produces several output files.</source>
          <target state="translated"><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>De compiler MIDL produceert verschillende uitvoerbestanden.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the interface is defined in Old.idl, the output file Old_i.c defines a <ph id="ph1">`const`</ph> variable with the interface identifier (IID) of the interface, as the following example demonstrates.</source>
          <target state="translated">Als de interface is gedefinieerd in Old.idl, het uitvoerbestand Old_i.c definieert een <ph id="ph1">`const`</ph> variabele met de interface-id (IID) van de interface, zoals in het volgende voorbeeld laat zien.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>       The Old.h file is also produced by MIDL.</source>
          <target state="translated"><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>Het bestand Old.h wordt ook geproduceerd door MIDL.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>It contains a C++ definition of the interface that can be included in your C++ source code.</source>
          <target state="translated">Het bevat een C++-definitie van de interface die kan worden opgenomen in de broncode C++.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the ICustomMarshaler Interface    Your custom marshaler must implement the ICustomMarshaler interface to provide the appropriate wrappers to the runtime.</source>
          <target state="translated">Implementeert de ICustomMarshaler-Interface uw aangepaste marshaller, moet de ICustomMarshaler-interface om de juiste wrappers de runtime implementeren.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code displays the base interface that must be implemented by all custom marshalers.</source>
          <target state="translated">De volgende C#-code weergegeven de base interface die moet worden geÃ¯mplementeerd door alle aangepaste marshallers.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept><ept id="p5">]</ept>       The ICustomMarshaler interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept> <ept id="p5">]</ept> de ICustomMarshaler-interface bevat methoden voor het bieden van ondersteuning, opschonen ondersteuning en informatie over de gegevens worden gemarshald.    </target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Type of operation|ICustomMarshaler method|Description|   |-----------------------|-----------------------------|-----------------|   |Conversion (from native to managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|Marshals a pointer to native data into a managed object.</source>
          <target state="translated">| Type bewerking | De methode ICustomMarshaler | Beschrijving |   |-----------------------|-----------------------------|-----------------|   | Conversie (van systeemeigen naar begeleide code) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;| Een verwijzing naar de oorspronkelijke gegevens in een begeleid object gemarshald.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">Deze methode retourneert een aangepaste runtime callable wrapper (RCW) die de niet-beheerde interface die is doorgegeven als een argument kan marshallen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.|   |Conversion (from managed to native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|Marshals a managed object into a pointer to native data.</source>
          <target state="translated">De marshaller als resultaat moet een exemplaar van de aangepaste RCW voor dat type. |   | Conversie (van beheerde naar systeemeigen code) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;| Een beheerd object in een verwijzing naar de oorspronkelijke gegevens gemarshald.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">Deze methode retourneert een aangepaste COM callable wrapper (CCW) die is doorgegeven als een argument van de beheerde interface kan het marshallen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.|   |Cleanup (of native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.|   |Cleanup (of managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.|   |Information (about native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|Returns the size of the unmanaged data to be marshaled.|      ### Conversion    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;       Marshals a pointer to native data into a managed object.</source>
          <target state="translated">De marshaller als resultaat moet een exemplaar van de aangepaste CCW voor dat type. |   | Opschonen (van systeemeigen code) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;| Hiermee kunt u de marshaller opschonen van de oorspronkelijke gegevens (CCW) die wordt geretourneerd door de methode &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;. |   | Opschonen (van beheerde code) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;| Hiermee kunt u de marshaller opschonen van de beheerde gegevens (de RCW) die wordt geretourneerd door de methode &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;. |   | Informatie (over systeemeigen code) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;| Retourneert de grootte van de niet-beheerde gegevens moeten worden verzonden. |      ### Conversie &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;gemarshald van een verwijzing naar de oorspronkelijke gegevens in een begeleid object.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">Deze methode retourneert een aangepaste runtime callable wrapper (RCW) die de niet-beheerde interface die is doorgegeven als een argument kan marshallen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
          <target state="translated">De marshaller moet een exemplaar van de aangepaste RCW voor dat type worden geretourneerd.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;       Marshals a managed object into a pointer to native data.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;Een beheerd object in een verwijzing naar de oorspronkelijke gegevens gemarshald.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">Deze methode retourneert een aangepaste COM callable wrapper (CCW) die is doorgegeven als een argument van de beheerde interface kan het marshallen.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
          <target state="translated">De marshaller moet een exemplaar van de aangepaste CCW voor dat type worden geretourneerd.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cleanup    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.</source>
          <target state="translated">Opruimen &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;kunnen de marshaller opschonen van de oorspronkelijke gegevens (CCW) die wordt geretourneerd door de &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;methode.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;Hiermee kunt u de marshaller opschonen van de beheerde gegevens (de RCW) die wordt geretourneerd door de &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;methode.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Size Information    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;       Returns the size of the unmanaged data to be marshaled.</source>
          <target state="translated">Het formaat van informatie &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;retourneert de grootte van de niet-beheerde gegevens moeten worden gemarshald.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the GetInstance Method    In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a <ph id="ph1">`static`</ph> method called <ph id="ph2">`GetInstance`</ph> that accepts a &lt;xref:System.String&gt; as a parameter and has a return type of ICustomMarshaler.</source>
          <target state="translated">De methode GetInstance naast het implementeren van de ICustomMarshaler-interface implementeert, aangepaste marshallers moeten implementeren een <ph id="ph1">`static`</ph> aangeroepen methode <ph id="ph2">`GetInstance`</ph> die accepteert een &lt;xref:System.String&gt;als een parameter en heeft een retourtype van ICustomMarshaler.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`static`</ph> method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</source>
          <target state="translated">Dit <ph id="ph1">`static`</ph> methode wordt aangeroepen door de common language runtime van COM-interop laag instantiÃ«ren van een exemplaar van de aangepaste marshaller.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string that is passed to <ph id="ph1">`GetInstance`</ph> is a cookie that the method can use to customize the returned custom marshaler.</source>
          <target state="translated">De tekenreeks die wordt doorgegeven aan <ph id="ph1">`GetInstance`</ph> is een cookie die de methode voor het aanpassen van de geretourneerde aangepaste marshaller kunt gebruiken.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>      ## Applying MarshalAsAttribute    To use a custom marshaler, you must apply the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to the parameter or field that is being marshaled.</source>
          <target state="translated"><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>## Een aangepaste marshaller toepassen MarshalAsAttribute te gebruiken, moet u de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;kenmerk met de parameter of een veld dat is worden gemarshald.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must also pass the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;constructor.</source>
          <target state="translated">U moet ook doorgeven de &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;opsommingswaarde naar de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;constructor.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you must specify the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field with one of the following named parameters:      -   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; (required): The assembly-qualified name of the custom marshaler.</source>
          <target state="translated">Bovendien moet u de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;veld met een van de volgende benoemde parameters:- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;(vereist): de assembly gekwalificeerde naam van de aangepaste marshaller.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name should include the namespace and class of the custom marshaler.</source>
          <target state="translated">De naam moet de naamruimte en klassenaam van de aangepaste marshaller bevatten.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</source>
          <target state="translated">Als de aangepaste marshaller is niet gedefinieerd in de assembly die wordt gebruikt in, moet u de naam van de assembly waarin deze is gedefinieerd.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  You can use the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; field instead of the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Kunt u de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;veld in plaats van de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;veld.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; takes a type that is easier to specify.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;heeft een type dat is het eenvoudiger om op te geven.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt; (optional): A cookie that is passed to the custom marshaler.</source>
          <target state="translated">- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;(optioneel): een cookie die wordt doorgegeven aan de aangepaste marshaller.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the cookie to provide additional information to the marshaler.</source>
          <target state="translated">U kunt de cookie gebruiken om de marshaller aanvullende informatie te geven.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</source>
          <target state="translated">Als de dezelfde marshaller wordt gebruikt om een aantal wrappers, identificeert de cookie een specifieke wrapper.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cookie is passed to the <ph id="ph1">`GetInstance`</ph> method of the marshaler.</source>
          <target state="translated">De cookie wordt doorgegeven aan de <ph id="ph1">`GetInstance`</ph> methode van de marshaller.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute identifies the custom marshaler so it can activate the appropriate wrapper.</source>
          <target state="translated">De &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;kenmerk identificeert de aangepaste marshaller, zodat de juiste wrapper kunnen worden geactiveerd.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</source>
          <target state="translated">De common language runtime van interop-service wordt vervolgens het kenmerk moet worden gecontroleerd en de aangepaste marshaller de eerste keer maakt de argument (parameter of veld) moet worden gemarshald.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime then calls the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; and &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; methods on the custom marshaler to activate the correct wrapper to handle the call.</source>
          <target state="translated">De runtime roept vervolgens de &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;en &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;methoden voor de aangepaste marshaller voor het activeren van de juiste wrapper voor het afhandelen van de aanroep.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a Custom Marshaler    When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</source>
          <target state="translated">Gebruik een aangepaste marshaller wanneer de aangepaste marshaller is voltooid, kunt u deze als aangepaste wrapper voor een bepaald type.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows the definition of the <ph id="ph1">`IUserData`</ph> managed interface:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept><ept id="p5">]</ept>       In the following example, the <ph id="ph2">`IUserData`</ph> interface uses the <ph id="ph3">`NewOldMarshaler`</ph> custom marshaler to enable unmanaged client applications to pass an <ph id="ph4">`IOld`</ph> interface to the <ph id="ph5">`DoSomeStuff`</ph> method.</source>
          <target state="translated">Het volgende voorbeeld toont de definitie van de <ph id="ph1">`IUserData`</ph> beheerde-interface: <bpt id="p1">[!code-cpp</bpt> <bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept> <ept id="p5">]</ept> In het volgende voorbeeld wordt de <ph id="ph2">`IUserData`</ph> interface gebruikt de <ph id="ph3">`NewOldMarshaler`</ph> aangepaste marshaller voor niet-beheerde client-toepassingen om door te geven een <ph id="ph4">`IOld`</ph> in de interface de <ph id="ph5">`DoSomeStuff`</ph> methode.    </target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The managed description of the <ph id="ph1">`DoSomeStuff`</ph> method takes an <ph id="ph2">`INew`</ph> interface, as shown in the previous example, whereas the unmanaged version of <ph id="ph3">`DoSomeStuff`</ph> takes an <ph id="ph4">`IOld`</ph> interface pointer, as shown in the following example.</source>
          <target state="translated">De beheerde beschrijving van de <ph id="ph1">`DoSomeStuff`</ph> methode duurt een <ph id="ph2">`INew`</ph> interface, zoals wordt weergegeven in het vorige voorbeeld, dat de niet-beheerde versie van <ph id="ph3">`DoSomeStuff`</ph> duurt een <ph id="ph4">`IOld`</ph> -interface-aanwijzer, zoals wordt weergegeven in het volgende voorbeeld.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>       The type library that is generated by exporting the managed definition of <ph id="ph2">`IUserData`</ph> yields the unmanaged definition shown in this example instead of the standard definition.</source>
          <target state="translated"><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>De typebibliotheek die wordt gegenereerd door de begeleide definitie van exporteren <ph id="ph2">`IUserData`</ph> resulteert in de definitie van de niet-beheerde weergegeven in dit voorbeeld in plaats van de standaarddefinitie.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute applied to the <ph id="ph1">`INew`</ph> argument in the managed definition of the <ph id="ph2">`DoSomeStuff`</ph> method indicates that the argument uses a custom marshaler, as the following example shows.</source>
          <target state="translated">De &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;kenmerk toegepast op de <ph id="ph1">`INew`</ph> argument in de begeleide definitie van de <ph id="ph2">`DoSomeStuff`</ph> methode geeft aan dat het argument een aangepaste marshaller als het volgende voorbeeld wordt getoond gebruikt.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept>       <bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept>  <bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept>  <bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept><ept id="p11">]</ept>       In the previous examples, the first parameter provided to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute is the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept><bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept><bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept> <ept id="p11">]</ept> In de voorgaande voorbeelden worden de eerste parameter opgegeven voor de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;kenmerk is de &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;opsommingswaarde <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.&lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;               </target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second parameter is the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field, which provides the assembly-qualified name of the custom marshaler.</source>
          <target state="translated">De tweede parameter is de &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;veld, waardoor de assembly gekwalificeerde naam van de aangepaste marshaller.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name consists of the namespace and class of the custom marshaler (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</source>
          <target state="translated">Deze naam bestaat uit de naamruimte en klassenaam van de aangepaste marshaller (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
          <target state="translated">Voert de voltooiing van de beheerde gegevens wanneer deze niet langer nodig is.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The managed object to be destroyed.</source>
          <target state="translated">Het beheerde object worden vernietigd.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
          <target state="translated">Voert de voltooiing van de niet-beheerde gegevens wanneer deze niet langer nodig is.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be destroyed.</source>
          <target state="translated">Een verwijzing naar de niet-beheerde gegevens worden vernietigd.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the size of the native data to be marshaled.</source>
          <target state="translated">Retourneert de grootte van de oorspronkelijke gegevens worden gemarshald.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the native data.</source>
          <target state="translated">De grootte in bytes van de oorspronkelijke gegevens.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts the managed data to unmanaged data.</source>
          <target state="translated">Converteert de beheerde gegevens naar niet-beheerde gegevens.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The managed object to be converted.</source>
          <target state="translated">Het beheerde object moet worden geconverteerd.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to the COM view of the managed object.</source>
          <target state="translated">Een verwijzing naar de COM-weergave van het beheerde object.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Converts the unmanaged data to managed data.</source>
          <target state="translated">Converteert de niet-beheerde gegevens op beheerde gegevens.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be wrapped.</source>
          <target state="translated">Een verwijzing naar de niet-beheerde gegevens moeten worden ingepakt.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that represents the managed view of the COM data.</source>
          <target state="translated">Een object dat de beheerde weergave van de COM-gegevens vertegenwoordigt.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>