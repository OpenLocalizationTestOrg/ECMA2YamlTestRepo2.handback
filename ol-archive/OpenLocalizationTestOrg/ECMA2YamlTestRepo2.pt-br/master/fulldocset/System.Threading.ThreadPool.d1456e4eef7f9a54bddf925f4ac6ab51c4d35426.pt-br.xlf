<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ca694fa893704040c1750b3af4a5b75a4d11345</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadPool.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20e6e7007a343a4397389f4342ee168c6fa4feba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">104685958ab9f148f376ded976c4acf120b8d949</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">Fornece um pool de threads que podem ser usados para executar tarefas, postagem de itens de trabalho, processar e/s assíncrona, aguardar em nome de outros threads e processar timers.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">Muitos aplicativos criam threads que gastam uma grande quantidade de tempo no estado suspenso, aguardando um evento ocorra.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">Outros threads podem entrar em um estado suspenso apenas para ser ativado periodicamente para sondar uma alteração ou atualizar as informações de status.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">O pool de threads permite que você use threads com mais eficiência, fornecendo o seu aplicativo com um pool de threads de trabalho que são gerenciados pelo sistema.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of operations that use thread pool threads include the following:      -   When you create a &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt; object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">Exemplos de operações que usam threads do pool incluem o seguinte: - quando você cria um &lt;xref:System.Threading.Tasks.Task&gt;ou &lt;xref:System.Threading.Tasks.Task%601&gt;objeto para executar algumas tarefas de forma assíncrona, por padrão, a tarefa está agendada para ser executado em um pool de threads.&lt;/xref:System.Threading.Tasks.Task%601&gt; &lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Asynchronous timers use the thread pool.</source>
          <target state="translated">-Temporizadores assíncronas usam o pool de threads.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thread pool threads execute callbacks from the &lt;xref:System.Threading.Timer?displayProperty=fullName&gt; class and raise events from the &lt;xref:System.Timers.Timer?displayProperty=fullName&gt; class.</source>
          <target state="translated">Threads de pool executar retornos de chamada de &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;classe e acionar eventos da &lt;xref:System.Timers.Timer?displayProperty=fullName&gt;classe&lt;/xref:System.Timers.Timer?displayProperty=fullName&gt; de&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">-Quando você usar identificadores de espera de registrado, um thread do sistema monitora o status dos identificadores de espera.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">Quando uma operação de espera é concluída, um thread do pool de threads de trabalho executa a função de retorno de chamada correspondente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   When you call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">-Quando você chamar o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;método para a fila de um método para execução em um pool de threads.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do this by passing the method a &lt;xref:System.Threading.WaitCallback&gt; delegate.</source>
          <target state="translated">Para fazer isso, passando-o um &lt;xref:System.Threading.WaitCallback&gt;delegar.&lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate has the signature      <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept>   <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>        where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">O representante tem a assinatura <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept><bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept> onde <ph id="ph1">`state`</ph> é um objeto que contém dados a serem usados pelo delegado.   </target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual data can be passed to the delegate by calling the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; method.</source>
          <target state="translated">Os dados reais podem ser passados para o delegado chamando o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;método.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The threads in the managed thread pool are background threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Os threads no pool de threads gerenciados são threads em segundo plano.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, their &lt;xref:System.Threading.Thread.IsBackground%2A&gt; properties are <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Isto é, seus &lt;xref:System.Threading.Thread.IsBackground%2A&gt;propriedades são <ph id="ph1">`true`</ph>.&lt;/xref:System.Threading.Thread.IsBackground%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that a ThreadPool thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">Isso significa que um thread de pool de threads não manterá um aplicativo em execução depois que todos os threads de primeiro plano serem encerrados.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Quando o pool de threads reutiliza um thread, ele não limpa os dados no armazenamento local de thread ou em campos que são marcados com o &lt;xref:System.ThreadStaticAttribute&gt;atributo.&lt;/xref:System.ThreadStaticAttribute&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">Portanto, quando um método examina o armazenamento local de thread ou campos que são marcados com o &lt;xref:System.ThreadStaticAttribute&gt;atributo, os valores encontrados podem ser restantes do uso anterior do thread do pool.&lt;/xref:System.ThreadStaticAttribute&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">Também é possível enfileirar itens de trabalho que não estão relacionados a uma operação de espera para o pool de threads.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To request that a work item be handled by a thread in the thread pool, call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Para solicitar que um item de trabalho ser manipulada por um thread no pool de threads, chame o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">Esse método aceita como um parâmetro de uma referência para o método ou delegate que será chamado pelo thread selecionado do pool de threads.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">Não é possível cancelar um item de trabalho depois que ele foi enfileirado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">Timers de fila de timer e operações de espera registrado também usam o pool de threads.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">Suas funções de retorno de chamada são enfileiradas para o pool de threads.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is one thread pool per process.</source>
          <target state="translated">Há um pool de threads por processo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, o tamanho padrão do pool de threads para um processo depende de vários fatores, como o tamanho do espaço de endereço virtual.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can call the &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt; method to determine the number of threads.</source>
          <target state="translated">Um processo pode chamar o &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;método para determinar o número de threads.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of threads in the thread pool can be changed by using the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; method.</source>
          <target state="translated">O número de threads no pool de threads pode ser alterado usando o &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">Cada thread usa o tamanho da pilha padrão e é executado com a prioridade padrão.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph2">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Código não gerenciado que hospeda o .NET Framework pode alterar o tamanho do pool de threads, usando o <ph id="ph2">`CorSetMaxThreads`</ph> função, definida no arquivo mscoree.h.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">O pool de threads fornece novos threads de trabalho ou threads de conclusão de e/s sob demanda até atingir o mínimo para cada categoria.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando um mínimo for atingido, o pool de threads pode criar threads adicionais nessa categoria ou aguarde até que algumas tarefas são concluídas.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, o pool de threads cria e destrói threads de trabalho para otimizar a taxa de transferência, que é definida como o número de tarefas que são concluídas por unidade de tempo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Há muito poucos threads não podem fazer uso ideal dos recursos disponíveis, enquanto muitos threads podem aumentar a contenção de recursos.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Quando a demanda for baixa, o número real de threads de pool pode ficar abaixo os valores mínimos.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method to obtain these minimum values.</source>
          <target state="translated">Você pode usar o &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;método para obter esses valores mínimos.&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  You can use the &lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt; method to increase the minimum number of threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Você pode usar o &lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;método para aumentar o número mínimo de threads.&lt;/xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">No entanto, esses valores de aumento desnecessariamente podem causar problemas de desempenho.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Se iniciam muitas tarefas ao mesmo tempo, todos eles podem parecer ser lenta.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Na maioria dos casos o pool de threads terão um desempenho melhor com seu próprio algoritmo para alocar threads.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Associa um identificador de sistema operacional para o <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that holds the handle.</source>
          <target state="translated">Um &lt;xref:System.IntPtr&gt;que contém o identificador.&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">O identificador deve ter aberto para e/s sobreposta no lado não gerenciado.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o identificador estiver associado; Caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Associa um identificador de sistema operacional para o <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;, which derives from the abstract &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; class.</source>
          <target state="translated">O <ph id="ph1">`osHandle`</ph> parâmetro deve ser um &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;que é derivada da &lt;xref:System.Runtime.InteropServices.SafeHandle&gt;classe&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt; abstrata de&lt;/xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; that holds the operating system handle.</source>
          <target state="translated">Um &lt;xref:System.Runtime.InteropServices.SafeHandle&gt;que contém o identificador de sistema operacional.&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">O identificador deve ter aberto para e/s sobreposta no lado não gerenciado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o identificador estiver associado; Caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the &lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt; method, and the number currently active.</source>
          <target state="translated">Recupera a diferença entre o número máximo de threads de pool retornado pelo &lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt;método e o número de ativo no momento.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads*&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>When GetAvailableThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">Quando retorna GetAvailableThreads, a variável especificada pela <ph id="ph1">`workerThreads`</ph> contém o número de threads de trabalho adicional que podem ser iniciados e a variável especificada pela <ph id="ph2">`completionPortThreads`</ph> contém o número de adicionais threads de e/s assíncronas que pode ser iniciado.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">Se não houver nenhum threads disponíveis, as solicitações de pool de threads adicionais permanecem na fila até que os threads de pool se tornam disponível.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number of available worker threads.</source>
          <target state="translated">O número de threads de trabalho disponíveis.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">O número de threads de e/s assíncronos disponíveis.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Recupera o número de solicitações para o pool de threads que podem estar ativas simultaneamente.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Todas as solicitações acima desse número permanecem na fila até que os threads de pool se tornam disponível.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>When GetMaxThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">Quando retorna GetMaxThreads, a variável especificada pela <ph id="ph1">`workerThreads`</ph> contém o número máximo de threads de trabalho permitidos no pool de threads e a variável especificada pela <ph id="ph2">`completionPortThreads`</ph> contém o número máximo de threads de e/s assíncronas permitidas no pool de threads.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt; method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">Você pode usar o &lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;método para determinar o número real de threads no pool de threads a qualquer momento.&lt;/xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Você pode usar o &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;para definir o número máximo de threads de trabalho e os threads de e/s assíncronas no pool de threads.&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">É possível enfileirar como muitas solicitações de pool de threads permite a memória do sistema.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">Se houver mais solicitações que threads de pool, as solicitações adicionais permanecem na fila até que os threads de pool se tornam disponível.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">O número máximo de threads de trabalho no pool de threads.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">O número máximo de threads de e/s assíncronas no pool de threads.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Recupera o número mínimo de threads que do pool de threads cria sob demanda, as novas solicitações são feitas, antes de alternar para um algoritmo para gerenciar a destruição e criação de threads.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">O pool de threads fornece novos threads de trabalho ou threads de conclusão de e/s sob demanda até atingir o mínimo para cada categoria.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Por padrão, o número mínimo de threads é definido como o número de processadores em um sistema.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando o mínimo for atingido, o pool de threads pode criar threads adicionais nessa categoria ou aguarde até que algumas tarefas são concluídas.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, o pool de threads cria e destrói threads para otimizar a taxa de transferência, que é definida como o número de tarefas que são concluídas por unidade de tempo.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Há muito poucos threads não podem fazer uso ideal dos recursos disponíveis, enquanto muitos threads podem aumentar a contenção de recursos.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Quando a demanda for baixa, o número real de threads de pool pode ficar abaixo os valores mínimos.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Quando este método retorna, contém o número mínimo de threads de trabalho que cria o pool de threads sob demanda.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Quando este método retorna, contém o número mínimo de threads de e/s assíncronas que cria o pool de threads sob demanda.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Queues a method for execution.</source>
          <target state="translated">Enfileira um método para execução.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">O método é executado quando um thread do pool se torna disponível.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; overload that accepts an object containing the necessary data.</source>
          <target state="translated">Você pode colocar dados requeridos pelo método na fila nos campos de instância da classe na qual o método é definido, ou você pode usar o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;sobrecarga que aceita um objeto que contém os dados necessários.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Usuários do Visual Basic podem omitir o &lt;xref:System.Threading.WaitCallback&gt;construtor e simplesmente usar a <ph id="ph2">`AddressOf`</ph> operador ao passar o método de retorno de chamada para &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic automaticamente chama construtor delegado correto.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Versão informações no .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the method to be executed.</source>
          <target state="translated">Um <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que representa o método a ser executado.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o método foi enfileirado com êxito; &lt;xref:System.NotSupportedException&gt;é gerada se o item de trabalho não foi possível enfileirar.&lt;/xref:System.NotSupportedException&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">O common language runtime (CLR) está hospedado, e o host não dá suporte a esta ação.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">Enfileira um método de execução e especifica um objeto que contém dados a serem usados pelo método.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">O método é executado quando um thread do pool se torna disponível.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">Se o método de retorno de chamada requer dados complexos, você pode definir uma classe para conter os dados.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to QueueUserWorkItem.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Usuários do Visual Basic podem omitir o &lt;xref:System.Threading.WaitCallback&gt;construtor e simplesmente usar a <ph id="ph2">`AddressOf`</ph> operador ao passar o método de retorno de chamada para QueueUserWorkItem.&lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic automaticamente chama construtor delegado correto.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Versão informações no .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the method to execute.</source>
          <target state="translated">Um <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que representa o método a ser executado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">Um objeto que contém dados a serem usados pelo método.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o método foi enfileirado com êxito; &lt;xref:System.NotSupportedException&gt;é gerada se o item de trabalho não foi possível enfileirar.&lt;/xref:System.NotSupportedException&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">O common language runtime (CLR) está hospedado, e o host não dá suporte a esta ação.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um inteiro assinado de 32 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">O método RegisterWaitForSingleObject enfileira o delegado especificado para o pool de threads.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Um thread de trabalho será executado o delegado quando ocorre um dos seguintes:-o objeto especificado está no estado sinalizado.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-O intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">O método RegisterWaitForSingleObject verifica o estado atual do objeto especificado &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se o estado do objeto for sinalizado, o método registra uma operação de espera.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">A operação de espera é executada por um thread do pool de threads.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">O representante é executado por um thread de trabalho quando o estado do objeto se torna sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se o <ph id="ph1">`timeOutInterval`</ph> parâmetro não é 0 (zero) e o <ph id="ph2">`executeOnlyOnce`</ph> parâmetro é <ph id="ph3">`false`</ph>, ele é zerado sempre que o evento é sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph2">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Em vez de um &lt;xref:System.Threading.Mutex&gt;, use um &lt;xref:System.Threading.Semaphore&gt;com uma contagem máxima de 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Para cancelar a operação de espera, chame o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">O thread de espera usa o Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> função para monitorar as operações de espera registrado.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Portanto, se você deve usar o mesmo identificador de sistema operacional nativo em várias chamadas para RegisterWaitForSingleObject, você deverá duplicar o identificador do Win32 <ph id="ph1">`DuplicateHandle`</ph> função.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Observe que você não deve pulso um objeto de evento passado para RegisterWaitForSingleObject, porque o thread de espera pode não detectar que o evento é sinalizado antes que ela seja redefinida.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Antes de retornar, a função modifica o estado de alguns tipos de objetos de sincronização.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificação ocorre somente para o objeto cujo estado sinalizado causou a condição de espera ser atendida.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por exemplo, a contagem de um semáforo é reduzida por um.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Informações de versão iniciando com o .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> delegado para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">O objeto que é passado para o delegado.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que encapsula o identificador nativo.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um inteiro assinado de 64 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">O método RegisterWaitForSingleObject enfileira o delegado especificado para o pool de threads.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Um thread de trabalho será executado o delegado quando ocorre um dos seguintes:-o objeto especificado está no estado sinalizado.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-O intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">O método RegisterWaitForSingleObject verifica o estado atual do objeto especificado &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se o estado do objeto for sinalizado, o método registra uma operação de espera.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">A operação de espera é executada por um thread do pool de threads.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">O representante é executado por um thread de trabalho quando o estado do objeto se torna sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se o <ph id="ph1">`timeOutInterval`</ph> parâmetro não é 0 (zero) e o <ph id="ph2">`executeOnlyOnce`</ph> parâmetro é <ph id="ph3">`false`</ph>, ele é zerado sempre que o evento é sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph2">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Em vez de um &lt;xref:System.Threading.Mutex&gt;, use um &lt;xref:System.Threading.Semaphore&gt;com uma contagem máxima de 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Para cancelar a operação de espera, chame o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">O thread de espera usa o Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> função para monitorar as operações de espera registrado.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Portanto, se você deve usar o mesmo identificador de sistema operacional nativo em várias chamadas para RegisterWaitForSingleObject, você deverá duplicar o identificador do Win32 <ph id="ph1">`DuplicateHandle`</ph> função.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Observe que você não deve pulso um objeto de evento passado para RegisterWaitForSingleObject, porque o thread de espera pode não detectar que o evento é sinalizado antes que ela seja redefinida.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Antes de retornar, a função modifica o estado de alguns tipos de objetos de sincronização.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificação ocorre somente para o objeto cujo estado sinalizado causou a condição de espera ser atendida.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por exemplo, a contagem de um semáforo é reduzida por um.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Informações de versão iniciando com o .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> delegado para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">O objeto passado para o delegado.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que encapsula o identificador nativo.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um &lt;xref:System.TimeSpan&gt;valor para o tempo limite.&lt;/xref:System.TimeSpan&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">O método RegisterWaitForSingleObject enfileira o delegado especificado para o pool de threads.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Um thread de trabalho será executado o delegado quando ocorre um dos seguintes:-o objeto especificado está no estado sinalizado.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-O intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">O método RegisterWaitForSingleObject verifica o estado atual do objeto especificado &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se o estado do objeto for sinalizado, o método registra uma operação de espera.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">A operação de espera é executada por um thread do pool de threads.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">O representante é executado por um thread de trabalho quando o estado do objeto se torna sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se o <ph id="ph1">`timeOutInterval`</ph> parâmetro não é 0 (zero) e o <ph id="ph2">`executeOnlyOnce`</ph> parâmetro é <ph id="ph3">`false`</ph>, ele é zerado sempre que o evento é sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph2">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Em vez de um &lt;xref:System.Threading.Mutex&gt;, use um &lt;xref:System.Threading.Semaphore&gt;com uma contagem máxima de 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Para cancelar a operação de espera, chame o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">O thread de espera usa o Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> função para monitorar as operações de espera registrado.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Portanto, se você deve usar o mesmo identificador de sistema operacional nativo em várias chamadas para RegisterWaitForSingleObject, você deverá duplicar o identificador do Win32 <ph id="ph1">`DuplicateHandle`</ph> função.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Observe que você não deve pulso um objeto de evento passado para RegisterWaitForSingleObject, porque o thread de espera pode não detectar que o evento é sinalizado antes que ela seja redefinida.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Antes de retornar, a função modifica o estado de alguns tipos de objetos de sincronização.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificação ocorre somente para o objeto cujo estado sinalizado causou a condição de espera ser atendida.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por exemplo, a contagem de um semáforo é reduzida por um.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Informações de versão iniciando com o .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> delegado para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">O objeto passado para o delegado.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">O tempo limite representado pelo &lt;xref:System.TimeSpan&gt;.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se <ph id="ph1">`timeout`</ph> for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`timeout`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que encapsula o identificador nativo.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro for maior que <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um inteiro não assinado de 32 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method queues the specified delegate to the thread pool.</source>
          <target state="translated">O &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método enfileira o delegado especificado para o pool de threads.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Um thread de trabalho será executado o delegado quando ocorre um dos seguintes:-o objeto especificado está no estado sinalizado.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-O intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">O &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método verifica o estado atual do objeto especificado &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt; &lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se o estado do objeto for sinalizado, o método registra uma operação de espera.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">A operação de espera é executada por um thread do pool de threads.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">O representante é executado por um thread de trabalho quando o estado do objeto se torna sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se o <ph id="ph1">`timeOutInterval`</ph> parâmetro não é 0 (zero) e o <ph id="ph2">`executeOnlyOnce`</ph> parâmetro é <ph id="ph3">`false`</ph>, ele é zerado sempre que o evento é sinalizado ou o intervalo de tempo limite expira.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph2">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Em vez de um &lt;xref:System.Threading.Mutex&gt;, use um &lt;xref:System.Threading.Semaphore&gt;com uma contagem máxima de 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Para cancelar a operação de espera, chame o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">O thread de espera usa o Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> função para monitorar as operações de espera registrado.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Portanto, se você deve usar o mesmo identificador de sistema operacional nativo em diversas chamadas para &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, você deverá duplicar o identificador usando o Win32 <ph id="ph1">`DuplicateHandle`</ph> função.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Observe que você não deve pulso passado para um objeto de evento &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, porque o thread de espera pode não detectar que o evento é sinalizado antes que ela seja redefinida.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Antes de retornar, a função modifica o estado de alguns tipos de objetos de sincronização.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificação ocorre somente para o objeto cujo estado sinalizado causou a condição de espera ser atendida.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por exemplo, a contagem de um semáforo é reduzida por um.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Informações de versão iniciando com o .NET Framework versão 2.0, o &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;o valor da propriedade é propagado para threads de trabalho em fila usando o &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Em versões anteriores, as informações de entidade não são propagadas.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> delegado para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">O objeto passado para o delegado.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to cancel the registered wait operation.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que pode ser usado para cancelar a operação de espera registrado.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Define o número de solicitações para o pool de threads que pode estar ativo simultaneamente.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Todas as solicitações acima desse número permanecem na fila até que os threads de pool se tornam disponível.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">Você não pode definir o número máximo de threads de trabalho ou threads de conclusão de e/s para um número menor que o número de processadores no computador.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine how many processors are present, retrieve the value of the &lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">Para determinar quantos processadores estão presentes, recuperar o valor da &lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;propriedade.&lt;/xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">Além disso, você não pode definir o número máximo de threads de trabalho ou threads de conclusão de e/s para um número menor que o número correspondente de mínimo de threads de trabalho ou threads de conclusão de e/s.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the minimum thread pool size,  call the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method.</source>
          <target state="translated">Para determinar o tamanho do pool de threads mínimo, chame o &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;método.&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">Se o common language runtime está hospedado, por exemplo, serviços de informações da Internet (IIS) ou SQL Server, o host pode limitar ou impedir alterações para o tamanho do pool de threads.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">Tenha cuidado ao alterar o número máximo de threads no pool de threads.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">Enquanto seu código pode se beneficiar, as alterações podem ter um efeito adverso em bibliotecas de código que você usa.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">Definir o tamanho do pool de threads muito grande pode causar problemas de desempenho.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">Se muitos threads estão em execução ao mesmo tempo, a alternância de tarefa sobrecarga se torna um fator importante.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">O número máximo de threads de trabalho no pool de threads.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">O número máximo de threads de e/s assíncronas no pool de threads.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se a alteração for bem-sucedida; Caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Define o número mínimo de threads que do pool de threads cria sob demanda, as novas solicitações são feitas, antes de alternar para um algoritmo para gerenciar a destruição e criação de threads.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">O pool de threads fornece novos threads de trabalho ou threads de conclusão de e/s sob demanda até atingir o mínimo para cada categoria.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando o mínimo for atingido, o pool de threads pode criar threads adicionais nessa categoria ou aguarde até que algumas tarefas são concluídas.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Começando com o <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, o pool de threads cria e destrói threads para otimizar a taxa de transferência, que é definida como o número de tarefas que são concluídas por unidade de tempo.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Há muito poucos threads não podem fazer uso ideal dos recursos disponíveis, enquanto muitos threads podem aumentar a contenção de recursos.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quando a demanda for baixa, o número real de threads de pool pode ficar abaixo os valores mínimos.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;), SetMinThreads returns <ph id="ph1">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">Se você especificar um número negativo ou um número maior que o número máximo de threads de pool de thread ativo (obtidos usando &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;), retorna SetMinThreads <ph id="ph1">`false`</ph> e não altera qualquer um dos valores mínimo.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Por padrão, o número mínimo de threads é definido como o número de processadores em um sistema.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the SetMinThreads method to increase the minimum number ofthreads.</source>
          <target state="translated">Você pode usar o método SetMinThreads para aumentar a ofthreads número mínimo.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">No entanto, esses valores de aumento desnecessariamente podem causar problemas de desempenho.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Se iniciam muitas tarefas ao mesmo tempo, todos eles podem parecer ser lenta.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Na maioria dos casos, o pool de threads terão um desempenho melhor com seu próprio algoritmo para alocar threads.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">Reduzindo o mínimo menor que o número de processadores também pode prejudicar o desempenho.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">O número mínimo de threads de trabalho que cria o pool de threads sob demanda.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">O número mínimo de threads de e/s assíncronas que cria o pool de threads sob demanda.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se a alteração for bem-sucedida; Caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">Enfileira uma operação de e/s sobreposta para execução.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about using native Win32 overlapped I/O, see the &lt;xref:System.Threading.Overlapped&gt; class, the &lt;xref:System.Threading.NativeOverlapped&gt; structure, and the <ph id="ph1">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">Para obter informações sobre como usar o Win32 nativo sobreposto e/s, consulte o &lt;xref:System.Threading.Overlapped&gt;classe, o &lt;xref:System.Threading.NativeOverlapped&gt;estrutura e o <ph id="ph1">`OVERLAPPED`</ph> estrutura no SDK da plataforma Win32.&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.Threading.Overlapped&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafeQueueNativeOverlapped method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Usando o UnsafeQueueNativeOverlapped método inadvertidamente foi possível abrir a uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeQueueNativeOverlapped, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeQueueNativeOverlapped, a pilha do thread do pool não tem o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to queue.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> estrutura à fila.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the operation was successfully queued to an I/O completion port; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se a operação foi enfileirada com êxito em uma porta de conclusão de e/s; Caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Enfileira o delegado especificado para o pool de threads, mas não se propaga a pilha de chamada para o thread de trabalho.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method, UnsafeQueueUserWorkItem does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ao contrário de &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;método, UnsafeQueueUserWorkItem não propaga a pilha de chamada para o thread de trabalho.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Isso permite que o código com que percam a pilha de chamada e, portanto, para elevar seus privilégios de segurança.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeQueueUserWorkItem could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeQueueUserWorkItem usando inadvertidamente pode abrir uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeQueueUserWorkItem, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeQueueUserWorkItem, a pilha do thread do pool não terá o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">Um <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que representa o delegado a ser invocado quando um thread no pool de threads seleciona o item de trabalho.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">O objeto que é passado para o delegado quando a manutenção do pool de threads.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method succeeds; &lt;xref:System.OutOfMemoryException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o método for bem-sucedido; &lt;xref:System.OutOfMemoryException&gt;é gerada se o item de trabalho não foi possível enfileirar.&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">Encontrou uma condição de falta de memória.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The work item could not be queued.</source>
          <target state="translated">Não foi possível enfileirar o item de trabalho.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, usando um inteiro assinado de 32 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Esse método não propaga a pilha de chamada para o thread de trabalho.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ao contrário de &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método, UnsafeRegisterWaitForSingleObject não propaga a pilha de chamada para o thread de trabalho.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Isso permite que o código com que percam a pilha de chamada e, portanto, para elevar seus privilégios de segurança.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject usando inadvertidamente pode abrir uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeRegisterWaitForSingleObject, a pilha do thread do pool não terá o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph1">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O representante para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">O objeto que é passado para o delegado.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objeto que pode ser usado para cancelar a operação de espera registrado.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um inteiro assinado de 64 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Esse método não propaga a pilha de chamada para o thread de trabalho.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ao contrário de &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método, UnsafeRegisterWaitForSingleObject não propaga a pilha de chamada para o thread de trabalho.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Isso permite que o código com que percam a pilha de chamada e, portanto, para elevar seus privilégios de segurança.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject usando inadvertidamente pode abrir uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeRegisterWaitForSingleObject, a pilha do thread do pool não terá o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph1">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O representante para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">O objeto que é passado para o delegado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objeto que pode ser usado para cancelar a operação de espera registrado.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um &lt;xref:System.TimeSpan&gt;valor para o tempo limite.&lt;/xref:System.TimeSpan&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Esse método não propaga a pilha de chamada para o thread de trabalho.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ao contrário de &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método, UnsafeRegisterWaitForSingleObject não propaga a pilha de chamada para o thread de trabalho.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Isso permite que o código com que percam a pilha de chamada e, portanto, para elevar seus privilégios de segurança.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject usando inadvertidamente pode abrir uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeRegisterWaitForSingleObject, a pilha do thread do pool não terá o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph1">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O representante para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">O objeto que é passado para o delegado.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">O tempo limite representado pelo &lt;xref:System.TimeSpan&gt;.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se <ph id="ph1">`timeout`</ph> for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`timeout`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objeto que pode ser usado para cancelar a operação de espera registrado.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro é menor que -1.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated">O <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> parâmetro for maior que <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra um delegado para aguardar um &lt;xref:System.Threading.WaitHandle&gt;, especificando um inteiro não assinado de 32 bits para o tempo limite em milissegundos.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Esse método não propaga a pilha de chamada para o thread de trabalho.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ao contrário de &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;método, UnsafeRegisterWaitForSingleObject não propaga a pilha de chamada para o thread de trabalho.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Isso permite que o código com que percam a pilha de chamada e, portanto, para elevar seus privilégios de segurança.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject usando inadvertidamente pode abrir uma falha de segurança.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Segurança de acesso ao código baseia suas verificações de permissão sobre as permissões de todos os chamadores na pilha.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando o trabalho está em fila em um pool de threads usando UnsafeRegisterWaitForSingleObject, a pilha do thread do pool não terá o contexto de chamadores reais.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código mal-intencionado poderá explorar isso para evitar verificações de permissão.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Usando um &lt;xref:System.Threading.Mutex&gt;para <ph id="ph1">`waitObject`</ph> não fornece exclusão mútua para os retornos de chamada porque a API do Win32 subjacente usa o padrão <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> sinalizador, para cada retorno de chamada é enviado em um thread separado do pool.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Quando tiver terminado com o &lt;xref:System.Threading.RegisteredWaitHandle&gt;que é retornado por esse método, chame seu &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método para liberar referências para o identificador de espera.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">É recomendável que você sempre chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método, mesmo se você especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Coleta de lixo funciona mais de forma eficaz se você chamar o &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;método em vez de dependendo finalizador do identificador de espera registrado.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">O &lt;xref:System.Threading.WaitHandle&gt;para registrar.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Usar um &lt;xref:System.Threading.WaitHandle&gt;diferente &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">O representante para chamar quando o <ph id="ph1">`waitObject`</ph> parâmetro é sinalizado.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">O objeto que é passado para o delegado.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">O tempo limite em milissegundos.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se o <ph id="ph1">`millisecondsTimeOutInterval`</ph> parâmetro for 0 (zero), a função testa o estado do objeto e retorna imediatamente.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <ph id="ph1">`millisecondsTimeOutInterval`</ph> é -1, o intervalo de tempo limite da função nunca expira.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>para indicar que o thread não aguardará a <ph id="ph1">`waitObject`</ph> parâmetro depois que o representante foi chamado; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> para indicar que ele é zerado sempre que a operação de espera é concluída até que a espera não está registrada.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">O <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objeto que pode ser usado para cancelar a operação de espera registrado.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">O chamador não tem a permissão necessária.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>