<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51a0d5ce91f2a5965601d5393328e3271f62cda2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0178b1f2a3c59ca8bd08cf7f0849f6e5924d039</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6316eb7a14139e3850c25c65a9b2cfcf556f0720</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes an object to a new type.</source>
          <target state="translated">Serializa um objeto para um novo tipo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TypeCodeDomSerializer class performs the same tasks as a &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, but serializing an object through this class defines a new type.</source>
          <target state="translated">A classe TypeCodeDomSerializer realiza as mesmas tarefas que um &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, mas serializar um objeto por meio dessa classe define um novo tipo.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Inicializa uma nova instância do <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Deserializes the given type declaration.</source>
          <target state="translated">Desserializa a declaração de tipo em questão.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Deserialize method deserializes a previously serialized code type declaration.</source>
          <target state="translated">O método Deserialize desserializa uma declaração de tipo de código anteriormente serializado.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the tasks default implementation performs.</source>
          <target state="translated">A tabela a seguir mostra que a implementação do padrão de tarefas executa.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Task|Description|   |----------|-----------------|   |Case Sensitivity Checks|The implementation searches for a &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; service to decide if it should treat members as case sensitive or case insensitive.|   |Statement Sorting|All member variables and local variables from init methods are stored in a table.</source>
          <target state="translated">| Tarefa | Descrição |   |----------|-----------------|   | Caso as verificações de confidencialidade | A implementação procura por um serviço de &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;decidir se ele deve tratar membros como maiusculas e minúsculas ou maiusculas de minúsculas. |   | Classificação de instrução | Todas as variáveis de membro e variáveis locais de métodos de inicialização são armazenadas em uma tabela.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</source>
          <target state="translated">Em seguida, cada instrução em um método de inicialização é adicionada a uma coleção de instrução agrupada de acordo com seu lado esquerdo, para que todas as instruções de atribuição ou operando em uma determinada variável são agrupadas sob essa variável.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Variables that have no statements are discarded.|   |Deserialization|The statement collections for each variable are deserialized according to the variable.|       The following table shows the services the Deserialize method requires.</source>
          <target state="translated">Variáveis com nenhuma instrução são descartadas. |   | Desserialização | As coleções de instrução para cada variável são desserializadas de acordo com a variável. |       A tabela a seguir mostra os serviços que o método Deserialize requer.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Service|Description|   |-------------|-----------------|   |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.|   |&lt;xref:System.ComponentModel.IContainer&gt;|If an object does not exist in the name table during deserialization, a query for &lt;xref:System.ComponentModel.IContainer&gt; is made.</source>
          <target state="translated">| Serviço | Descrição |   |-------------|-----------------|   | &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;| Enquanto não é estritamente necessária, o serviço, se disponível, é usado para determinar se a serialização deve ser entre maiusculas e minúsculas ou maiusculas de minúsculas. |   | &lt;xref:System.ComponentModel.IContainer&gt;| Se um objeto não existe na tabela de nome durante a desserialização, uma consulta para &lt;xref:System.ComponentModel.IContainer&gt;é feita.&lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this query succeeds, the container is checked for the object.</source>
          <target state="translated">Se esta consulta for bem-sucedida, o contêiner é verificado para o objeto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The container is also used as a stand-in for any container argument needed by components.|</source>
          <target state="translated">O contêiner também é usado como um substituto para um argumento de contêiner necessário pelos componentes. |</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">O Gerenciador de serialização a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type declaration to use for serialization.</source>
          <target state="translated">Tipo de declaração a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The root object.</source>
          <target state="translated">O objeto raiz.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the method where statements used to serialize a member are stored.</source>
          <target state="translated">Retorna o método de armazenamento de instruções usadas para serializar um membro.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetInitializeMethod method returns the method to emit all of the initialization code for the given member.</source>
          <target state="translated">O método GetInitializeMethod retorna o método para emitir todo o código de inicialização para o membro especificado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns an empty constructor.</source>
          <target state="translated">A implementação padrão retorna um construtor vazio.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the same method is to be returned for multiple values, the same instance of the method should be returned.</source>
          <target state="translated">Se for o mesmo método a ser retornado para vários valores, a mesma instância do método deve ser retornada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt; dictionary to remember methods you have created.</source>
          <target state="translated">Você pode usar o &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;dicionário lembrar métodos que você criou.&lt;/xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`typeDecl`</ph> parameter can also be used to add infrastructure methods.</source>
          <target state="translated">O <ph id="ph1">`typeDecl`</ph> parâmetro também pode ser usado para adicionar métodos de infraestrutura.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</source>
          <target state="translated">Por exemplo, se você quiser emitir um método separado para cada objeto, você precisa de um único método que chama todos esses métodos de.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be added to the code type declaration as needed.</source>
          <target state="translated">Esse método pode ser adicionado à declaração de tipo de código, conforme necessário.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">O Gerenciador de serialização a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">O tipo de declaração a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value to use for serialization.</source>
          <target state="translated">O valor a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method used to emit all of the initialization code for the given member.</source>
          <target state="translated">O método usado para emitir todo o código de inicialização para o membro especificado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an array of methods to be interpreted during deserialization.</source>
          <target state="translated">Retorna uma matriz de métodos para serem interpretados durante a desserialização.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a single-element array with the constructor in it.</source>
          <target state="translated">A implementação padrão retorna uma matriz de elemento único com o construtor nele.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">O Gerenciador de serialização a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">O tipo de declaração a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array of methods to be interpreted during deserialization.</source>
          <target state="translated">Um <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> matriz de métodos para serem interpretados durante a desserialização.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Serializes the object root by creating a new type declaration that defines root.</source>
          <target state="translated">Serializa a raiz do objeto, criando uma nova declaração de tipo que define a raiz.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Serialize method serializes the given root object and optional collection of members to create a new type definition.</source>
          <target state="translated">O método Serialize serializa o objeto raiz específico e a coleção opcional de membros para criar uma nova definição de tipo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`members`</ph> collection contains values, these values are serialized.</source>
          <target state="translated">Se o <ph id="ph1">`members`</ph> coleção contém valores, esses valores são serializados.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values themselves may serialize as either member variables or local variables.</source>
          <target state="translated">Próprios valores podem serializar como variáveis de membro ou variáveis locais.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This determination is done by searching for an extender property on the object called <ph id="ph1">`GenerateMember`</ph>.</source>
          <target state="translated">Essa determinação é feita por meio de pesquisa para uma propriedade de extensão no objeto chamado <ph id="ph1">`GenerateMember`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, a member is generated.</source>
          <target state="translated">Se <ph id="ph1">`true`</ph>, um membro é gerado.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, a local variable is generated.</source>
          <target state="translated">Caso contrário, uma variável local é gerada.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, the <ph id="ph1">`members`</ph> collection can contain the root object.</source>
          <target state="translated">Para sua conveniência, o <ph id="ph1">`members`</ph> coleção pode conter o objeto raiz.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the root object is not also added as a member or local variable.</source>
          <target state="translated">Nesse caso, o objeto raiz também não é adicionado como um membro ou uma variável local.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the returned type is taken from the root object’s name, if it was a named object.</source>
          <target state="translated">O nome do tipo retornado é obtido do nome do objeto raiz, se fosse um objeto nomeado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, a name is fabricated from the simple type name of the root class.</source>
          <target state="translated">Caso contrário, um nome é gerado do nome do tipo simples da classe raiz.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the tasks performed by the default implementation of the Serialize method.</source>
          <target state="translated">A tabela a seguir mostra as tarefas executadas pela implementação padrão do método de serialização.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Task|Description|   |----------|-----------------|   |Context Seeding|The serialization context is initialized with data including the &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt; and &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   |Member Serialization|Next, Serialize walks all of the members and calls &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.</source>
          <target state="translated">| Tarefa | Descrição |   |----------|-----------------|   | A propagação do contexto | O contexto de serialização é inicializado com dados, incluindo o &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;e &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   | Serialização de membro | Em seguida, serializar percorre todos os membros e chamadas &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because serialization is done opportunistically in &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, this ensures that serialization is not done twice.|   |Root Serialization|Next, the root object is serialized and its statements are added to the statement collection.|   |Statement Integration|After all objects are serialized, the Serialize method orders the statements and adds them to a method returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.</source>
          <target state="translated">Como a serialização é feita oportunamente no &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, isso garante que os serialização não é feita de duas vezes. |   | Serialização de raiz | Em seguida, o objeto raiz é serializado e suas instruções são adicionadas à coleção de instrução. |   | Integração de instrução | Depois que todos os objetos são serializados, o método Serialize ordena as instruções e os adiciona a um método retornado de &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt; &lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Finally, a constructor is fabricated that calls all of the methods returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.|      -       The following table shows the objects the Serialize method places on the context stack.</source>
          <target state="translated">Por fim, um construtor é gerado que chama todos os métodos retornados de &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;. |      -A tabela a seguir mostra os locais de método serializar os objetos na pilha de contexto.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Instance|Description|   |--------------|-----------------|   |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|This serializer.</source>
          <target state="translated">| Instância | Descrição |   |--------------|-----------------|   | &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;| Este serializador.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Deriving classes may find it useful to add public properties to this class.|   |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|The type being created.</source>
          <target state="translated">Derivando de classes pode ser útil para adicionar propriedades públicas para essa classe. |   | &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;| O tipo que está sendo criado.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most objects do not need direct access to this.|</source>
          <target state="translated">A maioria dos objetos não precisam de acesso direto a este. |</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">O Gerenciador de serialização a ser usado para serialização.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">O objeto a ser serializado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optional collection of members.</source>
          <target state="translated">Coleção opcional de membros.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or empty.</source>
          <target state="translated">Pode ser <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ou vazio.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that defines the root object.</source>
          <target state="translated">Um <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> que define o objeto raiz.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>