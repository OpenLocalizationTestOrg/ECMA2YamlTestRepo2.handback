<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94cfc43b061383f99108538f95cf073a12ce7bd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">Udostępnia klasę podstawową dla typu pochodnego niestandardowego, który monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">Klasa ChangeMonitor jest używana jako klasa podstawowa dla klasy pochodnej monitor, które są przeznaczone do pamięci podręcznej konkretnej implementacji.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">Wystąpienie ChangeMonitor monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">Na przykład element może być jednostki pliku lub danych, których zawartość są buforowane.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">Jednostka danych lub plik jest aktualizowany, również należy zmienić wpis pamięci podręcznej skojarzone.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">Wspólne elementy, które mogą być monitorowane Dołącz jednostek danych (np. pola bazy danych wartości, wierszy i tabele), inny wpis pamięci podręcznej i pliki i atrybutów pliku.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">Zmiany w stanie zależność jest zmiany zależności.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">W implementacji typowe pamięci podręcznej po wystąpienia ChangeMonitor powiadamia pamięci podręcznej, która zmieniła się zależność, pamięci podręcznej wykonuje wymaganych akcji, na przykład unieważnia wpisu pamięci podręcznej wstawionego.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">Klasy pochodne ChangeMonitor można dostosować, aby monitorować zmiany zależności dla określonych danych do różnych magazynów.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">Na przykład są implementacje pamięć podręczna systemu plików, w pamięci fizycznej lub bazy danych.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">Klasa ChangeMonitor sprawdza zmiany wprowadzone poza pamięci podręcznej, a następnie powiadamia pamięci podręcznej, które nastąpiły zmiany.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Zawiera następujące klasy, które pochodzi z klasy ChangeMonitor:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;każda z tych klas działa z różnymi typami zależności.&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">Na przykład pochodnej &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;Klasa śledzi zmiany w pamięci podręcznej danych systemu plików (pliki i foldery), która zależy od elementu pamięci podręcznej.&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasy.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych w celu zainicjowania klasy podstawowej.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;Klasa ma konstruktora domyślnego.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">Jednak klasy które dziedziczą z podstawowym &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;klasy i Zdefiniuj niestandardowe monitorowanie zmian zachowania, należy wykonać inicjowania w konstruktorze.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów dziedziczących sekcji.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Zwalnia wszystkie zasoby, które są używane przez bieżące wystąpienie klasy <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasy.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">Wywołuje metodę Dispose &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metody klas pochodnych tylko jeden raz, jest ona wywoływana po raz pierwszy.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">Kolejne wywołania metody Dispose nie obowiązują.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Po wywołaniu metody &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;właściwość jest ustawiona na <ph id="ph1">`true`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;Przeciążenia musi zostać wywołana zlikwidować &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Poniżej przedstawiono reguły wywoływania metody dispose:-przed wstawieniem elementu do pamięci podręcznej, jest odpowiedzialny za wywołującej do rozporządzania &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">-Raz elementu pamięci podręcznej i &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej, który należy się upewnić, że &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;jest wywoływana, nawet jeśli insert nie powiedzie się.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">— Po elementu i jego skojarzony &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ podczas &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;Metoda jest wywoływana, wywołanie jest traktowane jakby zależność została zmieniona.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">W związku z tym &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;Metoda jest wywoływana automatycznie.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-Biorąc pod uwagę, te reguły &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;Metoda musi zostać wywołana w jednym z następujących sposobów:-użytkowników należy wywołać przeciążenie metody Dispose, jeśli nie wstawić wystąpienia pochodne monitor zmianach do pamięci podręcznej.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">Implementacja pamięć podręczna jest odpowiedzialny za wywołania przeciążenia metody Dispose, jeśli implementacja próbuje wstawić wystąpienia monitora zmiany do obiektu pamięci podręcznej, ale wstawiania nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">Podczas próby wstawienia powoduje zgłoszenie wyjątku, implementację buforu musi dysponować skojarzone zależności.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">— Jeśli wpis pamięci podręcznej zostanie usunięty, implementację buforu musi również dysponować zależności.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Wewnętrzny wykonania &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;automatycznie wywołuje metodę &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;zarejestrowany przez metodę po wywołuje wywołania zwrotnego &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Tego automatycznego usuwania podczas uruchamiania zdarzeń tylko wtedy, gdy inicjowanie &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia wcześniej zakończone.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">Gdy monitor pochodnej zmiany Konstruktor wywołuje &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metody, jeśli już zmieniła stan monitora zmiany (to znaczy, stan, który jest monitorowany już zmieniona po konstruktora było nadal aktywne) następnie &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metody automatycznie zlikwiduje monitor zmianach.&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Użytkowników nie powinien wywoływać metodę Dispose.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">Nie można jednak zapobiec wywołanie metody.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">W związku z tym, jeśli nie, &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;wywołania metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">W takim przypadku wpis pamięci podręcznej jest powiadamiany o tak, jakby zależność została zmieniona.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">Aby uniemożliwić przesłanianie metody Dispose klasy pochodne, metoda nie jest jawnej implementacji interfejsu.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">Inicjowanie nie zostało zakończone w klasie pochodnej monitor zmianach wywołać podstawową metodę Dispose.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">Zwalnia wszystkie zasoby zarządzane i niezarządzane, a wszelkie odwołania do <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wystąpienia.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">To przeciążenie musi być implementowana przez klasy pochodnej monitor zmianach.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">`disposing`</ph> wartość jest <ph id="ph2">`true`</ph>, wszystkie zasoby zarządzane i niezarządzane są usuwane i wszelkie odwołania do tego obiektu są wydawane, aby umożliwić wystąpienia pochodne monitor zmianach bezużytecznych.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">Jest on gwarancję, że podstawowym &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;Metoda wywoła implementowana metoda Dispose tylko jeden raz.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby zwolnić zasoby zarządzane i niezarządzane, a wszelkie odwołania do <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> wystąpienia; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> aby zwolnić tylko zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">Gdy <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> jest przekazywany Dispose metoda jest wywoływana przez <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> wątku i zewnętrznych odwołań zarządzanych prawdopodobnie nie jest już prawidłowe, ponieważ są one już bezużytecznych.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">Pobiera wartość, która wskazuje, że stan, który jest monitorowany przez <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasa uległa zmianie.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">Możesz sprawdzić wartość tej właściwości w pochodnym &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;klasy, aby zobaczyć, czy zależność została zmieniona.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">Wartość jest równa <ph id="ph1">`true`</ph> gdy nastąpi zmiana zależności (oznacza to, gdy &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;Metoda jest wywoływana).&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Po &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;Metoda jest wywoływana przez klasy pochodnej, wartość właściwości HasChanged będzie <ph id="ph1">`true`</ph>, niezależnie od tego, czy &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;wystąpienia została powiadomiona, przez wywołanie do &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Wywołań można sprawdzić właściwość HasChanged w celu sprawdzenia, czy zależność została zmieniona.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">Jednak w środowisku wielowątkowych prostszy i więcej łatwy w obsłudze podejście jest do wstawiania danych do implementacji pamięci podręcznej bez sprawdzania, czy właściwość HasChanged.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">Implementacje pamięci podręcznej musi sprawdzić właściwość HasChanged i nie może wykonywać operacji insert ani operacji zestawu, jeśli zmienione zostały już co najmniej jeden skojarzone zależności.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli stan, który jest monitorowany przez <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> wystąpienia został zmieniony; w przeciwnym razie <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">Wywoływana z konstruktora klasy pochodne wskazująca, że ten Inicjowanie zostało zakończone.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">W przypadku zależności zmiany przed zakończeniem inicjowania w klasie pochodnej, musi wywoływać konstruktora klasy pochodnej &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">Gdy &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;wywołaniu metody &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;jest automatycznie ustawiana właściwość <ph id="ph1">`true`</ph> przez monitor zmiany.&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">W związku z tym, gdy monitor zmianach Konstruktor wywołuje metodę InitializationComplete, klasa podstawowa automatycznie wywoła &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">Jeśli Inicjowanie zostało zakończone, &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metody automatycznie usuwa wystąpienia pochodne monitor zmianach.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">Pobiera wartość określającą, czy wystąpienia pochodne <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasa zostanie usunięty.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">Właściwość jest ustawiona na <ph id="ph1">`true`</ph> po podstawowym &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;wywołania metody &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metody w klasie pochodnej można zlikwidować wystąpienia.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli wystąpienie zostanie usunięty; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">Wywoływane przez implementacje pamięci podręcznej zarejestrować wywołania zwrotnego i powiadomienie <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wystąpienie za pośrednictwem <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> delegowanie, gdy zmieniono zależności.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">Implementacje pamięci podręcznej umożliwia połączenie się monitor zmiany do tej metody.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">W przypadku skojarzyć jedną lub więcej zmienić monitorów z elementu pamięci podręcznej, należy przekazać &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;wystąpienia z właściwością monitorów wypełnione zmiany do elementu pamięci podręcznej.&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">Realizator pamięci podręcznej, że obsługuje zmienić monitorów jest odpowiedzialny za Iterowanie po &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;Właściwości i rejestrowanie &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;obiektów delegowanych z każdym zmienić monitor, który znajdzie.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">Ponieważ &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegata zawiera parametr opcjonalny stanu, implementacja monitor konkretnych zmiany można przekazać informacji o stanie opcjonalne.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">Realizator pamięci podręcznej określa, czy należy podjąć jawne zależności od typu stanu monitora zmiany przekazywany jako część wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Podstawowy pamięci podręcznej rozszerzeń interfejsu API nie ma wymagań dotyczących jawne zależności od typu stanu.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">Implementacja metody NotifyOnChanged automatycznie określa, czy stan monitora już został zmieniony w czasie, gdy zostanie wywołana metoda NotifyOnChanged.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Jeśli &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;właściwość jest <ph id="ph1">`true`</ph>, a następnie automatycznie wywołuje metodę &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;program obsługi zdarzeń, który został zarejestrowany za pomocą &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">Dzieje się tak, ponieważ jest to możliwe, że od czasu implementację buforu tworzy monitorem zmiany czasu implementację buforu pobiera monitora i wiążący sam maksymalnie, podstawowy stan monitorowanych została zmieniona.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Jeśli stan został już zmieniony następnie obiekt, który jest przekazywany do &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;jest metoda <ph id="ph1">`null`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">Metoda NotifyOnChanged można wywołać tylko raz i spowoduje zgłoszenie wyjątku w kolejnych wywołaniach.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">Odwołanie do metody, które jest wywoływane, gdy zmieniono zależność.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">Metoda wywołania zwrotnego został już wywołany.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">Metoda wywoływana przez klasy pochodne, aby zgłosić zdarzenie, gdy zostanie zmieniona zależności.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">Zazwyczaj wywoływana jest metoda OnChanged, w przypadku wystąpienia zmian zależności.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">Metoda OnChanged również jest wywoływane, gdy wystąpienie Monitora zmiany zostanie usunięty, ale usuwania występuje tylko wtedy, gdy nie ma już wywołać metodę wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">Jeśli metoda OnChanged jest wywoływana przed &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;Metoda jest wywoływana, dane o stanie z wywołania metody OnChanged zostanie zapisana przez implementację pamięci podręcznej.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Ponadto wywołanie zwrotne do &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;Metoda jest wywoływana natychmiast po &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;wywołania metody.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">Dane zdarzenia zmiany.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Ta wartość może być <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">Pobiera wartość, która reprezentuje <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wystąpienie klasy.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Wartość właściwości UniqueId zazwyczaj składa się z danych dotyczących ciągu nazwy łączyć zależności który jednoznacznie identyfikatory danych, który jest monitorowany przez &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">Wartość właściwości UniqueId jest ciągiem.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Wartość ciągu można przypisywać unikatowy identyfikator &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;wystąpienia.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">Identyfikator wystąpienia zmiany monitora.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>