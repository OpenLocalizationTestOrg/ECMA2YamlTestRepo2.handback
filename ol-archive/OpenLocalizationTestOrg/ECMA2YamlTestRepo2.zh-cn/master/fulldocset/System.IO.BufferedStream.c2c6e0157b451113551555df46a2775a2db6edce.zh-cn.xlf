<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">869e2d13071ffdd5c6fbb3cdaec0c6cbfba8ffe0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.IO.BufferedStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30ffa020e95f88d749a4c4b94885b0ba7d1370ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">578f042a0dadbb4176f263189037db06eac6b3e9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adds a buffering layer to read and write operations on another stream.</source>
          <target state="translated">添加缓冲层以读取和写入另一个流上的操作。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a default buffer size of 4096 bytes.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>默认缓冲区大小 （4096 字节） 的类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">共享的读/写缓冲区分配第一次<ph id="ph1">`BufferedStream`</ph>使用此构造函数初始化对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">如果所有读取和写入都都大于或等于，则不会使用共享的缓冲<ph id="ph1">`bufferSize`</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The current stream.</source>
          <target state="translated">当前流中。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified buffer size.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类具有指定的缓冲区大小。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">共享的读/写缓冲区分配第一次<ph id="ph1">`BufferedStream`</ph>使用此构造函数初始化对象。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">如果所有读取和写入都都大于或等于，则不会使用共享的缓冲<ph id="ph1">`bufferSize`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The current stream.</source>
          <target state="translated">当前流中。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The buffer size in bytes.</source>
          <target state="translated">缓冲区大小 （字节）。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>为负数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">开始异步读的操作。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(考虑使用&lt;xref:System.IO.BufferedStream.ReadAsync*&gt;替换; 请参见备注部分。)&lt;/xref:System.IO.BufferedStream.ReadAsync*&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginRead%2A&gt; and &lt;xref:System.IO.Stream.EndRead%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">在.NET Framework 4 和更早版本中，你必须使用方法，如&lt;xref:System.IO.Stream.BeginRead%2A&gt;和&lt;xref:System.IO.Stream.EndRead%2A&gt;来实现异步文件操作。&lt;/xref:System.IO.Stream.EndRead%2A&gt; &lt;/xref:System.IO.Stream.BeginRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">这些方法是在中仍然可用<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>以支持旧版代码; 但是，新的异步方法，如&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;， &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;，和&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;，帮助你更轻松地实现异步文件操作。&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; must be called exactly once for every call to BeginRead.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;必须为 BeginRead 每次调用一次调用。&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">如果在开始另一个读取之前，结束读取的进程可能会导致意外行为，如死锁。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.BufferedStream.CanRead%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 使用&lt;xref:System.IO.BufferedStream.CanRead%2A&gt;属性来确定当前实例是否支持读取。&lt;/xref:System.IO.BufferedStream.CanRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndRead%2A&gt; must be called with this &lt;xref:System.IAsyncResult&gt; to find out how many bytes were read.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;必须与此调用&lt;xref:System.IAsyncResult&gt;若要了解已读取的字节。&lt;/xref:System.IAsyncResult&gt;&lt;/xref:System.IO.BufferedStream.EndRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The buffer to read the data into.</source>
          <target state="translated">要将数据读入的缓冲区。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data read from the stream.</source>
          <target state="translated">中的字节偏移量<ph id="ph1">`buffer`</ph>从此处开始写入从流中读取的数据。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">最大读取的字节数。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">可选的异步回调，以完成读取时调用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">用户提供的对象，用于区分此特定的异步读取请求与其他请求。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An object that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">表示异步读取可能仍处于挂起状态的对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Attempted an asynchronous read past the end of the stream.</source>
          <target state="translated">尝试超出末尾的流的异步读取。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">缓冲区长度减去<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>是小于<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The current stream does not support the read operation.</source>
          <target state="translated">当前流不支持读取的操作。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">开始异步写操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(考虑使用&lt;xref:System.IO.BufferedStream.WriteAsync*&gt;替换; 请参见备注部分。)&lt;/xref:System.IO.BufferedStream.WriteAsync*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginWrite%2A&gt; and &lt;xref:System.IO.Stream.EndWrite%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">在.NET Framework 4 和更早版本中，你必须使用方法，如&lt;xref:System.IO.Stream.BeginWrite%2A&gt;和&lt;xref:System.IO.Stream.EndWrite%2A&gt;来实现异步文件操作。&lt;/xref:System.IO.Stream.EndWrite%2A&gt; &lt;/xref:System.IO.Stream.BeginWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">这些方法是在中仍然可用<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>以支持旧版代码; 但是，新的异步方法，如&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;， &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;，和&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;，帮助你更轻松地实现异步文件操作。&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; must be called exactly once on every &lt;xref:System.IAsyncResult&gt; from BeginWrite.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;必须在上一次调用每个&lt;xref:System.IAsyncResult&gt;调用从。&lt;/xref:System.IAsyncResult&gt;&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; will block until the I/O operation has completed.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;将阻止，直到 I/O 操作已完成。&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">包含要写入当前流数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> at which to begin copying bytes to the current stream.</source>
          <target state="translated">中的从零开始的字节偏移量<ph id="ph1">`buffer`</ph>从此处开始将字节复制到当前流。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">最大写入的字节数。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">异步写操作完成时调用的方法。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">一个用户提供的对象，它将此特定的异步写入请求与其他请求区别开来。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An object that references the asynchronous write which could still be pending.</source>
          <target state="translated">一个引用异步写入可能仍处于挂起状态的对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> length minus <ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph> is less than <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>长度减去<ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph>是小于<ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">流不支持写入。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持读取。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support reading, calls to the &lt;xref:System.IO.BufferedStream.Read%2A&gt;, &lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;, &lt;xref:System.IO.Stream.BeginRead%2A&gt;, &lt;xref:System.IO.Stream.EndRead%2A&gt;, and the <ph id="ph1">`Peek`</ph> methods of &lt;xref:System.IO.StreamReader&gt;, &lt;xref:System.IO.StringReader&gt;, and &lt;xref:System.IO.TextReader&gt; throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">如果从派生的类&lt;xref:System.IO.Stream&gt;不支持读取，则调用&lt;xref:System.IO.BufferedStream.Read%2A&gt;， &lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;， &lt;xref:System.IO.Stream.BeginRead%2A&gt;， &lt;xref:System.IO.Stream.EndRead%2A&gt;，和<ph id="ph1">`Peek`</ph>方法&lt;xref:System.IO.StreamReader&gt;， &lt;xref:System.IO.StringReader&gt;，并&lt;xref:System.IO.TextReader&gt;引发一种&lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.IO.TextReader&gt; &lt;/xref:System.IO.StringReader&gt; &lt;/xref:System.IO.StreamReader&gt; &lt;/xref:System.IO.Stream.EndRead%2A&gt; &lt;/xref:System.IO.Stream.BeginRead%2A&gt; &lt;/xref:System.IO.BufferedStream.ReadByte%2A&gt; &lt;/xref:System.IO.BufferedStream.Read%2A&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果流已关闭，则此属性返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports reading; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with write-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果流支持读取;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果流已关闭或是通过只写访问方式打开。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持查找。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support seeking, calls to &lt;xref:System.IO.BufferedStream.Length%2A&gt;, &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;, &lt;xref:System.IO.BufferedStream.Position%2A&gt;, and &lt;xref:System.IO.BufferedStream.Seek%2A&gt; throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">如果从派生的类&lt;xref:System.IO.Stream&gt;不支持查找，则调用&lt;xref:System.IO.BufferedStream.Length%2A&gt;， &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;， &lt;xref:System.IO.BufferedStream.Position%2A&gt;，并&lt;xref:System.IO.BufferedStream.Seek%2A&gt;引发一种&lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.IO.BufferedStream.Seek%2A&gt; &lt;/xref:System.IO.BufferedStream.Position%2A&gt; &lt;/xref:System.IO.BufferedStream.SetLength%2A&gt; &lt;/xref:System.IO.BufferedStream.Length%2A&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果流已关闭，则此属性返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports seeking; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or if the stream was constructed from an operating system handle such as a pipe or output to the console.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果流支持查找;，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果流已关闭或者如果流已从构造的操作系统句柄如管道或输出到控制台。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">获取一个值，该值指示当前流是否支持写入。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support writing, a call to &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;, &lt;xref:System.IO.BufferedStream.Write%2A&gt;, or &lt;xref:System.IO.BufferedStream.WriteByte%2A&gt; throws a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">如果从派生的类&lt;xref:System.IO.Stream&gt;不支持写入，调用&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;， &lt;xref:System.IO.BufferedStream.Write%2A&gt;，或&lt;xref:System.IO.BufferedStream.WriteByte%2A&gt;引发一种&lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.IO.BufferedStream.WriteByte%2A&gt; &lt;/xref:System.IO.BufferedStream.Write%2A&gt; &lt;/xref:System.IO.BufferedStream.SetLength%2A&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果流已关闭，则此属性返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports writing; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果流支持写入，则<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果流已关闭或是通过只读访问方式打开。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">等待挂起的异步读取操作完成。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(考虑使用&lt;xref:System.IO.BufferedStream.ReadAsync*&gt;替换; 请参见备注部分。)&lt;/xref:System.IO.BufferedStream.ReadAsync*&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginRead%2A&gt; and &lt;xref:System.IO.Stream.EndRead%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">在.NET Framework 4 和更早版本中，你必须使用方法，如&lt;xref:System.IO.Stream.BeginRead%2A&gt;和&lt;xref:System.IO.Stream.EndRead%2A&gt;来实现异步文件操作。&lt;/xref:System.IO.Stream.EndRead%2A&gt; &lt;/xref:System.IO.Stream.BeginRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">这些方法是在中仍然可用<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>以支持旧版代码; 但是，新的异步方法，如&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;， &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;，和&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;，帮助你更轻松地实现异步文件操作。&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>EndRead must be called with this &lt;xref:System.IAsyncResult&gt; to find out how many bytes were read.</source>
          <target state="translated">必须与此调用 EndRead&lt;xref:System.IAsyncResult&gt;若要了解已读取的字节。&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">对要等待的挂起异步请求的引用。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</source>
          <target state="translated">从 0 （零） 和你请求的字节数之间的流中读取的字节数。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Streams only return 0 only at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">流仅返回 0 仅在流结尾，否则，它们应一直进行阻止至少 1 个字节可用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.BufferedStream.BeginRead*&gt; on this class.</source>
          <target state="translated">此&lt;xref:System.IAsyncResult&gt;对象不通过调用&lt;xref:System.IO.BufferedStream.BeginRead*&gt;此类&lt;/xref:System.IO.BufferedStream.BeginRead*&gt;创建&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">结束异步写操作和块，直到 I/O 操作已完成。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(考虑使用&lt;xref:System.IO.BufferedStream.WriteAsync*&gt;替换; 请参见备注部分。)&lt;/xref:System.IO.BufferedStream.WriteAsync*&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginWrite%2A&gt; and &lt;xref:System.IO.Stream.EndWrite%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">在.NET Framework 4 和更早版本中，你必须使用方法，如&lt;xref:System.IO.Stream.BeginWrite%2A&gt;和&lt;xref:System.IO.Stream.EndWrite%2A&gt;来实现异步文件操作。&lt;/xref:System.IO.Stream.EndWrite%2A&gt; &lt;/xref:System.IO.Stream.BeginWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">这些方法是在中仍然可用<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>以支持旧版代码; 但是，新的异步方法，如&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;， &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;，和&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;，帮助你更轻松地实现异步文件操作。&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt; &lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>EndWrite must be called exactly once for every call to &lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;.</source>
          <target state="translated">必须为&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;.&lt;/xref:System.IO.BufferedStream.BeginRead%2A&gt;每次调用一次调用 EndWrite</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read operation can cause deadlock or other undesirable behavior.</source>
          <target state="translated">如果结束一个读取的进程在开始之前另一个读取的操作可能会导致死锁或其他意外行为。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The pending asynchronous request.</source>
          <target state="translated">挂起的异步请求。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.BufferedStream.BeginWrite*&gt; on this class.</source>
          <target state="translated">此&lt;xref:System.IAsyncResult&gt;对象不通过调用&lt;xref:System.IO.BufferedStream.BeginWrite*&gt;此类&lt;/xref:System.IO.BufferedStream.BeginWrite*&gt;创建&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">清除此流的所有缓冲区，使得所有缓冲的数据都写入基础设备。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or &lt;xref:System.IO.Stream.Close%2A&gt;.</source>
          <target state="translated">刷新流将不会刷新其基础的编码器，除非你明确地调用<ph id="ph1">`Flush`</ph>或&lt;xref:System.IO.Stream.Close%2A&gt;。&lt;/xref:System.IO.Stream.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you use the &lt;xref:System.IO.BufferedStream.%23ctor%2A&gt; constructor, thus specifying the buffer size while creating the <ph id="ph1">`BufferedStream`</ph> object, the content is flushed when it reaches the buffer size.</source>
          <target state="translated">如果你使用&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;构造函数，因此在创建时指定缓冲区大小<ph id="ph1">`BufferedStream`</ph>对象，它达到缓冲区大小时刷新内容。&lt;/xref:System.IO.BufferedStream.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, code such as <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> will flush the content when the buffer size reaches 5 bytes.</source>
          <target state="translated">例如，代码如<ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph>的缓冲区大小达到 5 个字节时，将刷新内容。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>All the read and write methods of <ph id="ph1">`BufferedStream`</ph> automatically maintain the buffer, so there is no need to invoke <ph id="ph2">`Flush`</ph> when switching back and forth between reading and writing.</source>
          <target state="translated">所有读取和写入方法<ph id="ph1">`BufferedStream`</ph>自动维护缓冲区，因此无需调用<ph id="ph2">`Flush`</ph>时读取和写入之间来回切换。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">已释放流。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The data source or repository is not open.</source>
          <target state="translated">未打开的数据源或存储库。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">异步清除此流的所有缓冲区，使得所有缓冲的数据都写入到基础设备，并监视取消请求。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">表示异步刷新操作的任务。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">已释放流。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets the stream length in bytes.</source>
          <target state="translated">获取用字节表示的流的长度。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The stream length in bytes.</source>
          <target state="translated">流的长度以字节为单位。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The underlying stream is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or closed.</source>
          <target state="translated">基础流是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或已关闭。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">流不支持查找。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Gets the position within the current stream.</source>
          <target state="translated">获取当前流中的位置。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor invokes &lt;xref:System.IO.BufferedStream.Seek%2A&gt; to obtain the current position within the underlying stream and then adjusts this value according to the current position within the buffer.</source>
          <target state="translated"><ph id="ph1">`get`</ph>访问器时，将调用&lt;xref:System.IO.BufferedStream.Seek%2A&gt;以获取基础流中的当前位置，然后调整此值根据缓冲区中的当前位置。&lt;/xref:System.IO.BufferedStream.Seek%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`set`</ph> accessor copies any data previously written to the buffer to the underlying stream, and then invokes &lt;xref:System.IO.BufferedStream.Seek%2A&gt;.</source>
          <target state="translated"><ph id="ph1">`set`</ph>访问器将复制任何以前写入到基础流缓冲区的数据，并调用&lt;xref:System.IO.BufferedStream.Seek%2A&gt;.&lt;/xref:System.IO.BufferedStream.Seek%2A&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">支持查找到流的长度超出任何位置。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The position within the current stream.</source>
          <target state="translated">当前流中的位置。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;xref:System.IO.BufferedStream.Seek*&gt; is negative.</source>
          <target state="translated">传递给值&lt;xref:System.IO.BufferedStream.Seek*&gt;为负。&lt;/xref:System.IO.BufferedStream.Seek*&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">发生了 I/O 错误，如正在关闭的流。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">流不支持查找。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Copies bytes from the current buffered stream to an array.</source>
          <target state="translated">将字节从当前缓冲的流复制到一个数组。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Read`</ph> method will return 0 only if the end of the stream is reached.</source>
          <target state="translated"><ph id="ph1">`Read`</ph>方法将返回 0，仅当已到达流结尾。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In all other cases, <ph id="ph1">`Read`</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">在所有其他情况下，<ph id="ph1">`Read`</ph>始终至少&amp;1; 个字节从流中读取在返回之前。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>By definition, if no data is available from the stream upon a call to <ph id="ph1">`Read`</ph>, the <ph id="ph2">`Read`</ph> method returns 0 (the end of the stream is reached automatically).</source>
          <target state="translated">根据定义，如果不会提供数据时调用流中<ph id="ph1">`Read`</ph>、<ph id="ph2">`Read`</ph>方法返回的零 （自动到达流结尾）。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">实现可以自由地返回少于所请求的字节，即使尚未达到流结尾。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.IO.BinaryReader&gt; for reading primitive data types.</source>
          <target state="translated">使用&lt;xref:System.IO.BinaryReader&gt;读取基元数据类型。&lt;/xref:System.IO.BinaryReader&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The buffer to which bytes are to be copied.</source>
          <target state="translated">字节是要复制的缓冲区。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The byte offset in the buffer at which to begin reading bytes.</source>
          <target state="translated">从此处开始读取的字节的缓冲区字节偏移量。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The number of bytes to be read.</source>
          <target state="translated">要读取的字节数。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">总字节数读入<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or 0 if the end of the stream has been reached before any data can be read.</source>
          <target state="translated">这可能小于请求的字节数; 如果读取很多字节当前不可用，或如果任何数据前就已到达流结尾为 0 可以。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">流不是打开的或者是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">流不支持读取。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">从当前流异步读取字节序列的流中的位置提升读取的字节数，并监视取消请求。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can create a cancellation token by creating an instance of the &lt;xref:System.Threading.CancellationTokenSource&gt; class and passing the &lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt; property as the <ph id="ph1">`cancellationToken`</ph> parameter.</source>
          <target state="translated">你可以通过创建的实例创建一个取消标记&lt;xref:System.Threading.CancellationTokenSource&gt;类并传入&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;属性作为<ph id="ph1">`cancellationToken`</ph>参数。&lt;/xref:System.Threading.CancellationTokenSource.Token%2A&gt; &lt;/xref:System.Threading.CancellationTokenSource&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The buffer to write the data into.</source>
          <target state="translated">要写入到数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data from the stream.</source>
          <target state="translated">中的字节偏移量<ph id="ph1">`buffer`</ph>从此处开始写入从流读取的数据。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">最大读取的字节数。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">一个任务，它表示异步读取操作。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">TResult</ph> <ept id="p1">&lt;/code&gt;</ept>参数包含读入缓冲区的字节总数。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">结果值可能小于请求的字节数的如果当前可用字节数小于所请求的数目，或如果已到达流结尾，它可以是 0 （零）。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">总和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>和<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>大于缓冲区长度。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">流不支持读取。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">已释放流。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">当前正在使用以前的读取操作流。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Reads a byte from the underlying stream and returns the byte cast to an <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or returns -1 if reading from the end of the stream.</source>
          <target state="translated">从基础流中读取一个字节，并返回强制转换为字节<bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，或如果读取来自流的末尾，则返回-1。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The byte cast to an <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or -1 if reading from the end of the stream.</source>
          <target state="translated">字节强制转换为<bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则为-1 如果从流的末尾进行读取。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">发生了 I/O 错误，如正在关闭的流。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">流不支持读取。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Sets the position within the current buffered stream.</source>
          <target state="translated">当前缓冲的流中设置的位置。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position will precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`offset`</ph>为负，新的位置将指定的位置之前通过<ph id="ph2">`origin`</ph>按指定的字节数<ph id="ph3">`offset`</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is 0, the new position will be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`offset`</ph>为 0，新的位置将为指定的位置<ph id="ph2">`origin`</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position will follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`offset`</ph>为正，新的位置将遵循由指定的位置<ph id="ph2">`origin`</ph>按指定的字节数<ph id="ph3">`offset`</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When a &lt;xref:System.IO.BufferedStream&gt; object is the base stream for a &lt;xref:System.IO.StreamReader&gt; object, calling the Seek method can cause the position of the stream to no longer match the position of the internal buffer in the reader.</source>
          <target state="translated">当&lt;xref:System.IO.BufferedStream&gt;对象是基流&lt;xref:System.IO.StreamReader&gt;对象，调用 Seek 方法可能会导致要不再匹配内部缓冲区的位置的读取器中的流的位置。&lt;/xref:System.IO.StreamReader&gt; &lt;/xref:System.IO.BufferedStream&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To reset the internal buffer, call the &lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt; method; however, this method slows performance and should be called only when absolutely necessary.</source>
          <target state="translated">若要重置内部缓冲区，调用&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt;方法; 但是，此方法会降低性能，应仅当绝对必要时调用。&lt;/xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">支持查找到流的长度超出任何位置。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A byte offset relative to <ph id="ph1">`origin`</ph>.</source>
          <target state="translated">相对于的字节偏移量<ph id="ph1">`origin`</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A value of type &lt;xref:System.IO.SeekOrigin&gt; indicating the reference point from which to obtain the new position.</source>
          <target state="translated">类型的值&lt;xref:System.IO.SeekOrigin&gt;，该值指示要从中获取新位置的参考点。&lt;/xref:System.IO.SeekOrigin&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The new position within the current buffered stream.</source>
          <target state="translated">当前缓冲的流中的新位置。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">流不是打开的或者是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">流不支持查找。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Sets the length of the buffered stream.</source>
          <target state="translated">设置缓冲的流的长度。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The buffer is flushed before setting the length of the underlying data source or repository.</source>
          <target state="translated">对缓冲区进行刷新之前设置的基础数据源或存储库的长度。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the specified value is less than the current length of the buffered stream, the buffered stream is truncated.</source>
          <target state="translated">如果指定的值小于当前缓冲的流的长度，缓冲的流将被截断。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If the specified value is larger than the current length of the buffered stream, the buffered stream is expanded.</source>
          <target state="translated">如果指定的值大于当前缓冲的流的长度，则扩展缓冲的流。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>If the buffered stream is expanded, the contents of the buffered stream between the old and the new lengths are not defined.</source>
          <target state="translated">如果展开缓冲的流时，旧和新的长度之间缓冲的流的内容是未定义。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetLength`</ph> flushes any buffered writes if necessary.</source>
          <target state="translated"><ph id="ph1">`SetLength`</ph>如有必要，请刷新任何缓冲的写入。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">流必须支持写入和查找有关<ph id="ph1">`SetLength`</ph>工作。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An integer indicating the desired length of the current buffered stream in bytes.</source>
          <target state="translated">指示当前缓冲流以字节为单位的所需的长度的整数。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>为负数。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">流不是打开的或者是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">流不支持写入和查找。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</source>
          <target state="translated">将字节复制到缓冲的流并使中缓冲的流的当前位置提升写入的字节数。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The byte array from which to copy <ph id="ph1">`count`</ph> bytes to the current buffered stream.</source>
          <target state="translated">要从其中复制的字节数组<ph id="ph1">`count`</ph>个字节写入当前缓冲的流。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The offset in the buffer at which to begin copying bytes to the current buffered stream.</source>
          <target state="translated">从此处开始将字节复制到当前缓冲的流缓冲区中的偏移量。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The number of bytes to be written to the current buffered stream.</source>
          <target state="translated">要写入到当前缓冲的流的字节数。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The stream is closed or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">流已关闭或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">流不支持写入。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">以异步方式将一个字节序列写入当前流，使此流中的当前位置提升写入字节数，并监视取消请求。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You can create a cancellation token by creating an instance of the &lt;xref:System.Threading.CancellationTokenSource&gt; class and passing the &lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt; property as the <ph id="ph1">`cancellationToken`</ph> parameter.</source>
          <target state="translated">你可以通过创建的实例创建一个取消标记&lt;xref:System.Threading.CancellationTokenSource&gt;类并传入&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;属性作为<ph id="ph1">`cancellationToken`</ph>参数。&lt;/xref:System.Threading.CancellationTokenSource.Token%2A&gt; &lt;/xref:System.Threading.CancellationTokenSource&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The buffer to write data from.</source>
          <target state="translated">要写入数据的缓冲区。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> from which to begin copying bytes to the stream.</source>
          <target state="translated">中的从零开始的字节偏移量<ph id="ph1">`buffer`</ph>从此处开始将字节复制到流。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">最大写入的字节数。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">要监视取消请求的标记。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">表示异步写入操作的任务。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>或<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>为负。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">总和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>和<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>大于缓冲区长度。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">流不支持写入。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">已释放流。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">当前正在由前一个写操作使用流。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Writes a byte to the current position in the buffered stream.</source>
          <target state="translated">将一个字节写入中缓冲的流的当前位置。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A byte to write to the stream.</source>
          <target state="translated">要写入到流字节。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">流不支持写入。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">在流关闭后调用方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>