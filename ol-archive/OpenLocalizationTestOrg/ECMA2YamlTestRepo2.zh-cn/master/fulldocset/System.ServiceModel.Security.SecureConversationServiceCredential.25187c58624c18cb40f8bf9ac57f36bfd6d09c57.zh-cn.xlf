<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebd56cc968183bb7e522f6acd8cca2a35ac51fe2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ServiceModel.Security.SecureConversationServiceCredential.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b154976f4f3f71cdd48941bf4210672e15913553</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e66880c7e7494ac10e27611cff7ce56032d606f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides credential settings for a secure conversation service.</source>
          <target state="translated">提供安全对话服务的凭据设置。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security.</source>
          <target state="translated">安全对话涉及到多个消息的交换，并且使用安全上下文令牌 (SCT) 来确保安全性。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The SCT is shared among the communicating parties for the lifetime of a communications session.</source>
          <target state="translated">通信各方将共享 SCT，而且在通信会话的生存期内。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A service can issue two different kinds of SCTs:      -   The first is a session-based SCT that contains a unique id.</source>
          <target state="translated">一个服务可以颁发两个不同类型的 Sct:-第一种是基于会话的 SCT，其包含的唯一 id。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on).</source>
          <target state="translated">消息只携带 id，而服务会维护 SCT id 与内容 （如声明、 安全密钥等） 之间映射的状态映射缓存。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A well-behaved client must send an SCT cancellation to help the service optimize the cache resources.</source>
          <target state="translated">良好的客户端必须发送 SCT 取消，以帮助服务优化缓存资源。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you instantiate this class by calling &lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt; with the <ph id="ph1">`requireCancellation`</ph> parameter equal to <ph id="ph2">`true`</ph>, the SCT is issued in this manner.</source>
          <target state="translated">如果通过调用实例化此类&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;与<ph id="ph1">`requireCancellation`</ph>参数等于<ph id="ph2">`true`</ph>，这种方式颁发 SCT。&lt;/xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   The second is a self-contained SCT that resides in a cookie on the client.</source>
          <target state="translated">的第二个是独立的 SCT 驻留在客户端的 cookie。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client.</source>
          <target state="translated">这种 SCT 包含整个状态信息，因此需要既不从服务的状态管理，也不从客户端取消 SCT。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is sometimes called a "cookie-mode" SCT.</source>
          <target state="translated">这有时称为"cookie 模式"SCT。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because the SCT contains the entire state information, its size is larger than in the session-based case.</source>
          <target state="translated">由于该 SCT 包含整个状态信息，其大小大于在基于会话的情况下。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>With session-based SCTs, the service stores much of the state information.</source>
          <target state="translated">具有基于会话的 Sct，服务可以存储大量状态信息。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.</source>
          <target state="translated">但是，因为它是自包含，它可以跨服务生存期使用，并在服务关闭和重新启动仍然存在。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets a collection of the &lt;xref:System.Type&gt; claims for cookie serialization.</source>
          <target state="translated">获取的集合&lt;xref:System.Type&gt;用于 cookie 序列化的声明。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To serialize claims into SCT cookies, <ph id="ph1">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> uses &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; as the default.</source>
          <target state="translated">将声明序列化为 SCT cookie<ph id="ph1">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph>使用&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;作为默认值。&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because the Claim resource is extensible, <ph id="ph1">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph> allows you to provide a list of known resource types.</source>
          <target state="translated">声明资源是可扩展的因为<ph id="ph1">[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]</ph>允许您提供已知的资源类型的列表。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This assists the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.</source>
          <target state="translated">这可以提供帮助&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;cookie，以便它可以返回原始强类型对象中的声明的反序列化期间。&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A collection of the &lt;xref:System.Type&gt; claims for cookie serialization.</source>
          <target state="translated">集合&lt;xref:System.Type&gt;用于 cookie 序列化的声明。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets or sets a customized <bpt id="p1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for encoding and decoding cookie serialization.</source>
          <target state="translated">获取或设置一个自定义<bpt id="p1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于编码和解码 cookie 序列化。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In "cookie mode", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state.</source>
          <target state="translated">在"cookie 模式"，服务颁发客户端安全上下文令牌 (SCT) cookie 形式向客户端，以便它不需要维护任何安全状态。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message.</source>
          <target state="translated">客户端将 cookie 发送请求消息中返回，以便服务知道如何取消保护和验证的请求消息。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because the SCT is often transmitted over a non-secure network, it must be protected.</source>
          <target state="translated">因为通过非安全网络通常传输 SCT，则必须进行保护。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph> uses the &lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt; class to protect the cookie using the Data Protection API (DPAPI).</source>
          <target state="translated">默认情况下，<ph id="ph1">[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]</ph>使用&lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;类使用数据保护 API (DPAPI) 对 cookie 进行保护。&lt;/xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account.</source>
          <target state="translated">让 DPAPI 在 Web 场环境中工作，所有后端服务必须运行相同的域用户帐户。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.</source>
          <target state="translated">换而言之，如果服务是 Web 承载服务，然后 Internet 信息服务 (IIS) 辅助进程必须被配置为以域用户身份运行。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This property enables you to use a customized &lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt; to encrypt and decrypt the cookie and not depend on DPAPI.</source>
          <target state="translated">此属性使您能够使用自定义&lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt;来进行加密和解密 cookie 并不依赖 DPAPI。&lt;/xref:System.ServiceModel.Security.SecurityStateEncoder&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, which is a customization of <bpt id="p2">&lt;xref href="System.ServiceModel.Security.DataProtectionSecurityStateEncoder"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ServiceModel.Security.SecurityStateEncoder"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，它是自定义项的<bpt id="p2">&lt;xref href="System.ServiceModel.Security.DataProtectionSecurityStateEncoder"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>