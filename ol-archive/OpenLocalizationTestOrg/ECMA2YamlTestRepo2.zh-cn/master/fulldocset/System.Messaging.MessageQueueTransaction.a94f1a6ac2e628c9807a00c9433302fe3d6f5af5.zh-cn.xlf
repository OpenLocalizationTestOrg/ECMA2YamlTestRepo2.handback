<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99f7fd01ed185424160e7ef9e3460c98d01ceada</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.MessageQueueTransaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19e477193aba95a235af738dcbd4fd27adf2d249</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e43dbd96f8dd40b5883f6c11e03d22dd2b1525fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a Message Queuing internal transaction.</source>
          <target state="translated">提供消息队列内部事务。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To send or receive a message as part of a transaction, you can use the MessageQueueTransaction class to create a transaction and pass it to an overload of the &lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt; method or the &lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt; method that takes a <ph id="ph1">`transaction`</ph> parameter.</source>
          <target state="translated">若要发送或接收消息作为事务的一部分，可以使用 MessageQueueTransaction 类创建一个事务，并将其传递到的重载&lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt;方法或&lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt;采用的方法<ph id="ph1">`transaction`</ph>参数。&lt;/xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt; &lt;/xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Messages sent as part of a transaction must be sent to transactional queues.</source>
          <target state="translated">作为事务一部分发送的消息必须发送到事务性队列。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Messages received from transactional queues must be received using a specified transaction.</source>
          <target state="translated">必须使用指定的事务接收从事务性队列接收的消息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, you can receive messages with a specified identifier or specified correlation identifier.</source>
          <target state="translated">除了&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法，你可以接收与指定的标识符或指定的相关标识符的消息。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt; and &lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt; methods for more information about selectively receiving messages from transactional queues.</source>
          <target state="translated">请参阅&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;和&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;有关有选择地从事务性队列接收消息的详细信息的方法。&lt;/xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt; &lt;/xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Messages sent to transactional queues are removed if the transaction is committed.</source>
          <target state="translated">如果将提交事务不会发送到事务性队列的消息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</source>
          <target state="translated">同样，从事务性队列接收的消息将返回到队列中，如果事务回滚。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you instantiate a MessageQueueTransaction and pass it to an applicable overload of the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method or &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</source>
          <target state="translated">如果实例化 MessageQueueTransaction 并将其传递给适用重载的&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;方法或&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;发送到非事务性队列的消息或接收来自非事务性队列，该方法的消息的方法引发的异常，该值指示"事务用法错误。"&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue.Send%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[Visual Basic]       MessageQueueTransaction is threading apartment aware, so if your apartment state is <ph id="ph1">`STA`</ph>, you cannot use the transaction in multiple threads.</source>
          <target state="translated">[Visual Basic]      MessageQueueTransaction 识别线程处理单元，因此，如果你的单元状态<ph id="ph1">`STA`</ph>，不能在多个线程中使用的事务。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Basic sets the state of the main thread to <ph id="ph1">`STA`</ph>, so you must apply the &lt;xref:System.MTAThreadAttribute&gt; in the <ph id="ph2">`Main`</ph> subroutine.</source>
          <target state="translated">Visual Basic 将设置到的主线程的状态<ph id="ph1">`STA`</ph>，因此您必须首先应用&lt;xref:System.MTAThreadAttribute&gt;中<ph id="ph2">`Main`</ph>子例程。&lt;/xref:System.MTAThreadAttribute&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Otherwise, sending a transactional message using another thread throws a &lt;xref:System.Messaging.MessageQueueException&gt; exception.</source>
          <target state="translated">否则，发送事务性消息使用另一个线程将引发&lt;xref:System.Messaging.MessageQueueException&gt;异常。&lt;/xref:System.Messaging.MessageQueueException&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You apply the &lt;xref:System.MTAThreadAttribute&gt; by using the following fragment.</source>
          <target state="translated">你将应用&lt;xref:System.MTAThreadAttribute&gt;通过使用下面的片段。&lt;/xref:System.MTAThreadAttribute&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;System.MTAThreadAttribute&gt;    public sub Main()   ```</ph>      <ph id="ph2">```vb#      ```</ph></source>
          <target state="translated"><ph id="ph1">```   &lt;System.MTAThreadAttribute&gt;    public sub Main()   ```</ph>      <ph id="ph2">```vb#      ```</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This constructor sets the &lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt; property to <ph id="ph1">`Initialized`</ph>.</source>
          <target state="translated">此构造函数设置&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;属性<ph id="ph1">`Initialized`</ph>。&lt;/xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Rolls back the pending internal transaction.</source>
          <target state="translated">回滚挂起的内部事务。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Abort marks the unsuccessful completion of a process begun at a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">中止将标记为&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;调用开始的进程的未成功完成</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; in the <ph id="ph2">`Try`</ph> clause, and a call to Abort in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常情况下，一个方法调用了&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;内<ph id="ph1">`Try...Catch`</ph>异常处理块中，将调用&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;中<ph id="ph2">`Try`</ph>子句，并且在中止调用<ph id="ph3">`Catch`</ph>子句。&lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Abort rolls back the entire transaction.</source>
          <target state="translated">中止回滚整个事务。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">这包括发送或接收到&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;调用后的所有消息</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The internal transaction you are attempting to roll back has not started.</source>
          <target state="translated">尝试回滚内部事务尚未开始。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">发生内部消息队列错误。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Begins a new Message Queuing internal transaction.</source>
          <target state="translated">开始新的消息队列内部事务。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Begin marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</source>
          <target state="translated">开始的标记的处理开始将提交或回滚，具体取决于成功的事务。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If an exception occurs during processing, the entire transaction is rolled back.</source>
          <target state="translated">如果在处理期间发生异常，将回滚整个事务。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to Begin.</source>
          <target state="translated">这包括所有消息发送或接收开始调用的后面。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to Begin within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; in the <ph id="ph2">`Try`</ph> clause, and a call to &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常情况下，一个将在开始调用<ph id="ph1">`Try...Catch`</ph>异常处理块中，将调用&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;中<ph id="ph2">`Try`</ph>子句，并且调用&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;中<ph id="ph3">`Catch`</ph>子句。&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The transaction has already been started.</source>
          <target state="translated">已启动事务。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">发生内部消息队列错误。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Commits a pending internal transaction.</source>
          <target state="translated">提交挂起的内部事务。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Commit marks the successful completion of processing begun at a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">提交标记处理始于&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;调用成功完成</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If an exception occurs between the call the &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; and the call to Commit, the entire transaction is rolled back.</source>
          <target state="translated">如果在调用之间发生的异常&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;且的提交调用中，整个事务都会回滚。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">这包括发送或接收到&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;调用后的所有消息</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to Commit in the <ph id="ph2">`Try`</ph> clause, and a call to &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常情况下，一个方法调用了&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;内<ph id="ph1">`Try...Catch`</ph>异常处理块中，将提交在调用<ph id="ph2">`Try`</ph>子句，并且调用&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;中<ph id="ph3">`Catch`</ph>子句。&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The transaction you are trying to commit has not started.</source>
          <target state="translated">在尝试提交事务尚未开始。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">发生内部消息队列错误。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">释放使用的所有资源<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageQueueTransaction&gt; to be reallocated for other purposes.</source>
          <target state="translated">调用 Dispose 允许使用的资源&lt;xref:System.Messaging.MessageQueueTransaction&gt;可以重新分配用于其他目的。&lt;/xref:System.Messaging.MessageQueueTransaction&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">`Dispose`</ph>，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any pending internal transactions are rolled back by Dispose.</source>
          <target state="translated">任何挂起的内部事务将回滚通过释放。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">释放由非托管的资源<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，还可以释放托管的资源。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">此方法称为由公共&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;方法和&lt;xref:System.Object.Finalize%2A&gt;方法。&lt;/xref:System.Object.Finalize%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;调用<ph id="ph1">`Dispose`</ph>与<ph id="ph2">`disposing`</ph>设置为<ph id="ph3">`false`</ph>。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageQueueTransaction&gt; references.</source>
          <target state="translated">当<ph id="ph1">`disposing`</ph>参数是<ph id="ph2">`true`</ph>，此方法释放由任何托管对象持有的全部资源此&lt;xref:System.Messaging.MessageQueueTransaction&gt;引用。&lt;/xref:System.Messaging.MessageQueueTransaction&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用<ph id="ph1">`Dispose`</ph>每个引用对象的方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Releases the resources held by the current instance.</source>
          <target state="translated">释放由当前实例所持有的资源。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">此方法将替代&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Finalize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">应用程序代码不应调用此方法。对象的 Finalize 方法过程中将自动调用垃圾回收，除非已通过调用禁用垃圾回收器的终止&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>Finalize 方法和析构函数<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>，<bpt id="p2">[</bpt>清洗向上非托管资源<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>，和<bpt id="p3">[</bpt>重写 Finalize 方法<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the status of the transaction.</source>
          <target state="translated">获取事务的状态。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When an instance of the &lt;xref:System.Messaging.MessageQueueTransaction&gt; class has been created, the Status is set by the constructor to <ph id="ph1">`Initialized`</ph>.</source>
          <target state="translated">实例时&lt;xref:System.Messaging.MessageQueueTransaction&gt;创建类，通过构造函数设置状态<ph id="ph1">`Initialized`</ph>。&lt;/xref:System.Messaging.MessageQueueTransaction&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>After a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; but before a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; or &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;, the Status is <ph id="ph1">`Pending`</ph>.</source>
          <target state="translated">在调用&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;但在调用之前&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;或&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;，状态是<ph id="ph1">`Pending`</ph>。&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; &lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</source>
          <target state="translated">之一<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值，该值指示是否在事务在已提交，中止，初始化，或处于挂起状态。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>