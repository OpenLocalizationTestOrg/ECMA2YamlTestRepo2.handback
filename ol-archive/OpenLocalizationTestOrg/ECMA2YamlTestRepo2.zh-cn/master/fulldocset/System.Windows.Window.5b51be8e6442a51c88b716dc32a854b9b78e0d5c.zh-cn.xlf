<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7172c27ebcd4693a42b484604cff94ac6acd1306</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Window.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eef6633ff6004bfbc32327bf96ae6582c91a7d5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">582455b08242d27076383f3e723bd48f521b75e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">提供创建、 配置、 显示，和管理的窗口和对话框生存期的功能。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">用户和独立的应用程序之间的点是交互的一个窗口。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window consists of two distinct areas:      -   A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>窗口包含两个不同的区域︰ 的非工作区，其中承载 windows 修饰，其中包括图标、 标题、 系统菜单中，最小化按钮、 最大化按钮、 还原按钮、 关闭按钮和边框。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   A client area, which hosts application-specific content.</source>
          <target state="translated">-A 工作区，其中承载应用程序特定的内容。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A standard window is shown in the following figure:       <bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept>       Window encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:       <bpt id="p3">**</bpt>Lifetime Management<ept id="p3">**</ept>: &lt;xref:System.Windows.Window.Activate%2A&gt;, &lt;xref:System.Windows.Window.Activated&gt;, &lt;xref:System.Windows.Window.Close%2A&gt;, &lt;xref:System.Windows.Window.Closed&gt;, &lt;xref:System.Windows.Window.Closing&gt;, &lt;xref:System.Windows.Window.Deactivated&gt;, &lt;xref:System.Windows.Window.Hide%2A&gt;, &lt;xref:System.Windows.Window.IsActive%2A&gt;, &lt;xref:System.Windows.Window.Show%2A&gt;, &lt;xref:System.Windows.Window.SourceInitialized&gt;.</source>
          <target state="translated">下图中显示标准窗口︰<bpt id="p1">![</bpt>窗口元素<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>窗口元素<ept id="p2">")</ept>窗口封装能够创建、 配置、 显示，和管理 windows 和对话框中的生存期，它提供以下关键服务︰<bpt id="p3">**</bpt>生命期管理<ept id="p3">**</ept>: &lt;xref:System.Windows.Window.Activate%2A&gt; &lt;xref:System.Windows.Window.Activated&gt; &lt;xref:System.Windows.Window.Close%2A&gt; &lt;xref:System.Windows.Window.Closed&gt; &lt;xref:System.Windows.Window.Closing&gt; &lt;xref:System.Windows.Window.Deactivated&gt; &lt;xref:System.Windows.Window.Hide%2A&gt; &lt;xref:System.Windows.Window.IsActive%2A&gt; &lt;xref:System.Windows.Window.Show%2A&gt;、 &lt;xref:System.Windows.Window.SourceInitialized&gt;.&lt;/xref:System.Windows.Window.SourceInitialized&gt; &lt;/xref:System.Windows.Window.Show%2A&gt; &lt;/xref:System.Windows.Window.IsActive%2A&gt; &lt;/xref:System.Windows.Window.Hide%2A&gt; &lt;/xref:System.Windows.Window.Deactivated&gt; &lt;/xref:System.Windows.Window.Closing&gt; &lt;/xref:System.Windows.Window.Closed&gt; &lt;/xref:System.Windows.Window.Close%2A&gt; &lt;/xref:System.Windows.Window.Activated&gt; &lt;/xref:System.Windows.Window.Activate%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.GetWindow%2A&gt;, &lt;xref:System.Windows.Window.OwnedWindows%2A&gt;, &lt;xref:System.Windows.Window.Owner%2A&gt;.</source>
          <target state="translated"><bpt id="p1">**</bpt>窗口管理<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.GetWindow%2A&gt; &lt;xref:System.Windows.Window.OwnedWindows%2A&gt;、 &lt;xref:System.Windows.Window.Owner%2A&gt;.&lt;/xref:System.Windows.Window.Owner%2A&gt; &lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.GetWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;, &lt;xref:System.Windows.Window.ContentRendered&gt;, &lt;xref:System.Windows.Window.DragMove%2A&gt;, &lt;xref:System.Windows.Window.Icon%2A&gt;, &lt;xref:System.Windows.Window.Left%2A&gt;, &lt;xref:System.Windows.Window.LocationChanged&gt;, &lt;xref:System.Windows.Window.ResizeMode%2A&gt;, &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;, &lt;xref:System.Windows.Window.ShowActivated%2A&gt;, &lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;, &lt;xref:System.Windows.Window.SizeToContent%2A&gt;, &lt;xref:System.Windows.Window.StateChanged&gt;, &lt;xref:System.Windows.Window.Title%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, &lt;xref:System.Windows.Window.Topmost%2A&gt;, &lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;, &lt;xref:System.Windows.Window.WindowState%2A&gt;, &lt;xref:System.Windows.Window.WindowStyle%2A&gt;       <bpt id="p2">**</bpt>Dialog Boxes<ept id="p2">**</ept>: &lt;xref:System.Windows.Window.DialogResult%2A&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated"><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;, &lt;xref:System.Windows.Window.ContentRendered&gt;, &lt;xref:System.Windows.Window.DragMove%2A&gt;, &lt;xref:System.Windows.Window.Icon%2A&gt;, &lt;xref:System.Windows.Window.Left%2A&gt;, &lt;xref:System.Windows.Window.LocationChanged&gt;, &lt;xref:System.Windows.Window.ResizeMode%2A&gt;, &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;, &lt;xref:System.Windows.Window.ShowActivated%2A&gt;, &lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;, &lt;xref:System.Windows.Window.SizeToContent%2A&gt;, &lt;xref:System.Windows.Window.StateChanged&gt;, &lt;xref:System.Windows.Window.Title%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, &lt;xref:System.Windows.Window.Topmost%2A&gt;, &lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;, &lt;xref:System.Windows.Window.WindowState%2A&gt;, &lt;xref:System.Windows.Window.WindowStyle%2A&gt;       <bpt id="p2">**</bpt>Dialog Boxes<ept id="p2">**</ept>: &lt;xref:System.Windows.Window.DialogResult%2A&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;&lt;/xref:System.Windows.Window.DialogResult%2A&gt;&lt;/xref:System.Windows.Window.WindowStyle%2A&gt;&lt;/xref:System.Windows.Window.WindowState%2A&gt;&lt;/xref:System.Windows.Window.WindowStartupLocation%2A&gt;&lt;/xref:System.Windows.Window.Topmost%2A&gt;&lt;/xref:System.Windows.Window.Top%2A&gt;&lt;/xref:System.Windows.Window.Title%2A&gt;&lt;/xref:System.Windows.Window.StateChanged&gt;&lt;/xref:System.Windows.Window.SizeToContent%2A&gt;&lt;/xref:System.Windows.Window.ShowInTaskbar%2A&gt;&lt;/xref:System.Windows.Window.ShowActivated%2A&gt;&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;&lt;/xref:System.Windows.Window.ResizeMode%2A&gt;&lt;/xref:System.Windows.Window.LocationChanged&gt;&lt;/xref:System.Windows.Window.Left%2A&gt;&lt;/xref:System.Windows.Window.Icon%2A&gt;&lt;/xref:System.Windows.Window.DragMove%2A&gt;&lt;/xref:System.Windows.Window.ContentRendered&gt;&lt;/xref:System.Windows.Window.AllowsTransparency%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;xref:System.Windows.Application&gt; exposes special support for managing all of the windows in an application:      -   Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">此外，&lt;xref:System.Windows.Application&gt;公开对管理所有 windows 应用程序中的特殊支持:-应用程序保留当前应用程序中实例化的所有窗口的列表。&lt;/xref:System.Windows.Application&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This list is exposed by the &lt;xref:System.Windows.Application.Windows%2A&gt; property.</source>
          <target state="translated">此列表由公开&lt;xref:System.Windows.Application.Windows%2A&gt;属性。&lt;/xref:System.Windows.Application.Windows%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>-   By default, &lt;xref:System.Windows.Application.MainWindow%2A&gt; is automatically set with a reference to the first Window that is instantiated in an application.</source>
          <target state="translated">-默认情况下，&lt;xref:System.Windows.Application.MainWindow%2A&gt;自动设置为第一个应用程序中实例化的窗口的引用。&lt;/xref:System.Windows.Application.MainWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">这从而使应用程序主窗口的窗口。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A Window can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">可以使用标记、 标记和代码隐藏或代码来实现一个窗口。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Window is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated">窗口主要用于显示窗口和独立应用程序的对话框。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use &lt;xref:System.Windows.Navigation.NavigationWindow&gt; instead; &lt;xref:System.Windows.Navigation.NavigationWindow&gt; derives from Window and extends it with browser-style navigation support.</source>
          <target state="translated">但是，需要在窗口级别，诸如向导，导航的应用程序则可改用&lt;xref:System.Windows.Navigation.NavigationWindow&gt;;&lt;xref:System.Windows.Navigation.NavigationWindow&gt;派生自窗口并浏览器样式导航支持与对其进行扩展。&lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Islands of navigable content can be incorporated into other content and content containers using &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 可导航内容岛可以合并到使用&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt;其他内容和内容容器</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Window needs <ph id="ph1">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated">窗口需要<ph id="ph1">`UnmanagedCode`</ph>要实例化的安全权限。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This has the following consequences:      -   <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated">这具有以下结果:- <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]</ph>-您可以单独部署应用程序将请求权限提升时从 Internet 或本地 Intranet 区域中启动。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-   <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated">- <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> ，请求的任何内容小于完全权限将不能实例化窗口或对话框。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关独立应用程序部署和安全注意事项的信息，请参阅<bpt id="p1">[</bpt>WPF 安全策略 — 平台安全性<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A Window is a &lt;xref:System.Windows.Controls.ContentControl&gt;, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">窗口是&lt;xref:System.Windows.Controls.ContentControl&gt;，这意味着，它可以包含任何类型 （如字符串、 一个映像或一个面板） 的单个对象。&lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Windows.Controls.ContentControl&gt; class.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Windows.Controls.ContentControl&gt;类。&lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Also, Window is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">此外，窗口是根元素，因此，不能是另一个元素的内容的一部分。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties set on a Window through a style will not be applied at run time.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;， &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;， &lt;xref:System.Windows.Window.Top%2A&gt;，和&lt;xref:System.Windows.Window.Left%2A&gt;通过样式的窗口上设置的属性将不会应用在运行时。&lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Customizing the Window Control    To apply the same property settings to multiple Window controls, use the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.</source>
          <target state="translated">窗口控件到自定义适用于多个窗口控件，使用的相同的属性设置&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;属性。&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can modify the default &lt;xref:System.Windows.Controls.ControlTemplate&gt; to give the control a unique appearance.</source>
          <target state="translated">你可以修改默认&lt;xref:System.Windows.Controls.ControlTemplate&gt;提供独特外观的控制。&lt;/xref:System.Windows.Controls.ControlTemplate&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about creating a &lt;xref:System.Windows.Controls.ControlTemplate&gt;, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关创建&lt;xref:System.Windows.Controls.ControlTemplate&gt;，请参阅<bpt id="p1">[</bpt>通过创建 ControlTemplate 自定义现有的控件的外观<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。&lt;/xref:System.Windows.Controls.ControlTemplate&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To see the parts and states that are specific to the Window, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">若要查看的部件和特定于窗口的状态，请参阅<bpt id="p1">[</bpt>窗口样式和模板<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">对于此控件的依赖项属性可能由控件的默认样式设置。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">桌面主题用应用程序运行时确定的默认样式。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>默认 WPF 主题<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Setting a visual property will only have an effect if that property is both present in Window control's default template and is set by using a .</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 设置 visual 属性仅会产生作用如果该属性既存在窗口控件的默认模板中，通过设置。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)</ept>.</source>
          <target state="translated">可以在的"更改 Visual 结构的控件"一节中找到的可视属性列表<bpt id="p1">[</bpt>通过创建 ControlTemplate 自定义现有的控件的外观<ept id="p1">](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The constructor initializes the &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;, &lt;xref:System.Windows.Window.Top%2A&gt;, and &lt;xref:System.Windows.Window.Left%2A&gt; properties to their default &lt;xref:System.Windows.Window&gt; values.</source>
          <target state="translated">构造函数初始化&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;， &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;， &lt;xref:System.Windows.Window.Top%2A&gt;，和&lt;xref:System.Windows.Window.Left%2A&gt;为其默认值的属性&lt;xref:System.Windows.Window&gt;值。&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a window is created within an &lt;xref:System.AppDomain&gt; that has an &lt;xref:System.Windows.Application&gt; object, the constructor adds the &lt;xref:System.Windows.Window&gt; object to the set of &lt;xref:System.Windows.Application&gt;-managed windows via the &lt;xref:System.Windows.Application.Windows%2A&gt; property of the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">如果在创建一个窗口&lt;xref:System.AppDomain&gt;具有&lt;xref:System.Windows.Application&gt;对象，构造函数将添加&lt;xref:System.Windows.Window&gt;对象的一套&lt;xref:System.Windows.Application&gt;-管理通过 windows&lt;xref:System.Windows.Application.Windows%2A&gt;属性&lt;xref:System.Windows.Application&gt;对象。&lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Application.Windows%2A&gt; &lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Application&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">尝试将该窗口调到前台，并将其激活。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">确定窗口是否已激活的规则都与使用的相同<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph><ph id="ph2">`SetForegroundWindow`</ph>函数 (User32.dll)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, &lt;xref:System.Windows.Application.Activated&gt; event is raised.</source>
          <target state="translated">如果显示窗口激活在<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>不是用户的前景应用程序，应用程序&lt;xref:System.Windows.Application.Activated&gt;引发事件。&lt;/xref:System.Windows.Application.Activated&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> was successfully activated; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>成功激活; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">当窗口变得前景窗口时发生。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A window is activated (becomes the foreground window) when:      -   The window is first opened.</source>
          <target state="translated">激活一个窗口 （变成前台窗口） 时:-首次打开窗口。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-   A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">-A 用户通过使用鼠标，按 ALT + 选项卡上，或从任务管理器中选择它切换到该窗口。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-   A user clicks the window's taskbar button.</source>
          <target state="translated">-用户单击窗口的任务栏按钮。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows that need to detect when they become activate can handle the Activated event.</source>
          <target state="translated">需要检测何时变成活动的 Windows 可以处理已激活事件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">第一次激活窗口之后，它可能会停用并且在其生存期内多次重新激活。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
          <target state="translated">如果应用程序的行为或状态取决于其激活状态，它可以检查&lt;xref:System.Windows.Window.IsActive%2A&gt;以确定哪些激活状态的单元&lt;/xref:System.Windows.Window.IsActive%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An application can also be &lt;xref:System.Windows.Application.Activated&gt;.</source>
          <target state="translated">应用程序也可以是&lt;xref:System.Windows.Application.Activated&gt;.&lt;/xref:System.Windows.Application.Activated&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">获取或设置一个值，该值指示窗口的工作区是否支持透明度。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Controls.Control.Background%2A&gt; property of a window is set to a transparent color, using &lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt; for example, the window remains opaque.</source>
          <target state="translated">当&lt;xref:System.Windows.Controls.Control.Background%2A&gt;窗口的属性设置为透明颜色、 使用&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;例如，窗口将保持不透明。&lt;/xref:System.Windows.Media.Brushes.Transparent%2A&gt; &lt;/xref:System.Windows.Controls.Control.Background%2A&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">这意味着无法查看桌面和任何正在运行的应用程序"beneath"窗口。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To enable this type of transparency, AllowsTransparency must be set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">若要启用此类型的透明度，AllowsTransparency 必须设置为<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AllowsTransparency exists to facilitate the creation of non-rectangular windows, and, consequently, when AllowsTransparency is set to <ph id="ph1">`true`</ph>, a window's &lt;xref:System.Windows.Window.WindowStyle%2A&gt; property must be set to &lt;xref:System.Windows.WindowStyle&gt;.</source>
          <target state="translated">AllowsTransparency 存在来帮助创建非矩形窗口，并且，因此，AllowsTransparency 设置为<ph id="ph1">`true`</ph>，窗口的&lt;xref:System.Windows.Window.WindowStyle%2A&gt;属性必须设置为&lt;xref:System.Windows.WindowStyle&gt;.&lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.Window.WindowStyle%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowAllowsTransparency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.AllowsTransparencyProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowAllowsTransparency"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.AllowsTransparencyProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.AllowsTransparencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window supports transparency; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果窗口支持透明度;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A window that has a &lt;xref:System.Windows.Window.WindowStyle*&gt; value of anything other than <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">该窗口具有&lt;xref:System.Windows.Window.WindowStyle*&gt;的任何内容以外的其他值<bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Window.WindowStyle*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.AllowsTransparency*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.AllowsTransparency*&gt;依赖项属性。&lt;/xref:System.Windows.Window.AllowsTransparency*&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">重写此方法以排列和调整大小窗口和及其子元素。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>ArrangeOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">时，不将调用 ArrangeOverride&lt;xref:System.Windows.UIElement.Visibility%2A&gt;属性具有的&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt;值&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, ArrangeOverride is called.</source>
          <target state="translated">如果值&lt;xref:System.Windows.UIElement.Visibility%2A&gt;属性&lt;xref:System.Windows.Visibility&gt;或&lt;xref:System.Windows.Visibility&gt;，称为 ArrangeOverride。&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 时&lt;xref:System.Windows.Window.Show%2A&gt;或&lt;xref:System.Windows.Window.ShowDialog%2A&gt;调用时，&lt;xref:System.Windows.UIElement.Visibility%2A&gt;&lt;xref:System.Windows.Window&gt;设置为&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;&lt;/xref:System.Windows.Window&gt;的属性&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，反映窗口应该用来排列自身及其子元素的最终大小。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the actual size that was used.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，反映实际使用的实际大小。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Manually closes a <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">手动关闭<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:      -   ALT+F4.</source>
          <target state="translated">A&lt;xref:System.Windows.Window&gt;可以使用几，之一关闭的已知、 系统提供的机制位于其标题栏中，包括:-ALT + F4。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-   System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">系统菜单 |<bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">-<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>按钮。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:      -   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated">也可以使用几个已知机制之一的客户端区域中提供的开发人员，包括关闭&lt;xref:System.Windows.Window&gt;:-<bpt id="p1">**</bpt>文件<ept id="p1">**</ept>|<bpt id="p2">**</bpt>退出<ept id="p2">**</ept>主窗口上。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated">-   <bpt id="p1">**</bpt>File<ept id="p1">**</ept> |<bpt id="p2">**</bpt>关闭<ept id="p2">**</ept>或<bpt id="p3">**</bpt>关闭<ept id="p3">**</ept>子窗口上的按钮。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set &lt;xref:System.Windows.Window.DialogResult%2A&gt;, which automatically closes a window that was opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph><bpt id="p1">**</bpt>确定<ept id="p1">**</ept>和<bpt id="p2">**</bpt>取消<ept id="p2">**</ept>出现在对话框中的按钮也是开发人员提供，虽然可能会设置&lt;xref:System.Windows.Window.DialogResult%2A&gt;，这会自动关闭，已通过调用&lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;打开的窗口&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These mechanisms require you to explicitly call Close to close a window.</source>
          <target state="translated">这些机制要求你显式调用关闭以关闭窗口。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If a window, opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, and with a &lt;xref:System.Windows.Controls.Button&gt; with its &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果一个窗口，打开通过调用&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，且&lt;xref:System.Windows.Controls.Button&gt;与其&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;属性设置为 true，将自动关闭，或者单击该按钮，或按下 esc 键时。&lt;/xref:System.Windows.Controls.Button.IsCancel%2A&gt; &lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the window was opened using &lt;xref:System.Windows.Window.Show%2A&gt;, however, Close must be explicitly called, such as from &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the &lt;xref:System.Windows.Controls.Button&gt;.</source>
          <target state="translated">如果使用&lt;xref:System.Windows.Window.Show%2A&gt;，但是，关闭必须显式调用，如&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件处理程序&lt;xref:System.Windows.Controls.Button&gt;.&lt;/xref:System.Windows.Controls.Button&gt;&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;&lt;/xref:System.Windows.Window.Show%2A&gt;打开窗口</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Closing a window causes the &lt;xref:System.Windows.Window.Closing&gt; event to be raised.</source>
          <target state="translated">关闭窗口会导致&lt;xref:System.Windows.Window.Closing&gt;引发事件。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Window.Closing&gt; event isn't canceled, the following occurs:      -   The &lt;xref:System.Windows.Window&gt; is removed from &lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt; (if an &lt;xref:System.Windows.Application&gt; object exists).</source>
          <target state="translated">如果&lt;xref:System.Windows.Window.Closing&gt;不取消事件，将发生以下情况:-&lt;xref:System.Windows.Window&gt;从删除&lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt;(如果&lt;xref:System.Windows.Application&gt;对象存在)。&lt;/xref:System.Windows.Application&gt; &lt;/xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window&gt; is removed from the owner &lt;xref:System.Windows.Window&gt; if the owner/owned relationship was established before the owned &lt;xref:System.Windows.Window&gt; was shown and after the owner &lt;xref:System.Windows.Window&gt; was opened.</source>
          <target state="translated">-&lt;xref:System.Windows.Window&gt;从所有者删除&lt;xref:System.Windows.Window&gt;如果所有者/附属关系已建立之前拥有&lt;xref:System.Windows.Window&gt;所示和所有者之后&lt;xref:System.Windows.Window&gt;已打开。&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
          <target state="translated">-&lt;xref:System.Windows.Window.Closed&gt;引发事件。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-   Unmanaged resources created by the &lt;xref:System.Windows.Window&gt; are disposed.</source>
          <target state="translated">非托管资源创建的&lt;xref:System.Windows.Window&gt;释放。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-   If &lt;xref:System.Windows.Window.ShowDialog%2A&gt; was called to show the &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Window.ShowDialog%2A&gt; returns.</source>
          <target state="translated">-如果&lt;xref:System.Windows.Window.ShowDialog%2A&gt;调用以显示&lt;xref:System.Windows.Window&gt;，&lt;xref:System.Windows.Window.ShowDialog%2A&gt;返回。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Closing a &lt;xref:System.Windows.Window&gt; causes any windows that it owns to be closed.</source>
          <target state="translated">关闭&lt;xref:System.Windows.Window&gt;会导致它拥有即将关闭任何 windows。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Furthermore, closing a &lt;xref:System.Windows.Window&gt; may cause an application to stop running depending on how the &lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt; property is set.</source>
          <target state="translated">此外，关闭&lt;xref:System.Windows.Window&gt;可能会导致应用程序停止正在运行的具体取决于如何&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt;属性设置。&lt;/xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">当窗口即将关闭时发生。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">一旦将引发此事件，不能阻止结束指定窗口。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Hide<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>1&gt; 设置，或&lt;&gt; <ept id="p1">*</ept>1&gt;， &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>1&gt;，或&lt;&gt; <ept id="p2">*</ept>1&gt; 窗口正在关闭时调用。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs directly after &lt;xref:System.Windows.Window.Close*&gt; is called, and can be handled to cancel window closure.</source>
          <target state="translated">直接后发生&lt;xref:System.Windows.Window.Close*&gt;调用，并且可以对其进行处理，以便取消关闭窗口。&lt;/xref:System.Windows.Window.Close*&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Closing can be handled to detect when a window is being closed (for example, when &lt;xref:System.Windows.Window.Close%2A&gt; is called).</source>
          <target state="translated">可以处理结束来检测何时关闭窗口 (例如，当&lt;xref:System.Windows.Window.Close%2A&gt;称为)。&lt;/xref:System.Windows.Window.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Furthermore, Closing can be used to prevent a window from closing.</source>
          <target state="translated">此外，结束可用来阻止关闭窗口。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To prevent a window from closing, you can set the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; property of the &lt;xref:System.ComponentModel.CancelEventArgs&gt; argument to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">若要阻止关闭窗口，可以设置&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;属性&lt;xref:System.ComponentModel.CancelEventArgs&gt;参数<ph id="ph1">`true`</ph>。&lt;/xref:System.ComponentModel.CancelEventArgs&gt; &lt;/xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The Closing event is raised when &lt;xref:System.Windows.Window.Close%2A&gt; is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated">引发 Closing 事件时&lt;xref:System.Windows.Window.Close%2A&gt;调用时，如果单击窗口关闭按钮时，或者如果用户按 ALT + F4。&lt;/xref:System.Windows.Window.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's Closing event is not raised.</source>
          <target state="translated">如果拥有的窗口已打开由其所有者窗口中使用&lt;xref:System.Windows.Window.Show%2A&gt;，和所有者窗口封闭式的则不会引发拥有的窗口关闭事件。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If the owner of a window is closed (see &lt;xref:System.Windows.Window.Owner%2A&gt;), Closing is not raised on the owned window.</source>
          <target state="translated">如果所有者窗口已关闭 (请参阅&lt;xref:System.Windows.Window.Owner%2A&gt;) 上拥有窗口, 不引发结束。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called, the Closing event for each window is raised.</source>
          <target state="translated">如果&lt;xref:System.Windows.Application.Shutdown%2A&gt;调用时，结束事件引发的每个窗口。&lt;/xref:System.Windows.Application.Shutdown%2A&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, if Closing is canceled, cancellation is ignored.</source>
          <target state="translated">但是，如果结算被取消，则忽略取消。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If a session ends because a user logs off or shuts down, Closing is not raised; handle &lt;xref:System.Windows.Application.SessionEnding&gt; to implement code that cancels application closure.</source>
          <target state="translated">如果由于用户注销或关闭，会话结束，则不会引发结束;处理&lt;xref:System.Windows.Application.SessionEnding&gt;取消应用程序闭包的代码中实现。&lt;/xref:System.Windows.Application.SessionEnding&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the Closing event, cancel it, and call the &lt;xref:System.Windows.Window.Hide%2A&gt; method.</source>
          <target state="translated">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要包含重新实例化窗口中显示它每次，你可以处理结束事件，请取消它，并调用&lt;xref:System.Windows.Window.Hide%2A&gt;方法。&lt;/xref:System.Windows.Window.Hide%2A&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to reopen it.</source>
          <target state="translated">然后，可以调用&lt;xref:System.Windows.Window.Show%2A&gt;的同一个实例，以重新打开它。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.Visibility<bpt id="p1">*</bpt>&gt; is set, or &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;, &lt;xref:System.Windows.Window.ShowDialog<bpt id="p2">*</bpt>&gt;, or &lt;xref:System.Windows.Window.Close<ept id="p2">*</ept>&gt; is called while a window is closing.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>1&gt; 设置，或&lt;&gt; <ept id="p1">*</ept>1&gt;， &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>1&gt;，或&lt;&gt; <ept id="p2">*</ept>1&gt; 窗口正在关闭时调用。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">在呈现窗口的内容之后发生。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">如果窗口不具有任何内容，则不会引发此事件。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">当窗口变得后台窗口时发生。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A window is deactivated (becomes a background window) when:      -   A user switches to another window in the current application.</source>
          <target state="translated">停用一个窗口 （变成后台窗口） 时:-用户切换到当前应用程序中的另一个窗口。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-   A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">-A 用户通过使用 ALT + TAB 或使用任务管理器切换到另一个应用程序中的窗口。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>-   A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">-用户单击另一个应用程序中的窗口任务栏按钮。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Windows that need to detect when they become deactivated by handling the Deactivated event.</source>
          <target state="translated">需要时变成停用处理已停用事件进行检测的 Windows。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">窗口首次停用后，它可能会重新激活并在其生存期内多次停用。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can inspect &lt;xref:System.Windows.Window.IsActive%2A&gt; to determine which activation state it's in.</source>
          <target state="translated">如果应用程序的行为或状态取决于其激活状态，它可以检查&lt;xref:System.Windows.Window.IsActive%2A&gt;以确定哪些激活状态的单元&lt;/xref:System.Windows.Window.IsActive%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An application can also be &lt;xref:System.Windows.Application.Deactivated&gt;.</source>
          <target state="translated">应用程序也可以是&lt;xref:System.Windows.Application.Deactivated&gt;.&lt;/xref:System.Windows.Application.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the dialog result value, which is the value that is returned from the &lt;xref:System.Windows.Window.ShowDialog*&gt; method.</source>
          <target state="translated">获取或设置对话框结果值，该值是从返回的值&lt;xref:System.Windows.Window.ShowDialog*&gt;方法。&lt;/xref:System.Windows.Window.ShowDialog*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>DialogResult can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph1">`true`</ph>) or canceled (<ph id="ph2">`false`</ph>) the dialog box.</source>
          <target state="translated">可以显示一个对话框，以确定用户是否接受代码中使用 DialogResult (<ph id="ph1">`true`</ph>) 或已取消 (<ph id="ph2">`false`</ph>) 对话框。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">如果已接受对话框中，这表示打开对话框中检索用户收集的数据并将其处理的代码。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">如果已取消对话框中，但是，这表明调用的代码应停止任何进一步处理。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>By default, a dialog box is canceled when a user does one of the following:      -   PressesALT+F4.</source>
          <target state="translated">默认情况下，对话框中时，是否取消用户执行下列操作之一:-PressesALT + F4。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-   Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">-单击<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>按钮。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-   Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">-选择<bpt id="p1">**</bpt>关闭<ept id="p1">**</ept>从系统菜单。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In all of these cases, DialogResult is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">在所有这些情况下，DialogResult 是<ph id="ph1">`false`</ph>默认情况下。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose &lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对话框中通常会提供一个用于取消一个对话框，为按钮的特殊按钮其&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;属性设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Controls.Button.IsCancel%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">或者它按下时，或按下 ESC 键时，这种方式配置一个按钮将自动关闭窗口。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In either of these cases, DialogResult remains <ph id="ph1">`false`</ph>.</source>
          <target state="translated">无论在哪种情况下，DialogResult 保持<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A dialog box also typically provides an accept button, which is the button whose &lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对话框中通常还提供一个接受按钮，这是按钮其&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;属性设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Controls.Button.IsDefault%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A button configured this way will raise its &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event when either it or the ENTER key is pressed.</source>
          <target state="translated">这种方式配置一个按钮将引发其&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件时按下它或 ENTER 键。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>However, it won't automatically close the dialog box, nor will it set DialogResult to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">但是，它不会自动关闭的对话框中，也没有将它设置 DialogResult 为<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You need to manually write this code, usually from the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event handler for the default button.</source>
          <target state="translated">你需要手动编写此代码中，通常从&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件处理程序的默认按钮。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>DialogResult is <ph id="ph1">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated">DialogResult 是<ph id="ph1">`null`</ph>时显示的对话框但不接受或已取消。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>After a dialog box closes, you can get the dialog result from the value returned by &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method, or by inspecting the DialogResult property.</source>
          <target state="translated">在对话框关闭后，你可以从返回的值获取的对话框结果&lt;xref:System.Windows.Window.ShowDialog%2A&gt;方法，或通过检查 DialogResult 属性。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>DialogResult can only be set when a &lt;xref:System.Windows.Window&gt; is opened by calling its &lt;xref:System.Windows.Window.ShowDialog%2A&gt; method.</source>
          <target state="translated">时，才可以设置 DialogResult&lt;xref:System.Windows.Window&gt;打开通过调用其&lt;xref:System.Windows.Window.ShowDialog%2A&gt;方法。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt;.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph>类型&lt;xref:System.Boolean&gt;.&lt;/xref:System.Boolean&gt;值</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>DialogResult is set before a window is opened by calling &lt;xref:System.Windows.Window.ShowDialog<bpt id="p1">*</bpt>&gt;.       -or-       DialogResult is set on a window that is opened by calling &lt;xref:System.Windows.Window.Show<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">之前通过调用打开一个窗口设置 DialogResult &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>1&gt;。      -或-DialogResult 设置在通过调用打开的窗口上&lt;&gt; <ept id="p1">*</ept>1&gt;。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">该窗口是在其屏幕的 DPI 显示更改后发生。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>为屏幕窗口的 DPI 时更改。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">允许要通过使用其左键按下鼠标拖动到窗口的工作区的暴露区域上方的窗口。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The left mouse button must be down when DragMove is called.</source>
          <target state="translated">DragMove 调用时，鼠标左键必须已关闭。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>One way to detect when the left mouse button is pressed is to handle the &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; event.</source>
          <target state="translated">当按下鼠标左键时进行检测的一种方法是处理&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;事件。&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>When DragMove is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">当调用 DragMove 时，必须窗口的工作区的暴露区域上方按下鼠标左键。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The left mouse button is not down.</source>
          <target state="translated">未按下鼠标左键。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a reference to the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">返回的引用<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>承载内容的树范围内的依赖对象所在的对象。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The dependency object.</source>
          <target state="translated">依赖项对象中。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> reference to the host window.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指向主机窗口的引用。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph>为 null。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Makes a window invisible.</source>
          <target state="translated">使窗口不可见。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A window is not closed when it is hidden, and neither the &lt;xref:System.Windows.Window.Closing&gt; nor &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
          <target state="translated">当其处于隐藏状态，不关闭窗口并且不&lt;xref:System.Windows.Window.Closing&gt;也不&lt;xref:System.Windows.Window.Closed&gt;引发事件。&lt;/xref:System.Windows.Window.Closed&gt; &lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Instead, the window's &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is set to &lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;.</source>
          <target state="translated">相反，该窗口的&lt;xref:System.Windows.UIElement.Visibility%2A&gt;属性设置为&lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Visibility?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If a window is the application's &lt;xref:System.Windows.Application.MainWindow%2A&gt; and the application's &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is &lt;xref:System.Windows.ShutdownMode&gt;, the application does not shut down.</source>
          <target state="translated">如果一个窗口是应用程序的&lt;xref:System.Windows.Application.MainWindow%2A&gt;和应用程序的&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;是&lt;xref:System.Windows.ShutdownMode&gt;，应用程序不会关闭。&lt;/xref:System.Windows.ShutdownMode&gt; &lt;/xref:System.Windows.Application.ShutdownMode%2A&gt; &lt;/xref:System.Windows.Application.MainWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is &lt;xref:System.Windows.ShutdownMode&gt;.</source>
          <target state="translated">同样，应用程序不会关闭如果窗口是唯一的窗口，并且应用程序的关闭模式是&lt;xref:System.Windows.ShutdownMode&gt;.&lt;/xref:System.Windows.ShutdownMode&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the &lt;xref:System.Windows.Window.Closing&gt; event, cancel it, and call the Hide method.</source>
          <target state="translated">如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要重新实例化窗口每次显示它，你可以处理&lt;xref:System.Windows.Window.Closing&gt;事件，取消它，并调用隐藏方法。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Then, you can call &lt;xref:System.Windows.Window.Show%2A&gt; on the same instance to re-open it.</source>
          <target state="translated">然后，可以调用&lt;xref:System.Windows.Window.Show%2A&gt;的同一个实例，以重新打开它。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Hide is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">在正在关闭的窗口上调用隐藏 (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已关闭 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">获取或设置窗口的图标。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:      -   One assembly icon, which is specified by using the <ph id="ph2">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>独立应用程序有两种类型的图标:-通过使用指定的一个程序集图标<ph id="ph2">`&lt;ApplicationIcon&gt;`</ph>属性在应用程序的项目中生成文件。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">此图标用作程序集桌面图标。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在调试时 Visual Studio 中，宿主进程由于不可能会出现你图标。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">如果你运行可执行文件，则将显示图标。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>承载进程 (vshost.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>-   One icon per window that is specified by setting Icon.</source>
          <target state="translated">-每个窗口指定通过设置图标的一个图标。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">对每个窗口中，在其标题栏中，其任务栏按钮，以及其 ALT TAB 应用程序选择列表项，则使用此图标。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window always displays an icon.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>窗口始终显示一个图标。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When one is not provided by setting Icon, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> chooses an icon to display based on the following rules:      1.</source>
          <target state="translated">一个不提供了设置图标，<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>选择要显示的图标根据以下规则︰ 1。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">如果指定，请使用程序集图标。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph> icon.</source>
          <target state="translated">如果未指定的程序集图标，则使用默认<ph id="ph1">[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]</ph>图标。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you use Icon to specify a custom window icon, you can restore the default application icon by setting Icon to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果您使用图标来指定自定义窗口图标，则可以通过将图标设置为还原的默认应用程序图标<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">一个图标可以采用多种方式在<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>，包括标题栏的一个窗口，一个窗口的任务栏中显示 ALT + TAB 文件选择列表。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">其中每个演示使用不同的大小; 的图标ALT + TAB 文件选择列表中显示 32 x 32 像素的图标时，16 x 16 像素的图标被显示在窗口的标题栏和任务栏中。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">某些应用程序，如<ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]</ph>，提供<bpt id="p1">**</bpt>视图<ept id="p1">**</ept>菜单，您可以选择你想要查看的图标的大小。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">若要适应不同的显示大小，图标文件由组成一个或多个实际图标其中每个表示面向特定的大小和颜色深度的图标版本。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">例如，一个图标可能只有单个 16 x 16 像素图标具有 16 种颜色，而另一个可能包含 16 x 16 像素和 32 x 32 像素图标具有 16 种颜色和 256 种颜色。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If icons for all possible sizes and color depths exist within an icon file, &lt;xref:System.Windows.Window&gt; will use the appropriate icon.</source>
          <target state="translated">如果在图标文件中，存在于所有可能的大小和颜色深度图标&lt;xref:System.Windows.Window&gt;将使用相应图标。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If an icon file contains only a subset of all the possible icons, &lt;xref:System.Windows.Window&gt; uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">如果图标文件包含所有可能的图标的一个子集&lt;xref:System.Windows.Window&gt;递减大小和颜色深度的顺序使用下一个最适当的图标。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The result is that an icon will always be used by &lt;xref:System.Windows.Window&gt;, although the icon used may not target the required size and color depth.</source>
          <target state="translated">结果是一个图标将始终使用由&lt;xref:System.Windows.Window&gt;，尽管所用的图标不可能以目标所需的大小和颜色深度。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">例如，具有 16 种颜色 16 x 16 像素的图标还可能用于进行显示，作为具有 256 种颜色 32 x 32 像素的图标。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">这可能会导致意外的视觉效果，如像素化，但可避免通过创建的所有目标的大小和颜色深度图标。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIcon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IconProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIcon"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.IconProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.IconProperty&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the icon.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，表示图标。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Icon*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.Icon*&gt;依赖项属性。&lt;/xref:System.Windows.Window.Icon*&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">获取一个值，该值指示窗口是否处于活动状态。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">活动窗口是用户的当前前景色窗口，并具有焦点的标题栏活动外观由表示。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the &lt;xref:System.Windows.Window.Topmost%2A&gt; property.</source>
          <target state="translated">活动窗口也将未显式设置的所有顶级窗口的顶级&lt;xref:System.Windows.Window.Topmost%2A&gt;属性。&lt;/xref:System.Windows.Window.Topmost%2A&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIsActive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.IsActiveProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowIsActive"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.IsActiveProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.IsActiveProperty&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is active; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果窗口处于活动状态;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.IsActive*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.IsActive*&gt;依赖项属性。&lt;/xref:System.Windows.Window.IsActive*&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">获取或设置窗口的左边缘，相对于桌面的位置。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the left edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">当&lt;xref:System.Windows.Window&gt;最大化或最小化，左边的缘的还原点&lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt;此值表示&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This property cannot be set through a style.</source>
          <target state="translated">不能通过样式设置此属性。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you do not specify a value, Left is set to the system default value.</source>
          <target state="translated">如果未指定一个值，则会将左侧设置为系统默认值。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You can also specify the system default value by setting Left to &lt;xref:System.Double.NaN&gt;.</source>
          <target state="translated">此外可以通过设置从左到&lt;xref:System.Double.NaN&gt;.&lt;/xref:System.Double.NaN&gt;指定的系统默认值</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Left.</source>
          <target state="translated">既不&lt;xref:System.Double.NegativeInfinity&gt;也不&lt;xref:System.Double.PositiveInfinity&gt;是忽略有效的值。&lt;/xref:System.Double.PositiveInfinity&gt; &lt;/xref:System.Double.NegativeInfinity&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowLeft"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.LeftProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowLeft"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.LeftProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.LeftProperty&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">窗口的位置的左边缘，逻辑单位 (1/96th 每英寸)。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Left*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.Left*&gt;依赖项属性。&lt;/xref:System.Windows.Window.Left*&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">窗口的位置会发生更改时发生。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>A window's location changes when:      -   A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">窗口的位置会发生更改时:-用户将窗口移动通过拖动窗口的标题栏。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>-   A window is moved after &lt;xref:System.Windows.Window.DragMove%2A&gt; is called.</source>
          <target state="translated">-A 窗口移动后&lt;xref:System.Windows.Window.DragMove%2A&gt;称为。&lt;/xref:System.Windows.Window.DragMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>-   Either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; property is set programmatically.</source>
          <target state="translated">-或者&lt;xref:System.Windows.Window.Left%2A&gt;或&lt;xref:System.Windows.Window.Top%2A&gt;以编程方式设置属性。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>-   The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated">-<bpt id="p1">**</bpt>移动<ept id="p1">**</ept>选择窗口的系统菜单的菜单项。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Window.WindowState%2A&gt; property is changed.</source>
          <target state="translated">-&lt;xref:System.Windows.Window.WindowState%2A&gt;属性更改。&lt;/xref:System.Windows.Window.WindowState%2A&gt;</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">获取窗口的逻辑子元素的枚举数。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; a window's logical child elements.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator&gt;窗口的逻辑子元素。&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">重写此方法来测量窗口的大小。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>MeasureOverride is not called when the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property has a value of &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">时，不将调用 MeasureOverride&lt;xref:System.Windows.UIElement.Visibility%2A&gt;属性具有的&lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt;值&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property is either &lt;xref:System.Windows.Visibility&gt; or &lt;xref:System.Windows.Visibility&gt;, MeasureOverride is called.</source>
          <target state="translated">如果值&lt;xref:System.Windows.UIElement.Visibility%2A&gt;属性&lt;xref:System.Windows.Visibility&gt;或&lt;xref:System.Windows.Visibility&gt;，称为 MeasureOverride。&lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.Visibility&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When either &lt;xref:System.Windows.Window.Show%2A&gt; or &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are called, the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of a &lt;xref:System.Windows.Window&gt; is set to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 时&lt;xref:System.Windows.Window.Show%2A&gt;或&lt;xref:System.Windows.Window.ShowDialog%2A&gt;调用时，&lt;xref:System.Windows.UIElement.Visibility%2A&gt;&lt;xref:System.Windows.Window&gt;设置为&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;&lt;/xref:System.Windows.Window&gt;的属性&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the available size that this window can give to the child.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>反映此窗口可以提供给子级的可用大小。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">无穷大可以指定为一个值以指示窗口将为内容的可用大小。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Size"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，反映此窗口确定其在布局中，根据其计算子级的规模的过程所需的大小。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>OnActivated raises the &lt;xref:System.Windows.Window.Activated&gt; event.</source>
          <target state="translated">OnActivated 引发&lt;xref:System.Windows.Window.Activated&gt;事件。&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnActivated.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnActivated。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnActivated on the base class if &lt;xref:System.Windows.Window.Activated&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnActivated 基本类如果&lt;xref:System.Windows.Window.Activated&gt;需要引发。&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>OnClosed raises the &lt;xref:System.Windows.Window.Closed&gt; event.</source>
          <target state="translated">OnClosed 引发&lt;xref:System.Windows.Window.Closed&gt;事件。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosed.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnClosed。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnClosed on the base class if &lt;xref:System.Windows.Window.Closed&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnClosed 基本类如果&lt;xref:System.Windows.Window.Closed&gt;需要引发。&lt;/xref:System.Windows.Window.Closed&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>OnClosing raises the &lt;xref:System.Windows.Window.Closing&gt; event.</source>
          <target state="translated">OnClosing 引发&lt;xref:System.Windows.Window.Closing&gt;事件。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnClosing.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnClosing。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnClosing on the base class if &lt;xref:System.Windows.Window.Closing&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnClosing 基本类如果&lt;xref:System.Windows.Window.Closing&gt;需要引发。&lt;/xref:System.Windows.Window.Closing&gt;</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.CancelEventArgs&gt;包含事件数据。&lt;/xref:System.ComponentModel.CancelEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Called when the &lt;xref:System.Windows.Controls.ContentControl.Content*&gt; property changes.</source>
          <target state="translated">时调用&lt;xref:System.Windows.Controls.ContentControl.Content*&gt;属性更改。&lt;/xref:System.Windows.Controls.ContentControl.Content*&gt;</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">对旧的内容树的根的引用。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">对新的内容树的根的引用。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>OnContentRendered raises the &lt;xref:System.Windows.Window.ContentRendered&gt; event.</source>
          <target state="translated">OnContentRendered 引发&lt;xref:System.Windows.Window.ContentRendered&gt;事件。&lt;/xref:System.Windows.Window.ContentRendered&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnContentRendered.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnContentRendered。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnContentRendered on the base class if &lt;xref:System.Windows.Window.ContentRendered&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnContentRendered 基本类如果&lt;xref:System.Windows.Window.ContentRendered&gt;需要引发。&lt;/xref:System.Windows.Window.ContentRendered&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Creates and returns a <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">创建并返回<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象的<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;.</source>
          <target state="translated">此方法将替代&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;.&lt;/xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>OnDeactivated raises the &lt;xref:System.Windows.Window.Deactivated&gt; event.</source>
          <target state="translated">OnDeactivated 引发&lt;xref:System.Windows.Window.Deactivated&gt;事件。&lt;/xref:System.Windows.Window.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnDeactivated.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnDeactivated。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnDeactivated on the base class if &lt;xref:System.Windows.Window.Deactivated&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnDeactivated 基本类如果&lt;xref:System.Windows.Window.Deactivated&gt;需要引发。&lt;/xref:System.Windows.Window.Deactivated&gt;</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">时调用此窗口呈现更改 DPI。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The previous DPI scale setting.</source>
          <target state="translated">以前的 DPI 缩放设置。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The new DPI scale setting.</source>
          <target state="translated">新的 DPI 缩放设置。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>OnLocationChanged raises the &lt;xref:System.Windows.Window.LocationChanged&gt; event.</source>
          <target state="translated">OnLocationChanged 引发&lt;xref:System.Windows.Window.LocationChanged&gt;事件。&lt;/xref:System.Windows.Window.LocationChanged&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnLocationChanged.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnLocationChanged。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnLocationChanged on the base class if &lt;xref:System.Windows.Window.LocationChanged&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnLocationChanged 基本类如果&lt;xref:System.Windows.Window.LocationChanged&gt;需要引发。&lt;/xref:System.Windows.Window.LocationChanged&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">时调用<bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件发生。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This implementation does not change the handled state (the &lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt; property) of the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event data.</source>
          <target state="translated">此实现不会更改已处理的状态 (&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;属性) 的&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;事件数据。&lt;/xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; &lt;/xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">事件的数据。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>OnSourceInitialized raises the &lt;xref:System.Windows.Window.SourceInitialized&gt; event.</source>
          <target state="translated">OnSourceInitialized 引发&lt;xref:System.Windows.Window.SourceInitialized&gt;事件。&lt;/xref:System.Windows.Window.SourceInitialized&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnSourceInitialized.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnSourceInitialized。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnSourceInitialized on the base class if &lt;xref:System.Windows.Window.SourceInitialized&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnSourceInitialized 基本类如果&lt;xref:System.Windows.Window.SourceInitialized&gt;需要引发。&lt;/xref:System.Windows.Window.SourceInitialized&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Window.StateChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.Window.StateChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>OnStateChanged raises the &lt;xref:System.Windows.Window.StateChanged&gt; event.</source>
          <target state="translated">OnStateChanged 引发&lt;xref:System.Windows.Window.StateChanged&gt;事件。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Window&gt; may override OnStateChanged.</source>
          <target state="translated">派生自类型&lt;xref:System.Windows.Window&gt;可能会重写 OnStateChanged。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnStateChanged on the base class if &lt;xref:System.Windows.Window.StateChanged&gt; needs to be raised.</source>
          <target state="translated">重写的方法必须调用 OnStateChanged 基本类如果&lt;xref:System.Windows.Window.StateChanged&gt;需要引发。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;包含事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">当窗口的父级发生更改时调用。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The previous parent.</source>
          <target state="translated">先前的父项。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Set to null if the <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> did not have a previous parent.</source>
          <target state="translated">设置为 null <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>没有以前的父级。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">获取用于此窗口是所有者窗口的集合。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An owned window is one whose &lt;xref:System.Windows.Window.Owner%2A&gt; property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">附属的窗口是一个其&lt;xref:System.Windows.Window.Owner%2A&gt;属性设置为另一个窗口，这被称为所有者窗口的引用。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>To find all the windows that an owner window owns, you can enumerate &lt;xref:System.Windows.WindowCollection&gt; that is returned by the OwnedWindows property.</source>
          <target state="translated">若要查找所有者窗口拥有的所有窗口，可以枚举&lt;xref:System.Windows.WindowCollection&gt;OwnedWindows 属性返回。&lt;/xref:System.Windows.WindowCollection&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains references to the windows for which this window is the owner.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含对此窗口所有者的窗口为其的引用。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that owns this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取或设置<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>拥有此<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When a child window is opened by a parent window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">通过调用由父窗口打开子窗口时&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，父和子窗口之间建立的隐式关系。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">此关系强制执行某些行为，包括最小化、 最大化，和还原。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>When a child window is created by a parent window by calling &lt;xref:System.Windows.Window.Show%2A&gt;, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">通过调用由父窗口创建子窗口时&lt;xref:System.Windows.Window.Show%2A&gt;，但是，子窗口没有与父窗口的关系。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>This means that:      -   The child window does not have a reference to the parent window.</source>
          <target state="translated">这意味着:-子窗口不具有向父窗口的引用。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>-   The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">的子窗口行为不依赖于父窗口中; 的行为这两个窗口能够覆盖另一个，或最小化、 最大化，并还原相互独立。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>To allow you to create a relationship between a child window and a parent window, &lt;xref:System.Windows.Window&gt; supports the notion of ownership.</source>
          <target state="translated">若要让你可以创建子窗口和父窗口，之间的关系&lt;xref:System.Windows.Window&gt;支持所有权的概念。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">当一个窗口 （拥有窗口） 的所有者属性设置为另一个窗口 （所有者窗口） 的引用，将建立所有权。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Once this relationship is established, the following behaviors are exhibited:      -   If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">一旦建立这种关系，则会展现的以下行为:-最小化所有者窗口时，其拥有的所有 windows 最小都化以及。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>-   If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">-如果拥有的窗口已最小化，其所有者不降至最低。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>-   If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">-如果所有者窗口最大化时，将还原所有者窗口和其拥有的 windows。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>-   An owner window can never cover an owned window.</source>
          <target state="translated">-An 所有者窗口绝不会覆盖拥有的窗口。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-   Owned windows that were not opened using &lt;xref:System.Windows.Window.ShowDialog%2A&gt; are not modal.</source>
          <target state="translated">拥有不是使用的 windows&lt;xref:System.Windows.Window.ShowDialog%2A&gt;不是模式对话框。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">用户仍可以与所有者窗口交互。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>-   If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">-如果你关闭所有者窗口，其拥有的窗口也会关闭。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>-   If an owned window was opened by its owner window using &lt;xref:System.Windows.Window.Show%2A&gt;, and the owner window is closed, the owned window's &lt;xref:System.Windows.Window.Closing&gt; event is not raised.</source>
          <target state="translated">-如果拥有的窗口已打开由其所有者窗口中使用&lt;xref:System.Windows.Window.Show%2A&gt;，并且所有者窗口已关闭，拥有的窗口&lt;xref:System.Windows.Window.Closing&gt;不会引发事件。&lt;/xref:System.Windows.Window.Closing&gt; &lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>When you open a child window by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, you should also set the Owner property of the child window.</source>
          <target state="translated">当通过调用打开子窗口&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，还应设置子窗口的所有者属性。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">如果没有，你的用户将无法还原按任务栏按钮的子窗口和父窗口。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">相反，按任务栏按钮将生成 windows 中，包括子与父窗口中的，以帮助用户选择; 的列表将还原所选的窗口。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  You should also set the Owner property on a window that that is opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt; to ensure correct behavior with .</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 还应设置所有者属性的窗口上，通过调用打开&lt;xref:System.Windows.Window.ShowDialog%2A&gt;以确保使用正确的行为。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the owner of this <bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，表示此所有者<bpt id="p2">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A window tries to own itself       -or-       Two windows try to own each other.</source>
          <target state="translated">窗口尝试拥有自身-或者-尝试相互拥有两个窗口。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The Owner property is set on a visible window shown using &lt;xref:System.Windows.Window.ShowDialog*&gt;       -or-       The Owner property is set with a window that has not been previously shown.</source>
          <target state="translated">显示使用的可见窗口上设置的 Owner 属性&lt;xref:System.Windows.Window.ShowDialog*&gt;-或-与以前未显示窗口设置所有者属性。&lt;/xref:System.Windows.Window.ShowDialog*&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">获取或设置大小调整模式。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>There are four options:      -   <bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated">有四个选项:- <bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The user cannot resize the window.</source>
          <target state="translated">用户不能调整窗口大小。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">最大化和最小化框不会显示。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">用户只能将窗口最小和从任务栏中还原它。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">同时会显示最小化和最大化框，但仅最小化框处于启用状态。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">用户具有完全能够调整大小窗口中，在窗口中使用最小化和最大化框中，并可拖动大纲。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">显示最小化和最大化框并将其启用。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>(Default).</source>
          <target state="translated">（默认值）。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated">- <bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>This option has the same functionality as &lt;xref:System.Windows.ResizeMode&gt;, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">此选项具有与相同的功能&lt;xref:System.Windows.ResizeMode&gt;，但将"大小调整手柄"添加到窗口右下角。&lt;/xref:System.Windows.ResizeMode&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowResizeMode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ResizeModeProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowResizeMode"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.ResizeModeProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.Window.ResizeModeProperty&gt;</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.ResizeMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value specifying the resize mode.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.ResizeMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>值，该值指定的大小调整模式。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ResizeMode*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.ResizeMode*&gt;依赖项属性。&lt;/xref:System.Windows.Window.ResizeMode*&gt;</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">在正在最小化或最大化之前获取的大小和窗口的位置。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">还原矩形是之前它是最小化或最大化窗口占用的区域。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>You can use RestoreBounds to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">你可以使用 RestoreBounds 之前关闭应用程序时，将保存的最后一个大小和窗口的位置，并在下次应用程序开始将窗口还原到其处于用户的方式检索这些值。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If you query RestoreBounds before the window has been shown or after it has been closed, &lt;xref:System.Windows.Rect.Empty%2A&gt; is returned.</source>
          <target state="translated">如果显示窗口之前或之后它已关闭，查询 RestoreBounds&lt;xref:System.Windows.Rect.Empty%2A&gt;返回。&lt;/xref:System.Windows.Rect.Empty%2A&gt;</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 窗口托管的浏览器中时，无法获取此属性。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它指定的大小和窗口的位置在前最小化或最大化。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">将打开一个窗口，并返回而不等待关闭新打开窗口。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
          <target state="translated">当&lt;xref:System.Windows.Window&gt;实例化类时，默认情况下看不到。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Show shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated">显示显示了一个窗口并立即返回，而不等待窗口即将关闭。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">因此，已打开的窗口不会阻止用户与其他 windows 应用程序中进行交互。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">此类型的窗口称为<bpt id="p1">*</bpt>无模式<ept id="p1">*</ept>窗口。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">无模式窗口的常见示例包括属性窗口、 工具箱和调色板。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;.</source>
          <target state="translated">若要限制用户交互与特定窗口，窗口必须通过调用&lt;xref:System.Windows.Window.ShowDialog%2A&gt;.&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;打开</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A window that is opened by calling Show does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">通过调用显示打开的窗口不自动具有与打开它; 的窗口之间的关系具体而言，打开窗口不知道哪个窗口打开它。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
          <target state="translated">可以使用建立这种关系&lt;xref:System.Windows.Window.Owner%2A&gt;属性和托管使用&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;属性。&lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Calling Show achieves the same end result as setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of the &lt;xref:System.Windows.Window&gt; object to &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">调用显示实现相同的最终结果，作为设置&lt;xref:System.Windows.UIElement.Visibility%2A&gt;&lt;xref:System.Windows.Window&gt;到&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;对象&lt;/xref:System.Windows.Window&gt;属性&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">但是，没有从计时角度来看这两者之间的区别。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Calling Show is a synchronous operation that returns only after the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event on the child window has been raised:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p2">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p4">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync)</ept><ept id="p3">]</ept>       Setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, however, is an asynchronous operation that returns immediately:       <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p6">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)</ept><ept id="p5">]</ept>  <bpt id="p7">[!code-cs</bpt><bpt id="p8">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p8">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync)</ept><ept id="p7">]</ept>       When setting &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, any window events you register before you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; may not be raised until after the method in which you set &lt;xref:System.Windows.UIElement.Visibility%2A&gt; has completed execution.</source>
          <target state="translated">调用显示是之后才会返回一个同步操作&lt;xref:System.Windows.FrameworkElement.Loaded&gt;引发子窗口上的事件︰ <bpt id="p1">[!code-vb</bpt> <bpt id="p2">[</bpt>WindowShowTimingSnippets #ShowSync<ept id="p2">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets #ShowSync<ept id="p4">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync)</ept> <ept id="p3">]</ept>设置&lt;xref:System.Windows.UIElement.Visibility%2A&gt;，但是，将立即返回的异步操作︰ <bpt id="p5">[!code-vb</bpt> <bpt id="p6">[</bpt>WindowShowTimingSnippets #ShowASync<ept id="p6">](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cs</bpt><bpt id="p8">[</bpt>WindowShowTimingSnippets #ShowASync<ept id="p8">](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync)</ept> <ept id="p7">]</ept>设置时&lt;xref:System.Windows.UIElement.Visibility%2A&gt;，注册之前设置任何窗口事件&lt;xref:System.Windows.UIElement.Visibility%2A&gt;不可能在其中你设置的方法后直到引发&lt;xref:System.Windows.UIElement.Visibility%2A&gt;执行完毕。&lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;   &lt;/xref:System.Windows.UIElement.Visibility%2A&gt;   &lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Show is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">在正在关闭的窗口上调用显示 (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已关闭 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">获取或设置一个值，指示首次显示时是否激活窗口。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When a window with its ShowActivated property set to <ph id="ph1">`false`</ph> is opened, the window is not activated and its &lt;xref:System.Windows.Window.Activated&gt; event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">当其 ShowActivated 属性设置为窗口<ph id="ph1">`false`</ph>是打开，显示窗口不激活并其&lt;xref:System.Windows.Window.Activated&gt;直到用户手动激活窗口，通过选择它，则不会引发事件&lt;/xref:System.Windows.Window.Activated&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">窗口被选中之后，它激活，并且通常会停用。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>To prevent a window from being activated when it opens, the ShowActivated property must be set to <ph id="ph1">`false`</ph> before the window is shown (by calling &lt;xref:System.Windows.Window.Show%2A&gt;); setting ShowActivated to <ph id="ph2">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">若要防止在打开时激活一个窗口，ShowActivated 属性必须设置为<ph id="ph1">`false`</ph>显示窗口之前 (通过调用&lt;xref:System.Windows.Window.Show%2A&gt;); 将 ShowActivated 设置为<ph id="ph2">`false`</ph>窗口将显示不起作用后。&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Setting ShowActivated to <ph id="ph1">`false`</ph> on a window that is opened modally, by calling &lt;xref:System.Windows.Window.ShowDialog%2A&gt;, has no real impact.</source>
          <target state="translated">设置为 ShowActivated<ph id="ph1">`false`</ph>通过调用以模式方式打开的窗口上&lt;xref:System.Windows.Window.ShowDialog%2A&gt;，无任何实际影响。&lt;/xref:System.Windows.Window.ShowDialog%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">尽管未将激活模式窗口，模式窗口会阻止用户激活任何其他打开的应用程序窗口。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowActivated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowActivatedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowActivated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.ShowActivatedProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.ShowActivatedProperty&gt;</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a window is activated when first shown; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果首次显示; 时，将激活窗口否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowActivated*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.ShowActivated*&gt;依赖项属性。&lt;/xref:System.Windows.Window.ShowActivated*&gt;</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">将打开一个窗口，并关闭新打开的窗口时，才返回。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>When a &lt;xref:System.Windows.Window&gt; class is instantiated, it is not visible by default.</source>
          <target state="translated">当&lt;xref:System.Windows.Window&gt;实例化类时，默认情况下看不到。&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>ShowDialog shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated">ShowDialog 显示的窗口、 禁用应用程序中的所有其他窗口和窗口关闭时，才返回。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">这种类型的窗口称为<bpt id="p1">*</bpt>模式<ept id="p1">*</ept>窗口。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">模式窗口主要用作对话框。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">对话框中是窗口的一种特殊类型的应用程序用于与用户来完成任务，例如打开文件或打印文档进行交互。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">对话框通常允许用户接受或取消它们已为其显示之前关闭对话框中的任务。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>ShowDialog returns a &lt;xref:System.Nullable%601&gt;&lt;xref:System.Boolean&gt; value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated">ShowDialog 返回&lt;xref:System.Nullable%601&gt;&lt;xref:System.Boolean&gt;值，该值指定是否接受或取消活动。&lt;/xref:System.Boolean&gt;&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult%2A&gt; property before a window closes.</source>
          <target state="translated">返回值的值&lt;xref:System.Windows.Window.DialogResult%2A&gt;窗口关闭之前的属性。&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Windows.Window.DialogResult%2A&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Windows.Window.DialogResult%2A&gt;。&lt;/xref:System.Windows.Window.DialogResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A window that is opened by calling the ShowDialog method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">通过调用 ShowDialog 方法打开的窗口不自动具有与打开它; 的窗口之间的关系具体而言，打开窗口不知道哪个窗口打开它。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>This relationship can be established using the &lt;xref:System.Windows.Window.Owner%2A&gt; property and managed using the &lt;xref:System.Windows.Window.OwnedWindows%2A&gt; property.</source>
          <target state="translated">可以使用建立这种关系&lt;xref:System.Windows.Window.Owner%2A&gt;属性和托管使用&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;属性。&lt;/xref:System.Windows.Window.OwnedWindows%2A&gt; &lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>), &lt;xref:System.Windows.Window.Owner%2A&gt; must be set for a window opened by calling ShowDialog.</source>
          <target state="translated">若要支持<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>自动化 (请参阅<bpt id="p1">[</bpt>UI 自动化概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>)，&lt;xref:System.Windows.Window.Owner%2A&gt;必须为通过调用 ShowDialog 打开的窗口设置。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window (a window opened by calling ShowDialog) is closed, the previously activated window is reactivated.</source>
          <target state="translated">当模式<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>窗口 （通过调用 ShowDialog 打开的窗口） 封闭式的重新激活以前激活的窗口。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window has an owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), the owner window is not reactivated when the modal <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">如果在安装结束时<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>窗口包含一个所有者窗口 (请参阅&lt;xref:System.Windows.Window.Owner%2A&gt;)，不是所有者窗口重新激活时模式<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>窗口已关闭，除非它是窗口以前已经激活。&lt;/xref:System.Windows.Window.Owner%2A&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 窗口承载在浏览器时，不能调用此方法。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph> value of type &lt;xref:System.Boolean&gt; that specifies whether the activity was accepted (<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or canceled (<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Nullable%601<ph id="ph2">&amp;gt;</ph>类型的值&lt;xref:System.Boolean&gt;，它指定活动是否已接受 (<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已取消 (<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。&lt;/xref:System.Boolean&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The return value is the value of the &lt;xref:System.Windows.Window.DialogResult*&gt; property before a window closes.</source>
          <target state="translated">返回值的值&lt;xref:System.Windows.Window.DialogResult*&gt;窗口关闭之前的属性。&lt;/xref:System.Windows.Window.DialogResult*&gt;</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>ShowDialog is called on a window that is closing (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) or has been closed (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>).</source>
          <target state="translated">在正在关闭的窗口上调用 ShowDialog (<bpt id="p1">&lt;xref href="System.Windows.Window.Closing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 或已关闭 (<bpt id="p2">&lt;xref href="System.Windows.Window.Closed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">获取或设置一个值，该值指示窗口是否具有任务栏按钮。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>If ShowInTaskbar is set to <ph id="ph1">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">如果 ShowInTaskbar 设置为<ph id="ph1">`true`</ph>，还将 ALT + TAB 应用程序选择列表中显示该窗口。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the &lt;xref:System.Windows.Window.Icon%2A&gt; property.</source>
          <target state="translated">适用于任务栏按钮和 ALT + TAB 应用程序选择列表的图标是值的&lt;xref:System.Windows.Window.Icon%2A&gt;属性。&lt;/xref:System.Windows.Window.Icon%2A&gt;</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowInTaskbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.ShowInTaskbarProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowShowInTaskbar"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.ShowInTaskbarProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.ShowInTaskbarProperty&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window has a task bar button; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果窗口具有任务栏按钮;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">窗口承载在浏览器时，不适用。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.ShowInTaskbar*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.ShowInTaskbar*&gt;依赖项属性。&lt;/xref:System.Windows.Window.ShowInTaskbar*&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">获取或设置一个值，该值指示是否窗口是否自动调整自身大小以适应其内容的大小。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting either &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; or &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">当 SizeToContent 设置为&lt;xref:System.Windows.SizeToContent&gt;，设置&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;或&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;不起作用; 可以设置这两个属性，但使用设置的值不会应用到窗口。&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; does not change the height of the window.</source>
          <target state="translated">当 SizeToContent 设置为&lt;xref:System.Windows.SizeToContent&gt;，则设置&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;不会更改窗口的高度。&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>When SizeToContent is set to &lt;xref:System.Windows.SizeToContent&gt;, setting &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; does not change the width of the window.</source>
          <target state="translated">当 SizeToContent 设置为&lt;xref:System.Windows.SizeToContent&gt;，则设置&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;不会更改窗口的宽度。&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>If SizeToContent has a value other than &lt;xref:System.Windows.SizeToContent&gt;:      -   SizeToContent is automatically set to &lt;xref:System.Windows.SizeToContent&gt; if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated">如果 SizeToContent 具有值以外&lt;xref:System.Windows.SizeToContent&gt;:-SizeToContent 自动设置为&lt;xref:System.Windows.SizeToContent&gt;如果用户通过使用大小调整手柄或拖动边框来调整窗口大小时。&lt;/xref:System.Windows.SizeToContent&gt; &lt;/xref:System.Windows.SizeToContent&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>-   If the size of the content changes in a way that causes the window to resize itself, &lt;xref:System.Windows.FrameworkElement.SizeChanged&gt; is raised.</source>
          <target state="translated">-如果内容的大小发生更改，则会自行调整大小，窗口的方式&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;引发。&lt;/xref:System.Windows.FrameworkElement.SizeChanged&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>If a window is transparent (see &lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;), you should consider setting SizeToContent to &lt;xref:System.Windows.SizeToContent&gt; to ensure the window is no larger than its visible content.</source>
          <target state="translated">如果一个窗口是透明 (请参阅&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;)，应考虑将 SizeToContent 设置为&lt;xref:System.Windows.SizeToContent&gt;以确保窗口是不大于其可见内容。&lt;/xref:System.Windows.SizeToContent&gt; &lt;/xref:System.Windows.Window.AllowsTransparency%2A&gt;</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowSizeToContent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.SizeToContentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowSizeToContent"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.SizeToContentProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.SizeToContentProperty&gt;</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref href="System.Windows.SizeToContent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.SizeToContent*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.SizeToContent*&gt;依赖项属性。&lt;/xref:System.Windows.Window.SizeToContent*&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">引发此事件以支持与互操作<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when the window's &lt;xref:System.Windows.Window.WindowState*&gt; property changes.</source>
          <target state="translated">发生时窗口的&lt;xref:System.Windows.Window.WindowState*&gt;属性更改。&lt;/xref:System.Windows.Window.WindowState*&gt;</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取或设置<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>任务栏缩略图<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail, see the &lt;xref:System.Windows.Shell.TaskbarItemInfo&gt; class.</source>
          <target state="translated">有关如何使用<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>任务栏缩略图，请参阅&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;类。&lt;/xref:System.Windows.Shell.TaskbarItemInfo&gt;</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> taskbar thumbnail for the <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>任务栏缩略图<bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.TaskbarItemInfo*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.TaskbarItemInfo*&gt;依赖项属性。&lt;/xref:System.Windows.Window.TaskbarItemInfo*&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's title.</source>
          <target state="translated">获取或设置窗口的标题。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The title of a &lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Navigation.NavigationWindow&gt;, or <ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using &lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">标题&lt;xref:System.Windows.Window&gt;， &lt;xref:System.Windows.Navigation.NavigationWindow&gt;，或<ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]</ph>，还可以通过使用&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;设置&lt;/xref:System.Windows.Navigation.NavigationWindow&gt;&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TitleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTitle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.TitleProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TitleProperty&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that contains the window's title.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含窗口的标题。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Title*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.Title*&gt;依赖项属性。&lt;/xref:System.Windows.Window.Title*&gt;</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">获取或设置窗口的上边缘，相对于桌面的位置。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Window&gt; is maximized or minimized, this value represents the top edge of the restore point for the &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">当&lt;xref:System.Windows.Window&gt;最大化或最小化，此值表示&lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt;的上边缘的还原点&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This property cannot be set through a style.</source>
          <target state="translated">不能通过样式设置此属性。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If you do not specify a value, Top is set to the system default value.</source>
          <target state="translated">如果未指定一个值，顶部设置为系统默认值。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>You can also specify the system default value by setting Top to &lt;xref:System.Double.NaN&gt;.</source>
          <target state="translated">此外可以通过设置到&lt;xref:System.Double.NaN&gt;。&lt;/xref:System.Double.NaN&gt;顶部指定的系统默认值</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Neither &lt;xref:System.Double.NegativeInfinity&gt; nor &lt;xref:System.Double.PositiveInfinity&gt; is a valid value for Top.</source>
          <target state="translated">既不&lt;xref:System.Double.NegativeInfinity&gt;也不&lt;xref:System.Double.PositiveInfinity&gt;前是有效的值。&lt;/xref:System.Double.PositiveInfinity&gt; &lt;/xref:System.Double.NegativeInfinity&gt;</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.TopProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TopProperty&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">窗口的顶部，逻辑单元 （1/96 英寸） 中的位置。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">获取或设置一个值，该值指示是否在顶层的 z 顺序中将显示一个窗口。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>A window whose Topmost property is set to <ph id="ph1">`true`</ph> appears above all windows whose Topmost properties are set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">窗口的最顶层的属性设置为<ph id="ph1">`true`</ph>显示最重要的是 windows 其最顶层的属性设置为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>In the group of windows that have Topmost property is set to <ph id="ph1">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">组中的 windows 具有 Topmost 属性设置为<ph id="ph1">`true`</ph>，当前激活的窗口为最顶端窗口。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Likewise for the group of windows that have Topmost property is set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">同样具有 Topmost 的 windows 组的属性设置为<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTopmost"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.TopmostProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowTopmost"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.TopmostProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.TopmostProperty&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the window is topmost; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果该窗口为最顶层;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Topmost*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.Topmost*&gt;依赖项属性。&lt;/xref:System.Windows.Window.Topmost*&gt;</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.Top*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.Top*&gt;依赖项属性。&lt;/xref:System.Windows.Window.Top*&gt;</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">获取或设置窗口首次显示时的位置。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned according to its &lt;xref:System.Windows.Window.Left%2A&gt; and &lt;xref:System.Windows.Window.Top%2A&gt; property values.</source>
          <target state="translated">设置&lt;xref:System.Windows.WindowStartupLocation&gt;到&lt;xref:System.Windows.WindowStartupLocation&gt;会打开一个窗口来定位根据其&lt;xref:System.Windows.Window.Left%2A&gt;和&lt;xref:System.Windows.Window.Top%2A&gt;属性值。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>If either the &lt;xref:System.Windows.Window.Left%2A&gt; or &lt;xref:System.Windows.Window.Top%2A&gt; properties aren't specified, their values are determined by <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>.</source>
          <target state="translated">如果任一&lt;xref:System.Windows.Window.Left%2A&gt;或&lt;xref:System.Windows.Window.Top%2A&gt;属性均未指定，其值由<ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>。&lt;/xref:System.Windows.Window.Top%2A&gt; &lt;/xref:System.Windows.Window.Left%2A&gt;</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">设置&lt;xref:System.Windows.WindowStartupLocation&gt;导致窗口在屏幕，其中包含鼠标光标的中心定位。&lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.Windows.WindowStartupLocation&gt; to &lt;xref:System.Windows.WindowStartupLocation&gt; causes a window to be positioned in the center of its owner window (see &lt;xref:System.Windows.Window.Owner%2A&gt;), if specified.</source>
          <target state="translated">设置&lt;xref:System.Windows.WindowStartupLocation&gt;到&lt;xref:System.Windows.WindowStartupLocation&gt;导致窗口在其所有者窗口的中心来定位 (请参阅&lt;xref:System.Windows.Window.Owner%2A&gt;) 如果指定，则。&lt;/xref:System.Windows.Window.Owner%2A&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">另一个 WPF 窗口或非 WPF 窗口，可以是所有者窗口。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and &lt;xref:System.Windows.Interop.WindowInteropHelper&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 有关与非 WPF 窗口的 WPF 窗口的详细信息，请参阅<bpt id="p1">[</bpt>WPF 和 Win32 间的互操作<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;。&lt;/xref:System.Windows.Interop.WindowInteropHelper&gt;</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if &lt;xref:System.Windows.WindowStartupLocation&gt; is set to &lt;xref:System.Windows.WindowStartupLocation&gt;.</source>
          <target state="translated">如果未指定所有者窗口，窗口的位置由相同的方式就像&lt;xref:System.Windows.WindowStartupLocation&gt;设置为&lt;xref:System.Windows.WindowStartupLocation&gt;。&lt;/xref:System.Windows.WindowStartupLocation&gt; &lt;/xref:System.Windows.WindowStartupLocation&gt;</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 无法设置或获取此属性的值，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>值，该值指定当首次显示窗口的顶部/左侧位置。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">获取或设置一个值，该值指示窗口是否是还原、 最小化，或最大化。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Before a window is minimized or maximized, its size and location are stored in &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
          <target state="translated">最小化或最大化窗口之前，则会将其大小和位置存储在&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;。&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>When a window is subsequently restored, its size and location values are restored with the values from &lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.</source>
          <target state="translated">当随后还原窗口时，其大小和位置的值将还原&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;.&lt;/xref:System.Windows.Window.RestoreBounds%2A&gt;中的值</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>When the WindowState property is changed, &lt;xref:System.Windows.Window.StateChanged&gt; is raised.</source>
          <target state="translated">WindowState 属性更改时，&lt;xref:System.Windows.Window.StateChanged&gt;引发。&lt;/xref:System.Windows.Window.StateChanged&gt;</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowState"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStateProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowState"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.WindowStateProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt; &lt;/xref:System.Windows.Window.WindowStateProperty&gt;</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它确定窗口是否是还原、 最小化，或最大化。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (restored).</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref href="System.Windows.WindowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> （还原）。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowState*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.WindowState*&gt;依赖项属性。&lt;/xref:System.Windows.Window.WindowState*&gt;</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">获取或设置窗口的边框样式。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>WindowStyle can be one of the &lt;xref:System.Windows.WindowStyle&gt; enumeration values, including &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt;, &lt;xref:System.Windows.WindowStyle&gt; (default), and &lt;xref:System.Windows.WindowStyle&gt;.</source>
          <target state="translated">WindowStyle 可以是之一&lt;xref:System.Windows.WindowStyle&gt;枚举值，包括&lt;xref:System.Windows.WindowStyle&gt;， &lt;xref:System.Windows.WindowStyle&gt;， &lt;xref:System.Windows.WindowStyle&gt;（默认值）、 和&lt;xref:System.Windows.WindowStyle&gt;。&lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt; &lt;/xref:System.Windows.WindowStyle&gt;</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):       <bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">下图上显示的窗口样式<ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]</ph>（透明玻璃启用与 Windows Vista Aero 主题）︰<bpt id="p1">![</bpt>窗口样式<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>窗口样式<ept id="p2">")</ept><ph id="ph2">      &gt; </ph> <ph id="ph3">[!NOTE]</ph>&amp;1;&gt; 不能设置或获取此属性，当一个窗口承载于浏览器。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Window.WindowStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.Window.WindowStyleProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.Window.WindowStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies a window's border style.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它指定窗口的边框样式。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref href="System.Windows.WindowStyle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Window.WindowStyle*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.Window.WindowStyle*&gt;依赖项属性。&lt;/xref:System.Windows.Window.WindowStyle*&gt;</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>