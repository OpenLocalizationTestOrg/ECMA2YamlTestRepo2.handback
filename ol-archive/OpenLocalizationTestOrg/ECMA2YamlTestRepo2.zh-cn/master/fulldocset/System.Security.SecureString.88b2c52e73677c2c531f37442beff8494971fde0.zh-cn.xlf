<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174f0da1081f35785157244fe1d71fc69c350a80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.SecureString.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b3ae2918b19cc364e0c3f26eaf8130f24750997</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d18f00588ef24993438e6e7b3941d250b8f6593</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</source>
          <target state="translated">表示应保密，如通过从计算机内存不再需要时删除它的文本。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SecureString is a string type that provides a measure of security.</source>
          <target state="translated">SecureString 是提供安全的度量值的字符串类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It tries to avoid storing potentially sensitive strings in process memory as plain text.</source>
          <target state="translated">它将尝试以避免将敏感字符串存储在以纯文本形式的进程内存。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(For limitations, however, see the <bpt id="p1">[</bpt>How secure is SecureString?<ept id="p1">](#HowSecure)</ept> section.) The value of an instance of SecureString is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</source>
          <target state="translated">(有关限制，但是，请参阅<bpt id="p1">[</bpt>如何安全的方法是 SecureString？<ept id="p1">](#HowSecure)</ept>部分。)自动使用该实例已初始化时，由基础平台支持的机制保护 SecureString 实例的值或修改值时。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your application can render the instance immutable and prevent further modification by invoking the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method.</source>
          <target state="translated">你的应用程序可以呈现实例不可变，以通过调用防止进一步修改&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;方法。&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The maximum length of a SecureString instance is 65,536 characters.</source>
          <target state="translated">SecureString 实例的最大长度为 65536 个字符。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 此类型实现&lt;xref:System.IDisposable&gt;接口。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">在完成使用类型的实例后，您应释放它的中，直接或间接。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其&lt;xref:System.IDisposable.Dispose%2A&gt;中的方法<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>块。&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，使用一种语言构造如<ph id="ph1">`using`</ph>（在 C# 中) 或<ph id="ph2">`Using`</ph>（在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分&lt;xref:System.IDisposable&gt;接口主题。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The SecureString class and its members are not visible to COM.</source>
          <target state="translated">SecureString 类和其成员都不是对 COM 可见。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;。&lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this section:       <bpt id="p1">[</bpt>String vs. SecureString<ept id="p1">](#vsString)</ept>     <bpt id="p2">[</bpt>SecureString operations<ept id="p2">](#Ops)</ept>     <bpt id="p3">[</bpt>SecureString and interop<ept id="p3">](#interop)</ept>     <bpt id="p4">[</bpt>How secure is  SecureString?<ept id="p4">](#HowSecure)</ept></source>
          <target state="translated">本部分中︰<bpt id="p1">[</bpt>字符串 vs。SecureString<ept id="p1">](#vsString)</ept><bpt id="p2">[</bpt>SecureString 操作<ept id="p2">](#Ops)</ept><bpt id="p3">[</bpt>SecureString 和互操作<ept id="p3">](#interop)</ept><bpt id="p4">[</bpt>如何安全的方法是 SecureString？               <ept id="p4">](#HowSecure)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vsString"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## String versus SecureString    An instance of the &lt;xref:System.String?displayProperty=fullName&gt; class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</source>
          <target state="translated"><bpt id="p1">&lt;a name="vsString"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 字符串与 SecureString 的实例&lt;xref:System.String?displayProperty=fullName&gt;类既不可变，并且不再需要时，不能以编程方式计划进行垃圾回收; 也就是说，实例为只读之后创建，并且不可能预测实例从计算机内存中的删除时。&lt;/xref:System.String?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because &lt;xref:System.String?displayProperty=fullName&gt; instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</source>
          <target state="translated">因为&lt;xref:System.String?displayProperty=fullName&gt;实例是不可变，看起来要修改现有实例的操作实际创建它来操作的副本。&lt;/xref:System.String?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consequently, if a &lt;xref:System.String&gt; object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</source>
          <target state="translated">因此，如果&lt;xref:System.String&gt;对象包含敏感信息，例如密码、 信用卡号或个人数据，则它使用的原因是你的应用程序无法从计算机内存中删除数据后，信息可能被泄漏的风险。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A SecureString object is similar to a &lt;xref:System.String&gt; object in that it has a text value.</source>
          <target state="translated">SecureString 对象都类似于&lt;xref:System.String&gt;对象，因为它具有一个文本值。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the value of a SecureString object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method  or by the .NET Framework garbage collector.</source>
          <target state="translated">但是，SecureString 对象被固定在内存中，值可能会使用一种保护机制，例如提供的基础的操作系统，加密可以将已修改，直到你的应用程序将其标记为只读的和可以从计算机内存中删除通过应用程序调用&lt;xref:System.Security.SecureString.Dispose%2A&gt;方法或.NET Framework 垃圾回收器。&lt;/xref:System.Security.SecureString.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For a discussion of the limitations of the SecureString class, see the <bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept> section.</source>
          <target state="translated">有关限制的 SecureString 类的讨论，请参阅<bpt id="p1">[</bpt>如何安全的方法是 SecureString？<ept id="p1">](#HowSecure)</ept>部分。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="Ops"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString operations    The SecureString class includes members that allow you to do the following:       Instantiate a SecureString object    You instantiate a SecureString object by calling its parameterless constructor.</source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept><bpt id="p2">&lt;a name="Ops"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # SecureString operations SecureString 类包括的成员，您可以执行以下操作︰ 实例化 SecureString 对象通过调用其无参数构造函数实例化 SecureString 对象。      </target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add characters to a SecureString object    You can add a single character at a time to a SecureString object  by calling its &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.InsertAt%2A&gt; method.</source>
          <target state="translated">添加字符到 SecureString 对象你可以添加单个字符一次到 SecureString 对象通过调用其&lt;xref:System.Security.SecureString.AppendChar%2A&gt;或&lt;xref:System.Security.SecureString.InsertAt%2A&gt;方法。&lt;/xref:System.Security.SecureString.InsertAt%2A&gt; &lt;/xref:System.Security.SecureString.AppendChar%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  A SecureString object should never be constructed from a &lt;xref:System.String&gt;, because the sensitive data is already subject to the memory persistence consequences of the immutable &lt;xref:System.String&gt; class.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; SecureString 对象将不会构造从一种&lt;xref:System.String&gt;，这是因为敏感数据已受到内存持久性后果的不可变的&lt;xref:System.String&gt;类。&lt;/xref:System.String&gt; &lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The best way to construct a SecureString object is from a character-at-a-time unmanaged source, such as the &lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">构造一个 SecureString 对象的最佳方式时字符在时间的非托管源，如&lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Console.ReadKey%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remove characters from a SecureString object    You can replace an individual character by calling the &lt;xref:System.Security.SecureString.SetAt%2A&gt; method, remove an individual character by calling the &lt;xref:System.Security.SecureString.RemoveAt%2A&gt; method, or remove all characters from the SecureString instance by calling the  &lt;xref:System.Security.SecureString.Clear%2A&gt; method.</source>
          <target state="translated">删除字符从 SecureString 对象可以通过调用来替换单个字符&lt;xref:System.Security.SecureString.SetAt%2A&gt;方法，通过调用中删除单个字符&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;方法或删除从 SecureString 的所有字符都实例通过调用&lt;xref:System.Security.SecureString.Clear%2A&gt;方法。&lt;/xref:System.Security.SecureString.Clear%2A&gt; &lt;/xref:System.Security.SecureString.RemoveAt%2A&gt; &lt;/xref:System.Security.SecureString.SetAt%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Make the SecureString object read-only    Once you have defined the string that the SecureString object represents, you call its  &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method to make the string read-only.</source>
          <target state="translated">请将 SecureString 对象为只读一旦定义 SecureString 对象表示的字符串，调用其&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;方法，以使字符串，只读的。&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Get information about the SecureString object    The SecureString class has only two members that provide information about the string: its &lt;xref:System.Security.SecureString.Length%2A&gt; property, which indicates the number of UTF16-encoded code units in the string; and the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;, method, which indicates whether the instance is read-only.</source>
          <target state="translated">获取有关 SecureString 对象 SecureString 类的信息已提供有关字符串的信息的仅有两个成员︰ 其&lt;xref:System.Security.SecureString.Length%2A&gt;属性，它指示的字符串; 中的 UTF16 编码的代码单位数和&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;，方法，该值指示实例是否为只读的。&lt;/xref:System.Security.SecureString.IsReadOnly%2A&gt; &lt;/xref:System.Security.SecureString.Length%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Release the memory allocated to the SecureString instance    Because SecureString implements the &lt;xref:System.IDisposable&gt; interface, you release its memory by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
          <target state="translated">释放到因为 SecureString 实现 SecureString 实例分配的内存&lt;xref:System.IDisposable&gt;接口，通过调用释放其内存&lt;xref:System.Security.SecureString.Dispose%2A&gt;方法。&lt;/xref:System.Security.SecureString.Dispose%2A&gt; &lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The SecureString class has no members that inspect, compare, or convert the value of a SecureString.</source>
          <target state="translated">SecureString 类没有任何成员检查、 比较，或 SecureString 的值转换。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The absence of such members helps protect the value of the instance from accidental or malicious exposure.</source>
          <target state="translated">如果未指定此类成员可帮助防止意外或恶意的公开实例的值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use appropriate members of the &lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt; class, such as the &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt; method, to manipulate the value of a SecureString object.</source>
          <target state="translated">使用的相应成员&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt;类，如&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;方法，来操作 SecureString 对象的值。&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt; &lt;/xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The .NET Framework Class Library commonly uses SecureString instances in the following ways:      -   To provide password information to a process by using the &lt;xref:System.Diagnostics.ProcessStartInfo&gt; structure or by calling an overload of the &lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt; method that has a parameter of type SecureString.</source>
          <target state="translated">.NET Framework 类库通常通过以下方式使用 SecureString 实例:-若要通过使用提供到进程的密码信息&lt;xref:System.Diagnostics.ProcessStartInfo&gt;结构，或通过调用的重载&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt;具有类型为 SecureString 的参数的方法。&lt;/xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt; &lt;/xref:System.Diagnostics.ProcessStartInfo&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-   To provide network password information by calling a &lt;xref:System.Net.NetworkCredential&gt; class constructor that has a parameter of type SecureString or by using the &lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">-若要通过调用提供网络密码信息&lt;xref:System.Net.NetworkCredential&gt;类构造函数具有参数的类型为 SecureString 或通过使用&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt; &lt;/xref:System.Net.NetworkCredential&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-   To provide password information for SQL Server Authentication by calling the &lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt; constructor or retrieving the value of the &lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">-若要通过调用提供 SQL Server 身份验证的密码信息&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt;构造函数或检索的值的&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt; &lt;/xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-   To pass a string to unmanaged code.</source>
          <target state="translated">-若要将字符串传递给非托管代码。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>SecureString 和互操作<ept id="p1">](#interop)</ept>部分。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="interop"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString and interop    Because the operating system does not  directly support SecureString, you must convert the value of the SecureString object to the required string type before passing the string to a native method.</source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept><bpt id="p2">&lt;a name="interop"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # SecureString，因为操作系统不直接支持 SecureString 互操作，你必须将转换 SecureString 对象的值为必需的字符串类型然后再将字符串传递给本机方法。      </target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.Marshal&gt; class has five methods that do this:      -   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;, which converts the SecureString string value to a binary string (BSTR) recognized by COM.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.Marshal&gt;类具有执行此操作的五个方法:- &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;，它将转换为二进制字符串 (BSTR) 后识别由 com 使用。 SecureString 字符串值&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;, which copy the SecureString string value to an ANSI string in unmanaged memory.</source>
          <target state="translated">-&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;和&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;，这将 SecureString 字符串值复制到非托管内存中的 ANSI 字符串。&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;, which copy the SecureString string value to a Unicode string in unmanaged memory.</source>
          <target state="translated">-&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;和&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;，这将 SecureString 字符串值复制到非托管内存中的 Unicode 字符串。&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each of these methods creates a clear-text string in unmanaged memory.</source>
          <target state="translated">上述每种方法创建非托管内存中的纯文本字符串。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</source>
          <target state="translated">它负责的开发人员可以清空并不再需要时，就会立即释放该内存。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:      |Allocation and conversion method|Zero and free method|   |--------------------------------------|--------------------------|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;|       <bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="HowSecure"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## How secure is SecureString?</source>
          <target state="translated">每个字符串转换和内存分配方法有一个相应的方法来清空并释放分配的内存: |分配和转换方法 |零和免费的方法 |  |--------------------------------------|--------------------------|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;|      <bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="HowSecure"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## How secure is SecureString?&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When created properly, a SecureString instance provides more data protection than a &lt;xref:System.String&gt;.</source>
          <target state="translated">SecureString 实例时正确创建，提供一种&lt;xref:System.String&gt;。&lt;/xref:System.String&gt;比的更多数据保护</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When creating a string from a character-at-a-time source, &lt;xref:System.String&gt; creates multiple intermediate in memory, whereas  SecureString creates just a single instance.</source>
          <target state="translated">字符在时间来源，创建一个字符串时&lt;xref:System.String&gt;而 SecureString 创建单个实例在内存中，创建多个中间。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Garbage collection of &lt;xref:System.String&gt; objects  is non-deterministic.</source>
          <target state="translated">垃圾回收的&lt;xref:System.String&gt;对象是不确定的。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition, because its memory is not pinned, the garbage collector will make additional copies of &lt;xref:System.String&gt; values when moving and compacting memory.</source>
          <target state="translated">此外，因为其内存不固定，因此垃圾回收器将制作的其他副本&lt;xref:System.String&gt;值时移动和压缩内存。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In contrast, the memory allocated to a SecureString object is pinned,  and that memory can be freed by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
          <target state="translated">与此相反，已固定到 SecureString 对象分配的内存，并且可以通过调用释放该内存&lt;xref:System.Security.SecureString.Dispose%2A&gt;方法。&lt;/xref:System.Security.SecureString.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Although data stored in a SecureString instance is more secure than data stored in a &lt;xref:System.String&gt; instance, there are significant limitations on how secure a SecureString instance is.</source>
          <target state="translated">比数据存储在&lt;xref:System.String&gt;实例时，有一些重要限制如何安全 SecureString 实例是&lt;/xref:System.String&gt;安全，虽然 SecureString 实例中存储的数据更多</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These include:       Platform    On the Windows operating system, the contents of a SecureString instance's internal character array is encrypted.</source>
          <target state="translated">其中包括︰ 平台上 Windows 操作系统，SecureString 实例的内部字符数组的内容进行加密。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</source>
          <target state="translated">但是，由于缺少 Api 或密钥管理问题，加密不是在所有平台上可用。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because of this, SecureString is available on Desktop (Windows only), and not on .NET Core.</source>
          <target state="translated">因此，SecureString 是可用在桌面上 (仅限 Windows)，而不是在.NET 核心。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Duration    Even if the SecureString implementation is able to take advantage of encryption, the plain text assigned to the SecureString instance may be exposed at various times:      -   Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</source>
          <target state="translated">如果 SecureString 实现能够充分利用加密，分配给实例可能会暴露在不同时间 SecureString 的纯文本的持续时间偶数:-因为 Windows 不提供在操作系统级别，.NET Framework 仍的安全字符串实现具有将安全字符串值转换为其纯文本表示形式，才能使用它。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-   Whenever the value of the secure string is modified by methods such as &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</source>
          <target state="translated">-每当安全字符串的值修改方法如&lt;xref:System.Security.SecureString.AppendChar%2A&gt;或&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;，必须解密 （即，已转换的回纯文本），并修改，然后再次加密。&lt;/xref:System.Security.SecureString.RemoveAt%2A&gt; &lt;/xref:System.Security.SecureString.AppendChar%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-   If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</source>
          <target state="translated">-如果互操作调用中使用的安全字符串，则它必须转换为 ANSI 字符串、 Unicode 字符串或二进制字符串 (BSTR) 中。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>SecureString 和互操作<ept id="p1">](#interop)</ept>部分。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The time interval for which the SecureString instance's value is exposed  is merely shortened in comparison to the &lt;xref:System.String&gt; class.</source>
          <target state="translated">为其公开 SecureString 实例的值的时间间隔将只被缩短相比&lt;xref:System.String&gt;类。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Storage versus usage    More generally, the SecureString class defines a storage mechanism for string values that should be protected or kept confidential.</source>
          <target state="translated">与使用情况存储 SecureString 类一般来说，定义应受保护或保密的字符串值的存储机制。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, outside of the .NET Framework itself, no usage mechanism supports SecureString.</source>
          <target state="translated">但是，在.NET Framework 本身，之外没有使用情况的机制支持 SecureString。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</source>
          <target state="translated">这意味着，必须转换为可用形式 （通常明文形式），其目标，可以识别的安全字符串和解密和转换必须出现在用户空间。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Overall, SecureString is more secure than &lt;xref:System.String&gt; because it limits the exposure of sensitive string data.</source>
          <target state="translated">总体上而言，SecureString 是比更安全&lt;xref:System.String&gt;因为它在限制的敏感字符串数据透露。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</source>
          <target state="translated">但是，这些字符串可能仍会暴露给任何进程或有权访问原始的内存，如主计算机、 进程转储或用户可查看交换文件上运行的恶意进程的操作。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Instead of using SecureString to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</source>
          <target state="translated">除了使用 SecureString 保护的密码，建议的替代项是使用的不透明的句柄存储在外部进程的凭据。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>返回页首<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this instance.</source>
          <target state="translated">保护或取消保护此实例的值时出错。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">在此平台上不支持此操作。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class from a subarray of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的子数组的类<ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This constructor is not CLS-compliant.</source>
          <target state="translated">此构造函数不符合 CLS。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The CLS-compliant alternative is <ph id="ph1">&amp;lt;</ph>xref:System.Security.SecureString.%23ctor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">符合 cls 的替代方法是<ph id="ph1">&amp;lt;</ph>xref:System.Security.SecureString.%23ctor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This constructor initializes the new &lt;xref:System.Security.SecureString&gt; object to the number of characters in <ph id="ph1">`value`</ph> specified by <ph id="ph2">`length`</ph>; the value of the instance is then encrypted.</source>
          <target state="translated">此构造函数初始化新&lt;xref:System.Security.SecureString&gt;对象中的字符数<ph id="ph1">`value`</ph>指定的<ph id="ph2">`length`</ph>; 然后加密实例的值。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In C#, this constructor is defined only in the context of unsafe code.</source>
          <target state="translated">在 C# 中，仅在不安全代码的上下文中定义此构造函数。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to an array of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
          <target state="translated">指向数组的指针<ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number of elements of <ph id="ph1">`value`</ph> to include in the new instance.</source>
          <target state="translated">元素的数目<ph id="ph1">`value`</ph>要包括在新实例。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero or greater than 65,536.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph>小于零或大于 65,536。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">在此平台上不支持此操作。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Appends a character to the end of the current secure string.</source>
          <target state="translated">将字符追加到当前安全字符串的末尾。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is appended; then the new value of the secure string is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>追加; 则安全字符串的新值是重新保护。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A character to append to this secure string.</source>
          <target state="translated">要追加到此安全字符串的字符。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">执行此操作将使此安全字符串的长度大于 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Deletes the value of the current secure string.</source>
          <target state="translated">删除当前安全字符串的值。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</source>
          <target state="translated">计算机内存中包含此安全字符串的值为零，则此安全字符串的值的长度设置为零。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current secure string.</source>
          <target state="translated">创建当前安全字符串的副本。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If an instance of a &lt;xref:System.Security.SecureString&gt; is marked read-only, the copy of that instance will not be read-only.</source>
          <target state="translated">实例时，如果&lt;xref:System.Security.SecureString&gt;是标记为只读的该实例的副本将不是只读的。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A duplicate of this secure string.</source>
          <target state="translated">此安全字符串的副本。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">释放由当前使用的所有资源<bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The Dispose method writes binary zeroes to the allocated memory that contains the value of this &lt;xref:System.Security.SecureString&gt; object, then frees the allocated memory.</source>
          <target state="translated">Dispose 方法将写入到分配的内存包含此值的二进制零&lt;xref:System.Security.SecureString&gt;对象，然后释放分配的内存。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>垃圾回收<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Inserts a character in this secure string at the specified index position.</source>
          <target state="translated">在此安全字符串中指定的索引位置插入一个字符。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this secure string is at index position zero.</source>
          <target state="translated">索引是从零开始;此安全字符串中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is inserted at the specified index position; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>指定的索引位置; 插入新值是重新保护。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The InsertAt method yields the same results as the &lt;xref:System.Security.SecureString.AppendChar%2A&gt; method, which inserts a character at the end of a secure string, if the <ph id="ph1">`index`</ph> parameter of InsertAt is set to the length of this instance.</source>
          <target state="translated">该 InsertAt 方法生成相同的结果&lt;xref:System.Security.SecureString.AppendChar%2A&gt;方法，如果将一个字符插入一个安全字符串，末尾<ph id="ph1">`index`</ph>InsertAt 参数设置为此实例的长度。&lt;/xref:System.Security.SecureString.AppendChar%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The index position where parameter <ph id="ph1">`c`</ph> is inserted.</source>
          <target state="translated">索引位置参数<ph id="ph1">`c`</ph>插入。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The character to insert.</source>
          <target state="translated">要插入的字符。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>小于零，或大于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-or-       Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">-或者-执行此操作将使此安全字符串的长度大于 65,536 个字符。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Indicates whether this secure string is marked read-only.</source>
          <target state="translated">指示此安全字符串标记为只读。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After an instance of &lt;xref:System.Security.SecureString&gt; is marked read-only by the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method, any attempt to modify the value of the instance throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">之后的&lt;xref:System.Security.SecureString&gt;&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;方法，尝试修改的值的实例引发&lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;只读标记&lt;/xref:System.Security.SecureString&gt;实例</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Use the IsReadOnly method to test whether a &lt;xref:System.Security.SecureString&gt; is read-only before attempting to modify it.</source>
          <target state="translated">使用 IsReadOnly 方法来测试是否&lt;xref:System.Security.SecureString&gt;为只读，然后再尝试修改它。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this secure string is marked read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此安全字符串标记为只读的;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Gets the number of characters in the current secure string.</source>
          <target state="translated">获取当前安全字符串中的字符数。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The Length property returns the number of &lt;xref:System.Char&gt; objects in this instance, not the number of Unicode characters.</source>
          <target state="translated">Length 属性返回的数目&lt;xref:System.Char&gt;此实例中的对象，而非 Unicode 字符的数量。&lt;/xref:System.Char&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A Unicode character might be represented by more than one &lt;xref:System.Char&gt; object.</source>
          <target state="translated">Unicode 字符可能由多个&lt;xref:System.Char&gt;对象。&lt;/xref:System.Char&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The maximum length of a &lt;xref:System.Security.SecureString&gt; instance is 65,536 characters.</source>
          <target state="translated">最大长度&lt;xref:System.Security.SecureString&gt;实例为 65,536 个字符。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects in this secure string.</source>
          <target state="translated">数<ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>函数使用此安全字符串。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Makes the text value of this secure string read-only.</source>
          <target state="translated">只读的请将此安全字符串的文本值。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Initialize the text value of an instance of the &lt;xref:System.Security.SecureString&gt; class with the &lt;xref:System.Security.SecureString.%23ctor%2A&gt; constructors, and modify the value with the &lt;xref:System.Security.SecureString.Clear%2A&gt;, &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, &lt;xref:System.Security.SecureString.SetAt%2A&gt;, &lt;xref:System.Security.SecureString.InsertAt%2A&gt;, and &lt;xref:System.Security.SecureString.AppendChar%2A&gt; methods.</source>
          <target state="translated">初始化的实例的文本值&lt;xref:System.Security.SecureString&gt;类，该类具有&lt;xref:System.Security.SecureString.%23ctor%2A&gt;构造函数，并修改的值与&lt;xref:System.Security.SecureString.Clear%2A&gt;， &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;， &lt;xref:System.Security.SecureString.SetAt%2A&gt;， &lt;xref:System.Security.SecureString.InsertAt%2A&gt;，和&lt;xref:System.Security.SecureString.AppendChar%2A&gt;方法。&lt;/xref:System.Security.SecureString.AppendChar%2A&gt; &lt;/xref:System.Security.SecureString.InsertAt%2A&gt; &lt;/xref:System.Security.SecureString.SetAt%2A&gt; &lt;/xref:System.Security.SecureString.RemoveAt%2A&gt; &lt;/xref:System.Security.SecureString.Clear%2A&gt; &lt;/xref:System.Security.SecureString.%23ctor%2A&gt; &lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After you have made your final modifications, use the MakeReadOnly method to make the value of the instance immutable (read-only).</source>
          <target state="translated">所做的最后一个修改后，使用 MakeReadOnly 方法使实例的值不可变 （只读）。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the value is marked as read-only, any further attempt to modify it throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">对其进行修改的任何进一步尝试值标记为只读后，将引发&lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The effect of invoking MakeReadOnly is permanent because the &lt;xref:System.Security.SecureString&gt; class provides no means to make the secure string modifiable again.</source>
          <target state="translated">调用 MakeReadOnly 的效果是永久因为&lt;xref:System.Security.SecureString&gt;类提供任何方式进行的安全字符串，然后重新可修改。&lt;/xref:System.Security.SecureString&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt; method to test whether an instance of &lt;xref:System.Security.SecureString&gt; is read-only.</source>
          <target state="translated">使用&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;方法来测试的实例是&lt;xref:System.Security.SecureString&gt;是只读的。&lt;/xref:System.Security.SecureString&gt; &lt;/xref:System.Security.SecureString.IsReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Removes the character at the specified index position from this secure string.</source>
          <target state="translated">从此安全字符串中删除位于指定的索引位置处的字符。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">索引是从零开始;此实例中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;位于指定的索引位置处的字符被删除;然后，新值是重新保护。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The index position of a character in this secure string.</source>
          <target state="translated">此安全字符串中字符的索引位置。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>小于零，或者大于或等于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Replaces the existing character at the specified index position with another character.</source>
          <target state="translated">位于指定的索引位置处的现有字符替换为另一个字符。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">索引是从零开始;此实例中的第一个字符的索引位置零。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is assigned to the specified index position; then the new value is re-protected.</source>
          <target state="translated">如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;<ph id="ph1">`c`</ph>分配给指定的索引位置; 则新值是重新保护。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The index position of an existing character in this secure string</source>
          <target state="translated">此安全字符串中的某个现有字符索引位置</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A character that replaces the existing character.</source>
          <target state="translated">替换现有字符的字符。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">已释放此安全字符串。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">此安全字符串是只读的。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>小于零，或者大于或等于此安全字符串的长度。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保护或取消保护此安全字符串的值时出错。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>