<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7910d758416e5a9e9996d5da3d90b1d774fb6a20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Reflection.Emit.UnmanagedMarshal.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bde90f81b5e05ffba8dccd92e94613b4a3e946e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5e9c9d5fd498dfcc89eded6b1b00daf889f652b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the class that describes how to marshal a field from managed to unmanaged code.</source>
          <target state="translated">表示描述如何将字段从封送托管代码流向非托管代码的类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The code example shows the workaround for this obsolete type.</source>
          <target state="translated">代码示例演示此过时的类型的解决方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.</source>
          <target state="translated">封送处理是打包和解参数的过程，因此远程过程调用可以发生。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.</source>
          <target state="translated">封送处理，期间字段可能要经历的格式转换的托管类型的格式不同于相应的非托管类型的格式时。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you might want to marshal a <ph id="ph1">`String`</ph> type as an unmanaged BSTR.</source>
          <target state="translated">例如，你可能想要封送<ph id="ph1">`String`</ph>作为非托管 BSTR 类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Some format conversions are handled automatically by the runtime.</source>
          <target state="translated">由运行时自动处理某些格式转换。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To override the default behavior, you must use the <ph id="ph1">`UnmanagedMarshal`</ph> class to define the format conversion.</source>
          <target state="translated">若要重写默认行为，必须使用<ph id="ph1">`UnmanagedMarshal`</ph>类定义格式转换。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets an unmanaged base type.</source>
          <target state="translated">获取非托管的基类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_UnmanagedType" name="UnmanagedType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_UnmanagedType" name="UnmanagedType" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The unmanaged type is not an <bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or a <bpt id="p2">&lt;xref uid="langword_csharp_SafeArray" name="SafeArray" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">非托管的类型不是<bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或<bpt id="p2">&lt;xref uid="langword_csharp_SafeArray" name="SafeArray" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</source>
          <target state="translated">指定一个固定长度的数组 (ByValArray) 要封送到非托管代码。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineByValArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The number of elements in the fixed-length array.</source>
          <target state="translated">固定长度的数组中的元素数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The argument is not a simple native type.</source>
          <target state="translated">参数不是简单的本机类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</source>
          <target state="translated">固定的数组缓冲区 (ByValTStr) 要封送到非托管代码中指定的字符串。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineByValStr`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineByValStr`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The number of elements in the fixed array buffer.</source>
          <target state="translated">固定的数组缓冲区中的元素数。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The argument is not a simple native type.</source>
          <target state="translated">参数不是简单的本机类型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies an <bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to marshal to unmanaged code.</source>
          <target state="translated">指定<bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要封送到非托管代码。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The length of an <bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is determined at runtime by the size of the actual marshaled array.</source>
          <target state="translated">长度<bpt id="p1">&lt;xref uid="langword_csharp_LPArray" name="LPArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>在运行时由实际的封送数组的大小。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineLPArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineLPArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The unmanaged type to which to marshal the array.</source>
          <target state="translated">要将数组封送到非托管的类型。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The argument is not a simple native type.</source>
          <target state="translated">参数不是简单的本机类型。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies a <bpt id="p1">&lt;xref uid="langword_csharp_SafeArray" name="SafeArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to marshal to unmanaged code.</source>
          <target state="translated">指定<bpt id="p1">&lt;xref uid="langword_csharp_SafeArray" name="SafeArray" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要封送到非托管代码。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineSafeArray`</ph> method is not a simple native marshal.</source>
          <target state="translated"><ph id="ph1">`DefineSafeArray`</ph>方法不是简单的本机封送。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">只能创建非托管封送构造可使用这些静态构造函数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">封送处理数组是比封送处理整数参数的一个更复杂的过程。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">数组成员复制以特定顺序中，以便在另一侧可以完全重新构造该数组。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The base type or the <bpt id="p1">&lt;xref uid="langword_csharp_UnmanagedType" name="UnmanagedType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of each element of the array.</source>
          <target state="translated">基类型或<bpt id="p1">&lt;xref uid="langword_csharp_UnmanagedType" name="UnmanagedType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的数组的每个元素。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The argument is not a simple native type.</source>
          <target state="translated">参数不是简单的本机类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Specifies a given type that is to be marshaled to unmanaged code.</source>
          <target state="translated">指定某个给定的类型的是无法封送到非托管代码。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.UnmanagedType&gt; passed to this method must be a simple native type.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;传递给此方法必须是一个简单的本机类型。&lt;/xref:System.Runtime.InteropServices.UnmanagedType&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>None of the following values may be used: &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, or &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;.</source>
          <target state="translated">可以使用以下值均未︰ &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;， &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;， &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;， &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;，或&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;。&lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Only unmanaged marshal constructs can be made using this method.</source>
          <target state="translated">只能创建非托管封送构造可使用此方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The unmanaged type to which the type is to be marshaled.</source>
          <target state="translated">非托管的类型的类型是要封送处理。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.Emit.UnmanagedMarshal"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The argument is not a simple native type.</source>
          <target state="translated">参数不是简单的本机类型。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets a number element.</source>
          <target state="translated">获取一个数字的元素。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There is an <ph id="ph1">`ElementCount`</ph> only if there is a <ph id="ph2">`NativeTypeFixedArray`</ph>.</source>
          <target state="translated">没有<ph id="ph1">`ElementCount`</ph>只有在<ph id="ph2">`NativeTypeFixedArray`</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An integer indicating the element count.</source>
          <target state="translated">指示元素计数的整数。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The argument is not an unmanaged element count.</source>
          <target state="translated">参数不是托管的元素计数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Indicates an unmanaged type.</source>
          <target state="translated">指示非托管的类型。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetUnmanagedType`</ph> property is an accessor function for the native type.</source>
          <target state="translated"><ph id="ph1">`GetUnmanagedType`</ph>属性是本机类型的访问器函数。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Runtime.InteropServices.UnmanagedType&gt; object.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;对象。&lt;/xref:System.Runtime.InteropServices.UnmanagedType&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets a GUID.</source>
          <target state="translated">获取的 GUID。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This property is read-only.</source>
          <target state="translated">此属性是只读的。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This property always returns Guid.Empty.</source>
          <target state="translated">此属性始终返回 Guid.Empty。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This property might be removed in a future release.</source>
          <target state="translated">可能的未来版本中移除该属性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Guid&gt; object.</source>
          <target state="translated">A&lt;xref:System.Guid&gt;对象。&lt;/xref:System.Guid&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The argument is not a custom marshaler.</source>
          <target state="translated">参数不是自定义封送处理程序。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>