<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f400be304e155c524c9a909ab36261e230b6edb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Timers.Timer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ccd8619700a09e27185c9c2b8db39956f848146</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f360dddbd4c33f6cfd312fc2e496d00a0ca07d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">设定的间隔，用于生成重复事件的选项之后生成事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>.</source>
          <target state="translated">若要浏览此类型的.NET Framework 源代码，请参阅<bpt id="p1">[</bpt>引用源<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>1&gt; 要查看此类型的.NET Framework 源代码，请参阅<bpt id="p1">[</bpt>引用源<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
          <target state="translated">你可以浏览源代码联机，请下载离线查看的引用并在调试; 过程中逐步执行源 （包括修补程序和更新）请参阅<bpt id="p1">[</bpt>说明<ept id="p1">](http://referencesource.microsoft.com/)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Timer component is a server-based timer that raises an &lt;xref:System.Timers.Timer.Elapsed&gt; event in your application after the number of milliseconds in the &lt;xref:System.Timers.Timer.Interval%2A&gt; property has elapsed.</source>
          <target state="translated">Timer 组件是一种基于服务器的计时器引发&lt;xref:System.Timers.Timer.Elapsed&gt;千分之几秒数之后应用程序中的事件&lt;xref:System.Timers.Timer.Interval%2A&gt;属性已过。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can configure the Timer object to raise the event just once or repeatedly using the &lt;xref:System.Timers.Timer.AutoReset%2A&gt; property.</source>
          <target state="translated">你可以配置要引发事件只需一次或重复使用的计时器对象&lt;xref:System.Timers.Timer.AutoReset%2A&gt;属性。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Typically, a Timer object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">通常，计时器对象声明在类级别，使其保持在范围内，只要需要它。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can then handle its &lt;xref:System.Timers.Timer.Elapsed&gt; event to provide regular processing.</source>
          <target state="translated">然后可处理其&lt;xref:System.Timers.Timer.Elapsed&gt;事件，以便提供常规处理。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">例如，假设你有必须保持的关键服务器运行每周 7 天、 每天 24 小时。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You could create a service that uses a Timer object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">你可以创建使用计时器对象以定期检查的服务器，并确保系统处于启动并正在运行的服务。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">如果系统未响应，该服务可能会尝试以重新启动服务器，或者通知管理员。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The Timer class is available in the .NET Framework only.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 计时器类是在仅.NET Framework 中可用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform.</source>
          <target state="translated">它不包含在.NET 标准库，并在其他平台，例如，.NET 核心或通用 Windows 平台上不可用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On these platforms, as well as for portability across all .NET platforms, you should use the &lt;xref:System.Threading.Timer?displayProperty=fullName&gt; class instead.</source>
          <target state="translated">在这些平台上，以及跨所有.NET 平台的可移植性，应使用&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;类。&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">此类型实现&lt;xref:System.IDisposable&gt;接口。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">完成后使用类型的操作后，你应释放类型直接或间接。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">若要直接释放类型，调用其&lt;xref:System.IDisposable.Dispose%2A&gt;中的方法<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>块。&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要间接释放类型，使用一种语言构造如<ph id="ph1">`using`</ph>（在 C# 中) 或<ph id="ph2">`Using`</ph>（在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分&lt;xref:System.IDisposable&gt;接口主题。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The server-based Timer class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">基于服务器的计时器类用于在多线程环境中的工作线程。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Server timers can move among threads to handle the raised &lt;xref:System.Timers.Timer.Elapsed&gt; event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">服务器的计时器可以在线程之间移动来处理引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件，从而导致比 Windows 计时器在时间上引发事件的更准确。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Timer component raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event, based on the value (in milliseconds) of the &lt;xref:System.Timers.Timer.Interval%2A&gt; property.</source>
          <target state="translated">Timer 组件引发&lt;xref:System.Timers.Timer.Elapsed&gt;基于的值 （以毫秒为单位） 的事件&lt;xref:System.Timers.Timer.Interval%2A&gt;属性。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">你可以处理此事件以执行所需的处理。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">例如，假设你有一个联机的销售应用程序可连续发布到数据库的销售订单。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">编译为传送的说明进行操作的服务进行的订单，而不是单独处理每个订单批处理操作。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You could use a Timer to start the batch processing every 30 minutes.</source>
          <target state="translated">你可以使用计时器启动批处理每隔 30 分钟。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; System.Timers.Timer 类具有相同的系统时钟的分辨率。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This means that the &lt;xref:System.Timers.Timer.Elapsed&gt; event will fire at an interval defined by the resolution of the system clock if the &lt;xref:System.Timers.Timer.Interval%2A&gt; property is less than the resolution of the system clock.</source>
          <target state="translated">这意味着，&lt;xref:System.Timers.Timer.Elapsed&gt;事件将在系统时钟的分辨率如果定义的间隔触发&lt;xref:System.Timers.Timer.Interval%2A&gt;属性小于系统时钟的分辨率。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Timers.Timer.Interval%2A&gt; property.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Timers.Timer.Interval%2A&gt;属性。&lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph1">`false`</ph>, a Timer object raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, after the first &lt;xref:System.Timers.Timer.Interval%2A&gt; has elapsed.</source>
          <target state="translated">当&lt;xref:System.Timers.Timer.AutoReset%2A&gt;设置为<ph id="ph1">`false`</ph>，计时器对象引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件一次，第一个之后&lt;xref:System.Timers.Timer.Interval%2A&gt;过后。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To keep raising the &lt;xref:System.Timers.Timer.Elapsed&gt; event regularly at the interval defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt;, set &lt;xref:System.Timers.Timer.AutoReset%2A&gt; to <ph id="ph1">`true`</ph>, which is the default value.</source>
          <target state="translated">若要保留引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件定期在定义间隔&lt;xref:System.Timers.Timer.Interval%2A&gt;，将其设置&lt;xref:System.Timers.Timer.AutoReset%2A&gt;到<ph id="ph1">`true`</ph>，这是默认值。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Timer component catches and suppresses all exceptions thrown by event handlers for the &lt;xref:System.Timers.Timer.Elapsed&gt; event.</source>
          <target state="translated">Timer 组件捕获并禁止显示引发的事件处理程序的所有异常&lt;xref:System.Timers.Timer.Elapsed&gt;事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行为将发生在.NET framework 的未来版本中的更改。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">但请注意，这不为 true 的事件处理程序，以异步方式执行，并包括<ph id="ph1">`await`</ph>运算符 （在 C# 中) 或<ph id="ph2">`Await`</ph>运算符 （在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">如下面的示例所示，这些事件处理程序中引发的异常会传播回调用线程。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关异步方法中引发的异常的详细信息，请参阅<bpt id="p1">[</bpt>异常处理<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer#3<ept id="p2">](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb)</ept><ept id="p3">]</ept>       If the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property is <ph id="ph1">`null`</ph>, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer#3<ept id="p2">](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb)</ept> <ept id="p3">]</ept>如果&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;属性是<ph id="ph1">`null`</ph>、&lt;xref:System.Timers.Timer.Elapsed&gt;上引发事件&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;  </target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If processing of the &lt;xref:System.Timers.Timer.Elapsed&gt; event lasts longer than &lt;xref:System.Timers.Timer.Interval%2A&gt;, the event might be raised again on another &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果不需要处理&lt;xref:System.Timers.Timer.Elapsed&gt;事件持续时间超过&lt;xref:System.Timers.Timer.Interval%2A&gt;，可能在另一台再次引发此事件&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情况下，事件处理程序应该是可重入。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The event-handling method might run on one thread at the same time that another thread calls the &lt;xref:System.Timers.Timer.Stop%2A&gt; method or sets the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 事件处理方法可能在一个线程上运行另一个线程调用的同时&lt;xref:System.Timers.Timer.Stop%2A&gt;方法或设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the timer is stopped.</source>
          <target state="translated">这可能会导致&lt;xref:System.Timers.Timer.Elapsed&gt;后停止计时器引发事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The example code for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to avoid this race condition.</source>
          <target state="translated">代码示例&lt;xref:System.Timers.Timer.Stop%2A&gt;方法演示一种方法，以避免此争用情况。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Even if &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; is not <ph id="ph1">`null`</ph>, &lt;xref:System.Timers.Timer.Elapsed&gt; events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph2">`false`</ph>, because the signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;不<ph id="ph1">`null`</ph>，&lt;xref:System.Timers.Timer.Elapsed&gt;事件可能会发生后&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;调用方法后或&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性已设置为<ph id="ph2">`false`</ph>，这是因为信号以引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件总是排队等待线程池线程上执行。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the &lt;xref:System.Timers.Timer.Elapsed&gt; event to ignore subsequent events.</source>
          <target state="translated">解决此争用条件设置一个标志，通知的事件处理程序是一种方法&lt;xref:System.Timers.Timer.Elapsed&gt;忽略后续的事件的事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you use the Timer class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the Timer to the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">如果与用户界面元素，如窗体或控件，使用计时器类而无需将计时器在该用户界面元素上的分配的窗体或控件包含计时器设置为&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;属性，以便将事件封送到的用户界面线程。&lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a list of default property values for an instance of Timer, see the &lt;xref:System.Timers.Timer.%23ctor%2A&gt; constructor.</source>
          <target state="translated">实例的计时器的默认属性值的列表，请参阅&lt;xref:System.Timers.Timer.%23ctor%2A&gt;构造函数。&lt;/xref:System.Timers.Timer.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!TIP]</ph> &gt;  Be aware that the .NET Framework Class Library includes four classes named <ph id="ph2">`Timer`</ph>, each of which offers different functionality:   &gt;    &gt;  -   Timer (this topic): fires an event at regular intervals.</source>
          <target state="translated">1&gt; <ph id="ph1">[!TIP]</ph>&amp;1;&gt; 请注意，.NET Framework 类库包括名为的四个类<ph id="ph2">`Timer`</ph>，每个的它提供不同的功能: &gt;&gt;-计时器 （本主题）︰ 按固定的间隔触发事件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">类旨在用作基于服务器或多线程环境中; 中的服务组件它没有用户界面，并且不在运行时可见。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated">1&gt;- &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;︰ 固定时间间隔线程池线程上执行的单个回调方法。&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">当计时器实例化，并且不能更改定义回调方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Like the Timer class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">Timer 类，如同此类被适用于用作基于服务器或多线程环境中; 中的服务组件它没有用户界面，并且不在运行时可见。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;: a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated">1&gt;- &lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;︰ 按固定的间隔触发事件的 Windows 窗体组件。&lt;/xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">组件没有用户界面，并旨在在单线程环境中使用。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated">1&gt;- &lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;︰ 在按固定间隔执行异步或同步网页回发的 ASP.NET 组件。&lt;/xref:System.Web.UI.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, and sets all the properties to their initial values.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，并将所有属性都设置为其初始值。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following table shows initial property values for an instance of &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">下表显示&lt;xref:System.Timers.Timer&gt;.&lt;/xref:System.Timers.Timer&gt;实例的初始属性的值</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Timers.Timer.AutoReset%2A&gt;|<ph id="ph1">`true`</ph>|   |&lt;xref:System.Timers.Timer.Enabled%2A&gt;|<ph id="ph2">`false`</ph>|   |&lt;xref:System.Timers.Timer.Interval%2A&gt;|100 milliseconds|   |&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;|A null reference (<ph id="ph3">`Nothing`</ph> in Visual Basic).|</source>
          <target state="translated">|属性 |初始值 |  |--------------|-------------------|  |&lt;xref:System.Timers.Timer.AutoReset%2A&gt;|<ph id="ph1">`true`</ph>|  |&lt;xref:System.Timers.Timer.Enabled%2A&gt;|<ph id="ph2">`false`</ph>|  |&lt;xref:System.Timers.Timer.Interval%2A&gt;|&amp;100; 毫秒 |  |&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;|空引用 (<ph id="ph3">`Nothing`</ph>在 Visual Basic 中)。 |&lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, and sets the &lt;xref:System.Timers.Timer.Interval*&gt; property to the specified number of milliseconds.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，并设置&lt;xref:System.Timers.Timer.Interval*&gt;属性设置为指定的毫秒数。&lt;/xref:System.Timers.Timer.Interval*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This constructor sets the &lt;xref:System.Timers.Timer.Interval%2A&gt; property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">此构造函数设置&lt;xref:System.Timers.Timer.Interval%2A&gt;属性的新的计时器实例，但不会启用计时器。&lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">以毫秒为单位，两个事件之间的时间。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">值必须大于零且小于或等于<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">interval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero, or greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated">值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">interval</ph> <ept id="p1">&lt;/code&gt;</ept>参数是否小于或等于零，或者大于<ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets or sets a Boolean indicating whether the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should raise the <bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event only once (<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>) or repeatedly (<bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>).</source>
          <target state="translated">获取或设置一个布尔值，该值指示是否<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应引发<bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>仅一次事件 (<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>) 或重复 (<bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer&gt; is already enabled when the &lt;xref:System.Timers.Timer.Start%2A&gt; method is called, the interval is reset.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer&gt;时已经启用&lt;xref:System.Timers.Timer.Start%2A&gt;方法被调用时，时间间隔重置。&lt;/xref:System.Timers.Timer.Start%2A&gt; &lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If AutoReset is <ph id="ph1">`false`</ph>, the &lt;xref:System.Timers.Timer.Start%2A&gt; method must be called in order to start the count again.</source>
          <target state="translated">如果 AutoReset <ph id="ph1">`false`</ph>、&lt;xref:System.Timers.Timer.Start%2A&gt;方法必须调用以便再次开始计数。&lt;/xref:System.Timers.Timer.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Resetting the interval affects when the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised.</source>
          <target state="translated">将间隔重置会影响&lt;xref:System.Timers.Timer.Elapsed&gt;引发事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果将间隔设置为 5 秒，然后设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性<ph id="ph1">`true`</ph>，计数开始时间&lt;xref:System.Timers.Timer.Enabled%2A&gt;设置。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果为计数时 3 秒、 10 秒重置间隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次之后的 13 秒引发事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should raise the <bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> event each time the interval elapses; <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> if it should raise the <bpt id="p5">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> event only once, after the first time the interval elapses.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>应引发<bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>事件间隔已过时; 每个时间<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>如果它应引发<bpt id="p5">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>事件仅在首次后的时间间隔过后。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begins the run-time initialization of a <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or by another component.</source>
          <target state="translated">开始运行时初始化<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于窗体或由另一个组件使用。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph>设计环境使用此方法来启动一个组件，窗体或由另一个组件使用的初始化。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.EndInit%2A&gt; method ends the initialization.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.EndInit%2A&gt;方法初始化已结束。&lt;/xref:System.Timers.Timer.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using the BeginInit and &lt;xref:System.Timers.Timer.EndInit%2A&gt; methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用 BeginInit 和&lt;xref:System.Timers.Timer.EndInit%2A&gt;方法阻止控件完全初始化之前使用。&lt;/xref:System.Timers.Timer.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Releases the resources used by the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">释放使用的资源<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Close method in turn calls the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated">Close 方法反过来调用<ph id="ph1">`Dispose`</ph>方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">释放由当前使用的所有资源<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">达到间隔时发生。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Elapsed event is raised if the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property is <ph id="ph1">`true`</ph> and the time interval (in milliseconds) defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt; property elapses.</source>
          <target state="translated">如果引发已用时间事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性是<ph id="ph1">`true`</ph>由定义的时间间隔 （以毫秒为单位）&lt;xref:System.Timers.Timer.Interval%2A&gt;属性经历。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer.AutoReset%2A&gt; property is <ph id="ph1">`true`</ph>, the event is raised repeatedly at an interval defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt; property; otherwise, the event is raised only once, the first time the &lt;xref:System.Timers.Timer.Interval%2A&gt; value elapses.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.AutoReset%2A&gt;属性是<ph id="ph1">`true`</ph>，由定义的时间间隔重复引发该事件&lt;xref:System.Timers.Timer.Interval%2A&gt;属性; 否则，引发该事件仅一次，第一次&lt;xref:System.Timers.Timer.Interval%2A&gt;值经历。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Timers.Timer.Interval%2A&gt; is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.Interval%2A&gt;后设置&lt;xref:System.Timers.Timer&gt;已启动，会重置计数。&lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果将间隔设置为 5 秒，然后设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;到<ph id="ph1">`true`</ph>，计数开始时间&lt;xref:System.Timers.Timer.Enabled%2A&gt;设置。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the Elapsed event is raised for the first time 13 seconds after &lt;xref:System.Timers.Timer.Enabled%2A&gt; was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果将间隔重置为 10 秒计数为 3 秒时，已用时间事件引发第一次之后的 13 秒&lt;xref:System.Timers.Timer.Enabled%2A&gt;已设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property is <ph id="ph1">`null`</ph>,the Elapsed event is raised on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;属性是<ph id="ph1">`null`</ph>，已用时间事件引发上&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the processing of the Elapsed event lasts longer than &lt;xref:System.Timers.Timer.Interval%2A&gt;, the event might be raised again on another &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果已用时间事件的处理持续时间比&lt;xref:System.Timers.Timer.Interval%2A&gt;，可能在另一台再次引发此事件&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情况下，事件处理程序应该是可重入。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The event-handling method might run on one thread at the same time that another thread calls the &lt;xref:System.Timers.Timer.Stop%2A&gt; method or sets the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 事件处理方法可能在一个线程上运行另一个线程调用的同时&lt;xref:System.Timers.Timer.Stop%2A&gt;方法或设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This might result in the Elapsed event being raised after the timer is stopped.</source>
          <target state="translated">这可能会导致引发后停止计时器已用时间事件。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The example code for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to avoid this race condition.</source>
          <target state="translated">代码示例&lt;xref:System.Timers.Timer.Stop%2A&gt;方法演示一种方法，以避免此争用情况。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Even if &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; is not <ph id="ph1">`null`</ph>, Elapsed events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph2">`false`</ph>, because the signal to raise the Elapsed event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;不<ph id="ph1">`null`</ph>，经过事件可能会发生后&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;调用方法后或&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性已设置为<ph id="ph2">`false`</ph>，因为引发已用时间事件的信号总是排队等待线程池线程上执行。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the Elapsed event to ignore subsequent events.</source>
          <target state="translated">若要解决此争用问题的一种方法是将设置一个标志，通知的事件处理程序已用时间事件忽略后续的事件。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer&gt; component catches and suppresses all exceptions thrown by event handlers for the Elapsed event.</source>
          <target state="translated">&lt;xref:System.Timers.Timer&gt;组件捕获并禁止显示引发的事件处理程序已用时间事件的所有异常。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行为将发生在.NET framework 的未来版本中的更改。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should raise the <bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">获取或设置一个值，该值指示是否<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应引发<bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Setting Enabled to <ph id="ph1">`true`</ph> is the same as calling &lt;xref:System.Timers.Timer.Start%2A&gt;, while setting Enabled to <ph id="ph2">`false`</ph> is the same as calling &lt;xref:System.Timers.Timer.Stop%2A&gt;.</source>
          <target state="translated">将 Enabled 设置为<ph id="ph1">`true`</ph>等同于调用&lt;xref:System.Timers.Timer.Start%2A&gt;，而到启用设置<ph id="ph2">`false`</ph>等同于调用&lt;xref:System.Timers.Timer.Stop%2A&gt;.&lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 信号以引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件始终上排队以便执行&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the Enabled property is set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">这可能会导致&lt;xref:System.Timers.Timer.Elapsed&gt;后的 Enabled 属性设置为要引发事件<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The code example for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to work around this race condition.</source>
          <target state="translated">代码示例&lt;xref:System.Timers.Timer.Stop%2A&gt;方法演示一种方法要解决此争用条件。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If Enabled is set to <ph id="ph1">`true`</ph> and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph2">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果已启用设置为<ph id="ph1">`true`</ph>和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;设置为<ph id="ph2">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件仅后第一次间隔结束。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the interval is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果间隔后设置&lt;xref:System.Timers.Timer&gt;已启动，会重置计数。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the Enabled property to <ph id="ph1">`true`</ph>, the count starts at the time Enabled is set.</source>
          <target state="translated">例如，如果将间隔设置为 5 秒，然后将的 Enabled 属性设置为<ph id="ph1">`true`</ph>，计数开始设置已启用的时间。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after Enabled was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果为 10 秒计数为 3 秒时重置间隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次 13 秒后已启用已设置为引发事件<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some visual designers, such as those in Microsoft Visual Studio, set the Enabled property to <ph id="ph2">`true`</ph> when inserting a new &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 某些可视化设计器，如 Microsoft Visual Studio 中的 Enabled 属性设置为<ph id="ph2">`true`</ph>插入新&lt;xref:System.Timers.Timer&gt;。&lt;/xref:System.Timers.Timer&gt;时</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should raise the <bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> event; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>应引发<bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>事件; 否则为<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">无法设置此属性，因为处理计时器。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.Interval*&gt; property was set to a value greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> before the timer was enabled.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.Interval*&gt;属性设置为一个值大于<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>启用计时器之前。&lt;/xref:System.Timers.Timer.Interval*&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Ends the run-time initialization of a <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or by another component.</source>
          <target state="translated">结束的运行时初始化<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于窗体或由另一个组件使用。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph>设计环境使用此方法来结束用于窗体或由另一个组件使用的组件的初始化。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.BeginInit%2A&gt; method starts the initialization.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;方法开始初始化。&lt;/xref:System.Timers.Timer.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Using the &lt;xref:System.Timers.Timer.BeginInit%2A&gt; and EndInit methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用&lt;xref:System.Timers.Timer.BeginInit%2A&gt;和 EndInit 方法阻止控件完全初始化之前使用。&lt;/xref:System.Timers.Timer.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">获取或设置的间隔，以毫秒为单位，引发<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You use the Interval property to determine the frequency at which the &lt;xref:System.Timers.Timer.Elapsed&gt; event is fired.</source>
          <target state="translated">你使用的间隔属性来确定的频率&lt;xref:System.Timers.Timer.Elapsed&gt;激发事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Timers.Timer&gt; class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated">因为&lt;xref:System.Timers.Timer&gt;类取决于系统时钟，它同时具有相同的系统时钟的分辨率。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that the &lt;xref:System.Timers.Timer.Elapsed&gt; event will fire at an interval defined by the resolution of the system clock if the Interval property is less than the resolution of the system clock.</source>
          <target state="translated">这意味着，&lt;xref:System.Timers.Timer.Elapsed&gt;事件将激发的时间间隔的间隔属性是否早于系统时钟的分辨率定义的系统时钟的分辨率。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example sets the Interval property to 5 milliseconds.</source>
          <target state="translated">下面的示例将 Interval 属性设置为 5 毫秒。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">在上运行时<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>系统的系统时钟的分辨率大约 15 毫秒，事件将触发大约每隔 15 毫秒，而不是每隔 5 毫秒。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer.Interval#1<ept id="p2">](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer.Interval#1<ept id="p4">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb)</ept><ept id="p3">]</ept>       You can use the following code to determine the resolution of the system clock on the current system:       <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.Timers.Timer.Interval#2<ept id="p6">](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)</ept><ept id="p5">]</ept>  <bpt id="p7">[!code-vb</bpt><bpt id="p8">[</bpt>System.Timers.Timer.Interval#2<ept id="p8">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb)</ept><ept id="p7">]</ept>       If your app requires greater resolution than that offered by the &lt;xref:System.Timers.Timer&gt; class or the system clock, use the high-resolution multimedia timers; see <bpt id="p9">[</bpt>How to: Use the High-Resolution Timer<ept id="p9">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer.Interval#1<ept id="p2">](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer.Interval#1<ept id="p4">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb)</ept> <ept id="p3">]</ept>可以使用下面的代码以确定当前系统上的系统时钟的分辨率︰ <bpt id="p5">[!code-cs</bpt> <bpt id="p6">[</bpt>System.Timers.Timer.Interval#2<ept id="p6">](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)</ept><ept id="p5">]</ept><bpt id="p7">[!code-vb</bpt><bpt id="p8">[</bpt>System.Timers.Timer.Interval#2<ept id="p8">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb)</ept> <ept id="p7">]</ept>如果你的应用需要比提供的更大的分辨率&lt;xref:System.Timers.Timer&gt;类或使用高分辨率的多媒体计时器; 请参阅系统时钟<bpt id="p9">[</bpt>如何︰ 使用高分辨率计时器<ept id="p9">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>。&lt;/xref:System.Timers.Timer&gt;    </target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the interval is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果间隔后设置&lt;xref:System.Timers.Timer&gt;已启动，会重置计数。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果将间隔设置为 5 秒，然后设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性<ph id="ph1">`true`</ph>，计数开始时间&lt;xref:System.Timers.Timer.Enabled%2A&gt;设置。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after &lt;xref:System.Timers.Timer.Enabled%2A&gt; was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果为 10 秒计数为 3 秒时重置间隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次之后的 13 秒引发事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;已设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set to <ph id="ph1">`true`</ph> and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph2">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.Enabled%2A&gt;设置为<ph id="ph1">`true`</ph>和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;设置为<ph id="ph2">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件仅后第一次间隔结束。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Timers.Timer.Enabled%2A&gt; is then set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.Enabled%2A&gt;然后将设置为<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If &lt;xref:System.Timers.Timer.Enabled%2A&gt; and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; are both set to <ph id="ph2">`false`</ph>, and the timer has previously been enabled, setting the Interval property causes the &lt;xref:System.Timers.Timer.Elapsed&gt; event to be raised once, as if the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property had been set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果&lt;xref:System.Timers.Timer.Enabled%2A&gt;和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;都设置为<ph id="ph2">`false`</ph>，和计时器以前已启用，设置间隔属性会导致&lt;xref:System.Timers.Timer.Elapsed&gt;事件被引发一次，就像&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性必须设置为<ph id="ph3">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To set the interval without raising the event, you can temporarily set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, set the Interval property to the desired time interval, and then immediately set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property back to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">若要将间隔设置而不会引发该事件，可以暂时设置&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性<ph id="ph1">`true`</ph>、 将间隔属性设置为所需的时间间隔，并立即将&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性改回<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The time, in milliseconds, between <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> events.</source>
          <target state="translated">时间，以毫秒为单位，之间<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">值必须大于零，且小于或等于<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">默认值为 100 毫秒。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">间隔小于或等于零。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>-or-       The interval is greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">-或-间隔大于<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>，和当前启用计时器。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">（如果当前未启用计时器，则不引发异常之前它将变为启用状态。）</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets or sets the site that binds the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its container in design mode.</source>
          <target state="translated">获取或设置绑定的站点<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>到其容器在设计模式下。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Sites bind a &lt;xref:System.ComponentModel.Component&gt; to a &lt;xref:System.ComponentModel.Container&gt; and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">站点绑定&lt;xref:System.ComponentModel.Component&gt;到&lt;xref:System.ComponentModel.Container&gt;和启用它们之间的通信，以及提供有关要管理其组件的容器的一种方法。&lt;/xref:System.ComponentModel.Container&gt; &lt;/xref:System.ComponentModel.Component&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface representing the site that binds the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object to its container.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>接口，表示将绑定的站点<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>到其容器的对象。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Starts raising the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event by setting &lt;xref:System.Timers.Timer.Enabled*&gt; to <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">开始引发<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件通过设置&lt;xref:System.Timers.Timer.Enabled*&gt;到<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Timers.Timer.Enabled*&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If Start is called and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果调用 Start 和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;设置为<ph id="ph1">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件仅后第一次间隔结束。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If Start is called and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is <ph id="ph1">`true`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">如果调用 Start 和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;是<ph id="ph1">`true`</ph>、&lt;xref:System.Timers.Timer&gt;引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件第一个时间间隔和经过继续在指定的时间间隔引发事件。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can also start timing by setting &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">你还可以通过设置启动计时&lt;xref:System.Timers.Timer.Enabled%2A&gt;到<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is <ph id="ph2">`false`</ph>, the Start method must be called in order to start the count again.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果&lt;xref:System.Timers.Timer.AutoReset%2A&gt;是<ph id="ph2">`false`</ph>，为了再次开始计数，必须调用 Start 方法。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A call to the Start method when the timer is enabled has no effect.</source>
          <target state="translated">对计时器处于启用状态时的启动方法的调用不起作用。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is created with an interval equal to or greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>等于或大于使其时间间隔创建<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> + 1 或被设置为一个时间间隔小于零。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Stops raising the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event by setting &lt;xref:System.Timers.Timer.Enabled*&gt; to <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">停止引发<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件通过设置&lt;xref:System.Timers.Timer.Enabled*&gt;到<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Timers.Timer.Enabled*&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can also stop timing by setting &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">您也可以通过设置终止计时&lt;xref:System.Timers.Timer.Enabled%2A&gt;到<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a &lt;xref:System.Threading.ThreadPool&gt; thread, so the event-handling method might run on one thread at the same time that a call to the Stop method runs on another thread.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 信号以引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件始终上排队以便执行&lt;xref:System.Threading.ThreadPool&gt;线程，因此调用停止方法在另一个线程上运行的同时，事件处理方法可能会运行一个线程。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the Stop method is called.</source>
          <target state="translated">这可能会导致&lt;xref:System.Timers.Timer.Elapsed&gt;调用停止方法后引发事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">下一节中的代码示例演示一个方法，若要解决此争用条件。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">获取或设置用于封送时间隔过后，将发出的事件处理程序调用的对象。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>When SynchronizingObject is <ph id="ph1">`null`</ph>, the method that handles the &lt;xref:System.Timers.Timer.Elapsed&gt; event is called on a thread from the system-thread pool.</source>
          <target state="translated">SynchronizingObject 时<ph id="ph1">`null`</ph>，处理的方法&lt;xref:System.Timers.Timer.Elapsed&gt;在系统线程池中的线程上调用事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information on system-thread pools, see &lt;xref:System.Threading.ThreadPool&gt;.</source>
          <target state="translated">系统线程池的详细信息，请参阅&lt;xref:System.Threading.ThreadPool&gt;。&lt;/xref:System.Threading.ThreadPool&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Timers.Timer.Elapsed&gt; event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">当&lt;xref:System.Timers.Timer.Elapsed&gt;由可视化的 Windows 窗体组件，如按钮，可能会引发异常或只是结果可能无法通过系统线程池访问组件处理事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Avoid this effect by setting SynchronizingObject to a Windows Forms component, which causes the method that handles the &lt;xref:System.Timers.Timer.Elapsed&gt; event to be called on the same thread that the component was created on.</source>
          <target state="translated">通过设置 SynchronizingObject 到 Windows 窗体组件时，这会导致处理的方法来避免这种效果&lt;xref:System.Timers.Timer.Elapsed&gt;事件创建该组件在同一线程上调用。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Even if the SynchronizingObject property is not <ph id="ph2">`null`</ph>, &lt;xref:System.Timers.Timer.Elapsed&gt; events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph3">`false`</ph>, because the signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a thread pool thread.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 即使 SynchronizingObject 属性不是<ph id="ph2">`null`</ph>，&lt;xref:System.Timers.Timer.Elapsed&gt;事件可能会发生后&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;调用方法后或&lt;xref:System.Timers.Timer.Enabled%2A&gt;属性已设置为<ph id="ph3">`false`</ph>，这是因为信号以引发&lt;xref:System.Timers.Timer.Elapsed&gt;事件总是排队等待线程池线程上执行。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the &lt;xref:System.Timers.Timer.Elapsed&gt; event to ignore subsequent events.</source>
          <target state="translated">解决此争用条件设置一个标志，通知的事件处理程序是一种方法&lt;xref:System.Timers.Timer.Elapsed&gt;忽略后续的事件的事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer&gt; is used inside Visual Studio in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer&gt;是在 Windows 窗体设计器中使用在 Visual Studio 内，SynchronizingObject 将自动设置为该控件包含&lt;xref:System.Timers.Timer&gt;.&lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example, if you place a &lt;xref:System.Timers.Timer&gt; on a designer for <ph id="ph1">`Form1`</ph> (which inherits from &lt;xref:System.Windows.Forms.Form&gt;), the SynchronizingObject property of &lt;xref:System.Timers.Timer&gt; is set to the instance of <ph id="ph2">`Form1`</ph>.</source>
          <target state="translated">例如，如果你将放置&lt;xref:System.Timers.Timer&gt;的设计器上<ph id="ph1">`Form1`</ph>(其继承自&lt;xref:System.Windows.Forms.Form&gt;) 的 SynchronizingObject 属性&lt;xref:System.Timers.Timer&gt;设置为的实例<ph id="ph2">`Form1`</ph>。&lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Windows.Forms.Form&gt; &lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示对象，该对象用于封送时间隔过后，将发出的事件处理程序调用。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>