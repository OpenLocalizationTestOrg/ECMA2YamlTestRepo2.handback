<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e380be4474237c2f088cb14445641a67f71425b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ParameterizedThreadStart.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46773aa3a880c892075b4e961922644b90ed743e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44c10de7aee5cd9759c15f18c6f0a26c87b5d110</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the method that executes on a <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">表示在执行的方法<bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When a managed thread is created, the method that executes on the thread is represented by:      -   A &lt;xref:System.Threading.ThreadStart&gt; delegate that is passed to the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName&gt; constructor.</source>
          <target state="translated">创建一个托管的线程时，由表示的线程执行的方法:-&lt;xref:System.Threading.ThreadStart&gt;委托传递给&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName&gt;构造函数。&lt;/xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName&gt; &lt;/xref:System.Threading.ThreadStart&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Any method that has no parameters and that returns <ph id="ph1">`void`</ph> in C# or is a <ph id="ph2">`Sub`</ph> procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">该操作没有参数，将返回的任何方法<ph id="ph1">`void`</ph>在 C# 或<ph id="ph2">`Sub`</ph>Visual Basic 中的过程可以表示该委托。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   A ParameterizedThreadStart delegate that is passed to the &lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName&gt; constructor.</source>
          <target state="translated">-传递到 a ParameterizedThreadStart 委托&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName&gt;构造函数。&lt;/xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any method that has a single parameter of type &lt;xref:System.Object&gt; and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">只有一个参数类型的任何方法&lt;xref:System.Object&gt;并且返回 void 在 C# 或 Visual Basic 中的 Sub 过程可以表示该委托。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The thread does not begin executing until the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method is called.</source>
          <target state="translated">线程不会开始执行之前&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;调用方法。&lt;/xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.ThreadStart&gt; or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</source>
          <target state="translated">&lt;xref:System.Threading.ThreadStart&gt;或的线程上调用 ParameterizedThreadStart 委托和委托所表示的方法的第一个行处开始执行。&lt;/xref:System.Threading.ThreadStart&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the case of the ParameterizedThreadStart delegate, the object that is passed to the &lt;xref:System.Threading.Thread.Start%28System.Object%29&gt; method is passed to the delegate.</source>
          <target state="translated">对于 ParameterizedThreadStart 委托，该对象传递给&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;方法传递给委托。&lt;/xref:System.Threading.Thread.Start%28System.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic and C# users can omit the &lt;xref:System.Threading.ThreadStart&gt; or ParameterizedThreadStart delegate constructor when creating a thread.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; Visual Basic 和 C# 用户可以省略&lt;xref:System.Threading.ThreadStart&gt;或 ParameterizedThreadStart 委托构造函数创建线程时。&lt;/xref:System.Threading.ThreadStart&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <ph id="ph1">`AddressOf`</ph> operator when passing your method to the &lt;xref:System.Threading.Thread.%23ctor%2A&gt; constructor; for example, <ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">在 Visual Basic 中，使用<ph id="ph1">`AddressOf`</ph>运算符传递到你的方法时&lt;xref:System.Threading.Thread.%23ctor%2A&gt;构造函数; 例如， <ph id="ph2">`Dim t As New Thread(AddressOf ThreadProc)`</ph>。&lt;/xref:System.Threading.Thread.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In C#, simply specify the name of the thread procedure.</source>
          <target state="translated">在 C# 中，只需指定线程过程的名称。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The compiler selects the correct delegate constructor.</source>
          <target state="translated">编译器选择正确的委托构造函数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; ParameterizedThreadStart 委托的实例方法是在 c + + 中创建的构造函数的第一个参数时，实例变量。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a static method, the first parameter of the constructor is zero.</source>
          <target state="translated">对于静态方法，构造函数的第一个参数为零。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</source>
          <target state="translated">对于静态方法，委托构造函数只需要一个参数︰ 回调方法中，由类名称限定的地址。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The ParameterizedThreadStart delegate and the &lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt; method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to &lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;.</source>
          <target state="translated">ParameterizedThreadStart 委托和&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;方法重载进行轻松地将数据传递给一个线程的过程，但这种技术是不安全的类型，因为可以将任何对象传递到&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;。&lt;/xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt; &lt;/xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</source>
          <target state="translated">若要将数据传递给一个线程的过程更可靠方法是放入一个辅助对象的线程的过程和数据字段。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Threads and Passing Data at Start Time<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>创建线程并在启动时传递数据<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The ParameterizedThreadStart delegate supports only a single parameter.</source>
          <target state="translated">ParameterizedThreadStart 委托支持单个参数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can pass multiple data items to the ParameterizedThreadStart by making that parameter one of the following:      -   An array.</source>
          <target state="translated">通过进行以下情况之一，该参数传递给 ParameterizedThreadStart 多个数据项:-的数组。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-   A collection type, if all of the data items are of the same type.</source>
          <target state="translated">的如果所有的数据项均为相同类型集合类型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   A tuple type, such as &lt;xref:System.Tuple%602&gt; or &lt;xref:System.Tuple%604&gt;.</source>
          <target state="translated">-一个元组类型，例如&lt;xref:System.Tuple%602&gt;或&lt;xref:System.Tuple%604&gt;。&lt;/xref:System.Tuple%604&gt; &lt;/xref:System.Tuple%602&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>