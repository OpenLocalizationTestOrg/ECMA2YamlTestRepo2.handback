<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b64572575619f7a896684e2196bf4e2b0992954f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Reflection.Emit.DynamicILInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9795995cb91f3681e797fa94c5ddac79197eb8d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8886c1867fbf54fb3be60e1ace1708b37380f95d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</source>
          <target state="translated">提供对用于生成 Microsoft 中间语言 (MSIL) 的其他方法支持和动态方法，包括方法用于创建令牌并将插入代码、 异常处理和局部变量签名 blob 元数据。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The DynamicILInfo class allows developers to write their own MSIL generators instead of using &lt;xref:System.Reflection.Emit.ILGenerator&gt;.</source>
          <target state="translated">DynamicILInfo 类允许开发人员编写而不是使用&lt;xref:System.Reflection.Emit.ILGenerator&gt;.&lt;/xref:System.Reflection.Emit.ILGenerator&gt;自己 MSIL 生成器</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</source>
          <target state="translated">若要创建其他类型的实例，调用方法和等等，你生成的 MSIL 必须包括这些实体的令牌。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The DynamicILInfo class provides several overloads of the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method, which return tokens valid in the scope of the current DynamicILInfo.</source>
          <target state="translated">DynamicILInfo 类提供了几个重载&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;方法，它返回令牌当前 DynamicILInfo 的作用域中有效。&lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, if you need to call an overload of the &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt; method, you can obtain a &lt;xref:System.RuntimeMethodHandle&gt; for that overload and pass it to the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method to obtain a token to embed in your MSIL.</source>
          <target state="translated">例如，如果你需要调用的重载&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;方法，你可以获取&lt;xref:System.RuntimeMethodHandle&gt;的重载，并将其传递到&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;方法以获取用于在你 MSIL 中嵌入的令牌。&lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; &lt;/xref:System.RuntimeMethodHandle&gt; &lt;/xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Once you have created &lt;xref:System.Byte&gt; arrays for your local variable signature, exceptions, and code body, you can use the &lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;, &lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;, and &lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt; methods to insert them into the &lt;xref:System.Reflection.Emit.DynamicMethod&gt; associated with your DynamicILInfo object.</source>
          <target state="translated">创建后&lt;xref:System.Byte&gt;阵列以便进行本地变量的签名、 异常和代码体，你可以使用&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;， &lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;，和&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;方法将它们插入&lt;xref:System.Reflection.Emit.DynamicMethod&gt;与 DynamicILInfo 对象相关联。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt; &lt;/xref:System.Byte&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">生成你自己的元数据和 MSIL 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"和"第三部分︰ CIL 指令集"。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 并使用 DynamicILInfo 来生成通过直接调用委托构造函数创建指向另一种动态方法的委托的代码。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt; method to create the delegate.</source>
          <target state="translated">请改用&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;方法来创建委托。&lt;/xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</source>
          <target state="translated">一个委托，可使用委托构造函数创建没有对目标动态方法的引用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</source>
          <target state="translated">仍在使用委托时，可能通过垃圾回收回收的动态方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets the dynamic method whose body is generated by the current instance.</source>
          <target state="translated">获取动态方法的正文生成由当前实例。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object is always associated with a dynamic method.</source>
          <target state="translated">A&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象始终是一个动态方法与相关联。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the &lt;xref:System.Reflection.Emit.ILGenerator&gt; class.</source>
          <target state="translated">用途的&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;类旨在提供另一种插入 MSIL 流、 异常处理和局部变量签名转换为动态方法，开发人员想要生成 MSIL，而无需使用&lt;xref:System.Reflection.Emit.ILGenerator&gt;类。&lt;/xref:System.Reflection.Emit.ILGenerator&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.Emit.DynamicMethod&gt; object representing the dynamic method for which the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is generating code.</source>
          <target state="translated">A&lt;xref:System.Reflection.Emit.DynamicMethod&gt;对象表示动态方法为其当前<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象是否正在生成代码。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing the signature for the associated dynamic method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示关联的动态方法的签名。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">有关签名 blob 的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An array that contains the signature.</source>
          <target state="translated">一个数组，包含签名。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</source>
          <target state="translated">可以嵌入在元数据和关联的动态方法的 MSIL 流令牌。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a dynamic method to be called from the associated method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示从关联的方法调用的动态方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">返回此方法重载的标记，你可以从当前与关联的动态方法调用的动态方法&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To call the associated dynamic method recursively, pass the value of the &lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt; property.</source>
          <target state="translated">若要调用关联的动态方法以递归方式，请将的值传递&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;属性。&lt;/xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The dynamic method to call.</source>
          <target state="translated">要调用的动态方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</source>
          <target state="translated">作为 MSIL 指令的目标可嵌入到关联的动态方法的 MSIL 流令牌。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示要从关联的动态方法访问的字段。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">你必须获取将由与当前关联的动态方法访问的任何字段的令牌&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.</source>
          <target state="translated">使用&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.FieldInfo&gt;你想要访问，则使用&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;属性来获取&lt;xref:System.RuntimeFieldHandle&gt;.&lt;/xref:System.RuntimeFieldHandle&gt;&lt;/xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;的字段&lt;/xref:System.Reflection.FieldInfo&gt;&lt;/xref:System.Type.GetField%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The field to be accessed.</source>
          <target state="translated">要访问的字段。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作访问字段，当前的作用域中的 MSIL 指令的操作数的令牌<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a method to be accessed from the associated dynamic method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示要从关联的动态方法访问的方法。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You must obtain a token for any method that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">你必须获取将由与当前关联的动态方法访问的任何方法的令牌&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to access, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.</source>
          <target state="translated">使用&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.MethodInfo&gt;你想要访问，以及如何将&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;属性来获取&lt;xref:System.RuntimeMethodHandle&gt;.&lt;/xref:System.RuntimeMethodHandle&gt;&lt;/xref:System.Reflection.MethodBase.MethodHandle%2A&gt;方法&lt;/xref:System.Reflection.MethodInfo&gt;&lt;/xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  For a method that belongs to a generic type, use the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt; method overload and specify a &lt;xref:System.RuntimeTypeHandle&gt; for the generic type.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 属于泛型类型的方法，使用&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;方法重载，并指定&lt;xref:System.RuntimeTypeHandle&gt;泛型类型。&lt;/xref:System.RuntimeTypeHandle&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method to be accessed.</source>
          <target state="translated">要访问的方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作访问方法，如的 MSIL 指令的操作数的令牌&lt;xref:System.Reflection.Emit.OpCodes.Call&gt;或&lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;，当前的作用域中<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。&lt;/xref:System.Reflection.Emit.OpCodes.Ldtoken&gt; &lt;/xref:System.Reflection.Emit.OpCodes.Call&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a type to be used in the associated dynamic method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示关联的动态方法中使用的类型。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">返回此方法重载的标记，可定义本地的变量类型，并发出创建类型的实例中与当前关联的动态方法的 MSIL&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To get a &lt;xref:System.RuntimeTypeHandle&gt; representing a type, use the &lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">若要获取&lt;xref:System.RuntimeTypeHandle&gt;表示的类型，使用&lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; &lt;/xref:System.RuntimeTypeHandle&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The type to be used.</source>
          <target state="translated">要使用的类型。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作需要的类型，当前的作用域中的 MSIL 指令的操作数的令牌<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a string literal to be used in the associated dynamic method.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示字符串文本在关联的动态方法中使用。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The string to be used.</source>
          <target state="translated">要使用的字符串。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作必须为字符串，当前的作用域中的 MSIL 指令的操作数的令牌<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示一个字段，以从关联的动态方法; 访问该字段是指定的泛型类型上。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">你必须获取将由与当前关联的动态方法访问的任何字段的令牌&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, and then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.</source>
          <target state="translated">使用&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.FieldInfo&gt;你想要访问，以及如何将&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;属性来获取&lt;xref:System.RuntimeFieldHandle&gt;.&lt;/xref:System.RuntimeFieldHandle&gt;&lt;/xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;的字段&lt;/xref:System.Reflection.FieldInfo&gt;&lt;/xref:System.Type.GetField%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The field to be accessed.</source>
          <target state="translated">要访问的字段。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The generic type the field belongs to.</source>
          <target state="translated">字段属于泛型类型。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作访问当前的作用域中的字段的 MSIL 指令的操作数的令牌<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a method on a generic type.</source>
          <target state="translated">获取一个令牌，在当前的作用域中有效<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，表示泛型类型上的方法。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You must obtain a token for any method that will be called by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">你必须获取将由与当前的动态方法调用任何方法的令牌&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;对象。&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to call, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.</source>
          <target state="translated">使用&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.MethodInfo&gt;你想要调用，以及如何将&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;属性来获取&lt;xref:System.RuntimeMethodHandle&gt;.&lt;/xref:System.RuntimeMethodHandle&gt;&lt;/xref:System.Reflection.MethodBase.MethodHandle%2A&gt;方法&lt;/xref:System.Reflection.MethodInfo&gt;&lt;/xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The method.</source>
          <target state="translated">该方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The generic type the method belongs to.</source>
          <target state="translated">该方法所属的泛型类型。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">可以用作访问方法，如的 MSIL 指令的操作数的令牌&lt;xref:System.Reflection.Emit.OpCodes.Call&gt;或&lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;，当前的作用域中<bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。&lt;/xref:System.Reflection.Emit.OpCodes.Ldtoken&gt; &lt;/xref:System.Reflection.Emit.OpCodes.Call&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">设置关联的动态方法的代码正文。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">MSIL 流上不执行任何有效性检查。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">第二次调用此方法的第二个替换第一个 MSIL 流。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">生成你自己的元数据和 MSIL 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"和"第三部分︰ CIL 指令集"。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array that contains the MSIL stream.</source>
          <target state="translated">包含 MSIL 流的数组。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">在执行方法时操作数堆栈上最大项数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">设置关联的动态方法的代码正文。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">MSIL 流上不执行任何有效性检查。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">第二次调用此方法的第二个替换第一个 MSIL 流。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</source>
          <target state="translated">生成你自己的元数据和 MSIL 要求熟悉的公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"和"第三部分︰ CIL 指令集。"</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A pointer to a byte array containing the MSIL stream.</source>
          <target state="translated">指向包含 MSIL 流的字节数组的指针。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The number of bytes in the MSIL stream.</source>
          <target state="translated">MSIL 流中的字节数。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">在执行方法时操作数堆栈上最大项数。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;code&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;codeSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;code&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<ph id="ph2">&lt;code&gt;codeSize&lt;/code&gt;</ph>大于 0。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;codeSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;codeSize&lt;/code&gt;</ph>小于 0。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">设置关联的动态方法的异常元数据。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">方法的异常元数据定义的位置和大小的所有<ph id="ph1">`try`</ph>， <ph id="ph2">`catch`</ph>， <ph id="ph3">`finally`</ph>，筛选器和错误处理块。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">此元数据的布局的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An array that contains the exception metadata.</source>
          <target state="translated">一个数组，包含异常元数据。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">设置关联的动态方法的异常元数据。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">方法的异常元数据定义的位置和大小的所有<ph id="ph1">`try`</ph>， <ph id="ph2">`catch`</ph>， <ph id="ph3">`finally`</ph>，筛选器和错误处理块。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">此元数据的布局的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"和"第三部分︰ CIL 指令集"。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A pointer to a byte array containing the exception metadata.</source>
          <target state="translated">指向包含异常元数据的字节数组的指针。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The number of bytes of exception metadata.</source>
          <target state="translated">异常元数据的字节数。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;exceptions&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;exceptions&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<ph id="ph2">&lt;code&gt;exceptionSize&lt;/code&gt;</ph>大于 0。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;exceptionSize&lt;/code&gt;</ph>小于 0。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">设置描述关联的动态方法的本地变量的布局的本地变量签名。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">局部变量签名描述方法的本地变量的布局。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.</source>
          <target state="translated">若要简化的局部变量签名的构造，使用<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中)&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.Emit.SignatureHelper&gt;用于签名。&lt;/xref:System.Reflection.Emit.SignatureHelper&gt; &lt;/xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">本地变量的签名的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.</source>
          <target state="translated">一个数组，其中包含关联&lt;xref:System.Reflection.Emit.DynamicMethod&gt;。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;的本地变量的布局</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">设置描述关联的动态方法的本地变量的布局的本地变量签名。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">局部变量签名描述方法的本地变量的布局。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.</source>
          <target state="translated">若要简化的局部变量签名的构造，使用<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中)&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;方法以获取&lt;xref:System.Reflection.Emit.SignatureHelper&gt;用于签名。&lt;/xref:System.Reflection.Emit.SignatureHelper&gt; &lt;/xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">本地变量的签名的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是"第 ii 部分︰ 元数据定义和语义"。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">联机; 我们提供了文档请参阅<bpt id="p1">[</bpt>ECMA C# 和公共语言基础结构标准<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>MSDN 上和<bpt id="p2">[</bpt>标准 ecma-335-公共语言基础结构 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 网站上。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.</source>
          <target state="translated">一个数组，其中包含关联&lt;xref:System.Reflection.Emit.DynamicMethod&gt;。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;的本地变量的布局</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The number of bytes in the signature.</source>
          <target state="translated">签名中的字节数。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localSignature&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;localSignature&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<ph id="ph2">&lt;code&gt;signatureSize&lt;/code&gt;</ph>大于 0。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;signatureSize&lt;/code&gt;</ph>小于 0。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>