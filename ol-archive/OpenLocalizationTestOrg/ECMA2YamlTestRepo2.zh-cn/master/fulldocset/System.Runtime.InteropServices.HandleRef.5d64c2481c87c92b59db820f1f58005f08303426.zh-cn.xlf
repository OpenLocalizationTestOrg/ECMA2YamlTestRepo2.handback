<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59d0e692a4f187a91206d925ed26bd10132538f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.HandleRef.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ada1635cafe9c98debfab4ebdd87f47645002dba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffde11eda59cc7e4497da620dd922a195c60d014</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</source>
          <target state="translated">包装持有句柄到传递给非托管代码使用平台的资源的托管的对象调用。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  Starting with the .NET Framework 2.0, the functionality of the HandleRef class has been replaced by the &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; class and its derived classes, as well as by the &lt;xref:System.Runtime.InteropServices.CriticalHandle&gt; class.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>1&gt; 从.NET Framework 2.0，HandleRef 类的功能已被取代&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;类和派生的类，也就&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;类&lt;/xref:System.Runtime.InteropServices.CriticalHandle&gt;&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object.</source>
          <target state="translated">如果使用平台调用来调用的托管的对象和平台 invoke 调用之后，不在其他位置引用的对象，它可以为垃圾回收器以完成对托管的对象。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This action releases the resource and invalidates the handle, causing the platform invoke call to fail.</source>
          <target state="translated">此操作将释放资源并使该句柄，从而导致平台 invoke 调用失败。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Wrapping a handle with HandleRef guarantees that the managed object is not garbage collected until the platform invoke call completes.</source>
          <target state="translated">包装的句柄与 HandleRef 保证托管的对象不垃圾回收之前的平台调用调用完成。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a description of platform invoke services, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关平台的说明来调用服务，请参阅<bpt id="p1">[</bpt>使用非托管 DLL 函数<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The HandleRef value type, like &lt;xref:System.Runtime.InteropServices.GCHandle&gt;, is a special type recognized by the interop marshaler.</source>
          <target state="translated">HandleRef 值类型，如&lt;xref:System.Runtime.InteropServices.GCHandle&gt;，是识别的互操作封送处理程序的特殊类型。&lt;/xref:System.Runtime.InteropServices.GCHandle&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A normal, nonpinned &lt;xref:System.Runtime.InteropServices.GCHandle&gt; also prevents untimely garbage collection, yet HandleRef provides better performance.</source>
          <target state="translated">一个正常的、 nonpinned&lt;xref:System.Runtime.InteropServices.GCHandle&gt;还可以防止不及时垃圾回收，同时还可 HandleRef 提供更好的性能。&lt;/xref:System.Runtime.InteropServices.GCHandle&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although using HandleRef to keep an object alive for the duration of a platform invoke call is preferred, you can also use the &lt;xref:System.GC.KeepAlive%2A?displayProperty=fullName&gt; method for the same purpose.</source>
          <target state="translated">尽管使用 HandleRef 使对象保持活动状态的持续时间内的一个平台调用调用首选，你还可以使用&lt;xref:System.GC.KeepAlive%2A?displayProperty=fullName&gt;用于相同目的的方法。&lt;/xref:System.GC.KeepAlive%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The HandleRef constructor takes two parameters: an &lt;xref:System.Object&gt; representing the wrapper, and an &lt;xref:System.IntPtr&gt; representing the unmanaged handle.</source>
          <target state="translated">HandleRef 构造函数采用两个参数︰&lt;xref:System.Object&gt;表示包装和&lt;xref:System.IntPtr&gt;表示的非托管的句柄。&lt;/xref:System.IntPtr&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the <ph id="ph1">`HandleRef`</ph>) remains alive for the duration of the call.</source>
          <target state="translated">互操作封送处理程序将仅将句柄传递给非托管代码，而可保证包装 (作为第一个参数传递给的构造函数<ph id="ph1">`HandleRef`</ph>) 调用持续时间内保持活动状态。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the object to wrap and a handle to the resource used by unmanaged code.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类包装的对象和由非托管代码使用的资源的句柄。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A managed object that should not be finalized until the platform invoke call returns.</source>
          <target state="translated">应完成，直到平台 invoke 调用的托管的对象返回。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that indicates a handle to a resource.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;，该值指示资源的句柄。&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Gets the handle to a resource.</source>
          <target state="translated">获取资源的句柄。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The handle to a resource.</source>
          <target state="translated">资源句柄。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns the internal integer representation of a <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">返回的内部整数表示形式<bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to retrieve an internal integer representation from.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象以检索从内部整数表示形式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; object that represents a <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;对象，表示<bpt id="p1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets the object holding the handle to a resource.</source>
          <target state="translated">获取保存资源句柄的对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The object holding the handle to a resource.</source>
          <target state="translated">保存对资源的句柄的对象。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>