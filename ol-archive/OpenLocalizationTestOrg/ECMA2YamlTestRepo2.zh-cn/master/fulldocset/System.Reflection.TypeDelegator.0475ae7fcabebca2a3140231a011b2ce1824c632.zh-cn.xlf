<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7e30c7bffed07c13e208d6728f4d0aa024cc921</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Reflection.TypeDelegator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">642acb21f93ac7261eb95c74fe9eee498f4f12f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f77c6300604b67af47b47e5fa168aa971028c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Wraps a <ph id="ph1">&amp;lt;</ph>xref:System.Type?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object and delegates methods to that <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">包装<ph id="ph1">&amp;lt;</ph>xref:System.Type?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>到的对象和委托方法<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by TypeDelegator.</source>
          <target state="translated">从此类型派生，重写你必须提供自定义项中，这些成员加上所需的程序和由 TypeDelegator 尚未实现的任意成员。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>TypeDelegator derives from &lt;xref:System.Type?displayProperty=fullName&gt; and implements most of the properties and methods of &lt;xref:System.Type&gt;.</source>
          <target state="translated">TypeDelegator 派生&lt;xref:System.Type?displayProperty=fullName&gt;并实现大部分的属性和方法的&lt;xref:System.Type&gt;.&lt;/xref:System.Type&gt;&lt;/xref:System.Type?displayProperty=fullName&gt;自</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For each member it implements, TypeDelegator automatically delegates to the corresponding member of an internal &lt;xref:System.Type&gt; object, which is supplied as an argument to the constructor.</source>
          <target state="translated">对于每个成员，它实现，TypeDelegator 自动委托给内部的相应成员&lt;xref:System.Type&gt;对象，后者将作为构造函数的自变量提供。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This internal &lt;xref:System.Type&gt; object is exposed to deriving classes by the <ph id="ph1">`protected`</ph>&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt; field.</source>
          <target state="translated">此内部&lt;xref:System.Type&gt;对象被公开到派生类<ph id="ph1">`protected`</ph>&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;字段。&lt;/xref:System.Reflection.TypeDelegator.typeImpl&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some members of TypeDelegator have implementations even though the members themselves are simply inherited from &lt;xref:System.Type&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; TypeDelegator 某些成员具有实现，即使只需从&lt;xref:System.Type&gt;.&lt;/xref:System.Type&gt;继承这些成员本身也是如此</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In these cases, the implementation is provided by an overridden <ph id="ph1">`protected`</ph> method that has a name that ends in "Impl".</source>
          <target state="translated">在这些情况下，提供了该实现通过被重写<ph id="ph1">`protected`</ph>具有以"以 Impl"结尾的名称的方法。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the implementation for all overloads of the &lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt; method is supplied by the overridden &lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt; method.</source>
          <target state="translated">例如，实现的所有重载&lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;提供方法通过重写&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;方法。&lt;/xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt; &lt;/xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The implementation for inherited properties such as &lt;xref:System.Type.IsPublic%2A&gt; and &lt;xref:System.Type.IsNestedAssembly%2A&gt; is provided by the overridden &lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt; method.</source>
          <target state="translated">实现继承属性，如&lt;xref:System.Type.IsPublic%2A&gt;和&lt;xref:System.Type.IsNestedAssembly%2A&gt;提供通过重写&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;方法。&lt;/xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt; &lt;/xref:System.Type.IsNestedAssembly%2A&gt; &lt;/xref:System.Type.IsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Deriving classes can provide a public constructor that takes a &lt;xref:System.Type&gt; object as its parameter and simply passes that object to the &lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt; constructor, or can set the internal &lt;xref:System.Type&gt; object in some other way.</source>
          <target state="translated">派生类可以提供的公共构造函数的&lt;xref:System.Type&gt;对象作为其参数并只需将该对象传递到&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;构造函数，也可以设置内部&lt;xref:System.Type&gt;以某种其他方式的对象。&lt;/xref:System.Type&gt; &lt;/xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a deriving class uses a member that is not implemented by TypeDelegator, it must override that member and provide an implementation.</source>
          <target state="translated">如果派生类使用 TypeDelegator 未实现的成员，它必须重写该成员，并提供一个实现。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The simplest implementation is to call the corresponding member on the internal &lt;xref:System.Type&gt; object exposed by the &lt;xref:System.Reflection.TypeDelegator.typeImpl&gt; field, but you can provide any implementation your application requires.</source>
          <target state="translated">最简单的实现是在内部调用的对应成员&lt;xref:System.Type&gt;由公开对象&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;字段，但你可以提供你的应用程序要求任何实现。&lt;/xref:System.Reflection.TypeDelegator.typeImpl&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the &lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt; constructor).</source>
          <target state="translated">不需要重写这些成员，如果它们不由你的应用程序或库函数你应用程序的调用 (例如，通过&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;构造函数)。&lt;/xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following virtual methods (<ph id="ph1">`Overridable`</ph> methods in Visual Basic) of &lt;xref:System.Type&gt; are not implemented by TypeDelegator: &lt;xref:System.Type.MakeGenericType%2A&gt;, &lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;, &lt;xref:System.Type.GetGenericArguments%2A&gt;, &lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;, &lt;xref:System.Type.MakeArrayType%2A&gt;, &lt;xref:System.Type.MakeByRefType%2A&gt;, &lt;xref:System.Type.MakePointerType%2A&gt;, &lt;xref:System.Type.GetEnumNames%2A&gt;, &lt;xref:System.Type.GetEnumValues%2A&gt;, &lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;, &lt;xref:System.Type.GetTypeCodeImpl%2A&gt;, &lt;xref:System.Type.IsEnumDefined%2A&gt;, &lt;xref:System.Type.IsEquivalentTo%2A&gt;.</source>
          <target state="translated">以下虚拟方法 (<ph id="ph1">`Overridable`</ph>在 Visual Basic 中的方法) 的&lt;xref:System.Type&gt;不由 TypeDelegator 实现: &lt;xref:System.Type.MakeGenericType%2A&gt; &lt;xref:System.Type.GetGenericTypeDefinition%2A&gt; &lt;xref:System.Type.GetGenericArguments%2A&gt; &lt;xref:System.Type.GetGenericParameterConstraints%2A&gt; &lt;xref:System.Type.MakeArrayType%2A&gt; &lt;xref:System.Type.MakeByRefType%2A&gt; &lt;xref:System.Type.MakePointerType%2A&gt; &lt;xref:System.Type.GetEnumNames%2A&gt; &lt;xref:System.Type.GetEnumValues%2A&gt; &lt;xref:System.Type.GetEnumUnderlyingType%2A&gt; &lt;xref:System.Type.GetTypeCodeImpl%2A&gt; &lt;xref:System.Type.IsEnumDefined%2A&gt;、 &lt;xref:System.Type.IsEquivalentTo%2A&gt;.&lt;/xref:System.Type.IsEquivalentTo%2A&gt; &lt;/xref:System.Type.IsEnumDefined%2A&gt; &lt;/xref:System.Type.GetTypeCodeImpl%2A&gt; &lt;/xref:System.Type.GetEnumUnderlyingType%2A&gt; &lt;/xref:System.Type.GetEnumValues%2A&gt; &lt;/xref:System.Type.GetEnumNames%2A&gt; &lt;/xref:System.Type.MakePointerType%2A&gt; &lt;/xref:System.Type.MakeByRefType%2A&gt; &lt;/xref:System.Type.MakeArrayType%2A&gt; &lt;/xref:System.Type.GetGenericParameterConstraints%2A&gt; &lt;/xref:System.Type.GetGenericArguments%2A&gt; &lt;/xref:System.Type.GetGenericTypeDefinition%2A&gt; &lt;/xref:System.Type.MakeGenericType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following virtual properties (<ph id="ph1">`Overridable`</ph> properties in Visual Basic) of &lt;xref:System.Type&gt; are not implemented by TypeDelegator: &lt;xref:System.Type.IsGenericType%2A&gt;, &lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;, &lt;xref:System.Type.IsGenericParameter%2A&gt;, &lt;xref:System.Type.ContainsGenericParameters%2A&gt;, &lt;xref:System.Type.DeclaringMethod%2A&gt;, &lt;xref:System.Type.GenericParameterAttributes%2A&gt;, &lt;xref:System.Type.GenericParameterPosition%2A&gt;, &lt;xref:System.Type.IsSecurityCritical%2A&gt;, &lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;, &lt;xref:System.Type.IsSecurityTransparent%2A&gt;.</source>
          <target state="translated">以下虚拟属性 (<ph id="ph1">`Overridable`</ph>属性在 Visual Basic 中的) 的&lt;xref:System.Type&gt;不由 TypeDelegator 实现: &lt;xref:System.Type.IsGenericType%2A&gt; &lt;xref:System.Type.IsGenericTypeDefinition%2A&gt; &lt;xref:System.Type.IsGenericParameter%2A&gt; &lt;xref:System.Type.ContainsGenericParameters%2A&gt; &lt;xref:System.Type.DeclaringMethod%2A&gt; &lt;xref:System.Type.GenericParameterAttributes%2A&gt; &lt;xref:System.Type.GenericParameterPosition%2A&gt; &lt;xref:System.Type.IsSecurityCritical%2A&gt; &lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;、 &lt;xref:System.Type.IsSecurityTransparent%2A&gt;.&lt;/xref:System.Type.IsSecurityTransparent%2A&gt; &lt;/xref:System.Type.IsSecuritySafeCritical%2A&gt; &lt;/xref:System.Type.IsSecurityCritical%2A&gt; &lt;/xref:System.Type.GenericParameterPosition%2A&gt; &lt;/xref:System.Type.GenericParameterAttributes%2A&gt; &lt;/xref:System.Type.DeclaringMethod%2A&gt; &lt;/xref:System.Type.ContainsGenericParameters%2A&gt; &lt;/xref:System.Type.IsGenericParameter%2A&gt; &lt;/xref:System.Type.IsGenericTypeDefinition%2A&gt; &lt;/xref:System.Type.IsGenericType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with default properties.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用默认属性的类。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class specifying the encapsulating instance.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定封装实例的类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This constructor is called from a class to generate a delegate based upon the <ph id="ph1">`Type`</ph> object for the class defining the method.</source>
          <target state="translated">此构造函数调用从一个类来生成基于委托<ph id="ph1">`Type`</ph>为定义该方法的类的对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The instance of the class &lt;xref:System.Type&gt; that encapsulates the call to the method of an object.</source>
          <target state="translated">类的实例&lt;xref:System.Type&gt;封装对对象的方法的调用。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;delegatingType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;delegatingType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the assembly of the implemented type.</source>
          <target state="translated">获取实现的类型的程序集。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Assemblies are the deployment units in the common language runtime.</source>
          <target state="translated">程序集是公共语言运行时中的部署单元。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</source>
          <target state="translated">程序集建立解析请求的命名空间，并确定哪些资源向外部公开，这是可从程序集内访问。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The common language runtime can determine and locate the assembly for any running object.</source>
          <target state="translated">公共语言运行时可以确定，并找到任何正在运行的对象的程序集。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object representing the assembly of the implemented type.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Reflection.Assembly?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>表示实现的类型的程序集的对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the assembly's fully qualified name.</source>
          <target state="translated">获取程序集的完全限定的名称。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the assembly's fully qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含程序集的完全限定的名称。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the base type for the current type.</source>
          <target state="translated">获取当前类型的基类型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The base type is the type from which this type directly inherits.</source>
          <target state="translated">基类型是此类型直接从中继承的类型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Since the &lt;xref:System.Object&gt; class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</source>
          <target state="translated">由于&lt;xref:System.Object&gt;类类型是所有其他类型的最终基类，它是不具有基类型的唯一类型。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`null`</ph> is returned as the base type of the <ph id="ph2">`Object`</ph> type.</source>
          <target state="translated">在这种情况下，<ph id="ph1">`null`</ph>作为的基类型返回<ph id="ph2">`Object`</ph>类型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The base type for a type.</source>
          <target state="translated">类型的基类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the fully qualified name of the implemented type.</source>
          <target state="translated">获取实现的类型的完全限定的名称。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A string containing the fully qualified name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">包含当前的完全限定的名称的字符串<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's fully qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含该类型的完全限定的名称。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the attributes assigned to the <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取分配给属性<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method can be used to determine if the <ph id="ph1">`TypeDelegator`</ph> is abstract, public, and so on.</source>
          <target state="translated">此方法可以用于确定如果<ph id="ph1">`TypeDelegator`</ph>是抽象、 公共的等等。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_TypeAttributes" name="TypeAttributes" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the implementation attribute flags.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_TypeAttributes" name="TypeAttributes" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示实现属性标志的对象。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the constructor that implemented the <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取的构造函数来实现<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated"><ph id="ph1">`callConvention`</ph>参数指示的入口点的调用约定。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If no calling convention is specified, a default &lt;xref:System.Reflection.CallingConventions&gt; value of <ph id="ph1">`Standard`</ph> is used.</source>
          <target state="translated">如果指定不调用约定，则默认&lt;xref:System.Reflection.CallingConventions&gt;值<ph id="ph1">`Standard`</ph>使用。&lt;/xref:System.Reflection.CallingConventions&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象使用反射。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用默认联编程序。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
          <target state="translated">调用约定。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing a list of the parameter number, order, and types.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含的参数数量、 顺序和类型列表。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Types cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; use an appropriate <bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">类型不能为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 使用适当<bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>方法或搜索不带参数的方法的空数组。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> having the same length as the <ph id="ph1">`types`</ph> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>具有相同的长度，作为<ph id="ph1">`types`</ph>数组，其元素表示要获取的方法的参数与关联的属性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the method that matches the specified criteria, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if a match cannot be found.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>符合指定的条件，该方法的对象或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果找不到匹配项。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.ConstructorInfo&gt; objects representing constructors defined for the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的数组&lt;xref:System.Reflection.ConstructorInfo&gt;表示由当前的类型定义的构造函数的对象<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.ConstructorInfo&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Class initializers are available only through <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, and <ph id="ph4">`GetConstructors`</ph>.</source>
          <target state="translated">类初始值设定项是仅可通过提供<ph id="ph1">`GetMember`</ph>， <ph id="ph2">`GetMembers`</ph>， <ph id="ph3">`FindMembers`</ph>，和<ph id="ph4">`GetConstructors`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the specified constructors defined for this class.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含为此类定义的指定构造函数。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">如果未不定义任何构造函数，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</source>
          <target state="translated">根据指定的参数的值，将返回仅公共构造函数或公共和非公共构造函数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</source>
          <target state="translated">返回为此类型，指定是否搜索此类型的继承链定义的所有自定义属性。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否搜索此类型的继承链以查找属性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An array of objects containing all the custom attributes defined for this type.</source>
          <target state="translated">包含为此类型定义的所有自定义属性的对象的数组。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns an array of custom attributes identified by type.</source>
          <target state="translated">返回包含由类型标识的自定义特性的数组。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">包含由类型标识的自定义特性的数组。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否搜索此类型的继承链以查找属性。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An array of objects containing the custom attributes defined in this type that match the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifying whether to search the type's inheritance chain, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no custom attributes are defined on this type.</source>
          <target state="translated">包含匹配的自定义特性定义在这种类型的对象的数组<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p1">&lt;/code&gt;</ept>参数，指定是否搜索此类型的继承链，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果在此类型上定义了自定义特性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the &lt;xref:System.Type&gt; of the object encompassed or referred to by the current array, pointer or ByRef.</source>
          <target state="translated">返回&lt;xref:System.Type&gt;包含或引用由当前数组、 指针或引用传递的对象。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the object encompassed or referred to by the current array, pointer or <bpt id="p1">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the current &lt;xref:System.Type&gt; is not an array, a pointer or a <bpt id="p3">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Type&gt;包含或当前数组中，所引用的对象的指针或<bpt id="p1">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果当前&lt;xref:System.Type&gt;不是数组的指针或<bpt id="p3">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the specified event.</source>
          <target state="translated">返回指定的事件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.<ph id="ph2">`IgnoreCase`</ph>, the case of the <ph id="ph3">`name`</ph> parameter is ignored.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>是&lt;xref:System.Reflection.BindingFlags&gt;。<ph id="ph2">`IgnoreCase`</ph>、 用例<ph id="ph3">`name`</ph>参数将被忽略。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The name of the event to get.</source>
          <target state="translated">要获取的事件的名称。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.EventInfo&gt; object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">&lt;xref:System.Reflection.EventInfo&gt;对象，表示事件声明或继承的具有指定名称的此类型。&lt;/xref:System.Reflection.EventInfo&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no such event is found.</source>
          <target state="translated">此方法返回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不找到任何此类事件。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.EventInfo&gt; objects representing all the public events declared or inherited by the current <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的数组&lt;xref:System.Reflection.EventInfo&gt;对象表示的所有公共事件声明或继承的当前<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.EventInfo&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns an array of type <bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the events declared or inherited by the current type.</source>
          <target state="translated">返回类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含的所有事件声明或继承的当前类型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">如果不有任何事件，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns the events specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the current <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回在指定的事件<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept> ，所声明或继承的当前<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the events specified in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含发生的事件中指定<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">如果不有任何事件，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns a &lt;xref:System.Reflection.FieldInfo&gt; object representing the field with the specified name.</source>
          <target state="translated">返回&lt;xref:System.Reflection.FieldInfo&gt;表示具有指定名称的字段的对象。&lt;/xref:System.Reflection.FieldInfo&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">使用<ph id="ph1">`bindingAttr`</ph> &lt;xref:System.Reflection.BindingFlags&gt;。NonPublic 返回所有的公共和非公共字段。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.</source>
          <target state="translated">使用<ph id="ph1">`BindingFlags.IgnoreCase`</ph>若要忽略的字段，这种情况，如搜索不区分大小写，默认情况下。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The name of the field to find.</source>
          <target state="translated">要查找的字段的名称。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the field declared or inherited by this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> with the specified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象表示的字段声明或继承的这<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>具有指定名称。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no such field is found.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不找到任何此类字段。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.FieldInfo&gt; objects representing the data fields defined for the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的数组&lt;xref:System.Reflection.FieldInfo&gt;对象包装由当前的类型表示的数据字段定义<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.FieldInfo&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The GetFields method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated">GetFields 方法不返回字段按特定的顺序，如按字母顺序排列或声明顺序排列。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">因为该顺序可能会变化，你的代码必须不依赖于字段的返回顺序。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">使用<ph id="ph1">`bindingAttr`</ph> &lt;xref:System.Reflection.BindingFlags&gt;。NonPublic 返回所有的公共和非公共字段。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the fields declared or inherited by the current <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的包含字段声明或继承的当前<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An empty array is returned if there are no matched fields.</source>
          <target state="translated">如果没有匹配的字段，则返回空数组。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the specified interface implemented by the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回由包装由当前的类型实现的指定的接口<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the interface implemented by the current class.</source>
          <target state="translated">由当前类实现的接口的完全限定的名称。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the case is to be ignored; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果大小写，则忽略;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示由当前类中实现 （直接或间接），具有匹配的指定的名称的完全限定名的接口的对象。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If no interface that matches name is found, null is returned.</source>
          <target state="translated">如果没有与名称匹配的接口是找到为 null 则返回。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns an interface mapping for the specified interface type.</source>
          <target state="translated">返回指定的接口类型的接口映射。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</source>
          <target state="translated">接口映射表示接口到实现该接口的类上的实际方法的映射方式。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the interface to retrieve a mapping of.</source>
          <target state="translated">&lt;xref:System.Type&gt;要检索的映射的接口。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.InterfaceMapping&gt; object representing the interface mapping for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">interfaceType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Reflection.InterfaceMapping&gt;对象表示的接口映射<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">interfaceType</ph> <ept id="p1">&lt;/code&gt;</ept>。&lt;/xref:System.Reflection.InterfaceMapping&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">返回在当前类及其基类上实现的所有接口。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含在当前类及其基类上实现的所有接口。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">如果未定义任何内容，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">type</ph><ept id="p2">&lt;/code&gt;</ept>, and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">bindingAttr</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">返回由指定的成员 （属性、 方法、 构造函数、 字段、 事件和嵌套的类型） 给定<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>， <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">type</ph> <ept id="p2">&lt;/code&gt;</ept>，和<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">bindingAttr</ph> <ept id="p3">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.非公开的所有成员将被都视为。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">如果没有匹配项，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The name of the member to get.</source>
          <target state="translated">要获取的成员的名称。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The type of members to get.</source>
          <target state="translated">要获取成员的类型。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the members of the current class and its base class meeting the specified criteria.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含当前类和其基类的符合指定的条件的所有成员。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns members specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">返回由指定成员<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.非公开的所有成员将被都视为。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">如果没有匹配项，则返回一个空数组。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the members of the current class and its base classes that meet the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept> filter.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含当前类和满足其基本类的所有成员<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept>筛选器。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</source>
          <target state="translated">搜索其参数与指定的参数类型及修饰符，使用指定的绑定约束和指定的调用约定匹配的指定方法。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated"><ph id="ph1">`callConvention`</ph>参数指示的入口点的调用约定。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If no &lt;xref:System.Reflection.CallingConventions&gt; is specified, a default <ph id="ph1">`CallingConventions`</ph> value of <ph id="ph2">`Standard`</ph> is used.</source>
          <target state="translated">如果没有&lt;xref:System.Reflection.CallingConventions&gt;指定，则默认<ph id="ph1">`CallingConventions`</ph>值<ph id="ph2">`Standard`</ph>使用。&lt;/xref:System.Reflection.CallingConventions&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The method name.</source>
          <target state="translated">方法名。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象使用反射。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用默认联编程序。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
          <target state="translated">调用约定。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing a list of the parameter number, order, and types.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含的参数数量、 顺序和类型列表。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Types cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; use an appropriate <bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">类型不能为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 使用适当<bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>方法或搜索不带参数的方法的空数组。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> having the same length as the <ph id="ph1">`types`</ph> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>具有相同的长度，作为<ph id="ph1">`types`</ph>数组，其元素表示要获取的方法的参数与关联的属性。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfoInfo" name="MethodInfoInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the implementation method that matches the specified criteria, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if a match cannot be found.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfoInfo" name="MethodInfoInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>符合指定的条件，该实现方法的对象或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果找不到匹配项。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.MethodInfo&gt; objects representing specified methods of the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的数组&lt;xref:System.Reflection.MethodInfo&gt;对象表示由当前包装类型的指定的方法<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfo" name="MethodInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects representing the methods defined on this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">数组<bpt id="p1">&lt;xref uid="langword_csharp_MethodInfo" name="MethodInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示在此定义的方法的对象<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a nested type specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> and in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept> that are declared or inherited by the type represented by the current <bpt id="p3">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回指定的嵌套的类型<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>并在<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept> ，所声明或继承的表示由当前的类型<bpt id="p3">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The nested type's name.</source>
          <target state="translated">嵌套的类型的名称。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the nested type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示的嵌套的类型的对象。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Returns the nested types specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the type wrapped by the current <bpt id="p2">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回在指定的嵌套的类型<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept> ，所声明或继承的包装由当前的类型<bpt id="p2">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the nested types.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含嵌套的类型。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.PropertyInfo&gt; objects representing properties of the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的数组&lt;xref:System.Reflection.PropertyInfo&gt;对象表示由当前包装类型的属性<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.PropertyInfo&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref uid="langword_csharp_PropertyInfo" name="PropertyInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects representing properties defined on this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">数组<bpt id="p1">&lt;xref uid="langword_csharp_PropertyInfo" name="PropertyInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示定义此属性的对象<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</source>
          <target state="translated">当在派生类中重写，搜索其参数与指定的自变量类型及修饰符，使用指定的绑定约束匹配的指定属性。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The property to get.</source>
          <target state="translated">要获取的属性。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">影响执行搜索的方式的位掩码。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是从零个或多个位标志的组合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects via reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过反射的对象。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用默认联编程序。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The return type of the property.</source>
          <target state="translated">属性的返回类型。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A list of parameter types.</source>
          <target state="translated">参数类型列表。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The list represents the number, order, and types of the parameters.</source>
          <target state="translated">表示列表的个数、 顺序和类型的参数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Types cannot be null; use an appropriate <bpt id="p1">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">类型不能为空，则使用适当<bpt id="p1">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>方法或搜索不带参数的方法的空数组。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">与具有表示要获取的方法的参数与关联的属性的元素类型的长度相同的数组。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.PropertyInfo&gt; object for the property that matches the specified criteria, or null if a match cannot be found.</source>
          <target state="translated">A&lt;xref:System.Reflection.PropertyInfo&gt;对象与指定的条件匹配的属性或如果找不到匹配项，则为 null。&lt;/xref:System.Reflection.PropertyInfo&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the GUID (globally unique identifier) of the implemented type.</source>
          <target state="translated">获取实现的类型的 GUID （全局唯一标识符）。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</source>
          <target state="translated">GUID （全局唯一标识符） 是用于标识类或接口的 128 位唯一标识字符串。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</source>
          <target state="translated">它是主要适用于 Microsoft.NET Framework 和 COM 之间的互操作性</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A GUID.</source>
          <target state="translated">一个 GUID。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current &lt;xref:System.Type&gt; encompasses or refers to another type; that is, whether the current &lt;xref:System.Type&gt; is an array, a pointer or a ByRef.</source>
          <target state="translated">获取一个值，该值指示是否当前&lt;xref:System.Type&gt;包含还是引用另一类型; 即，无论当前&lt;xref:System.Type&gt;是数组、 指针或 ByRef。&lt;/xref:System.Type&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is an array, a pointer or a ByRef; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是数组、 指针或 ByRef; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Invokes the specified member.</source>
          <target state="translated">调用指定的成员。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
          <target state="translated">要调用的方法必须是可访问，并且提供与指定的自变量列表中，指定的活页夹和调用特性的约束下最具体的匹配。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A method will be invoked if both the following conditions are true:      -   The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</source>
          <target state="translated">将调用一个方法，如果这两个符合以下条件:-数值方法声明中的参数等于指定的参数列表中的参数的数目 （除非成员上定义了默认自变量）。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>-   The type of each arguments can be converted by the binder to the type of the parameter.</source>
          <target state="translated">的可以由联编程序参数的类型转换每个参数的类型。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The binder will find all the matching methods.</source>
          <target state="translated">联编程序将查找所有匹配的方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>These methods are found based upon the type of binding requested (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, and so on).</source>
          <target state="translated">这些方法找到基于请求的绑定类型 (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>， <ph id="ph2">`BindingFlags.GetProperties`</ph>，依次类推)。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
          <target state="translated">按名称、 数量的参数和一组绑定器中定义的搜索修饰符进行筛选的方法集。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>After the method is selected, it will be invoked.</source>
          <target state="translated">选择方法后，将调用它。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Accessibility is checked at that point.</source>
          <target state="translated">此时，检查可访问性。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</source>
          <target state="translated">搜索可能基于与该方法关联的可访问性属性来控制搜索哪些方法集。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt; method is responsible for selecting the method to be invoked.</source>
          <target state="translated">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;方法负责选择要调用的方法。&lt;/xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The default binder selects the most specific match.</source>
          <target state="translated">默认的联编程序选择最精确的匹配。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 访问限制在完全受信任的代码将被忽略。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</source>
          <target state="translated">即私有构造函数、 方法、 字段和属性可以访问和使用反射，只要完全受信任代码调用。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Currently, <ph id="ph1">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.</source>
          <target state="translated">目前，<ph id="ph1">`InvokeMember`</ph>对 Microsoft.NET Framework 反射语义执行，其中每种类型的对象。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the member specified by name is an array and the <ph id="ph1">`BindingFlags.GetField`</ph> flag is set on <ph id="ph2">`invokeAttr`</ph>, the <ph id="ph3">`args`</ph> array specifies the elements whose values are to be returned.</source>
          <target state="translated">如果按名称指定的成员是一个数组和<ph id="ph1">`BindingFlags.GetField`</ph>上设置标志<ph id="ph2">`invokeAttr`</ph>、<ph id="ph3">`args`</ph>数组指定其值是要返回的元素。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For example, the following call through <ph id="ph1">`Type`</ph> object <ph id="ph2">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:       <ph id="ph3">`String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`</ph>       You can use <ph id="ph4">`InvokeMember`</ph> to set one or more elements of a member array.</source>
          <target state="translated">例如，以下调用通过<ph id="ph1">`Type`</ph>对象<ph id="ph2">`t`</ph>返回的字符串数组 MyArray，这是调用对象的成员的第一个元素的值︰<ph id="ph3">`String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`</ph>可以使用<ph id="ph4">`InvokeMember`</ph>设置成员数组的一个或多个元素。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>All elements are set to the same value.</source>
          <target state="translated">所有元素都设置为相同的值。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`args`</ph> array must be formatted as follows:      <ph id="ph2">```   {index1,       index2,, value}   ```</ph>       For example, to set the first member of MyArray from the previous example, the syntax is as follows:      <ph id="ph3">```   t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new       Variant[]{0,"Updated"});   ```</ph></source>
          <target state="translated"><ph id="ph1">`args`</ph>数组必须进行格式设置，如下所示︰<ph id="ph2">```   {index1,       index2,, value}   ```</ph>例如，若要设置 MyArray 的第一个成员上一示例中，语法是，如下所示︰<ph id="ph3">```   t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new       Variant[]{0,"Updated"});   ```</ph></target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The name of the member to invoke.</source>
          <target state="translated">要调用的成员的名称。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This may be a constructor, method, property, or field.</source>
          <target state="translated">这可能是构造函数、 方法、 属性或字段。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If an empty string ("") is passed, the default member is invoked.</source>
          <target state="translated">如果是空字符串 ("") 传递时，默认值调用成员。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The invocation attribute.</source>
          <target state="translated">调用属性。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This must be one of the following <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> : <bpt id="p2">&lt;xref uid="langword_csharp_InvokeMethod" name="InvokeMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_CreateInstance" name="CreateInstance" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref uid="langword_csharp_GetField" name="GetField" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>, <bpt id="p6">&lt;xref uid="langword_csharp_SetField" name="SetField" href=""&gt;</bpt><ept id="p6">&lt;/xref&gt;</ept>, <bpt id="p7">&lt;xref uid="langword_csharp_GetProperty" name="GetProperty" href=""&gt;</bpt><ept id="p7">&lt;/xref&gt;</ept>, or <bpt id="p8">&lt;xref uid="langword_csharp_SetProperty" name="SetProperty" href=""&gt;</bpt><ept id="p8">&lt;/xref&gt;</ept>.</source>
          <target state="translated">This must be one of the following <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> : <bpt id="p2">&lt;xref uid="langword_csharp_InvokeMethod" name="InvokeMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_CreateInstance" name="CreateInstance" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref uid="langword_csharp_GetField" name="GetField" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>, <bpt id="p6">&lt;xref uid="langword_csharp_SetField" name="SetField" href=""&gt;</bpt><ept id="p6">&lt;/xref&gt;</ept>, <bpt id="p7">&lt;xref uid="langword_csharp_GetProperty" name="GetProperty" href=""&gt;</bpt><ept id="p7">&lt;/xref&gt;</ept>, or <bpt id="p8">&lt;xref uid="langword_csharp_SetProperty" name="SetProperty" href=""&gt;</bpt><ept id="p8">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">必须指定合适的调用属性。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If a static member is to be invoked, the <bpt id="p1">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> flag must be set.</source>
          <target state="translated">要调用静态成员是否<bpt id="p1">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>必须设置标志。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects via reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过反射的对象。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用默认联编程序。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">对其调用指定的成员的对象。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，其中包含要调用的数量、 顺序和成员的参数的类型。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`args`</ph> contains an uninitialized <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</source>
          <target state="translated">如果<ph id="ph1">`args`</ph>包含未初始化<bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，它将被视为空，具有默认的联编程序，可以将它扩展为 0、 0.0 或字符串。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer" name="ParameterModifer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is the same length as <ph id="ph1">`args`</ph>, with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer" name="ParameterModifer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它是与长度相同<ph id="ph1">`args`</ph>，其元素表示与要调用的成员的自变量关联的属性。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A parameter has attributes associated with it in the member's signature.</source>
          <target state="translated">一个参数具有与之关联的成员签名中的属性。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For ByRef, use <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer.ByRef" name="ParameterModifer.ByRef" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, and for none, use <bpt id="p2">&lt;xref uid="langword_csharp_ParameterModifer.None" name="ParameterModifer.None" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ByRef，对于使用<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer.ByRef" name="ParameterModifer.ByRef" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，并为 none、 使用<bpt id="p2">&lt;xref uid="langword_csharp_ParameterModifer.None" name="ParameterModifer.None" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The default binder does exact matching on these.</source>
          <target state="translated">默认的联编程序的未精确匹配这些。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Attributes such as <bpt id="p1">&lt;xref uid="langword_csharp_In" name="In" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref uid="langword_csharp_InOut" name="InOut" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> are not used in binding, and can be viewed using <bpt id="p3">&lt;xref uid="langword_csharp_ParameterInfo" name="ParameterInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">这样的特性<bpt id="p1">&lt;xref uid="langword_csharp_In" name="In" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<bpt id="p2">&lt;xref uid="langword_csharp_InOut" name="InOut" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>不使用在绑定中，并且可以使用查看<bpt id="p3">&lt;xref uid="langword_csharp_ParameterInfo" name="ParameterInfo" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An instance of <bpt id="p1">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to govern the coercion of types.</source>
          <target state="translated">实例<bpt id="p1">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于控制类型强制。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This is necessary, for example, to convert a string that represents 1000 to a <bpt id="p1">&lt;xref uid="langword_csharp_Double" name="Double" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value, since 1000 is represented differently by different cultures.</source>
          <target state="translated">这很有必要，例如，将表示到 1000年的 string 转换<bpt id="p1">&lt;xref uid="langword_csharp_Double" name="Double" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值，因为不同的区域性以不同方式表示 1000年。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread's <bpt id="p3">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、 <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>当前线程的<bpt id="p3">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>使用。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing parameter names that match up, starting at element zero, with the <ph id="ph1">`args`</ph> array.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含参数名称相匹配，从元素零，开始使用<ph id="ph1">`args`</ph>数组。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>There must be no holes in the array.</source>
          <target state="translated">数组中必须没有漏洞。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`args`</ph>.</source>
          <target state="translated">If <ph id="ph1">`args`</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than <ph id="ph1">`namedParameters`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>大于<ph id="ph1">`namedParameters`</ph>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the remaining parameters are filled in order.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>按顺序填充剩余的参数。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the return value of the invoked member.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示被调用成员的返回值。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is an array.</source>
          <target state="translated">返回一个值，该值指示是否&lt;xref:System.Type&gt;是数组。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is an array; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是一个数组; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified type can be assigned to this type.</source>
          <target state="translated">返回一个值，该值指示指定的类型是否可以分配给此类型。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The type to check.</source>
          <target state="translated">要检查的类型。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified type can be assigned to this type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果指定的类型可以分配给此类型;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is passed by reference.</source>
          <target state="translated">返回一个值，该值指示是否&lt;xref:System.Type&gt;按引用传递。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is passed by reference; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;传递通过引用; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is a COM object.</source>
          <target state="translated">返回一个值，该值指示是否&lt;xref:System.Type&gt;为 COM 对象。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is a COM object; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;为 COM 对象; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">获取一个值，该值指示此对象是否表示构造的泛型类型。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this object represents a constructed generic type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此对象表示构造的泛型类型;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Indicates whether a custom attribute identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> is defined.</source>
          <target state="translated">该值指示是否标识的自定义特性<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p1">&lt;/code&gt;</ept>定义。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否搜索此类型的继承链以查找属性。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">包含由类型标识的自定义特性的数组。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a custom attribute identified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p2">&lt;/code&gt;</ept> is defined; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果由标识的自定义特性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p2">&lt;/code&gt;</ept>定义; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The custom attribute type cannot be loaded.</source>
          <target state="translated">无法加载自定义属性类型。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is a pointer.</source>
          <target state="translated">返回一个值，该值指示是否&lt;xref:System.Type&gt;是指针。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is a pointer; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;为指针; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is one of the primitive types.</source>
          <target state="translated">返回一个值，该值指示是否&lt;xref:System.Type&gt;为基元类型之一。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is one of the primitive types; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;为基元类型之一; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</source>
          <target state="translated">返回一个值，该值指示类型是否是值类型;也就是说，不类或接口。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果类型为值类型;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets a value that identifies this entity in metadata.</source>
          <target state="translated">获取一个值，标识此元数据中的实体。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">使用此属性获取的令牌可以传递到非托管的反射 API。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>非托管的反射 API<ept id="p1">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A value which, in combination with the module, uniquely identifies this entity in metadata.</source>
          <target state="translated">一个值，该值与该模块，结合使用唯一标识此元数据中的实体。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Gets the module that contains the implemented type.</source>
          <target state="translated">获取包含实现的类型的模块。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A module is a loadable unit that can contain type declarations and implementations.</source>
          <target state="translated">模块是一个可加载的单元可以包含类型声明和实现。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</source>
          <target state="translated">模块包含足够的信息来启用公共语言运行时在模块加载时找到所有实现位。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.Module&gt; object representing the module of the implemented type.</source>
          <target state="translated">A&lt;xref:System.Reflection.Module&gt;表示实现的类型的模块的对象。&lt;/xref:System.Reflection.Module&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Gets the name of the implemented type, with the path removed.</source>
          <target state="translated">获取具有删除的路径实现的类型的名称。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A string containing the name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">包含当前的名称的字符串<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Only the simple name, not the fully qualified name, is returned.</source>
          <target state="translated">返回只是简单名称，不是完全限定名称。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>To get the name and the path, use &lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;.</source>
          <target state="translated">若要获取的名称和路径，请使用&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;。&lt;/xref:System.Reflection.TypeDelegator.FullName%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's non-qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含该类型的非限定名称。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Gets the namespace of the implemented type.</source>
          <target state="translated">获取实现的类型的命名空间。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This property gets a string containing the namespace of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">此属性获取包含当前的命名空间的字符串<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">`TypeDelegator`</ph> is &lt;xref:System.Reflection.TypeFilter&gt;, the returned namespace is &lt;xref:System.Reflection&gt;.</source>
          <target state="translated">例如，如果<ph id="ph1">`TypeDelegator`</ph>是&lt;xref:System.Reflection.TypeFilter&gt;，返回的命名空间是&lt;xref:System.Reflection&gt;.&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeFilter&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's namespace.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含该类型的命名空间。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Gets a handle to the internal metadata representation of an implemented type.</source>
          <target state="translated">获取的内部元数据表示形式实现的类型的句柄。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A type handle is a unique integer value associated with each type.</source>
          <target state="translated">类型句柄是与每个类型相关联的唯一整数值。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The handle is unique during the runtime.</source>
          <target state="translated">在运行时句柄是唯一的。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_RuntimeTypeHandle" name="RuntimeTypeHandle" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_RuntimeTypeHandle" name="RuntimeTypeHandle" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>A value indicating type information.</source>
          <target state="translated">值，该值指示类型信息。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Gets the underlying &lt;xref:System.Type&gt; that represents the implemented type.</source>
          <target state="translated">获取基础&lt;xref:System.Type&gt;表示实现的类型。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The underlying type.</source>
          <target state="translated">基础类型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>