<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21e594be94a0631df65dc19144a640970427903a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">监视数据，具体取决于缓存项的状态中的更改的派生自定义类型提供基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">ChangeMonitor 类用作专用于特定的缓存实现的派生的监视器类的基类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">ChangeMonitor 实例监视数据，具体取决于缓存项的状态中的更改。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">例如，可以将项其内容进行缓存的文件或数据实体。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">如果更新文件或数据实体，则必须还更改关联的缓存项。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">可以监视的通用项包括数据实体 （如数据库字段、 值、 行或表）、 另一个缓存项时，和文件和文件属性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">依赖项更改是中的依赖项的状态的更改。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">在典型的缓存实现中，ChangeMonitor 实例通知依赖关系已更改，缓存后缓存执行所需的操作，如正在使插入的缓存条目无效。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">可以自定义派生的 ChangeMonitor 类，以监视特定的不同数据存储区的依赖项更改。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">例如，有的文件系统、 物理内存或数据库的缓存实现。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">ChangeMonitor 类检查缓存中，外部发生的更改，然后警报缓存中已发生更改。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>包括从 ChangeMonitor 类派生的以下类:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;-&lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;的每个这些类可用于不同类型的依赖关系。&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">例如，派生&lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;类监视对文件系统数据 （文件和文件夹） 的缓存的缓存项所依赖的更改。&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">从构造函数来初始化类的基类的派生类中调用此构造函数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;类具有一个默认构造函数。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">但是，类继承自基类&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;类并定义自定义的更改监视行为必须在构造函数中执行初始化。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">有关详细信息，请参阅继承者部分的说明。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">释放由当前实例的所有资源<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">Dispose 方法调用&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法的派生类仅一次，第一次调用时。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">后续调用的 Dispose 方法不起作用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">调用该方法后，&lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;属性设置为<ph id="ph1">`true`</ph>。&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;必须调用重载，若要释放&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">以下是用于调用 dispose 方法的规则:-一项插入缓存之前，它是调用方负责释放&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">-一次缓存项和&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;与其关联的实例传递到缓存中，必须确保缓存实施者&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;调用，即使插入操作失败。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">-在将项及其关联&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;实例传递到缓存中，调用方必须不会释放依赖项，因为当&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法调用，因此调用将被视为依赖项已更改。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">因此，&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;自动调用方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-考虑到，这些规则&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;必须按以下方式之一调用方法:-如果用户决定不向缓存中插入派生的更改监视器实例，用户必须调用 Dispose 方法重载。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">-的缓存实现负责调用 Dispose 重载，如果实现尝试插入对象缓存的更改监视器实例，但插入操作将失败。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">当插入尝试导致异常时，则缓存实现必须释放任何关联的依赖关系。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">-如果删除缓存项，则缓存实现还必须释放依赖项。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">内部实现&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法将自动调用&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法在调用回调，之后注册通过&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 事件激发期间此自动释放时，才出现的初始化&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;以前完成的实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">当派生的更改监视器的构造函数调用&lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;方法时，如果更改监视器的状态已更改 （即，将监视的状态已更改构造函数时仍处于活动状态） 然后&lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;方法将自动释放更改监视器。&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 用户不应调用的 Dispose 方法。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">但是，不能防止用户调用方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">因此，如果他们这样做，&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;调用方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">在这种情况下，就像依赖项已更改，都会收到通知的缓存项。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">若要防止派生的类重写 Dispose 方法，此方法不是显式接口实现。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">初始化未完成的派生的更改监视器类中调用基类的 Dispose 方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">释放所有的托管和非托管资源以及对任何引用<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实例。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">此重载必须由派生的更改监视器类实现。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">时的值<ph id="ph1">`disposing`</ph>值是<ph id="ph2">`true`</ph>，释放所有的托管和非托管资源，并且对此对象的任何引用都释放，以便派生的更改监视器实例可以被垃圾回收。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">这样就保证基&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法将调用实现的 Dispose 方法一次。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源以及对任何引用<bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>实例;<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">当<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>传递时，通过调用方法释放<bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>线程和任何外部的托管的引用在可能不再有效，因为它们都已垃圾回收。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">获取一个值，该值指示由监视状态<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类已更改。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">你可以检查在派生的此属性的值&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;类，以查看是否已更改依赖项。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">值设置为<ph id="ph1">`true`</ph>依赖项更改发生时 (即，当&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;调用方法)。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">后&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法由派生类调用，HasChanged 属性的值将<ph id="ph1">`true`</ph>，无论&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;已通过调用通知实例&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 的调用方可以检查 HasChanged 属性以确定是否已更改依赖项。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">但是，在多线程环境中，更简单和更多的可维护性方法是将数据插入的缓存实现，而不会检查 HasChanged 属性。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">缓存实现必须检查 HasChanged 属性和不得执行 insert 或设置操作，如果一个或多个关联的依赖关系已更改。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果由监视状态<bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>实例已更改; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">从派生类，可表明已完成初始化的构造函数调用。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">如果一个依赖项更改之前初始化已完成在派生类，派生类的构造函数必须调用&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">当&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;调用方法时，&lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;属性自动设置为<ph id="ph1">`true`</ph>更改监视器。&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">因此，当更改监视器的构造函数调用 InitializationComplete 方法时，基的类将自动调用&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">如果初始化已完成，&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法自动释放派生的更改监视器实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">获取一个值，该值指示的派生的实例<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>释放类。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">属性设置为<ph id="ph1">`true`</ph>后基&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;方法调用&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;派生的类，若要释放的实例中的方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果在释放实例;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">调用缓存实施者注册了一个回调，并通知<bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实例通过<bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>时依赖关系已更改的委托。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">缓存实施者使用此方法连接到的更改监视器。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">如果你将一个或多个更改与缓存项的监视器，则传递&lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;具有的针对缓存项的填充的更改监视器属性实例。&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">支持更改监视器缓存实施者负责遍历&lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;属性和寄存器&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;委托与每个更改它找到的监视器。&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">因为&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;委托包括可选状态参数，则具体更改监视器实现可以传递可选状态信息。&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">缓存实施者确定是否可将显式依赖类型的回调的一部分传递的自定义更改监视器的状态。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 基缓存可扩展性 API 可将显式依赖项，不要求对类型的状态。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">NotifyOnChanged 方法的实现自动确定监视器的状态已在调用 NotifyOnChanged 方法的时间已更改。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">如果&lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;属性是<ph id="ph1">`true`</ph>，则该方法会自动调用&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;事件处理程序中，已注册，通过&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">发生这种情况是因为它是可能，从缓存实现创建的更改监视器，缓存实现获取监视器和最多，线本身的时间的时间的基础的监视的状态已更改。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果状态已更改的对象传递给&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;方法是<ph id="ph1">`null`</ph>。&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">NotifyOnChanged 方法可以调用仅一次，并将在后续调用中引发异常。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">对依赖关系已发生更改时调用的方法的引用。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">已调用的回调方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">由派生类调用以引发事件时的依赖项发生更改。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">通常情况下，当发生依赖项更改时调用 OnChanged 方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">当释放的更改监视器实例，但仅当尚未调用回调时，才会发生释放时，也会调用 OnChanged 方法。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">如果 OnChanged 方法之前调用&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;方法被调用时，由缓存实现保存对 OnChanged 方法的调用的状态数据。&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">此外，到回调&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;立即调用方法时&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;调用方法。&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">更改事件的数据。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此值可为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">获取一个值，表示<bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类实例。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">UniqueId 属性值通常包括依赖关系名称组合字符串数据的唯一标识符的数据的所监视的&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">UniqueId 属性的值是一个字符串。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">字符串的值用于分配的唯一 ID&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;实例。&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">更改监视器实例的标识符。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>