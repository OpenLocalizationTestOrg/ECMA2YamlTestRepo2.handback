<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a67d37a89ee4c73e68c5be9c05bf11c3ab7ca3c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Remoting.Messaging.AsyncResult.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b9cbecfb539fbbc747ae1543d08427742622d0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">609e77d854a729b6553a17bd13fcc620819d300c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">封装对委托的异步操作的结果。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The AsyncResult class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated">使用委托进行异步方法调用与一起使用 AsyncResult 类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IAsyncResult&gt; returned from the delegate's <ph id="ph1">`BeginInvoke`</ph> method can be cast to an AsyncResult.</source>
          <target state="translated">&lt;xref:System.IAsyncResult&gt;从该委托的返回<ph id="ph1">`BeginInvoke`</ph>方法可以强制转换为 AsyncResult。&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The AsyncResult has the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt; property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">AsyncResult 具有&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;属性，保存委托对象上调用异步调用。&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">`BeginInvoke`</ph>和异步调用使用委托，请参阅<bpt id="p1">[</bpt>异步编程使用委托<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">获取对其调用的异步调用的委托对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The AsyncDelegate property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated">用户定义的委托的实际类，可将转换 AsyncDelegate 属性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">例如，如果用于进行异步调用的委托的类型是<ph id="ph1">`MyDelegate`</ph>，此属性返回的委托必须强制转换为<ph id="ph2">`MyDelegate`</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">然后，该回调方法可以调用该委托的<ph id="ph1">`EndInvoke`</ph>具有正确签名，以便获取结果的异步方法调用的方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">在其调用异步调用的委托对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Implements the <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">实现<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>接口。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The AsyncProcessMessage method of the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface is not relevant to the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class.</source>
          <target state="translated">该 AsyncProcessMessage 方法的&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;接口是不相关&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;类。&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; &lt;/xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Implementation by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; throws a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">通过&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;将引发一种&lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt;&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;实现</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead, obtain an &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; by casting the &lt;xref:System.IAsyncResult&gt; interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">相反，获取&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;通过强制转换为&lt;xref:System.IAsyncResult&gt;使用委托进行异步调用所返回的接口。&lt;/xref:System.IAsyncResult&gt; &lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The request <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">请求<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>接口。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The response <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">响应<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>接口。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
          <target state="translated">不返回任何值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets the object provided as the last parameter of a <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method call.</source>
          <target state="translated">获取作为最后一个参数提供的对象<bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>方法调用。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息<ph id="ph1">`BeginInvoke`</ph>方法，请参阅<bpt id="p1">[</bpt>异步编程使用委托<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The object provided as the last parameter of a <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method call.</source>
          <target state="translated">作为最后一个参数提供的对象<bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>方法调用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets a &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">获取&lt;xref:System.Threading.WaitHandle&gt;封装 Win32 同步句柄，并允许各种同步方案的实现。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;返回此方法在异步操作完成时自动收到信号。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">在调用时，不会自动关闭等待句柄<ph id="ph1">`EndInvoke`</ph>上用于进行调用的异步方法的委托。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">如果在释放对等待句柄的所有引用，则当垃圾回收功能回收此等待句柄时将释放系统资源。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To free the system resources as soon as you are finished using the wait handle, call the &lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">若要在完成使用等待句柄时，就会立即释放系统资源，调用&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">显式关闭或释放可释放对象时，垃圾回收的工作效率更高。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The &lt;xref:System.Threading.WaitHandle&gt; contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated">1&gt; <ph id="ph1">[!CAUTION]</ph>&amp;1;&gt; &lt;xref:System.Threading.WaitHandle&gt;AsyncWaitHandle 属性可以用于异步调用完成之前阻止当前线程中包含。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However the &lt;xref:System.Threading.WaitHandle&gt; will ignore the &lt;xref:System.AsyncCallback&gt;, if one was specified during the <ph id="ph1">`BeginInvoke`</ph> call.</source>
          <target state="translated">但是，&lt;xref:System.Threading.WaitHandle&gt;将忽略&lt;xref:System.AsyncCallback&gt;，如果在已指定一个<ph id="ph1">`BeginInvoke`</ph>调用。&lt;/xref:System.AsyncCallback&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, a situation can occur where the application shuts down before the &lt;xref:System.AsyncCallback&gt; has finished executing, even if a &lt;xref:System.Threading.WaitHandle&gt; is used to block until the asynchronous call completion.</source>
          <target state="translated">因此，这种情况可以出现在应用程序关闭之前&lt;xref:System.AsyncCallback&gt;执行完毕，即使&lt;xref:System.Threading.WaitHandle&gt;使用到异步调用完成之前的块。&lt;/xref:System.Threading.WaitHandle&gt; &lt;/xref:System.AsyncCallback&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For an example of such a situation, see the example for the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class, and remove the &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; statement.</source>
          <target state="translated">有关这种情况的示例，请参阅示例&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;类，并删除&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;语句。&lt;/xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">A&lt;xref:System.Threading.WaitHandle&gt;封装 Win32 同步句柄，并允许各种同步方案的实现。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> call completed synchronously.</source>
          <target state="translated">获取一个值，该值指示是否<bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>已同步完成的调用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the &lt;xref:System.AsyncCallback&gt; delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">如果检测到它的<ph id="ph1">`BeginInvoke`</ph>同步在完成的调用&lt;xref:System.AsyncCallback&gt;委托，它是可能的线程中调用 BeginInvoke 是当前线程。&lt;/xref:System.AsyncCallback&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Most providers of the &lt;xref:System.IAsyncResult&gt; interface will not use the capability and will return a default <ph id="ph1">`false`</ph>.</source>
          <target state="translated">大多数提供程序&lt;xref:System.IAsyncResult&gt;接口将不使用该功能，并将返回默认<ph id="ph1">`false`</ph>。&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Current implementation of CompletedSynchronously always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">当前实现的 CompletedSynchronously 始终返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> call completed synchronously; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>调用完成同步; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether <bpt id="p1">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been called on the current <bpt id="p2">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取或设置一个值，该值指示是否<bpt id="p1">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>在当前调用了<bpt id="p2">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has been called on the current <bpt id="p3">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>在当前调用了<bpt id="p3">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>; 否则为<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">获取异步调用的响应消息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The GetReplyMessage method can return an object after the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt; method is called.</source>
          <target state="translated">GetReplyMessage 方法可以返回的对象后&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;调用方法。&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt; return value can be cast to an &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;返回值可以强制转换为&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;.&lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt; &lt;/xref:System.Runtime.Remoting.Messaging.IMessage&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">但是，不需要直接调用这些方法之一。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">它们旨在供使用的.NET framework 远程处理基础结构。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">远程处理消息，表示对远程对象上的方法调用的响应。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">获取一个值，该值指示服务器是否具有已完成的调用。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">服务器必须使用外部议定的任何客户端提供资源后它将 IsCompleted 属性设置为共享语义<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Thus, it is safe for the client to destroy the resources after the IsCompleted property returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">因此，它是安全的客户端后 IsCompleted 属性返回销毁资源<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> after the server has completed the call; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>服务器完成调用; 后否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">获取接收器链中的下一个消息接收器。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The current implementation of NextSink returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">NextSink 的当前实现返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface that represents the next message sink in the sink chain.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>接收器链中接收器表示下一条消息的接口。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Sets an <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">集<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对于当前的远程方法调用中，提供了控制异步消息调度后处理的方法。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You do not need to call the SetMessageCtrl method.</source>
          <target state="translated">不需要调用 SetMessageCtrl 方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current remote method call.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对于当前的远程方法调用。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">以同步方式处理远程对象上的方法调用返回的响应消息。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The SyncProcessMessage method implements the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface.</source>
          <target state="translated">SyncProcessMessage 方法实现&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;接口。&lt;/xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You do not need to call this method directly.</source>
          <target state="translated">不需要直接调用此方法。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">它被旨在使用由.NET framework 远程处理基础结构。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>SyncProcessMessage invokes the consumer code's &lt;xref:System.AsyncCallback&gt; delegate.</source>
          <target state="translated">SyncProcessMessage 调用的使用者代码&lt;xref:System.AsyncCallback&gt;委派。&lt;/xref:System.AsyncCallback&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It also sets the &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt; instance returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt; method.</source>
          <target state="translated">它还将设置&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;返回实例&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;方法。&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt; &lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;, the same object is returned by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;.</source>
          <target state="translated">如果<ph id="ph1">`msg`</ph>参数属于类型&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;、 &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;.&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;返回同一对象&lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">否则，返回一条包含远程处理异常的答复消息。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>SyncProcessMessage also modifies the value returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt; property.</source>
          <target state="translated">SyncProcessMessage 还会修改返回的值&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;属性。&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">发送给远程对象上的方法调用的响应消息。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>