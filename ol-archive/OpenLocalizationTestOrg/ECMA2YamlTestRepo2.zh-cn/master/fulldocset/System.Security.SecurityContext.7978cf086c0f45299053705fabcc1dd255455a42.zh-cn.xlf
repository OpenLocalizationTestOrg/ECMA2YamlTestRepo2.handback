<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1db988f555437680b7d01d6f130692cb983299a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.SecurityContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a545334273400fac8abddb54bdb97b2ba5b0059</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01d0114dc8af45a9ebf23201369689b03bc97fad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates and propagates all security-related data for execution contexts transferred across threads.</source>
          <target state="translated">封装并传播在线程间传输的执行上下文的所有安全相关数据。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Captures the security context for the current thread.</source>
          <target state="translated">捕获当前线程的安全上下文。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The captured security context can be applied to another thread.</source>
          <target state="translated">捕获的安全上下文可以应用于另一个线程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.SecurityContext&gt; consists of the &lt;xref:System.Threading.CompressedStack&gt; and the &lt;xref:System.Security.Principal.WindowsIdentity&gt; for the executing thread.</source>
          <target state="translated">&lt;xref:System.Security.SecurityContext&gt;组成&lt;xref:System.Threading.CompressedStack&gt;和&lt;xref:System.Security.Principal.WindowsIdentity&gt;正在执行的线程。&lt;/xref:System.Security.Principal.WindowsIdentity&gt; &lt;/xref:System.Threading.CompressedStack&gt; &lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The security context for the current thread.</source>
          <target state="translated">当前线程的安全上下文。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current security context.</source>
          <target state="translated">创建当前安全上下文的副本。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The current context must have been acquired through a capture or a copy operation.</source>
          <target state="translated">必须通过捕获或复制操作获取当前上下文。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This method is useful for applying a captured &lt;xref:System.Security.SecurityContext&gt; to multiple threads.</source>
          <target state="translated">此方法可用于应用捕获&lt;xref:System.Security.SecurityContext&gt;到多个线程。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The security context for the current thread.</source>
          <target state="translated">当前线程的安全上下文。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The current security context has been previously used, was marshaled across application domains, or was not acquired through the &lt;xref:System.Security.SecurityContext.Capture*&gt; method.</source>
          <target state="translated">当前安全上下文已使用、 跨应用程序域进行封送处理或已不获取通过&lt;xref:System.Security.SecurityContext.Capture*&gt;方法。&lt;/xref:System.Security.SecurityContext.Capture*&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Security.SecurityContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">释放当前实例所使用的所有资源<bpt id="p1">&lt;xref href="System.Security.SecurityContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.SecurityContext&gt;.</source>
          <target state="translated">调用<ph id="ph1">`Dispose`</ph>在完成使用&lt;xref:System.Security.SecurityContext&gt;.&lt;/xref:System.Security.SecurityContext&gt;时</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the &lt;xref:System.Security.SecurityContext&gt; in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>方法使&lt;xref:System.Security.SecurityContext&gt;中不可用状态。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.SecurityContext&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.SecurityContext&gt; was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用&lt;xref:System.Security.SecurityContext&gt;以便垃圾回收器才能回收的内存，&lt;xref:System.Security.SecurityContext&gt;占用。&lt;/xref:System.Security.SecurityContext&gt; &lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call <ph id="ph2">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.SecurityContext&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 始终调用<ph id="ph2">`Dispose`</ph>在发布到&lt;xref:System.Security.SecurityContext&gt;。&lt;/xref:System.Security.SecurityContext&gt;最后一个引用之前</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.SecurityContext&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">否则，它所使用的资源之前，不会释放垃圾回收器调用&lt;xref:System.Security.SecurityContext&gt;对象的<ph id="ph1">`Finalize`</ph>方法。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Determines whether the flow of the security context has been suppressed.</source>
          <target state="translated">确定是否已取消安全上下文的流动。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The IsFlowSuppressed method is used by infrastructure components to determine whether to transfer the &lt;xref:System.Security.SecurityContext&gt; information during asynchronous operations.</source>
          <target state="translated">IsFlowSuppressed 方法由基础结构组件用来确定是否传输&lt;xref:System.Security.SecurityContext&gt;异步操作过程中的信息。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the flow has been suppressed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果已取消流动;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determines whether the flow of the Windows identity portion of the current security context has been suppressed.</source>
          <target state="translated">确定是否已取消当前安全上下文的 Windows 标识部分的流动。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The IsWindowsIdentityFlowSuppressed method is used by infrastructure components to determine whether to transfer the Windows identity information when the &lt;xref:System.Security.SecurityContext&gt; migrates during asynchronous operations.</source>
          <target state="translated">IsWindowsIdentityFlowSuppressed 方法由基础结构组件用来确定是否要传输的 Windows 标识信息时&lt;xref:System.Security.SecurityContext&gt;在异步操作期间将迁移。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the flow has been suppressed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果已取消流动;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Restores the flow of the security context across asynchronous threads.</source>
          <target state="translated">在异步线程间恢复安全上下文的流动。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The RestoreFlow method is called by the &lt;xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName&gt; method to reverse the effect of a prior &lt;xref:System.Security.SecurityContext.SuppressFlow%2A&gt; method call.</source>
          <target state="translated">调用 RestoreFlow 方法&lt;xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName&gt;方法来取消之前的效果&lt;xref:System.Security.SecurityContext.SuppressFlow%2A&gt;方法调用。&lt;/xref:System.Security.SecurityContext.SuppressFlow%2A&gt; &lt;/xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The security context is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or an empty string.</source>
          <target state="translated">安全上下文，则<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或空字符串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Runs the specified method in the specified security context on the current thread.</source>
          <target state="translated">当前线程上在指定的安全上下文中运行的指定的方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The security context for the current thread is returned to its previous state when the method call is complete.</source>
          <target state="translated">方法调用完成时，当前线程的安全上下文被返回到其以前的状态。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The security context to set.</source>
          <target state="translated">要设置的安全上下文。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The delegate that represents the method to run in the specified security context.</source>
          <target state="translated">表示要在指定的安全上下文中运行的方法的委托。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The object to pass to the callback method.</source>
          <target state="translated">要传递给回调方法的对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> was not acquired through a capture operation.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph>不获取通过执行捕获操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> has already been used as the argument to a Run method call.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph>已使用为运行方法调用的参数。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Suppresses the flow of the security context across asynchronous threads.</source>
          <target state="translated">异步线程间取消安全上下文的流动。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use this method to suppress the flow of &lt;xref:System.Security.SecurityContext&gt; information on the current thread for asynchronous operations.</source>
          <target state="translated">使用此方法来禁止显示的流&lt;xref:System.Security.SecurityContext&gt;为异步操作在当前线程上的信息。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is only aware of the impersonation operations performed using managed code.</source>
          <target state="translated">公共语言运行时 (CLR) 仅了解使用托管的代码执行模拟操作。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The CLR has no knowledge of impersonation performed outside of managed code, such as platform invokes to unmanaged code that does the impersonation, or through calls to Win32 functions.</source>
          <target state="translated">CLR 具有不知道在托管代码之外执行的模拟，如平台调用到非托管代码的执行模拟，或通过对 Win32 函数的调用。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To flow identity across asynchronous points you must use the managed &lt;xref:System.Security.Principal.WindowsIdentity&gt; and &lt;xref:System.Security.Principal.WindowsImpersonationContext&gt; methods.</source>
          <target state="translated">标识流过异步点，必须使用托管&lt;xref:System.Security.Principal.WindowsIdentity&gt;和&lt;xref:System.Security.Principal.WindowsImpersonationContext&gt;方法。&lt;/xref:System.Security.Principal.WindowsImpersonationContext&gt; &lt;/xref:System.Security.Principal.WindowsIdentity&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt; method on the returned &lt;xref:System.Threading.AsyncFlowControl&gt; structure to return the &lt;xref:System.Security.SecurityContext&gt; object to its previous state.</source>
          <target state="translated">使用&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;方法返回&lt;xref:System.Threading.AsyncFlowControl&gt;结构返回&lt;xref:System.Security.SecurityContext&gt;到其先前状态的对象。&lt;/xref:System.Security.SecurityContext&gt; &lt;/xref:System.Threading.AsyncFlowControl&gt; &lt;/xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This method is protected with a &lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt; for &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; permission.</source>
          <target state="translated">此方法使用受保护&lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;为&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;权限。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A fully trusted component can call this method to suppress the flow of the &lt;xref:System.Security.SecurityContext&gt; information during asynchronous calls.</source>
          <target state="translated">完全受信任的组件可以调用此方法以禁止显示的流&lt;xref:System.Security.SecurityContext&gt;异步调用过程中的信息。&lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the flow is suppressed, the &lt;xref:System.Security.SecurityContext.Capture%2A&gt; method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">当流被禁止显示时，&lt;xref:System.Security.SecurityContext.Capture%2A&gt;方法返回<ph id="ph1">`null`</ph>。&lt;/xref:System.Security.SecurityContext.Capture%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.AsyncFlowControl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure for restoring the flow.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.AsyncFlowControl"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>用于恢复流动的结构。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.</source>
          <target state="translated">在异步线程间取消当前安全上下文的 Windows 标识部分的流动。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A structure for restoring the flow.</source>
          <target state="translated">用于恢复流动的结构。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>