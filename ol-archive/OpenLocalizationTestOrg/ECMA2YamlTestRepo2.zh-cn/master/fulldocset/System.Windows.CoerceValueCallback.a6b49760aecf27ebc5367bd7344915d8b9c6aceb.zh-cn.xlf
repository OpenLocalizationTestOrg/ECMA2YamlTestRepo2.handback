<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98a5f21694485805037062331e61c84ab6c7b89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.CoerceValueCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0dbcacc268be5eccf7d087f65cc65526a3b6163</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8a15d9a78bddc35a28aedda845459834d8a028d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</source>
          <target state="translated">每当重新计算的依赖项属性值，或强制专门请求就会调用的方法，提供了一个模板。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Callbacks based on CoerceValueCallback can be assigned to a dependency property through several different techniques.</source>
          <target state="translated">基于 CoerceValueCallback 回调可以分配给通过多种不同的方法的依赖项属性。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each of these techniques requires that you first create a new property metadata object (&lt;xref:System.Windows.PropertyMetadata&gt;, or a derived class such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).</source>
          <target state="translated">上述每种方法，你首先需要创建新的属性元数据对象 (&lt;xref:System.Windows.PropertyMetadata&gt;，或某个派生的类，如&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;)。&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create the metadata object using a constructor signature that takes the <ph id="ph1">`coerceValueCallback`</ph> parameter, and assign that parameter to your callback handler.</source>
          <target state="translated">创建元数据对象使用构造函数签名，它带有<ph id="ph1">`coerceValueCallback`</ph>参数，并将该参数分配给回调处理程序。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Or construct the metadata by any signature and set the &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; property prior to putting the metadata in use.</source>
          <target state="translated">构造通过任何签名并集的元数据或&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;属性，然后将元数据放在使用。&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you have this metadata, you can:      -   Define a new dependency property on a new class, using either signature of  &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, giving the metadata as the <ph id="ph1">`typeMetadata`</ph> value.</source>
          <target state="translated">此元数据后，你可以:-上使用的任一签名的新类定义新的依赖项属性&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;，将该元数据作为<ph id="ph1">`typeMetadata`</ph>值。&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>-   Override the metadata (call &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for an existing dependency property, when you derive from the class that owns the dependency property.</source>
          <target state="translated">-重写元数据 (调用&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) 对于现有依赖项属性，当你从拥有依赖项属性的类派生。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   Add an existing dependency property to a new &lt;xref:System.Windows.DependencyObject&gt; class, using new metadata, by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">-将现有的依赖项属性添加到新&lt;xref:System.Windows.DependencyObject&gt;类，使用新的元数据，通过调用&lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; &lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implementations of this callback should check the value in <ph id="ph1">`baseValue`</ph> and determine based on either the value or the type whether this is a value that needs to be further coerced.</source>
          <target state="translated">此回调的实现应签入的值<ph id="ph1">`baseValue`</ph>并确定基于值或类型，这是否是一个值，需要进一步进行强制转换。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for a dependency property is invoked any time that the property system or any other caller calls &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt; on a &lt;xref:System.Windows.DependencyObject&gt; instance, specifying that property's identifier as the <ph id="ph1">`dp`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;依赖项属性调用属性系统或其他任何调用方调用任何时间&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;上&lt;xref:System.Windows.DependencyObject&gt;实例，它指定该属性的标识符，则为<ph id="ph1">`dp`</ph>。&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.CoerceValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Changes to the property value may have come from any possible participant in the property system.</source>
          <target state="translated">为属性值的更改可能具有来自属性系统中任何可能的参与者。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</source>
          <target state="translated">这包括样式、 泛型失效、 触发器、 属性值继承和本地值设置。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Generally you should avoid specifying more than one &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for any given dependency property (overriding or adding with new metadata for a dependency property that already had a &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).</source>
          <target state="translated">通常，应避免指定多个&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;为任意给定的依赖项属性 (重写或添加新的元数据的一个依赖项属性，已经有&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;)。&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Only one of the callbacks will be able to act.</source>
          <target state="translated">只有一个回调将能够执行操作。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the &lt;xref:System.Windows.DependencyObject&gt; caller.</source>
          <target state="translated">行动回调将被应用到相比继承中的大多数派生类的一个&lt;xref:System.Windows.DependencyObject&gt;调用方。&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</source>
          <target state="translated">元数据中重写时，将替换其他回调由于分配给依赖项属性的元数据所有者层次结构中存在更高版本。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>