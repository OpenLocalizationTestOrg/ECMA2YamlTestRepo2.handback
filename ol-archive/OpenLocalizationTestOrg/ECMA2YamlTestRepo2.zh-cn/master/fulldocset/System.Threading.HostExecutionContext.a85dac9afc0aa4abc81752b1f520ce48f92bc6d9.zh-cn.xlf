<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28b1e81979ebc849327a7bcfeaf3313aabfc00d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.HostExecutionContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c89f039547f44265d7ffd8217f003ceb25aa5dfd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad0dfa8499f5dc01731c0f78d674dd7bbbb60fd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates and propagates the host execution context across threads.</source>
          <target state="translated">封装并传播在线程之间的主机执行上下文。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The HostExecutionContext is part of a larger &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">HostExecutionContext 是更大的&lt;xref:System.Threading.ExecutionContext&gt;.&lt;/xref:System.Threading.ExecutionContext&gt;的一部分</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The host context migrates, or flows, with the execution context.</source>
          <target state="translated">主机上下文迁移，或流式处理，使用执行上下文。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default constructor creates a host execution context whose &lt;xref:System.Threading.HostExecutionContext.State%2A&gt; property value is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认构造函数创建的主机执行上下文其&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;属性值是<ph id="ph1">`null`</ph>。&lt;/xref:System.Threading.HostExecutionContext.State%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified state.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类使用指定的状态。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.HostExecutionContext&gt; is included with the &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext&gt;附带&lt;xref:System.Threading.ExecutionContext&gt;.&lt;/xref:System.Threading.ExecutionContext&gt; &lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`state`</ph> represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">`state`</ph>表示的安全句柄包含<ph id="ph2">`IUnknown`</ph>主机的指针。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">表示主机执行上下文状态的对象。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current host execution context.</source>
          <target state="translated">创建当前主机执行上下文的副本。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The copy can be used as the parameter to a &lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt; method call.</source>
          <target state="translated">副本可用作参数&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;方法调用。&lt;/xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the host context for the current thread.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，表示当前线程的主机上下文。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">释放当前实例所使用的所有资源<bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">调用<ph id="ph1">`Dispose`</ph>在完成使用&lt;xref:System.Threading.HostExecutionContext&gt;.&lt;/xref:System.Threading.HostExecutionContext&gt;时</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the &lt;xref:System.Threading.HostExecutionContext&gt; in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>方法使&lt;xref:System.Threading.HostExecutionContext&gt;中不可用状态。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the &lt;xref:System.Threading.HostExecutionContext&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Threading.HostExecutionContext&gt; was occupying.</source>
          <target state="translated">在调用<ph id="ph1">`Dispose`</ph>，必须释放对所有引用&lt;xref:System.Threading.HostExecutionContext&gt;以便垃圾回收器才能回收的内存，&lt;xref:System.Threading.HostExecutionContext&gt;占用。&lt;/xref:System.Threading.HostExecutionContext&gt; &lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call <ph id="ph2">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 始终调用<ph id="ph2">`Dispose`</ph>在发布到&lt;xref:System.Threading.HostExecutionContext&gt;。&lt;/xref:System.Threading.HostExecutionContext&gt;最后一个引用之前</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Threading.HostExecutionContext&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">否则，它所使用的资源之前，不会释放垃圾回收器调用&lt;xref:System.Threading.HostExecutionContext&gt;对象的<ph id="ph1">`Finalize`</ph>方法。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, releases the unmanaged resources used by the &lt;xref:System.Threading.WaitHandle&gt;, and optionally releases the managed resources.</source>
          <target state="translated">当在派生类中重写时释放使用的非托管的资源&lt;xref:System.Threading.WaitHandle&gt;，，还可以释放托管的资源。&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method is called by the &lt;xref:System.Threading.HostExecutionContext.Dispose&gt; method overload and the finalizer.</source>
          <target state="translated">调用此方法&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;方法重载和终结器。&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.HostExecutionContext.Dispose&gt; invokes this protected method with the <ph id="ph1">`disposing`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;通过对此受保护的方法时，将调用<ph id="ph1">`disposing`</ph>参数设置为<ph id="ph2">`true`</ph>。&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The finalizer invokes this method with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">终结器时，将调用此方法与<ph id="ph1">`disposing`</ph>设置为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Threading.HostExecutionContext&gt; references.</source>
          <target state="translated">当<ph id="ph1">`disposing`</ph>参数是<ph id="ph2">`true`</ph>，此方法释放由任何托管对象持有的全部资源此&lt;xref:System.Threading.HostExecutionContext&gt;引用。&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用<ph id="ph1">`Dispose`</ph>每个引用对象的方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method can be called multiple times by other objects.</source>
          <target state="translated">由其他对象，此方法可以调用多次。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</source>
          <target state="translated">在重写此方法，请注意不要引用已释放的早期调用中的对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets the state of the host execution context.</source>
          <target state="translated">获取或设置主机执行上下文的状态。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The State property value represents a safe handle containing the <ph id="ph1">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated">状态属性值表示的安全句柄包含<ph id="ph1">`IUnknown`</ph>主机的指针。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">表示主机执行上下文状态的对象。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>