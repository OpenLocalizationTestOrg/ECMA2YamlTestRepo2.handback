<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dba0a1f31d37c2ef074aebf914cd8537b07928cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.WaitCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">694702c94445c6967e6ebdee42164f5d285c2dc1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ebb0a826ec285d368fb4b791b375598335ad4f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a callback method to be executed by a thread pool thread.</source>
          <target state="translated">表示要由线程池线程执行的回调方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WaitCallback represents a callback method that you want to execute on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">WaitCallback 表示你想要执行的回调方法&lt;xref:System.Threading.ThreadPool&gt;线程。&lt;/xref:System.Threading.ThreadPool&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create the delegate by passing your callback method to the WaitCallback constructor.</source>
          <target state="translated">通过将你的回调方法传递给 WaitCallback 构造函数创建委托。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your method must have the signature shown here.</source>
          <target state="translated">你的方法必须具有此处所示的签名。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Queue your task for execution by passing the WaitCallback delegate to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">任务排入队列以便执行通过将 WaitCallback 委托传递给&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your callback method executes when a thread pool thread becomes available.</source>
          <target state="translated">在线程池线程变得可用时，将执行你的回调方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the WaitCallback constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; Visual Basic 用户可以省略 WaitCallback 构造函数中，而只需使用<ph id="ph2">`AddressOf`</ph>运算符时将回调方法传递给&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic 会自动调用正确的委托构造函数。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; when you queue your task for execution.</source>
          <target state="translated">如果你想要将信息传递给你的回调方法，创建包含所需的信息的对象，并将其传递到&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;时你你任务排队以便执行。&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each time your callback method executes, the <ph id="ph1">`state`</ph> parameter contains this object.</source>
          <target state="translated">执行回调方法时，每次<ph id="ph1">`state`</ph>参数包含此对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about using callbacks to synchronize thread pool threads, see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关使用回调同步线程池线程的详细信息，请参阅<bpt id="p1">[</bpt>托管线程池<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>