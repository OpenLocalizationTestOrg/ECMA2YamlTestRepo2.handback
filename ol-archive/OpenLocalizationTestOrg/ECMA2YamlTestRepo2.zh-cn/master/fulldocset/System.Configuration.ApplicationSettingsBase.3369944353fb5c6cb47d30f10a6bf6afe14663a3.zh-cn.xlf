<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cca0d4d6132f8fe00c7cce0d6d5c774da5fd893</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.ApplicationSettingsBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f68e5973c7bbb85180ff2d63e9824825f819acec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">158a3b3bc1271ed48a42c7dfd92095a6995a3a84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.</source>
          <target state="translated">充当基类派生具体的包装类，在窗口窗体应用程序中实现的应用程序设置功能。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ApplicationSettingsBase adds the following functionality to the &lt;xref:System.Configuration.SettingsBase&gt; class, which is used by Web-based applications:      -   The ability to detect attributes on a derived, settings wrapper class.</source>
          <target state="translated">ApplicationSettingsBase 添加了以下功能&lt;xref:System.Configuration.SettingsBase&gt;类，该类由基于 Web 的应用程序:-检测派生的设置包装器类的属性的能力&lt;/xref:System.Configuration.SettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ApplicationSettingsBase supports the declarative model used for wrapper class properties, as described later.</source>
          <target state="translated">ApplicationSettingsBase 支持用于包装类属性的声明性模型，如下文所述。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Higher-level &lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt; and &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.</source>
          <target state="translated">-更高级别的&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;和&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   Additional validation events that you can handle to ensure the correctness of individual settings.</source>
          <target state="translated">的你可以处理以确保各个设置的正确性其他验证事件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from ApplicationSettingsBase.</source>
          <target state="translated">在应用程序设置体系结构中，若要访问设置属性的一组你需要从 ApplicationSettingsBase 派生一个具体的包装类。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The wrapper class customizes ApplicationSettingsBase in the following ways:      -   For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class.</source>
          <target state="translated">包装类进行自定义 ApplicationSettingsBase，可通过以下方式:-对于每个设置属性，要进行访问，相应强类型化公共属性添加到包装类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This property has <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors for read/write application settings, but only a <ph id="ph3">`get`</ph> accessor for read-only settings.</source>
          <target state="translated">此属性具有<ph id="ph1">`get`</ph>和<ph id="ph2">`set`</ph>读/写应用程序设置，但仅的访问器<ph id="ph3">`get`</ph>只读设置的访问器。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-   Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on.</source>
          <target state="translated">-相应的特性必须应用于包装器类的公共属性，以指示特征的设置属性设置的作用域 （应用程序或用户），如是否设置应支持漫游设置，要使用，等的设置提供程序的默认值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each property is required to specify its scope, using either &lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt; or &lt;xref:System.Configuration.UserScopedSettingAttribute&gt;.</source>
          <target state="translated">每个属性都需要指定其作用域，使用其中一种&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;或&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;。&lt;/xref:System.Configuration.UserScopedSettingAttribute&gt; &lt;/xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Application-scoped settings are read-only if the default &lt;xref:System.Configuration.LocalFileSettingsProvider&gt; is used.</source>
          <target state="translated">应用程序范围设置是只读的如果默认值&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;使用。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ApplicationSettingsBase class uses reflection to detect these attributes at run time.</source>
          <target state="translated">ApplicationSettingsBase 类使用反射在运行时检测这些属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.</source>
          <target state="translated">大部分此信息传递到设置提供程序层，它负责存储和持久性格式等。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When an application has multiple settings wrapper classes, each class defines a <bpt id="p1">*</bpt>settings group<ept id="p1">*</ept>.</source>
          <target state="translated">当应用程序有多个设置包装类时，每个类定义<bpt id="p1">*</bpt>设置组<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each group has the following characteristics:      -   A group can contain any number or type of property settings.</source>
          <target state="translated">每个组具有以下特征:-一个组可以包含任意数量或类型的属性设置。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-   If the group name is not explicitly set by the decorating the wrapper class with a &lt;xref:System.Configuration.SettingsGroupNameAttribute&gt;, then a name is automatically generated.</source>
          <target state="translated">-如果组名称的修饰具有的包装类未显式设置&lt;xref:System.Configuration.SettingsGroupNameAttribute&gt;，则会自动生成名称。&lt;/xref:System.Configuration.SettingsGroupNameAttribute&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, all client-based applications use the &lt;xref:System.Configuration.LocalFileSettingsProvider&gt; to provide storage.</source>
          <target state="translated">默认情况下，所有基于客户端的应用程序使用&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;提供存储。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">如果需要备用的设置提供程序，则包装器类或属性必须修饰以相应&lt;xref:System.Configuration.SettingsProviderAttribute&gt;.&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about using application settings, see <bpt id="p1">[</bpt>Application Settings for Windows Forms<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关使用应用程序设置的详细信息，请参阅<bpt id="p1">[</bpt>应用程序设置 Windows 窗体<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class to its default state.</source>
          <target state="translated">初始化的实例<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为其默认状态的类。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">默认构造函数旨在假定没有与当前的设置包装类，该类派生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;关联的组件不工作</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When an instance of a wrapper class is created, inherited code will automatically perform the following actions:      1.</source>
          <target state="translated">继承的代码时创建的包装类的实例，将自动执行下列操作︰ 1。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Reflect over the class.</source>
          <target state="translated">通过类进行反射。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For each property on the wrapper marked with either <ph id="ph1">`[UserScopedSettingAttribute]`</ph> or <ph id="ph2">`[ApplicationScopedSettingAttribute]`</ph>, a corresponding &lt;xref:System.Configuration.SettingsProperty&gt; is created.</source>
          <target state="translated">对于在包装上的每个属性标记使用<ph id="ph1">`[UserScopedSettingAttribute]`</ph>或<ph id="ph2">`[ApplicationScopedSettingAttribute]`</ph>，相应&lt;xref:System.Configuration.SettingsProperty&gt;创建。&lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Configuration.SettingsProperty&gt; has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.</source>
          <target state="translated">每个&lt;xref:System.Configuration.SettingsProperty&gt;具有某些组件 （可选） 位于包装器的属性，例如默认值或设置提供程序的其他属性对基于其属性集。&lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All other attributes are simply put into an attribute bag, the &lt;xref:System.Configuration.SettingsProperty.Attributes%2A&gt; property of the &lt;xref:System.Configuration.SettingsProperty&gt; class.</source>
          <target state="translated">所有其他特性只被放置到一个属性包，&lt;xref:System.Configuration.SettingsProperty.Attributes%2A&gt;属性的&lt;xref:System.Configuration.SettingsProperty&gt;类。&lt;/xref:System.Configuration.SettingsProperty&gt; &lt;/xref:System.Configuration.SettingsProperty.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>5.</source>
          <target state="translated">5.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All &lt;xref:System.Configuration.SettingsProperty&gt; objects are added to a &lt;xref:System.Configuration.SettingsPropertyCollection&gt; represented by the &lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; property of the &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class.</source>
          <target state="translated">所有&lt;xref:System.Configuration.SettingsProperty&gt;对象添加到&lt;xref:System.Configuration.SettingsPropertyCollection&gt;由&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;属性的&lt;xref:System.Configuration.ApplicationSettingsBase&gt;类。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; &lt;/xref:System.Configuration.SettingsPropertyCollection&gt; &lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This collection is then passed to the &lt;xref:System.Configuration.SettingsBase.Initialize%2A&gt; method.</source>
          <target state="translated">然后将此集合传递给&lt;xref:System.Configuration.SettingsBase.Initialize%2A&gt;方法。&lt;/xref:System.Configuration.SettingsBase.Initialize%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As implied by step 3 mentioned previously, &lt;xref:System.Configuration.ApplicationSettingsBase&gt; natively works with several property attributes, specifically the following: &lt;xref:System.Configuration.SettingsProviderAttribute&gt;, &lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;, and &lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;.</source>
          <target state="translated">步骤 3 前面提到，通过为隐含&lt;xref:System.Configuration.ApplicationSettingsBase&gt;本机适用于多个属性特性，即︰ &lt;xref:System.Configuration.SettingsProviderAttribute&gt;， &lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;，和&lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;。&lt;/xref:System.Configuration.SettingsSerializeAsAttribute&gt; &lt;/xref:System.Configuration.DefaultSettingValueAttribute&gt; &lt;/xref:System.Configuration.SettingsProviderAttribute&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>All other settings attributes are simply passed through to the appropriate underlying provider.</source>
          <target state="translated">所有其他设置特性直接传递到相应的基础提供程序。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied owner component.</source>
          <target state="translated">初始化的实例<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类使用提供的所有者组件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This constructor is exactly equivalent to the &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt; constructor using the invocation:       <ph id="ph1">`ApplicationSettingsBase(owner, String.Empty)`</ph>       For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">此构造函数在完全等同于&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt;使用调用的构造函数︰<ph id="ph1">`ApplicationSettingsBase(owner, String.Empty)`</ph>包装器类的实例化过程中如何使用反射有关的信息，请参阅默认&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;构造函数。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The component that will act as the owner of the application settings object.</source>
          <target state="translated">该组件将充当应用程序设置对象的所有者。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied settings key.</source>
          <target state="translated">初始化的实例<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类使用提供的设置密钥。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property to the value of the <ph id="ph1">`settingsKey`</ph> parameter.</source>
          <target state="translated">此构造函数初始化&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;属性的值<ph id="ph1">`settingsKey`</ph>参数。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.</source>
          <target state="translated">此属性可消除歧义相同的应用程序域中的设置包装器类的不同实例中。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">有关如何在一个包装类的实例化期间使用反射的信息，请参阅默认&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;构造函数。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that uniquely identifies separate instances of the wrapper class.</source>
          <target state="translated">&lt;xref:System.String&gt;唯一标识单独实例的包装类。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied owner component and settings key.</source>
          <target state="translated">初始化的实例<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类使用提供的所有者组件和设置密钥。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.IComponent&gt; object specified by the <ph id="ph1">`owner`</ph> parameter acts as the owner of the current instance of this applications settings class.</source>
          <target state="translated">&lt;xref:System.ComponentModel.IComponent&gt;指定对象<ph id="ph1">`owner`</ph>参数充当应用程序设置类的当前实例的所有者&lt;/xref:System.ComponentModel.IComponent&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>During the initialization of the settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, the owner's site is queried for a &lt;xref:System.Configuration.ISettingsProviderService&gt;.</source>
          <target state="translated">设置包装器类初始化期间派生从&lt;xref:System.Configuration.ApplicationSettingsBase&gt;、 &lt;xref:System.Configuration.ISettingsProviderService&gt;。&lt;/xref:System.Configuration.ISettingsProviderService&gt;查询所有者的站点&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">如果存在，它是优先使用本机设置提供程序的所有属性的包装器类，作为指定受支持&lt;xref:System.Configuration.SettingsProviderAttribute&gt;。&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property to the value of the <ph id="ph1">`settingsKey`</ph> parameter.</source>
          <target state="translated">此构造函数初始化&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;属性的值<ph id="ph1">`settingsKey`</ph>参数。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This property is useful in disambiguating different instances of the wrapper class in the same application domain.</source>
          <target state="translated">此属性可消除歧义的包装类相同的应用程序域中的不同实例中。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">有关如何在一个包装类的实例化期间使用反射的信息，请参阅默认&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;构造函数。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The component that will act as the owner of the application settings object.</source>
          <target state="translated">该组件将充当应用程序设置对象的所有者。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that uniquely identifies separate instances of the wrapper class.</source>
          <target state="translated">&lt;xref:System.String&gt;唯一标识单独实例的包装类。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets the application settings context associated with the settings group.</source>
          <target state="translated">获取与此设置组关联的应用程序设置上下文。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt; has a context associated with it.</source>
          <target state="translated">每个设置包装类派生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;具有与其关联的上下文&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The context is passed to the settings provider for each property to identify how the property is used.</source>
          <target state="translated">该上下文传递到设置提供程序的每个属性，来确定如何使用属性中。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.</source>
          <target state="translated">上下文因此充当提示来帮助确定如何最大程度地保留关联的应用程序的设置值的设置提供程序。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property enables the settings provider to disambiguate multiple instances of the same wrapper class.</source>
          <target state="translated">相反，&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;属性启用要消除歧义的同一个包装类。 多个实例的设置提供程序&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with the settings group.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>与设置组关联。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns the value of the named settings property for the previous version of the same application.</source>
          <target state="translated">返回同一个应用程序的以前版本的命名的设置属性的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The GetPreviousVersion method is often used in conjunction with the &lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt; method when migrating application settings during the installation of a new version of an application.</source>
          <target state="translated">GetPreviousVersion 方法通常与结合使用&lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;方法在应用程序的新版本的安装过程中迁移应用程序设置时。&lt;/xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the name of the settings property whose value is to be returned.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含其值是要返回的设置属性的名称。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; containing the value of the specified <bpt id="p1">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;包含的值的指定<bpt id="p1">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>找到; 否则为如果<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The property does not exist.</source>
          <target state="translated">属性不存在。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The property count is zero or the property cannot be found in the data store.</source>
          <target state="translated">属性计数为零，或在数据存储区中找不到属性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the specified application settings property.</source>
          <target state="translated">获取或设置指定的应用程序设置属性的值。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Item property, also known as the indexer, is routinely used in the settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">Item 属性，也称为的索引器，用于定期从&lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;派生的设置包装类</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Item binds the public property of the wrapper class to the corresponding settings property.</source>
          <target state="translated">项将绑定到相应的设置属性的包装器类的公共属性。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Item raises several events depending on the operation being performed:      -   The first time a property is retrieved, the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt; event is raised.</source>
          <target state="translated">项引发多个事件，具体取决于所执行的操作:-检索属性时，第一次&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;引发事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   When a property is set, the &lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt; event is raised.</source>
          <target state="translated">-如果设置了一个属性，&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;引发事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the handler does not cancel the event, then the property value is set and the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event is raised.</source>
          <target state="translated">如果处理程序不会取消该事件，则设置的属性值和&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;引发事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the name of the property to access.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含要访问的属性的名称。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If found, the value of the named settings property; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">如果找到，命名的设置属性中; 的值否则为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>There are no properties associated with the current wrapper or the specified property could not be found.</source>
          <target state="translated">没有与当前包装关联的属性或找不到指定的属性。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An attempt was made to set a read-only property.</source>
          <target state="translated">尝试设置只读属性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The value supplied is of a type incompatible with the settings property, during a set operation.</source>
          <target state="translated">提供的值与设置属性不兼容的类型是设置操作期间。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">无法分析配置文件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.PropertyChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.PropertyChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引发事件时，将调用事件处理程序，通过委托。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>NIB︰ 引发事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The OnPropertyChanged method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnPropertyChanged 方法还允许派生的类对事件进行处理而不必附加委托。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">这是处理派生类中的事件的首选的技术。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件源。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;包含事件数据。&lt;/xref:System.ComponentModel.PropertyChangedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingChanging"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingChanging"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引发事件时，将调用事件处理程序，通过委托。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>NIB︰ 引发事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The OnSettingChanging method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingChanging 方法还允许派生的类对事件进行处理而不必附加委托。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">这是处理派生类中的事件的首选的技术。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件源。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingChangingEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingChangingEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsLoaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsLoaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引发事件时，将调用事件处理程序，通过委托。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>NIB︰ 引发事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The OnSettingsLoaded method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingsLoaded 方法还允许派生的类对事件进行处理而不必附加委托。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">这是处理派生类中的事件的首选的技术。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件源。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsLoadedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsLoadedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsSaving"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsSaving"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引发事件时，将调用事件处理程序，通过委托。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>NIB︰ 引发事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The OnSettingsSaving method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingsSaving 方法还允许派生的类对事件进行处理而不必附加委托。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">这是处理派生类中的事件的首选的技术。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件源。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.CancelEventArgs&gt;包含事件数据。&lt;/xref:System.ComponentModel.CancelEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Gets the collection of settings properties in the wrapper.</source>
          <target state="translated">获取包装中的设置属性的集合。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor of the Properties property reflects over the metadata of the settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, to dynamically determine the set of available application settings properties.</source>
          <target state="translated"><ph id="ph1">`get`</ph>设置包装器类，该类派生自的元数据反映的 Properties 属性访问器&lt;xref:System.Configuration.ApplicationSettingsBase&gt;，可以动态确定的一组可用的应用程序设置属性。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;类本身可以识别的一个应用程序设置，例如其名称、 属性类型、 设置提供程序、 默认值，某些特征读取仅有状态和序列化首选项。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>These characteristics are mirrored as properties in the &lt;xref:System.Configuration.SettingsProperty&gt; class.</source>
          <target state="translated">这些特征镜像为&lt;xref:System.Configuration.SettingsProperty&gt;类&lt;/xref:System.Configuration.SettingsProperty&gt;中的属性</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>All other attributes of the settings property are just passed through to its associated settings provider.</source>
          <target state="translated">设置属性的所有其他特性只需将传递到其关联的设置提供程序所造成。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the <bpt id="p2">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects used in the current wrapper.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含所有<bpt id="p2">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>当前包装中使用的对象。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The associated settings provider could not be found or its instantiation failed.</source>
          <target state="translated">找不到关联的设置提供程序或其实例化失败。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Occurs after the value of an application settings property is changed.</source>
          <target state="translated">应用程序设置属性的值更改后发生。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The PropertyChanged event is raised when a settings property is changed through the <ph id="ph1">`set`</ph> accessor of the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method, or for every property that is restored when a call is made to the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; or &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; methods.</source>
          <target state="translated">设置属性更改通过时引发的 PropertyChanged 事件<ph id="ph1">`set`</ph>的访问器&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法，或到进行调用时，将还原每个属性&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;或&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>There is no corresponding <ph id="ph1">`PropertyChanging`</ph> event for this class; instead, see the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; event.</source>
          <target state="translated">没有对应的<ph id="ph1">`PropertyChanging`</ph>事件此类; 相反，请参阅&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets a collection of property values.</source>
          <target state="translated">获取属性值的集合。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyValueCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of property values.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyValueCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>的属性值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets the collection of application settings providers used by the wrapper.</source>
          <target state="translated">获取包装所使用的应用程序设置提供程序的集合。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.SettingsProviderAttribute&gt; determines what setting provider is used by a settings wrapper class or an individual setting property.</source>
          <target state="translated">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;确定哪些设置使用提供程序设置包装类或单个设置的属性。&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If this attribute is not specified, a client application will use the &lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.</source>
          <target state="translated">如果未指定此属性，客户端应用程序将使用&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsProviderCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the <bpt id="p2">&lt;xref href="System.Configuration.SettingsProvider"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects used by the settings properties of the current settings wrapper.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsProviderCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含所有<bpt id="p2">&lt;xref href="System.Configuration.SettingsProvider"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>使用当前设置包装的设置属性的对象。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Refreshes the application settings property values from persistent storage.</source>
          <target state="translated">刷新从持久性存储区的应用程序设置属性值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The Reload method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed.</source>
          <target state="translated">重新加载方法清除当前已缓存的属性值，用户随后访问时，从持久性存储区导致重新加载这些值。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This method performs the following actions:      -   It clears the currently cached properties by clearing the collection represented by the &lt;xref:System.Configuration.SettingsBase.PropertyValues%2A&gt; property.</source>
          <target state="translated">此方法执行下列操作:-它通过清除表示该集合将清除当前已缓存的属性&lt;xref:System.Configuration.SettingsBase.PropertyValues%2A&gt;属性。&lt;/xref:System.Configuration.SettingsBase.PropertyValues%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>-   It raises the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event for every member of the &lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; collection.</source>
          <target state="translated">-它会发出&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;事件的每个成员&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;集合。&lt;/xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Reload contrasts with &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</source>
          <target state="translated">重新加载与之相对的&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;在于前者将加载最后一组已保存应用程序设置值，而后者将加载保存的默认值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Restores the persisted application settings values to their corresponding default properties.</source>
          <target state="translated">将保持的应用程序设置值还原到其相应的默认属性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The Reset method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings.</source>
          <target state="translated">重置方法通过还原每个应用程序设置的当前保留的值将覆盖用户范围的设置属性。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This method performs the following actions:      -   It calls the &lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt; method on every settings provider that supports this optional method.</source>
          <target state="translated">此方法执行下列操作:-它将调用&lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt;上支持此可选方法每个设置提供程序的方法。&lt;/xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>-   It calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; method to force a refresh of the settings property values.</source>
          <target state="translated">-它将调用&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法来强制进行刷新的设置属性值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; contrasts with Reset in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;形成了鲜明对比与重置，因为前者将加载最后一组已保存应用程序设置值，而后者将加载保存的默认值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">无法分析配置文件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Stores the current values of the application settings properties.</source>
          <target state="translated">存储应用程序设置属性的当前值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The Save method writes the current value of each settings property to its associated data store.</source>
          <target state="translated">Save 方法在其关联的数据存储区中写入每个设置属性的当前值。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For each property, this method calls the &lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt; method on the associated settings provider.</source>
          <target state="translated">对于每个属性，此方法调用&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;方法关联的设置提供程序。&lt;/xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This method differs from the base class implementation in that it raises the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt; event before the values are written.</source>
          <target state="translated">此方法与不同的基类实现的它会发出&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;事件之前写入值。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If the only settings defined are application-scoped settings, Save will have no effect and return no error if called with the default &lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.</source>
          <target state="translated">如果定义的唯一设置应用程序范围设置，保存将不产生任何影响，并且不返回任何错误，如果使用默认&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;调用</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Configuration.LocalFileSettingsProvider&gt; only saves user-scoped settings.</source>
          <target state="translated">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;仅保存用户范围的设置。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 没有相应负载方法因为包装器类初始化过程中自动加载的应用程序设置的值。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In contrast, these values are not automatically saved when an application ends.</source>
          <target state="translated">与此相反，这些值将不自动保存应用程序结束时。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Therefore, you must explicitly call the Save method to persist the current values of the application settings.</source>
          <target state="translated">因此，你必须显式调用 Save 方法来保持应用程序设置的当前值。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This is typically performed in the &lt;xref:System.Windows.Forms.Form.Closing&gt; event handler of the primary or containing &lt;xref:System.Windows.Forms.Form&gt;.</source>
          <target state="translated">这通常执行&lt;xref:System.Windows.Forms.Form.Closing&gt;的主事件处理程序或包含&lt;xref:System.Windows.Forms.Form&gt;.&lt;/xref:System.Windows.Forms.Form&gt;&lt;/xref:System.Windows.Forms.Form.Closing&gt;中</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Occurs before the value of an application settings property is changed.</source>
          <target state="translated">更改应用程序设置属性的值之前发生。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The SettingChanging event occurs before an application setting value property is changed through the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method.</source>
          <target state="translated">SettingChanging 事件发生之前通过更改应用程序设置值属性&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This event is not raised when the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; or &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; methods are called.</source>
          <target state="translated">此事件不时引发&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;或&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;调用方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>SettingChanging can be canceled through the &lt;xref:System.Configuration.SettingChangingEventArgs&gt; event data class.</source>
          <target state="translated">SettingChanging 可以取消通过&lt;xref:System.Configuration.SettingChangingEventArgs&gt;事件数据类。&lt;/xref:System.Configuration.SettingChangingEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You typically use the SettingChanging event to handle immediate validation of an individual settings property.</source>
          <target state="translated">你通常使用 SettingChanging 事件处理程序各个设置属性的即时验证。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information about validation, see <bpt id="p1">[</bpt>How to: Validate Application Settings<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关验证的详细信息，请参阅<bpt id="p1">[</bpt>如何︰ 验证应用程序设置<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>There is no corresponding <ph id="ph1">`SettingChanged`</ph> event for this class; instead, see the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event.</source>
          <target state="translated">没有对应的<ph id="ph1">`SettingChanged`</ph>事件此类; 相反，请参阅&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets or sets the settings key for the application settings group.</source>
          <target state="translated">获取或设置键设置为应用程序设置组。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The SettingsKey property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.</source>
          <target state="translated">SettingsKey 属性用于启用客户端代码，特别设置提供程序，以消除同一个应用程序设置类的多个实例之间的歧义。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application.</source>
          <target state="translated">设置包装类旨在使用单独模式，除非可以有多个单个应用程序中的相同应用程序设置类的实例。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The value of SettingsKey should be set according to how the property values are intended to be shared.</source>
          <target state="translated">SettingsKey 的值应根据属性值如何用于共享设置。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>-   If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then SettingsKey should have the same value in all of the instances.</source>
          <target state="translated">-如果包装的设置属性用于在包装的所有实例之间共享同一应用程序，然后 SettingsKey 应具有相同的值中的所有实例。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This is the default behavior of the &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class.</source>
          <target state="translated">这是类的默认行为&lt;xref:System.Configuration.ApplicationSettingsBase&gt;类。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>-   If the settings properties of the wrapper are intended to be per instance, then SettingsKey should have a unique value for every instance.</source>
          <target state="translated">-如果包装的设置属性旨在成为每个实例，然后 SettingsKey 应具有每个实例的唯一值。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt; version of the constructor enables you to initialize SettingsKey to a unique string.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt;的构造函数版本，可为唯一的字符串初始化 SettingsKey。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt; property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.</source>
          <target state="translated">与此相反，&lt;xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt;属性提供了对设置提供程序，以使其能够高效且有序方式保留的值的提示。&lt;/xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.SettingChangingEventArgs&gt; class contains a similar &lt;xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt; property that helps identify the source of the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; event.</source>
          <target state="translated">&lt;xref:System.Configuration.SettingChangingEventArgs&gt;类包含类似&lt;xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt;属性，可帮助标识的源&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; &lt;/xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt; &lt;/xref:System.Configuration.SettingChangingEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the settings key for the current settings group.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含当前的设置组的设置键。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Occurs after the application settings are retrieved from storage.</source>
          <target state="translated">从存储中检索应用程序设置后发生。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The SettingsLoaded event occurs only after the initial <ph id="ph1">`get`</ph> access of the first configuration property used, typically through the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method.</source>
          <target state="translated">SettingsLoaded 事件发生在初始后才<ph id="ph1">`get`</ph>访问第一个配置属性使用，通常通过&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Subsequent accesses use values for the settings property that are cached locally.</source>
          <target state="translated">后续访问使用本地缓存的设置属性的值。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; and &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods will clear all cached values so this event will be raised again upon subsequent property access.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;和&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法将清除所有缓存的值，因此将在后续访问属性时再次引发此事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Occurs before values are saved to the data store.</source>
          <target state="translated">值保存到数据存储区之前发生。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The SettingsSaving event is raised by the &lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt; method before it stores the application settings properties to their associated data store.</source>
          <target state="translated">SettingsSaving 事件由引发&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;之前它将存储到其关联的数据存储区的应用程序设置属性的方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The associated event handler can cancel this event.</source>
          <target state="translated">关联的事件处理程序可以取消此事件。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Updates application settings to reflect a more recent installation of the application.</source>
          <target state="translated">更新以反映应用程序的较新安装的应用程序设置。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The Upgrade method performs two actions to assure smooth transition to a new version of an application:      -   It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their &lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt; method, assuming they have implemented the &lt;xref:System.Configuration.IApplicationSettingsProvider&gt; interface.</source>
          <target state="translated">升级方法将执行两个操作来确保平稳过渡到新版本的应用程序:-它将通过调用升级的应用程序是否存在相应的设置提供程序的所有通知其&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt;方法，假定它们实现&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;接口。&lt;/xref:System.Configuration.IApplicationSettingsProvider&gt; &lt;/xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This action is not performed if the settings wrapper class is marked with &lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;.</source>
          <target state="translated">如果使用&lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;.&lt;/xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;标记设置包装类，则不会执行此操作</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>-   It reloads the values for all of the application settings.</source>
          <target state="translated">-它将重新加载的所有应用程序设置的值。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can override the default behavior of Upgrade to implement custom upgrading or merging behavior.</source>
          <target state="translated">你可以重写升级以实现自定义升级或合并行为的默认行为。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt; method to retrieve individual values for a setting for the previous version of the application.</source>
          <target state="translated">使用&lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;方法来检索有关以前版本的应用程序的设置的单个值。&lt;/xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Examples of custom upgrade behavior include:      -   Using new policy defaults that override one or more of the previous user-specified values or previous defaults.</source>
          <target state="translated">自定义升级行为的示例包括:-使用重写一个或多个以前的用户指定值的新策略默认值或以前的默认值。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>-   Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.</source>
          <target state="translated">-特殊转换后的旧值才能兼容较新范围、 与不同的设置属性组，等等。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">无法分析配置文件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>