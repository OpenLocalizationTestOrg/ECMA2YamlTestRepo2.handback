<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">622d983b53c274129793847d685acbdd440b7fa2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3114df2d94f35da3a16257cd30002677db5ea038</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7dba3e780d88fd1bff1362801691f4fb4116ef3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</source>
          <target state="translated">提供的互操作存根 （stub） 在托管到 COM 互操作方案中的用户自定义项的支持。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:      -   Take advantage of customized interop stubs at build time instead of run time.</source>
          <target state="translated">使用此属性，互操作的开发人员有关于封送处理的知识和互操作调用，以实现以下的内部工作情况:-在生成时，而不是运行时充分利用自定义互操作的存根。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   Debug customized interop stubs.</source>
          <target state="translated">调试自定义互操作的存根。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Provide marshaling capabilities within a stub that the runtime does not provide.</source>
          <target state="translated">-提供在存根中运行时不提供封送处理功能。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   Provide user-specific method dispatch capabilities.</source>
          <target state="translated">-提供特定于用户的方法调度功能。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.</source>
          <target state="translated">指定托管到本机 COM 互操作的相应存根 （stub） 方法的接口中的方法上应用该特性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub.</source>
          <target state="translated">如果在运行时遇到此属性时，公共语言运行时不动态生成互操作的存根。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Instead, it invokes the custom stub that was created at build time.</source>
          <target state="translated">相反，它会调用已在生成时创建的自定义存根。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked <ph id="ph1">`[ComImport]`</ph>.</source>
          <target state="translated">ManagedToNativeComInteropStubAttribute 属性具有以下特征:-特性可用于仅在从标记的接口的方法上<ph id="ph1">`[ComImport]`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the attribute is applied to non-interface types, it is ignored by the runtime.</source>
          <target state="translated">如果该属性将应用于非接口类型，则忽略由运行时它。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-   The attribute can be used only once on the same method in an interface.</source>
          <target state="translated">-该属性上的接口中相同的方法可以使用仅一次。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If it is used more than once, the compiler generates a duplicated attribute error.</source>
          <target state="translated">如果不止一次使用它，编译器将生成重复的属性错误。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>-   The attribute is not inheritable from a base interface.</source>
          <target state="translated">-该属性不是可继承基接口中。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Derived interfaces must explicitly assign the attribute.</source>
          <target state="translated">该特性，必须显式分配的派生的接口。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   The assembly that contains the attributed method must also contain the customized stub.</source>
          <target state="translated">-包含特性化的方法的程序集还必须包含自定义的存根 （stub）。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overloaded stub methods are valid.</source>
          <target state="translated">重载存根 （stub） 方法都是有效的。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub.</source>
          <target state="translated">虽然你指定的类型和存根 （stub） 方法的名称，运行时将发现相应的存根。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit <ph id="ph1">`this`</ph> pointer.</source>
          <target state="translated">这是通过检查接口方法上的所有自变量，然后再执行完整签名匹配使用显式<ph id="ph1">`this`</ph>指针。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.</source>
          <target state="translated">还有可能接口共享相同的存根 （stub） 方法; 中的多个方法但是，你应小心使用共享存根 （stub） 时。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Stub methods must be static.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 存根 （stub） 方法必须是静态的。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      <ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>       You could then use the following code to declare the corresponding stub method:      <ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></source>
          <target state="translated">无法通知运行时，必须在生成时，而不是用下面的 C# 代码的运行时使用自定义互操作存根 （stub）︰<ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>然后可以使用下面的代码来声明相应的存根 （stub） 方法︰<ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified class type and method name.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用指定的类类型和方法名称的类。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The class that contains the required stub method.</source>
          <target state="translated">包含所需的存根 （stub） 方法的类。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the stub method.</source>
          <target state="translated">存根 （stub） 方法的名称。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph> cannot be found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph>无法找到。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-or-       The method is not static or non-generic.</source>
          <target state="translated">-或者-此方法不是静态或非泛型。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-       The method's parameter list does not match the expected parameter list for the stub.</source>
          <target state="translated">-或者-方法的参数列表与存根 （stub） 的预期的参数列表不匹配。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</source>
          <target state="translated">包含托管互操作方法的接口不具有访问权限的存根 （stub） 方法，因为存根 （stub） 方法具有私有或受保护可访问性，或由于安全问题。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the class that contains the required stub method.</source>
          <target state="translated">获取包含所需的存根 （stub） 方法的类。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The class that contains the customized interop stub.</source>
          <target state="translated">包含自定义互操作的存根 （stub） 的类。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the name of the stub method.</source>
          <target state="translated">获取存根 （stub） 方法的名称。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The name of a customized interop stub.</source>
          <target state="translated">自定义互操作存根 （stub） 的名称。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>