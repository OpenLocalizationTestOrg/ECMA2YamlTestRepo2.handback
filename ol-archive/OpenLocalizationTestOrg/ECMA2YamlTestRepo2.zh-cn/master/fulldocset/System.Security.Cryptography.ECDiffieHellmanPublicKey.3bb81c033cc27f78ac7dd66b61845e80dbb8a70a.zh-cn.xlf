<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84dc07b0a9716ccf86f103a84b303fac71aa41d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.ECDiffieHellmanPublicKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b14a1da7c242b51a7622c03ea9f7b8092512bfbd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e631c844f02e70f57167deb8eafa796163c2a111</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an abstract base class from which all <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanCngPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementations must inherit.</source>
          <target state="translated">提供所有的抽象基类<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanCngPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实现都必须继承。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This constructor is called by classes that derive from the &lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt; class.</source>
          <target state="translated">从&lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt;类&lt;/xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt;派生的类将调用此构造函数</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.ECDiffieHellmanCngPublicKey&gt; class is the only currently supported implementation.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.ECDiffieHellmanCngPublicKey&gt;类是仅当前支持的实现。&lt;/xref:System.Security.Cryptography.ECDiffieHellmanCngPublicKey&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A byte array that represents an <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">一个字节数组，表示<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keyBlob&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;keyBlob&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellman"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">释放当前实例所使用的所有资源<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellman"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Call Dispose when you are finished using the &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;.</source>
          <target state="translated">在完成使用&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;.&lt;/xref:System.Security.Cryptography.ECDiffieHellman&gt;时调用的 Dispose</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Dispose method leaves the &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt; in an unusable state.</source>
          <target state="translated">Dispose 方法离开&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;中不可用状态。&lt;/xref:System.Security.Cryptography.ECDiffieHellman&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>After calling Dispose, you must release all references to the &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt; was occupying.</source>
          <target state="translated">调用 Dispose 后，必须释放对所有引用&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;以便垃圾回收器才能回收的内存，&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;占用。&lt;/xref:System.Security.Cryptography.ECDiffieHellman&gt; &lt;/xref:System.Security.Cryptography.ECDiffieHellman&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>实现 Dispose 方法<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellman"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and optionally releases the managed resources.</source>
          <target state="translated">释放由非托管的资源<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellman"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，还可以释放托管的资源。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This method executes in two distinct scenarios:      -   If <ph id="ph1">`disposing`</ph> equals <ph id="ph2">`true`</ph>, the method has been called directly or indirectly by a user's code.</source>
          <target state="translated">此方法执行以下两种不同情况:-如果<ph id="ph1">`disposing`</ph>等于<ph id="ph2">`true`</ph>，该方法已直接或间接由调用用户代码。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Managed and unmanaged resources can be disposed.</source>
          <target state="translated">管理并可以释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   If <ph id="ph1">`disposing`</ph> equals <ph id="ph2">`false`</ph>, the method has been called by the runtime from inside the finalizer, and you should not reference managed resources.</source>
          <target state="translated">-如果<ph id="ph1">`disposing`</ph>等于<ph id="ph2">`false`</ph>、 已由运行时从终结器，内部调用方法和不应该引用托管的资源。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Only unmanaged resources can be disposed.</source>
          <target state="translated">可以释放仅非托管的资源。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you need to provide cleanup code for managed and unmanaged resources that an object created, you should override this method.</source>
          <target state="translated">如果你需要为创建的对象的托管和非托管资源提供了清理代码，应重写此方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">此方法称为由公共<ph id="ph1">`Dispose()`</ph>方法和&lt;xref:System.Object.Finalize%2A&gt;方法。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;调用<ph id="ph1">`Dispose`</ph>与<ph id="ph2">`disposing`</ph>设置为<ph id="ph3">`false`</ph>。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt; references.</source>
          <target state="translated">当<ph id="ph1">`disposing`</ph>参数为 true 时，此方法释放由任何托管对象持有的全部资源此&lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt;引用。&lt;/xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用<ph id="ph1">`Dispose()`</ph>每个引用对象的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Serializes the <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> key BLOB to a byte array.</source>
          <target state="translated">序列化<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>密钥 BLOB 的字节数组。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A byte array that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</source>
          <target state="translated">包含已序列化的椭圆曲线 Diffie-hellman (ECDH) 公钥的字节数组。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Serializes the <bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> public key to an XML string.</source>
          <target state="translated">序列化<bpt id="p1">&lt;xref href="System.Security.Cryptography.ECDiffieHellmanPublicKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>公钥的 XML 字符串。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An XML string that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</source>
          <target state="translated">包含已序列化的椭圆曲线 Diffie-hellman (ECDH) 公钥的 XML 字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>