<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="hu-hu">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4691a6e122ecbf5305faed03fb963be4f3007c7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.DependencyPropertyKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6841db7b46cbc620ad780d693b6cf47c03bc2d50</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8a436c8a112474f58b9bb1881a040508df4e8e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a dependency property identifier for limited write access to a read-only dependency property.</source>
          <target state="translated">Függőség tulajdonságazonosító biztosít egy csak olvasható függőség tulajdonság korlátozott írási hozzáférést.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>DependencyPropertyKey instances are obtained as the return value of a dependency property registration call using the methods &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; or &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.</source>
          <target state="translated">DependencyPropertyKey példányok akkor kapja meg, a metódusok &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;vagy &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; függőség tulajdonság regisztrációs hívás visszatérési értéke</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The types that register a dependency property can use the DependencyPropertyKey in calls to &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt; and &lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt; that adjust the property's value as part of class logic.</source>
          <target state="translated">Regisztrálja a függőség tulajdonság típusának is használhatja a DependencyPropertyKey hívások &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;és &lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;osztály logikája, módosítsa a tulajdonság értékét.&lt;/xref:System.Windows.DependencyObject.ClearValue%2A&gt; &lt;/xref:System.Windows.DependencyObject.SetValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If permitted by the access level of the key, related classes can use the key and the dependency property also.</source>
          <target state="translated">Ha a kulcs hozzáférési szintjét, kapcsolódó osztályok is használhatja a kulcs és a függőség tulajdonság.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</source>
          <target state="translated">Például a kulcs megjelölése belső deklarálhatja, és egyéb típusú belül ugyanaz a szerelvény is beállíthatja, hogy függőség tulajdonság.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DependencyPropertyKey returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</source>
          <target state="translated">A csak olvasható tulajdonság regisztrációjának által visszaadott DependencyPropertyKey nem közzé kell tenni, ugyanis a kulcs teszi ki a tulajdonság állítható be, így defeating regisztrálásával a csak olvasható függőségi tulajdonságként pontot.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, exposing the key causes a mismatch between the available dependency property behaviors and its <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> property wrapper implementations, which is bad class design.</source>
          <target state="translated">Is, teszi ki a kulcs hatására nem egyezik a rendelkezésre álló függőség tulajdonság viselkedések és annak <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> tulajdonság burkoló implementációkban rossz osztály Tervező.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of exposing the key itself, you should instead expose the &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt; value of the DependencyPropertyKey as a <ph id="ph1">`public static readonly`</ph>&lt;xref:System.Windows.DependencyProperty&gt; on your class.</source>
          <target state="translated">Ahelyett, hogy csökkenjen maga a kulcs, érdemes inkább teszi ki a &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt;, DependencyPropertyKey értékének egy <ph id="ph1">`public static readonly`</ph> &lt;xref:System.Windows.DependencyProperty&gt;a a osztályhoz&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</source>
          <target state="translated">Ez lehetővé teszi, hogy a tulajdonság vissza egy érvényes függőségi tulajdonságazonosító egyes tulajdonság rendszer műveletek, például a helyi számbavétele értékeket.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the identifier thus obtained does not have the full capabilities of a &lt;xref:System.Windows.DependencyProperty&gt; for many property system operations.</source>
          <target state="translated">Az így kapott azonosító nem rendelkezik a szolgáltatás összes funkciójáról a egy &lt;xref:System.Windows.DependencyProperty&gt;számos tulajdonság rendszer művelethez.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</source>
          <target state="translated">Lekérdezi a speciális írásvédett függőségi tulajdonságazonosító társított függőségi tulajdonság azonosítója.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DependencyProperty value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</source>
          <target state="translated">A DependencyProperty érték engedélyezi a közös tulajdonság rendszer műveletekbe egyes azonos kapcsolatok használt írható-olvasható függőségi tulajdonságok részt venni a csak olvasható tulajdonság azonosítója.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to implement the get property accessor for a read-only dependency property, you should create and expose a &lt;xref:System.Windows.DependencyProperty&gt; identifier on your class.</source>
          <target state="translated">A get tulajdonságelérő egy csak olvasható függőségi tulajdonság esetében megvalósításához, hozzon létre, és teszi közzé a &lt;xref:System.Windows.DependencyProperty&gt;azonosítója a az osztályhoz.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This serves two purposes:      -   Your own class needs the &lt;xref:System.Windows.DependencyProperty&gt; identifier in order to implement the get accessor for the property wrapper.</source>
          <target state="translated">Ez kétféle célt szolgál: - a saját osztály kell a &lt;xref:System.Windows.DependencyProperty&gt;azonosítója a tulajdonság burkoló a "get" leírója megvalósításához.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the &lt;xref:System.Windows.DependencyProperty&gt; as a parameter for the &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; call that implements the get accessor.</source>
          <target state="translated">Használja a &lt;xref:System.Windows.DependencyProperty&gt;paramétereként a &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;hívás, amely a "get" elérő.&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.DependencyProperty&gt; identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</source>
          <target state="translated">- &lt;xref:System.Windows.DependencyProperty&gt;azonosítók teszi közzé a függőség tulajdonság a tulajdonság rendszerhez, úgy, hogy más módszerekkel támaszkodó metaadat-e hozzáférési engedélye a szabványos formában.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, if you called &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; on some &lt;xref:System.Windows.DependencyObject&gt; and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your &lt;xref:System.Windows.DependencyProperty&gt; value rather than the key.</source>
          <target state="translated">Például ha hívott &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;egyes &lt;xref:System.Windows.DependencyObject&gt;helyileg tulajdonságainak beállítása (azonosítók és értékek) az enumerációs azonosítóját, és a csak olvasható függőség tulajdonság visszaadott a &lt;xref:System.Windows.DependencyProperty&gt;ahelyett, hogy a kulcs értékét.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not exposing a &lt;xref:System.Windows.DependencyProperty&gt; identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</source>
          <target state="translated">Nem jelentkezik, mintha egy &lt;xref:System.Windows.DependencyProperty&gt;azonosítója nem biztonságosabbá a csak olvasható függőség tulajdonság bármely olyan módon, így csak a tulajdonsághoz több helyen levő, mind a későbbi származtatott osztályok és osztálypéldányok igénylő műveletek.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To expose the  &lt;xref:System.Windows.DependencyProperty&gt; identifier on your class, you call DependencyProperty directly on your key.</source>
          <target state="translated">Teszi közzé a &lt;xref:System.Windows.DependencyProperty&gt;a osztály azonosítója, meghívja a DependencyProperty közvetlenül a kulcsot a.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this value to create a <ph id="ph1">`public static readonly`</ph>&lt;xref:System.Windows.DependencyProperty&gt; identifier on the class, which parallels the &lt;xref:System.Windows.DependencyPropertyKey&gt;.</source>
          <target state="translated">Ez az érték létrehozásához használja a <ph id="ph1">`public static readonly`</ph> &lt;xref:System.Windows.DependencyProperty&gt;a osztály, amely a &lt;xref:System.Windows.DependencyPropertyKey&gt;.&lt;/xref:System.Windows.DependencyPropertyKey&gt; parallels azonosítója&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The relevant dependency property identifier.</source>
          <target state="translated">A megfelelő függőség tulajdonság azonosítója.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</source>
          <target state="translated">Felülbírálja a függőség tulajdonság azonosítóval rendelkezik olvasási függőség tulajdonság metaadatai.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</source>
          <target state="translated">Egy csak olvasható függőség tulajdonság a metaadatok felülbírálása hasonló okokból felülbírálása metaadatainak az olvasási és írási függőség tulajdonság szerint történik, és csak olyan hozzáférési kulcs szinten, mert a metaadatok megadott viselkedések módosíthatja a készlet beállításokat (az alapértelmezett érték, például).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</source>
          <target state="translated">Az olvasási és írási függőségi tulajdonságok esetében, felülbírálása egy csak olvasható függőség tulajdonság a metaadatok csak történjen (Ez megfelel az objektumokat, amelyeket regisztrálni a tulajdonság olyan specifikus példányai létrehozásának idő) tulajdonságot rendszerenként helyezés használatban tulajdonság előtt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or equivalent initialization for that class.</source>
          <target state="translated">OverrideMetadata hívások csak belül a statikus konstruktorok magát, mint a biztosító típusú hajtható végre a <ph id="ph1">`forType`</ph> ezen metódus, vagy amely egyenértékű inicializálási paramétere.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method effectively forwards to the &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method, passing the &lt;xref:System.Windows.DependencyPropertyKey&gt; instance as the key parameter.</source>
          <target state="translated">Ez a módszer hatékonyan továbbítja a &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;metódust, hogy a &lt;xref:System.Windows.DependencyPropertyKey&gt;példányához, a kulcs paramétere.&lt;/xref:System.Windows.DependencyPropertyKey&gt; &lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The type on which this dependency property exists and metadata should be overridden.</source>
          <target state="translated">Amikor a függőség tulajdonság létezik-e, és metaadatok felül kell típusa.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Metadata supplied for this type.</source>
          <target state="translated">Ehhez a típushoz megadott metaadatok.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attempted metadata override on a read-write dependency property (cannot be done using this signature).</source>
          <target state="translated">Kísérlet történt a metaadat-felülbírálásnak írható-olvasható függőség tulajdonság alapján (nem végezhető el az aláírás használatával).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Metadata was already established for the property as it exists on the provided type.</source>
          <target state="translated">Metaadatok már létrejött a tulajdonsághoz, mert a megadott típus létezik.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>