<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff886eeb61ea08b7a181aae86ece61d64676c147</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ArgIterator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52d4b7698781521865936db3977742b13b2574cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c863d7934db9fb2827f0fc39902e5226a406636</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.</source>
          <target state="translated">可変長の引数リストを表します。つまり、関数のパラメーターを受け取る可変個の引数。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list.</source>
          <target state="translated">コンパイラを記述する開発者は、引数リストで、必須およびオプションの引数を列挙するのに ArgIterator 構造体を使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ArgIterator structure is not generally useful for applications other than compilers.</source>
          <target state="translated">ArgIterator の構造はコンパイラ以外のアプリケーションの一般的に便利です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language.</source>
          <target state="translated">ArgIterator 構造内の機能は通常、特定のプログラミング言語の構文では非表示します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis ("...") at the end of the argument list.</source>
          <target state="translated">たとえば、C++ プログラミング言語では、引数リストの末尾に省略記号 ([...]) を指定することで、可変長の引数リストを宣言します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.</source>
          <target state="translated">可変長パラメーターにアクセスするための開発言語が直接サポートを指定しない場合に、主に、ArgIterator 構造体の使用をお勧めします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure using the specified argument list.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定した引数リストを使用して構造体します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the first optional argument.</source>
          <target state="translated">新しい&lt;xref:System.ArgIterator&gt;オブジェクトは、最初の省略可能な引数から引数リストを列挙します&lt;/xref:System.ArgIterator&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
          <target state="translated">必須およびオプションの引数で構成される引数リスト。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure using the specified argument list and a pointer to an item in the list.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>一覧で指定した引数リストと項目へのポインターを使用して構造体します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the argument specified by <ph id="ph1">`ptr`</ph>, or the first mandatory argument if <ph id="ph2">`ptr`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">新しい&lt;xref:System.ArgIterator&gt;オブジェクトによって指定された引数から引数リストを列挙する<ph id="ph1">`ptr`</ph>、または最初の必須引数場合<ph id="ph2">`ptr`</ph>は<ph id="ph3">`null`</ph>&lt;/xref:System.ArgIterator&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
          <target state="translated">必須およびオプションの引数で構成される引数リスト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to the argument in <ph id="ph1">`arglist`</ph> to access first, or the first mandatory argument in <ph id="ph2">`arglist`</ph> if <ph id="ph3">`ptr`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">引数へのポインター<ph id="ph1">`arglist`</ph>最初、または最初の必須引数にアクセスする<ph id="ph2">`arglist`</ph>場合<ph id="ph3">`ptr`</ph>は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Concludes processing of the variable-length argument list represented by this instance.</source>
          <target state="translated">このインスタンスで表される、可変長の引数リストの処理を終了します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Conceptually, End concludes the processing of a variable-length argument list.</source>
          <target state="translated">概念的には、終了は、可変長の引数リストの処理を終了します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, this method has no actual implementation; the End method body is empty.</source>
          <target state="translated">ただし、このメソッドは実際の実装です。終了メソッドの本体が空です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.</source>
          <target state="translated">このメソッドは可変長の引数リストの論理的な処理が終了する位置を示すためにマーカーとして、コードで使用できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The End method corresponds to the <ph id="ph1">`va_end`</ph> method in the C standard library.</source>
          <target state="translated">End メソッドに対応して、 <ph id="ph1">`va_end`</ph> C 標準ライブラリ内のメソッドです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method is not supported, and always throws &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">このメソッドはサポートされていませんし、 &lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt;は常にスロー</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An object to be compared to this instance.</source>
          <target state="translated">このインスタンスと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This comparison is not supported.</source>
          <target state="translated">この比較はサポートされていません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
          <target state="translated">値は返されません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method is not supported.</source>
          <target state="translated">このメソッドがサポートされていません。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the hash code of this object.</source>
          <target state="translated">このオブジェクトのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list.</source>
          <target state="translated">可変長の引数リスト内には、次の引数を返します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The iterator is automatically advanced to the next argument.</source>
          <target state="translated">反復子は次の引数に自動的に前進します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next argument as a <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">次の引数として、 <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
          <target state="translated">リストの末尾を越えるしようとしました。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list that has a specified type.</source>
          <target state="translated">指定された型を持つ可変長の引数リストで次の引数を返します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The iterator is automatically advanced to the next argument.</source>
          <target state="translated">反復子は次の引数に自動的に前進します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A runtime type handle that identifies the type of the argument to retrieve.</source>
          <target state="translated">取得する引数の型を識別するランタイム型ハンドル。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The next argument as a <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">次の引数として、 <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
          <target state="translated">リストの末尾を越えるしようとしました。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The pointer to the remaining arguments is zero.</source>
          <target state="translated">残りの引数へのポインターは&amp;0; です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the type of the next argument.</source>
          <target state="translated">次の引数の型を返します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method does not advance the iterator to the next argument.</source>
          <target state="translated">このメソッドでは、次の引数に、反復子は変化しません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>GetNextArgType returns the type of the argument as specified in the calling function.</source>
          <target state="translated">GetNextArgType では、呼び出し元の関数で指定された引数の型を返します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if an argument is type &lt;xref:System.String&gt;, but the calling function specifies the argument as type &lt;xref:System.Object&gt;, GetNextArgType reports the argument as type &lt;xref:System.Object&gt;.</source>
          <target state="translated">たとえば、次の引数が型では&lt;xref:System.String&gt;、呼び出し元の関数を&lt;xref:System.Object&gt;GetNextArgType 報告&lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt;の種類として表された引数は&lt;/xref:System.Object&gt;入力引数を指定しますが、&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of the next argument.</source>
          <target state="translated">次の引数の型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the number of arguments remaining in the argument list.</source>
          <target state="translated">引数リスト内の残りの引数の数を返します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The number of remaining arguments.</source>
          <target state="translated">残りの引数の数。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>