<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdfb1060c05d77935d9a1b388048e1cfd603184c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.DesignerLoader.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad5a01c12c921fa425d6ab012d57dca2c6c2bf42</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34c09b70f02ffb0898c4c1988d5911e5d3d3cc7b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a basic designer loader interface that can be used to implement a custom designer loader.</source>
          <target state="translated">カスタム デザイナー ローダーを実装するために使用する基本デザイナー ローダーのインターフェイスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>DesignerLoader can be implemented to support custom loading of a designer and designer components.</source>
          <target state="translated">デザイナーとデザイナーのコンポーネントのカスタムの読み込みをサポートするためには、DesignerLoader を実装できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A designer loader is also responsible for writing changes to an open document back to the storage the loader used when loading the document after the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader.Flush%2A&gt; method is called.</source>
          <target state="translated">デザイナー ローダーは、記憶域に開いているドキュメントの後にドキュメントを読み込むときにローダー変更内容を書き込む担当も、&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader.Flush%2A&gt;メソッドが呼び出されます&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, the Visual Studio development environment creates its own variety of DesignerLoader that can load basic designer projects.</source>
          <target state="translated">既定では、Visual Studio 開発環境は独自さまざまな基本的なデザイナーのプロジェクトを読み込むことができる DesignerLoader を作成します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To create a custom designer loader, you must inherit from and implement the abstract DesignerLoader class.</source>
          <target state="translated">カスタム デザイナー ローダーを作成するから継承し、DesignerLoader、抽象クラスを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You cannot directly instantiate DesignerLoader, as it has no public constructor.</source>
          <target state="translated">直接、パブリック コンス トラクターがあるないために、DesignerLoader がインスタンス化することはできません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad%2A&gt; is invoked, the designer loader loads the design document, displays the designer surface using the &lt;xref:System.ComponentModel.Design.IDesignerHost&gt; interface, and calls &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A&gt; on the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt; interface when done.</source>
          <target state="translated">ときに&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad%2A&gt;が呼び出されると、デザイナー ローダー デザイン ドキュメントを読み込みます、デザイナー画面を使用して、表示、&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;インターフェイス、および呼び出し&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A&gt;上、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;インターフェイスの設定が終わったら&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A&gt;&lt;/xref:System.ComponentModel.Design.IDesignerHost&gt;&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt; implementation is usually the same class that implements &lt;xref:System.ComponentModel.Design.IDesignerHost&gt;.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;実装が同じに&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;。&lt;/xref:System.ComponentModel.Design.IDesignerHost&gt;を実装するクラスに通常&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;は、。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.DesignerLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.DesignerLoader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Begins loading a designer.</source>
          <target state="translated">デザイナーの読み込みを開始します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt; that is passed to the <ph id="ph1">`host`</ph> parameter is typically the same object as the designer host.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;に渡される、<ph id="ph1">`host`</ph>パラメーターは、通常はデザイナー ホストと同じオブジェクトです&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Through this reference to the loader host, the designer loader can reload the design document and indicate that it has finished loading the design document.</source>
          <target state="translated">ローダーのホストにこの参照を使用してデザイナー ローダーはデザイン ドキュメントを再読み込みし、デザイン ドキュメントの読み込みが完了したことを指定できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The loader host through which this loader loads components.</source>
          <target state="translated">ローダー ホストがこのローダーは、コンポーネントを読み込みます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.DesignerLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">によって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.DesignerLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Call Dispose when you are finished using the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;の使用が終了したときに、Dispose を呼び出す</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Dispose method leaves the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt; in an unusable state.</source>
          <target state="translated">Dispose メソッドは、&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;使用不可の状態&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After calling Dispose, you must release all references to the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt; was occupying.</source>
          <target state="translated">Dispose を呼び出した後は、すべての参照を解放する必要があります、&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;ガベージ コレクターがメモリを再利用できるようにする、&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;占有されていた&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;の最後の参照を解放する前に常に呼び出しが破棄。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、&lt;xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;オブジェクトの<ph id="ph1">`Finalize`</ph>メソッド&lt;/xref:System.ComponentModel.Design.Serialization.DesignerLoader&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Writes cached changes to the location that the designer was loaded from.</source>
          <target state="translated">書き込みが、デザイナーがから読み込まれた場所の変更をキャッシュします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The designer host calls this method periodically to ensure that changes made to the document were saved by the designer loader.</source>
          <target state="translated">デザイナーのホストは、ドキュメントに加えられた変更が、デザイナー ローダーによって保存されたことを確認するには、定期的にこのメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method allows designer loaders to implement an asynchronous write scheme to improve performance.</source>
          <target state="translated">このメソッドは、パフォーマンスを向上させるために非同期の書き込みスキームを実装するデザイナー ローダーを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default implementation of this method does nothing.</source>
          <target state="translated">このメソッドの既定の実装では、何も行われません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the loader is currently loading a document.</source>
          <target state="translated">ローダーが現在のドキュメントを読み込んでいるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the loader is currently loading a document; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在、ローダーがドキュメントを読み込んでいる場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>