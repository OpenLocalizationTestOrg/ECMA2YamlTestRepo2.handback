<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99f7fd01ed185424160e7ef9e3460c98d01ceada</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.MessageQueueTransaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19e477193aba95a235af738dcbd4fd27adf2d249</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e43dbd96f8dd40b5883f6c11e03d22dd2b1525fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a Message Queuing internal transaction.</source>
          <target state="translated">メッセージ キューの内部トランザクションを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To send or receive a message as part of a transaction, you can use the MessageQueueTransaction class to create a transaction and pass it to an overload of the &lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt; method or the &lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt; method that takes a <ph id="ph1">`transaction`</ph> parameter.</source>
          <target state="translated">トランザクションの一部としてメッセージを送受信するトランザクションを作成しのオーバー ロードに渡す MessageQueueTransaction クラスを使用することができます、&lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt;メソッドまたは&lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt;を受け取るメソッド、<ph id="ph1">`transaction`</ph>パラメーター&lt;/xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName&gt; &lt;/xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Messages sent as part of a transaction must be sent to transactional queues.</source>
          <target state="translated">トランザクションの一部として送信されたメッセージは、トランザクション キューに送信する必要があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Messages received from transactional queues must be received using a specified transaction.</source>
          <target state="translated">指定したトランザクションを使用して、トランザクション キューから受信したメッセージを受信する必要があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, you can receive messages with a specified identifier or specified correlation identifier.</source>
          <target state="translated">加え、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドを指定した識別子または指定された関連付け識別子とメッセージを受信することができます&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt; and &lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt; methods for more information about selectively receiving messages from transactional queues.</source>
          <target state="translated">参照してください、&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;と&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;方法の詳細については、選択的にトランザクション キューからメッセージを受信します&lt;/xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;&lt;/xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Messages sent to transactional queues are removed if the transaction is committed.</source>
          <target state="translated">トランザクションがコミットされた場合、トランザクション キューに送信されるメッセージは削除されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</source>
          <target state="translated">同様に、トランザクションがロールバックされた場合、トランザクション キューから受信したメッセージはキューに返されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you instantiate a MessageQueueTransaction and pass it to an applicable overload of the &lt;xref:System.Messaging.MessageQueue.Send%2A&gt; method or &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</source>
          <target state="translated">MessageQueueTransaction のインスタンスを作成し、&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;メソッドまたは&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドを非トランザクション キューにメッセージを送信またはメソッドの非トランザクション キューからメッセージを受信「間違ったトランザクションの使用率」を示す例外をスロー&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue.Send%2A&gt;の該当するオーバー ロードに渡す場合</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[Visual Basic]       MessageQueueTransaction is threading apartment aware, so if your apartment state is <ph id="ph1">`STA`</ph>, you cannot use the transaction in multiple threads.</source>
          <target state="translated">[Visual Basic]      MessageQueueTransaction はスレッドのアパートメントに対応する、ので、アパートメント状態が<ph id="ph1">`STA`</ph>、複数のスレッドで、トランザクションを使用することはできません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Basic sets the state of the main thread to <ph id="ph1">`STA`</ph>, so you must apply the &lt;xref:System.MTAThreadAttribute&gt; in the <ph id="ph2">`Main`</ph> subroutine.</source>
          <target state="translated">Visual Basic にメイン スレッドの状態を設定する<ph id="ph1">`STA`</ph>適用する必要がありますので、&lt;xref:System.MTAThreadAttribute&gt;で、<ph id="ph2">`Main`</ph>サブルーチン&lt;/xref:System.MTAThreadAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Otherwise, sending a transactional message using another thread throws a &lt;xref:System.Messaging.MessageQueueException&gt; exception.</source>
          <target state="translated">別のスレッドを使用してトランザクション メッセージを返しますそれ以外の場合、送信、&lt;xref:System.Messaging.MessageQueueException&gt;例外です。&lt;/xref:System.Messaging.MessageQueueException&gt; 。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You apply the &lt;xref:System.MTAThreadAttribute&gt; by using the following fragment.</source>
          <target state="translated">適用する、&lt;xref:System.MTAThreadAttribute&gt;次のフラグメントを使用しています&lt;/xref:System.MTAThreadAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;System.MTAThreadAttribute&gt;    public sub Main()   ```</ph>      <ph id="ph2">```vb#      ```</ph></source>
          <target state="translated"><ph id="ph1">```   &lt;System.MTAThreadAttribute&gt;    public sub Main()   ```</ph>      <ph id="ph2">```vb#      ```</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This constructor sets the &lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt; property to <ph id="ph1">`Initialized`</ph>.</source>
          <target state="translated">このコンス トラクターを設定、&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;プロパティを<ph id="ph1">`Initialized`</ph>&lt;/xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Rolls back the pending internal transaction.</source>
          <target state="translated">保留中の内部トランザクションをロールバックします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Abort marks the unsuccessful completion of a process begun at a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">中止&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;への呼び出しで開始されたプロセスが正常に完了をマークします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; in the <ph id="ph2">`Try`</ph> clause, and a call to Abort in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常への呼び出し&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;内で、<ph id="ph1">`Try...Catch`</ph>への呼び出しを配置する例外処理ブロック&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;で、<ph id="ph2">`Try`</ph>句、および中止操作の呼び出し、<ph id="ph3">`Catch`</ph>句&lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Abort rolls back the entire transaction.</source>
          <target state="translated">中止は、トランザクション全体をロールバックします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">これにより、送信または受信&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;への呼び出し後のすべてのメッセージが含まれます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The internal transaction you are attempting to roll back has not started.</source>
          <target state="translated">ロールバックしようとして内部トランザクションが開始されていません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">メッセージ キューの内部エラーが発生します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Begins a new Message Queuing internal transaction.</source>
          <target state="translated">新しいメッセージがキューの内部トランザクションを開始します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Begin marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</source>
          <target state="translated">処理の開始をコミットまたはロールバックされたトランザクションが成功したが、マークを開始します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If an exception occurs during processing, the entire transaction is rolled back.</source>
          <target state="translated">処理中に例外が発生した、トランザクション全体がロールバックされます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to Begin.</source>
          <target state="translated">これには、送信または受信開始への呼び出し後のすべてのメッセージが含まれます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to Begin within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; in the <ph id="ph2">`Try`</ph> clause, and a call to &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常は、内の開始を呼び出し、<ph id="ph1">`Try...Catch`</ph>への呼び出しを配置する例外処理ブロック&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;で、<ph id="ph2">`Try`</ph>を呼び出すと、句&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;で、<ph id="ph3">`Catch`</ph>句&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The transaction has already been started.</source>
          <target state="translated">トランザクションは既に開始されています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">メッセージ キューの内部エラーが発生します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Commits a pending internal transaction.</source>
          <target state="translated">保留中の内部トランザクションをコミットします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Commit marks the successful completion of processing begun at a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">コミット&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;への呼び出しで開始された処理が正常に完了をマークします。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If an exception occurs between the call the &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; and the call to Commit, the entire transaction is rolled back.</source>
          <target state="translated">呼び出しの間、例外が発生した場合、&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;されコミットへの呼び出し、トランザクション全体がロールバックされます&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This includes all messages sent or received after the call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;.</source>
          <target state="translated">これにより、送信または受信&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;への呼び出し後のすべてのメッセージが含まれます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically, one makes a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; within a <ph id="ph1">`Try...Catch`</ph> exception-handling block, putting a call to Commit in the <ph id="ph2">`Try`</ph> clause, and a call to &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt; in the <ph id="ph3">`Catch`</ph> clause.</source>
          <target state="translated">通常への呼び出し&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;内で、<ph id="ph1">`Try...Catch`</ph>例外処理ブロック、コミットが存在する、<ph id="ph2">`Try`</ph>を呼び出すと、句&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;で、<ph id="ph3">`Catch`</ph>句&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The transaction you are trying to commit has not started.</source>
          <target state="translated">コミットしようとしているトランザクションが開始されていません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">メッセージ キューの内部エラーが発生します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">によって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageQueueTransaction&gt; to be reallocated for other purposes.</source>
          <target state="translated">Dispose を呼び出すことによりで使用されるリソース、&lt;xref:System.Messaging.MessageQueueTransaction&gt;を他の目的に再割り当てされます&lt;/xref:System.Messaging.MessageQueueTransaction&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Dispose`</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any pending internal transactions are rolled back by Dispose.</source>
          <target state="translated">保留中の内部トランザクションが Dispose がロールバックされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;呼び出す<ph id="ph1">`Dispose`</ph>で<ph id="ph2">`disposing`</ph>'éý'<ph id="ph3">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageQueueTransaction&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.Messaging.MessageQueueTransaction&gt;参照。&lt;/xref:System.Messaging.MessageQueueTransaction&gt; 。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Releases the resources held by the current instance.</source>
          <target state="translated">現在のインスタンスによって保持されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Finalize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの Finalize メソッドは自動的に呼び出される、ガベージ コレクション中にへの呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Finalize メソッドおよびデストラクター<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>、<bpt id="p2">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>、および<bpt id="p3">[</bpt>Finalize メソッドをオーバーライドする<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the status of the transaction.</source>
          <target state="translated">トランザクションの状態を取得します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When an instance of the &lt;xref:System.Messaging.MessageQueueTransaction&gt; class has been created, the Status is set by the constructor to <ph id="ph1">`Initialized`</ph>.</source>
          <target state="translated">インスタンス、&lt;xref:System.Messaging.MessageQueueTransaction&gt;クラスが作成されたら、コンス トラクターによって状態が設定されて<ph id="ph1">`Initialized`</ph>&lt;/xref:System.Messaging.MessageQueueTransaction&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>After a call to &lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt; but before a call to &lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt; or &lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;, the Status is <ph id="ph1">`Pending`</ph>.</source>
          <target state="translated">呼び出しの後に&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;への呼び出しの前に&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;または&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;、状態が<ph id="ph1">`Pending`</ph>&lt;/xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;&lt;/xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionStatus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>トランザクションがコミット済み、中止、初期化、かが保留されているかどうかを示す値。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>