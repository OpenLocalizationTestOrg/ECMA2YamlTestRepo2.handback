<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad45d5350d7ce0512a3ddb042ebe116819840d05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.DependencyProperty.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d3012c503074ba78e9c00deca385d4525e993f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e77660bde0953d13f802b828789b2dd37b1699e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</source>
          <target state="translated">などのメソッドによって設定できるプロパティ、スタイル、データ バインディング、アニメーション、および継承を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A DependencyProperty supports the following capabilities in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:      -   The property can be set in a style.</source>
          <target state="translated">DependencyProperty では、次の機能をサポートしている<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:-スタイルのプロパティを設定できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   The property can be set through data binding.</source>
          <target state="translated">-プロパティは、データ バインディングによって設定できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about data binding dependency properties, see <bpt id="p1">[</bpt>How to: Bind the Properties of Two Controls<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">データ バインディングの依存関係プロパティの詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: プロパティの&amp;2; つのコントロールをバインド<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>-   The property can be set with a dynamic resource reference.</source>
          <target state="translated">動的リソース参照では、プロパティを設定できます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   The property can inherit its value automatically from a parent element in the element tree.</source>
          <target state="translated">-プロパティは、要素ツリーの親要素からその値を自動的に継承できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>プロパティ値の継承<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>-   The property can be animated.</source>
          <target state="translated">-プロパティをアニメーション化することができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アニメーションの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-   The property can report when the previous value of the property has been changed and the property value can be coerced.</source>
          <target state="translated">-プロパティは、プロパティの前の値が変更され、プロパティの値を強制的に変換できる場合に報告できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>依存関係プロパティのコールバックと検証<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>-   The property reports information to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, such as whether changing a property value should require the layout system to recompose the visuals for an element.</source>
          <target state="translated">-プロパティ情報に報告<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>などかどうか、ビジュアル要素を再構成するには、レイアウト システムを要求プロパティの値を変更する必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   The property receives support in the <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>.</source>
          <target state="translated">-プロパティのサポートの受信、<ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the property can be edited in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
          <target state="translated">プロパティの編集など、<bpt id="p1">**</bpt>プロパティ<ept id="p1">**</ept>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To learn more about dependency properties, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">依存関係プロパティの詳細については、次を参照してください。<bpt id="p1">[</bpt>依存関係プロパティの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</source>
          <target state="translated">上記の機能をサポートするためにカスタム型のプロパティをする場合は、依存関係プロパティを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To learn how to create custom dependency properties, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">カスタム依存関係プロパティを作成する方法についてを参照してください。<bpt id="p1">[</bpt>依存関係プロパティをカスタム<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An attached property is a property that enables any object to report information to the type that defines the attached property.</source>
          <target state="translated">添付プロパティは、添付プロパティを定義する型情報を報告する任意のオブジェクトを可能にするプロパティです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, any type that inherits from &lt;xref:System.Windows.DependencyObject&gt; can use an attached property regardless of whether the type inherits from the type that defines the property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、任意の型から継承する&lt;xref:System.Windows.DependencyObject&gt;プロパティを定義する型から型を継承するかどうかに関係なく、添付プロパティを使用できます&lt;/xref:System.Windows.DependencyObject&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An attached property is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> language.</source>
          <target state="translated">添付プロパティは、の機能、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>言語です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To set an attached property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, use the <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> syntax.</source>
          <target state="translated">接続されているプロパティを設定する<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>を使用して、 <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept>構文です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An example of an attached property is the &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">添付プロパティの例は、&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you want to create a property that can be used on all &lt;xref:System.Windows.DependencyObject&gt; types, then you should create an attached property.</source>
          <target state="translated">すべてで使用できるプロパティを作成するかどうかは&lt;xref:System.Windows.DependencyObject&gt;型は、次に、添付プロパティを作成する必要があります&lt;/xref:System.Windows.DependencyObject&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To learn more about attached properties, including how to create them, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">添付プロパティの場合、それらを作成する方法などの詳細についてを参照してください。<bpt id="p1">[</bpt>添付プロパティの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`dependencyPropertyName`</ph>    A string that specifies the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt; of the desired dependency property.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<ph id="ph2">`dependencyPropertyName`</ph>を指定する文字列、&lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;の必要な依存関係プロパティ&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;。      </target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.)       <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></source>
          <target state="translated">これは、前に XML 名前空間プレフィックス プロパティが既定の XML 名前空間にない場合 (詳細については、「 <bpt id="p1">[</bpt>XAML 名前空間と WPF XAML のマッピングの Namespace<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>)。      <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A string that specifies an owner type of a dependency property, a dot (.), then the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">ドット (.)、し&lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;では、依存関係プロパティの所有者の種類を指定する文字列</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ownerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`ownerType`</ph>XML 名前空間プレフィックスによっても前ことができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the <ph id="ph1">`TargetType`</ph> is not yet known.</source>
          <target state="translated">この使用法は遅延バインドのスタイルとテンプレート、ためにコンテキストを解析するため、依存関係プロパティの所有者を指定する必要がありますに特定の<ph id="ph1">`TargetType`</ph>が未だ不明です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`attachedPropertyName`</ph>    A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyName`</ph>ドット (.)、添付プロパティの名前では、添付プロパティの所有者を指定する文字列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph>XML 名前空間プレフィックスによっても前ことができます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered.</source>
          <target state="translated">既に登録されている依存関係プロパティの所有者として別の型を追加します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">このメソッドは、その特定の依存関係プロパティを最初に登録していない型に依存関係プロパティを認識するプロパティのシステムを使用します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically, AddOwner is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</source>
          <target state="translated">通常、AddOwner は既にマネージ クラスの継承によってその依存関係プロパティを公開しないクラスに依存関係プロパティを追加する使用 (クラスの継承、派生クラスによって継承されるラッパーのプロパティを原因となるをためは一般的なメンバー テーブルにアクセスできる依存関係プロパティ既に)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>AddOwner enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</source>
          <target state="translated">AddOwner により、その依存関係プロパティを最初に登録していない型に依存関係プロパティを認識するプロパティ システムです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This signature does not allow for specifying metadata.</source>
          <target state="translated">メタデータを指定するのには、この署名することはできません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you use this method, the metadata is automatically generated for the new &lt;xref:System.Windows.DependencyProperty&gt; and its owner type.</source>
          <target state="translated">このメソッドを使用すると、メタデータが、新しい自動的に生成&lt;xref:System.Windows.DependencyProperty&gt;とその所有者の型&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</source>
          <target state="translated">自動生成されたメタデータは、このプロパティが定義されている基本型のすべてからマージされたメタデータの結果を示します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If no merged metadata is available, then the default metadata for the property is used.</source>
          <target state="translated">マージされたメタデータがない場合、使用可能な場合は、プロパティの既定のメタデータが使用されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the property is registered by using the &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; method, then the default metadata is the same as the metadata that is created when &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; was called.</source>
          <target state="translated">使用して、プロパティが登録されている場合、&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;メソッド後の既定のメタデータと同じ場合は、作成するメタデータ&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;が呼び出されました&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;xref:System.Windows.PropertyMetadata&gt; object is created with the &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; property set to the property type's default and all other properties of the &lt;xref:System.Windows.PropertyMetadata&gt; is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">それ以外の場合、&lt;xref:System.Windows.PropertyMetadata&gt;でオブジェクトを作成、&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;プロパティがプロパティの型の既定値を他のすべてのプロパティの設定、&lt;xref:System.Windows.PropertyMetadata&gt;に設定されている<ph id="ph1">`null`</ph>&lt;/xref:System.Windows.PropertyMetadata&gt;&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; signature if you want to provide metadata for the version of the dependency property as added to the provided type.</source>
          <target state="translated">使用して、&lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;署名を指定した型に追加されると、依存関係プロパティのバージョンのメタデータを提供する場合&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</source>
          <target state="translated">このメソッドの戻り値は通常、宣言して依存関係プロパティの識別子を格納することにより、依存関係プロパティを公開に使用されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The identifier provides access to the dependency property if you want to call property system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> against the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">識別子には、依存関係プロパティへのアクセスをプロパティ システムに呼び出したい<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>依存関係プロパティに対して特には存在する追加の所有者のクラスにします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">元の所有者と追加された所有者の両方に同じプロパティ名は、同様の機能を示すために使用する必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You should use the &lt;xref:System.Windows.DependencyProperty&gt; return value of the AddOwner method to define the dependency property identifier, and also to declare <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner.</source>
          <target state="translated">使用する必要があります、&lt;xref:System.Windows.DependencyProperty&gt;依存関係プロパティの識別子を定義し、宣言の AddOwner メソッドの戻り値<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>AddOwner を使用して型に追加される依存関係プロパティのプロパティのラッパー&lt;/xref:System.Windows.DependencyProperty&gt; 。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The AddOwner methodology recommended above is used when creating the dependency properties that are declared within <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">内で宣言されている依存関係プロパティを作成するときに、前の推奨される AddOwner 手法が使用される<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">たとえば、両方&lt;xref:System.Windows.Controls.Border&gt;と&lt;xref:System.Windows.Controls.Control&gt;定義、<ph id="ph1">`BorderBrush`</ph>類似した機能の依存関係プロパティです&lt;/xref:System.Windows.Controls.Control&gt;&lt;/xref:System.Windows.Controls.Border&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling AddOwner based on the original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;定義、 <ph id="ph1">`BorderBrush`</ph> AddOwner を呼び出すことによって、プロパティ システムにプロパティが元の所有者に基づく&lt;xref:System.Windows.Controls.Border&gt;とその登録&lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;依存関係プロパティの識別子&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt;&lt;/xref:System.Windows.Controls.Border&gt;。&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The AddOwner return value is then used to establish a new static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">AddOwner 返す値は、新しい静的なを確立するために使用し、&lt;xref:System.Windows.DependencyProperty&gt;フィールド (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) 追加の所有者にそのプロパティの<ph id="ph1">`BorderBrush`</ph>プロパティ ラッパーが宣言されても&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type to add as an owner of this dependency property.</source>
          <target state="translated">この依存関係プロパティの所有者として追加する型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">元への参照を<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>依存関係プロパティを識別する識別子。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">この識別子として追加するクラスによって公開するように、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フィールドです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</source>
          <target state="translated">既に登録されている依存関係プロパティの所有者として別の型を追加し、依存関係プロパティの依存関係プロパティのメタデータを提供するように、指定された所有者の型に存在します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">このメソッドは、その特定の依存関係プロパティを最初に登録していない型に依存関係プロパティを認識するプロパティのシステムを使用します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">このメソッドの戻り値は、追加の所有者クラス上に存在するように特に宣言して、依存関係プロパティを公開に使用されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">一般に、同様の機能を示すために、元の所有者と追加された所有者の両方に同じプロパティ名を使用してください。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It is good practice to expose the identifiers, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.</source>
          <target state="translated">同様に新しい識別子を公開することをお勧め<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;を使用して型に追加される依存関係プロパティのプロパティのラッパー</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; methodology recommended above is used when creating <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> declared within <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;前の推奨される方法を作成するときに使用<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>内で宣言された<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">たとえば、両方&lt;xref:System.Windows.Controls.Border&gt;と&lt;xref:System.Windows.Controls.Control&gt;定義、<ph id="ph1">`BorderBrush`</ph>類似した機能の依存関係プロパティです&lt;/xref:System.Windows.Controls.Control&gt;&lt;/xref:System.Windows.Controls.Border&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; on original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;定義、<ph id="ph1">`BorderBrush`</ph>プロパティを呼び出してプロパティのシステムを&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;元の所有者に&lt;xref:System.Windows.Controls.Border&gt;とその登録&lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;依存関係プロパティの識別子です&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt;&lt;/xref:System.Windows.Controls.Border&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; return value is then used to establish a static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;)for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;戻り値は、静的なを確立するために使用し、&lt;xref:System.Windows.DependencyProperty&gt;フィールド (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) 追加の所有者にそのプロパティの<ph id="ph1">`BorderBrush`</ph>プロパティ ラッパーが宣言されても&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt;&lt;/xref:System.Windows.DependencyProperty&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The added owner's dependency property identifier should be used for operations such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;。&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;などの操作で追加された所有者の依存関係プロパティの識別子を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.</source>
          <target state="translated">ただし、型または異なるメタデータを持つ所有者があるように追加されたクラスのインスタンスのいずれかに関係する型固有の操作を返すいなくても、期待どおりの結果、元 (いない追加の所有者の) &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;などのメソッドの呼び出しで依存関係プロパティの識別子が指定されました。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The metadata for the added owner is perpetuated by the AddOwner call itself, not necessarily referenced exclusively by the adding owner class identifier field.</source>
          <target state="translated">メタデータ、追加された所有者、AddOwner をそれ自体を呼び出す、必ずしも所有者クラス識別子フィールドの追加によってのみ参照できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Nevertheless, it is good practice to expose the  identifier, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner, because failing to do so creates disparity between the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> representations of your properties.</source>
          <target state="translated">いずれにしても、同様に新しい識別子を公開することをお勧めは<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>の間に不一致を作成するように失敗したため AddOwner を使用して型に追加される依存関係プロパティのプロパティのラッパー、<ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>と<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロパティの表現。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティ メタデータに結合されます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Any characteristics that were specified in the original base metadata will persist.</source>
          <target state="translated">元の基本のメタデータで指定された特性が保持されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">新しいメタデータに変更された特に特徴だけでは、基本のメタデータの特性を上書きします。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Some characteristics, such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, are replaced if they are specified in the new metadata.</source>
          <target state="translated">いくつかの特性など&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;、新しいメタデータに指定されている場合に置き換えられます&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">他のユーザーなど&lt;xref:System.Windows.PropertyChangedCallback&gt;、結合されます&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">最終的には、マージの動作によって異なりますので、ここで説明されている動作で使用される既存のプロパティのメタデータ クラス用に、上書きに使用されているプロパティのメタデータ型<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのメタデータ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>フレームワーク プロパティ メタデータ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The type to add as owner of this dependency property.</source>
          <target state="translated">この依存関係プロパティの所有者として追加する型。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The metadata that qualifies the dependency property as it exists on the provided type.</source>
          <target state="translated">指定した型に存在する場合は、依存関係プロパティを修飾するメタデータ。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">元への参照を<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>依存関係プロパティを識別する識別子。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">この識別子として追加するクラスによって公開するように、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フィールドです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets the default metadata of the dependency property.</source>
          <target state="translated">依存関係プロパティの既定のメタデータを取得します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; call.</source>
          <target state="translated">既定のメタデータは、代替メタデータが指定されていない明示的な特定のオブジェクトまたは派生型のオブジェクトに提供されるプロパティのメタデータ&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;呼び出します&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the original owner applied metadata to the first &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call that established the dependency property, then that metadata is returned as DefaultMetadata.</source>
          <target state="translated">元の所有者では、最初にメタデータが適用されている場合&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;を DefaultMetadata としてそのメタデータが返されます、依存関係プロパティを設定します&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If no metadata was applied in the original &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, then default metadata is generated from within the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call and this value is returned as the DefaultMetadata.</source>
          <target state="translated">元のメタデータが適用されない場合&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;内から既定のメタデータを生成しを呼び出すと、&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;呼び出し、この値は、DefaultMetadata として返されます&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The main purpose of having default metadata associated with a &lt;xref:System.Windows.DependencyProperty&gt; is to supply a default value for this property on any &lt;xref:System.Windows.DependencyObject&gt; or a derived type.</source>
          <target state="translated">関連付けられている既定のメタデータを持つの主な目的、&lt;xref:System.Windows.DependencyProperty&gt;はいずれかでこのプロパティの既定値を指定する&lt;xref:System.Windows.DependencyObject&gt;または派生型です&lt;/xref:System.Windows.DependencyObject&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For nonattached properties, the metadata type returned by this property cannot be cast to derived types of &lt;xref:System.Windows.PropertyMetadata&gt; type, even if the property was originally registered with a derived metadata type.</source>
          <target state="translated">非添付プロパティは、このプロパティによって返されるメタデータの種類の派生型にキャストできません&lt;xref:System.Windows.PropertyMetadata&gt;プロパティが最初に登録されたメタデータの派生型を持つ場合でもを入力します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you want the originally registered metadata including its original possibly derived metadata type, call &lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt; instead, passing the original registering type as a parameter.</source>
          <target state="translated">元のメタデータの可能性のある派生型を含む最初に登録されているメタデータを実行する場合に、呼び出す&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;パラメーターとして代わりに、入力元の登録を渡します&lt;/xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For attached properties, the type of the metadata returned by this property will match the type given in the original &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; registration method.</source>
          <target state="translated">このプロパティによって返されるメタデータの型が元の指定された型を一致、添付プロパティの&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;登録方法&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default metadata of the dependency property.</source>
          <target state="translated">依存関係プロパティの既定のメタデータ。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このハッシュ コードを返します<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The property system uses its own unique identifier &lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;, and the value of that property is returned by GetHashCode.</source>
          <target state="translated">プロパティのシステムが、独自の一意の識別子を使用して&lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;、そのプロパティの値は GetHashCode によって返されます&lt;/xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ハッシュ コードをこの<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified existing type.</source>
          <target state="translated">指定した既存の型に存在する場合は、この依存関係プロパティのメタデータを返します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that alter the metadata of the dependency property as it exists on a type.</source>
          <target state="translated">型は、必要なメタデータが原因のいずれかの元の登録から変化するために使用する種類またはオブジェクト参照を指定する&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;型に存在する依存関係プロパティのメタデータを変更する呼び出し&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The specific type from which to retrieve the dependency property metadata.</source>
          <target state="translated">依存関係プロパティのメタデータを取得する対象の特定の型。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">プロパティ メタデータ オブジェクト。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on the specified object instance.</source>
          <target state="translated">指定したオブジェクト インスタンスに存在する場合は、この依存関係プロパティのメタデータを返します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">型またはオブジェクト参照のいずれかが、指定するために必要な元の登録をいずれかが理由から、指定した依存関係プロパティのメタデータが異なるので&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;の呼び出しを型に存在する場合、プロパティ メタデータを絞り込むことができます&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</source>
          <target state="translated">インスタンスに基づくプロパティのメタデータを要求するときに内部的にその型を評価できるようにインスタンスを渡しているに過ぎません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</source>
          <target state="translated">依存関係プロパティのメタデータがインスタンスごとに異なるされません。任意の型のプロパティの組み合わせに対して整合性が常にします。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</source>
          <target state="translated">依存関係プロパティの型固有バージョンからのメタデータが取得するための型をチェックする依存関係オブジェクト。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">プロパティ メタデータ オブジェクト。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified type.</source>
          <target state="translated">指定した型に存在する場合は、この依存関係プロパティのメタデータを返します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">型またはオブジェクト参照のいずれかが、指定するために必要な元の登録をいずれかが理由から、指定した依存関係プロパティのメタデータが異なるので&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;の呼び出しを型に存在する場合、プロパティ メタデータを絞り込むことができます&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A specific object that records the dependency object type from which the dependency property metadata is desired.</source>
          <target state="translated">依存関係プロパティのメタデータの取得元となる依存関係オブジェクトの種類を記録する特定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">プロパティ メタデータ オブジェクト。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets an internally generated value that uniquely identifies the dependency property.</source>
          <target state="translated">依存関係プロパティを一意に識別する内部で生成された値を取得します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This value is an integer, not a <ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">この値は、整数、<ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</source>
          <target state="translated">一般に、このインデックスの値を使用して、必要はありませんし、インデックス テーブルにアクセスするすべての依存関係プロパティがありません。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Dependency properties should instead be referenced by their identifier fields.</source>
          <target state="translated">依存関係プロパティは、識別子フィールドで代わりに参照する必要があります。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>GlobalIndex is used internally for faster access to data structures that use the GlobalIndex as a zero-based array index.</source>
          <target state="translated">GlobalIndex は、0 から始まる配列インデックスとして、GlobalIndex を使用するデータ構造へのアクセス速度を内部的に使用されます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A similar usage might have applications for designers or tools.</source>
          <target state="translated">ような使用法は、アプリケーションの設計者またはツールがあります。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A unique numeric identifier.</source>
          <target state="translated">一意の数値識別子。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</source>
          <target state="translated">元の依存関係プロパティの登録で指定されたプロパティの型に対してチェック済みとして指定された値がこの依存関係プロパティの型の許容されるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`null`</ph> is a valid type for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph2">`true`</ph> for these cases.</source>
          <target state="translated">値<ph id="ph1">`null`</ph>または参照型の依存関係プロパティの有効な種類、&lt;xref:System.Nullable%601&gt;依存関係プロパティを返す<ph id="ph2">`true`</ph>このような場合&lt;/xref:System.Nullable%601&gt;。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, IsValidType will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">依存関係プロパティのどちらの参照がある場合も、 &lt;xref:System.Nullable%601&gt;IsValidType が返されますの種類、 <ph id="ph1">`false`</ph> raise 例外ではなく、null 値の&lt;/xref:System.Nullable%601&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">確認する値。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified value is the registered property type or an acceptable derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、指定された値は、登録済みプロパティの型、または適切な派生型です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</source>
          <target state="translated">基本型チェックを使用してプロパティの型指定された値が受け入れられるようにするかどうかを判断しも可能性がある、その型の値の許容範囲内にある場合。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For a dependency property, an allowed range of values for that type can be specified through a &lt;xref:System.Windows.ValidateValueCallback&gt; that is provided in the dependency property registration.</source>
          <target state="translated">依存関係プロパティを通じてその型の値の許容の範囲を指定できます、&lt;xref:System.Windows.ValidateValueCallback&gt;は依存関係プロパティの登録で提供される&lt;/xref:System.Windows.ValidateValueCallback&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This method calls &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; internally.</source>
          <target state="translated">このメソッドを呼び出す&lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;内部的にします&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the dependency property in question has no &lt;xref:System.Windows.ValidateValueCallback&gt;,then calling this method is effectively equivalent to calling &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;.</source>
          <target state="translated">対象の依存関係プロパティがあるない場合&lt;xref:System.Windows.ValidateValueCallback&gt;、 &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;。&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;を呼び出すことと実質的に同一では、このメソッドを呼び出す&lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the dependency property does have a &lt;xref:System.Windows.ValidateValueCallback&gt;, and if &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; would have returned <ph id="ph1">`true`</ph>, then the value returned will be as implemented in the callback.</source>
          <target state="translated">依存関係プロパティが設定されている場合、 &lt;xref:System.Windows.ValidateValueCallback&gt;、場合&lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;が返される<ph id="ph1">`true`</ph>コールバックで実装されたとされる値が返されます&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;&lt;/xref:System.Windows.ValidateValueCallback&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A null value is a valid value for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph1">`true`</ph> for these cases.</source>
          <target state="translated">Null 値は、参照型の依存関係プロパティのまたは有効な値、&lt;xref:System.Nullable%601&gt;依存関係プロパティは、返されます<ph id="ph1">`true`</ph>このような場合&lt;/xref:System.Nullable%601&gt;。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">依存関係プロパティのどちらの参照がある場合も、&lt;xref:System.Nullable%601&gt;型、&lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;戻ります<ph id="ph1">`false`</ph>raise 例外ではなく、null 値の&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;&lt;/xref:System.Nullable%601&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">確認する値。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value is acceptable and is of the correct type or a derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値が許容可能なは場合、適切な型または派生型であります。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets the name of the dependency property.</source>
          <target state="translated">依存関係プロパティの名前を取得します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This property gets the name provided as the <ph id="ph1">`name`</ph> parameter during dependency property registration.</source>
          <target state="translated">このプロパティで指定された名前を取得する、<ph id="ph1">`name`</ph>依存関係プロパティの登録時にパラメーター。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This name is immutable, and cannot be <ph id="ph1">`null`</ph> or an empty string.</source>
          <target state="translated">この名前は変更できないとすることはできません<ph id="ph1">`null`</ph>または空の文字列。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</source>
          <target state="translated">同じ所有者型に重複する名前登録では、許可されていません、重複を登録しようとしたときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The Name of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 依存関係プロパティの名前サフィックスの"Property"マイナスその依存関係プロパティの識別子の名前と一致する規則に従う必要があります。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのカスタム<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The name of the property.</source>
          <target state="translated">プロパティの名前です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</source>
          <target state="translated">依存関係プロパティの基本型から継承されたときに存在していたメタデータをオーバーライドする、指定した型のインスタンスに存在する場合は、この依存関係プロパティの代替メタデータを指定します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">プロパティのシステムは、依存関係プロパティを使用する前に、依存関係プロパティのメタデータをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This equates to the time that specific instances are created using the class that registers the dependency property.</source>
          <target state="translated">これは、特定のインスタンスは、依存関係プロパティを登録するクラスを使用して作成された時刻に相当します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">OverrideMetadata 呼び出しとしてそれ自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、<ph id="ph1">`forType`</ph>またはのようなインスタンス化でこのメソッドのパラメーターです。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">所有者の型のインスタンスが存在した後、メタデータを変更するとしていますが、例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">このメソッドを使用して特定の派生クラスのオーバーライドのメタデータが確立されると、同じ派生クラスでメタデータをオーバーライドしようとするとは、例外が発生します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティ メタデータに結合されます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">元の基本のメタデータで指定された特性が保持されます。新しいメタデータに変更された特に特徴だけでは、基本のメタデータの特性を上書きします。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">などのいくつかの特性&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;新しいメタデータに指定されている場合に置き換えられます&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">他のユーザーなど&lt;xref:System.Windows.PropertyChangedCallback&gt;、結合されます&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">最終的には、マージの動作によって異なりますので、ここで説明されている動作で使用される既存のプロパティのメタデータ クラス用に、上書きに使用されているプロパティのメタデータ型<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのメタデータ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>フレームワーク プロパティ メタデータ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">この依存関係プロパティが継承された型と、指定した代替メタデータが適用されます。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">オーバーライドする型の依存関係プロパティに適用するメタデータ。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</source>
          <target state="translated">読み取り専用の依存関係プロパティのメタデータをオーバーライドしようとしました (操作を実行することはできませんこの署名を使用して)。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Metadata was already established for the dependency property as it exists on the provided type.</source>
          <target state="translated">指定した型に存在する場合、依存関係プロパティのメタデータが確立既にされました。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</source>
          <target state="translated">初期の依存関係プロパティの登録で指定されたメタデータをオーバーライドする、指定した型のインスタンスに存在するときに、代替の読み取り専用の依存関係プロパティのメタデータを提供します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You must pass the <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the read-only dependency property to avoid raising an exception.</source>
          <target state="translated">渡す必要があります、 <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の例外の発生を防ぐために読み取り専用の依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This signature provides underlying implementation for a read-only dependency property identifier (&lt;xref:System.Windows.DependencyPropertyKey&gt;) method.</source>
          <target state="translated">この署名が読み取り専用の依存関係プロパティの識別子の基になる実装を提供 (&lt;xref:System.Windows.DependencyPropertyKey&gt;) メソッド&lt;/xref:System.Windows.DependencyPropertyKey&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If overriding metadata for a read-write dependency property, use &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">読み取り/書き込みの依存関係プロパティのメタデータをオーバーライドする場合は、 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;。&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">プロパティのシステムは、依存関係プロパティを使用する前に、依存関係プロパティのメタデータをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This equates to the time that specific objects are created for the class that registers the dependency property.</source>
          <target state="translated">これは、依存関係プロパティを登録するクラスの特定のオブジェクトが作成された時間に相当します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Calls to &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">呼び出す&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;としてそれ自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、<ph id="ph1">`forType`</ph>またはのようなインスタンス化でこのメソッドのパラメーターです&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">所有者の型のインスタンスが存在した後、メタデータを変更するとしていますが、例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">このメソッドを使用して特定の派生クラスのオーバーライドのメタデータが確立されると、同じ派生クラスでメタデータをオーバーライドしようとするとは、例外が発生します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティ メタデータに結合されます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">元の基本のメタデータで指定された特性が保持されます。新しいメタデータに変更された特に特徴だけでは、基本のメタデータの特性を上書きします。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">などのいくつかの特性&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;新しいメタデータに指定されている場合に置き換えられます&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">他のユーザーなど&lt;xref:System.Windows.PropertyChangedCallback&gt;、結合されます&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The merge behavior depends on the property metadata type being used for the override.</source>
          <target state="translated">マージの動作は、上書きに使用されているプロパティのメタデータの型によって異なります。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのメタデータ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>フレームワーク プロパティ メタデータ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">この依存関係プロパティが継承された型と、指定した代替メタデータが適用されます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">オーバーライドする型の依存関係プロパティに適用するメタデータ。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The access key for a read-only dependency property.</source>
          <target state="translated">読み取り専用の依存関係プロパティのアクセス キー。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</source>
          <target state="translated">依存関係プロパティ システムに登録された、プロパティ、または自身をプロパティの所有者として追加されるオブジェクトの種類を取得します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This value was provided during property registration.</source>
          <target state="translated">この値は、プロパティの登録時に指定されました。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The owner will be either the original registering type in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from a &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, or the type that added itself as owner in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from an &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; call.</source>
          <target state="translated">所有者が型にするか元登録の場合、&lt;xref:System.Windows.DependencyProperty&gt;識別子から生成された、&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;呼び出し、または自身の場合、所有者として追加する型、&lt;xref:System.Windows.DependencyProperty&gt;識別子から生成された、&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;呼び出します&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The OwnerType on any given &lt;xref:System.Windows.DependencyProperty&gt; is immutable, and cannot be <ph id="ph1">`null`</ph> in a valid &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">指定されたいずれかで OwnerType&lt;xref:System.Windows.DependencyProperty&gt;は、変更不可とすることはできません<ph id="ph1">`null`</ph>有効&lt;xref:System.Windows.DependencyProperty&gt;&lt;/xref:System.Windows.DependencyProperty&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The type of the object that registered the property or added itself as owner of the property.</source>
          <target state="translated">プロパティを登録するか、または自身をプロパティの所有者として追加するオブジェクトの型。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the type that the dependency property uses for its value.</source>
          <target state="translated">依存関係プロパティの値で使用されている型を取得します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This property reports the type of the property's value as declared by the original property registration, through the <ph id="ph1">`propertyType`</ph> parameter.</source>
          <target state="translated">このプロパティを元のプロパティの登録によって宣言されたプロパティの値の型を報告する、<ph id="ph1">`propertyType`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;, the property type of a dependency property is immutable after registration.</source>
          <target state="translated">ような&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;、登録後は、依存関係プロパティのプロパティの型は変更できません&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the property value.</source>
          <target state="translated">&lt;xref:System.Type&gt;のプロパティの値&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the dependency property identified by this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance is a read-only dependency property.</source>
          <target state="translated">依存関係プロパティが、これで識別されるかどうかを示す値を取得<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンスが読み取り専用の依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties are registered within the property system by calling the &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; method as opposed to the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; method.</source>
          <target state="translated">呼び出してプロパティ システム内で読み取り専用の依存関係プロパティが登録されている、&lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;メソッドはなく、&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;メソッド&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;&lt;/xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Attached properties can also be registered as read-only; see &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.</source>
          <target state="translated">添付プロパティを読み取り専用として登録することもできます。&lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;。&lt;/xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties require a &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier rather than a &lt;xref:System.Windows.DependencyProperty&gt; identifier to perform metadata operations such as overriding the metadata or setting the value.</source>
          <target state="translated">読み取り専用の依存関係プロパティを必要とする&lt;xref:System.Windows.DependencyPropertyKey&gt;識別子ではなく、&lt;xref:System.Windows.DependencyProperty&gt;メタデータ オーバーライドまたは値の設定などのメタデータの操作を実行する識別子です&lt;/xref:System.Windows.DependencyProperty&gt;&lt;/xref:System.Windows.DependencyPropertyKey&gt;。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you obtained a collection of &lt;xref:System.Windows.DependencyProperty&gt; identifiers through a call to &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; or another <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> that exposes identifiers, check the ReadOnly value before attempting to call &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</source>
          <target state="translated">コレクションを取得した場合は&lt;xref:System.Windows.DependencyProperty&gt;識別子を呼び出すことによって&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;別または<ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph>識別子を公開する、呼び出しを試みる前に読み取り専用値をチェック&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;、入力パラメーターとして、その依存関係プロパティの識別子を使用して、識別子を表す依存関係プロパティが読み取り専用ではないことを確認する&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyObject.SetValue%2A&gt;&lt;/xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If the value of ReadOnly is <ph id="ph1">`true`</ph> on a dependency property, there is no programmatic way to obtain a reference to the &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier of that dependency property, from the metadata or from the &lt;xref:System.Windows.DependencyProperty&gt; identifier; the identifier must be available as a static field in order to call &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; against a read-only dependency property.</source>
          <target state="translated">読み取り専用の値が場合<ph id="ph1">`true`</ph>、依存関係プロパティをへの参照を取得する方法をプログラムではありません、&lt;xref:System.Windows.DependencyPropertyKey&gt;メタデータからまたはその依存関係プロパティの識別子、&lt;xref:System.Windows.DependencyProperty&gt;識別子識別子を、呼び出すために、静的フィールドとして使用する必要があります&lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;に対して読み取り専用の依存関係プロパティ。&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt; 。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> wrapper property.</source>
          <target state="translated">カスタム依存関係プロパティを作成、読み取り専用として登録するの get アクセサーだけを定義する必要があります、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>ラッパー プロパティです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</source>
          <target state="translated">それ以外の場合、クラスは、バックアップの依存関係プロパティへのアクセスと比較してプロパティのラッパーの混乱を招くオブジェクト モデルがあります。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Read-Only Dependency Properties<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのカスタム<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>または<bpt id="p2">[</bpt>読み取り専用の依存関係プロパティ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property is read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>依存関係プロパティが読み取り専用の場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, and owner type.</source>
          <target state="translated">指定したプロパティ名、プロパティの型、所有者の種類と依存関係プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The name must be unique within the registration namespace of the owner type.</source>
          <target state="translated">名前は、所有者型の登録名前空間内で一意である必要があります。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">指定したプロパティ名、プロパティの型、所有者型、およびプロパティのメタデータを依存関係プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</source>
          <target state="translated">指定したプロパティ名、プロパティの型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを依存関係プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">通常の型検証に加えて、依存関係プロパティの値のカスタム検証を実行する必要があるコールバックへの参照。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, and owner type.</source>
          <target state="translated">指定したプロパティ名、プロパティの型、所有者型との添付プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>An attached property is a property concept defined by <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">添付プロパティによって定義されたプロパティの概念は、<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> implements attached properties as dependency properties.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>依存関係プロパティとしてアタッチされるプロパティを実装します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>添付プロパティは、依存関係プロパティ、レポート レイアウトの特性などの操作で、[全般] プロパティのシステムで使用できるメタデータが適用されることができます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>添付プロパティの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">指定したプロパティ名、プロパティの型、所有者型、およびプロパティのメタデータを添付プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">これには、既定値やその他の特性を含めることができます。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</source>
          <target state="translated">指定したプロパティの型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを添付プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">これには、既定値やその他の特性を含めることができます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">通常の型検証に加えて、依存関係プロパティの値のカスタム検証を実行する必要があるコールバックへの参照。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">依存関係プロパティの識別子の値を設定するために使用する必要があります、 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのフィールドです。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">プログラムでその値を設定またはメタデータの取得などの操作の後で、依存関係プロパティを参照するその識別子を使用しています。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">指定したプロパティの型、所有者型、およびプロパティ メタデータを読み取り専用の添付プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">依存関係プロパティのキーを後で依存関係プロパティの参照を使用して、クラス内の静的な読み取り専用フィールドの値を設定するために使用する必要があります。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">指定したプロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを読み取り専用の添付プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">通常の型検証に加えて、依存関係プロパティの値のカスタム検証を実行する必要がありますユーザー作成のコールバックへの参照。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">依存関係プロパティのキーを依存関係プロパティの参照を使用して、クラス内の静的な読み取り専用フィールドの値を設定するために使用する必要があります。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">指定したプロパティの型、所有者型、プロパティのメタデータと、読み取り専用の依存関係プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">このメソッドが戻る型&lt;xref:System.Windows.DependencyPropertyKey&gt;であるのに対し&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;&lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;型を返します&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">通常、読み取り専用プロパティを表すキーに対して行われていない、パブリック&lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;。&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;を呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">クラスのデザインは、要件に影響するが、アクセス権と任意の可視性を制限する、一般にお勧め&lt;xref:System.Windows.DependencyPropertyKey&gt;クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします&lt;/xref:System.Windows.DependencyPropertyKey&gt;。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">値を公開することにより、読み取り専用の依存関係プロパティを依存関係プロパティの識別子を公開することも推奨&lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;として、<ph id="ph1">`public static readonly`</ph>クラスのフィールド&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties are a fairly typical scenario both in the existing <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> and for customization scenarios, because other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> features might require a dependency property even if that property is not intended to be settable by callers.</source>
          <target state="translated">読み取り専用の依存関係プロパティは、非常に典型的なシナリオ両方、既存の<ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph>およびカスタマイズのシナリオのための他の<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>場合でも、そのプロパティはありませんを設定する呼び出し元が、機能が依存関係プロパティを必要と可能性があります。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">基づくなどの依存関係プロパティを取得する他のプロパティ システム操作の基礎として読み取り専用の依存関係プロパティの値を使用する、&lt;xref:System.Windows.Trigger&gt;スタイルで依存関係プロパティ&lt;/xref:System.Windows.Trigger&gt;。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">依存関係プロパティのキーを依存関係プロパティの参照を使用して、クラス内の静的な読み取り専用フィールドの値を設定するために使用する必要があります。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">指定したプロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを読み取り専用の依存関係プロパティを登録します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">このメソッドが戻る型&lt;xref:System.Windows.DependencyPropertyKey&gt;であるのに対し&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;&lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;型を返します&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">通常、読み取り専用プロパティを表すキーに対して行われていない、パブリック&lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;。&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;を呼び出すことによって、依存関係プロパティの値を設定するキーを使用できるため</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">クラスのデザインは、要件に影響するが、アクセス権と任意の可視性を制限する、一般にお勧め&lt;xref:System.Windows.DependencyPropertyKey&gt;クラスまたはアプリケーション ロジックの一部としてその依存関係プロパティを設定するために必要なコードの部分のみにします&lt;/xref:System.Windows.DependencyPropertyKey&gt;。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">値を公開することにより、読み取り専用の依存関係プロパティを依存関係プロパティの識別子を公開することも推奨&lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;として、<ph id="ph1">`public static readonly`</ph>クラスのフィールド&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties are a fairly typical scenario.</source>
          <target state="translated">読み取り専用の依存関係プロパティは、非常に典型的なシナリオです。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">基づくなどの依存関係プロパティを取得する他のプロパティ システム操作の基礎として読み取り専用の依存関係プロパティの値を使用する、&lt;xref:System.Windows.Trigger&gt;スタイルで依存関係プロパティ&lt;/xref:System.Windows.Trigger&gt;。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">依存関係プロパティの登録の詳細については、 &lt;xref:System.Windows.DependencyProperty&gt;。&lt;/xref:System.Windows.DependencyProperty&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Validation on a read-only dependency property might be less important.</source>
          <target state="translated">読み取り専用の依存関係プロパティの検証を重要性が低いことがあります。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</source>
          <target state="translated">キーの指定した非パブリックなアクセス レベルは、任意の無効な入力の可能性を軽減します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">登録する依存関係プロパティの名前。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">プロパティの型。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">依存関係プロパティを登録する所有者型。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">依存関係プロパティのプロパティ メタデータ。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">通常の型検証に加えて、依存関係プロパティの値のカスタム検証を実行する必要がありますユーザー作成のコールバックへの参照。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">依存関係プロパティのキーを後で依存関係プロパティの参照を使用して、クラス内の静的な読み取り専用フィールドの値を設定するために使用する必要があります。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the dependency property.</source>
          <target state="translated">依存関係プロパティの文字列表現を返します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>This implementation returns the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt; property value.</source>
          <target state="translated">この実装を返します、&lt;xref:System.Windows.DependencyProperty.Name%2A&gt;プロパティの値&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The string representation of the dependency property.</source>
          <target state="translated">依存関係プロパティの文字列形式。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Specifies a static value that is used by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system rather than <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the property exists, but does not have its value set by the property system.</source>
          <target state="translated">によって使用される静的な値を指定します、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムなく<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティが存在する場合しますが、プロパティ システムによって設定された値がないことを示すことです。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>UnsetValue is a sentinel value that is used for scenarios where the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system is unable to determine a requested &lt;xref:System.Windows.DependencyProperty&gt; value.</source>
          <target state="translated">UnsetValue シナリオを使用するための sentinel 値は、ここで、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムでは、要求を決定することができません&lt;xref:System.Windows.DependencyProperty&gt;値&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>UnsetValue is used rather than <ph id="ph1">`null`</ph>, because <ph id="ph2">`null`</ph> could be a valid property value, as well as a valid (and frequently used) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.</source>
          <target state="translated">UnsetValue が使用されるのではなく<ph id="ph1">`null`</ph>ので、 <ph id="ph2">`null`</ph> 、有効なプロパティの値だけでなく、有効な可能性があります (および頻繁に使用される) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>UnsetValue is never returned out of &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;外 UnsetValue が返されることはありません。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>When you call &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt; on a dependency property on a &lt;xref:System.Windows.DependencyObject&gt; instance, one of the following applies:      -   A dependency property has a default value established in metadata and that value is returned.</source>
          <target state="translated">呼び出すと&lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;で依存関係プロパティの&lt;xref:System.Windows.DependencyObject&gt;インスタンスを次のいずれかに該当: - 依存関係プロパティのメタデータで確立されている既定値があり、その値が返されます&lt;/xref:System.Windows.DependencyObject&gt;&lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This value might come from &lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;.</source>
          <target state="translated">この値は&lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;。&lt;/xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;かられることもあります。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>-   Some other value was established by the property system, and the default value is no longer relevant.</source>
          <target state="translated">その他のいくつかの値をプロパティ システムによって確立され、既定値は、関連性がなくなった。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティ値の優先順位<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Setting a &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; of UnsetValue is specifically disallowed.</source>
          <target state="translated">設定、 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;UnsetValue の具体的には許可されていない&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt; returns UnsetValue when the requested property has not been locally set.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;要求されたプロパティはローカルに設定されていない場合は、UnsetValue を返します。&lt;/xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>UnsetValue has a special meaning when used as the return value of a &lt;xref:System.Windows.CoerceValueCallback&gt;.</source>
          <target state="translated">UnsetValue &lt;xref:System.Windows.CoerceValueCallback&gt;。&lt;/xref:System.Windows.CoerceValueCallback&gt;の戻り値として使用する場合の特別な意味を持つ</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのコールバックと検証<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>If you are binding to a database, note that UnsetValue is not equivalent to &lt;xref:System.DBNull.Value&gt;, in a similar way to how &lt;xref:System.DBNull.Value&gt; is not equivalent to a true null.</source>
          <target state="translated">データベースにバインドする場合は、UnsetValue が等価ではないことを注意してください&lt;xref:System.DBNull.Value&gt;、方法と同様の&lt;xref:System.DBNull.Value&gt;null の場合は true と等価ではありません&lt;/xref:System.DBNull.Value&gt;&lt;/xref:System.DBNull.Value&gt;。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Gets the value validation callback for the dependency property.</source>
          <target state="translated">依存関係プロパティの値検証コールバックを取得します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>This property will contain <ph id="ph1">`null`</ph> for any dependency property with no registered validation callback.</source>
          <target state="translated">このプロパティが格納されます<ph id="ph1">`null`</ph>に登録されている検証コールバックいない依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Validate value callbacks must act in a static sense: validation applied through the &lt;xref:System.Windows.ValidateValueCallback&gt; cannot determine whether the provided value is valid for any particular instance.</source>
          <target state="translated">コールバックは、静的な意味で動作する必要があります値を検証します検証を使用して適用、&lt;xref:System.Windows.ValidateValueCallback&gt;指定された値が、特定のインスタンスに対して有効かどうかを判断できません。&lt;/xref:System.Windows.ValidateValueCallback&gt; 。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</source>
          <target state="translated">コールバックは、依存関係プロパティを所有するすべてのオブジェクトが必要がありますまたは有効なものとして指定された値を許容しないようにするかどうかにのみを確認できます。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a &lt;xref:System.Windows.CoerceValueCallback&gt; instead.</source>
          <target state="translated">特定のインスタンスを使用するには、その他の依存関係プロパティの値を知ることに依存する検証を実行する必要がある場合、&lt;xref:System.Windows.CoerceValueCallback&gt;代わりにします&lt;/xref:System.Windows.CoerceValueCallback&gt;。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.CoerceValueCallback&gt; is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</source>
          <target state="translated">&lt;xref:System.Windows.CoerceValueCallback&gt;依存関係プロパティの識別子の直下にあるではなく、依存関係プロパティのメタデータの一部として登録されています&lt;/xref:System.Windows.CoerceValueCallback&gt;。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティのコールバックと検証<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The value validation callback for this dependency property, as provided for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">validateValueCallback</ph><ept id="p1">&lt;/code&gt;</ept> parameter in the original dependency property registration.</source>
          <target state="translated">この依存関係プロパティの値検証コールバック、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">validateValueCallback</ph> <ept id="p1">&lt;/code&gt;</ept>元の依存関係プロパティの登録のパラメーターです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>