<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5f8fca514a67d13ec16ce9d7eb312aab82304fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Style.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3d053791efe0484d9eec2be4159af57364e03bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e0ece696df30404e423049910981c89483dda0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables the sharing of properties, resources, and event handlers between instances of a type.</source>
          <target state="translated">プロパティ、リソース、およびイベント ハンドラーの型のインスタンス間で共有できるようにします。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can set a Style on any element that derives from &lt;xref:System.Windows.FrameworkElement&gt; or &lt;xref:System.Windows.FrameworkContentElement&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;または&lt;xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;から派生した任意の要素のスタイルを設定することができます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A style is most commonly declared as a resource inside the &lt;xref:System.Windows.Application.Resources%2A&gt; section.</source>
          <target state="translated">スタイルが最もよく内にリソースとして宣言されている、&lt;xref:System.Windows.Application.Resources%2A&gt;セクション&lt;/xref:System.Windows.Application.Resources%2A&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</source>
          <target state="translated">スタイルは、リソースであるため、すべてのリソースに適用されるスコープの規則に従いますスタイルを適用できるに影響を宣言する場合は。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If, for instance, you declare the style in the root element of your application definition <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file, the style can be used anywhere in your application.</source>
          <target state="translated">アプリケーション定義のルート要素にスタイルを宣言するインスタンスの場合は、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル、スタイルは、アプリケーションのどこでも使用できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are creating a navigation application and declare the style in one of the application's <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> files, the style can be used only in that <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">ナビゲーション アプリケーションを作成するし、スタイルのアプリケーションのいずれかで宣言<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>をでのみファイル、スタイルが使用できる<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on scoping rules for resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">リソースのルールのスコープの詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The style declaration consists of a Style object that contains a collection of one or more &lt;xref:System.Windows.Setter&gt; objects.</source>
          <target state="translated">Style 宣言が&amp;1; つまたは複数のコレクションを格納するスタイル オブジェクトから成る&lt;xref:System.Windows.Setter&gt;オブジェクト&lt;/xref:System.Windows.Setter&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Windows.Setter&gt; consists of a &lt;xref:System.Windows.Setter.Property%2A&gt; and a &lt;xref:System.Windows.Setter.Value%2A&gt;.</source>
          <target state="translated">各&lt;xref:System.Windows.Setter&gt;の&lt;xref:System.Windows.Setter.Property%2A&gt;&lt;xref:System.Windows.Setter.Value%2A&gt;。&lt;/xref:System.Windows.Setter.Value%2A&gt;&lt;/xref:System.Windows.Setter.Property%2A&gt;で構成されています&lt;/xref:System.Windows.Setter&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The property is the name of the property of the element the style is to apply to.</source>
          <target state="translated">プロパティは、要素のスタイルのプロパティの名前に適用します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>After the style is declared as a resource, it can then be referenced just like any other resource.</source>
          <target state="translated">スタイルがリソースとして宣言されると、後に、他のリソースと同じように、参照できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If there is more than one setter in the setter collection with the same &lt;xref:System.Windows.Setter.Property%2A&gt; property value, the setter that is declared last is used.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 同じ set アクセス操作子コレクションの&amp;1; つ以上の set アクセス操作子があるかどうか&lt;xref:System.Windows.Setter.Property%2A&gt;プロパティ値、宣言されている set アクセス操作子が最終が使用されます&lt;/xref:System.Windows.Setter.Property%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</source>
          <target state="translated">同様と設定した場合、同じプロパティ値をスタイルで要素に直接、直接要素で設定された値が優先されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>スタイルとテンプレートのモデルでは、メンテナンスとプレゼンテーションとロジックの分離を参照して共有します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The styling and templating model includes a suite of features that enable you to customize your <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">スタイルとテンプレートのモデルにはカスタマイズするための機能のセットが含まれています、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This suite of features includes the Style class as well as the following:      -   &lt;xref:System.Windows.Trigger&gt;      -   &lt;xref:System.Windows.EventTrigger&gt; and &lt;xref:System.Windows.Media.Animation.Storyboard&gt;      -   &lt;xref:System.Windows.Controls.ControlTemplate&gt;      -   &lt;xref:System.Windows.DataTemplate&gt;       For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">この機能のスイートには、スタイル クラスだけでなく、次が含まれています:- &lt;xref:System.Windows.Trigger&gt;-&lt;xref:System.Windows.EventTrigger&gt;と&lt;xref:System.Windows.Media.Animation.Storyboard&gt;- &lt;xref:System.Windows.Controls.ControlTemplate&gt;-&lt;xref:System.Windows.DataTemplate&gt;詳細については、次を参照してください<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。&lt;/xref:System.Windows.DataTemplate&gt; &lt;/xref:System.Windows.Controls.ControlTemplate&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt; &lt;/xref:System.Windows.EventTrigger&gt; &lt;/xref:System.Windows.Trigger&gt; 。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This constructor call requires delayed validation of &lt;xref:System.Windows.Style.TargetType%2A&gt; and &lt;xref:System.Windows.Style.BasedOn%2A&gt; style type.</source>
          <target state="translated">このコンス トラクターの呼び出しがの遅延の検証を要求&lt;xref:System.Windows.Style.TargetType%2A&gt;と&lt;xref:System.Windows.Style.BasedOn%2A&gt;型のスタイルを設定します&lt;/xref:System.Windows.Style.BasedOn%2A&gt;&lt;/xref:System.Windows.Style.TargetType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If this is used outside the context of the parser, behavior is undefined.</source>
          <target state="translated">これはパーサーのコンテキスト外に使用する場合の動作は定義されません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class to use on the specified &lt;xref:System.Type&gt;.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.Type&gt;&lt;/xref:System.Type&gt;を使用するクラス。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type to which the style will apply.</source>
          <target state="translated">スタイルを適用する型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class to use on the specified &lt;xref:System.Type&gt; and based on the specified <bpt id="p2">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定で使用するクラス&lt;xref:System.Type&gt;に基づいて、指定されたと<bpt id="p2">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Type&gt; 。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type to which the style will apply.</source>
          <target state="translated">スタイルを適用する型。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The style to base this style on.</source>
          <target state="translated">このスタイルの基にスタイルです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a defined style that is the basis of the current style.</source>
          <target state="translated">取得または現在のスタイルの基盤となっている定義済みのスタイルを設定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Each style only supports one BasedOn value.</source>
          <target state="translated">各スタイルは、1 つの BasedOn 値のみをサポートします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_BasedOn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object BasedOn="myStyle" .../&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_BasedOn"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>myStyle<ept id="p3">*</ept>    An existing style.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_BasedOn"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object BasedOn="myStyle" .../&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_BasedOn"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>myStyle<ept id="p3">*</ept>既存のスタイル。      </target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, you use the <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> to refer to an existing style.</source>
          <target state="translated">通常、使用して、<bpt id="p1">[</bpt>マークアップ拡張機能と WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>に既存のスタイルを参照してください。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A defined style that is the basis of the current style.</source>
          <target state="translated">現在のスタイルの基盤となっている定義済みのスタイル。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このハッシュ コードを返します<bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The hash code for this <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ハッシュ コードをこの<bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the style is read-only and cannot be changed.</source>
          <target state="translated">スタイルは読み取り専用と、変更することはできないかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A style is sealed when another style is based on it or when it is applied for the first time.</source>
          <target state="translated">別のスタイルの基になるとき、または最初に適用された場合に、スタイルはシールされています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the style is sealed; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、スタイルがシールされています。それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Registers a new name-object pair in the current namescope.</source>
          <target state="translated">現在の名前スコープに新しい名前とオブジェクトのペアを登録します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The name to register.</source>
          <target state="translated">登録する名前。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object to map to the specified <ph id="ph1">`name`</ph>.</source>
          <target state="translated">オブジェクトを指定したマップを<ph id="ph1">`name`</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets or sets the collection of resources that can be used within the scope of this style.</source>
          <target state="translated">取得またはこのスタイルのスコープ内で使用できるリソースのコレクションを設定します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The resources that can be used within the scope of this style.</source>
          <target state="translated">このスタイルのスコープ内で使用できるリソース。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Locks this style and all factories and triggers so they cannot be changed.</source>
          <target state="translated">変更することはできませんので、このスタイルとファクトリとトリガーをロックします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets a collection of <bpt id="p1">&lt;xref href="System.Windows.Setter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.EventSetter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">コレクションを取得<bpt id="p1">&lt;xref href="System.Windows.Setter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と<bpt id="p2">&lt;xref href="System.Windows.EventSetter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Setters property of a &lt;xref:System.Windows.Style&gt; object can consist only of objects assignable to &lt;xref:System.Windows.SetterBase&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Style&gt;オブジェクトから成ります&lt;xref:System.Windows.SetterBase&gt;。&lt;/xref:System.Windows.SetterBase&gt;に割り当て可能なオブジェクト&lt;/xref:System.Windows.Style&gt;の Setter プロパティ</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Adding a &lt;xref:System.Windows.SetterBase&gt; child to a &lt;xref:System.Windows.Style&gt; object implicitly adds it to the &lt;xref:System.Windows.SetterBaseCollection&gt; for the &lt;xref:System.Windows.Style&gt; object.</source>
          <target state="translated">追加する、&lt;xref:System.Windows.SetterBase&gt;に子、&lt;xref:System.Windows.Style&gt;オブジェクトが暗黙的に追加して、&lt;xref:System.Windows.SetterBaseCollection&gt;の&lt;xref:System.Windows.Style&gt;オブジェクト&lt;/xref:System.Windows.Style&gt;&lt;/xref:System.Windows.SetterBaseCollection&gt;&lt;/xref:System.Windows.Style&gt;&lt;/xref:System.Windows.SetterBase&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An explicit property element usage  for Setters is also relatively common.</source>
          <target state="translated">Set アクセス操作子を明示的にプロパティ要素の使用方法は、比較的一般的なもあります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is a markup style decision that can sometimes help distinguish Setters from &lt;xref:System.Windows.Style.Resources%2A&gt; and &lt;xref:System.Windows.Style.Triggers%2A&gt; items in a complex style.</source>
          <target state="translated">これは、set アクセス操作子からの区別が役立つ場合がありますマークアップ スタイルの意思決定&lt;xref:System.Windows.Style.Resources%2A&gt;と&lt;xref:System.Windows.Style.Triggers%2A&gt;複雑なスタイル内の項目&lt;/xref:System.Windows.Style.Triggers%2A&gt;&lt;/xref:System.Windows.Style.Resources%2A&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example:      <ph id="ph1">```   &lt;Style&gt;     &lt;Style.Setters&gt;       &lt;!--one or more SetterBase derived object elements here--&gt;     &lt;/Style.Setters&gt;   &lt;/Style&gt;   ```</ph>      <bpt id="p1">&lt;a name="xamlPropertyElementUsage_Setters"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     oneOrMoreSetters   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Setters"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreSetters<ept id="p3">*</ept>    One or more &lt;xref:System.Windows.Setter&gt; or &lt;xref:System.Windows.EventSetter&gt; objects.</source>
          <target state="translated">例: <ph id="ph1">```   &lt;Style&gt;     &lt;Style.Setters&gt;       &lt;!--one or more SetterBase derived object elements here--&gt;     &lt;/Style.Setters&gt;   &lt;/Style&gt;   ```</ph> <bpt id="p1">&lt;a name="xamlPropertyElementUsage_Setters"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph2">```   &lt;object&gt;     oneOrMoreSetters   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Setters"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreSetters<ept id="p3">*</ept>&amp;1; つまたは複数&lt;xref:System.Windows.Setter&gt;または&lt;xref:System.Windows.EventSetter&gt;オブジェクト&lt;/xref:System.Windows.EventSetter&gt;&lt;/xref:System.Windows.Setter&gt;。            </target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A collection of <bpt id="p1">&lt;xref href="System.Windows.Setter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.EventSetter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">コレクション<bpt id="p1">&lt;xref href="System.Windows.Setter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と<bpt id="p2">&lt;xref href="System.Windows.EventSetter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default is an empty collection.</source>
          <target state="translated">既定では、空のコレクションです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Adds a child object.</source>
          <target state="translated">子オブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Windows.Style&gt; instance is cast to an &lt;xref:System.Windows.Markup.IAddChild&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Windows.Style&gt;インスタンスにキャスト、&lt;xref:System.Windows.Markup.IAddChild&gt;インターフェイス&lt;/xref:System.Windows.Markup.IAddChild&gt;&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The child object to add.</source>
          <target state="translated">追加する子オブジェクト。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Adds the text content of a node to the object.</source>
          <target state="translated">ノードのテキストの内容をオブジェクトに追加します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Windows.Style&gt; instance is cast to an &lt;xref:System.Windows.Markup.IAddChild&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Windows.Style&gt;インスタンスにキャスト、&lt;xref:System.Windows.Markup.IAddChild&gt;インターフェイス&lt;/xref:System.Windows.Markup.IAddChild&gt;&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The text to add to the object.</source>
          <target state="translated">オブジェクトに追加するテキスト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns an object that has the provided identifying name.</source>
          <target state="translated">指定された識別名を持つオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Windows.Style&gt; instance is cast to an &lt;xref:System.Windows.Markup.INameScope&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Windows.Style&gt;インスタンスにキャスト、&lt;xref:System.Windows.Markup.INameScope&gt;インターフェイス&lt;/xref:System.Windows.Markup.INameScope&gt;&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The name identifier for the object being requested.</source>
          <target state="translated">要求されたオブジェクトの名前の識別子。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The object, if found.</source>
          <target state="translated">オブジェクト場合が見つかりました。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no object of that name was found.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>その名前のオブジェクトが見つからなかった場合です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Queries whether a specified ambient property is available in the current scope.</source>
          <target state="translated">指定されたアンビエント プロパティは、現在のスコープで使用するかどうかを照会します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The name of the requested ambient property.</source>
          <target state="translated">要求されたアンビエント プロパティの名前。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the requested ambient property is available; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要求されたアンビエント プロパティがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets or sets the type for which this style is intended.</source>
          <target state="translated">取得またはこのスタイルの対象となる型を設定します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can set a style on any element that derives from &lt;xref:System.Windows.FrameworkElement&gt; or &lt;xref:System.Windows.FrameworkContentElement&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;または&lt;xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;から派生した任意の要素のスタイルを設定することができます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Therefore, your target type can be any of those elements.</source>
          <target state="translated">したがって、対象の型は、それらの要素のいずれかのことはできます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, if you create a style with a TargetType property and base it on another style that also defines a TargetType property, the target type of the derived style must be the same as or be derived from the target type of the base style.</source>
          <target state="translated">ただし、TargetType プロパティを使用してスタイルを作成しても TargetType プロパティを定義する別のスタイルを基にした場合、派生したスタイルの対象の型と同じである必要があります。 または基本スタイルの対象の型から派生します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you do not specify a TargetType, then you must specify an <ph id="ph1">`x:Key`</ph> for your &lt;xref:System.Windows.Style&gt; and also qualify the properties in your style with a class name.</source>
          <target state="translated">TargetType を指定しないかどうかは、指定する必要があります、<ph id="ph1">`x:Key`</ph>の&lt;xref:System.Windows.Style&gt;しても、スタイルのクラス名のプロパティを修飾します&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object  TargetType="{x:Type typeName}"/&gt;   -or-   &lt;object  TargetType="typeName"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_TargetType"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`{x:Type ...}`</ph>    An <bpt id="p3">[</bpt>x:Type Markup Extension<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept> markup extension usage.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object  TargetType="{x:Type typeName}"/&gt;   -or-   &lt;object  TargetType="typeName"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_TargetType"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<ph id="ph2">`{x:Type ...}`</ph>、 <bpt id="p3">[</bpt>X:type マークアップ拡張機能<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept>マークアップ拡張機能を使用します。      </target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>    The type name of the class.</source>
          <target state="translated"><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>クラスの型名。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The target type for this style.</source>
          <target state="translated">このスタイルのターゲットの種類。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets a collection of <bpt id="p1">&lt;xref href="System.Windows.TriggerBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that apply property values based on specified conditions.</source>
          <target state="translated">コレクションを取得<bpt id="p1">&lt;xref href="System.Windows.TriggerBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定した条件に基づいて、オブジェクト プロパティの値を適用します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> styling and templating model enables you to specify triggers within your &lt;xref:System.Windows.Style&gt;.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>スタイルとテンプレートのモデルでは、 &lt;xref:System.Windows.Style&gt;.&lt;/xref:System.Windows.Style&gt;内でトリガーを指定できます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes <ph id="ph1">`true`</ph>, or when an event occurs) are satisfied.</source>
          <target state="translated">トリガーを有効にするときに特定の変更を適用するオブジェクトは、基本的には、条件 (特定のプロパティの値に変わったらなど<ph id="ph1">`true`</ph>、イベント発生時または) がなければです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept>    Zero or more object elements that are classes deriving from &lt;xref:System.Windows.TriggerBase&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept> &lt;xref:System.Windows.TriggerBase&gt;.&lt;/xref:System.Windows.TriggerBase&gt;から派生するクラスは、0 個以上のオブジェクトの要素      </target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A collection of <bpt id="p1">&lt;xref href="System.Windows.TriggerBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">コレクション<bpt id="p1">&lt;xref href="System.Windows.TriggerBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default is an empty collection.</source>
          <target state="translated">既定では、空のコレクションです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Removes a name-object mapping from the namescope.</source>
          <target state="translated">名前スコープから名前とオブジェクトのマッピングを削除します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The name of the mapping to remove.</source>
          <target state="translated">削除するマッピングの名前。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>