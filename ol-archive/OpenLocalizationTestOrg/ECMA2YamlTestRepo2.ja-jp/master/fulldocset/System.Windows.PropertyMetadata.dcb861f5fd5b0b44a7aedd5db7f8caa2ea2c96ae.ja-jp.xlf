<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa8d9be9bd8a6e579a04c9a6e75191b7d59e2792</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.PropertyMetadata.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff40b04314562dceced1eca41762d8f11e0b2d05</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb79b96cb966a9c981d9c339abc43bdee740d9d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.</source>
          <target state="translated">登録時の条件など、特定の型に適用されるときに、依存関係プロパティの動作を定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Property metadata can be defined and used during dependency property registration when calling the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the &lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt; method.</source>
          <target state="translated">プロパティのメタデータを定義しを呼び出すときに、依存関係プロパティの登録中に使用される、&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;メソッド (または、アタッチされるプロパティまたは読み取り専用の依存関係プロパティのバリエーション) 以降の呼び出し時に元の所有者の登録、&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;メソッド&lt;/xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; also takes property metadata.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;プロパティのメタデータを受け取ります。&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class is a concrete base class that can be used in each of these calls.</source>
          <target state="translated">このクラスは、それらの各呼び出しで使用できる具象基底クラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, it is very common to specify metadata using one of the derived classes such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;.</source>
          <target state="translated">ただしは、ごく一般的&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;。&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;などの派生クラスのいずれかを使用してメタデータを指定するには</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> framework level.</source>
          <target state="translated">これらの派生クラスを検出するか、いくつか、プロパティに動作でのみ実装されているシステムとレイアウトを有効にするのに便利ですが、ブール型プロパティ値として実行されます。 詳細なメタデータをサポートする、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>フレームワーク レベル。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; or &lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;.</source>
          <target state="translated">このクラスのいくつかのプロパティは、オブジェクト モデルへの読み取り/書き込みが&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;や&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;などのプロパティのシステム操作で使用されているインスタンスの前にのみ記述できます</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each of these properties could also have been set by the constructor but are exposed so that &lt;xref:System.Windows.PropertyMetadata.Merge%2A&gt; method implementations can set them.</source>
          <target state="translated">これらの各プロパティ コンス トラクターによって設定されてもでしたが、公開されるように&lt;xref:System.Windows.PropertyMetadata.Merge%2A&gt;メソッドの実装が設定できます&lt;/xref:System.Windows.PropertyMetadata.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    This type, and members of this type, are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML テキストの使用方法、この型と、この型のメンバーは、通常は使用されません<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified default value for the dependency property that this metadata will be applied to.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にこのメタデータが適用される依存関係プロパティの指定された既定値を持つクラス。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">(この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; cannot be specified.</source>
          <target state="translated">パラメーターなしのコンス トラクターごとの既定値は、<ph id="ph1">`defaultValue`</ph>の&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;は指定できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">しようとすると、例外が発生します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The default value to specify for a dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">いくつか特定の型の値として通常提供される、依存関係プロパティを指定する既定値です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>値に設定することはできません<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implementation reference.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定したクラス<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>の参照を実装します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified default value and <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implementation reference.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定された既定値を持つクラスと<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>の参照を実装します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type of the value provided <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">(この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; cannot be specified.</source>
          <target state="translated">パラメーターなしのコンス トラクターごとの既定値は、<ph id="ph1">`defaultValue`</ph>の&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;は指定できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">しようとすると、例外が発生します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">依存関係プロパティをいくつか特定の型の値として提供される通常の既定値。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>値に設定することはできません<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified default value and callbacks.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コールバックと指定された既定値を持つクラス。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you want to specify a &lt;xref:System.Windows.CoerceValueCallback&gt; but not a &lt;xref:System.Windows.PropertyChangedCallback&gt;, you can pass <ph id="ph1">`null`</ph> for the <ph id="ph2">`propertyChangedCallback`</ph> parameter.</source>
          <target state="translated">指定する場合、&lt;xref:System.Windows.CoerceValueCallback&gt;ではなく、&lt;xref:System.Windows.PropertyChangedCallback&gt;を渡すことができます<ph id="ph1">`null`</ph>の<ph id="ph2">`propertyChangedCallback`</ph>パラメーター&lt;/xref:System.Windows.PropertyChangedCallback&gt; &lt;/xref:System.Windows.CoerceValueCallback&gt; 。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</source>
          <target state="translated">(この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; cannot be specified.</source>
          <target state="translated">パラメーターなしのコンス トラクターごとの既定値は、<ph id="ph1">`defaultValue`</ph>の&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;は指定できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">しようとすると、例外が発生します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of some specific type.</source>
          <target state="translated">依存関係プロパティをいくつか特定の型の値として提供される通常の既定値。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reference to a handler implementation that is to be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;このプロパティに対して&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>値に設定することはできません<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a <bpt id="p1">&lt;xref href="System.Windows.CoerceValueCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation specified in this metadata.</source>
          <target state="translated">取得または設定の参照、 <bpt id="p1">&lt;xref href="System.Windows.CoerceValueCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>このメタデータに指定された実装。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</source>
          <target state="translated">プロパティのメタデータでコールバックは、このプロパティの値が同じ既存の依存関係プロパティのメタデータを使用するほとんどのシナリオの重要ではありませんので、型は、通常のパブリック メンバーではありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a &lt;xref:System.Windows.CoerceValueCallback&gt;.</source>
          <target state="translated">このプロパティが公開されている理由の&amp;1; つがメタデータ サブクラスは基本のメタデータとメタデータをオーバーライドする追加の両方で指定&lt;xref:System.Windows.CoerceValueCallback&gt;。&lt;/xref:System.Windows.CoerceValueCallback&gt;場合、マージが必要なロジックを実行できるようにするには</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, the default merge logic for a CoerceValueCallback is to replace the previous one.</source>
          <target state="translated">、既定のマージ ロジックを CoerceValueCallback が&amp;1; つ前の置換します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CoerceValueCallback is defined in the object model as read-write.</source>
          <target state="translated">CoerceValueCallback は、読み取り/書き込みとしてオブジェクト モデルで定義されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is so CoerceValueCallback can be adjusted after initialization of the &lt;xref:System.Windows.PropertyMetadata&gt; object itself.</source>
          <target state="translated">これは CoerceValueCallback の初期化後に調整できるため、&lt;xref:System.Windows.PropertyMetadata&gt;オブジェクト自体です&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Attempting to set CoerceValueCallback once &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">CoerceValueCallback を&amp;1; 回だけ設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.CoerceValueCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation reference.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.CoerceValueCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の参照を実装します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets or sets the default value of the dependency property.</source>
          <target state="translated">取得または依存関係プロパティの既定値を設定します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>DefaultValue is defined in the object model as read-write.</source>
          <target state="translated">既定値は、読み取り/書き込みとしてオブジェクト モデルで定義されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This is so DefaultValue can be adjusted after initialization of the &lt;xref:System.Windows.PropertyMetadata&gt; object itself.</source>
          <target state="translated">これは、DefaultValue の初期化後に調整できるため、&lt;xref:System.Windows.PropertyMetadata&gt;オブジェクト自体です&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Attempting to set DefaultValue once &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">一度 DefaultValue を設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Although it is the default per the parameterless constructor, a <ph id="ph1">`defaultValue`</ph> of &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; cannot be set using either DefaultValue or the constructor.</source>
          <target state="translated">パラメーターなしのコンス トラクターごとの既定値は、<ph id="ph1">`defaultValue`</ph>の&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;DefaultValue またはコンス トラクターを使用して設定することはできません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Attempting to do so will raise an exception.</source>
          <target state="translated">しようとすると、例外が発生します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_PropertyChangedCallback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this type are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_PropertyChangedCallback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## この型の XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The default value of the property.</source>
          <target state="translated">プロパティの既定値です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default value on a <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance created with the parameterless constructor will be <bpt id="p2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated">既定値、 <bpt id="p1">&lt;xref href="System.Windows.PropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>パラメーターなしのコンス トラクターで作成されたインスタンスになります<bpt id="p2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cannot be set to the value <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> once created; see Remarks.</source>
          <target state="translated">値に設定することはできません<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>作成後は、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.</source>
          <target state="translated">結果としてそのメタデータ インスタンスの変更できない状態の何らかの方法では、プロパティにメタデータが適用されているかどうかを決定する値を取得します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Various properties of &lt;xref:System.Windows.PropertyMetadata&gt;, such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, are defined in the object model as read-write.</source>
          <target state="translated">さまざまなプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;など&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;、読み取り/書き込みとしてオブジェクト モデルで定義されています&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is so those properties can be adjusted after initialization of the &lt;xref:System.Windows.PropertyMetadata&gt; object itself.</source>
          <target state="translated">これは、これらのプロパティの初期化後に調整できるように、&lt;xref:System.Windows.PropertyMetadata&gt;オブジェクト自体です&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, once the metadata is applied to a dependency property as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">ただしへの呼び出しの一部として、依存関係プロパティに適用するメタデータ&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>At the time of one of these calls, &lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt; is called, and the value of this property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">これらの呼び出しのいずれかの時点で&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;が呼び出されるにこのプロパティの値を設定および<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.PropertyMetadata.OnApply%2A&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the metadata instance is immutable; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>メタデータ インスタンスは不変であり場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Merges this metadata with the base metadata.</source>
          <target state="translated">このメタデータと基本メタデータをマージします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This method is used internally when metadata is being overridden (&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method).</source>
          <target state="translated">メタデータが上書きされているときに、このメソッドは内部的に使用 (&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;メソッド).&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The base metadata to merge with this instance's values.</source>
          <target state="translated">このインスタンスの値とマージする基本のメタデータ。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The dependency property to which this metadata is being applied.</source>
          <target state="translated">このメタデータが適用されている依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
          <target state="translated">このメタデータは、メタデータがシールされていることを示すプロパティに適用されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Subclasses should assure that any mutability of the data structure of a &lt;xref:System.Windows.PropertyMetadata&gt; subclass should be marked as immutable once OnApply is called.</source>
          <target state="translated">サブクラスはことを保証のデータ構造のすべての変更可能性、&lt;xref:System.Windows.PropertyMetadata&gt;サブクラスとマークするか変更不可として後もが呼び出されるとします&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).</source>
          <target state="translated">プロパティのシステム操作にメタデータが適用されると呼び出されます (登録、所有者を追加、メタデータをオーバーライドする)。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The dependency property to which the metadata has been applied.</source>
          <target state="translated">メタデータが適用されている依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
          <target state="translated">型固有のメタデータは、この場合、このメタデータに関連付けられている型。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If this is default metadata, this value is a null reference.</source>
          <target state="translated">これが既定のメタデータである場合は、この値は、null 参照です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a <bpt id="p1">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation specified in this metadata.</source>
          <target state="translated">取得または設定の参照、 <bpt id="p1">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>このメタデータに指定された実装。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</source>
          <target state="translated">プロパティのメタデータでコールバックは、このプロパティの値が同じ既存の依存関係プロパティのメタデータを使用するほとんどのシナリオの重要ではありませんので、型の定義、通常のパブリック メンバーではありません。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a &lt;xref:System.Windows.PropertyChangedCallback&gt;.</source>
          <target state="translated">このプロパティが公開されている理由の&amp;1; つがメタデータ クラスは基本のメタデータとメタデータをオーバーライドする追加の両方で指定&lt;xref:System.Windows.PropertyChangedCallback&gt;。&lt;/xref:System.Windows.PropertyChangedCallback&gt;場合、マージが必要なロジックを実行できるようにするには</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The default merge logic for is to maintain all PropertyChangedCallback implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.</source>
          <target state="translated">既定のマージ ロジックは、テーブル内のすべての PropertyChangedCallback 実装を維持し、それらの各最初を実行している階層の最下位のクラスによって確立されたコールバックを呼び出すには。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>PropertyChangedCallback is defined in the object model as read-write.</source>
          <target state="translated">PropertyChangedCallback は、読み取り/書き込みとしてオブジェクト モデルで定義されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is so PropertyChangedCallback can be adjusted after initialization of the &lt;xref:System.Windows.PropertyMetadata&gt; object itself.</source>
          <target state="translated">これは PropertyChangedCallback の初期化後に調整できるため、&lt;xref:System.Windows.PropertyMetadata&gt;オブジェクト自体です&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and the properties are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Attempting to set PropertyChangedCallback once &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">PropertyChangedCallback を&amp;1; 回だけ設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation reference.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の参照を実装します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Cannot set a metadata property once it is applied to a dependency property operation.</source>
          <target state="translated">依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>