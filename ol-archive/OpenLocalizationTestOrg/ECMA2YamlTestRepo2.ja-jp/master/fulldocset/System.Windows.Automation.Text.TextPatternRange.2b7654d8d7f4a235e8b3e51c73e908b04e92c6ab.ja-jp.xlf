<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ce462ec6d08f53e85ba17f2d1c8385fd5c72f20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Automation.Text.TextPatternRange.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0bd23aabe52ebb0c7c62a0529a0da824f1d0d05</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d4e5212b60b890f55de14778ddcb2b8d31f2f0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a span of continuous text in a <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> container.</source>
          <target state="translated">連続したテキストの範囲を表します、 <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コンテナーです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A TextPatternRange can represent an insertion point, a subset, or all of the text in a &lt;xref:System.Windows.Automation.TextPattern&gt; container.</source>
          <target state="translated">挿入ポイント、サブセット、またはすべてのテキストの TextPatternRange を表すことができます、&lt;xref:System.Windows.Automation.TextPattern&gt;コンテナー&lt;/xref:System.Windows.Automation.TextPattern&gt; 。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A TextPatternRange will become invalid if one of the following occurs: the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container changes because of some user activity, or the &lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt; method of &lt;xref:System.Windows.Automation.ValuePattern&gt; is used to programmatically change the value of the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container.</source>
          <target state="translated">TextPatternRange は、次のいずれかが発生した場合は無効になります: 内のテキスト、&lt;xref:System.Windows.Automation.TextPattern&gt;いくつかのユーザー アクティビティがあるため、コンテナーの変更、または&lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;メソッドの&lt;xref:System.Windows.Automation.ValuePattern&gt;をプログラムでのテキストの値を変更するために使用、&lt;xref:System.Windows.Automation.TextPattern&gt;コンテナー&lt;/xref:System.Windows.Automation.TextPattern&gt; &lt;/xref:System.Windows.Automation.ValuePattern&gt; &lt;/xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt; &lt;/xref:System.Windows.Automation.TextPattern&gt; 。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">追加倍数をサポートするテキスト コンテナー内の強調表示されたテキストのコレクションへの非結合選択します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">新しい選択の領域に、テキスト挿入ポイントに移動します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">低次元テキスト範囲を提供すると、カーソルが移動します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">テキスト プロバイダーは、複数をサポートしていない場合の非結合選択 (たとえば、&lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;の値が必要<bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).&lt;/xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Retrieves a new <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identical to the original <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> and inheriting all properties of the original.</source>
          <target state="translated">新しいを取得<bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>元と同じ<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>および元のすべてのプロパティを継承します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Alternatively, create a new &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; from the &lt;xref:System.Windows.Automation.TextPattern&gt; and move the two endpoints to correspond with the endpoints of the original text range.</source>
          <target state="translated">また、作成、新しい&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;から、&lt;xref:System.Windows.Automation.TextPattern&gt;し、元のテキスト範囲のエンドポイントに対応する&amp;2; つのエンドポイントを移動します&lt;/xref:System.Windows.Automation.TextPattern&gt;&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">新しい範囲は、元の個別に操作できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new text range.</source>
          <target state="translated">新しいテキスト範囲。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.</source>
          <target state="translated">Null 参照 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>で<ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>) は返されません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Returns a &lt;xref:System.Boolean&gt; value indicating whether the span (the <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> endpoint to the <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">返します、&lt;xref:System.Boolean&gt;を示す値かどうか、範囲 (、 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>エンドポイントを<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>エンドポイント) テキストの範囲は、別のテキスト範囲と同じです&lt;/xref:System.Boolean&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A text range to compare.</source>
          <target state="translated">比較するテキスト範囲。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the span of both text ranges is identical; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、両方のテキスト範囲が同じであります。それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">範囲の比較対象となる場合は、同じテキスト プロバイダーから発生しません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Int32&gt; indicating whether two text ranges have identical endpoints.</source>
          <target state="translated">返します、 &lt;xref:System.Int32&gt;2 つのテキスト範囲が同一のエンドポイントを持つかどうかを示すします&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</source>
          <target state="translated">同じテキスト範囲の開始と終了のエンドポイントを比較することによって、テキスト範囲が逆の場合、または論理テキスト フローの順序で、エンドポイントを識別できます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint of the caller.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>または<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>呼び出し元のエンドポイント。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The target range for comparison.</source>
          <target state="translated">比較対象の範囲です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint of the target.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>または<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>ターゲットのエンドポイント。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">ターゲット エンドポイントとテキストの前に、呼び出し元のエンドポイントが発生した場合は、負の値を返します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">呼び出し元のエンドポイントが、対象のエンドポイントと同じ場所にある場合は、0 を返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">呼び出し元のエンドポイントが、対象のエンドポイントとテキストの後で発生した場合は、正の値を返します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If range is a null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">範囲がある場合は null 参照 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>で<ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If range is from another container.</source>
          <target state="translated">範囲は別のコンテナーです。 場合、</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Expands the text range to the specified <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定したテキスト範囲を拡大<bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">範囲が既に指定された単位数が正確である場合は、変更されません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.</source>
          <target state="translated">ExpandToEnclosingUnit メソッドを正常に実行するためには、一連のアクションはバック グラウンドで実行されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, making the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲を縮小するは、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;エンドポイントを作成、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;エンドポイントは不要です&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要<ph id="ph1">`unit`</ph>境界。 たとえば、"{U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept>テキストに埋め込まれた"、"{"と"}"がテキスト範囲エンドポイント。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">結果として得られる範囲は逆方向、 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;、要求されたの先頭に<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id="ph1">`unit`</ph> boundaries.</source>
          <target state="translated">範囲を前方または後方に移動、&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;によって要求された数の<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">範囲が移動することによって、低次元テキスト範囲の状態から拡張し、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;要求された&amp;1; つのエンドポイント<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      &gt; <ph id="ph1">[!NOTE]</ph> &gt;  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated"><bpt id="p1">![</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p2">")</ept>テキスト範囲を Move() と ExpandToEnclosingUnit() に対して調整する方法の例 &gt; <ph id="ph1">[!NOTE]</ph> &gt; を完全な単語、文、または挿入ポイントでも仮想カーソル位置で段落全体を読み取る、スクリーン リーダーの一般的なであるために、これらの手順が必要です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>ExpandToEnclosingUnit respects both hidden and visible text.</source>
          <target state="translated">ExpandToEnclosingUnit は非表示と表示の両方のテキストを尊重いたします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI オートメーション クライアントがチェックできる、&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;テキスト表示可能範囲&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ExpandToEnclosingUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">ExpandToEnclosingUnit は、次に、ゆだねます最大&lt;xref:System.Windows.Automation.Text.TextUnit&gt;サポートされている場合、指定された&lt;xref:System.Windows.Automation.Text.TextUnit&gt;コントロールでサポートされていません&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">最大値、最小単位からの注文は、以下に記載されています。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;</source>
          <target state="translated">-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The textual unit.</source>
          <target state="translated">テキスト単位。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">指定した属性の値を持つテキスト範囲のサブセットを返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">表示と非表示のテキストの区別はありません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI オートメーション クライアントが使用できる&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;text の可視性を確認する&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 使用&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;ドキュメント全体を検索する&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The attribute to search for.</source>
          <target state="translated">検索対象の属性です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The attribute value to search for.</source>
          <target state="translated">検索する属性値。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">この値は、属性に指定された型と一致する必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>最初ではなく、最後に発生したテキスト範囲を返す場合それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A text range having a matching attribute and attribute value; otherwise null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">一致する属性と属性値を持つテキスト範囲それ以外の場合は null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>で<ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">指定したテキストを含むテキスト範囲のサブセットを返します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">表示と非表示のテキストの区別はありません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI オートメーション クライアントが使用できる&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;text の可視性を確認する&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 使用&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;ドキュメント全体を検索する&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The text string to search for.</source>
          <target state="translated">検索するテキスト文字列。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>最初ではなく、最後に発生したテキスト範囲を返す場合それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if case should be ignored; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、ケースを無視する必要があります。それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A text range matching the specified text; otherwise null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">指定したテキストに一致するテキスト範囲それ以外の場合は null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>で<ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified attribute across the entire text range.</source>
          <target state="translated">テキスト範囲全体の間で指定した属性の値を返します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">表示と非表示のテキストの区別はありません。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI オートメーション クライアントが使用できる&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;text の可視性を確認する&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The text attribute.</source>
          <target state="translated">テキスト属性。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified attribute.</source>
          <target state="translated">指定した属性の値を返します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</source>
          <target state="translated">たとえば、GetAttributeValue(TextPattern.FontNameAttribute) 場合は返しますフォント名を表す文字列、そのテキスト範囲の一意なはブール値を返します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern.MixedAttributeValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern.MixedAttributeValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>がテキスト範囲で指定した属性の値が異なる場合。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement.NotSupported"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement.NotSupported"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定した属性がプロバイダーまたはコントロールによってサポートされていない場合。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">指定した属性が無効な場合は。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">外接する四角形、テキスト範囲内のテキストの各完全または部分的に表示されている行のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">外接する四角形の各完全または部分的なテキスト行のテキスト範囲内の配列。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An empty array for a degenerate text range.</source>
          <target state="translated">低次元テキスト範囲の空の配列。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">完全に画面外となる、画面座標を持つテキスト範囲の空の配列は、スクロール見えない、または重なったウィンドウによって隠されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">テキスト範囲内にあるすべての埋め込みオブジェクトのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A collection of all child objects that fall within the range.</source>
          <target state="translated">範囲内にあるすべての子オブジェクトのコレクション。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">重なっている範囲とが完全で囲まれていない子はコレクションにも含まれます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">子オブジェクトが存在しない場合は、空のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the innermost <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encloses the text range.</source>
          <target state="translated">最も内側の返します<bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を囲むテキスト範囲。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The enclosing &lt;xref:System.Windows.Automation.AutomationElement&gt;, typically the text provider that supplies the text range.</source>
          <target state="translated">囲んでいる&lt;xref:System.Windows.Automation.AutomationElement&gt;、通常、テキスト範囲を提供するテキスト プロバイダー&lt;/xref:System.Windows.Automation.AutomationElement&gt; 。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">ただし、テキスト プロバイダーは、テーブル、ハイパーリンクなどの子要素をサポートする場合、外側の要素、テキスト プロバイダーの子孫可能性があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The innermost element enclosing the caller.</source>
          <target state="translated">呼び出し元を囲む最も内側の要素。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns the plain text of the text range.</source>
          <target state="translated">テキスト範囲のプレーン テキストを返します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>GetText respects both hidden and visible text.</source>
          <target state="translated">GetText は非表示と表示の両方のテキストを尊重いたします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI オートメーション クライアントがチェックできる、&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;テキスト表示可能範囲&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">場合<ph id="ph1">`maxLength`</ph>長さを超える値は、呼び出し元のテキスト範囲の返される文字列はテキスト範囲のプレーン テキストになります。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated">テキスト フロー; 内のエンドポイントの順序によって GetText に影響はありません。常に論理テキスト フローの順序で、テキスト範囲の開始と終了のエンドポイント間でテキストが返されます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The maximum length of the string to return.</source>
          <target state="translated">返される文字列の最大長。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`-1`</ph> if no limit is required.</source>
          <target state="translated">使用して<ph id="ph1">`-1`</ph>制限が必要ない場合。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The plain text of the text range, possibly truncated at the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">指定したで切り捨てられる可能性があります、テキスト範囲のプレーン テキスト<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept> is less than -1.</source>
          <target state="translated">場合<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">maxLength</ph> <ept id="p1">&lt;/code&gt;</ept> -1 未満です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">テキスト範囲指定されたテキスト単位数を移動します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.</source>
          <target state="translated">テキスト範囲の内容を走査する必要があるときに、一連の手順がその背後移動メソッドが正常に実行する順序で関連します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲が折りたたまれているは、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;これにより、エンドポイント、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;エンドポイントは不要です&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要<ph id="ph1">`unit`</ph>境界。 たとえば、"{U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept>テキストに埋め込まれた"、"{"と"}"がテキスト範囲エンドポイント。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">結果として得られる範囲は逆方向、 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;、要求されたの先頭に<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id="ph1">`unit`</ph> boundaries.</source>
          <target state="translated">範囲を前方または後方に移動、&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;によって要求された数の<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">範囲が移動することによって、低次元テキスト範囲の状態から拡張し、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;要求された&amp;1; つのエンドポイント<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated"><bpt id="p1">![</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p2">")</ept>を Move() と ExpandToEnclosingUnit() テキスト コンテンツ (内部テキ スト) コンテナーのテキストとハイパーリンクやテーブルのセルなど、埋め込みオブジェクトのテキスト範囲を調整する方法の例は、コントロール ビューとのコンテンツ ビューの両方で&amp;1; つは、継続的なテキスト ストリームとして公開される、<ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph>ツリー、オブジェクトの境界は無視されます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">UI オートメーション クライアントは、列挙、解釈、または何らかの方法で分析することを目的としてテキストを取得するが、テキスト範囲がテキストのコンテンツやその他の埋め込みオブジェクトを含むテーブルなどの特殊なケースについて確認する必要があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">これには、呼び出すことによって&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;を取得する、&lt;xref:System.Windows.Automation.AutomationElement&gt;オブジェクトと呼び出すことで、各埋め込みの&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;; の各要素のテキスト範囲を取得するすべてのテキスト コンテンツが取得されるまで再帰的にはこれは、&lt;/xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; &lt;/xref:System.Windows.Automation.AutomationElement&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>埋め込みオブジェクトにまたがるテキスト範囲。<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>埋め込みオブジェクトにまたがるテキスト範囲。<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.</source>
          <target state="translated">埋め込みオブジェクトとその範囲を含むテキスト ストリームの例は、移動点両方非表示にし、表示されるテキストを範囲します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI オートメーション クライアントがチェックできる、&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;テキスト表示可能範囲&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Move defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">移動は、次に、ゆだねます最大&lt;xref:System.Windows.Automation.Text.TextUnit&gt;サポートされている場合、指定された&lt;xref:System.Windows.Automation.Text.TextUnit&gt;コントロールでサポートされていません&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">最大値、最小単位からの注文は、以下に記載されています。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      &gt; <ph id="ph1">[!NOTE]</ph> &gt;  The text is not altered in any way as the text range just spans a different part of the text.</source>
          <target state="translated">- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&gt; <ph id="ph1">[!NOTE]</ph> &gt; だけにまたがるテキストの別の部分をテキスト範囲と任意の方法で、テキストは変更されません&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The text unit boundary.</source>
          <target state="translated">テキスト単位の境界。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The number of text units to move.</source>
          <target state="translated">移動するテキスト単位の数。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">正の値、テキスト範囲を前方に移動する、負の値はテキスト範囲を後方に移動および 0 は影響を与えません。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The number of units actually moved.</source>
          <target state="translated">実際に移動した単位の数。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange*&gt; endpoints.</source>
          <target state="translated">新しいテキスト範囲のエンドポイントのいずれかがより大きいまたは小さいかどうかに要求した数よりも小さくなることより、&lt;xref:System.Windows.Automation.TextPattern.DocumentRange*&gt;エンドポイント&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange*&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">テキスト範囲の&amp;1; つのエンドポイントを&amp;2; つ目のテキスト範囲の指定されたエンドポイントに移動します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; is always less than or equal to &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).</source>
          <target state="translated">移動中のエンドポイントが同じテキスト範囲の他のエンドポイントを越えるかどうかは、その他のエンドポイントはまた、低次元テキスト範囲し、正しい順序に基づいて、エンドポイントの移動 (つまり、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;は常に以下に&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
          <target state="translated">移動するエンドポイント。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Another range from the same text provider.</source>
          <target state="translated">同じテキスト プロバイダーから別の範囲です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An endpoint on the other range.</source>
          <target state="translated">他の範囲にあるエンドポイント。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of the text range the specified number of <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>s within the document range.</source>
          <target state="translated">テキストの&amp;1; つのエンドポイントの範囲は指定された数の移動<bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>分、ドキュメントの範囲内で。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the &lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt; method to execute successfully.</source>
          <target state="translated">その背後の順序で、一連の手順が関係するテキスト範囲の内容を走査する必要があるときに、&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;メソッドを正常に実行する&lt;/xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲が折りたたまれているは、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;これにより、エンドポイント、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;エンドポイントは不要です&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要<ph id="ph1">`unit`</ph>境界。 たとえば、"{U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept>テキストに埋め込まれた"、"{"と"}"がテキスト範囲エンドポイント。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">結果として得られる範囲は逆方向、 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;、要求されたの先頭に<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">範囲が移動することによって、低次元テキスト範囲の状態から拡張し、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;要求された&amp;1; つのエンドポイント<ph id="ph1">`unit`</ph>境界&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated"><bpt id="p1">![</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>移動 &gt;/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整<ept id="p2">")</ept>を Move() と ExpandToEnclosingUnit() テキスト コンテンツ (内部テキ スト) コンテナーのテキストとハイパーリンクやテーブルのセルなど、埋め込みオブジェクトのテキスト範囲を調整する方法の例は、コントロール ビューとのコンテンツ ビューの両方で&amp;1; つは、継続的なテキスト ストリームとして公開される、<ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph>ツリー、オブジェクトの境界は無視されます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">UI オートメーション クライアントは、列挙、解釈、または何らかの方法で分析することを目的としてテキストを取得するが、テキスト範囲がテキストのコンテンツやその他の埋め込みオブジェクトを含むテーブルなどの特殊なケースについて確認する必要があります。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">これには、呼び出すことによって&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;を取得する、&lt;xref:System.Windows.Automation.AutomationElement&gt;オブジェクトと呼び出すことで、各埋め込みの&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;; の各要素のテキスト範囲を取得するすべてのテキスト コンテンツが取得されるまで再帰的にはこれは、&lt;/xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; &lt;/xref:System.Windows.Automation.AutomationElement&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>埋め込みオブジェクトにまたがるテキスト範囲。<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>埋め込みオブジェクトにまたがるテキスト範囲。<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example of a text stream with embedded objects and their range spans       MoveEndpointByUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">埋め込みオブジェクトと MoveEndpointByUnit は次の範囲を含むテキスト ストリームの例を最大&lt;xref:System.Windows.Automation.Text.TextUnit&gt;サポートされている場合、指定された&lt;xref:System.Windows.Automation.Text.TextUnit&gt;コントロールでサポートされていません&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">最大値、最小単位からの注文は、以下に記載されています。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;</source>
          <target state="translated">-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
          <target state="translated">移動するエンドポイント。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The textual unit for moving.</source>
          <target state="translated">移動するためのテキスト単位。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The number of units to move.</source>
          <target state="translated">移動する単位の数。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A positive count moves the endpoint forward.</source>
          <target state="translated">正の数は、エンドポイントを前方移動します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A negative count moves backward.</source>
          <target state="translated">負の数は後方に移動します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A count of 0 has no effect.</source>
          <target state="translated">0 のカウントは、影響を与えません。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">ユニットの数が実際に移動することができます要求された場合の値より小さい移動するエンドポイントが先頭またはドキュメントの末尾に達した。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Removes a highlighted section of text, corresponding to the calling text range <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">呼び出し元のテキスト範囲に対応するテキストの強調表示されたセクションを削除<bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>複数をサポートするテキスト コンテナー内の強調表示されたテキストの既存のコレクションから、エンドポイントの非結合選択します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">テキスト挿入ポイントが削除された強調表示の領域に移動します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">低次元テキスト範囲を提供すると、カーソルが移動します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">テキスト プロバイダーは、複数をサポートしていない場合の非結合選択 (たとえば、&lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;の値が必要<bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).&lt;/xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">テキスト コントロールにテキスト範囲がビューポート内に表示されるまで垂直方向にスクロールさせます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>ScrollIntoView respects both hidden and visible text.</source>
          <target state="translated">ScrollIntoView は非表示と表示の両方のテキストを尊重いたします。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI オートメーション クライアントがチェックできる、&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;テキスト表示可能範囲&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">テキスト範囲が表示されていない場合、テキスト コントロールは非表示のテキストは、ビューポートのアンカーを持つ場合だけスクロールします。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the text control should be scrolled so the text range is flush with the top of the viewport; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if it should be flush with the bottom of the viewport.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>テキスト コントロールをスクロール、テキスト範囲は、ビューポートの上辺と揃える場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>場合は、ビューポートの底辺と揃える場合があります。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If scrolling is not supported by the control.</source>
          <target state="translated">場合は、コントロールでは、スクロールすることはできません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Highlights text in the text control corresponding to the text range <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoints.</source>
          <target state="translated">テキスト範囲に対応するテキスト コントロール内のテキストを強調表示<bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と<bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>エンドポイント。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If a degenerate text range is provided, the text insertion point will move to the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint of the text range.</source>
          <target state="translated">低次元テキスト範囲を指定する場合、テキスト挿入ポイントに移動、&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;テキスト範囲のエンドポイント&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">テキスト選択範囲が、テキスト コントロールでサポートされていないときに発生します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with the text range.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>テキスト範囲に関連付けられています。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The text provider.</source>
          <target state="translated">テキスト プロバイダー。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>