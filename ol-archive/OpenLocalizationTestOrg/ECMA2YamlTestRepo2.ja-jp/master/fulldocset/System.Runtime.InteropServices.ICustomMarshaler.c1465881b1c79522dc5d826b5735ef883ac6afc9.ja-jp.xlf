<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac9498873469daff17ad3b38bfa9cf967028530a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ICustomMarshaler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3d7a3ab780f03841c56c39fd70df4d6e43792f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d826986e297e5e712358c7a49dc0ecaf8dc024fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom wrappers for handling method calls.</source>
          <target state="translated">メソッドの呼び出しを処理するためのカスタム ラッパーを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A marshaler provides a bridge between the functionality of old and new interfaces.</source>
          <target state="translated">マーシャラーは、従来の機能と新しいインターフェイス間のブリッジを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom marshaling provides the following benefits:      -   It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</source>
          <target state="translated">次の利点は、カスタム マーシャ リング:-これにより、古いも新しいインターフェイスを実装しているサーバーを使用するインターフェイスを使用するように設計されたクライアント アプリケーション。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   It enables client applications built to work with a new interface to work with servers that implement an old interface.</source>
          <target state="translated">-これは、古いインターフェイスを実装しているサーバーを使用するクライアント アプリケーションの新しいインターフェイスを使用するビルドを使用できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</source>
          <target state="translated">マーシャ リング動作の違いを導入するか、コンポーネント オブジェクト モデル (COM) を別の方法で公開されるインターフェイスがある場合は、相互運用マーシャラーを使用する代わりに、カスタム マーシャラーを設計することができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</source>
          <target state="translated">カスタム マーシャラーを使用すると、.NET Framework コンポーネントを新規と既存の COM コンポーネントの違いを最小限に抑えることができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, suppose that you are developing a managed interface called <ph id="ph1">`INew`</ph>.</source>
          <target state="translated">たとえばと呼ばれる管理対象のインターフェイスを開発している<ph id="ph1">`INew`</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</source>
          <target state="translated">このインターフェイスは、標準の COM 呼び出し可能ラッパー (CCW) を介して COM に公開される、ときに同じメソッドは、マネージ インターフェイスとし、相互運用マーシャラーに組み込まれているマーシャ リング規則を使用します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Now suppose that a well-known COM interface called <ph id="ph1">`IOld`</ph> already provides the same functionality as the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">たとえば、既知の COM インターフェイスが呼び出されること<ph id="ph1">`IOld`</ph>と同じ機能が既に提供されて、<ph id="ph2">`INew`</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By designing a custom marshaler, you can provide an unmanaged implementation of <ph id="ph1">`IOld`</ph> that simply delegates the calls to the managed implementation of the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">カスタム マーシャラーを設計することでは、アンマネージ実装を提供できる<ph id="ph1">`IOld`</ph>のマネージ実装への呼び出しを代行する、<ph id="ph2">`INew`</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</source>
          <target state="translated">したがって、カスタム マーシャラーは、マネージ コードとアンマネージ インターフェイス間の仲介役として機能します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; マネージ ディスパッチ専用インターフェイスでアンマネージ コードにコードをから呼び出すときに、カスタム マーシャラーは呼び出されません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Defining the Marshaling Type    Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</source>
          <target state="translated">定義すると、マーシャ リング型の前に、カスタム マーシャラーをビルドすることができます、マーシャ リングは、マネージ コードとアンマネージ インターフェイスを定義する必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</source>
          <target state="translated">これらのインターフェイスは、よく同じ機能を実行がマネージ コードとアンマネージ オブジェクトに異なる方法で公開されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</source>
          <target state="translated">マネージ コンパイラは、メタデータからマネージ インターフェイスを生成し、結果として得られるインターフェイスは他のマネージ インターフェイスのようになります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows a typical interface.</source>
          <target state="translated">次の例では、代表的なインターフェイスを示します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept><ept id="p5">]</ept>       You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept> <ept id="p5">]</ept>アンマネージ型のインターフェイス定義言語 (IDL) を定義して、Microsoft インターフェイス定義言語 (MIDL) コンパイラでコンパイルします。    </target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</source>
          <target state="translated">ライブラリ ステートメント内のインターフェイスを定義し、それを割り当てますユニバーサル一意識別子 (UUID) 属性を持つインターフェイス ID を次の例に示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>       The MIDL compiler produces several output files.</source>
          <target state="translated"><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>MIDL コンパイラでは、いくつかの出力ファイルを生成します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the interface is defined in Old.idl, the output file Old_i.c defines a <ph id="ph1">`const`</ph> variable with the interface identifier (IID) of the interface, as the following example demonstrates.</source>
          <target state="translated">出力ファイル Old_i.c 定義、インターフェイスが Old.idl で定義されている場合、<ph id="ph1">`const`</ph>次の例で示すように、インターフェイスのインターフェイス id (IID) 変数です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>       The Old.h file is also produced by MIDL.</source>
          <target state="translated"><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>Old.h ファイルも、MIDL によって生成されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It contains a C++ definition of the interface that can be included in your C++ source code.</source>
          <target state="translated">C++ ソース コードに含めることができるインターフェイスの C++ の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implementing the ICustomMarshaler Interface    Your custom marshaler must implement the ICustomMarshaler interface to provide the appropriate wrappers to the runtime.</source>
          <target state="translated">ICustomMarshaler インターフェイス、カスタム マーシャラーの実装と、ランタイムに適切なラッパーを提供する ICustomMarshaler インターフェイスを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following C# code displays the base interface that must be implemented by all custom marshalers.</source>
          <target state="translated">次の c# コードでは、すべてのカスタム マーシャラーで実装する必要がある基本インターフェイスを表示します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept><ept id="p5">]</ept>       The ICustomMarshaler interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept> <ept id="p5">]</ept> ICustomMarshaler インターフェイスには、換算のサポート、クリーンアップのサポート、およびマーシャ リングするデータに関する情報を提供するメソッドが含まれています。    </target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>|Type of operation|ICustomMarshaler method|Description|   |-----------------------|-----------------------------|-----------------|   |Conversion (from native to managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|Marshals a pointer to native data into a managed object.</source>
          <target state="translated">|操作の種類 |ICustomMarshaler メソッド |説明 |  |-----------------------|-----------------------------|-----------------|  |変換 (ネイティブ コードからマネージ コードへ) |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|マネージ オブジェクトにネイティブ データへのポインターをマーシャ リングします&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">このメソッドは、引数として渡されるアンマネージ インターフェイスをマーシャ リングできるカスタム ランタイム呼び出し可能ラッパー (RCW) を返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom RCW for that type.|   |Conversion (from managed to native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|Marshals a managed object into a pointer to native data.</source>
          <target state="translated">マーシャラーは、カスタム RCW をその型のインスタンスを返す必要があります |。  |変換 (マネージ コードからネイティブ コード) |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|ネイティブ データへのポインターにマネージ オブジェクトをマーシャ リングします&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">このメソッドは、カスタム COM 呼び出し可能ラッパー (CCW) を引数として渡されるマネージ インターフェイスをマーシャ リングできるを返します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom CCW for that type.|   |Cleanup (of native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.|   |Cleanup (of managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.|   |Information (about native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|Returns the size of the unmanaged data to be marshaled.|      ### Conversion    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;       Marshals a pointer to native data into a managed object.</source>
          <target state="translated">マーシャラーは、その型のカスタムの CCW のインスタンスを返す必要があります |。  |ネイティブ コードのクリーンアップ |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;メソッドによって返されるネイティブのデータ (CCW) をクリーンアップするマーシャラーを有効にします |。  |マネージ コードのクリーンアップ |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;メソッドによって返される管理対象のデータ (RCW) をクリーンアップするマーシャラーを有効にします |。  |(ネイティブ コード) に関する情報 |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|マーシャ リングされるアンマネージ データのサイズを返します |。     ### 変換&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;マネージ オブジェクトにネイティブ データへのポインターをマーシャ リングします&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">このメソッドは、引数として渡されるアンマネージ インターフェイスをマーシャ リングできるカスタム ランタイム呼び出し可能ラッパー (RCW) を返します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
          <target state="translated">マーシャラーは、その型のカスタム RCW のインスタンスを返す必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;       Marshals a managed object into a pointer to native data.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;ネイティブ データへのポインターにマネージ オブジェクトをマーシャ リングします。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">このメソッドは、カスタム COM 呼び出し可能ラッパー (CCW) を引数として渡されるマネージ インターフェイスをマーシャ リングできるを返します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
          <target state="translated">マーシャラーは、その型のカスタムの CCW のインスタンスを返す必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Cleanup    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.</source>
          <target state="translated">クリーンアップ&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;、マーシャラーによって返されるネイティブのデータ (CCW) をクリーンアップできるように、&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;メソッド&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;使用すると、マネージ データ (RCW) によって返されるをクリーンアップするマーシャラー、&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;メソッド&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Size Information    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;       Returns the size of the unmanaged data to be marshaled.</source>
          <target state="translated">サイズ情報を&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;マーシャ リングされるアンマネージ データのサイズを返します&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Implementing the GetInstance Method    In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a <ph id="ph1">`static`</ph> method called <ph id="ph2">`GetInstance`</ph> that accepts a &lt;xref:System.String&gt; as a parameter and has a return type of ICustomMarshaler.</source>
          <target state="translated">ICustomMarshaler インターフェイスを実装するだけでなく GetInstance メソッドを実装するカスタム マーシャラーを実装する必要があります、<ph id="ph1">`static`</ph>呼び出されるメソッド<ph id="ph2">`GetInstance`</ph>を受け入れる、&lt;xref:System.String&gt;をパラメーターとして ICustomMarshaler の戻り値の型を持つ&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`static`</ph> method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</source>
          <target state="translated">これは、<ph id="ph1">`static`</ph>メソッドは、カスタム マーシャラーのインスタンスをインスタンス化する共通言語ランタイムの COM 相互運用層によって呼び出されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The string that is passed to <ph id="ph1">`GetInstance`</ph> is a cookie that the method can use to customize the returned custom marshaler.</source>
          <target state="translated">渡される文字列<ph id="ph1">`GetInstance`</ph>メソッドが返されるカスタム マーシャラーのカスタマイズに使用できる cookie は、します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>      ## Applying MarshalAsAttribute    To use a custom marshaler, you must apply the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to the parameter or field that is being marshaled.</source>
          <target state="translated"><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>## MarshalAsAttribute を適用する、カスタム マーシャラーを使用して、適用する必要があります、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;属性をパラメーターまたはマーシャ リングされるフィールド&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You must also pass the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;constructor.</source>
          <target state="translated">渡す必要があります、&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;列挙体の値、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;コンス トラクター&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In addition, you must specify the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field with one of the following named parameters:      -   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; (required): The assembly-qualified name of the custom marshaler.</source>
          <target state="translated">さらに、指定する必要があります、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;フィールドに名前付きパラメーターが次のいずれか:- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;(必須): カスタム マーシャラーのアセンブリ修飾名&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name should include the namespace and class of the custom marshaler.</source>
          <target state="translated">名前には、名前空間とカスタム マーシャラーのクラスを含める必要があります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</source>
          <target state="translated">カスタム マーシャラーがで使用されているアセンブリで定義されていない場合が定義されているアセンブリの名前を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  You can use the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; field instead of the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用することができます、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;の代わりにフィールド、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;フィールド&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; takes a type that is easier to specify.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;型を受け取り、指定する方が簡単です。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt; (optional): A cookie that is passed to the custom marshaler.</source>
          <target state="translated">- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;(省略可能): カスタム マーシャラーに渡される cookie&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt; 。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use the cookie to provide additional information to the marshaler.</source>
          <target state="translated">Cookie を使用するには、マーシャラーに追加情報を提供します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</source>
          <target state="translated">たとえば、同じマーシャラーを介してラッパーの番号を指定する場合に、cookie は、特定のラッパーを識別します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The cookie is passed to the <ph id="ph1">`GetInstance`</ph> method of the marshaler.</source>
          <target state="translated">渡される cookie、<ph id="ph1">`GetInstance`</ph>マーシャラーのメソッドです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute identifies the custom marshaler so it can activate the appropriate wrapper.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;属性が、適切なラッパーをアクティブ化することができますので、カスタム マーシャラーを識別します&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</source>
          <target state="translated">共通言語ランタイムの相互運用機能のサービスは、属性を検査し、カスタム マーシャラー最初の時間をマーシャ リングする引数 (パラメーターやフィールド) のニーズを作成します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The runtime then calls the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; and &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; methods on the custom marshaler to activate the correct wrapper to handle the call.</source>
          <target state="translated">ランタイムが呼び出すし、&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;と&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;メソッドの呼び出しを処理する、正しいラッパーをアクティブ化するカスタム マーシャラーを&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using a Custom Marshaler    When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</source>
          <target state="translated">使用して、カスタム マーシャラー カスタム マーシャラーが完了すると、特定の種類のカスタム ラッパーとして使用できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example shows the definition of the <ph id="ph1">`IUserData`</ph> managed interface:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept><ept id="p5">]</ept>       In the following example, the <ph id="ph2">`IUserData`</ph> interface uses the <ph id="ph3">`NewOldMarshaler`</ph> custom marshaler to enable unmanaged client applications to pass an <ph id="ph4">`IOld`</ph> interface to the <ph id="ph5">`DoSomeStuff`</ph> method.</source>
          <target state="translated">次の例は、定義を示しています、<ph id="ph1">`IUserData`</ph>マネージ インターフェイス: <bpt id="p1">[!code-cpp</bpt> <bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept> <ept id="p5">]</ept>次の例で、<ph id="ph2">`IUserData`</ph>インターフェイスの使用、<ph id="ph3">`NewOldMarshaler`</ph>をアンマネージ クライアント アプリケーションに渡すを有効にするカスタム マーシャラー、<ph id="ph4">`IOld`</ph>へのインターフェイス、<ph id="ph5">`DoSomeStuff`</ph>メソッドです。    </target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The managed description of the <ph id="ph1">`DoSomeStuff`</ph> method takes an <ph id="ph2">`INew`</ph> interface, as shown in the previous example, whereas the unmanaged version of <ph id="ph3">`DoSomeStuff`</ph> takes an <ph id="ph4">`IOld`</ph> interface pointer, as shown in the following example.</source>
          <target state="translated">管理対象の説明、<ph id="ph1">`DoSomeStuff`</ph>メソッドは、<ph id="ph2">`INew`</ph>一方、前の例で示すように、インターフェイスのアンマネージ バージョン<ph id="ph3">`DoSomeStuff`</ph>受け取り、<ph id="ph4">`IOld`</ph>インターフェイス ポインター、次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>       The type library that is generated by exporting the managed definition of <ph id="ph2">`IUserData`</ph> yields the unmanaged definition shown in this example instead of the standard definition.</source>
          <target state="translated"><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>マネージ定義をエクスポートすることによって生成されるタイプ ライブラリ<ph id="ph2">`IUserData`</ph>標準の定義ではなく、この例に示すアンマネージ定義を生成します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute applied to the <ph id="ph1">`INew`</ph> argument in the managed definition of the <ph id="ph2">`DoSomeStuff`</ph> method indicates that the argument uses a custom marshaler, as the following example shows.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;に適用された属性、<ph id="ph1">`INew`</ph>のマネージ定義の引数、<ph id="ph2">`DoSomeStuff`</ph>メソッド引数が次の例のように、カスタム マーシャラーを使用することを示します&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept>       <bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept>  <bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept>  <bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept><ept id="p11">]</ept>       In the previous examples, the first parameter provided to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute is the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept><bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept><bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept> <ept id="p11">]</ept>に前の例で、最初のパラメーターが提供される、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;属性は、&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;列挙値<ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>&lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;。               </target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second parameter is the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field, which provides the assembly-qualified name of the custom marshaler.</source>
          <target state="translated">2 番目のパラメーターは、&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;フィールドには、カスタム マーシャラーのアセンブリ修飾名を提供します&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This name consists of the namespace and class of the custom marshaler (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</source>
          <target state="translated">この名前は、名前空間とカスタム マーシャラーのクラス (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
          <target state="translated">不要になったときに、管理対象のデータの必要なクリーンアップを実行します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The managed object to be destroyed.</source>
          <target state="translated">マネージ オブジェクトを破棄します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
          <target state="translated">不要になったときに、アンマネージ データの必要なクリーンアップを実行します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be destroyed.</source>
          <target state="translated">破棄するアンマネージ データへのポインター。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the size of the native data to be marshaled.</source>
          <target state="translated">マーシャ リングするネイティブのデータのサイズを返します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the native data.</source>
          <target state="translated">ネイティブ データのバイト単位のサイズ。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts the managed data to unmanaged data.</source>
          <target state="translated">管理対象のデータをアンマネージ データに変換します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The managed object to be converted.</source>
          <target state="translated">変換するマネージ オブジェクト。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to the COM view of the managed object.</source>
          <target state="translated">マネージ オブジェクトの COM のビューへのポインター。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Converts the unmanaged data to managed data.</source>
          <target state="translated">アンマネージ データを管理対象のデータに変換します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be wrapped.</source>
          <target state="translated">ラップされるアンマネージ データへのポインター。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that represents the managed view of the COM data.</source>
          <target state="translated">COM のデータのマネージ ビューを表すオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>