<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc96f5d826913c72f4b28898e711248f18446e84</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.IDesignerSerializationManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3325d71e29da63851ddbbd328e6f975b1c257023</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0c7a907a00a6ba1e153d6d7eb21a26b8486e3ba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an interface that can manage design-time serialization.</source>
          <target state="translated">デザイン時シリアル化を管理できるインターフェイスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A designer can utilize IDesignerSerializationManager to access services useful to managing design-time serialization processes.</source>
          <target state="translated">デザイナーは、サービスにアクセスするデザイン時シリアル化プロセスの管理に役立つ IDesignerSerializationManager を利用できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.</source>
          <target state="translated">たとえば、デザイナーのシリアル化マネージャーを実装するクラスでは、オブジェクトを作成、型の検索、オブジェクトの識別、および特定の種類のシリアル化をカスタマイズするこのインターフェイスを使用できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds the specified serialization provider to the serialization manager.</source>
          <target state="translated">指定したシリアル化プロバイダーをシリアル化マネージャーに追加します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This method adds a custom serialization provider to the serialization manager.</source>
          <target state="translated">このメソッドは、カスタムのシリアル化プロバイダーをシリアル化マネージャーに追加します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Serialization providers can provide custom serializers for a particular type of object or set of types of objects.</source>
          <target state="translated">シリアル化プロバイダーは、カスタム シリアライザーをオブジェクトの特定の種類またはオブジェクトの種類のセットを提供できます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one.</source>
          <target state="translated">1 つを提供する場合、シリアル化中に、各カスタム シリアル化プロバイダーは特定のデータ型のシリアライザーを返します照会されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.</source>
          <target state="translated">シリアル化マネージャーは、特定の型の既定のシリアライザーを使用する前に、このメソッドによって提供されるカスタム シリアライザーを使用します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The serialization provider to add.</source>
          <target state="translated">追加するシリアル化プロバイダー。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets a stack-based, user-defined storage area that is useful for communication between serializers.</source>
          <target state="translated">シリアライザー間の通信に役立つスタック ベースのユーザー定義のストレージ領域を取得します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This storage area provides communication of object context information to serializers.</source>
          <target state="translated">この記憶域は、シリアライザーをオブジェクト コンテキスト情報の通信を提供します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Context information about objects that are being serialized can be stored and accessed through this &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">シリアル化されるオブジェクトに関するコンテキスト情報を格納し、この&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt;を通じてアクセス</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that stores data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データを格納します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creates an instance of the specified type and adds it to a collection of named instances.</source>
          <target state="translated">指定した型のインスタンスを作成し、名前付きインスタンスのコレクションに追加します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Objects that implement &lt;xref:System.ComponentModel.IComponent&gt; are added to the design-time container if the <ph id="ph1">`addToContainer`</ph> parameter is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">実装するオブジェクト&lt;xref:System.ComponentModel.IComponent&gt;場合、デザイン時コンテナーに追加されます、<ph id="ph1">`addToContainer`</ph>パラメーターは<ph id="ph2">`true`</ph>&lt;/xref:System.ComponentModel.IComponent&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data type to create.</source>
          <target state="translated">作成するデータ型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor for this type.</source>
          <target state="translated">この型のコンス トラクターに渡す引数。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the object.</source>
          <target state="translated">オブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This name can be used to access the object later through &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt;.</source>
          <target state="translated">この名前は、 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt;を後でオブジェクトにアクセスするために使用できます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the object is still created but cannot be accessed by name.</source>
          <target state="translated">場合<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が渡されると、オブジェクトは作成されますが、名前でアクセスすることはできません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, this object is added to the design container.</source>
          <target state="translated">場合<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、このオブジェクトがデザイン コンテナーに追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The object must implement <bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this to have any effect.</source>
          <target state="translated">オブジェクトを実装する必要があります<bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これを有効にします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The newly created object instance.</source>
          <target state="translated">新しく作成されたオブジェクトのインスタンス。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets an instance of a created object of the specified name, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if that object does not exist.</source>
          <target state="translated">指定した名前の作成されたオブジェクトのインスタンスを取得または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>そのオブジェクトが存在しない場合。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name of the object to retrieve must have been set through a prior call to &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;前回の呼び出しから取得するオブジェクトの名前が設定されている必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the object to retrieve.</source>
          <target state="translated">取得するオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An instance of the object with the given name, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no object by that name can be found.</source>
          <target state="translated">指定された名前を持つオブジェクトのインスタンスまたは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>その名前のオブジェクトが見つからない場合。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the name of the specified object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object has no name.</source>
          <target state="translated">指定したオブジェクトの名前を取得または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトに名前がありません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The object to retrieve the name for.</source>
          <target state="translated">名前を取得するオブジェクト。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object is unnamed.</source>
          <target state="translated">オブジェクトの名前または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、オブジェクトは名前付きではありません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets a serializer of the requested type for the specified object type.</source>
          <target state="translated">指定したオブジェクトの種類の要求された型のシリアライザーを取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of the object to get the serializer for.</source>
          <target state="translated">シリアライザーを取得するオブジェクトの型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type of the serializer to retrieve.</source>
          <target state="translated">取得するシリアライザーの型。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An instance of the requested serializer, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no appropriate serializer can be located.</source>
          <target state="translated">要求したシリアライザーのインスタンスまたは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>適切なシリアライザーが見つからない場合。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets a type of the specified name.</source>
          <target state="translated">指定した名前の型を取得します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type to load.</source>
          <target state="translated">読み込む型の完全修飾名。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An instance of the type, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type cannot be loaded.</source>
          <target state="translated">型のインスタンスまたは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、型を読み込むことができません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indicates custom properties that can be serializable with available serializers.</source>
          <target state="translated">使用可能なシリアライザーを使用してシリアル化可能なことができるカスタム プロパティを示します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This property can contain an empty collection.</source>
          <target state="translated">このプロパティは、空のコレクションを含めることができます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A serializer should never assume that such properties exist.</source>
          <target state="translated">シリアライザーでは、このようなプロパティが存在する必要があります考えないでください。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A derived class or implementation of &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt; defines the set of properties that are exposed here.</source>
          <target state="translated">派生クラスまたはの実装の&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;ここで公開されているプロパティのセットを定義します&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.PropertyDescriptorCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the properties to be serialized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.PropertyDescriptorCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>シリアル化するプロパティを格納します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Removes a custom serialization provider from the serialization manager.</source>
          <target state="translated">シリアル化マネージャーからカスタムのシリアル化プロバイダーを削除します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The provider to remove.</source>
          <target state="translated">削除するプロバイダー。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This object must have been added using &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt;.</source>
          <target state="translated">このオブジェクト追加されている&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Reports an error in serialization.</source>
          <target state="translated">シリアル化でエラーを報告します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the serialization manager supports logging multiple errors in its implementation of ReportError, it can store the error information object for a future report where all the errors encountered can be displayed at once.</source>
          <target state="translated">シリアル化マネージャーは、その実装の ReportError で複数のエラーのログ記録をサポートする場合は、今後のレポートが発生したすべてのエラーを一度に表示することができますのエラー情報オブジェクトに格納できます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If this method stores multiple errors, serialization can continue after a call to this method.</source>
          <target state="translated">このメソッドは、複数のエラーを保存する場合、シリアル化は、このメソッドを呼び出した後に続行できます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.</source>
          <target state="translated">このメソッドが複数のエラーのログ記録をサポートしていない場合、このメソッドは、例外は、シリアル化を中止をスローする必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The serialization manager should never throw an exception for errors encountered during serialization.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; シリアル化マネージャーはシリアル化中に発生したエラーの例外はスローされません。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It should only throw an exception during deserialization.</source>
          <target state="translated">逆シリアル化中に例外をスローする必要がありますのみです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise, users become confused because saving the document should never fail.</source>
          <target state="translated">それ以外の場合、ユーザーがドキュメントを保存するため、混乱が失敗することはありません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The error to report.</source>
          <target state="translated">報告するエラー。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This information object can be of any object type.</source>
          <target state="translated">この情報オブジェクトは、どのオブジェクト型にできます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If it is an exception, the message of the exception is extracted and reported to the user.</source>
          <target state="translated">例外である場合、例外のメッセージが抽出され、ユーザーに報告します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If it is any other type, &lt;xref:System.Object.ToString*&gt; is called to display the information to the user.</source>
          <target state="translated">その他の任意の型の場合は&lt;xref:System.Object.ToString*&gt;をユーザーに情報を表示すると呼びます&lt;/xref:System.Object.ToString*&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt; cannot locate the specified name in the serialization manager's name table.</source>
          <target state="translated">発生したときに&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt;をシリアル化マネージャーの名前テーブルで、指定した名前を見つけることはできません&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency.</source>
          <target state="translated">このイベントは、シリアライザーは依存関係によって注文オブジェクトを作成する必要があるないように、シリアライザーをオンデマンドでオブジェクトを作成するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The delegate for this event is cleared immediately after serialization or deserialization is complete.</source>
          <target state="translated">逆シリアル化が完了またはこのイベントのデリゲートは、シリアル化の直後に消去されます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Occurs when serialization is complete.</source>
          <target state="translated">シリアル化が完了すると発生します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This event is raised when serialization or deserialization is complete.</source>
          <target state="translated">シリアル化または逆シリアル化が完了すると、このイベントが発生します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing.</source>
          <target state="translated">一般に、シリアル化コードは、シリアル化データを出力するが書き込まれ、チェックや処理の状態に関連する通常必要はありません。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the SerializationComplete event, and clear the data after serialization.</source>
          <target state="translated">シリアル化中に状態データを維持するために必要な場合は、データを設定し、SerializationComplete イベントをリッスンし、シリアル化後にデータをオフにするシリアライザーによってアクセスできます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.</source>
          <target state="translated">適切な状態の復元後、シリアライザーがシリアル化で再利用できるし、残された状態データまたは開いたストリーム正しいできないために、シリアル化が重要になることができます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished.</source>
          <target state="translated">たとえば、シリアライザーは、リソース ファイルなどの別のファイルに書き込む必要がある場合は、完了すると、ファイルを閉じるシリアライザーをデザインする効率的なはいないです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Serializing an object graph usually requires several serializers.</source>
          <target state="translated">通常、オブジェクト グラフをシリアル化するには、複数のシリアライザーが必要です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The resource file would be opened and closed many times.</source>
          <target state="translated">リソース ファイルを開き、何度もを終了するとします。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Instead, the resource file can be closed at the end of serialization by an object that listened to the SerializationComplete event.</source>
          <target state="translated">代わりに、リソース ファイルは、SerializationComplete イベントを受信待ちするオブジェクトをシリアル化の最後に終了できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Sets the name of the specified existing object.</source>
          <target state="translated">指定した既存のオブジェクトの名前を設定します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This method is useful when it is necessary to create and then name an instance of an object without using &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.</source>
          <target state="translated">このメソッドは、作成し、オブジェクトのインスタンスを名前&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;を使わずに必要な場合に便利です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.</source>
          <target state="translated">既存のオブジェクトの名前を変更しようとする場合、または新しいオブジェクトに既に使用されている名前を付けますしようとする場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The object instance to name.</source>
          <target state="translated">名前にオブジェクトのインスタンス。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The name to give the instance.</source>
          <target state="translated">インスタンスに付ける名前です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>