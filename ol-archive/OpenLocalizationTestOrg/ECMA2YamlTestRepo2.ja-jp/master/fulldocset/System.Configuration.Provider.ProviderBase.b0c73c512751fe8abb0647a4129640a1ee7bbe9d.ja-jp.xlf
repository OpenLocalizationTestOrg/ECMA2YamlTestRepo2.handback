<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a2e66d7e40f7d8d5870e92dedd9e93a02692fff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.Provider.ProviderBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e47c2c84dbad3c6f38682f4896fda5b166c0ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a873359f9eda2af2d96a9b44264d423d2bd93b50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base implementation for the extensible provider model.</source>
          <target state="translated">拡張可能なプロバイダー モデルの基本実装を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration.</source>
          <target state="translated">プロバイダー モデルは、メンバーシップ、プロファイル、および保護された構成など、ASP.NET の複数の機能の一部またはすべてをカプセル化するためのものです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality.</source>
          <target state="translated">これにより、開発者をカプセル化された機能の複数の実装を提供するサポート クラスを作成します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition, developers can write new features using the provider model.</source>
          <target state="translated">さらに、開発者は、プロバイダー モデルを使用して新しい機能を記述できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.</source>
          <target state="translated">機能コードを複製するか、実装メソッドを変更する必要がある場合は、アプリケーション層を変更せずに、機能の複数の実装をサポートする効果的な方法を指定できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers.</source>
          <target state="translated">ProviderBase クラスは、単純とのみを含む、いくつかの基本的な方法は、すべてのプロバイダーに共通するプロパティです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Feature-specific providers (such as &lt;xref:System.Web.Security.MembershipProvider&gt;) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support.</source>
          <target state="translated">機能固有のプロバイダー (など&lt;xref:System.Web.Security.MembershipProvider&gt;) ProviderBase から継承し、必要なメソッドとその機能の実装に固有のプロバイダーをサポートする必要があるプロパティを確立します&lt;/xref:System.Web.Security.MembershipProvider&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Implementation-specific providers (such as &lt;xref:System.Web.Security.SqlMembershipProvider&gt;) inherit in turn from a feature-specific provider (in this case, &lt;xref:System.Web.Security.MembershipProvider&gt;).</source>
          <target state="translated">実装に固有のプロバイダー (など&lt;xref:System.Web.Security.SqlMembershipProvider&gt;) 機能固有のプロバイダーからさらに継承 (この場合、 &lt;xref:System.Web.Security.MembershipProvider&gt;).&lt;/xref:System.Web.Security.MembershipProvider&gt; &lt;/xref:System.Web.Security.SqlMembershipProvider&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code.</source>
          <target state="translated">プロバイダー モデルの最も重要な点は、(たとえば、かどうかデータが保存される、テキスト ファイルとして、またはデータベース内) の実装は、アプリケーション コードから切り離されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of the implementation-specific provider for the given feature is designated in a configuration file.</source>
          <target state="translated">特定の機能の実装に固有のプロバイダーの種類は、構成ファイルで指定されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code.</source>
          <target state="translated">機能レベルのプロバイダーを構成ファイルからの型に読み込んで、機能コードに対するファクトリとして機能します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application developer can then use the feature classes in the application code.</source>
          <target state="translated">アプリケーション開発者は、アプリケーション コードで機能のクラスを使用できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.</source>
          <target state="translated">実装の種類ことができますにスワップ アウトする構成ファイルで別の実装方法に合わせてコードを書き換える必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership.</source>
          <target state="translated">ASP.NET に含まれているプロバイダーは、主に、データの永続性機能の実装プロファイルやメンバーシップなどの抽象化です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.</source>
          <target state="translated">ただし、このモデルは、抽象化され、複数の方法で実装されている可能性があります機能の他の任意の種類に適用できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Configuration.Provider.ProviderBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Configuration.Provider.ProviderBase"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</source>
          <target state="translated">管理ツールまたはその他のユーザー インターフェイス (Ui) での表示に適した簡単でわかりやすい説明を取得します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a configured provider does not supply a description, the value of the &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt; property is returned as a default.</source>
          <target state="translated">構成されているプロバイダーが、説明の値を指定しないかどうか、&lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt;プロパティは、既定値として返されます&lt;/xref:System.Configuration.Provider.ProviderBase.Name%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A brief, friendly description suitable for display in administrative tools or other UIs.</source>
          <target state="translated">簡単でわかりやすい説明管理ツールまたは他の Ui での表示に適したです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes the provider.</source>
          <target state="translated">プロバイダーを初期化します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The base class implementation internally tracks the number of times the provider's <ph id="ph1">`Initialize`</ph> method has been called.</source>
          <target state="translated">基本クラスの実装を内部的に追跡回数、プロバイダーの<ph id="ph1">`Initialize`</ph>メソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a provider is initialized more than once, an <ph id="ph1">`InvalidOperationException`</ph> is thrown stating that the provider is already initialized.</source>
          <target state="translated">プロバイダーが複数回初期化される場合、<ph id="ph1">`InvalidOperationException`</ph>プロバイダーが既に初期化されていることを示すがスローされます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because most feature providers call Initialize prior to performing provider-specific initialization, this method is a central location for preventing double initialization.</source>
          <target state="translated">ほとんどの機能のプロバイダーの呼び出しは、プロバイダー固有の初期化を実行する前に初期化するため、このメソッドは、二重の初期化を回避するための中央の場所をします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The friendly name of the provider.</source>
          <target state="translated">プロバイダーのフレンドリ名。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</source>
          <target state="translated">このプロバイダーの構成で指定されたプロバイダーに固有の属性を表す名前/値ペアのコレクション。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the provider is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">プロバイダーの名前は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The name of the provider has a length of zero.</source>
          <target state="translated">プロバイダーの名前が、長さが&amp;0; です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An attempt is made to call Initialize on a provider after the provider has already been initialized.</source>
          <target state="translated">プロバイダーは既に初期化された後、プロバイダーの初期化を呼びしようとしました。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the friendly name used to refer to the provider during configuration.</source>
          <target state="translated">構成時にプロバイダーを参照するために使用するフレンドリ名を取得します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The recommended pattern for this string is: [<bpt id="p1">*</bpt>Provider Creator<ept id="p1">*</ept>][<bpt id="p2">*</bpt>Implementation Type<ept id="p2">*</ept>][<bpt id="p3">*</bpt>Feature<ept id="p3">*</ept>]Provider.</source>
          <target state="translated">この文字列の推奨パターンは: [<bpt id="p1">*</bpt>プロバイダー作成者<ept id="p1">*</ept>] [<bpt id="p2">*</bpt>実装型<ept id="p2">*</ept>] [<bpt id="p3">*</bpt>機能<ept id="p3">*</ept>] プロバイダー。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the &lt;xref:System.Configuration.Provider.ProviderBase.Description%2A&gt; property also provides a friendly description, the Name property is used as an identifier for the provider.</source>
          <target state="translated">ただし、&lt;xref:System.Configuration.Provider.ProviderBase.Description%2A&gt;プロパティでは、わかりやすい説明もでは、Name プロパティがプロバイダーの識別子として使用します&lt;/xref:System.Configuration.Provider.ProviderBase.Description%2A&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The friendly name used to refer to the provider during configuration.</source>
          <target state="translated">構成時にプロバイダーを参照するために使用するフレンドリ名。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>