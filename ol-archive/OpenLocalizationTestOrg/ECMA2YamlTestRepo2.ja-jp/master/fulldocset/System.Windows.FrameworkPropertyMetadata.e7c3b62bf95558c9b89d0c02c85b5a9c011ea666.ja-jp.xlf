<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09a32cf05909536a9016c9613e848634f520d8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.FrameworkPropertyMetadata.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29b3c61b2644d36cb422407c298e0fbc1a081977</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3d94579fab6a7da9eb09e2f1fbaa83afdfae263</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</source>
          <target state="translated">報告またはフレームワーク固有のプロパティ システム特性を具体的には追加、依存関係プロパティのメタデータを適用します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class derives from &lt;xref:System.Windows.PropertyMetadata&gt; (through &lt;xref:System.Windows.UIPropertyMetadata&gt;) .</source>
          <target state="translated">このクラスから派生&lt;xref:System.Windows.PropertyMetadata&gt;(を通じて&lt;xref:System.Windows.UIPropertyMetadata&gt;).&lt;/xref:System.Windows.UIPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types &lt;xref:System.Windows.PropertyMetadata&gt; or &lt;xref:System.Windows.UIPropertyMetadata&gt;.</source>
          <target state="translated">ほとんどの WPF フレームワーク レベルのアプリケーション開発目的 FrameworkPropertyMetadata は依存関係プロパティのメタデータではなく、基本のメタデータの種類&lt;xref:System.Windows.PropertyMetadata&gt;または&lt;xref:System.Windows.UIPropertyMetadata&gt;。&lt;/xref:System.Windows.UIPropertyMetadata&gt;&lt;/xref:System.Windows.PropertyMetadata&gt;に使用される型</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is true both for existing dependency properties and for most custom dependency property scenarios.</source>
          <target state="translated">これは、既存の依存関係プロパティとカスタムの依存関係プロパティのほとんどのシナリオの両方に当てはまります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The members declared by this class that supplement the &lt;xref:System.Windows.PropertyMetadata&gt; base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</source>
          <target state="translated">これで宣言されたメンバー クラスの本追加ソフトウェア、&lt;xref:System.Windows.PropertyMetadata&gt;基底クラスは、さまざまなブール値のプロパティを指定するか、レポートのプロパティの継承、データ バインディング、レイアウトなどの WPF フレームワーク レベルのプロパティ システムの動作をします&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Several constructor signatures for creating a FrameworkPropertyMetadata instance take a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; parameter.</source>
          <target state="translated">FrameworkPropertyMetadata インスタンスを作成するためのいくつかのコンス トラクター シグネチャのかかる、&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;パラメーター&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; 。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;列挙型は、コンス トラクターで初期の動作を指定する場合にのみ使用および FrameworkPropertyMetadata が構築された後にそれ以外の場合、公開されません&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</source>
          <target state="translated">構築されたインスタンスを取得またはコンス トラクターの呼び出しで使用する列挙値の名前を共有するさまざまなプロパティで、対応する情報を設定できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    This class is not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスは、通常では使用されない XAML テキスト使用<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This signature initializes all values of FrameworkPropertyMetadata to their property defaults.</source>
          <target state="translated">この署名は、そのプロパティの既定値に FrameworkPropertyMetadata のすべての値を初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; will be <ph id="ph1">`null`</ph>, and the various &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; Boolean properties will be <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;なります<ph id="ph1">`null`</ph>と、さまざまな&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;ブール型プロパティがなります<ph id="ph2">`false`</ph>です&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified default value.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定された既定値を持つクラス。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">通常、特定の種類の値として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定したクラス<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>コールバック。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework-level metadata options.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フレームワーク レベルのメタデータのオプションと指定された既定値を持つクラス。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">セットの flags でフラグとしてマークされた値、<ph id="ph1">`flags`</ph>パラメーターのブール値が設定されます&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;と一致しているプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;フラグの名前を<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">メタデータが特定のプロパティのシステム操作に適用されていない限り、その後、メタデータでは、プロパティの値を変更できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">通常、特定の種類の値として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">メタデータのオプション フラグ (を組み合わせた<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定された既定値は、クラスし、指定された<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>コールバック。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">通常、特定の種類の値として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified callbacks.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したコールバック クラス。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This implementation calls a base initializer and then adds the <ph id="ph1">`coerceValueCallback`</ph> by setting the property on the base instance.</source>
          <target state="translated">この実装は、基本の初期化子を呼び出すし、追加、<ph id="ph1">`coerceValueCallback`</ph>ベースのインスタンスのプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;この依存関係プロパティ&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>した既定値とフレームワーク メタデータ オプションで、クラスし、指定された<bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>コールバック。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">セットの flags でフラグとしてマークされた値、<ph id="ph1">`flags`</ph>パラメーターのブール値が設定されます&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;と一致しているプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;フラグの名前を<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">通常、特定の種類の値として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">メタデータのオプション フラグ (を組み合わせた<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値)。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified callbacks.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>された既定値と指定したコールバック クラス。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">通常、特定の種類として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;この依存関係プロパティ&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified callbacks.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定値とフレームワーク メタデータ オプションでは、指定したコールバック クラス。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">セットの flags でフラグとしてマークされた値、<ph id="ph1">`flags`</ph>パラメーターのブール値が設定されます&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;と一致しているプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;フラグの名前を<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">通常、特定の種類として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">メタデータのオプション フラグ (を組み合わせた<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値)。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;このプロパティに対して&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>した既定値およびフレームワークのメタデータのオプション、指定したコールバック、およびブール値をプロパティのアニメーションを防ぐために使用できます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph>パラメーター&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;は、イミディ エイトの基本&lt;xref:System.Windows.UIPropertyMetadata&gt;クラス&lt;/xref:System.Windows.UIPropertyMetadata&gt;によって宣言されたプロパティ&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;の初期値の設定</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">セットの flags でフラグとしてマークされた値、<ph id="ph1">`flags`</ph>パラメーターのブール値が設定されます&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;と一致しているプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;フラグの名前を<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">通常、特定の種類として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">メタデータのオプション フラグ (を組み合わせた<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値)。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; on this dependency property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;この依存関係プロパティ&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティ システムがこのメタデータに適用されるプロパティをアニメーション化するを防ぎます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">このようなプロパティにアニメーション化が試行されると、プロパティのシステムから送信された、実行時に例外が発生します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to permit animating the property.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティをアニメーション化を許可します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定値およびフレームワークのメタデータを持つクラス オプションは、指定されたコールバックは、ブール値をアニメーションのプロパティと、データ バインディングの update トリガーの既定値を防ぐために使用できます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">指定された値の型<ph id="ph1">`defaultValue`</ph>にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">値&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph>パラメーター&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;は、イミディ エイトの基本&lt;xref:System.Windows.UIPropertyMetadata&gt;クラス&lt;/xref:System.Windows.UIPropertyMetadata&gt;によって宣言されたプロパティ&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;の初期値の設定</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information about the update source behavior for bindings, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">バインディング ソースの更新の動作の詳細については、次を参照してください。<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">セットの flags でフラグとしてマークされた値、<ph id="ph1">`flags`</ph>パラメーターのブール値が設定されます&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;と一致しているプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;フラグの名前を<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">通常、特定の種類として提供される、依存関係プロパティの既定値。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">メタデータのオプション フラグ (を組み合わせた<bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値)。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を&lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;このプロパティに対して&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティ システムがこのメタデータに適用されるプロパティをアニメーション化するを防ぎます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">このようなプロパティにアニメーション化が試行されると、プロパティのシステムから送信された、実行時に例外が発生します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for this property are applied that have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を持つこのプロパティのバインドが適用されるときに使用する、 <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 'éý' <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>設定されている<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</source>
          <target state="translated">取得またはレイアウト エンジンの操作中に、依存関係プロパティが配置パスに影響を与える可能性があるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;および&lt;xref:System.Windows.FrameworkContentElement&gt;の実装が含まれて&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element (a call to &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).</source>
          <target state="translated">ロジックの一環として、有効な値を変更し、AffectsArrange でメタデータを持つ依存関係プロパティを設定<ph id="ph1">`true`</ph>がその要素のビジュアルを無効化する遅延の要求を開始 (への呼び出し&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsArrange と依存関係プロパティを検索する必要はありません。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">カスタム&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;実装の依存関係プロパティの変更の動作は類似しているいる AffectsArrange こともできます<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are either not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況メンバーは、通常使用されないかで<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する可能性のある依存関係プロパティの配置パスに影響します。 場合、それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</source>
          <target state="translated">取得またはレイアウト エンジンの操作中に依存関係プロパティが測定パスに影響を与える可能性があるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;および&lt;xref:System.Windows.FrameworkContentElement&gt;の実装が含まれて&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">そのロジックの一環として、有効な値を変更し、AffectsMeasure でメタデータを持つ依存関係プロパティの設定<ph id="ph1">`true`</ph>がその要素のビジュアルを無効化する遅延の要求を開始します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsMeasure と依存関係プロパティを検索する必要はありません。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">カスタム&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;実装は、依存関係プロパティの変更の動作は類似しているいる AffectsMeasure することもできます<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する可能性のある依存関係プロパティが測定パスに影響を与える場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">取得またはレイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの配置パスに影響を与える可能性があるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;および&lt;xref:System.Windows.FrameworkContentElement&gt;の実装が含まれて&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">そのロジックの一環として、有効な値を変更し、AffectsParentArrange でメタデータを持つ依存関係プロパティの設定<ph id="ph1">`true`</ph>が親要素のビジュアルの無効化する遅延の要求を開始します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentArrange because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">一般に、必要はありませんの変更を報告する、 &lt;xref:System.Windows.FrameworkElement&gt;AffectsParentArrange を使用して、要素自体は既に存在して、独自のため、親要素にプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;として<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</source>
          <target state="translated">通常で十分である、適切なときに、親の配置ため、一般に、子要素の変更を開始します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>AffectsParentArrange is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">AffectsParentArrange は&lt;xref:System.Windows.FrameworkContentElement&gt;派生したクラス&lt;/xref:System.Windows.FrameworkContentElement&gt;の使用します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">この場合、子要素のセットが、プロパティ、&lt;xref:System.Windows.FrameworkContentElement&gt;派生クラスでは、自身のレンダリングを制御しません&lt;/xref:System.Windows.FrameworkContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">レンダリングがによって処理される、&lt;xref:System.Windows.FrameworkElement&gt;コンテンツ ホストとして機能する親要素です&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</source>
          <target state="translated">インスタンスの値の変更、 &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;、子要素で添付プロパティを無効に、親の子の位置を変更する必要がありますので、親の配置&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property has metadata where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">したがって、&lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;添付プロパティがメタデータ AffectsParentArrange は<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Another example is &lt;xref:System.Windows.Controls.Control.Padding%2A&gt;; when this property changes, the parent might change the positioning of the child, depending on available space.</source>
          <target state="translated">別の例は、&lt;xref:System.Windows.Controls.Control.Padding%2A&gt;以外の場合はこのプロパティが変更された、親の可能性があります変更に使用できるスペースに応じて、子の位置と&lt;/xref:System.Windows.Controls.Control.Padding%2A&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsParentArrange と依存関係プロパティを検索する必要はありません。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">カスタム&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;実装の依存関係プロパティの変更の動作は類似しているいる AffectsParentArrange こともできます<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">いずれかのプロパティの派生クラス&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する可能性のある依存関係プロパティが特にその親要素の配置パスに影響する場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">取得またはレイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの測定パスに影響を与える可能性があるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;および&lt;xref:System.Windows.FrameworkContentElement&gt;の実装が含まれて&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">そのロジックの一環として、有効な値を変更し、AffectsParentMeasure でメタデータを持つ依存関係プロパティの設定<ph id="ph1">`true`</ph>が親要素のビジュアルの無効化する遅延の要求を開始します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsParentMeasure と依存関係プロパティを検索する必要はありません。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentMeasure because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">一般に、必要はありませんの変更を報告する、 &lt;xref:System.Windows.FrameworkElement&gt;AffectsParentMeasure を使用して、要素自体は既に存在して、独自のため、親要素にプロパティ&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;として<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</source>
          <target state="translated">子要素の変更は一般的に該当する場合に親を表す measure を開始するため、通常で十分です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>AffectsParentMeasure is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">AffectsParentMeasure は&lt;xref:System.Windows.FrameworkContentElement&gt;派生したクラス&lt;/xref:System.Windows.FrameworkContentElement&gt;の使用します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">この場合、子要素のセットが、プロパティ、&lt;xref:System.Windows.FrameworkContentElement&gt;派生クラスでは、自身のレンダリングを制御しません&lt;/xref:System.Windows.FrameworkContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">レンダリングがによって処理される、&lt;xref:System.Windows.FrameworkElement&gt;コンテンツ ホストとして機能する親要素です&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</source>
          <target state="translated">インスタンスの値の変更、 &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;、子要素でプロパティは、段落の相対的な間隔から変更可能性がありますとを増やす場合があります、またはコンテンツ ホストのサイズを小さくために、親のメジャーを無効にします&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property has metadata where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">したがって、&lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;プロパティ選択されているメタデータを AffectsParentMeasure <ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is <ph id="ph1">`true`</ph>, as part of content host rendering logic.</source>
          <target state="translated">コンテンツ ホスト要素も頻繁に参照で依存関係プロパティの変更の AffectsParentMeasure がここでは<ph id="ph1">`true`</ph>、コンテンツ ホスト レンダリング ロジックの一部として。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;xref:System.Windows.Controls.TextBox&gt; element must respond to certain changes within text that might require that the bounding box of the &lt;xref:System.Windows.Controls.TextBox&gt; itself be changed.</source>
          <target state="translated">インスタンス、&lt;xref:System.Windows.Controls.TextBox&gt;要素に応答するが必要となるテキスト内で特定の変更の境界ボックス、&lt;xref:System.Windows.Controls.TextBox&gt;自体を変更します&lt;/xref:System.Windows.Controls.TextBox&gt;&lt;/xref:System.Windows.Controls.TextBox&gt;。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">カスタム&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;実装の依存関係プロパティの変更の動作は類似しているいる AffectsParentMeasure こともできます<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">いずれかのプロパティの派生クラス&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.The default is <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する可能性のある依存関係プロパティが特にその親要素の測定パスに影響する場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。既定値は<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</source>
          <target state="translated">取得または依存関係プロパティが一般的なレイアウト配置や測定、具体的には影響しません。 ただし、再描画が必要な何らかの方法では、潜在的に影響するかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;および&lt;xref:System.Windows.FrameworkContentElement&gt;の実装が含まれて&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">ロジックの一環として、有効な値を変更し、AffectsRender でメタデータを持つ依存関係プロパティを設定<ph id="ph1">`true`</ph>がその要素のビジュアルを無効化する遅延の要求を開始します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsRender と依存関係プロパティを検索する必要はありません。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsRender is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">カスタム&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;実装の依存関係プロパティの変更の動作は類似しているいる AffectsRender こともできます<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">いずれかのプロパティの派生クラス&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists affects rendering; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する依存関係プロパティがレンダリングに影響する場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property binds two-way by default.</source>
          <target state="translated">取得またはプロパティが既定で双方向バインドするかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In absence of this property being <ph id="ph1">`true`</ph>, binding updates are one-way by default, based on the default behavior of the &lt;xref:System.Windows.Data.Binding&gt; constructors or equivalent <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">このプロパティがない場合に<ph id="ph1">`true`</ph>、バインドの更新プログラムがの既定の動作に基づいて、既定で一方向、&lt;xref:System.Windows.Data.Binding&gt;コンス トラクターまたはそれと同等<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>構文&lt;/xref:System.Windows.Data.Binding&gt;。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In existing elements, you will usually find this property set to <ph id="ph1">`true`</ph> in metadata for dependency properties that both report state and are modifiable by user action, for example &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既存の要素では、このプロパティ設定通常検索は<ph id="ph1">`true`</ph>状態を報告して、 &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;例については、ユーザーの操作によって変更することは両方の依存関係プロパティのメタデータで</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This property only reports the default binding update characteristics of the dependency property in general.</source>
          <target state="translated">このプロパティはのみ、依存関係プロパティの既定のバインディング更新特性を一般に報告します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Any binding set to this property on an instance can locally set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property of the binding and change this default.</source>
          <target state="translated">どのバインディングでもインスタンスでこのプロパティを設定できるローカルに設定された、&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;バインディングのプロパティと、この既定の設定を変更します&lt;/xref:System.Windows.Data.Binding.Mode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">いずれかのプロパティの派生クラス&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists binds two-way by default; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが存在する依存関係プロパティを既定では双方向バインド場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Gets or sets the default for <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for the property with this metadata are applied, which have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定の既定の<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を使用するにはこのメタデータを使用してプロパティのバインドが適用されるときにその<bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 'éý' <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, other than <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">以外の列挙体の値<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This property is set to <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; the value you set is supposed to become the default when requested by bindings.</source>
          <target state="translated">このプロパティに設定<bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; を設定する値はバインディングで要求されたときに既定値になります必要があります。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the value of the dependency property is inheritable.</source>
          <target state="translated">取得または依存関係プロパティの値が継承可能かどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Property value inheritance is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</source>
          <target state="translated">プロパティ値の継承の機能、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>という特定の依存関係プロパティ ローカルで設定できる時またはその近辺のルート要素に、WPF フレームワーク レベルのプロパティのシステム、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>要素ツリーし、その値もそのプロパティを保持する子要素の論理ツリー内のすべての要素によって継承されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Property value inheritance is not enabled by default, and enabling it does have some performance implications.</source>
          <target state="translated">プロパティ値の継承は、既定で無効になっており、パフォーマンスへの影響が有効にします。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>プロパティ値の継承<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 非添付依存関係プロパティを使用するプロパティ値の継承が表示されますが、ランタイム ツリーで特定オブジェクト間の分割を使用して非添付プロパティの継承動作が定義されていません。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Always use &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; to register properties where you specify Inherits in the metadata.</source>
          <target state="translated">常に使用する&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;Inherits をメタデータで指定した場所のプロパティを登録する&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value is inheritable; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティの値が継承可能な場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether data binding is supported for the dependency property.</source>
          <target state="translated">依存関係プロパティのデータ バインドがサポートされているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This property reports <ph id="ph1">`false`</ph> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;, is set to <ph id="ph2">`true`</ph> in this metadata.</source>
          <target state="translated">このプロパティは、報告<ph id="ph1">`false`</ph>2 つの可能な条件のいずれかの: 依存関係プロパティが (に示される依存関係プロパティの識別子、メタデータではない)、読み取り専用であるために、依存関係プロパティをいずれかのデータ バインディングが許可されていませんまたは別のメタデータ プロパティの値&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;に設定されている<ph id="ph2">`true`</ph>このメタデータにします&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This property is exposed as a convenience so that callers do not have to check both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;.</source>
          <target state="translated">このプロパティは、利便性のため公開呼び出し元は、両方&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;と&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;&lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;を確認する必要はありません。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; (note the slight naming convention difference versus &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).</source>
          <target state="translated">それ以外の場合の読み取り/書き込みプロパティがデータ バインディングをサポートする必要がありますを指定するメタデータを作成しようとする場合は、フラグを指定&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;(とわずかな名前付け規約違いに注意してください&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if data binding is supported on the dependency property to which this metadata applies; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータを適用する依存関係プロパティのデータ バインディングがサポートされている場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the dependency property supports data binding.</source>
          <target state="translated">取得または依存関係プロパティがデータ バインディングをサポートするかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Note that this metadata property is set to <ph id="ph1">`true`</ph> specifically for properties that should not support data binding, despite being read-write properties.</source>
          <target state="translated">このメタデータ プロパティに設定されている注<ph id="ph1">`true`</ph>専用のプロパティを読み取り/書き込みプロパティであるにもかかわらず、データ バインディングをサポートする必要があります。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</source>
          <target state="translated">予想する依存関係プロパティが宣言されているほとんどの場合、データ バインディングが必要な依存関係プロパティが役立つ主要シナリオのいずれかのデータ バインディングがあるためです。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;, this does not merely change a default that can later be changed on a specific binding.</source>
          <target state="translated">異なり&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;、これだけで変わらないので、特定のバインドに後で変更可能な既定&lt;/xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Setting this property <ph id="ph1">`true`</ph> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</source>
          <target state="translated">このプロパティの設定<ph id="ph1">`true`</ph>依存関係プロパティのメタデータで、その依存関係プロパティに式を使用してその値を適用するすべてのバインディングがこのメタデータに無効になります。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <ph id="ph1">`false`</ph> for IsNotDataBindable.</source>
          <target state="translated">読み取り専用の依存関係プロパティは (変更後の値を適用可能な set アクセス操作子がない) ため、データをバインディングをサポートしていませんが、レポートではまだ<ph id="ph1">`false`</ph>IsNotDataBindable 用です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>This is because properties that correspond to a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</source>
          <target state="translated">これは、プロパティに対応するため、&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;値は、メタデータが実際に確立する方法、常にレポート プロパティの名前を付けることを示唆する最後の結果の動作ではなくと同等の機能を報告します&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>To determine whether a given dependency property permits data binding, you should usually check &lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; instead.</source>
          <target state="translated">指定された依存関係プロパティがデータ バインドで許可されるかどうかを判断するのには通常をチェックする&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;代わりにします&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; is a convenience for checking both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and IsNotDataBindable as a single operation, yielding the expected result.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;両方をチェックするための便利な&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;と予期される結果を生成する単一の操作として IsNotDataBindable&lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; 。&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property does not support data binding; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティがデータ バインディングをサポートしていない場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</source>
          <target state="translated">取得またはこのプロパティがアプリケーションやまたはジャーナル実装の一部として保存する必要がありますのあるジャーナル情報を含めるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメタデータが適用される依存関係プロパティのジャーナルを実行する必要があります場合、それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Enables a merge of the source metadata with base metadata.</source>
          <target state="translated">ソース メタデータと基本メタデータのマージを有効にします。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>This method is used internally when metadata is being overridden.</source>
          <target state="translated">このメソッドは、メタデータが上書きされているときに内部的に使用されます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The base metadata to merge.</source>
          <target state="translated">マージする基本のメタデータ。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The dependency property this metadata is being applied to.</source>
          <target state="translated">このメタデータには適用されている依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
          <target state="translated">このメタデータは、メタデータがシールされていることを示すプロパティに適用されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Any mutability of the data structure of a &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; instance should be marked as immutable when this method is invoked.</source>
          <target state="translated">データ構造のすべての変更可能性、&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;インスタンスに設定されなければなりません変更不可としてこのメソッドが呼び出されるとします&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The dependency property to which the metadata has been applied.</source>
          <target state="translated">メタデータが適用されている依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
          <target state="translated">型固有のメタデータは、この場合、このメタデータに関連付けられている型。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If this is default metadata, this value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これが既定のメタデータである場合は、この値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</source>
          <target state="translated">取得またはプロパティ値の継承を評価する必要があります要素の論理ツリー内の特定のコンテンツ境界をまたがっているかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</source>
          <target state="translated">このメタデータは、特殊な親要素と子要素の境界にまたがってプロパティ値の継承の動作に変更を適用頻度の低いを報告します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The canonical example of such a boundary is the contents of a &lt;xref:System.Windows.Controls.Frame&gt;, where the &lt;xref:System.Windows.Controls.Frame&gt; content might get reloaded independently of the existence of the &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">このような境界の標準的な例の内容は、&lt;xref:System.Windows.Controls.Frame&gt;ここで、 &lt;xref:System.Windows.Controls.Frame&gt; &lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt;の有無とは無関係にコンテンツが再読み込みされる可能性があります取得&lt;/xref:System.Windows.Controls.Frame&gt;&lt;/xref:System.Windows.Controls.Frame&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The desired property system behavior is that property value inheritance should not traverse into the contents of the &lt;xref:System.Windows.Controls.Frame&gt;, because these contents might be elements that the application hosting the frame does not own or control.</source>
          <target state="translated">目的のプロパティのシステム動作は、プロパティ値の継承の内容に通過する必要がありますしないこと、 &lt;xref:System.Windows.Controls.Frame&gt;、これらの内容の要素をフレームをホストするアプリケーションが所有または管理していない可能性があるためです&lt;/xref:System.Windows.Controls.Frame&gt;。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Specifying metadata with OverridesInheritanceBehavior set to <ph id="ph1">`true`</ph>, as well as specifying &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; as <ph id="ph2">`true`</ph>, will cause the property on which the metadata is applied to be inheritable even across the &lt;xref:System.Windows.Controls.Frame&gt; boundary or similar boundaries.</source>
          <target state="translated">設定 OverridesInheritanceBehavior でメタデータを指定する<ph id="ph1">`true`</ph>を指定しても、&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;として<ph id="ph2">`true`</ph>、プロパティを継承可能であっても、メタデータを適用すると、&lt;xref:System.Windows.Controls.Frame&gt;境界または類似の境界&lt;/xref:System.Windows.Controls.Frame&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後に&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value inheritance should span across certain content boundaries; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティ値の継承が特定のコンテンツ境界をまたがる場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</source>
          <target state="translated">取得または依存関係プロパティのサブプロパティが親オブジェクトのレンダリングに影響しないかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</source>
          <target state="translated">このメタデータ オプションは、その型が、独自のプロパティの値を持つ参照型の場合は、依存関係プロパティの関連です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</source>
          <target state="translated">通常、レイアウト システムのロジックは、サブ プロパティを持つ任意の依存関係プロパティに可能性のあるレイアウトは影響は、別描画パスで実際に実行されているより時間がかかり、変更のすべてのサブ プロパティを確認するためことを想定することです。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Setting this option to <ph id="ph1">`true`</ph> is useful for optimizing performance of the WPF framework level layout system implementation.</source>
          <target state="translated">このオプションを設定<ph id="ph1">`true`</ph>は WPF フレームワーク レベルのレイアウト システムの実装のパフォーマンスを最適化するために便利です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">派生クラスでプロパティ&lt;xref:System.Windows.PropertyMetadata&gt;通常は読み取り/書き込みとしてオブジェクト モデルで定義します&lt;/xref:System.Windows.PropertyMetadata&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">これは、インスタンスの初期化後にそれらを調整できるようにします。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">ただし、メタデータがへの呼び出しの一部として使用された後&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;、 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;、または&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">後にこのプロパティを設定しようとしています&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;は<ph id="ph1">`true`</ph>このメタデータをインスタンスで例外が発生します。&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if changes to sub-property values do not affect rendering if changed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>サブプロパティ値の変更がレンダリングに影響をいない場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>