<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac4162547698a48fe39e08ff26df179b6f737c0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.XmlTextWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ba690d80a1f145c3d4a68bd00055099d6f21223</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a34e831f49b89fd11c3e958e52e11db9d61ef1c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">高速かつ非キャッシュで順方向専用ストリームまたは、W3C 拡張マークアップ言語 (XML) 1.0 と XML の推奨事項の名前空間に準拠した XML データを含むファイルを生成する方法を提供するライターを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> class instead.</source>
          <target state="translated">以降、.NET Framework 2.0 では、ことをお勧めを使用すること、 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements the &lt;xref:System.Xml.XmlWriter&gt; class.</source>
          <target state="translated">このクラスは、&lt;xref:System.Xml.XmlWriter&gt;クラス&lt;/xref:System.Xml.XmlWriter&gt;を実装します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Starting with the .NET Framework 2.0, we recommend that you create &lt;xref:System.Xml.XmlWriter&gt; instances by using the &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; method and the &lt;xref:System.Xml.XmlWriterSettings&gt; class to take advantage of new functionality.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 作成することお勧め、.NET Framework 2.0 以降で、&lt;xref:System.Xml.XmlWriter&gt;インスタンスを使用して、&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;メソッドおよび&lt;xref:System.Xml.XmlWriterSettings&gt;の新機能を利用するクラス&lt;/xref:System.Xml.XmlWriterSettings&gt;&lt;/xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>現在の要素のスタックで定義されているすべての名前空間に対応する名前空間スタックを保持します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">使用して<ph id="ph1">`XmlTextWriter`</ph>手動で名前空間を宣言することができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   w.WriteStartElement("root");   w.WriteAttributeString("xmlns", "x", null, "urn:1");    w.WriteStartElement("item","urn:1");    w.WriteEndElement();    w.WriteStartElement("item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   ```</ph>       The above C# code produces the following output.</source>
          <target state="translated"><ph id="ph1">```   w.WriteStartElement("root");   w.WriteAttributeString("xmlns", "x", null, "urn:1");    w.WriteStartElement("item","urn:1");    w.WriteEndElement();    w.WriteStartElement("item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   ```</ph>上記の c# コードには、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>2 つの子要素上で重複させることを避けるためにルート要素を名前空間の宣言を昇格させます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">子要素は、名前空間の宣言からプレフィックスを取得します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;root xmlns:x="urn:1"&gt;    &lt;x:item/&gt;    &lt;x:item/&gt;   &lt;/x:root&gt;   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">```   &lt;root xmlns:x="urn:1"&gt;    &lt;x:item/&gt;    &lt;x:item/&gt;   &lt;/x:root&gt;   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph>現在の名前空間宣言をオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">次の例では、名前空間 URI「123」は XML 要素を生成するには、"abc"によってオーバーライド<ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   w.WriteStartElement("x","node","123");   w.WriteAttributeString("xmlns","x",null,"abc");   ```</ph>       By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated"><ph id="ph1">```   w.WriteStartElement("x","node","123");   w.WriteAttributeString("xmlns","x",null,"abc");   ```</ph>引数としてのプレフィックスを取得する書き込みメソッドを使用して、使用するプリフィックスも指定できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">次の例では、2 つの異なるプレフィックスが同じ名前空間、XML テキストを生成するために URI にマップされます<ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.WriteStartElement("x","root","urn:1");    w.WriteStartElement("y","item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>       If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph2">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated"><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.WriteStartElement("x","root","urn:1");    w.WriteStartElement("y","item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>複数の名前空間宣言が同じ名前空間 URI、別のプレフィックスのマッピングがある場合<ph id="ph2">`XmlTextWriter`</ph>旧バージョンと名前空間の宣言のスタックを走査し、最も近いものを選択します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.Formatting = Formatting.Indented;   w.WriteStartElement("x","root","urn:1");   w.WriteStartElement("y","item","urn:1");   w.WriteAttributeString("attr","urn:1","123");   w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>       In the above C# example, because the <ph id="ph2">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:      <ph id="ph3">```   &lt;x:root xmlns:x="urn:1"&gt;    &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;   &lt;/x:root&gt;   ```</ph>       If namespace conflicts occur, <ph id="ph4">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated"><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.Formatting = Formatting.Indented;   w.WriteStartElement("x","root","urn:1");   w.WriteStartElement("y","item","urn:1");   w.WriteAttributeString("attr","urn:1","123");   w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>上記の C# コード例で、ため、<ph id="ph2">`WriteAttributeString`</ph>呼び出しで、プレフィックスが指定されていない、ライターを名前空間スタックにプッシュされた最後のプレフィックスを使用して、次の XML を生成する:<ph id="ph3">```   &lt;x:root xmlns:x="urn:1"&gt;    &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;   &lt;/x:root&gt;   ```</ph>名前空間の競合が発生した場合<ph id="ph4">`XmlTextWriter`</ph>に代替プレフィックスを生成することによって解決されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">たとえば、属性と要素がある場合、同じプレフィックスが異なる名前空間、<ph id="ph1">`XmlWriter`</ph>属性の代替のプレフィックスが生成されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">生成されたプレフィックスの名前は<ph id="ph1">`n{i}`</ph>場所<ph id="ph2">`i`</ph>は 1 にします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">数は、要素ごとに 1 にリセットされます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">名前空間 URI に関連付けられた属性には、プレフィックス (既定値は名前空間は、属性には適用されません) が必要です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">これは、XML の推奨設定では、W3C 名前空間のセクション 5.2 に準拠しています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">属性は名前空間 URI を参照しますが、プレフィックスが指定されていません、ライターは、属性のプレフィックスを生成します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">空の要素を記述する場合、追加の領域が追加タグ名と、終了タグ間たとえば<ph id="ph1">`&lt;item /&gt;`</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">これは、古いブラウザーとの互換性を提供します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">ときに、<ph id="ph1">`String`</ph>メソッド パラメーターとして使用される<ph id="ph2">`null`</ph>と<ph id="ph3">`String.Empty`</ph>は同等です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph>W3C の規則に従います。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To write strongly typed data, use the &lt;xref:System.Xml.XmlConvert&gt; class to convert data types to string.</source>
          <target state="translated">厳密に型指定されたデータを書き込むには、使用、&lt;xref:System.Xml.XmlConvert&gt;クラスのデータ型を文字列に変換します&lt;/xref:System.Xml.XmlConvert&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">たとえば、次の c# コードはからデータを変換します。<ph id="ph1">`Double`</ph>を<ph id="ph2">`String`</ph>要素を書き込み、<ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   Double price = 19.95;   writer.WriteElementString("price", XmlConvert.ToString(price));   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph> does not check for the following:      -   Invalid characters in attribute and element names.</source>
          <target state="translated"><ph id="ph1">```   Double price = 19.95;   writer.WriteElementString("price", XmlConvert.ToString(price));   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph>次を確認しません。-属性および要素名に無効な文字です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-   Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">指定したエンコーディングが収まらない Unicode 文字。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">Unicode 文字に指定したエンコーディングが収まらない場合、<ph id="ph1">`XmlTextWriter`</ph>文字エン ティティに Unicode 文字をエスケープしません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-   Duplicate attributes.</source>
          <target state="translated">属性が重複してください。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-   Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">DOCTYPE パブリック識別子またはシステム識別子の文字です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Security Considerations    The following items are things to consider when working with the XmlTextWriter class.</source>
          <target state="translated">セキュリティに関する考慮事項、次の項目は、XmlTextWriter クラスを使用する場合の考慮事項です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-   Exceptions thrown by the XmlTextWriter can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">XmlTextWriter でスローされる例外は、たくないアプリケーションまでバブル パス情報を開示できます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">アプリケーションは、例外をキャッチして適切に処理する必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-   When you pass the XmlTextWriter to another application the underlying stream is exposed to that application.</source>
          <target state="translated">渡す際に XmlTextWriter 別のアプリケーションに、基になるストリームがそのアプリケーションに公開されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you need to pass the XmlTextWriter to a semi-trusted application, you should use an &lt;xref:System.Xml.XmlWriter&gt; object created by the &lt;xref:System.Xml.XmlWriter.Create%2A&gt; method instead.</source>
          <target state="translated">使用する必要があります XmlTextWriter を信頼度の低いアプリケーションに渡す必要がある場合、&lt;xref:System.Xml.XmlWriter&gt;によって作成されたオブジェクト、&lt;xref:System.Xml.XmlWriter.Create%2A&gt;メソッド代わりにします&lt;/xref:System.Xml.XmlWriter.Create%2A&gt;&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-   The XmlTextWriter does not validate any data that is passed to the &lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt; or &lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt; methods.</source>
          <target state="translated">渡されるすべてのデータを検証しません-XmlTextWriter、&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;または&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;メソッド&lt;/xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;&lt;/xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">これらのメソッドを任意のデータを渡さないでください。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-   If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">-既定の設定を変更する場合、生成された出力が整形式 XML データである保証はありません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   Do not accept supporting components, such as an &lt;xref:System.Text.Encoding&gt; object, from an untrusted source.</source>
          <target state="translated">-受け入れないサポート コンポーネントなど、&lt;xref:System.Text.Encoding&gt;信頼できないソースからのオブジェクト&lt;/xref:System.Text.Encoding&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creates an instance of the <bpt id="p1">&lt;xref uid="langword_csharp_XmlTextWriter" name="XmlTextWriter" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.TextWriter&gt;.</source>
          <target state="translated">インスタンスを作成、 <bpt id="p1">&lt;xref uid="langword_csharp_XmlTextWriter" name="XmlTextWriter" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.IO.TextWriter&gt;.&lt;/xref:System.IO.TextWriter&gt;を使用してクラス</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  Starting with the .NET Framework 2.0, we recommend that you create &lt;xref:System.Xml.XmlWriter&gt; instances by using the &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; method and the &lt;xref:System.Xml.XmlWriterSettings&gt; class to take advantage of new functionality.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;、.NET Framework 2.0 以降で、作成することをお勧め&lt;xref:System.Xml.XmlWriter&gt;インスタンスを使用して、&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;メソッドおよび&lt;xref:System.Xml.XmlWriterSettings&gt;クラスの新しい機能を活用するためにします&lt;/xref:System.Xml.XmlWriterSettings&gt;&lt;/xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>