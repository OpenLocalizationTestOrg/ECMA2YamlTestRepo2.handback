<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47318ef78c00c6b7d9b5ac5cb331571267f6b0cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.Overlapped.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bb1fa4ada2a25a001f85a90be2227273a3d79d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1aa8c5188cc422b014bf1c0bcc83be07b14e3d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a managed representation of a Win32 <ph id="ph1">`OVERLAPPED`</ph> structure, including methods to transfer information from an Overlapped instance to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">Win32 のマネージ表現を提供<ph id="ph1">`OVERLAPPED`</ph>構造体、Overlapped インスタンスから情報を転送する方法など、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.Pack%2A&gt; and &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; methods transfer information from an Overlapped object to a &lt;xref:System.Threading.NativeOverlapped&gt; structure that can be passed to Win32 API functions for asynchronous file I/O.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;と&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;メソッドに Overlapped オブジェクトからの情報の転送、&lt;xref:System.Threading.NativeOverlapped&gt;構造を渡すことができますの Win32 API 関数を非同期ファイル I/O&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt; &lt;/xref:System.Threading.Overlapped.Pack%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; method transfers information from a &lt;xref:System.Threading.NativeOverlapped&gt; structure to an instance of the Overlapped class.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;メソッドの転送については&lt;xref:System.Threading.NativeOverlapped&gt;、Overlapped クラスのインスタンスに構造&lt;/xref:System.Threading.NativeOverlapped&gt;から&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Changes to the properties of an Overlapped object affect its associated &lt;xref:System.Threading.NativeOverlapped&gt; structure, and vice versa.</source>
          <target state="translated">Overlapped オブジェクトのプロパティへの変更に関連付けられた影響を与える&lt;xref:System.Threading.NativeOverlapped&gt;構造体、またはその逆&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the 32-bit integer handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したファイルを持つクラスの位置、I/O 操作が完了したら、通知されるイベントと操作の結果を返すためのインターフェイスを 32 ビット整数のハンドル。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt;&lt;xref:System.Threading.WaitHandle&gt;クラス&lt;/xref:System.Threading.WaitHandle&gt;から派生した任意のマネージ同期イベントのハンドルを取得するプロパティ&lt;/xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt;を使用します</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
          <target state="translated">実装&lt;xref:System.IAsyncResult&gt;、I/O 操作のステータス情報を提供します&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
          <target state="translated">コンス トラクターに渡す、<ph id="ph1">`ar`</ph>パラメーターと後でそれを取得し、&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;プロパティ&lt;/xref:System.Threading.Overlapped.AsyncResult%2A&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
          <target state="translated">コールバック メソッドが指定されている場合、&lt;xref:System.Threading.Overlapped.Pack%2A&gt;または&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;メソッド、コールバックを取得できます、&lt;xref:System.IAsyncResult&gt;をアンパックして、&lt;xref:System.Threading.NativeOverlapped&gt;構造体を受け取る&lt;/xref:System.Threading.NativeOverlapped&gt;&lt;/xref:System.IAsyncResult&gt;&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;&lt;/xref:System.Threading.Overlapped.Pack%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">転送を開始する位置を示すファイルの位置の下位ワード。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">転送を開始する位置を示すファイルの位置の上位ワード。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 操作が完了したら通知されるイベント ハンドルです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
          <target state="translated">実装するオブジェクト、&lt;xref:System.IAsyncResult&gt;インターフェイスし、I/O 操作のステータス情報を提供します&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したファイルを持つクラスを配置、および操作の結果を返すためのインターフェイスを I/O 操作が完了したら、通知されるイベントを識別するハンドル。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
          <target state="translated">派生したマネージ同期オブジェクトのハンドルを取得する、&lt;xref:System.Threading.WaitHandle&gt;クラスを使用して、&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;を取得するプロパティ、&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;オブジェクト、およびを呼び出す、&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;メソッド&lt;/xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;&lt;/xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;&lt;/xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
          <target state="translated">実装&lt;xref:System.IAsyncResult&gt;、I/O 操作のステータス情報を提供します&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
          <target state="translated">コンス トラクターに渡す、<ph id="ph1">`ar`</ph>パラメーターと後でそれを取得し、&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;プロパティ&lt;/xref:System.Threading.Overlapped.AsyncResult%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
          <target state="translated">コールバック メソッドが指定されている場合、&lt;xref:System.Threading.Overlapped.Pack%2A&gt;または&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;メソッド、コールバックを取得できます、&lt;xref:System.IAsyncResult&gt;をアンパックして、&lt;xref:System.Threading.NativeOverlapped&gt;構造体を受け取る&lt;/xref:System.Threading.NativeOverlapped&gt;&lt;/xref:System.IAsyncResult&gt;&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;&lt;/xref:System.Threading.Overlapped.Pack%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">転送を開始する位置を示すファイルの位置の下位ワード。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">転送を開始する位置を示すファイルの位置の上位ワード。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 操作が完了したら通知されるイベント ハンドルです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
          <target state="translated">実装するオブジェクト、&lt;xref:System.IAsyncResult&gt;インターフェイスし、I/O 操作のステータス情報を提供します&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the object that provides status information on the I/O operation.</source>
          <target state="translated">取得または I/O 操作のステータス情報を提供するオブジェクトを設定します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface.</source>
          <target state="translated">実装するオブジェクト、&lt;xref:System.IAsyncResult&gt;インターフェイス&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the 32-bit integer handle to a synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">取得または I/O 操作が完了したら通知される同期イベントを 32 ビット整数のハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This property cannot be used on 64-bit platforms.</source>
          <target state="translated">このプロパティは、64 ビット プラットフォームでは使用できません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt; property instead.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;プロパティ代わりにします&lt;/xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt;&lt;xref:System.Threading.WaitHandle&gt;クラス&lt;/xref:System.Threading.WaitHandle&gt;から派生した任意のマネージ同期イベントのハンドルを取得するプロパティ&lt;/xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt;を使用します</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the handle of the synchronization event.</source>
          <target state="translated">&lt;xref:System.Int32&gt;同期イベントのハンドルを表す値&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle to the synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">取得または I/O 操作が完了したら通知される同期イベントをハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
          <target state="translated">派生したマネージ同期オブジェクトのハンドルを取得する、&lt;xref:System.Threading.WaitHandle&gt;クラスを使用して、&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;を取得するプロパティ、&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;オブジェクト、およびを呼び出す、&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;メソッド&lt;/xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;&lt;/xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;&lt;/xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; representing the handle of the event.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;イベントのハンドルを表すします&lt;/xref:System.IntPtr&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Frees the unmanaged memory associated with a native overlapped structure allocated by the &lt;xref:System.Threading.Overlapped.Pack*&gt; method.</source>
          <target state="translated">によって割り当てられたネイティブ オーバー ラップ構造に関連付けられたアンマネージ メモリの解放、&lt;xref:System.Threading.Overlapped.Pack*&gt;メソッド&lt;/xref:System.Threading.Overlapped.Pack*&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must call the Free method exactly once on every &lt;xref:System.Threading.NativeOverlapped&gt; pointer you receive from the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; method.</source>
          <target state="translated">Free メソッドを正確に呼び出す必要がありますにすべて&lt;xref:System.Threading.NativeOverlapped&gt;から受信するポインター、&lt;xref:System.Threading.Overlapped.Pack%2A&gt;メソッド&lt;/xref:System.Threading.Overlapped.Pack%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you don't call the Free method, you will leak memory.</source>
          <target state="translated">Free メソッドが呼び出されない場合は、メモリがリークされます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you call the Free method more than once, memory will be corrupted.</source>
          <target state="translated">Free メソッドを複数回呼び出す場合は、メモリが破損します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to be freed.</source>
          <target state="translated">ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>解放される構造です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the high-order word of the file position at which to start the transfer.</source>
          <target state="translated">取得または設定の転送を開始する位置を示すファイルの位置の上位ワード。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">ファイルの位置は、ファイルの先頭からのバイト オフセットです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the high word of the file position.</source>
          <target state="translated">&lt;xref:System.Int32&gt;ファイルの位置の上位ワードを表す値&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets or sets the low-order word of the file position at which to start the transfer.</source>
          <target state="translated">取得または転送を開始する位置を示すファイルの位置の下位ワードを設定します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">ファイルの位置は、ファイルの先頭からのバイト オフセットです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the low word of the file position.</source>
          <target state="translated">&lt;xref:System.Int32&gt;ファイル位置の下位ワードを表す値&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to be invoked when the asynchronous I/O operation is complete.</source>
          <target state="translated">パックの現在のインスタンスに、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体、非同期 I/O 操作が完了したら呼び出されるデリゲートを指定します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;まで物理メモリ内構造は固定されて&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;と呼びます&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The caller is responsible for pinning the buffer.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 呼び出し元が、バッファーをピン留めできません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">アプリケーション ドメインがアンロードされた場合、ただし、ピン留めされたバッファーへのハンドルが破棄され、バッファーが解放され、解放されたアドレスへの書き込み I/O 操作。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
          <target state="translated">この理由を使用する方がよい、&lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;メソッドのオーバー ロードをランタイムが、バッファーをピン留めします&lt;/xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">アンマネージ ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">現在<bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は既にパックされています。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</source>
          <target state="translated">パックの現在のインスタンスに、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体、非同期 I/O 操作が完了すると呼び出されるデリゲートとバッファーとして機能するマネージ オブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;まで物理メモリ内構造は固定されて&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;と呼びます&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">指定されたバッファー、または<ph id="ph1">`userData`</ph>非同期 I/O を実行するオペレーティング システムのアンマネージ関数に渡されたものと同じである必要があります。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The runtime pins the buffer or buffers specified in <ph id="ph2">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; で指定されたバッファー、またはランタイムがピン留め<ph id="ph2">`userData`</ph>I/O 操作の実行中です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">アプリケーション ドメインが読み込まれている場合、ランタイムは、I/O 操作が完了するまでの固定メモリを保持します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">オブジェクトまたは操作の入力または出力バッファーを表すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">各オブジェクトは、バッファー、たとえばバイトの配列を表します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">アンマネージ ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">現在<bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は既にパックされています。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Unpacks the specified unmanaged <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure into a managed <bpt id="p2">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">指定したアンマネージ アンパック<bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>構造体をマネージ<bpt id="p2">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is not freed from physical memory until you call the &lt;xref:System.Threading.Overlapped.Free%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;が呼び出されるまで、構造体は物理メモリから解放されず、&lt;xref:System.Threading.Overlapped.Free%2A&gt;メソッド&lt;/xref:System.Threading.Overlapped.Free%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">アンマネージ ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the information unpacked from the native structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ネイティブ構造体から開梱済みの情報を含むオブジェクトします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure specifying the delegate to invoke when the asynchronous I/O operation is complete.</source>
          <target state="translated">パックの現在のインスタンスに、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期 I/O 操作の完了時に呼び出すデリゲートを指定する構造体。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">呼び出し元のスタックを反映しません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;まで物理メモリ内構造は固定されて&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;と呼びます&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The caller is responsible for pinning the buffer.</source>
          <target state="translated">呼び出し元は、バッファーをピン留めします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">アプリケーション ドメインがアンロードされた場合、ただし、ピン留めされたバッファーへのハンドルが破棄され、バッファーが解放され、解放されたアドレスへの書き込み I/O 操作。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
          <target state="translated">この理由を使用する方がよい、&lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;メソッドのオーバー ロードをランタイムが、バッファーをピン留めします&lt;/xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; を使用して、&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;メソッドは、セキュリティ ホールを誤って開けません&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method does not propagate the calling stack.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;メソッドはコール スタックを反映しません&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードは、アクセス許可のチェックを避けるためにこれを利用できる可能性があります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">アンマネージ ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">現在<bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は既にパックされています。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to invoke when the asynchronous I/O operation is complete and the managed object that serves as a buffer.</source>
          <target state="translated">パックの現在のインスタンスに、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体、非同期 I/O 操作が完了し、マネージ オブジェクトに呼び出すデリゲートは、バッファーとして機能を指定します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">呼び出し元のスタックを反映しません。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;まで物理メモリ内構造は固定されて&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;と呼びます&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;&lt;/xref:System.Threading.NativeOverlapped&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">指定されたバッファー、または<ph id="ph1">`userData`</ph>非同期 I/O を実行するオペレーティング システムのアンマネージ関数に渡されたものと同じである必要があります。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The runtime pins the buffer or buffers specified in<ph id="ph1">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">指定されたバッファー、またはランタイムがピン留め<ph id="ph1">`userData`</ph>I/O 操作の実行中です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">アプリケーション ドメインが読み込まれている場合、ランタイムは、I/O 操作が完了するまでの固定メモリを保持します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafePack method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; を使用して、UnsafePack メソッドが誤って開きますセキュリティ ホールをします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The UnsafePack method does not propagate the calling stack.</source>
          <target state="translated">UnsafePack メソッドでは、呼び出し元のスタックは反映しません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードは、アクセス許可のチェックを避けるためにこれを利用できる可能性があります。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">オブジェクトまたは操作の入力または出力バッファーを表すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">各オブジェクトは、バッファー、たとえばバイトの配列を表します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">アンマネージ ポインター、 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is already packed.</source>
          <target state="translated">現在<bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>既にパックします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>