<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5e9049497ca56421ea2723b714ac9c1710dab36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Queue.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfecbdb35f5ada240635ab5c17084157bc6dba11</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4acdbe5d650715916f9905dc27527c0f8fedc57f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a first-in, first-out collection of objects.</source>
          <target state="translated">オブジェクトの先入れ先出しコレクションを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class implements a queue as a circular array.</source>
          <target state="translated">このクラスは、循環を配列として、キューを実装します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Objects stored in a Queue are inserted at one end and removed from the other.</source>
          <target state="translated">キューに格納されているオブジェクトは、一方の端に、挿入や削除、他のです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">キューおよびスタックは場合に役立ちますについて; 一時的な保存する必要があります。つまり、可能性がある場合の値を取得後に要素を破棄します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use Queue if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">これが、コレクションに格納される順序と同じ順序での情報にアクセスする必要がある場合は、キューを使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Collections.Stack&gt; if you need to access the information in reverse order.</source>
          <target state="translated">使用して&lt;xref:System.Collections.Stack&gt;かどうかは、逆の順序で、情報にアクセスする必要があります&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt; or &lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt; if you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">使用して&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;または&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;かどうかは、同時に複数のスレッドからコレクションにアクセスする必要があります&lt;/xref:System.Collections.Concurrent.ConcurrentStack%601&gt;&lt;/xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Three main operations can be performed on a Queue and its elements:      -   &lt;xref:System.Collections.Queue.Enqueue%2A&gt; adds an element to the end of the Queue.</source>
          <target state="translated">キューとその要素は次の&amp;3; つの主要な操作を実行できます:-&lt;xref:System.Collections.Queue.Enqueue%2A&gt;キューの末尾に要素を追加します&lt;/xref:System.Collections.Queue.Enqueue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Collections.Queue.Dequeue%2A&gt; removes the oldest element from the start of the Queue.</source>
          <target state="translated">-&lt;xref:System.Collections.Queue.Dequeue%2A&gt;キューの先頭から最も古い要素を削除します&lt;/xref:System.Collections.Queue.Dequeue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Collections.Queue.Peek%2A&gt; returns the oldest element that is at the start of the Queue but does not remove it from the Queue.</source>
          <target state="translated">-&lt;xref:System.Collections.Queue.Peek%2A&gt;キューの先頭には、キューからは削除されません古い要素を返します&lt;/xref:System.Collections.Queue.Peek%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The capacity of a Queue is the number of elements the Queue can hold.</source>
          <target state="translated">キューの容量とは、キューに格納できる要素の数です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As elements are added to a Queue, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素は、キューに追加されるため、容量を増やすは自動的に再割り当て、必要に応じて。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the Queue is constructed.</source>
          <target state="translated">増加率は、キューを作成するときに決定されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The default growth factor is 2.0.</source>
          <target state="translated">既定の増加率は 2.0 です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor.</source>
          <target state="translated">キューの容量が少なくとも最低&amp;4; で、増加率に関係なく、常に増加します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</source>
          <target state="translated">たとえば、1.0 の増加率を持つキューが常に高まります容量 4 でより大きな空き領域が必要な場合。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Queue accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">キューが受け入れる<ph id="ph1">`null`</ph>有効な値としてでき、重複する要素。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the generic version of this collection, see &lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</source>
          <target state="translated">このコレクションの汎用のバージョンについては、次を参照してください。&lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;&lt;/xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the default initial capacity, and uses the default growth factor.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空で、クラスの既定の初期量を備え既定の増加率を使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;要素の数が、&lt;xref:System.Collections.Queue&gt;を保持できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Queue&gt;、容量を増やすは自動的に再割り当て、必要に応じて&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">増加率が決まるときに、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを指定したコレクションからコピーされた要素を含む、コピーした要素の数と同じ初期量があり、既定の増加率を使用します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;要素の数が、&lt;xref:System.Collections.Queue&gt;を保持できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Queue&gt;、容量を増やすは自動的に再割り当て、必要に応じて&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">増加率が決まるときに、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the &lt;xref:System.Collections.Queue&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">、&lt;xref:System.Collections.Queue&gt;同じ順序&lt;xref:System.Collections.IEnumerator&gt;&lt;xref:System.Collections.ICollection&gt;。&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.IEnumerator&gt;によって読み取られる順序で&lt;/xref:System.Collections.Queue&gt;要素のコピーします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>内の要素の数は、<ph id="ph3">`col`</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; to copy elements from.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;から要素をコピーする&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the default growth factor.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空で、クラス、指定した初期量、および既定の増加率を使用します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;要素の数が、&lt;xref:System.Collections.Queue&gt;を保持できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Queue&gt;、容量を増やすは自動的に再割り当て、必要に応じて&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">増加率が決まるときに、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">コレクションのサイズを推定できる場合の&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">`capacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">最初の要素数を<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>含めることができます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the specified growth factor.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスは、空を指定した初期量を備え、指定した増加率を使用します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;要素の数が、&lt;xref:System.Collections.Queue&gt;を保持できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Queue&gt;、容量を増やすは自動的に再割り当て、必要に応じて&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">増加率が決まるときに、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;増加率に関係なくの最小値は常にだけ増加させる; 1.0 の増加率が防ぐことはできません、&lt;xref:System.Collections.Queue&gt;のサイズを大きくします&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">コレクションのサイズを推定できる場合の&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">`capacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">最初の要素数を<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>含めることができます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The factor by which the capacity of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is expanded.</source>
          <target state="translated">係数の容量、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が展開されています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;growFactor&lt;/code&gt;</ph> is less than 1.0 or greater than 10.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;growFactor&lt;/code&gt;</ph> 1.0 より小さいか、10.0 を超える。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">すべてのオブジェクトを削除、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Queue.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.Count%2A&gt;0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The capacity remains unchanged.</source>
          <target state="translated">容量はそのまま残ります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To reset the capacity of the &lt;xref:System.Collections.Queue&gt;, call &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">この&lt;xref:System.Collections.Queue&gt;&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出す&lt;/xref:System.Collections.Queue&gt;の容量をリセットするには</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.</source>
          <target state="translated">空のトリミング&lt;xref:System.Collections.Queue&gt;のキャパシティを設定、&lt;xref:System.Collections.Queue&gt;を既定の容量&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピーを作成、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">コレクションの簡易コピーは、参照型または値の型が参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピー、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">要素がであるかどうかを判断、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;を呼び出すことで等しいかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`obj`</ph> to determine whether <ph id="ph2">`item`</ph> exists.</source>
          <target state="translated">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;メソッド<ph id="ph1">`obj`</ph>を決定するかどうか<ph id="ph2">`item`</ph>が存在します&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`obj`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework の以前のバージョンでは、この決定を使用して行われた、&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;のメソッド、<ph id="ph1">`obj`</ph>コレクション内のオブジェクトのパラメーターです&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;内で検索する、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> elements to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.</source>
          <target state="translated">コピー、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要素を既存の&amp;1; 次元&lt;xref:System.Array&gt;、指定した配列インデックスから始まります&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;列挙&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;同じ順序で&lt;/xref:System.Array&gt;要素のコピーします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 次元&lt;xref:System.Array&gt;からコピーした要素のコピー先は<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Array&gt; 。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0 から始まるインデックス番号が必要です&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">内の&amp;0; から始まるインデックス<ph id="ph1">`array`</ph>コピーの開始位置。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>多次元です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">- または - ソース内の要素の数<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>から使用可能な領域より大きくなって<ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>変換先の末尾に<ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">ソースの種類<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変換先の型に自動的にキャストすることはできません<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれる要素の数を取得、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements that the &lt;xref:System.Collections.Queue&gt; can store.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;は要素の数を&lt;xref:System.Collections.Queue&gt;格納できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Count is the number of elements that are actually in the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">数は実際に&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;内にある要素の数</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is always greater than or equal to Count.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;数以上では常にします&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">数を超えた場合、容量の要素を追加するときに、前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てによって、容量は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">これは増加率を現在の容量を乗算することによって新しい容量を決定ときに決定されます、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;増加率に関係なくの最小値は常にだけ増加させる; 1.0 の増加率が防ぐことはできません、&lt;xref:System.Collections.Queue&gt;のサイズを大きくします&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれる要素の数、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Removes and returns the object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">削除しの先頭にあるオブジェクトを返します、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Queue.Peek%2A&gt; method, but &lt;xref:System.Collections.Queue.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">このメソッド、&lt;xref:System.Collections.Queue.Peek%2A&gt;メソッドは&lt;xref:System.Collections.Queue.Peek%2A&gt;&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;を変更しません&lt;/xref:System.Collections.Queue.Peek%2A&gt;&lt;/xref:System.Collections.Queue.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.</source>
          <target state="translated"><ph id="ph1">`null`</ph>追加することができます、&lt;xref:System.Collections.Queue&gt;値として&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.</source>
          <target state="translated">Null 値との末尾を識別する、 &lt;xref:System.Collections.Queue&gt;、確認、&lt;xref:System.Collections.Queue.Count%2A&gt;プロパティまたは catch、 &lt;xref:System.InvalidOperationException&gt;、ときにスローする、&lt;xref:System.Collections.Queue&gt;が空です&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Collections.Queue.Count%2A&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The object that is removed from the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">先頭から削除されるオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Adds an object to the end of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">末尾にオブジェクトを追加、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;要素の数が、&lt;xref:System.Collections.Queue&gt;を保持できます&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Queue&gt;、容量を増やすは自動的に再割り当て、必要に応じて&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;。&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt;を呼び出すことによって、容量を削減することができます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">増加率より大きな空き領域が必要な場合に、現在の容量を乗算する数です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">増加率が決まるときに、&lt;xref:System.Collections.Queue&gt;を構築します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Queue&gt;増加率に関係なくの最小値は常にだけ増加させる; 1.0 の増加率が防ぐことはできません、&lt;xref:System.Collections.Queue&gt;のサイズを大きくします&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Queue.Count%2A&gt; is less than the capacity of the internal array, this method is an O(1) operation.</source>
          <target state="translated">場合&lt;xref:System.Collections.Queue.Count%2A&gt;が小さい内部配列の容量よりも、このメソッドは、o (1) 操作になります&lt;/xref:System.Collections.Queue.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">内部の配列は、新しい要素のために再割り当てする必要がある、このメソッドが O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object to add to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">追加するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">反復処理する列挙子を返します、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがってを使用して<ph id="ph1">`foreach`</ph>列挙子を直接操作せずにお勧めします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;列挙子をこの位置に戻さ点もあります。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">この位置にある&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">したがって、 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;いずれかのまで同じオブジェクトを返します&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;または&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;次の要素にします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返します<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;を返すことも<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">最後の呼び出し場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返される<ph id="ph1">`false`</ph>、&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;再度、コレクションの最初の要素に&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;続けて&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;を呼び出すことができます&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;を設定するには</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">アクセスをするかどうかを示す値を取得、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が同期されている (スレッド セーフである)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.</source>
          <target state="translated">スレッド セーフを確保する、 &lt;xref:System.Collections.Queue&gt;、によって返されるラッパーを介してすべての操作を行う必要があります、&lt;xref:System.Collections.Queue.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Queue.Synchronized%2A&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if access to the <bpt id="p2">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合へのアクセス、 <bpt id="p2">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が同期 (スレッド セーフな) です。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns the object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> without removing it.</source>
          <target state="translated">先頭にオブジェクトを返します、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>削除することがなくです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Queue.Dequeue%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Collections.Queue.Dequeue%2A&gt;、メソッドがピーク&lt;xref:System.Collections.Queue&gt;。&lt;/xref:System.Collections.Queue&gt;は変更されません。&lt;/xref:System.Collections.Queue.Dequeue%2A&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.</source>
          <target state="translated"><ph id="ph1">`null`</ph>追加することができます、&lt;xref:System.Collections.Queue&gt;値として&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.</source>
          <target state="translated">Null 値との末尾を識別する、 &lt;xref:System.Collections.Queue&gt;、確認、&lt;xref:System.Collections.Queue.Count%2A&gt;プロパティまたは catch、 &lt;xref:System.InvalidOperationException&gt;、ときにスローする、&lt;xref:System.Collections.Queue&gt;が空です&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Collections.Queue.Count%2A&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">先頭にあるオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a new <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that wraps the original queue, and is thread safe.</source>
          <target state="translated">新しいを返します<bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を元のキューをラップし、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</source>
          <target state="translated">このメソッドによって返されるラッパーは、スレッド セーフな方法で実行されるように操作が実行される前に、キューをロックします。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through this wrapper only.</source>
          <target state="translated">スレッド セーフを確保する、 &lt;xref:System.Collections.Queue&gt;、このラッパーのみを通じてすべての操作を行う必要があります&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>同期するためにします。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper that is synchronized (thread safe).</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>同期されている (スレッド セーフである)。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;queue&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;queue&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクセスを同期するために使用できるオブジェクトを取得、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>To create a synchronized version of the &lt;xref:System.Collections.Queue&gt;, use the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.</source>
          <target state="translated">同期されたバージョンを作成する、&lt;xref:System.Collections.Queue&gt;を使用して、&lt;xref:System.Collections.Queue.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Queue.Synchronized%2A&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Queue&gt; using the SyncRoot property.</source>
          <target state="translated">ただし、派生クラスは、独自の同期されたバージョンを指定、 &lt;xref:System.Collections.Queue&gt;SyncRoot プロパティを使用します&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Queue&gt;, not directly on the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">同期されたコードでの操作を実行する必要があります、 &lt;xref:System.Collections.Queue&gt;、 &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt;で直接&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">これにより、他のオブジェクトから派生したコレクションを適切に操作します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Queue&gt; object.</source>
          <target state="translated">具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、&lt;xref:System.Collections.Queue&gt;オブジェクト&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクセスを同期するために使用できるオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> elements to a new array.</source>
          <target state="translated">コピー、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要素を新しい配列にします。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.Queue&gt; is not modified.</source>
          <target state="translated">&lt;xref:System.Collections.Queue&gt;は変更されません&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The order of the elements in the new array is the same as the order of the elements from the beginning of the &lt;xref:System.Collections.Queue&gt; to its end.</source>
          <target state="translated">先頭から要素の順序と同じ新しい配列の要素の順序は、&lt;xref:System.Collections.Queue&gt;終了まで&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A new array containing elements copied from the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">コピーした要素を格納する新しい配列、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Sets the capacity to the actual number of elements in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">実際の要素数を容量を設定、 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</source>
          <target state="translated">このメソッドは、キューのメモリ オーバーヘッドを最小のキューに新しい要素が追加されない場合に使用できます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To reset a &lt;xref:System.Collections.Queue&gt; to its initial state, call the &lt;xref:System.Collections.Queue.Clear%2A&gt; method before calling TrimToSize.</source>
          <target state="translated">リセットする、&lt;xref:System.Collections.Queue&gt;を初期状態に呼び出し、 &lt;xref:System.Collections.Queue.Clear%2A&gt;TrimToSize を呼び出す前にメソッド&lt;/xref:System.Collections.Queue.Clear%2A&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.</source>
          <target state="translated">空のトリミング&lt;xref:System.Collections.Queue&gt;のキャパシティを設定、&lt;xref:System.Collections.Queue&gt;を既定の容量&lt;/xref:System.Collections.Queue&gt;&lt;/xref:System.Collections.Queue&gt;。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>