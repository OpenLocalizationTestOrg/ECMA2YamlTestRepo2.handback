<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5aba493f3f0d1b84832e58cc36d4c420123e3425</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.IO.FileStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6b779ddf48b648093391e747173b25ab39c9e1e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74610b6181414f7dfec1e1faba93b1f65c9de4ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a &lt;xref:System.IO.Stream&gt; for a file, supporting both synchronous and asynchronous read and write operations.</source>
          <target state="translated">提供、&lt;xref:System.IO.Stream&gt;ファイルの場合、同期および非同期の両方をサポートする読み取りおよび書き込み操作です&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3)</ept>.</source>
          <target state="translated">この型の .NET Framework ソース コードを参照するを参照してください。、<bpt id="p1">[</bpt>参照ソース<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定下読み取り/書き込みアクセス許可を持つ、指定したファイル ハンドルのクラスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.IO.Stream.Close%2A&gt; is called, the handle is also closed and the file's handle count is decremented.</source>
          <target state="translated">ときに&lt;xref:System.IO.Stream.Close%2A&gt;が呼び出されると、またはハンドルが閉じられ、ファイルのハンドル数は減少します&lt;/xref:System.IO.Stream.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A file handle for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルのファイル ハンドルを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph>フィールドではなく<bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定下読み取り/書き込みアクセス許可を持つ、指定したファイル ハンドルのクラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.IO.Stream.Close%2A&gt; is called, the handle is also closed and the file's handle count is decremented.</source>
          <target state="translated">ときに&lt;xref:System.IO.Stream.Close%2A&gt;が呼び出されると、またはハンドルが閉じられ、ファイルのハンドル数は減少します&lt;/xref:System.IO.Stream.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A file handle for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルのファイル ハンドルを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph>フィールドではなく<bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path and creation mode.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>パスと作成モードを指定しています。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission, and buffer size.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定下読み取り/書き込み権限を持つ、指定したファイル ハンドル用およびバッファー サイズ。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A file handle for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルのファイル ハンドルを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p2">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p2">*</ept>&gt; properties of the <bpt id="p3">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>&gt; と&lt;&gt; <ept id="p2">*</ept>&gt; のプロパティ、 <bpt id="p3">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handle</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an invalid handle.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handle</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが無効なハンドル。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handle</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a synchronous handle and it was used asynchronously.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handle</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが同期ハンドルであり、非同期的に使用されました。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bufferSize</ph><ept id="p1">&lt;/code&gt;</ept> parameter is negative.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bufferSize</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが負の値。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission and <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance ownership.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定下読み取り/書き込みアクセス許可を持つ、指定したファイル ハンドル用クラスと<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンスの所有権です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If this process owns the handle, a call to the &lt;xref:System.IO.Stream.Close%2A&gt; method will also close the handle and the file's handle count is decremented.</source>
          <target state="translated">このプロセスへの呼び出し、ハンドルを所有している場合、&lt;xref:System.IO.Stream.Close%2A&gt;メソッドは、ハンドルを終了しても、ファイルのハンドル数は減少します&lt;/xref:System.IO.Stream.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the default buffer size of 4096 bytes.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが 4096 バイトまでの既定のバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したら、ハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A file handle for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルのファイル ハンドルを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the file handle will be owned by this <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ファイル ハンドルを所有するこれ場合<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンス。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph>フィールドではなく<bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, and read/write permission.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定したパス、作成モード、および読み取り/書き込みアクセス許可。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file can be accessed by the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">ファイルにアクセスできる方法を決定する定数、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This also determines the values returned by the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって返される値も指定、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`path`</ph> specifies a disk file.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`path`</ph>ディスク ファイルを指定します。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定下読み取り/書き込みアクセス許可、バッファー サイズ、および同期状態または非同期状態で、指定したファイル ハンドルのクラスです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You set the <ph id="ph1">`isAsync`</ph> parameter to <ph id="ph2">`true`</ph> to open the file handle asynchronously.</source>
          <target state="translated">設定する、<ph id="ph1">`isAsync`</ph>パラメーターを<ph id="ph2">`true`</ph>を非同期的にファイル ハンドルを開きます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When the parameter is <ph id="ph1">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.</source>
          <target state="translated">パラメーターの場合は<ph id="ph1">`true`</ph>ストリームがファイルの操作を非同期的に実行する重複 I/O を使用します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, the parameter does not have to be <ph id="ph1">`true`</ph> to call the &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, or &lt;xref:System.IO.Stream.CopyToAsync%2A&gt; method.</source>
          <target state="translated">ただし、パラメーターは、する必要はありません<ph id="ph1">`true`</ph>を呼び出して、 &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、または&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;メソッド&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`isAsync`</ph> parameter is <ph id="ph2">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
          <target state="translated">ときに、<ph id="ph1">`isAsync`</ph>パラメーターは<ph id="ph2">`false`</ph>および書き込み操作を非同期の読み込みを呼び出すと、引き続き、UI スレッドはブロックされませんが、実際の I/O 操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A file handle for the file that this <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルがこのファイルのハンドル<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ハンドルが非同期的に開かれた場合 (つまり、重複 I/O モード用) です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handle</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an invalid handle.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handle</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが無効なハンドル。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handle</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a synchronous handle and it was used asynchronously.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handle</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが同期ハンドルであり、非同期的に使用されました。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bufferSize</ph><ept id="p1">&lt;/code&gt;</ept> parameter is negative.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bufferSize</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが負の値。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission, <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance ownership, and buffer size.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定下読み取り/書き込み権限を持つ、指定したファイル ハンドル用クラス<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンスの所有権、およびバッファー サイズ。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">`FileStream`</ph> owns the handle, a call to the &lt;xref:System.IO.Stream.Close%2A&gt; method will also close the handle.</source>
          <target state="translated">この場合<ph id="ph1">`FileStream`</ph>への呼び出し、ハンドルを所有している、&lt;xref:System.IO.Stream.Close%2A&gt;メソッドは、ハンドルを終了しても&lt;/xref:System.IO.Stream.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In particular, the file's handle count is decremented.</source>
          <target state="translated">具体的には、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified buffer size.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが指定したバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A file handle for the file that this <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルがこのファイルのハンドル<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the file handle will be owned by this <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ファイル ハンドルを所有するこれ場合<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンス。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, read/write permission, and sharing permission.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したパス、作成モード、読み取り/書き込みアクセス許可、および共有アクセス許可を持つクラス。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file can be accessed by the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">ファイルにアクセスできる方法を決定する定数、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This also determines the values returned by the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって返される値も指定、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`path`</ph> specifies a disk file.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`path`</ph>ディスク ファイルを指定します。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>-or-       The system is running Windows 98 or Windows 98 Second Edition and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">share</ph><ept id="p1">&lt;/code&gt;</ept> is set to <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">- または - Windows 98 または Windows 98 Second Edition、システムが実行されていると<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">share</ph> <ept id="p1">&lt;/code&gt;</ept> éý ' è <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for the specified file handle, with the specified read/write permission, <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance ownership, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定下読み取り/書き込み権限を持つ、指定したファイル ハンドル用クラス<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンスの所有権、バッファー サイズ、および同期状態または非同期状態です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified access to the file.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトには、ファイルに指定されたアクセスが与えられます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The ownership of the handle will be as specified.</source>
          <target state="translated">ハンドルの所有権がなりますとして指定します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">`FileStream`</ph> owns the handle, a call to the &lt;xref:System.IO.Stream.Close%2A&gt; method will also close the handle.</source>
          <target state="translated">この場合<ph id="ph1">`FileStream`</ph>への呼び出し、ハンドルを所有している、&lt;xref:System.IO.Stream.Close%2A&gt;メソッドは、ハンドルを終了しても&lt;/xref:System.IO.Stream.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>In particular, the file's handle count is decremented.</source>
          <target state="translated">具体的には、ファイルのハンドル数は減少します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FileStream`</ph> object is given the specified buffer size.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>オブジェクトが指定したバッファー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> assumes that it has exclusive control over the handle.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>ハンドルを排他的に制御を使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Reading, writing, or seeking while a <ph id="ph1">`FileStream`</ph> is also holding a handle could result in data corruption.</source>
          <target state="translated">読み取り、書き込み、または中にシーク、<ph id="ph1">`FileStream`</ph>も保持しているハンドルは、データの破損、可能性があります。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For data safety, call &lt;xref:System.IO.FileStream.Flush%2A&gt; before using the handle, and avoid calling any methods other than <ph id="ph1">`Close`</ph> after you are done using the handle.</source>
          <target state="translated">データの安全性、呼び出す&lt;xref:System.IO.FileStream.Flush%2A&gt;前に、ハンドルを使用して、以外のすべてのメソッドは呼び出しません<ph id="ph1">`Close`</ph>が完了したらこのハンドルを使用します&lt;/xref:System.IO.FileStream.Flush%2A&gt;。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Alternately, read and write to the handle before calling this <ph id="ph1">`FileStream`</ph> constructor.</source>
          <target state="translated">または、読み書き可能なハンドルにこの関数を呼び出す前に<ph id="ph1">`FileStream`</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileShare.Read`</ph> is the default for those &lt;xref:System.IO.FileStream&gt; constructors without a <ph id="ph2">`FileShare`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`FileShare.Read`</ph>これらの既定値は、&lt;xref:System.IO.FileStream&gt;なしのコンス トラクター、<ph id="ph2">`FileShare`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A file handle for the file that this <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルがこのファイルのハンドル<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A constant that sets the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">設定する定数、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the file handle will be owned by this <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ファイル ハンドルを所有するこれ場合<bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンス。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ハンドルが非同期的に開かれた場合 (つまり、重複 I/O モード用) です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph> is less than <bpt id="p1">&lt;xref uid="langword_csharp_FileAccess.Read" name="FileAccess.Read" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or greater than <bpt id="p2">&lt;xref uid="langword_csharp_FileAccess.ReadWrite" name="FileAccess.ReadWrite" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <ph id="ph2">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;access&lt;/code&gt;</ph>より小さい<bpt id="p1">&lt;xref uid="langword_csharp_FileAccess.Read" name="FileAccess.Read" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以上<bpt id="p2">&lt;xref uid="langword_csharp_FileAccess.ReadWrite" name="FileAccess.ReadWrite" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<ph id="ph2">&lt;code&gt;bufferSize&lt;/code&gt;</ph>が 0 未満です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The handle is invalid.</source>
          <target state="translated">ハンドルが正しくありません。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>An I/O error, such as a disk error, occurred.</source>
          <target state="translated">ディスク エラーなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">access</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> or <bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> and the file handle is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求された場合など、指定したファイル ハンドル用のオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">access</ph> <ept id="p2">&lt;/code&gt;</ept>は<bpt id="p3">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>または<bpt id="p4">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>読み取り専用アクセスのファイル ハンドルを設定します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定したパス、作成モード、読み取り/書き込みと共有アクセス許可、およびバッファー サイズ。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file can be accessed by the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">ファイルにアクセスできる方法を決定する定数、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This also determines the values returned by the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって返される値も指定、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`path`</ph> specifies a disk file.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`path`</ph>ディスク ファイルを指定します。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph>無効な値を格納します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>-or-       The system is running Windows 98 or Windows 98 Second Edition and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">share</ph><ept id="p1">&lt;/code&gt;</ept> is set to <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">- または - Windows 98 または Windows 98 Second Edition、システムが実行されていると<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">share</ph> <ept id="p1">&lt;/code&gt;</ept> éý ' è <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定されたパス、作成モード、読み取り/書き込みを持つクラスし、共有アクセス許可、バッファーのサイズ、および同期状態または非同期状態です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file can be accessed by the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">ファイルにアクセスできる方法を決定する定数、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This also determines the values returned by the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって返される値も指定、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`path`</ph> specifies a disk file.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`path`</ph>ディスク ファイルを指定します。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096..</source>
          <target state="translated">既定のバッファー サイズは、4096 です.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Specifies whether to use asynchronous I/O or synchronous I/O.</source>
          <target state="translated">非同期 I/O または同期 I/O を使用するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>However, note that the underlying operating system might not support asynchronous I/O, so when specifying <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the handle might be opened synchronously depending on the platform.</source>
          <target state="translated">ただし、基になるオペレーティング システムが非同期の I/O をサポートしていませんことを指定するため<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、プラットフォームによって、ハンドルを同期的に開かれる可能性があります。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>When opened asynchronously, the &lt;xref:System.IO.FileStream.BeginRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.BeginWrite<ept id="p1">*</ept>&gt; methods perform better on large reads or writes, but they might be much slower for small reads or writes.</source>
          <target state="translated">非同期的に開かれたときに、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; 少量の読み取りまたは書き込みより低くなる可能性がありますメソッドが大量の読み取りまたは書き込みのパフォーマンスが向上ことができます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If the application is designed to take advantage of asynchronous I/O, set the <ph id="ph1">`useAsync`</ph> parameter to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アプリケーションが非同期 I/O を活用するために設計されている場合は、設定、<ph id="ph1">`useAsync`</ph>パラメーターを<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</source>
          <target state="translated">非同期 I/O を正しく使用することができますを高速化によって、アプリケーションほどによってパフォーマンスが低下する非同期 I/O 用にアプリケーションを再設計せず使用しますが、10 倍ほど 10 倍にします。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph>無効な値を格納します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>-or-       The system is running Windows 98 or Windows 98 Second Edition and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">share</ph><ept id="p1">&lt;/code&gt;</ept> is set to <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">- または - Windows 98 または Windows 98 Second Edition、システムが実行されていると<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">share</ph> <ept id="p1">&lt;/code&gt;</ept> éý ' è <bpt id="p2">&lt;xref uid="langword_csharp_FileShare.Delete" name="FileShare.Delete" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスは、指定したパス、作成モード、読み取り/書き込みと共有アクセス許可、アクセス、同じファイルでは、バッファー サイズ、および追加のファイル オプションを他の Filestream が保有できます。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file can be accessed by the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">ファイルにアクセスできる方法を決定する定数、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>This also determines the values returned by the &lt;xref:System.IO.FileStream.CanRead<bpt id="p1">*</bpt>&gt; and &lt;xref:System.IO.FileStream.CanWrite<ept id="p1">*</ept>&gt; properties of the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって返される値も指定、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; のプロパティ、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`path`</ph> specifies a disk file.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`path`</ph>ディスク ファイルを指定します。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A value that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する値。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph>無効な値を格納します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is specified for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が指定されて<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>が現在のプラットフォームでは、ファイルの暗号化はサポートされていません。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したパス、作成モード、アクセス権および共有アクセス許可、バッファー サイズ、および追加のファイル オプションを持つクラス。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A constant that determines the access rights to use when creating access and audit rules for the file.</source>
          <target state="translated">ファイルのアクセスおよび監査規則を作成するときに使用するアクセス権を決定する定数。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A constant that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する定数。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph>無効な値を格納します。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The current operating system is not Windows NT or later.</source>
          <target state="translated">現在のオペレーティング システムが Windows NT 以降です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is specified for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が指定されて<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>が現在のプラットフォームでは、ファイルの暗号化はサポートされていません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定した<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定したパス、作成モード、アクセス権、共有アクセス許可、バッファー サイズ、追加のファイル オプション、アクセス制御と監査セキュリティ。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>A relative or absolute path for the file that the current <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object will encapsulate.</source>
          <target state="translated">ファイルの相対パスまたは絶対パスを現在<bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A constant that determines how to open or create the file.</source>
          <target state="translated">開くか、ファイルを作成する方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>A constant that determines the access rights to use when creating access and audit rules for the file.</source>
          <target state="translated">ファイルのアクセスおよび監査規則を作成するときに使用するアクセス権を決定する定数。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>A constant that determines how the file will be shared by processes.</source>
          <target state="translated">プロセスによるファイルの共有方法を決定する定数。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>A positive &lt;xref:System.Int32&gt; value greater than 0 indicating the buffer size.</source>
          <target state="translated">正&lt;xref:System.Int32&gt;バッファー サイズを示す 0 より大きい値です&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">既定のバッファー サイズは 4096 です。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>A constant that specifies additional file options.</source>
          <target state="translated">追加のファイル オプションを指定する定数。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>A constant that determines the access control and audit security for the file.</source>
          <target state="translated">アクセス制御を決定する定数およびファイルのセキュリティを監査します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (""), contains only white space, or contains one or more invalid characters.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列 ("")、空白しか含んでいない、または&amp;1; つまたは複数の無効な文字が含まれています。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>などの非ファイル デバイスを参照"con:"、"com1:"、"lpt&amp;1;:"、非 NTFS 環境などです。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値またはゼロです。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;access&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;share&lt;/code&gt;</ph>無効な値を格納します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The file cannot be found, such as when <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> or <bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, and the file specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p4">&lt;/code&gt;</ept> does not exist.</source>
          <target state="translated">場合など、ファイルが見つからない<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_FileMode.Truncate" name="FileMode.Truncate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>または<bpt id="p3">&lt;xref uid="langword_csharp_FileMode.Open" name="FileMode.Open" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>とで指定されたファイル<bpt id="p4">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p4">&lt;/code&gt;</ept>存在しません。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The file must already exist in these modes.</source>
          <target state="translated">これらのモードでファイルが存在する必要があります。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>An I/O error, such as specifying <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when the file specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p2">&lt;/code&gt;</ept> already exists, occurred.</source>
          <target state="translated">指定するなど、I/O エラー <bpt id="p1">&lt;xref uid="langword_csharp_FileMode.CreateNew" name="FileMode.CreateNew" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>によって指定されたファイル<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">path</ph> <ept id="p2">&lt;/code&gt;</ept>既に存在する場合が発生しました。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>-or-       The stream has been closed.</source>
          <target state="translated">または、ストリームが閉じられました。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
          <target state="translated">指定のパスがマップされていないドライブにあるなど、有効ではありません。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p1">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p2">&lt;/code&gt;</ept>, such as when <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">access</ph><ept id="p3">&lt;/code&gt;</ept> is <bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> or <bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> and the file or directory is set for read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p1">&lt;/code&gt;</ept>要求に指定されたオペレーティング システムによって許可されていない<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">path</ph> <ept id="p2">&lt;/code&gt;</ept>、ときなど<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">access</ph> <ept id="p3">&lt;/code&gt;</ept>は<bpt id="p4">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>または<bpt id="p5">&lt;xref uid="langword_csharp_ReadWrite" name="ReadWrite" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>ファイルまたはディレクトリが読み取り専用アクセスの設定とします。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is specified for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref href="System.IO.FileOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が指定されて<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">options</ph><ept id="p2">&lt;/code&gt;</ept>が現在のプラットフォームでは、ファイルの暗号化はサポートされていません。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>, file name, or both exceed the system-defined maximum length.</source>
          <target state="translated">指定した<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>ファイル名、またはその両方がシステム定義の最大長を超えています。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
          <target state="translated">たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The current operating system is not Windows NT or later.</source>
          <target state="translated">現在のオペレーティング システムが Windows NT 以降です。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を開始します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.FileStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.FileStream.ReadAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.FileStream.ReadAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as BeginRead and &lt;xref:System.IO.FileStream.EndRead%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンは BeginRead などのメソッドを使用する必要があると&lt;xref:System.IO.FileStream.EndRead%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.FileStream.EndRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;, and &lt;xref:System.IO.FileStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、 &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;、および&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.FileStream.FlushAsync%2A&gt;&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.EndRead%2A&gt; must be called exactly once for every call to BeginRead.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.EndRead%2A&gt;BeginRead を呼び出すたびに対して&amp;1; 回だけ呼び出すこと必要があります。&lt;/xref:System.IO.FileStream.EndRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream&gt; provides two different modes of operation: synchronous I/O and asynchronous I/O.</source>
          <target state="translated">&lt;xref:System.IO.FileStream&gt;操作の&amp;2; つの異なるモードを提供します。 I/O 同期と非同期 I/O です。&lt;/xref:System.IO.FileStream&gt;</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>While either can be used, the underlying operating system resources might allow access in only one of these modes.</source>
          <target state="translated">いずれかを使用できますが、基になるオペレーティング システムのリソースは、これらのモードの&amp;1; つのみで、アクセスを許可する場合があります。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>By default, &lt;xref:System.IO.FileStream&gt; opens the operating system handle synchronously.</source>
          <target state="translated">既定では、&lt;xref:System.IO.FileStream&gt;オペレーティング システム ハンドルを同期的が開きます&lt;/xref:System.IO.FileStream&gt;。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>In Windows, this slows down asynchronous methods.</source>
          <target state="translated">Windows では、非同期メソッドの速度が低下します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>If asynchronous methods are used, use the &lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt; constructor.</source>
          <target state="translated">非同期メソッドを使用している場合を使用して、&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;コンス トラクター&lt;/xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt; 。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.FileStream.CanRead%2A&gt;、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanRead%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.IO.Stream.CanRead%2A&gt;。&lt;/xref:System.IO.Stream.CanRead%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from BeginRead.</source>
          <target state="translated">ストリームが閉じているか、無効な引数を渡す場合の例外が直ちにスローされます BeginRead からです。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to &lt;xref:System.IO.FileStream.EndRead%2A&gt;.</source>
          <target state="translated">IO 要求中にディスク障害など、非同期読み取り要求中に発生したエラーは、スレッド プールのスレッドで発生し、 &lt;xref:System.IO.FileStream.EndRead%2A&gt;。&lt;/xref:System.IO.FileStream.EndRead%2A&gt;への呼び出しに可視になります。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.Stream.EndRead%2A&gt; must be called with this &lt;xref:System.IAsyncResult&gt; to find out how many bytes were read.</source>
          <target state="translated">&lt;xref:System.IO.Stream.EndRead%2A&gt;これで呼び出されなければなりません&lt;xref:System.IAsyncResult&gt;読み取られたバイト数を確認する&lt;/xref:System.IAsyncResult&gt;。&lt;/xref:System.IO.Stream.EndRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The buffer to read data into.</source>
          <target state="translated">データを読み取るバッファー。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`array`</ph> at which to begin reading.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`array`</ph>読み取りを開始する位置。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The method to be called when the asynchronous read operation is completed.</source>
          <target state="translated">非同期の読み取り操作時に呼び出されるメソッドが完了するとします。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">この特定の非同期読み取り要求を他の要求と区別するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>An object that references the asynchronous read.</source>
          <target state="translated">非同期の読み取りを参照するオブジェクト。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The array length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">numBytes</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">配列の長さマイナス<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>はより小さい<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">numBytes</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;numBytes&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;numBytes&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>An asynchronous read was attempted past the end of the file.</source>
          <target state="translated">非同期の読み取りがファイルの終わりを超えて試行されました。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を開始します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.FileStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.FileStream.WriteAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.FileStream.WriteAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as BeginWrite and &lt;xref:System.IO.FileStream.EndWrite%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンは BeginWrite などのメソッドを使用する必要があると&lt;xref:System.IO.FileStream.EndWrite%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.FileStream.EndWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;, and &lt;xref:System.IO.FileStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、 &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;、および&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.FileStream.FlushAsync%2A&gt;&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.EndWrite%2A&gt; must be called exactly once on every &lt;xref:System.IAsyncResult&gt; from BeginWrite.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;1 回だけ呼び出す必要がありますすべて&lt;xref:System.IAsyncResult&gt;を渡した&lt;/xref:System.IAsyncResult&gt;。&lt;/xref:System.IO.FileStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.EndWrite%2A&gt; will block until the I/O operation has completed.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;I/O 操作が完了するまでブロックされます。&lt;/xref:System.IO.FileStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.BeginWrite%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.BeginWrite%2A&gt;。&lt;/xref:System.IO.Stream.BeginWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream&gt; provides two different modes of operation: synchronous I/O and asynchronous I/O.</source>
          <target state="translated">&lt;xref:System.IO.FileStream&gt;操作の&amp;2; つの異なるモードを提供します。 I/O 同期と非同期 I/O です。&lt;/xref:System.IO.FileStream&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>While either can be used, the underlying operating system resources might allow access in only one of these modes.</source>
          <target state="translated">いずれかを使用できますが、基になるオペレーティング システムのリソースは、これらのモードの&amp;1; つのみで、アクセスを許可する場合があります。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>By default, &lt;xref:System.IO.FileStream&gt; opens the operating system handle synchronously.</source>
          <target state="translated">既定では、&lt;xref:System.IO.FileStream&gt;オペレーティング システム ハンドルを同期的が開きます&lt;/xref:System.IO.FileStream&gt;。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>In Windows, this slows down asynchronous methods.</source>
          <target state="translated">Windows では、非同期メソッドの速度が低下します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>If asynchronous methods are used, use the &lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt; constructor.</source>
          <target state="translated">非同期メソッドを使用している場合を使用して、&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;コンス トラクター&lt;/xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt; 。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from BeginWrite.</source>
          <target state="translated">ストリームが閉じているか、無効な引数を渡す場合の例外が直ちにスローされます BeginWrite からです。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to &lt;xref:System.IO.FileStream.EndWrite%2A&gt;.</source>
          <target state="translated">IO 要求中にディスク障害など、非同期書き込み要求中に発生したエラーは、スレッド プールのスレッドで発生し、 &lt;xref:System.IO.FileStream.EndWrite%2A&gt;。&lt;/xref:System.IO.FileStream.EndWrite%2A&gt;への呼び出しに可視になります。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">複数の非同期要求は、不定の要求の完了の順序をレンダリングします。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">現在のストリームに書き込むデータを保持するバッファー。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`array`</ph> at which to begin copying bytes to the current stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`array`</ph>現在のストリームにバイトのコピーを開始する位置。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">非同期の書き込み操作が完了したときに呼び出されるメソッド。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">この特定の非同期書き込み要求を他の要求と区別するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>An object that references the asynchronous write.</source>
          <target state="translated">非同期の書き込みを参照するオブジェクト。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> length minus <ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph> is less than <ph id="ph3">&lt;code&gt;numBytes&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>引いた長さ<ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph>はより小さい<ph id="ph3">&lt;code&gt;numBytes&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;numBytes&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;numBytes&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">現在のストリームが読み取りをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support reading, calls to the &lt;xref:System.IO.FileStream.Read%2A&gt;, &lt;xref:System.IO.FileStream.ReadByte%2A&gt;, and &lt;xref:System.IO.FileStream.BeginRead%2A&gt; methods throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;読み取りをサポートしませんへの呼び出し、 &lt;xref:System.IO.FileStream.Read%2A&gt;、 &lt;xref:System.IO.FileStream.ReadByte%2A&gt;、&lt;xref:System.IO.FileStream.BeginRead%2A&gt;メソッドはスロー &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;&lt;/xref:System.IO.FileStream.BeginRead%2A&gt;と&lt;/xref:System.IO.FileStream.ReadByte%2A&gt;&lt;/xref:System.IO.FileStream.Read%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports reading; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with write-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームが読み取りをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じているか書き込み専用アクセスで開かれた場合。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">現在のストリームがシークをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support seeking, calls to &lt;xref:System.IO.FileStream.Length%2A&gt;, &lt;xref:System.IO.FileStream.SetLength%2A&gt;, &lt;xref:System.IO.FileStream.Position%2A&gt;, and &lt;xref:System.IO.FileStream.Seek%2A&gt; throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;への呼び出しをシークをサポートしていない&lt;xref:System.IO.FileStream.Length%2A&gt;、 &lt;xref:System.IO.FileStream.SetLength%2A&gt;、 &lt;xref:System.IO.FileStream.Position%2A&gt;、 &lt;xref:System.IO.FileStream.Seek%2A&gt; &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;をスロー&lt;/xref:System.IO.FileStream.Seek%2A&gt;および&lt;/xref:System.IO.FileStream.Position%2A&gt;&lt;/xref:System.IO.FileStream.SetLength%2A&gt;&lt;/xref:System.IO.FileStream.Length%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports seeking; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or if the <bpt id="p3">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> was constructed from an operating-system handle such as a pipe or output to the console.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームがシークをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じている場合、または場合、 <bpt id="p3">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>コンソールにパイプ出力などのオペレーティング システム ハンドルから構築されています。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">現在のストリームが書き込みをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support writing, a call to &lt;xref:System.IO.FileStream.SetLength%2A&gt;, &lt;xref:System.IO.FileStream.Write%2A&gt;, &lt;xref:System.IO.FileStream.BeginWrite%2A&gt;, or &lt;xref:System.IO.FileStream.WriteByte%2A&gt; throws a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;への呼び出しの書き込みをサポートしていません&lt;xref:System.IO.FileStream.SetLength%2A&gt;、 &lt;xref:System.IO.FileStream.Write%2A&gt;、 &lt;xref:System.IO.FileStream.BeginWrite%2A&gt;、 &lt;xref:System.IO.FileStream.WriteByte%2A&gt; &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;をスロー&lt;/xref:System.IO.FileStream.WriteByte%2A&gt;または&lt;/xref:System.IO.FileStream.BeginWrite%2A&gt;&lt;/xref:System.IO.FileStream.Write%2A&gt;&lt;/xref:System.IO.FileStream.SetLength%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports writing; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームが書き込みをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じているか、読み取り専用アクセスで開かれた場合。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.ComponentModel.Component.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ComponentModel.Component.Dispose%2A&gt; invokes the protected Dispose method with the <ph id="ph1">`disposing`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;保護された Dispose メソッドを呼び出し、<ph id="ph1">`disposing`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes Dispose with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;Dispose を呼び出す<ph id="ph1">`disposing`</ph>'éý'<ph id="ph2">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.IO.FileStream&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.IO.FileStream&gt;参照。&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>This method invokes the &lt;xref:System.ComponentModel.Component.Dispose%2A&gt; method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;参照される各オブジェクトのメソッド&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">保留中の非同期読み取り操作を完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.FileStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.FileStream.ReadAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.FileStream.ReadAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.FileStream.BeginRead%2A&gt; and EndRead to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.FileStream.BeginRead%2A&gt;と非同期のファイル操作を実装する EndRead&lt;/xref:System.IO.FileStream.BeginRead%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;, and &lt;xref:System.IO.FileStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、 &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;、および&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.FileStream.FlushAsync%2A&gt;&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>EndRead must be called exactly for every call to &lt;xref:System.IO.FileStream.BeginRead%2A&gt;.</source>
          <target state="translated">EndRead は&lt;xref:System.IO.FileStream.BeginRead%2A&gt;。&lt;/xref:System.IO.FileStream.BeginRead%2A&gt;呼び出しごとに正確に呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.EndRead%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.EndRead%2A&gt;。&lt;/xref:System.IO.Stream.EndRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>EndRead can be called on every &lt;xref:System.IAsyncResult&gt; from &lt;xref:System.IO.FileStream.BeginRead%2A&gt;.</source>
          <target state="translated">EndRead は、すべて&lt;xref:System.IAsyncResult&gt;&lt;xref:System.IO.FileStream.BeginRead%2A&gt;。&lt;/xref:System.IO.FileStream.BeginRead%2A&gt;&lt;/xref:System.IAsyncResult&gt;で呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Calling EndRead tells you how many bytes were read from the stream.</source>
          <target state="translated">EndRead を呼び出すことがわかりますストリームから読み取られたバイト数。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>EndRead will block until the I/O operation has completed.</source>
          <target state="translated">EndRead は、I/O 操作が完了するまでブロックされます。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">待機する保留中の非同期要求への参照。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The number of bytes read from the stream, between 0 and the number of bytes you requested.</source>
          <target state="translated">0 ~ 要求したバイト数の間のストリームから読み取られたバイト数。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">ストリームが返されるだけストリームの末尾では 0、それ以外の場合は、ブロックには、少なくとも 1 バイトが読み込み可能になるまでです。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.FileStream.BeginRead*&gt; on this class.</source>
          <target state="translated">この&lt;xref:System.IAsyncResult&gt;オブジェクトは、&lt;xref:System.IO.FileStream.BeginRead*&gt;このクラスで&lt;/xref:System.IO.FileStream.BeginRead*&gt;呼び出すことにより作成されていません&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>EndRead is called multiple times.</source>
          <target state="translated">EndRead は複数回呼び出されます。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">I/O 操作が完了するまでは、非同期の書き込み操作とブロックを終了します。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.FileStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.FileStream.WriteAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.FileStream.WriteAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.FileStream.BeginWrite%2A&gt; and EndWrite to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;と非同期のファイル操作を実装する EndWrite&lt;/xref:System.IO.FileStream.BeginWrite%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;, and &lt;xref:System.IO.FileStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、 &lt;xref:System.IO.Stream.CopyToAsync%2A&gt;、および&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.FileStream.FlushAsync%2A&gt;&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.EndWrite%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.EndWrite%2A&gt;。&lt;/xref:System.IO.Stream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>EndWrite must be called exactly once on every &lt;xref:System.IAsyncResult&gt; from &lt;xref:System.IO.FileStream.BeginWrite%2A&gt;.</source>
          <target state="translated">EndWrite はすべて&lt;xref:System.IAsyncResult&gt;&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;。&lt;/xref:System.IO.FileStream.BeginWrite%2A&gt;&lt;/xref:System.IAsyncResult&gt;で&amp;1; 回だけ呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>EndWrite will block until the I/O operation has completed.</source>
          <target state="translated">EndWrite は、I/O 操作が完了するまでブロックされます。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The pending asynchronous I/O request.</source>
          <target state="translated">保留中の非同期 I/O 要求。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.Stream.BeginWrite*&gt; on this class.</source>
          <target state="translated">この&lt;xref:System.IAsyncResult&gt;オブジェクトは、&lt;xref:System.IO.Stream.BeginWrite*&gt;このクラスで&lt;/xref:System.IO.Stream.BeginWrite*&gt;呼び出すことにより作成されていません&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>EndWrite is called multiple times.</source>
          <target state="translated">EndWrite は複数回呼び出されます。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">ストリームが閉じているか、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">リソースが解放され、ガベージ コレクターがクリアするときに他のクリーンアップ操作が実行されることにより、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The garbage collector calls <ph id="ph1">`Finalize`</ph> when the current object is ready to be finalized.</source>
          <target state="translated">ガベージ コレクター<ph id="ph1">`Finalize`</ph>現在のオブジェクトが完了する準備ができています。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Finalize`</ph> closes the <ph id="ph2">`FileStream`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph>閉じる、<ph id="ph2">`FileStream`</ph>です。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file.</source>
          <target state="translated">このストリームのバッファーをクリアし、ファイルに書き込まれるバッファー内のデータ。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt;。&lt;/xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>When you call the Flush method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">Flush メソッドを呼び出すときに、オペレーティング システム I/O バッファーがフラッシュもされます。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A stream’s encoder is not flushed unless you explicitly call Flush or dispose of the object.</source>
          <target state="translated">明示的にフラッシュの呼び出しやオブジェクトの破棄しない限り、ストリームのエンコーダーはフラッシュされません。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Setting &lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt; to <ph id="ph1">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">設定&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;に<ph id="ph1">`true`</ph>に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します&lt;/xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</source>
          <target state="translated">このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Because a buffer can be used for either reading or writing, Flush performs the following two functions:      -   Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.</source>
          <target state="translated">フラッシュが次の&amp;2; つの関数を実行して、バッファーは、読み取りまたは書き込みのいずれかを使用できる、ため: - 以前バッファーに書き込まれたすべてのデータがファイルにコピーし、エンコーダー状態を除く、バッファーをクリアします。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>-   If &lt;xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName&gt; is <ph id="ph1">`true`</ph> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.</source>
          <target state="translated">If&lt;xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName&gt;は<ph id="ph1">`true`</ph>とデータが以前の読み取りにバッファーをファイルからコピー、ファイル内の現在位置が、バッファー内の未読のバイト数だけデクリメントします&lt;/xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The buffer is then cleared.</source>
          <target state="translated">バッファーをクリアし、します。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.FileStream.Flush%28System.Boolean%29&gt; method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
          <target state="translated">使用して、&lt;xref:System.IO.FileStream.Flush%28System.Boolean%29&gt;バッファリングされたすべてのデータの中間ファイル バッファーのことを確認するときのメソッドのオーバー ロードが記述されたディスクにします&lt;/xref:System.IO.FileStream.Flush%28System.Boolean%29&gt;。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</source>
          <target state="translated">このストリームのバッファーをクリアし、ファイルに書き込まれるバッファー内のデータし、もすべての中間ファイル バッファーをクリアします。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
          <target state="translated">バッファリングされたすべてのデータの中間ファイル バッファーのことを確認する場合は、このオーバー ロードが書き込まれます使用してディスクにします。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>When you call the Flush method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">Flush メソッドを呼び出すときに、オペレーティング システム I/O バッファーがフラッシュもされます。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to flush all intermediate file buffers; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>すべての中間ファイル バッファーをフラッシュするにはそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">このストリームのすべてのバッファーをクリアに非同期的に、基になるデバイスに書き込まれるバッファー内のデータ、およびキャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>When you call the FlushAsync method, the operating system I/O buffer is also flushed.</source>
          <target state="translated">FlushAsync メソッドを呼び出すときに、オペレーティング システム I/O バッファーがフラッシュもされます。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If the operation is canceled before it completes, the returned task contains the &lt;xref:System.Threading.Tasks.TaskStatus&gt; value for the &lt;xref:System.Threading.Tasks.Task.Status%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、&lt;xref:System.Threading.Tasks.TaskStatus&gt;値を&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Status%2A&gt;&lt;/xref:System.Threading.Tasks.TaskStatus&gt;。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>If the handle to the file is disposed, the returned task contains the &lt;xref:System.ObjectDisposedException&gt; exception in the &lt;xref:System.Threading.Tasks.Task.Exception%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、&lt;xref:System.ObjectDisposedException&gt;での例外、&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Exception%2A&gt;&lt;/xref:System.ObjectDisposedException&gt;。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.Security.AccessControl.FileSecurity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that encapsulates the access control list (ACL) entries for the file described by the current <bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Security.AccessControl.FileSecurity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在によって記述されるファイルのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト<bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>While the &lt;xref:System.IO.FileStream&gt; class and GetAccessControl can be used to retrieve the access control list (ACL) entries of an existing file, consider using &lt;xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName&gt; method, as it is easier to use.</source>
          <target state="translated">中に、&lt;xref:System.IO.FileStream&gt;使用を検討して、既存のファイルのアクセス制御リスト (ACL) エントリを取得することができますを使用するクラスと GetAccessControl&lt;xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName&gt;ので、メソッドは使いやすくします&lt;/xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName&gt;&lt;/xref:System.IO.FileStream&gt;。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Use the GetAccessControl method to retrieve the ACL entries for a file.</source>
          <target state="translated">ファイルの ACL エントリを取得するのにには、GetAccessControl メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</source>
          <target state="translated">ACL は、個人やグループがある、または権限がない、指定されたファイルの特定のアクションをについて説明します。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: アクセス制御リスト エントリを追加または<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>An object that encapsulates the access control settings for the file described by the current <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">現在の記述されるファイルのアクセス制御の設定をカプセル化するオブジェクト<bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられます。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>An I/O error occurred while opening the file.</source>
          <target state="translated">ファイルを開くときに I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The file could not be found.</source>
          <target state="translated">ファイルが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This operation is not supported on the current platform.</source>
          <target state="translated">この操作は現在のプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>-or-       The caller does not have the required permission.</source>
          <target state="translated">または、呼び出し元に必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Gets the operating system file handle for the file that the current <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object encapsulates.</source>
          <target state="translated">ファイルのオペレーティング システム ファイル ハンドルを取得する現在<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>This property is an operating system handle for use with operating-system-provided system calls (such as <ph id="ph1">`ReadFile`</ph> on Windows).</source>
          <target state="translated">このプロパティは、オペレーティング システムに用意されているシステムの呼び出しで使用するためのオペレーティング システム ハンドル (など<ph id="ph1">`ReadFile`</ph>Windows 上)。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>It will not work with C library functions that expect a file descriptor, such as <ph id="ph1">`fread`</ph>.</source>
          <target state="translated">など、ファイル記述子を期待する C ライブラリ関数では動作しません<ph id="ph1">`fread`</ph>です。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The operating system handle might have been opened synchronously or asynchronously, depending on which <ph id="ph1">`FileStream`</ph> constructor was called.</source>
          <target state="translated">オペレーティング システム ハンドルが開かれた同期または非同期で、に応じて<ph id="ph1">`FileStream`</ph>コンス トラクターが呼び出されました。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.FileStream.IsAsync%2A&gt; property to discover whether this handle was opened asynchronously.</source>
          <target state="translated">使用して、&lt;xref:System.IO.FileStream.IsAsync%2A&gt;プロパティをこのハンドルが非同期的に開かれたかどうかを検出します&lt;/xref:System.IO.FileStream.IsAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to <ph id="ph1">`ReadFile`</ph> and <ph id="ph2">`WriteFile`</ph>.</source>
          <target state="translated">Win32 では、つまり、重複 I/O 用、ハンドルが開かれた、異なるパラメーターを必要と<ph id="ph1">`ReadFile`</ph>と<ph id="ph2">`WriteFile`</ph>です。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Data corruption might occur if a <ph id="ph2">`FileStream`</ph> is created, its handle is passed, some operation moves the handle's file pointer, and then the <ph id="ph3">`FileStream`</ph> is used again.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 場合に、データの破損が発生する可能性があります、<ph id="ph2">`FileStream`</ph>が作成されると、そのハンドルが渡される、なんらかの操作が、ハンドルのファイル ポインターを移動し、<ph id="ph3">`FileStream`</ph>もう一度使用されます。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Multiple threads cannot safely write to the same file simultaneously, and <ph id="ph1">`FileStream`</ph> buffering code assumes that it exclusively controls the handle.</source>
          <target state="translated">複数のスレッドは、同時に同じファイルに書き込めません安全と<ph id="ph1">`FileStream`</ph>コードをバッファー処理には、行うことは想定しています。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileStream`</ph> might throw an &lt;xref:System.IO.IOException&gt; if <ph id="ph2">`FileStream`</ph> detects that some other process has moved the file pointer.</source>
          <target state="translated"><ph id="ph1">`FileStream`</ph>スローする可能性、&lt;xref:System.IO.IOException&gt;場合<ph id="ph2">`FileStream`</ph>他のプロセスがファイル ポインターを移動したことを検出します&lt;/xref:System.IO.IOException&gt;。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>To avoid this, do not write any data into a portion of the file that <ph id="ph1">`FileStream`</ph> might have buffered, and restore the file pointer to the location it had when methods were last called on <ph id="ph2">`FileStream`</ph>.</source>
          <target state="translated">これを回避するには、書き込みませんすべてのデータ ファイルの一部にする<ph id="ph1">`FileStream`</ph>がバッファーに格納したとしたときにメソッドが呼び出された最後の場所にファイル ポインターを復元<ph id="ph2">`FileStream`</ph>です。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The operating system file handle for the file encapsulated by this <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, or -1 if the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has been closed.</source>
          <target state="translated">これによってカプセル化されるファイルのオペレーティング システム ファイル ハンドル<bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト、または-1 の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が閉じられました。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was opened asynchronously or synchronously.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が非同期的または同期的に開かれました。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsAsync`</ph> property detects whether the <ph id="ph2">`FileStream`</ph> handle was opened asynchronously, enabling your code to use the &lt;xref:System.IO.FileStream.Handle%2A&gt; property correctly.</source>
          <target state="translated"><ph id="ph1">`IsAsync`</ph>プロパティを検出するかどうか、<ph id="ph2">`FileStream`</ph>ハンドルが開かれた非同期的に、使用するようコードを有効にすると、&lt;xref:System.IO.FileStream.Handle%2A&gt;プロパティ正しく&lt;/xref:System.IO.FileStream.Handle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>In Win32, <ph id="ph1">`IsAsync`</ph> being true means the handle was opened for overlapped I/O, and thus requires different parameters to <ph id="ph2">`ReadFile`</ph> and <ph id="ph3">`WriteFile`</ph>.</source>
          <target state="translated">Win32 では、 <ph id="ph1">`IsAsync`</ph> true を示し、ハンドル重複 I/O 用に開かれたために異なるパラメーターを必要とされている<ph id="ph2">`ReadFile`</ph>と<ph id="ph3">`WriteFile`</ph>です。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>You specify this value when you create an instance of the &lt;xref:System.IO.FileStream&gt; class using a constructor that has an <ph id="ph1">`isAsync`</ph>, <ph id="ph2">`useAsync`</ph>, or <ph id="ph3">`options`</ph> parameter.</source>
          <target state="translated">インスタンスを作成するときに、この値を指定する、&lt;xref:System.IO.FileStream&gt;クラスを持つコンス トラクターを使用して、 <ph id="ph1">`isAsync`</ph>、 <ph id="ph2">`useAsync`</ph>、または<ph id="ph3">`options`</ph>パラメーター&lt;/xref:System.IO.FileStream&gt; 。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>When the property is <ph id="ph1">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.</source>
          <target state="translated">このプロパティが<ph id="ph1">`true`</ph>ストリームがファイルの操作を非同期的に実行する重複 I/O を使用します。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>However, the IsAsync property does not have to be <ph id="ph1">`true`</ph> to call the &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;, &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;, or &lt;xref:System.IO.Stream.CopyToAsync%2A&gt; method.</source>
          <target state="translated">ただし、IsAsync プロパティは、する必要はありません<ph id="ph1">`true`</ph>を呼び出して、 &lt;xref:System.IO.FileStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.FileStream.WriteAsync%2A&gt;、または&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;メソッド&lt;/xref:System.IO.Stream.CopyToAsync%2A&gt;&lt;/xref:System.IO.FileStream.WriteAsync%2A&gt;&lt;/xref:System.IO.FileStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>When the IsAsync property is <ph id="ph1">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
          <target state="translated">IsAsync プロパティが<ph id="ph1">`false`</ph>および書き込み操作を非同期の読み込みを呼び出すと、引き続き、UI スレッドはブロックされませんが、実際の I/O 操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> was opened asynchronously; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が非同期的に以外の場合、開かれた<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Gets the length in bytes of the stream.</source>
          <target state="translated">ストリームのバイトの長さを取得します。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">バイト単位のストリームの長さを表す long 値。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.FileStream.CanSeek*&gt; for this stream is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.IO.FileStream.CanSeek*&gt;このストリームは<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。&lt;/xref:System.IO.FileStream.CanSeek*&gt;</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>An I/O error, such as the file being closed, occurred.</source>
          <target state="translated">閉じられているファイルなど、I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Prevents other processes from reading from or writing to the <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">他のプロセスからの読み取りまたは書き込み禁止、 <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.</source>
          <target state="translated">ファイル ストリームの範囲をロックすると、ファイル ストリームの範囲にロックのプロセスの排他アクセスのスレッドが与えられます。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The beginning of the range to lock.</source>
          <target state="translated">ロックする範囲の先頭。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be equal to or greater than zero (0).</source>
          <target state="translated">このパラメーターの値は、0 (ゼロ) 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The range to be locked.</source>
          <target state="translated">ロックする範囲。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられます。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The process cannot access the file because another process has locked a portion of the file.</source>
          <target state="translated">別のプロセスが、ファイルの一部をロックしているために、プロセスは、ファイルにアクセスできません。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Gets the name of the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that was passed to the constructor.</source>
          <target state="translated">名前を取得、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コンス トラクターに渡されました。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>A string that is the name of the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">示す文字列の名前、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Gets or sets the current position of this stream.</source>
          <target state="translated">取得またはこのストリームの現在の位置を設定します。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置にシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>When you seek beyond the length of the file, the file size grows.</source>
          <target state="translated">シークすると、ファイルの長さを超えて、ファイルのサイズが大きくなります。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.</source>
          <target state="translated">Microsoft Windows NT 以降では、ファイルの末尾に追加されたデータすべてが&amp;0; に設定します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</source>
          <target state="translated">Microsoft Windows 98 またはそれ以前は、ファイルの末尾に追加されたデータすべてがデータは既に削除は 0 に設定されていません。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.</source>
          <target state="translated">Windows 98 またはそれ以前のストリームの末尾を越える大きな値に、ストリームの位置を設定すると、例外が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The current position of this stream.</source>
          <target state="translated">このストリームの現在位置。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">ストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Attempted to set the position to a negative value.</source>
          <target state="translated">位置を負の値に設定しようとしています。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Attempted seeking past the end of a stream that does not support this.</source>
          <target state="translated">これをサポートしないストリームの末尾を越えたシークしようとしました。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Reads a block of bytes from the stream and writes the data in a given buffer.</source>
          <target state="translated">ストリームからバイトのブロックを読み取り、特定のバッファーにデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.Read%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.Read%2A&gt;。&lt;/xref:System.IO.Stream.Read%2A&gt;</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in <ph id="ph2">`array`</ph> (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット<ph id="ph2">`array`</ph>(バッファーのインデックス) 読み取りを開始する位置を示す、<ph id="ph3">`count`</ph>パラメーターは、このストリームから読み取られるバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に達した場合は、実際の数バイトを読み取り、または&amp;0; を返されるです。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">読み取り操作が成功した場合、ストリームの現在の位置は読み取られたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>The Read method returns zero only after reaching the end of the stream.</source>
          <target state="translated">Read メソッドでは、ストリームの末尾に到達した場合にのみゼロを返します。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Otherwise, Read always reads at least one byte from the stream before returning.</source>
          <target state="translated">それ以外の場合、読み取り常に少なくとも&amp;1; バイトのストリームから読み取りを返す前にします。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>If no data is available from the stream upon a call to Read, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">読み取りを呼び出すとストリームから使用可能なデータがない場合、メソッドは、少なくとも&amp;1; バイトのデータを返すことができるまでにブロックされます。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.IO.BinaryReader&gt; for reading primitive data types.</source>
          <target state="translated">使用して&lt;xref:System.IO.BinaryReader&gt;プリミティブ データ型を読み取るためです&lt;/xref:System.IO.BinaryReader&gt;。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Do not interrupt a thread that is performing a read operation.</source>
          <target state="translated">読み取り操作を実行するスレッドを中断しません。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</source>
          <target state="translated">アプリケーションは正常に実行するスレッドはブロック解除後に見えますが、中断は、アプリケーションのパフォーマンスと信頼性を減らすことができます。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the specified byte array with the values between <ph id="ph1">`offset`</ph> and (<ph id="ph2">`offset`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> - 1<ph id="ph5">`)`</ph> replaced by the bytes read from the current source.</source>
          <target state="translated">このメソッドが戻るときまでの値が指定したバイト配列が含まれています。<ph id="ph1">`offset`</ph>と (<ph id="ph2">`offset`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> - 1<ph id="ph5">`)`</ph> 、現在のソースから読み取ったバイトにより置き換えられます。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`array`</ph> at which the read bytes will be placed.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`array`</ph>れる読み取りのバイトを配置します。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計バイト数。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</source>
          <target state="translated">要求したかどうかは、そのバイト数が現在使用できるか、ストリームの末尾に達する場合は&amp;0; をバイト数よりも少ない可能性があります。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> describe an invalid range in <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>および<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>で無効な範囲を記述<ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取ります、読み取られたバイト数だけストリーム内の位置を進めますキャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The ReadAsync method enables you to perform resource-intensive file operations without blocking the main thread.</source>
          <target state="translated">ReadAsync メソッドでは、メイン スレッドをブロックすることがなくリソースを消費するファイルの操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、特に重要な<ph id="ph1">[!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)]</ph>アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)]</ph>アプリで、時間のかかるストリーム操作が UI スレッドをブロックされ、アプリが動作するいないと表示されます。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.FileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、 &lt;xref:System.IO.FileStream.CanRead%2A&gt;、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>If the operation is canceled before it completes, the returned task contains the &lt;xref:System.Threading.Tasks.TaskStatus&gt; value for the &lt;xref:System.Threading.Tasks.Task.Status%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、&lt;xref:System.Threading.Tasks.TaskStatus&gt;値を&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Status%2A&gt;&lt;/xref:System.Threading.Tasks.TaskStatus&gt;。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>If the handle to the file is disposed, the returned task contains the &lt;xref:System.ObjectDisposedException&gt; exception in the &lt;xref:System.Threading.Tasks.Task.Exception%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、&lt;xref:System.ObjectDisposedException&gt;での例外、&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Exception%2A&gt;&lt;/xref:System.ObjectDisposedException&gt;。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data from the stream.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`buffer`</ph>ストリームからデータを書き込む開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">読み取り操作を表す、非同期タスク。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">TResult</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターには、バッファーに読み取られたバイトの合計数が含まれています。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">結果の値は、現在使用できるバイト数が要求した数より小さいか、ストリームの末尾に達している場合 0 (ゼロ) であることを要求したバイト数より小さくできます。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">合計<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>と<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>バッファー長を超えています。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">ストリームは、前の読み取り操作で使用するには現在します。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Reads a byte from the file and advances the read position one byte.</source>
          <target state="translated">ファイルからバイトを読み取り、読み取り位置を&amp;1; バイト進めます。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.ReadByte%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.ReadByte%2A&gt;。&lt;/xref:System.IO.Stream.ReadByte%2A&gt;</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanRead%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.FileStream.CanRead%2A&gt;、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanRead%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.IO.Stream.CanRead%2A&gt;。&lt;/xref:System.IO.Stream.CanRead%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The byte, cast to an &lt;xref:System.Int32&gt;, or -1 if the end of the stream has been reached.</source>
          <target state="translated">キャストしたバイト、 &lt;xref:System.Int32&gt;、ストリームの末尾に達している場合は-1&lt;/xref:System.Int32&gt; 。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>The current stream does not support reading.</source>
          <target state="translated">現在のストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The current stream is closed.</source>
          <target state="translated">現在のストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="Microsoft.Win32.SafeHandles.SafeFileHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the operating system file handle for the file that the current <bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object encapsulates.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="Microsoft.Win32.SafeHandles.SafeFileHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ファイルのオペレーティング システム ファイル ハンドルを表すオブジェクトを現在<bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The SafeFileHandle property automatically flushes the stream and sets the current stream position to 0.</source>
          <target state="translated">SafeFileHandle プロパティは自動的に、ストリームをフラッシュし、現在のストリームの位置を 0 に設定します。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>This allows the file to be moved or the stream position to be reset by another stream using the SafeFileHandle returned by this property.</source>
          <target state="translated">これにより、移動するファイルまたはこのプロパティによって返される SafeFileHandle を使用して別のストリームをリセットするストリームの位置。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An object that represents the operating system file handle for the file that the current <bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object encapsulates.</source>
          <target state="translated">ファイルのオペレーティング システム ファイル ハンドルを表すオブジェクトを現在<bpt id="p1">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトによってカプセル化します。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Sets the current position of this stream to the given value.</source>
          <target state="translated">このストリームの現在の位置を指定した値に設定します。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.Seek%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.Seek%2A?displayProperty=fullName&gt;。&lt;/xref:System.IO.Stream.Seek%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName&gt; property to determine whether the current instance supports seeking.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName&gt;、現在のインスタンスがシークをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName&gt;。&lt;/xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>You can seek to any location beyond the length of the stream.</source>
          <target state="translated">ストリームの長さを超えた位置をシークできます。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>When you seek beyond the length of the file, the file size grows.</source>
          <target state="translated">シークすると、ファイルの長さを超えて、ファイルのサイズが大きくなります。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>In Windows NT and later versions, data added to the end of the file is set to zero.</source>
          <target state="translated">Windows NT とそれ以降のバージョンでは、ファイルの末尾に追加されたデータは、0 に設定されます。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</source>
          <target state="translated">Windows 98 またはそれ以前のバージョンでは、ファイルの末尾に追加されたデータが設定されていないデータは既に削除は 0 にします。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The point relative to <ph id="ph1">`origin`</ph> from which to begin seeking.</source>
          <target state="translated">に対する相対ポイント<ph id="ph1">`origin`</ph>シークの開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Specifies the beginning, the end, or the current position as a reference point for <ph id="ph1">`offset`</ph>, using a value of type &lt;xref:System.IO.SeekOrigin&gt;.</source>
          <target state="translated">参照ポイントとして先頭、末尾、または現在位置を示す<ph id="ph1">`offset`</ph>、 &lt;xref:System.IO.SeekOrigin&gt;.&lt;/xref:System.IO.SeekOrigin&gt;型の値を使用します。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The new position in the stream.</source>
          <target state="translated">ストリームの新しい位置。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking, such as if the <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is constructed from a pipe or console output.</source>
          <target state="translated">ストリームが場合など、シークをサポートしていない、 <bpt id="p1">&lt;xref uid="langword_csharp_FileStream" name="FileStream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>パイプまたはコンソール出力から構成されます。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Seeking is attempted before the beginning of the stream.</source>
          <target state="translated">シークがストリームの先頭の前に試行されます。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Applies access control list (ACL) entries described by a <bpt id="p1">&lt;xref href="System.Security.AccessControl.FileSecurity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to the file described by the current <bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">示すアクセス制御リスト (ACL) エントリを適用する<bpt id="p1">&lt;xref href="System.Security.AccessControl.FileSecurity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが現在の説明されているファイルに<bpt id="p2">&lt;xref href="System.IO.FileStream"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>While the &lt;xref:System.IO.FileStream&gt; class and SetAccessControl can be used on an existing file, consider using the &lt;xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName&gt; method as it is easier to use.</source>
          <target state="translated">中に、&lt;xref:System.IO.FileStream&gt;クラスと SetAccessControl 既存のファイルで使用できる、使用を検討して、&lt;xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName&gt;メソッドが簡単に使用します&lt;/xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName&gt;&lt;/xref:System.IO.FileStream&gt;。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The SetAccessControl method applies access control list (ACL) entries to a file that represents the noninherited ACL list.</source>
          <target state="translated">SetAccessControl メソッドは、継承されない ACL リストを表すファイルへのアクセス制御リスト (ACL) エントリを適用します。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The ACL specified for the <ph id="ph2">`fileSecurity`</ph> parameter replaces the existing ACL for the file.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;、ACL に指定された、<ph id="ph2">`fileSecurity`</ph>パラメーターは、ファイルの既存の ACL を置き換えます。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>To add permissions for a new user, use the &lt;xref:System.IO.FileStream.GetAccessControl%2A&gt; method to obtain the existing ACL, modify it, and then use SetAccessControl to apply it back to the file.</source>
          <target state="translated">新しいユーザーのアクセス許可を追加するには、使用、&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;され、既存の ACL を取得して、変更、適用することを SetAccessControl を使用するメソッドが、ファイルをバックアップします&lt;/xref:System.IO.FileStream.GetAccessControl%2A&gt;。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</source>
          <target state="translated">ACL は、個人やグループがある、または権限がない、指定されたファイルの特定のアクションをについて説明します。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: アクセス制御リスト エントリを追加または<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>An object that describes an ACL entry to apply to the current file.</source>
          <target state="translated">現在のファイルに適用する ACL エントリを記述するオブジェクト。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>The file is closed.</source>
          <target state="translated">ファイルは閉じられます。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileSecurity</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileSecurity</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The file could not be found or modified.</source>
          <target state="translated">ファイルが見つからないか、変更します。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The current process does not have access to open the file.</source>
          <target state="translated">現在のプロセスには、ファイルを開くアクセスはありません。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Sets the length of this stream to the given value.</source>
          <target state="translated">このストリームの長さを指定した値に設定します。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.SetLength%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.SetLength%2A&gt;。&lt;/xref:System.IO.Stream.SetLength%2A&gt;</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより小さい場合は、ストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream.</source>
          <target state="translated">このシナリオでは、現在の位置が、新しい長さより大きい場合、現在の位置がストリームの最後のバイトまで移動します。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより大きい場合は、ストリームが展開され、現在の位置は変わりません。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are undefined.</source>
          <target state="translated">ストリームが展開されている場合、古いクライアント シークレットと新しい長さの間のストリームの内容は未定義です。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートする必要があります<ph id="ph1">`SetLength`</ph>動作をします。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing, and the &lt;xref:System.IO.FileStream.CanSeek%2A&gt; property to determine whether seeking is supported.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 使用、&lt;xref:System.IO.FileStream.CanWrite%2A&gt;プロパティを現在のインスタンスがドキュメントの作成をサポートするかどうかを確認し、&lt;xref:System.IO.FileStream.CanSeek%2A&gt;シークがサポートされているかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanSeek%2A&gt;&lt;/xref:System.IO.FileStream.CanWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanWrite%2A&gt; and &lt;xref:System.IO.Stream.CanSeek%2A&gt;.</source>
          <target state="translated">詳細については、「 &lt;xref:System.IO.Stream.CanWrite%2A&gt; &lt;xref:System.IO.Stream.CanSeek%2A&gt;。&lt;/xref:System.IO.Stream.CanSeek%2A&gt;&lt;/xref:System.IO.Stream.CanWrite%2A&gt;の使用」を参照していますください。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The new length of the stream.</source>
          <target state="translated">ストリームの新しい長さ。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートしていません。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Attempted to set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter to less than 0.</source>
          <target state="translated">設定しようと、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターを 0 未満です。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Allows access by other processes to all or part of a file that was previously locked.</source>
          <target state="translated">以前にロックされたファイルの全部または一部を他のプロセスによるアクセスを許可します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The beginning of the range to unlock.</source>
          <target state="translated">ロックを解除する範囲の先頭。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The range to be unlocked.</source>
          <target state="translated">ロックする範囲。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Writes a block of bytes to the file stream.</source>
          <target state="translated">ファイル ストリームにバイトのブロックを書き込みます。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.Write%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.Write%2A&gt;。&lt;/xref:System.IO.Stream.Write%2A&gt;</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in <ph id="ph2">`array`</ph> (the buffer index) at which to begin copying, and the <ph id="ph3">`count`</ph> parameter gives the number of bytes that will be written to the stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット<ph id="ph2">`array`</ph>(バッファーのインデックス) コピーを開始する位置を示す、<ph id="ph3">`count`</ph>パラメーターは、ストリームに書き込まれるバイト数。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>If the write operation is successful, the current position of the stream is advanced by the number of bytes written.</source>
          <target state="translated">書き込み操作が成功した場合、ストリームの現在の位置は書き込まれたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.FileStream.CanWrite%2A&gt;、現在のインスタンスが書き込みをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanWrite%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.IO.Stream.CanWrite%2A&gt;。&lt;/xref:System.IO.Stream.CanWrite%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Do not interrupt a thread that is performing a write operation.</source>
          <target state="translated">書き込み操作を実行するスレッドを中断しません。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</source>
          <target state="translated">アプリケーションは正常に実行するスレッドはブロック解除後に見えますが、中断は、アプリケーションのパフォーマンスと信頼性を減らすことができます。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>For a list of common file and directory operations, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">一般的なファイルとディレクトリの操作の一覧は、次を参照してください。<bpt id="p1">[</bpt>共通 I/O タスク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The buffer containing data to write to the stream.</source>
          <target state="translated">ストリームに書き込むデータを保持するバッファー。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`array`</ph> from which to begin copying bytes to the stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`array`</ph>ストリームにバイトのコピー開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> describe an invalid range in <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>および<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>で無効な範囲を記述<ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The current stream instance does not support writing.</source>
          <target state="translated">現在のストリームのインスタンスは、書き込みをサポートしません。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">非同期的に現在のストリームにバイトのシーケンスを書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>The WriteAsync method enables you to perform resource-intensive file operations without blocking the main thread.</source>
          <target state="translated">WriteAsync メソッドでは、メイン スレッドをブロックすることがなくリソースを消費するファイルの操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">このパフォーマンスに関する考慮事項は、特に重要な<ph id="ph1">[!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)]</ph>アプリまたは<ph id="ph2">[!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)]</ph>アプリで、時間のかかるストリーム操作が UI スレッドをブロックされ、アプリが動作するいないと表示されます。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">非同期メソッドと組み合わせてで使用される、<ph id="ph1">`async`</ph>と<ph id="ph2">`await`</ph>Visual Basic および c# のキーワードです。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.FileStream.CanWrite%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">使用して、 &lt;xref:System.IO.FileStream.CanWrite%2A&gt;、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>If the operation is canceled before it completes, the returned task contains the &lt;xref:System.Threading.Tasks.TaskStatus&gt; value for the &lt;xref:System.Threading.Tasks.Task.Status%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれる完了前に、操作が取り消された場合、&lt;xref:System.Threading.Tasks.TaskStatus&gt;値を&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Status%2A&gt;&lt;/xref:System.Threading.Tasks.TaskStatus&gt;。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>If the handle to the file is disposed, the returned task contains the &lt;xref:System.ObjectDisposedException&gt; exception in the &lt;xref:System.Threading.Tasks.Task.Exception%2A&gt; property.</source>
          <target state="translated">返されるタスクに含まれるファイルへのハンドルが破棄されている場合、&lt;xref:System.ObjectDisposedException&gt;での例外、&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;プロパティ&lt;/xref:System.Threading.Tasks.Task.Exception%2A&gt;&lt;/xref:System.ObjectDisposedException&gt;。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The buffer to write data from.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> from which to begin copying bytes to the stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`buffer`</ph>ストリームにバイトのコピー開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">合計<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>と<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>バッファー長を超えています。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">ストリームは、前の書き込み操作で使用するには現在します。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">ファイル ストリームの現在の位置にバイトを書き込みます。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.IO.Stream.WriteByte%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.IO.Stream.WriteByte%2A&gt;。&lt;/xref:System.IO.Stream.WriteByte%2A&gt;</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`WriteByte`</ph> to write a byte to a <ph id="ph2">`FileStream`</ph> efficiently.</source>
          <target state="translated">使用して<ph id="ph1">`WriteByte`</ph>にバイトを書き込む、<ph id="ph2">`FileStream`</ph>効率的にします。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>If the stream is closed or not writable, an exception will be thrown.</source>
          <target state="translated">ストリームが閉じられているか書き込み禁止になっての場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.FileStream.CanWrite%2A&gt; property to determine whether the current instance supports writing.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.FileStream.CanWrite%2A&gt;、現在のインスタンスが書き込みをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.FileStream.CanWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>For additional information, see &lt;xref:System.IO.Stream.CanWrite%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.IO.Stream.CanWrite%2A&gt;。&lt;/xref:System.IO.Stream.CanWrite%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>A byte to write to the stream.</source>
          <target state="translated">ストリームに書き込むバイト。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>