<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01a29ba8b6be0cb3371461a78f5e89c26bfe42e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.XmlMessageFormatter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7a0f67b916c300e4a76b1f295ffe289961f8de0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c058aa03a560826c952d30e6184c250444ae9e2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</source>
          <target state="translated">および XSD スキーマ定義に基づいた XML 形式を使用して、メッセージの本文からオブジェクトを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The XmlMessageFormatter is the default formatter that an instance of &lt;xref:System.Messaging.MessageQueue&gt; uses to serialize messages written to the queue.</source>
          <target state="translated">このが既定のフォーマッタのインスタンス&lt;xref:System.Messaging.MessageQueue&gt;をキューに書き込まれたメッセージをシリアル化を使用します&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you create an instance of &lt;xref:System.Messaging.MessageQueue&gt;, an instance of XmlMessageFormatter is created for you and associated with the &lt;xref:System.Messaging.MessageQueue&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageQueue&gt;このインスタンスが作成され、 &lt;xref:System.Messaging.MessageQueue&gt;。&lt;/xref:System.Messaging.MessageQueue&gt;に関連付けられている&lt;/xref:System.Messaging.MessageQueue&gt;のインスタンスを作成する場合</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can specify a different formatter by creating it in your code and assigning it to the &lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt; property of your &lt;xref:System.Messaging.MessageQueue&gt;.</source>
          <target state="translated">コードで作成し、 &lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;、 &lt;xref:System.Messaging.MessageQueue&gt;。&lt;/xref:System.Messaging.MessageQueue&gt;プロパティ&lt;/xref:System.Messaging.MessageQueue.Formatter%2A&gt;に割り当てることによって、別のフォーマッタを指定できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A queue's default XmlMessageFormatter instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; or &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; property on the formatter.</source>
          <target state="translated">キューの既定のインスタンスは、キューへの書き込みに使用できますが、いずれかに設定するまで、キューからの読み取りに使用することはできません、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;または&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;フォーマッタのプロパティ&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate &lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; constructor.</source>
          <target state="translated">既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成して、適切なに引数として渡すことによって、値が自動的に設定&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;コンス トラクター&lt;/xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When specifying &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; rather than &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">指定するときに&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;なく&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;すべてのエントリの完全修飾アセンブリ名を指定する必要があります。&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの&amp;1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット&amp;2; つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The XmlMessageFormatter is a crucial component of loosely coupled XML-based messaging.</source>
          <target state="translated">このは、疎結合された XML ベースのメッセージングの重要なコンポーネントです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</source>
          <target state="translated">XSD.exe ユーティリティを使用して、アプリケーションによって使用されるクラスをシリアル化する、ユーティリティを使用する場合など、XML スキーマを生成する XML 形式を使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The class must have a default constructor.</source>
          <target state="translated">クラスには、既定のコンス トラクターが必要です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</source>
          <target state="translated">形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</source>
          <target state="translated">このユーティリティを生成する XML スキーマの使用では、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</source>
          <target state="translated">クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、他の。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, without target types set.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ターゲットせず、クラス型のセット。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</source>
          <target state="translated">このコンス トラクターのオーバー ロードが最もよく使用、キューに書き込む際にように対象の種類の書き込み時に必要ありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To read a message from a queue using an instance of &lt;xref:System.Messaging.XmlMessageFormatter&gt; created using this constructor, you must set the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; or &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties so the formatter knows what types to attempt to deserialize.</source>
          <target state="translated">インスタンスを使用してキューからメッセージの読み取りに&lt;xref:System.Messaging.XmlMessageFormatter&gt;をこのコンス トラクターを使用して作成する必要があります設定、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;または&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;フォーマッタを逆シリアル化しようとするどのような種類を認識するためのプロパティ&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you create a new &lt;xref:System.Messaging.MessageQueue&gt;, a default &lt;xref:System.Messaging.XmlMessageFormatter&gt; instance is created, without the target types set.</source>
          <target state="translated">新規に作成するときに&lt;xref:System.Messaging.MessageQueue&gt;、既定の&lt;xref:System.Messaging.XmlMessageFormatter&gt;ターゲットの種類が設定されていないインスタンスを作成します&lt;/xref:System.Messaging.XmlMessageFormatter&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</source>
          <target state="translated">同様に、フォーマッタをこのコンス トラクターを使用して作成すると、キューから読みたい場合、対象の種類は、フォーマッタ インスタンスを設定する必要があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, setting target types passed in as an array of (fully qualified) string values.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス、(完全修飾) の文字列値の配列として渡されるターゲット型を設定します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">作成する場合、対象の種類を指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This overload of the &lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; constructor sets the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; property to the array values passed in through the <ph id="ph1">`targetTypeNames`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;コンス トラクターのセット、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;プロパティによって渡された配列の値を<ph id="ph1">`targetTypeNames`</ph>パラメーター&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; &lt;/xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Setting this property enables a &lt;xref:System.Messaging.MessageQueue&gt; using this &lt;xref:System.Messaging.XmlMessageFormatter&gt; instance to read messages containing objects of given types.</source>
          <target state="translated">により、このプロパティの設定、&lt;xref:System.Messaging.MessageQueue&gt;これを使用して&lt;xref:System.Messaging.XmlMessageFormatter&gt;のオブジェクトを含むメッセージを読み取るインスタンスの種類を指定します&lt;/xref:System.Messaging.XmlMessageFormatter&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの&amp;1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット&amp;2; つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">どちらかを使用する&amp;1; つはアプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は、読み取り時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An array of type &lt;xref:System.String&gt; that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">型の配列&lt;xref:System.String&gt;されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</source>
          <target state="translated">これらの値は、たとえば、「MyNamespace.MyOrders、MyOrdersAssemblyName」完全修飾する必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">targetTypeNames</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">targetTypeNames</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, setting target types passed in as an array of object types.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス、オブジェクトの種類の配列として渡されるターゲット型を設定します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">作成する場合、対象の種類を指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This overload of the &lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; constructor sets the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; property to the array values passed in through the <ph id="ph1">`targetTypes`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;コンス トラクターのセット、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティによって渡された配列の値を<ph id="ph1">`targetTypes`</ph>パラメーター&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; &lt;/xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Setting this property enables a &lt;xref:System.Messaging.MessageQueue&gt; using this &lt;xref:System.Messaging.XmlMessageFormatter&gt; instance to read messages containing objects of the given types.</source>
          <target state="translated">このプロパティを使用して設定、&lt;xref:System.Messaging.MessageQueue&gt;これを使用して&lt;xref:System.Messaging.XmlMessageFormatter&gt;インスタンスを指定した型のオブジェクトを含むメッセージを読み取る&lt;/xref:System.Messaging.XmlMessageFormatter&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Both the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの&amp;1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット&amp;2; つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">どちらかを使用する&amp;1; つはアプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は、読み取り時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When specifying &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; rather than &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">指定するときに&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;なく&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;すべてのエントリの完全修飾アセンブリ名を指定する必要があります。&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When using &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;, you can add each object (for example, <ph id="ph1">`MyClass`</ph>) to the list in a way demonstrated by the following C# code.</source>
          <target state="translated">使用する場合&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;、各オブジェクトを追加することができます (たとえば、 <ph id="ph1">`MyClass`</ph>) を次の c# コードに示す方法の一覧にします&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An array of type &lt;xref:System.Type&gt; that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">型の配列&lt;xref:System.Type&gt;されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">targetTypes</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">targetTypes</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Determines whether the formatter can deserialize the message.</source>
          <target state="translated">フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When CanRead is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</source>
          <target state="translated">CanRead が呼び出されたときに、フォーマッタは、メッセージの内容が、逆シリアル化できるものではかどうかを決定しようとします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties.</source>
          <target state="translated">フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型によって表される配列内の種類のいずれかと同じスキーマがある場合、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティ&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CanRead returns <ph id="ph1">`false`</ph> under the following two circumstances:      -   The message was not formatted using the &lt;xref:System.Messaging.XmlMessageFormatter&gt;.</source>
          <target state="translated">CanRead 返します<ph id="ph1">`false`</ph>次の&amp;2; つの状況で:-メッセージにフォーマットされていない&lt;xref:System.Messaging.XmlMessageFormatter&gt;.&lt;/xref:System.Messaging.XmlMessageFormatter&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-   The schema of the message body is not among those listed in either the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; or &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; property.</source>
          <target state="translated">の上記のいずれかの間でメッセージ本文のスキーマが、&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;または&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティ&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what types of objects it must be able to deserialize.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If any type is missing from the list, yet is found within the message, CanRead returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">CanRead が返す任意の型リストが見つからないか、まだがメッセージ内で見つかった場合は、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to inspect.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を検査します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the XML formatter can deserialize the message; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>XML フォーマッタがメッセージを逆シリアル化できる場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Neither the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames<bpt id="p1">*</bpt>&gt; nor &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes<ept id="p1">*</ept>&gt; property has been set.</source>
          <target state="translated">どちらも、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; も&lt;&gt; <ept id="p1">*</ept>&gt; プロパティが設定されています。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creates an instance of the <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class whose read/write properties (the sets of target types) are the same as the current <bpt id="p2">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">インスタンスを作成、 <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスが読み取り/書き込みプロパティ (ターゲットの種類のセット) は、現在と同じ<bpt id="p2">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>インスタンス。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method creates a copy of the formatter and initializes all its properties to the values of this &lt;xref:System.Messaging.XmlMessageFormatter&gt; object.</source>
          <target state="translated">このメソッドはフォーマッタのコピーを作成し、この値に、すべてのプロパティを初期化&lt;xref:System.Messaging.XmlMessageFormatter&gt;オブジェクト&lt;/xref:System.Messaging.XmlMessageFormatter&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An object whose properties are identical to those of this <bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance, but whose metadata does not specify it to be a formatter class instance.</source>
          <target state="translated">オブジェクトのプロパティがこのと同じ<bpt id="p1">&lt;xref href="System.Messaging.XmlMessageFormatter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンスはメタデータを持つができるフォーマッタ クラスのインスタンスを指定されていません。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Reads the contents from the given message and creates an object that contains the deserialized message.</source>
          <target state="translated">指定されたメッセージの内容を読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Both the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One of these properties must be set before the message can be deserialized.</source>
          <target state="translated">メッセージを逆シリアル化前に、これらのプロパティのいずれかを設定する必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The target types do not have to be specified in order to write to the queue.</source>
          <target state="translated">対象の種類をキューに書き込むために指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in XML format, to deserialize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、XML 形式で、逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The deserialized message.</source>
          <target state="translated">逆シリアル化されたメッセージ。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Neither the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames<bpt id="p1">*</bpt>&gt; nor &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes<ept id="p1">*</ept>&gt; property has been set.</source>
          <target state="translated">どちらも、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; も&lt;&gt; <ept id="p1">*</ept>&gt; プロパティが設定されています。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-or-       The instance serialized in the message body does not comply with any of the schemas represented by the types in the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames<bpt id="p1">*</bpt>&gt; and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes<ept id="p1">*</ept>&gt; properties.</source>
          <target state="translated">- または - メッセージの本文にシリアル化されたインスタンスが内の型によって表されているスキーマのいずれかに準拠していない、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; と&lt;&gt; <ept id="p1">*</ept>&gt; プロパティです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">指定されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Both the TargetTypeNames and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の TargetTypeNames と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの&amp;1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット&amp;2; つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>TargetTypeNames requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated">TargetTypeNames、アセンブリ名を指定する完全修飾であるすべてのエントリが必要です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">対象の種類は、キューから読み取るときに必要なです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The TargetTypeNames and &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; properties do not need to be set to write to the queue.</source>
          <target state="translated">TargetTypeNames と&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティはキューへの書き込みに設定する必要はありません&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An array of type &lt;xref:System.String&gt; that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated">型の配列&lt;xref:System.String&gt;、メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The TargetTypeNames property is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">TargetTypeNames プロパティは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">指定されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Both the &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and TargetTypes properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">両方の&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;TargetTypes プロパティは、フォーマッタのメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマを伝えてください&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">これにより、フォーマッタがメッセージ本文を解釈できます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you read the message using the &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">使用して、&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;、メッセージを読み取るときに</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">2 つのプロパティの&amp;1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型のセットは、結合されたセット&amp;2; つのプロパティからです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">使用するプロパティの意思決定は、アプリケーションに固有です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">対象の種類は、キューから読み取るときに必要なです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; and TargetTypes properties do not need to be set to write to the queue.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;、TargetTypes プロパティはキューへの書き込みに設定する必要はありません&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When specifying TargetTypes rather than &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">TargetTypes を指定する場合ではなくより&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時での種類の存在をチェックします&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When using TargetTypes, you can add each object (for example, <ph id="ph1">`MyClass`</ph>) to the list in a way demonstrated by the C# code <ph id="ph2">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>.</source>
          <target state="translated">TargetTypes を使用する場合は、各オブジェクトを追加することができます (たとえば、 <ph id="ph1">`MyClass`</ph>) c# コードに示す方法の一覧に<ph id="ph2">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An array of type &lt;xref:System.Type&gt; that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated">型の配列&lt;xref:System.Type&gt;、メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The TargetTypes property is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">TargetTypes プロパティは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Serializes an object into the body of the message.</source>
          <target state="translated">メッセージの本文にオブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The target types need not be specified to write to the queue as they must be when reading.</source>
          <target state="translated">対象の種類を指定して、キューへの書き込みを読み取るときにあることが必要とする必要はありません。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt; or &lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt; property is used by the formatter only when deserializing a message.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;または&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;プロパティはメッセージを逆シリアル化時にのみ、フォーマッタで使用します&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;&lt;/xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.XmlMessageFormatter&gt; makes use of the &lt;xref:System.Xml.Serialization.XmlSerializer&gt; class, which defines what can be serialized.</source>
          <target state="translated">&lt;xref:System.Messaging.XmlMessageFormatter&gt;では、使用、&lt;xref:System.Xml.Serialization.XmlSerializer&gt;クラスは、シリアル化可能なを定義します&lt;/xref:System.Xml.Serialization.XmlSerializer&gt;&lt;/xref:System.Messaging.XmlMessageFormatter&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Only public fields and public properties can be serialized.</source>
          <target state="translated">のみのパブリック フィールドおよびパブリック プロパティをシリアル化できます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</source>
          <target state="translated">構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルでエンコードされたスタイルを使用しない限り、すべてシリアル化可能なされます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose &lt;xref:System.Messaging.Message.Body*&gt; property will contain the serialized object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が&lt;xref:System.Messaging.Message.Body*&gt;プロパティがシリアル化されたオブジェクトが格納されます&lt;/xref:System.Messaging.Message.Body*&gt;。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to be serialized into the message body.</source>
          <target state="translated">&lt;xref:System.Object&gt;メッセージの本文にシリアル化します&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">message</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>