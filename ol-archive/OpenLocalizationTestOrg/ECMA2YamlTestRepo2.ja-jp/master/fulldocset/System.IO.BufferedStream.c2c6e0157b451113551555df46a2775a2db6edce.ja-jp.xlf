<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">869e2d13071ffdd5c6fbb3cdaec0c6cbfba8ffe0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.IO.BufferedStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30ffa020e95f88d749a4c4b94885b0ba7d1370ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">578f042a0dadbb4176f263189037db06eac6b3e9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adds a buffering layer to read and write operations on another stream.</source>
          <target state="translated">読み取りおよび書き込み操作に別のストリームをバッファー処理レイヤーを追加します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a default buffer size of 4096 bytes.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 4096 バイトまでの既定のバッファー サイズを持つクラス。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">共有の読み取り/書き込みバッファーは最初に割り当てられている、<ph id="ph1">`BufferedStream`</ph>オブジェクトはこのコンス トラクターで初期化します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">すべての読み取りと書き込みがより大きいか等しい場合、共有バッファーは使用されません<ph id="ph1">`bufferSize`</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The current stream.</source>
          <target state="translated">現在のストリーム。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified buffer size.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.BufferedStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したバッファー サイズを持つクラス。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">共有の読み取り/書き込みバッファーは最初に割り当てられている、<ph id="ph1">`BufferedStream`</ph>オブジェクトはこのコンス トラクターで初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">すべての読み取りと書き込みがより大きいか等しい場合、共有バッファーは使用されません<ph id="ph1">`bufferSize`</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The current stream.</source>
          <target state="translated">現在のストリーム。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The buffer size in bytes.</source>
          <target state="translated">バッファー サイズ (バイト単位)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;bufferSize&lt;/code&gt;</ph>負の値。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">非同期の読み取り操作を開始します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.BufferedStream.ReadAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.BufferedStream.ReadAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginRead%2A&gt; and &lt;xref:System.IO.Stream.EndRead%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.Stream.BeginRead%2A&gt;と&lt;xref:System.IO.Stream.EndRead%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.Stream.EndRead%2A&gt;&lt;/xref:System.IO.Stream.BeginRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;、および&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; must be called exactly once for every call to BeginRead.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;BeginRead を呼び出すたびに対して&amp;1; 回だけ呼び出すこと必要があります。&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use the &lt;xref:System.IO.BufferedStream.CanRead%2A&gt; property to determine whether the current instance supports reading.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して、 &lt;xref:System.IO.BufferedStream.CanRead%2A&gt;、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ&lt;/xref:System.IO.BufferedStream.CanRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndRead%2A&gt; must be called with this &lt;xref:System.IAsyncResult&gt; to find out how many bytes were read.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;これで呼び出されなければなりません&lt;xref:System.IAsyncResult&gt;読み取られたバイト数を確認する&lt;/xref:System.IAsyncResult&gt;。&lt;/xref:System.IO.BufferedStream.EndRead%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The buffer to read the data into.</source>
          <target state="translated">データを読み取るバッファー。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data read from the stream.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`buffer`</ph>ストリームから読み取られるデータの書き込みを開始する位置を示すです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">読み取りが完了するときに呼び出されるオプションの非同期コールバック。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">この特定の非同期読み取り要求を他の要求と区別するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An object that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">非同期の読み取りは、保留になっていることを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Attempted an asynchronous read past the end of the stream.</source>
          <target state="translated">非同期の読み取り、ストリームの終わりを超えて試行されました。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">バッファーの長さマイナス<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>はより小さい<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The current stream does not support the read operation.</source>
          <target state="translated">現在のストリームは読み取り操作をサポートしていません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を開始します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.BufferedStream.WriteAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.BufferedStream.WriteAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginWrite%2A&gt; and &lt;xref:System.IO.Stream.EndWrite%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.Stream.BeginWrite%2A&gt;と&lt;xref:System.IO.Stream.EndWrite%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.Stream.EndWrite%2A&gt;&lt;/xref:System.IO.Stream.BeginWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;、および&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; must be called exactly once on every &lt;xref:System.IAsyncResult&gt; from BeginWrite.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;1 回だけ呼び出す必要がありますすべて&lt;xref:System.IAsyncResult&gt;を渡した&lt;/xref:System.IAsyncResult&gt;。&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt; will block until the I/O operation has completed.</source>
          <target state="translated">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;I/O 操作が完了するまでブロックされます。&lt;/xref:System.IO.BufferedStream.EndWrite%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">現在のストリームに書き込むデータを保持するバッファー。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> at which to begin copying bytes to the current stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`buffer`</ph>現在のストリームにバイトのコピーを開始する位置。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">非同期の書き込み操作が完了したときに呼び出されるメソッド。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">この特定の非同期書き込み要求を他の要求と区別するユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An object that references the asynchronous write which could still be pending.</source>
          <target state="translated">保留になっていることが非同期の書き込みを参照するオブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> length minus <ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph> is less than <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>引いた長さ<ph id="ph2">&lt;code&gt;offset&lt;/code&gt;</ph>はより小さい<ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">現在のストリームが読み取りをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support reading, calls to the &lt;xref:System.IO.BufferedStream.Read%2A&gt;, &lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;, &lt;xref:System.IO.Stream.BeginRead%2A&gt;, &lt;xref:System.IO.Stream.EndRead%2A&gt;, and the <ph id="ph1">`Peek`</ph> methods of &lt;xref:System.IO.StreamReader&gt;, &lt;xref:System.IO.StringReader&gt;, and &lt;xref:System.IO.TextReader&gt; throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;読み取りをサポートしませんへの呼び出し、 &lt;xref:System.IO.BufferedStream.Read%2A&gt;、 &lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;、 &lt;xref:System.IO.Stream.BeginRead%2A&gt;、 &lt;xref:System.IO.Stream.EndRead%2A&gt;、および<ph id="ph1">`Peek`</ph>のメソッド&lt;xref:System.IO.StreamReader&gt;、 &lt;xref:System.IO.StringReader&gt;、 &lt;xref:System.IO.TextReader&gt; &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;をスロー&lt;/xref:System.IO.TextReader&gt;および&lt;/xref:System.IO.StringReader&gt;&lt;/xref:System.IO.StreamReader&gt;&lt;/xref:System.IO.Stream.EndRead%2A&gt;&lt;/xref:System.IO.Stream.BeginRead%2A&gt;&lt;/xref:System.IO.BufferedStream.ReadByte%2A&gt;&lt;/xref:System.IO.BufferedStream.Read%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports reading; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with write-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームが読み取りをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じているか書き込み専用アクセスで開かれた場合。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">現在のストリームがシークをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support seeking, calls to &lt;xref:System.IO.BufferedStream.Length%2A&gt;, &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;, &lt;xref:System.IO.BufferedStream.Position%2A&gt;, and &lt;xref:System.IO.BufferedStream.Seek%2A&gt; throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;への呼び出しをシークをサポートしていない&lt;xref:System.IO.BufferedStream.Length%2A&gt;、 &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;、 &lt;xref:System.IO.BufferedStream.Position%2A&gt;、 &lt;xref:System.IO.BufferedStream.Seek%2A&gt; &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;をスロー&lt;/xref:System.IO.BufferedStream.Seek%2A&gt;および&lt;/xref:System.IO.BufferedStream.Position%2A&gt;&lt;/xref:System.IO.BufferedStream.SetLength%2A&gt;&lt;/xref:System.IO.BufferedStream.Length%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports seeking; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or if the stream was constructed from an operating system handle such as a pipe or output to the console.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームがシークをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じているか、ストリームは、コンソールにパイプ出力などのオペレーティング システム ハンドルから構築された場合。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">現在のストリームが書き込みをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a class derived from &lt;xref:System.IO.Stream&gt; does not support writing, a call to &lt;xref:System.IO.BufferedStream.SetLength%2A&gt;, &lt;xref:System.IO.BufferedStream.Write%2A&gt;, or &lt;xref:System.IO.BufferedStream.WriteByte%2A&gt; throws a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">派生したクラス場合&lt;xref:System.IO.Stream&gt;への呼び出しの書き込みをサポートしていません&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;、 &lt;xref:System.IO.BufferedStream.Write%2A&gt;、 &lt;xref:System.IO.BufferedStream.WriteByte%2A&gt; &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;をスロー&lt;/xref:System.IO.BufferedStream.WriteByte%2A&gt;または&lt;/xref:System.IO.BufferedStream.Write%2A&gt;&lt;/xref:System.IO.BufferedStream.SetLength%2A&gt;&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ストリームが閉じられたかどうか、このプロパティを返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream supports writing; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the stream is closed or was opened with read-only access.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームが書き込みをサポートしている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ストリームが閉じているか、読み取り専用アクセスで開かれた場合。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">保留中の非同期読み取り操作を完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.ReadAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.BufferedStream.ReadAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.BufferedStream.ReadAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginRead%2A&gt; and &lt;xref:System.IO.Stream.EndRead%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.Stream.BeginRead%2A&gt;と&lt;xref:System.IO.Stream.EndRead%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.Stream.EndRead%2A&gt;&lt;/xref:System.IO.Stream.BeginRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;、および&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>EndRead must be called with this &lt;xref:System.IAsyncResult&gt; to find out how many bytes were read.</source>
          <target state="translated">EndRead は、これを呼び出す必要があります&lt;xref:System.IAsyncResult&gt;読み取られたバイト数を確認する&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">待機する保留中の非同期要求への参照。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</source>
          <target state="translated">0 (ゼロ) と要求したバイト数と、ストリームから読み取られたバイト数。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Streams only return 0 only at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">ストリームが返されるだけストリームの末尾でのみは 0、それ以外の場合は、ブロックには、少なくとも 1 バイトが読み取られるまでです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.BufferedStream.BeginRead*&gt; on this class.</source>
          <target state="translated">この&lt;xref:System.IAsyncResult&gt;オブジェクトは、&lt;xref:System.IO.BufferedStream.BeginRead*&gt;このクラスで&lt;/xref:System.IO.BufferedStream.BeginRead*&gt;呼び出すことにより作成されていません&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">I/O 操作が完了するまでは、非同期の書き込み操作とブロックを終了します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>(Consider using &lt;xref:System.IO.BufferedStream.WriteAsync*&gt; instead; see the Remarks section.)</source>
          <target state="translated">(使用を検討して&lt;xref:System.IO.BufferedStream.WriteAsync*&gt;代わりにします「解説」セクションを参照してください。)&lt;/xref:System.IO.BufferedStream.WriteAsync*&gt; 。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as &lt;xref:System.IO.Stream.BeginWrite%2A&gt; and &lt;xref:System.IO.Stream.EndWrite%2A&gt; to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある&lt;xref:System.IO.Stream.BeginWrite%2A&gt;と&lt;xref:System.IO.Stream.EndWrite%2A&gt;ファイルの非同期操作を実装する&lt;/xref:System.IO.Stream.EndWrite%2A&gt;&lt;/xref:System.IO.Stream.BeginWrite%2A&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph> to support legacy code; however, the new async methods, such as &lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;, &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;, and &lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;, help you implement asynchronous file operations more easily.</source>
          <target state="translated">これらのメソッドでは使用できます、<ph id="ph1">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>レガシ コードをサポートするただし、新しい非同期メソッドなど&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;、 &lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;、および&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;、ヘルプ ファイルの非同期操作をより簡単に実装する&lt;/xref:System.IO.BufferedStream.FlushAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.WriteAsync%2A&gt;&lt;/xref:System.IO.BufferedStream.ReadAsync%2A&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>EndWrite must be called exactly once for every call to &lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;.</source>
          <target state="translated">EndWrite は&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;。&lt;/xref:System.IO.BufferedStream.BeginRead%2A&gt;呼び出しごとに&amp;1; 回だけ呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Failing to end a read process before beginning another read operation can cause deadlock or other undesirable behavior.</source>
          <target state="translated">開始する前に読み取りプロセスを終了する別の読み取り操作できますと、デッドロックまたは他の望ましくない動作します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The pending asynchronous request.</source>
          <target state="translated">保留中の非同期要求。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This &lt;xref:System.IAsyncResult&gt; object was not created by calling &lt;xref:System.IO.BufferedStream.BeginWrite*&gt; on this class.</source>
          <target state="translated">この&lt;xref:System.IAsyncResult&gt;オブジェクトは、&lt;xref:System.IO.BufferedStream.BeginWrite*&gt;このクラスで&lt;/xref:System.IO.BufferedStream.BeginWrite*&gt;呼び出すことにより作成されていません&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">このストリームのすべてのバッファーをクリアし、基になるデバイスに書き込まれるバッファー内のデータします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or &lt;xref:System.IO.Stream.Close%2A&gt;.</source>
          <target state="translated">明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<ph id="ph1">`Flush`</ph>または&lt;xref:System.IO.Stream.Close%2A&gt;.&lt;/xref:System.IO.Stream.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you use the &lt;xref:System.IO.BufferedStream.%23ctor%2A&gt; constructor, thus specifying the buffer size while creating the <ph id="ph1">`BufferedStream`</ph> object, the content is flushed when it reaches the buffer size.</source>
          <target state="translated">使用する場合、&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;コンス トラクターを作成中にバッファー サイズを指定するため、<ph id="ph1">`BufferedStream`</ph>オブジェクト、バッファー サイズに達したとき、コンテンツをフラッシュします&lt;/xref:System.IO.BufferedStream.%23ctor%2A&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, code such as <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> will flush the content when the buffer size reaches 5 bytes.</source>
          <target state="translated">たとえばなどのコード<ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph>バッファー サイズが 5 のバイト数に達すると、コンテンツが消去されます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>All the read and write methods of <ph id="ph1">`BufferedStream`</ph> automatically maintain the buffer, so there is no need to invoke <ph id="ph2">`Flush`</ph> when switching back and forth between reading and writing.</source>
          <target state="translated">すべての読み取りと書き込みメソッドの<ph id="ph1">`BufferedStream`</ph>を呼び出す必要はありませんので、バッファーを自動的に維持<ph id="ph2">`Flush`</ph>読み取りと書き込みの前後に切り替えるときにします。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The data source or repository is not open.</source>
          <target state="translated">データ ソースまたはリポジトリは開いていません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">このストリームのすべてのバッファーをクリアに非同期的に、基になるデバイスに書き込まれるバッファー内のデータ、およびキャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets the stream length in bytes.</source>
          <target state="translated">ストリームの長さをバイト単位で取得します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The stream length in bytes.</source>
          <target state="translated">ストリームの長さ (バイト単位)。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The underlying stream is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or closed.</source>
          <target state="translated">基になるストリームが<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>または終了します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">ストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Gets the position within the current stream.</source>
          <target state="translated">現在のストリーム内の位置を取得します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor invokes &lt;xref:System.IO.BufferedStream.Seek%2A&gt; to obtain the current position within the underlying stream and then adjusts this value according to the current position within the buffer.</source>
          <target state="translated"><ph id="ph1">`get`</ph>アクセサーを呼び出す&lt;xref:System.IO.BufferedStream.Seek%2A&gt;を基になるストリーム内の現在位置を取得し、バッファー内の現在の位置に従って、この値を調整します&lt;/xref:System.IO.BufferedStream.Seek%2A&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`set`</ph> accessor copies any data previously written to the buffer to the underlying stream, and then invokes &lt;xref:System.IO.BufferedStream.Seek%2A&gt;.</source>
          <target state="translated"><ph id="ph1">`set`</ph>アクセサーは、以前に、基になるストリーム バッファーに書き込まれたデータをコピーして、 &lt;xref:System.IO.BufferedStream.Seek%2A&gt;.&lt;/xref:System.IO.BufferedStream.Seek%2A&gt;を呼び出します</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置にシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The position within the current stream.</source>
          <target state="translated">現在のストリーム内の位置。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;xref:System.IO.BufferedStream.Seek*&gt; is negative.</source>
          <target state="translated">渡された値&lt;xref:System.IO.BufferedStream.Seek*&gt;が負の値&lt;/xref:System.IO.BufferedStream.Seek*&gt;。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">閉じられているストリームなど、I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">ストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Copies bytes from the current buffered stream to an array.</source>
          <target state="translated">現在のバッファー済みストリームからバイトを配列にコピーします。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Read`</ph> method will return 0 only if the end of the stream is reached.</source>
          <target state="translated"><ph id="ph1">`Read`</ph>ストリームの末尾に達した場合にのみ、メソッドは 0 に戻ります。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In all other cases, <ph id="ph1">`Read`</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">その他のすべてのケースで<ph id="ph1">`Read`</ph>常に返す前に、ストリームから、少なくとも&amp;1; バイトを読み取ります。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>By definition, if no data is available from the stream upon a call to <ph id="ph1">`Read`</ph>, the <ph id="ph2">`Read`</ph> method returns 0 (the end of the stream is reached automatically).</source>
          <target state="translated">定義上、ストリームへの呼び出し時にデータがない場合<ph id="ph1">`Read`</ph>、<ph id="ph2">`Read`</ph>メソッド (自動的に、ストリームの末尾に到達) 0 を返します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.IO.BinaryReader&gt; for reading primitive data types.</source>
          <target state="translated">使用して&lt;xref:System.IO.BinaryReader&gt;プリミティブ データ型を読み取るためです&lt;/xref:System.IO.BinaryReader&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The buffer to which bytes are to be copied.</source>
          <target state="translated">バイトがコピーされるバッファー。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The byte offset in the buffer at which to begin reading bytes.</source>
          <target state="translated">バイトの読み取りを開始する位置を示すバッファー内のバイト オフセット。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The number of bytes to be read.</source>
          <target state="translated">読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">読み取られた合計バイト数<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or 0 if the end of the stream has been reached before any data can be read.</source>
          <target state="translated">バイト数が、現在ご利用いただけませんまたは前の任意のデータに、ストリームの末尾に達している場合は 0 ができることを読み取る要求したバイト数より小さくできます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ストリームが開いていないか、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">現在のストリームからバイト シーケンスを非同期に読み取ります、読み取られたバイト数だけストリーム内の位置を進めますキャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can create a cancellation token by creating an instance of the &lt;xref:System.Threading.CancellationTokenSource&gt; class and passing the &lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt; property as the <ph id="ph1">`cancellationToken`</ph> parameter.</source>
          <target state="translated">インスタンスを作成することで、キャンセル トークンを作成することができます、&lt;xref:System.Threading.CancellationTokenSource&gt;クラスを渡して、&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;プロパティとして、<ph id="ph1">`cancellationToken`</ph>パラメーター&lt;/xref:System.Threading.CancellationTokenSource.Token%2A&gt; &lt;/xref:System.Threading.CancellationTokenSource&gt; 。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data from the stream.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`buffer`</ph>ストリームからデータを書き込む開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">読み取り操作を表す、非同期タスク。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">TResult</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターには、バッファーに読み取られたバイトの合計数が含まれています。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">結果の値は、現在使用できるバイト数が要求した数より小さいか、ストリームの末尾に達している場合 0 (ゼロ) であることを要求したバイト数より小さくできます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">合計<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>と<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>バッファー長を超えています。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">ストリームは、前の読み取り操作で使用するには現在します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Reads a byte from the underlying stream and returns the byte cast to an <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or returns -1 if reading from the end of the stream.</source>
          <target state="translated">基になるストリームからバイトを読み取りにキャストしたバイトを返します、 <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、または、ストリームの末尾から読み取る場合は-1 を返します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The byte cast to an <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or -1 if reading from the end of the stream.</source>
          <target state="translated">キャストされたバイト、 <bpt id="p1">&lt;xref uid="langword_csharp_int" name="int" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ストリームの末尾から読み取る場合は-1。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">閉じられているストリームなど、I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The stream does not support reading.</source>
          <target state="translated">ストリームは読み取りをサポートしていません。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Sets the position within the current buffered stream.</source>
          <target state="translated">現在のバッファー済みストリーム内の位置を設定します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position will precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>は負の場合、新しい位置は前に指定で指定した位置<ph id="ph2">`origin`</ph>で指定したバイト数だけ<ph id="ph3">`offset`</ph>です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is 0, the new position will be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>が 0 の場合、新しい位置で指定した位置になります<ph id="ph2">`origin`</ph>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position will follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`offset`</ph>が正の値であり、新しい位置がで指定した位置に従う<ph id="ph2">`origin`</ph>で指定したバイト数だけ<ph id="ph3">`offset`</ph>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When a &lt;xref:System.IO.BufferedStream&gt; object is the base stream for a &lt;xref:System.IO.StreamReader&gt; object, calling the Seek method can cause the position of the stream to no longer match the position of the internal buffer in the reader.</source>
          <target state="translated">ときに、&lt;xref:System.IO.BufferedStream&gt;オブジェクトの基本ストリームは、&lt;xref:System.IO.StreamReader&gt;オブジェクト、Seek メソッドを呼び出すことと、不要になったリーダー内の内部バッファーの位置を一致するようにストリームの位置が発生することができます&lt;/xref:System.IO.StreamReader&gt;&lt;/xref:System.IO.BufferedStream&gt;。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To reset the internal buffer, call the &lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt; method; however, this method slows performance and should be called only when absolutely necessary.</source>
          <target state="translated">内部バッファーをリセットするには、呼び出し、&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt;メソッドですただし、このメソッドは、パフォーマンスが低下し、どうしても必要な場合にのみ呼び出す必要があります。&lt;/xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">ストリームの長さを超えた位置にシークはサポートされています。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A byte offset relative to <ph id="ph1">`origin`</ph>.</source>
          <target state="translated">相対バイト オフセット<ph id="ph1">`origin`</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A value of type &lt;xref:System.IO.SeekOrigin&gt; indicating the reference point from which to obtain the new position.</source>
          <target state="translated">型の値&lt;xref:System.IO.SeekOrigin&gt;から新しい位置を取得する参照ポイントを示すします&lt;/xref:System.IO.SeekOrigin&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The new position within the current buffered stream.</source>
          <target state="translated">現在のバッファー済みストリーム内の新しい位置。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ストリームが開いていないか、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The stream does not support seeking.</source>
          <target state="translated">ストリームはシークをサポートしていません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Sets the length of the buffered stream.</source>
          <target state="translated">バッファー済みストリームの長さを設定します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The buffer is flushed before setting the length of the underlying data source or repository.</source>
          <target state="translated">バッファーは、基になるデータ ソースまたはリポジトリの長さを設定する前にフラッシュされます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the specified value is less than the current length of the buffered stream, the buffered stream is truncated.</source>
          <target state="translated">指定した値がバッファー済みストリームの現在の長さよりも小さい場合は、バッファー済みストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If the specified value is larger than the current length of the buffered stream, the buffered stream is expanded.</source>
          <target state="translated">指定した値がバッファー済みストリームの現在の長さよりも大きい場合は、バッファー済みストリームを拡張します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>If the buffered stream is expanded, the contents of the buffered stream between the old and the new lengths are not defined.</source>
          <target state="translated">バッファー済みストリームを展開すると、古いと新しい長さのバッファー済みストリームの内容は定義されていません。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetLength`</ph> flushes any buffered writes if necessary.</source>
          <target state="translated"><ph id="ph1">`SetLength`</ph>必要な場合は、バッファー内の書き込みをフラッシュします。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートする必要があります<ph id="ph1">`SetLength`</ph>作業します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An integer indicating the desired length of the current buffered stream in bytes.</source>
          <target state="translated">(バイト単位) の現在のバッファー済みストリームの希望の長さを示す整数。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>負の値。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The stream is not open or is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ストリームが開いていないか、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">ストリームは書き込みとシークの両方をサポートしていません。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</source>
          <target state="translated">バッファー済みストリームにバイトをコピーし、書き込まれたバイト数でバッファー済みストリーム内の現在位置を進めます。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The byte array from which to copy <ph id="ph1">`count`</ph> bytes to the current buffered stream.</source>
          <target state="translated">コピー元のバイト配列<ph id="ph1">`count`</ph>現在のバッファー済みストリームにバイト数。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The offset in the buffer at which to begin copying bytes to the current buffered stream.</source>
          <target state="translated">現在のバッファー済みストリームにバイトのコピーを開始する位置を示すバッファー内のオフセット。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The number of bytes to be written to the current buffered stream.</source>
          <target state="translated">現在のバッファー済みストリームに書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> minus <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The stream is closed or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ストリームが閉じているまたは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">非同期的に現在のストリームにバイトのシーケンスを書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You can create a cancellation token by creating an instance of the &lt;xref:System.Threading.CancellationTokenSource&gt; class and passing the &lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt; property as the <ph id="ph1">`cancellationToken`</ph> parameter.</source>
          <target state="translated">インスタンスを作成することで、キャンセル トークンを作成することができます、&lt;xref:System.Threading.CancellationTokenSource&gt;クラスを渡して、&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;プロパティとして、<ph id="ph1">`cancellationToken`</ph>パラメーター&lt;/xref:System.Threading.CancellationTokenSource.Token%2A&gt; &lt;/xref:System.Threading.CancellationTokenSource&gt; 。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The buffer to write data from.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> from which to begin copying bytes to the stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`buffer`</ph>ストリームにバイトのコピー開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph>または<ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>が負の値。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
          <target state="translated">合計<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>と<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>バッファー長を超えています。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The stream has been disposed.</source>
          <target state="translated">ストリームは破棄されました。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">ストリームは、前の書き込み操作で使用するには現在します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Writes a byte to the current position in the buffered stream.</source>
          <target state="translated">バッファー済みストリーム内の現在位置にバイトを書き込みます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A byte to write to the stream.</source>
          <target state="translated">ストリームに書き込むバイト。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The stream does not support writing.</source>
          <target state="translated">ストリームは書き込みをサポートしていません。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">メソッドは、ストリームが閉じられた後に呼び出されました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>