<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6932b2e3121c971bbf3626d444598d3e69d16db1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.CodeDomSerializerBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84281accd7ec08b6c4c7c52e5256987b1b754509</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">919911bbb75cd038efaf38a3e35e1b29b611f214</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> classes.</source>
          <target state="translated">基本クラスを提供<bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The CodeDomSerializerBase class is used as a shared base between the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt; and &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt; classes.</source>
          <target state="translated">間で共有のベースとして CodeDomSerializerBase クラスが使用される、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;と&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;クラス&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Public &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt; classes derive from the CodeDomSerializerBase class.</source>
          <target state="translated">パブリック&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;クラスは、CodeDomSerializerBase クラスから派生&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each public class defines its own public API.</source>
          <target state="translated">各パブリック クラスでは、独自のパブリック API を定義します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The CodeDomSerializerBase class defines no public API, but does offer a multitude of utility methods that can be used to aid the serialization process.</source>
          <target state="translated">CodeDomSerializerBase クラスは、パブリック API は定義されていませんが、さまざまなシリアル化プロセスを支援するために使用できるユーティリティ メソッドを提供しています。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Deserializes the given expression into an in-memory object.</source>
          <target state="translated">メモリ内オブジェクトに指定された式を逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is a helper method that derived classes can call to deserialize an expression.</source>
          <target state="translated">これは、ヘルパー クラスを派生メソッドは、式を逆シリアル化に呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It deserializes the statement by interpreting and executing the CodeDOM expression specified by the <ph id="ph1">`expression`</ph> parameter, and then returns the results.</source>
          <target state="translated">解釈およびによって指定された CodeDOM 式を実行して、ステートメントを逆シリアル化、<ph id="ph1">`expression`</ph>パラメーター、し、結果を返します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If an object needs to be created as a result of this expression, it will be given the name specified by the <ph id="ph1">`name`</ph> parameter.</source>
          <target state="translated">指定した名前を指定、オブジェクトは、この式の結果として作成する必要がある場合、<ph id="ph1">`name`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name can be <ph id="ph1">`null`</ph> if there is no need to name the object.</source>
          <target state="translated">名前を指定できます<ph id="ph1">`null`</ph>場合は、オブジェクトの名前を付ける必要はありません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table describes how specific expressions are handled.</source>
          <target state="translated">次の表に、特定の式が処理されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>|Expression|Behavior|   |----------------|--------------|   |&lt;xref:System.CodeDom.CodeThisReferenceExpression&gt;|This expression represents <ph id="ph1">`this`</ph> or <ph id="ph2">`Me`</ph>.</source>
          <target state="translated">|式 |動作 |  |----------------|--------------|  |&lt;xref:System.CodeDom.CodeThisReferenceExpression&gt;|この式を表す<ph id="ph1">`this`</ph>または<ph id="ph2">`Me`</ph>&lt;/xref:System.CodeDom.CodeThisReferenceExpression&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To locate the object that is associated with this expression, the DeserializeExpression method will look in the context stack for a &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;.</source>
          <target state="translated">この式に関連付けられているオブジェクトを見つけるを DeserializeExpression メソッドは&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;コンテキスト スタックになります</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This object contains the root object of the graph and the expression that represents it.</source>
          <target state="translated">このオブジェクトには、グラフとそれを表す式のルート オブジェクトが含まれています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the object is present and the expression matches, the root object will be returned.</source>
          <target state="translated">オブジェクトが存在し、式が一致する場合は、ルート オブジェクトが返されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An error is reported if an instance cannot be located.|   |&lt;xref:System.CodeDom.CodeFieldReferenceExpression&gt;|If the target of the field reference evaluates to the root object, the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt; method of the manager parameter will be used to retrieve the object instance based on name.</source>
          <target state="translated">インスタンスが見つからない場合、エラーが報告されます |。  |&lt;xref:System.CodeDom.CodeFieldReferenceExpression&gt;|ルート オブジェクトに、このフィールド参照のターゲットが評価された場合、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;マネージャーのパラメーターのメソッドを使用して名前に基づいてオブジェクトのインスタンスの取得されます&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;&lt;/xref:System.CodeDom.CodeFieldReferenceExpression&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Otherwise, standard reflection is used against the target object to locate the requested field.</source>
          <target state="translated">それ以外の場合、標準のリフレクションは対象のオブジェクトに対して要求されたフィールドの検索に使用します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error is reported if the field cannot be located.|   |&lt;xref:System.CodeDom.CodeVariableReferenceExpression&gt;|The &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt; method of the <ph id="ph1">`manager`</ph> parameter is used to locate the instance representing the given variable name.</source>
          <target state="translated">フィールドが見つからない場合、エラーが報告されます |。  |&lt;xref:System.CodeDom.CodeVariableReferenceExpression&gt;|&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;のメソッド、<ph id="ph1">`manager`</ph>パラメーターが指定された変数名を表すインスタンスの検索に使用します&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;&lt;/xref:System.CodeDom.CodeVariableReferenceExpression&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An error is reported if an instance cannot be located.|       DeserializeExpression continues to interpret expressions until they are completely resolved to an object, or until it can no longer simplify the expression.</source>
          <target state="translated">インスタンスが見つからない場合、エラーが報告されます |。      DeserializeExpression は、オブジェクトを完全に解決されるまで、または式を簡略化できますされなくなるまで、式を解釈し続けます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, DeserializeExpression will return a &lt;xref:System.CodeDom.CodeExpression&gt; that contains the most simplified expression.</source>
          <target state="translated">この場合、DeserializeExpression が戻ります、&lt;xref:System.CodeDom.CodeExpression&gt;最も簡略化された式を格納している&lt;/xref:System.CodeDom.CodeExpression&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following expressions are not supported:      -   &lt;xref:System.CodeDom.CodeEventReferenceExpression&gt;      -   &lt;xref:System.CodeDom.CodeMethodReferenceExpression&gt;      -   &lt;xref:System.CodeDom.CodeDelegateCreateExpression&gt;</source>
          <target state="translated">次の式はサポートされていません:- &lt;xref:System.CodeDom.CodeEventReferenceExpression&gt;- &lt;xref:System.CodeDom.CodeMethodReferenceExpression&gt;- &lt;xref:System.CodeDom.CodeDelegateCreateExpression&gt;&lt;/xref:System.CodeDom.CodeDelegateCreateExpression&gt; &lt;/xref:System.CodeDom.CodeMethodReferenceExpression&gt; &lt;/xref:System.CodeDom.CodeEventReferenceExpression&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of the object that results from the expression.</source>
          <target state="translated">式の結果をオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there is no need to name the object.</source>
          <target state="translated">指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、オブジェクトの名前を付ける必要はありません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to interpret.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>解釈します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An object resulting from interpretation of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">expression</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">結果の解釈のオブジェクト<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">expression</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns an instance of the given type.</source>
          <target state="translated">指定された型のインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The DeserializeInstance method is invoked during deserialization to obtain an instance of an object.</source>
          <target state="translated">DeserializeInstance メソッドは、オブジェクトのインスタンスを取得するには、逆シリアル化中に呼び出されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When this is called, an instance of the requested type should be returned.</source>
          <target state="translated">呼び出されると、要求された型のインスタンスが返されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default implementation invokes the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt; method of the <ph id="ph1">`manager`</ph> parameter.</source>
          <target state="translated">既定の実装を呼び出す、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;のメソッド、<ph id="ph1">`manager`</ph>パラメーター&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the instance to return.</source>
          <target state="translated">&lt;xref:System.Type&gt;のインスタンスを返します&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The parameters to pass to the constructor for <ph id="ph1">`type`</ph>.</source>
          <target state="translated">コンス トラクターに渡すパラメーター<ph id="ph1">`type`</ph>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The name of the deserialized object.</source>
          <target state="translated">逆シリアル化されたオブジェクトの名前。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to add this object to the design container; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このオブジェクトをデザイン コンテナーに追加するにはそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The object must implement <bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this to have any effect.</source>
          <target state="translated">オブジェクトを実装する必要があります<bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これを有効にします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An instance of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">インスタンス<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Deserializes properties on the given object from the invariant culture’s resource bundle.</source>
          <target state="translated">インバリアント カルチャのリソース バンドルから指定したオブジェクトのプロパティを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The DeserializePropertiesFromResources method is a helper method that derived classes can call.</source>
          <target state="translated">DeserializePropertiesFromResources メソッドでは、派生クラスのヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It looks for properties on the given object and attempts to load their values out of the invariant culture’s resource bundle.</source>
          <target state="translated">指定したオブジェクトのプロパティを検索し、インバリアント カルチャのリソース バンドルからその値の読み込みを試みます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is generally used to handle design-time properties that are not emitted into source code.</source>
          <target state="translated">これは通常、ソース コードに出力されていないデザイン時のプロパティの処理に使用されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It should not be used for localized properties because it only operates on the invariant culture.</source>
          <target state="translated">適していないローカライズされたプロパティに、インバリアント カルチャでのみ動作するためです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method inspects all of the properties of the <ph id="ph1">`value`</ph> parameter that match the attributes specified by the <ph id="ph2">`filter`</ph> parameter, and then checks for those properties in a resource binary object.</source>
          <target state="translated">このメソッドは、すべてのプロパティの検査、<ph id="ph1">`value`</ph>で指定された属性に一致するパラメーター、<ph id="ph2">`filter`</ph>パラメーター、および、リソースのバイナリ オブジェクトでこれらのプロパティをチェックします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is useful for deserializing properties that cannot be represented in code, such as design-time properties.</source>
          <target state="translated">これは、逆シリアル化のプロパティをデザイン時のプロパティなどのコードでは表現できないに役立ちます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This method requires that a designer loader offers an &lt;xref:System.ComponentModel.Design.IResourceService&gt; to read resources.</source>
          <target state="translated">このメソッドは、デザイナー ローダーが用意されている必要があります、&lt;xref:System.ComponentModel.Design.IResourceService&gt;リソースを読み取る&lt;/xref:System.ComponentModel.Design.IResourceService&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.ComponentModel.Design.IResourceService&gt; provides a &lt;xref:System.Resources.ResXResourceReader&gt; for the invariant culture, then DeserializePropertiesFromResources will read resources from the XML resource (.resx) file’s metadata section, which is not included in final compiled code.</source>
          <target state="translated">場合、&lt;xref:System.ComponentModel.Design.IResourceService&gt;提供、 &lt;xref:System.Resources.ResXResourceReader&gt;、インバリアント カルチャの DeserializePropertiesFromResources リソースから読み取り、XML リソース (.resx) ファイルのメタデータ セクションは、最終的なコンパイル済みコードに含まれていない&lt;/xref:System.Resources.ResXResourceReader&gt;&lt;/xref:System.ComponentModel.Design.IResourceService&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If this service is not available, no resources will be read.</source>
          <target state="translated">このサービスが利用できない場合は、リソースは読み取られません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The object from which the properties are to be deserialized.</source>
          <target state="translated">プロパティの逆シリアル化する元のオブジェクト。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Attribute&gt; array that filters which properties will be deserialized.</source>
          <target state="translated">&lt;xref:System.Attribute&gt;逆シリアル化するプロパティをフィルター処理する配列&lt;/xref:System.Attribute&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Deserializes a statement by interpreting and executing a CodeDOM statement.</source>
          <target state="translated">解釈および CodeDOM ステートメントを実行するステートメントを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The DeserializeStatement method is a helper method that derived classes can call.</source>
          <target state="translated">DeserializeStatement メソッドでは、派生クラスのヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It interprets the <ph id="ph1">`statement`</ph> parameter.</source>
          <target state="translated">これは、解釈、<ph id="ph1">`statement`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeStatement&gt; being deserialized will be pushed on the context stack.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeStatement&gt;逆シリアル化は、コンテキスト スタックにプッシュされます&lt;/xref:System.CodeDom.CodeStatement&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to deserialize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeStatement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a collection of attributes as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されている属性のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The target type.</source>
          <target state="translated">対象の型。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A collection of attributes as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されている属性のコレクション。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets a collection of attributes as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されている属性のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An object of the target type.</source>
          <target state="translated">対象の型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A collection of attributes as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されている属性のコレクション。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets a collection of events as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されているイベントのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An object of the target type.</source>
          <target state="translated">対象の型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An array of attributes to pass to the target version of the .NET Framework.</source>
          <target state="translated">.NET Framework のターゲット バージョンに渡す属性の配列。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A collection of events as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されているイベントのコレクション。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Returns an expression for the given object.</source>
          <target state="translated">指定されたオブジェクトの式を返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The GetExpression method returns an expression representing the given object.</source>
          <target state="translated">GetExpression メソッドでは、指定したオブジェクトを表す式を返します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It can return <ph id="ph1">`null`</ph>, indicating that no expression has been set that describes the object.</source>
          <target state="translated">返すことが<ph id="ph1">`null`</ph>ことを示すオブジェクト式が設定されていないことを説明します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Expressions are acquired in one of three ways:      -   The expression could be the result of a prior call to the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt; method.</source>
          <target state="translated">式は、3 つの方法のいずれかで取得: の式を呼び出す前の結果である場合、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-   The expression could have been found in the &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;.</source>
          <target state="translated">-式が発見された&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-   The expression could be derived through &lt;xref:System.ComponentModel.Design.IReferenceService&gt;.</source>
          <target state="translated">-式は&lt;xref:System.ComponentModel.Design.IReferenceService&gt;。&lt;/xref:System.ComponentModel.Design.IReferenceService&gt;を通じて派生でした。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To derive expressions through &lt;xref:System.ComponentModel.Design.IReferenceService&gt;, the GetExpression method queries the reference service for a name for the given object.</source>
          <target state="translated">式を派生させる&lt;xref:System.ComponentModel.Design.IReferenceService&gt;、GetExpression メソッドが指定されたオブジェクトの名前の参照サービスを照会します&lt;/xref:System.ComponentModel.Design.IReferenceService&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the expression service returns a valid name, &lt;xref:System.ComponentModel.Design.IReferenceService&gt;, the GetExpression method checks to see if there is a "." in the name.</source>
          <target state="translated">式のサービスが有効な名前を返す場合&lt;xref:System.ComponentModel.Design.IReferenceService&gt;、GetExpression メソッドがあるかどうかを確認、"です"名にします。&lt;/xref:System.ComponentModel.Design.IReferenceService&gt; 。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This indicates that the expression service found this object as the return value of a read-only property on another object.</source>
          <target state="translated">これは、式サービスが、別のオブジェクトの読み取り専用プロパティの戻り値としてこのオブジェクトをすることを示します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there is a ".", GetExpression will split the reference into parts.</source>
          <target state="translated">ある場合、"です。"、GetExpression を使用して、参照を部分に分割されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The leftmost part is a name that will be evaluated with the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt; method.</source>
          <target state="translated">左端の部分が名前に評価される、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance%2A&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For each subsequent part, a property reference expression will be built.</source>
          <target state="translated">後続の各パートのプロパティの参照式がビルドされます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The final expression will then be returned.</source>
          <target state="translated">最終的な式は、返されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the object did not have an expression set, or if the object was not found in the reference service, GetExpression will return <ph id="ph1">`null`</ph>, indicating there is no existing expression for the object.</source>
          <target state="translated">オブジェクトを設定する式がありませんでしたか、参照サービスにオブジェクトが見つからなかった場合 GetExpression が返されます<ph id="ph1">`null`</ph>オブジェクトの既存の式がないことを示すです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The object for which to get an expression.</source>
          <target state="translated">式を取得する対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing v<bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">alue</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> if there is no existing expression for v<bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">alue</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> v を表す<bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">alue</ph><ept id="p2">&lt;/code&gt;</ept>、または<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> v の既存の式がない場合は<bpt id="p4">&lt;code&gt;</bpt><ph id="ph2">alue</ph><ept id="p4">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets a collection of properties as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されているプロパティのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An object of the target type.</source>
          <target state="translated">対象の型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An array of attributes to pass to the target version of the .NET Framework.</source>
          <target state="translated">.NET Framework のターゲット バージョンに渡す属性の配列。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A collection of properties as defined in the project's target version of the .NET Framework.</source>
          <target state="translated">プロジェクトのターゲットのバージョンの .NET Framework で定義されているプロパティのコレクション。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets a reflection type generated from type metadata.</source>
          <target state="translated">型のメタデータから生成されるリフレクション型を取得します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The return value will not be equal to <ph id="ph1">`type`</ph> and should not be used for comparison with non-reflection types.</source>
          <target state="translated">戻り値は等しいできない<ph id="ph1">`type`</ph>非リフレクション型との比較には使用できません。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The type to use metadata from.</source>
          <target state="translated">メタデータを使用する型。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A reflection type generated from the metadata of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">メタデータから生成されるリフレクション型<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets a reflection type generated from object metadata.</source>
          <target state="translated">オブジェクトのメタデータから生成されるリフレクション型を取得します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The return value will not be equal to the type of object and should not be used for comparison with non-reflection types.</source>
          <target state="translated">戻り値がオブジェクトの型と同じになり非リフレクション型との比較には使用できません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The serialization manager.</source>
          <target state="translated">シリアル化マネージャー。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The object to use metadata from.</source>
          <target state="translated">メタデータを使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A reflection type generated from the metadata of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">object</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">メタデータから生成されるリフレクション型<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">object</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Locates a serializer for the given object value.</source>
          <target state="translated">指定したオブジェクトの値のシリアライザーを検索します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The GetSerializer method is an extension to the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">GetSerializer メソッドは拡張機能では、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt; method takes an object type, rather than an object value.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;メソッドは、オブジェクトの値ではなく、オブジェクトの種類を受け取ります&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If an external party had overridden metadata for a specific object through &lt;xref:System.ComponentModel.TypeDescriptor&gt;, that metadata override would not be seen by the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt; method, which only takes a type.</source>
          <target state="translated">外部パーティにを介して特定のオブジェクトのメタデータがオーバーライドされた場合&lt;xref:System.ComponentModel.TypeDescriptor&gt;でそのメタデータのオーバーライドは表示されません、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;メソッドの型はわずかです&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;&lt;/xref:System.ComponentModel.TypeDescriptor&gt;。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The GetSerializer method checks the metadata of the value and the value’s type.</source>
          <target state="translated">GetSerializer メソッドでは、値と値の型のメタデータを確認します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the two differ, GetSerializer will look to see if there is a custom designer serializer attribute on the value.</source>
          <target state="translated">2 つが異なる場合、GetSerializer は値のカスタム デザイナー シリアライザー属性がないかどうかになります。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If so, GetSerializer will attempt to use it.</source>
          <target state="translated">場合は、GetSerializer はそれを使用しようとします。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Otherwise, it will defer to &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;に任せること</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The object specifying the serializer to retrieve.</source>
          <target state="translated">取得するシリアライザーを指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is appropriate for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対して適切な<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Locates a serializer for the given type.</source>
          <target state="translated">指定された型のシリアライザーを検索します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The GetSerializer method is an extension to the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">GetSerializer メソッドは拡張機能では、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt; method takes an object type, rather than an object value.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;メソッドは、オブジェクトの値ではなく、オブジェクトの種類を受け取ります&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; specifying the serializer to retrieve.</source>
          <target state="translated">&lt;xref:System.Type&gt;取得するシリアライザーを指定します&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is appropriate for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">valueType</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.CodeDomSerializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対して適切な<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">valueType</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;valueType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;valueType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.ComponentModel.TypeDescriptionProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is aware of the target version of the .NET Framework, for use in type filtering.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeDescriptionProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が型のフィルター処理で使用するため、.NET Framework のターゲット バージョンを認識します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The type description provider service.</source>
          <target state="translated">型説明プロバイダー サービス。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>An object from which the type description provider service can be derived, if <ph id="ph1">`provider`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">元の型説明プロバイダー サービス派生できる場合、オブジェクト<ph id="ph1">`provider`</ph>は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A .NET Framework-aware type description provider.</source>
          <target state="translated">.NET Framework に対応する型説明プロバイダー。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns a unique name for the given object.</source>
          <target state="translated">指定されたオブジェクトの一意の名前を返します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The GetUniqueName method calls the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName%2A&gt; method.</source>
          <target state="translated">GetUniqueName メソッドの呼び出し、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If this method does not return a name, then GetUniqueName uses &lt;xref:System.ComponentModel.Design.Serialization.INameCreationService&gt; to fabricate a valid name for the object.</source>
          <target state="translated">このメソッドは、名前を返さない場合、GetUniqueName 使用&lt;xref:System.ComponentModel.Design.Serialization.INameCreationService&gt;オブジェクトの有効な名前を生成する&lt;/xref:System.ComponentModel.Design.Serialization.INameCreationService&gt;。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the service is not available, GetUniqueName will fabricate a name based on the short type name combined with an index number to make it unique.</source>
          <target state="translated">サービスが利用できない場合、GetUniqueName は一意にするインデックス番号を組み合わせた short 型名に基づく名前を作成します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The resulting name is associated with the serialization manager by calling the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName%2A&gt; method before the new name is returned.</source>
          <target state="translated">呼び出して、結果名はシリアル化マネージャーに関連付けられて、&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName%2A&gt;メソッドから、新しい名前が返されます&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The object for which the name will be retrieved.</source>
          <target state="translated">名前を取得するオブジェクト。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A unique name for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一意な名前<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether the given object has been serialized.</source>
          <target state="translated">指定したオブジェクトをシリアル化されたかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`value`</ph> parameter to be considered serialized, the <ph id="ph2">`manager`</ph> parameter or another serializer must have called the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt; method to create a relationship between <ph id="ph3">`value`</ph> and a referring expression.</source>
          <target state="translated"><ph id="ph1">`value`</ph>と見なされるにパラメーターをシリアル化では、<ph id="ph2">`manager`</ph>パラメーターまたは別のシリアライザーと呼ばれる必要がありますが、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;間のリレーションシップを作成するメソッド<ph id="ph3">`value`</ph>と参照元の式&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The object to test for previous serialization.</source>
          <target state="translated">以前のシリアル化をテストするオブジェクト。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> has been serialized; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept> 、それ以外のシリアル化がされて<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether the given object has been serialized, optionally considering preset expressions.</source>
          <target state="translated">指定したオブジェクトをシリアル化されたかどうかを示す、オプションで設定済みの式を検討して値を返します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`value`</ph> parameter to be considered serialized, the <ph id="ph2">`manager`</ph> parameter or another serializer must have called the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt; method to create a relationship between <ph id="ph3">`value`</ph> and a referring expression.</source>
          <target state="translated"><ph id="ph1">`value`</ph>と見なされるにパラメーターをシリアル化では、<ph id="ph2">`manager`</ph>パラメーターまたは別のシリアライザーと呼ばれる必要がありますが、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;間のリレーションシップを作成するメソッド<ph id="ph3">`value`</ph>と参照元の式&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The object to test for previous serialization.</source>
          <target state="translated">以前のシリアル化をテストするオブジェクト。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to include preset expressions; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定済みの式を含めるそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> has been serialized; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept> 、それ以外のシリアル化がされて<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Returns an expression representing the creation of the given object.</source>
          <target state="translated">指定したオブジェクトの作成を表す式を返します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The SerializeCreationExpression method can be used to serialize an expression that represents the creation of the <ph id="ph1">`value`</ph> parameter.</source>
          <target state="translated">作成を表す式をシリアル化に SerializeCreationExpression メソッドを使用することができます、<ph id="ph1">`value`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>It is aware of instance descriptors.</source>
          <target state="translated">インスタンス記述子、認識されています。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`isComplete`</ph> parameter is set to <ph id="ph2">`true`</ph> if the expression represents a fully configured object, or <ph id="ph3">`false`</ph> if further serialization must be done on the object’s properties.</source>
          <target state="translated"><ph id="ph1">`isComplete`</ph>にパラメーターが設定されている<ph id="ph2">`true`</ph>式は、完全に構成されたオブジェクトを表す場合、または<ph id="ph3">`false`</ph>場合はさらに、オブジェクトのプロパティをシリアル化を行う必要があります。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <ph id="ph1">`value`</ph> was fully serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<ph id="ph1">`value`</ph>が完全にシリアル化された、それ以外の<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An expression representing the creation of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">式の作成を表す<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Serializes the given event into the given statement collection.</source>
          <target state="translated">指定されたステートメントのコレクションに、指定したイベントをシリアル化します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The SerializeEvent method is a helper method that derived classes can call to serialize a single event into the given &lt;xref:System.CodeDom.CodeStatementCollection&gt;.</source>
          <target state="translated">SerializeEvent メソッドは、指定された&lt;xref:System.CodeDom.CodeStatementCollection&gt;。&lt;/xref:System.CodeDom.CodeStatementCollection&gt;に&amp;1; つのイベントをシリアル化するクラスを派生するヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>SerializeEvent queries the serialization manager for a &lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt; for the given event, and then asks the &lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt; to serialize it.</source>
          <target state="translated">SerializeEvent のシリアル化マネージャーに照会、 &lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;、指定したイベント&lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;それをシリアル化する&lt;/xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;要求&lt;/xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>SerializeEvent places the <ph id="ph1">`statements`</ph> and <ph id="ph2">`descriptor`</ph> parameters on the &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">SerializeEvent 場所、<ph id="ph1">`statements`</ph>と<ph id="ph2">`descriptor`</ph>&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt;パラメーター。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>SerializeEvent requires an &lt;xref:System.ComponentModel.Design.IEventBindingService&gt; to discover event bindings to methods that are not compiled.</source>
          <target state="translated">SerializeEvent が必要です、&lt;xref:System.ComponentModel.Design.IEventBindingService&gt;がコンパイルされていないメソッドをイベント バインドを探索する&lt;/xref:System.ComponentModel.Design.IEventBindingService&gt;。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If this service is not present, event bindings to non-compiled methods will not be written.</source>
          <target state="translated">このサービスが存在しない場合は、非コンパイルされたメソッドをイベント バインドは書き込まれません。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Event bindings to compiled methods will still be serialized if the objects to which the events are bound can be converted into expressions.</source>
          <target state="translated">コンパイル済みメソッドをイベント バインドは、イベントがバインドされているオブジェクトは、式に変換できる場合にもシリアル化されます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into which the event will be serialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントをシリアル化にします。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The object to which <ph id="ph1">`descriptor`</ph> is bound.</source>
          <target state="translated">オブジェクトを<ph id="ph1">`descriptor`</ph>がバインドされています。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.ComponentModel.EventDescriptor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specifying the event to serialize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.EventDescriptor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>をシリアル化イベントを指定します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;descriptor&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;descriptor&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.ComponentModel.Design.IEventBindingService"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not available.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.IEventBindingService"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用できません。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Serializes the specified events into the given statement collection.</source>
          <target state="translated">指定されたステートメントのコレクションに指定したイベントをシリアル化します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The SerializeEvents method is a helper method that derived classes can call.</source>
          <target state="translated">SerializeEvents メソッドでは、派生クラスのヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It looks at events on the <ph id="ph1">`value`</ph> parameter that match the <ph id="ph2">`filter`</ph> parameter, and then it calls the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvent%2A&gt; method for each event.</source>
          <target state="translated">イベントで参照、<ph id="ph1">`value`</ph>一致するパラメーター、<ph id="ph2">`filter`</ph>パラメーター、その後の呼び出し、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvent%2A&gt;各イベントのメソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The SerializeEvents method places the &lt;xref:System.ComponentModel.InheritanceAttribute&gt; for <ph id="ph1">`value`</ph> on the &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">SerializeEvents メソッドの場所、&lt;xref:System.ComponentModel.InheritanceAttribute&gt;の<ph id="ph1">`value`</ph> &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt; &lt;/xref:System.ComponentModel.InheritanceAttribute&gt; 。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into which the event will be serialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントをシリアル化にします。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The object on which events will be serialized.</source>
          <target state="translated">イベントをシリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Attribute&gt; array that filters which events will be serialized.</source>
          <target state="translated">&lt;xref:System.Attribute&gt;シリアル化するどのイベントをフィルター処理する配列&lt;/xref:System.Attribute&gt;。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Serializes the properties on the given object into the given statement collection.</source>
          <target state="translated">指定されたステートメントのコレクションに指定されたオブジェクトのプロパティをシリアル化します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The SerializeProperties method is a helper method that derived classes can call.</source>
          <target state="translated">SerializeProperties メソッドでは、派生クラスのヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>It looks at properties on the <ph id="ph1">`value`</ph> parameter that match the <ph id="ph2">`filter`</ph> parameter, and then it calls the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperty%2A&gt; method for each property.</source>
          <target state="translated">これは、プロパティを調べ、<ph id="ph1">`value`</ph>に一致するパラメーター、<ph id="ph2">`filter`</ph>パラメーター、その後の呼び出し、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperty%2A&gt;の各プロパティのメソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperty%2A&gt;。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The SerializeProperties method places the &lt;xref:System.ComponentModel.InheritanceAttribute&gt; for <ph id="ph1">`value`</ph> on the &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">SerializeProperties メソッドの場所、&lt;xref:System.ComponentModel.InheritanceAttribute&gt;の<ph id="ph1">`value`</ph> &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt; &lt;/xref:System.ComponentModel.InheritanceAttribute&gt; 。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into which the properties will be serialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にプロパティをシリアル化します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The object on which the properties will be serialized.</source>
          <target state="translated">プロパティをシリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Attribute&gt; array that filters which properties will be serialized.</source>
          <target state="translated">&lt;xref:System.Attribute&gt;シリアルするプロパティをフィルター処理する配列&lt;/xref:System.Attribute&gt;。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Serializes the properties on the given object into the invariant culture’s resource bundle.</source>
          <target state="translated">指定したオブジェクトのプロパティをインバリアント カルチャのリソース バンドルにシリアル化します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The SerializePropertiesToResources method is a helper method that derived classes can call.</source>
          <target state="translated">SerializePropertiesToResources メソッドでは、派生クラスのヘルパー メソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>It looks at properties on the <ph id="ph1">`value`</ph> parameter that match the <ph id="ph2">`filter`</ph> parameter, and then it serializes the properties into the invariant culture resource bundle.</source>
          <target state="translated">これは、プロパティを調べ、<ph id="ph1">`value`</ph>に一致するパラメーター、<ph id="ph2">`filter`</ph>パラメーター、その後は、インバリアント カルチャのリソース バンドルにプロパティをシリアル化します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If the resource service returns a &lt;xref:System.Resources.ResXResourceWriter&gt;, the property values will be stored in the metadata section of the XML resource (.resx) file.</source>
          <target state="translated">リソース サービスが返された場合、 &lt;xref:System.Resources.ResXResourceWriter&gt;、プロパティ値は、XML リソース (.resx) ファイルのメタデータ セクションに保存されます&lt;/xref:System.Resources.ResXResourceWriter&gt;。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`statements`</ph> parameter is not used.</source>
          <target state="translated"><ph id="ph1">`statements`</ph>パラメーターは使用されません。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To be serialized as a resource, a property must be simple (not a content property) and its value must be serializable.</source>
          <target state="translated">プロパティがある必要がありますをリソースとしてシリアル化する、単純な (コンテンツ プロパティではなく) とその値をシリアル化可能にする必要があります。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Properties that do not conform to this pattern will be skipped.</source>
          <target state="translated">このパターンに準拠していないプロパティはスキップされます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>SerializePropertiesToResources requires an &lt;xref:System.ComponentModel.Design.IResourceService&gt; to obtain a &lt;xref:System.Resources.ResourceWriter&gt; to write resources for the invariant culture.</source>
          <target state="translated">SerializePropertiesToResources が必要です、&lt;xref:System.ComponentModel.Design.IResourceService&gt;させることが、&lt;xref:System.Resources.ResourceWriter&gt;インバリアント カルチャのリソースに書き込めません&lt;/xref:System.Resources.ResourceWriter&gt;&lt;/xref:System.ComponentModel.Design.IResourceService&gt;。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If this service is not available, no resources will be written.</source>
          <target state="translated">このサービスが利用できない場合は、リソースは書き込まれません。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Not used.</source>
          <target state="translated">使用されません。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The object whose properties will be serialized.</source>
          <target state="translated">プロパティをシリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Attribute&gt; array that filters which properties will be serialized.</source>
          <target state="translated">&lt;xref:System.Attribute&gt;シリアルするプロパティをフィルター処理する配列&lt;/xref:System.Attribute&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Serializes a property on the given object.</source>
          <target state="translated">指定したオブジェクトのプロパティをシリアル化します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The SerializeProperty method retrieves a &lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt; for the <ph id="ph1">`propertyToSerialize`</ph> parameter and delegates to it.</source>
          <target state="translated">SerializeProperty メソッドは、取得、&lt;xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;の<ph id="ph1">`propertyToSerialize`</ph>パラメーターとバリアント汎用デリゲートを突き止め&lt;/xref:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>SerializeProperty places the <ph id="ph1">`statements`</ph> and <ph id="ph2">`propertyToSerialize`</ph> parameters on the &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">SerializeProperty 場所、<ph id="ph1">`statements`</ph>と<ph id="ph2">`propertyToSerialize`</ph>&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt;パラメーター。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into which the property will be serialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeStatementCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>プロパティをシリアル化にします。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The object on which the property will be serialized.</source>
          <target state="translated">プロパティをシリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The property to serialize.</source>
          <target state="translated">シリアル化するプロパティです。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;propertyToSerialize&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;statements&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;propertyToSerialize&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Serializes the given object into a resource bundle using the given resource name.</source>
          <target state="translated">指定したオブジェクトを特定のリソース名を使用してリソース バンドルにシリアル化します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The SerializeResource method is a helper method that serializes a value to a resource bundle under the given name.</source>
          <target state="translated">SerializeResource メソッドは、指定した名前の下にあるリソース バンドルに値をシリアル化するヘルパー メソッドです。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The culture that the resource is written to is determined by searching the serialization manager’s &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties%2A&gt; collection for a property called <ph id="ph1">`ResourceCulture`</ph>.</source>
          <target state="translated">リソースに書き込まれるカルチャは、シリアル化マネージャーの検索によって決まります&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties%2A&gt;プロパティのコレクションと呼ばれる<ph id="ph1">`ResourceCulture`</ph>&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties%2A&gt;。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If this property exists, resources will be written to that culture.</source>
          <target state="translated">このプロパティが存在する場合は、リソースはそのカルチャを記述します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Otherwise, resources will be written to the invariant culture.</source>
          <target state="translated">それ以外の場合、リソースは、インバリアント カルチャに書き込まれます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`value`</ph> parameter must be serializable.</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターは、シリアル化可能である必要があります。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>SerializeResource requires an &lt;xref:System.ComponentModel.Design.IResourceService&gt; to obtain a &lt;xref:System.Resources.ResourceWriter&gt; to write resources for the correct culture.</source>
          <target state="translated">SerializeResource が必要です、&lt;xref:System.ComponentModel.Design.IResourceService&gt;を取得する、&lt;xref:System.Resources.ResourceWriter&gt;正しいカルチャのリソースに書き込めません&lt;/xref:System.Resources.ResourceWriter&gt;&lt;/xref:System.ComponentModel.Design.IResourceService&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If this service is not available, SerializeResource will instead build a binary object in code that represents the resource.</source>
          <target state="translated">このサービスが利用できない場合 SerializeResource は代わりに、リソースを表すコードのバイナリ オブジェクトを構築します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The name of the resource bundle into which <ph id="ph1">`value`</ph> will be serialized.</source>
          <target state="translated">先にあるリソース バンドルの名前<ph id="ph1">`value`</ph>シリアル化されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Serializes the given object into a resource bundle using the given resource name.</source>
          <target state="translated">指定したオブジェクトを特定のリソース名を使用してリソース バンドルにシリアル化します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The resource is always written to the invariant culture.</source>
          <target state="translated">リソースは常にインバリアント カルチャに書き込まれます。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`value`</ph> parameter must be serializable.</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターは、シリアル化可能である必要があります。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The SerializeResourceInvariant method requires an &lt;xref:System.ComponentModel.Design.IResourceService&gt; to obtain a &lt;xref:System.Resources.ResourceWriter&gt; to write resources for the correct culture.</source>
          <target state="translated">SerializeResourceInvariant メソッドが必要な&lt;xref:System.ComponentModel.Design.IResourceService&gt;を取得する、&lt;xref:System.Resources.ResourceWriter&gt;正しいカルチャのリソースを書き込む&lt;/xref:System.Resources.ResourceWriter&gt;&lt;/xref:System.ComponentModel.Design.IResourceService&gt;。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If this service is not available, &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt; will instead build a binary object in code that represents the resource.</source>
          <target state="translated">このサービスが使用できない場合&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt;は代わりにリソースを表すコードのバイナリ オブジェクトを構築します&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The name of the resource bundle into which <ph id="ph1">`value`</ph> will be serialized.</source>
          <target state="translated">先にあるリソース バンドルの名前<ph id="ph1">`value`</ph>シリアル化されます。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Serializes the given object into an expression.</source>
          <target state="translated">式に指定されたオブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`value`</ph> parameter can be <ph id="ph2">`null`</ph>, in which case a primitive expression will be returned.</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターを指定できます<ph id="ph2">`null`</ph>、後者プリミティブ式が返されます。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The SerializeToExpression method uses the following rules for serializing types:      1.</source>
          <target state="translated">SerializeToExpression メソッドは、次の規則を使用して型をシリアル化するため: 1。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>It first calls the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; method to see if an expression has already been created for the object.</source>
          <target state="translated">最初に呼び出して、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;オブジェクトの式が既に作成されているメソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If so, it returns the existing expression.</source>
          <target state="translated">その場合、既存の式を返します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>It then locates the object’s serializer, and asks it to serialize.</source>
          <target state="translated">オブジェクトのシリアライザーを検索し、シリアル化するように指示します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If the return value of the object’s serializer is a &lt;xref:System.CodeDom.CodeExpression&gt;, the expression is returned.</source>
          <target state="translated">かどうか、オブジェクトのシリアライザーの戻り値は、 &lt;xref:System.CodeDom.CodeExpression&gt;、式が返されます&lt;/xref:System.CodeDom.CodeExpression&gt;。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>It makes one last call to &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; to see if the serializer added an expression.</source>
          <target state="translated">最後の呼び出しに&amp;1; つは&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;にシリアライザーが式を追加するかどうかを参照してください&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>5.</source>
          <target state="translated">5.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Finally, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">最後に、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If no expression could be created and no suitable serializer could be found, an error will be reported through the serialization manager.</source>
          <target state="translated">式を作成できませんでした適切なシリアライザーが見つからなかった場合は、エラーは、シリアル化マネージャーを通じて報告されます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>No error will be reported if a serializer was found but it failed to produce an expression.</source>
          <target state="translated">シリアライザーは見つかりましたが、式を生成するために失敗した場合、エラーは報告されません。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>In this case, it is assumed that the serializer either already reported the error or it did not attempt to serialize the object.</source>
          <target state="translated">この場合、シリアライザーか、既にエラーが報告されたこと、または、オブジェクトをシリアル化されませんでしたと見なされます。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>If the serializer returned a statement or a collection of statements, those statements will not be discarded.</source>
          <target state="translated">ステートメントまたはステートメントのコレクションに、シリアライザーが返される場合は、これらのステートメントは破棄されません。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The SerializeToExpression method will first look for a &lt;xref:System.ComponentModel.Design.Serialization.StatementContext&gt; on the context stack and add statements to the statement context object's &lt;xref:System.ComponentModel.Design.Serialization.StatementContext.StatementCollection%2A&gt; property.</source>
          <target state="translated">SerializeToExpression メソッドは、まず、&lt;xref:System.ComponentModel.Design.Serialization.StatementContext&gt;コンテキスト スタックが作成され、ステートメントのコンテキストにステートメントを追加&lt;xref:System.ComponentModel.Design.Serialization.StatementContext.StatementCollection%2A&gt;プロパティ&lt;/xref:System.ComponentModel.Design.Serialization.StatementContext.StatementCollection%2A&gt;&lt;/xref:System.ComponentModel.Design.Serialization.StatementContext&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>If there is no statement context, the SerializeToExpression method will look in the context for a &lt;xref:System.CodeDom.CodeStatementCollection&gt; and add the statements there.</source>
          <target state="translated">コンテキストで SerializeToExpression メソッドが表示されるステートメントのコンテキストがない場合、&lt;xref:System.CodeDom.CodeStatementCollection&gt;ありますのステートメントを追加します&lt;/xref:System.CodeDom.CodeStatementCollection&gt;。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>If no place can be found to add the statements, an error will be generated.</source>
          <target state="translated">場所がありませんできますが、ステートメントを追加する検出された場合、エラーが生成されます。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You should not call the SerializeToExpression method within &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize%2A&gt; when serializing your own object.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 内 SerializeToExpression メソッドを呼び出す必要はありません&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize%2A&gt;、独自のオブジェクトをシリアル化するとき&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Instead, you should call &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;.</source>
          <target state="translated">代わりに、 &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>If it returns <ph id="ph1">`null`</ph>, create your own expression and call &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;.</source>
          <target state="translated">返された場合<ph id="ph1">`null`</ph>、独自の式を作成し、 &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression%2A&gt;を呼び出します</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Then proceed with the rest of your serialization.</source>
          <target state="translated">シリアル化の残りの部分に進みます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> can be serialized; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト場合<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept> 、それ以外のシリアル化された<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Serializes the given object into an expression.</source>
          <target state="translated">式に指定されたオブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt; method is a helper method that serializes a value to a resource expression.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;リソース式の値をシリアル化するヘルパー メソッドです&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This is in contrast to the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt; method, which writes a value to a resource binary object.</source>
          <target state="translated">これは、対照的に、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt;メソッドで、リソースのバイナリ オブジェクトに値を書き込みます&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource%2A&gt;。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt; goes one step further and returns an expression that can be used to recover the resource.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;一歩し、リソースを回復するために使用する式を返します。&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For example, the return value might be "rm.GetValue("SomeBitmap");".</source>
          <target state="translated">たとえば、戻り値は"rm 可能性があります。GetValue("SomeBitmap");"です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The name of the resource is calculated from the &lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;, if one can be found on the context stack.</source>
          <target state="translated">リソースの名前がから計算された、&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;コンテキスト スタックに見つかったいずれかの場合は、&lt;/xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt; 。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt; method will look on the &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt; for the following objects:      -   &lt;xref:System.CodeDom.CodeStatementCollection&gt;—a collection of statements to add a resource manager to, if one needs to be declared.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;メソッドは、検索、&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;次のオブジェクトに対して:- &lt;xref:System.CodeDom.CodeStatementCollection&gt;-いずれかを宣言する必要がある場合に、リソース マネージャーを追加するステートメントのコレクション&lt;/xref:System.CodeDom.CodeStatementCollection&gt;&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt;&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;—the root expression, which is needed to create a resource manager.</source>
          <target state="translated">- &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;— リソース マネージャーを作成するために必要なルートの式&lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;—used to fabricate a name for the resource and to decide what type of resource manager call to make.</source>
          <target state="translated">- &lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;-リソースの名前を作成してするリソース マネージャーの呼び出しの種類を決定するために使用します&lt;/xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> as a serialized expression.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を含む<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept>としてシリアル化された式。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Serializes the given object into an expression appropriate for the invariant culture.</source>
          <target state="translated">インバリアント カルチャに適した式に指定されたオブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`ensureInvariant`</ph> parameter is <ph id="ph2">`true`</ph>, the SerializeToResourceExpression method will also write the resource value into the invariant culture’s resource file if the current <ph id="ph3">`ResourceCulture`</ph> is not the invariant culture..</source>
          <target state="translated">場合、<ph id="ph1">`ensureInvariant`</ph>パラメーターは<ph id="ph2">`true`</ph>、SerializeToResourceExpression メソッドも値を書き込みます、リソース、インバリアント カルチャのリソース ファイルに場合、現在<ph id="ph3">`ResourceCulture`</ph>インバリアント カルチャではありません.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to serialize into the invariant culture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インバリアント カルチャにシリアル化するにはそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> as a serialized expression.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を含む<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept>としてシリアル化された式。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Associates an object with an expression.</source>
          <target state="translated">式オブジェクトに関連付けます。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The SetExpression method is a helper method that associates a &lt;xref:System.CodeDom.CodeExpression&gt; with an object.</source>
          <target state="translated">SetExpression メソッドがヘルパー メソッドを関連付ける、&lt;xref:System.CodeDom.CodeExpression&gt;オブジェクトを使用します&lt;/xref:System.CodeDom.CodeExpression&gt;。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Objects that have been associated with expressions in this way are accessible through the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; method.</source>
          <target state="translated">この方法で式に関連付けられているオブジェクトは経由でアクセスできる、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>SetExpression stores its expression table as an appended object on the context stack so it is accessible by any serializer’s &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; method.</source>
          <target state="translated">任意のシリアライザーによってアクセスできるように、SetExpression でコンテキスト スタックに追加されたオブジェクトとしてその式のテーブルが保存&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with which to associate <ph id="ph1">`value`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を関連付ける<ph id="ph1">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;expression&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;expression&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Associates an object with an expression, optionally specifying a preset expression.</source>
          <target state="translated">オブジェクトを必要に応じて事前設定された式を指定する、式に関連付けます。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The SetExpression method is a helper method that associates a &lt;xref:System.CodeDom.CodeExpression&gt; with an object.</source>
          <target state="translated">SetExpression メソッドがヘルパー メソッドを関連付ける、&lt;xref:System.CodeDom.CodeExpression&gt;オブジェクトを使用します&lt;/xref:System.CodeDom.CodeExpression&gt;。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Objects that have been associated with expressions in this way are accessible through the &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; method.</source>
          <target state="translated">この方法で式に関連付けられているオブジェクトは経由でアクセスできる、&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The SetExpression stores its expression table as an appended object on the context stack so it is accessible by any serializer’s &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt; method.</source>
          <target state="translated">任意のシリアライザーによってアクセスできるように、SetExpression がコンテキスト スタックに追加されたオブジェクトとしてその式のテーブルを格納&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression%2A&gt;。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use for serialization.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.IDesignerSerializationManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">シリアル化するオブジェクト。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with which to associate <ph id="ph1">`value`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を関連付ける<ph id="ph1">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to specify a preset expression; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事前設定された式では; を指定するにはそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>