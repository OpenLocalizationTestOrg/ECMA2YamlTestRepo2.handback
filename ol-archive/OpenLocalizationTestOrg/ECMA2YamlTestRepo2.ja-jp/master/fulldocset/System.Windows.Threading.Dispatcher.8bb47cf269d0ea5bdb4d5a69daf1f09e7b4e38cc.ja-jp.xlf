<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9471ecf37d14e3c9866cdceab3911bc1e16e81d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9df8a6cafad73f0a72de665b44a9020445c9a629</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1749f49a8457313de1aebbbb85b52e79efa4befd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
          <target state="translated">スレッドの作業項目のキューを管理するためのサービスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Dispatcher maintains a prioritized queue of work items for a specific thread.</source>
          <target state="translated">ディスパッチャーは、特定のスレッドの作業項目の優先順位の高いキューを保持します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When a Dispatcher is created on a thread, it becomes the only Dispatcher that can be associated with the thread, even if the Dispatcher is shut down.</source>
          <target state="translated">ディスパッチャーは、スレッドで作成された、ディスパッチャーがシャット ダウン場合でも、スレッドに関連付けることができる唯一のディスパッチャーになります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you attempt to get the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; for the current thread and a Dispatcher is not associated with the thread, a Dispatcher will be created.</source>
          <target state="translated">取得しようとすると、&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;の現在のスレッドとディスパッチャーに関連付けられていないスレッド、ディスパッチャーが作成されます&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A Dispatcher is also created when you create a &lt;xref:System.Windows.Threading.DispatcherObject&gt;.</source>
          <target state="translated">ディスパッチャーは&lt;xref:System.Windows.Threading.DispatcherObject&gt;。&lt;/xref:System.Windows.Threading.DispatcherObject&gt;を作成するときにも作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you create a Dispatcher on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
          <target state="translated">バック グラウンド スレッドでディスパッチャーを作成する場合は、スレッドを終了する前に、ディスパッチャーをシャット ダウンすることを確認します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a Dispatcher is shut down, it cannot be restarted.</source>
          <target state="translated">ディスパッチャーがシャット ダウンは再開できません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, a &lt;xref:System.Windows.Threading.DispatcherObject&gt; can only be accessed by the Dispatcher it is associated with.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、&lt;xref:System.Windows.Threading.DispatcherObject&gt;ディスパッチャーに関連付けられていることによってのみアクセスできます&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a background thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that is associated with the Dispatcher on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">たとえば、バック グラウンド スレッドがの内容を更新できません、&lt;xref:System.Windows.Controls.Button&gt;にディスパッチャーに関連付けられる、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>スレッド&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the Dispatcher associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">バック グラウンド スレッドにアクセスするために、&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;のプロパティ、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドがディスパッチャーに関連付けられている作業を委任する必要があります、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>スレッド&lt;/xref:System.Windows.Controls.Button&gt;&lt;/xref:System.Windows.Controls.ContentControl.Content%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The operation is added to the queue of the Dispatcher at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;位置にあるディスパッチャーのキューに追加されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a Dispatcher that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティがディスパッチャーに呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All of the methods on Dispatcher, with the exception of &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, are free-threaded.</source>
          <target state="translated">すべてのディスパッチャーでメソッドの例外が&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;は、フリー スレッドします&lt;/xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Objects that derive from &lt;xref:System.Windows.Threading.DispatcherObject&gt; have thread affinity.</source>
          <target state="translated">派生したオブジェクト&lt;xref:System.Windows.Threading.DispatcherObject&gt;スレッド アフィニティがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.</source>
          <target state="translated">派生したオブジェクト&lt;xref:System.Windows.Freezable&gt;はフリー スレッドが固定されている場合&lt;/xref:System.Windows.Freezable&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Freezable オブジェクトの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">スレッドで非同期的に指定された引数で指定したデリゲートを実行する、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に作成されました。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;によって返されるオブジェクト&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、&lt;xref:System.Windows.Threading.DispatcherPriority&gt;デリゲートの保留中は実行のイベント キューします&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-デリゲートがイベント キューから削除しています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-を返すデリゲート待機しています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">後に、デリゲートが返された値を取得するが実行されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;に&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティが&lt;/xref:System.Windows.Threading.Dispatcher&gt;呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">後すぐに返されるオブジェクトを&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで、指定された優先順位で非同期的に指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If multiple BeginInvoke calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">同時に複数の BeginInvoke 呼び出しが行われる場合&lt;xref:System.Windows.Threading.DispatcherPriority&gt;、これらは、呼び出しが行われた順序で実行されます&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;返します、&lt;xref:System.Windows.Threading.DispatcherOperation&gt;デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;によって返されるオブジェクト&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、&lt;xref:System.Windows.Threading.DispatcherPriority&gt;デリゲートの保留中は実行のイベント キューします&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-デリゲートがイベント キューから削除しています。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-を返すデリゲート待機しています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">後に、デリゲートが返された値を取得するが実行されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;に&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティが&lt;/xref:System.Windows.Threading.Dispatcher&gt;呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">後すぐに返されるオブジェクトを&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効ではありません<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">スレッドで非同期的に、引数を指定して、指定された優先順位で指定したデリゲートを実行する、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に作成されました。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;によって返されるオブジェクト&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、&lt;xref:System.Windows.Threading.DispatcherPriority&gt;デリゲートの保留中は実行のイベント キューします&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-デリゲートがイベント キューから削除しています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-を返すデリゲート待機しています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">後に、デリゲートが返された値を取得するが実行されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;に&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティが&lt;/xref:System.Windows.Threading.Dispatcher&gt;呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">後すぐに返されるオブジェクトを&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで指定された優先度で非同期的に、指定された引数の指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>関連付けられています。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>指定できます<ph id="ph2">`null`</ph>引数が必要ない場合。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;返します、&lt;xref:System.Windows.Threading.DispatcherOperation&gt;デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;によって返されるオブジェクト&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、&lt;xref:System.Windows.Threading.DispatcherPriority&gt;デリゲートの保留中は実行のイベント キューします&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-デリゲートがイベント キューから削除しています。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-を返すデリゲート待機しています。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">後に、デリゲートが返された値を取得するが実行されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">複数&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;同時呼び出しが行われる&lt;xref:System.Windows.Threading.DispatcherPriority&gt;、これらは、呼び出しが行われた順序で実行されます&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;に&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティが&lt;/xref:System.Windows.Threading.Dispatcher&gt;呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">プッシュする&amp;1; つの引数を受け取るメソッドへのデリゲート、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">指定したメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">後すぐに返されるオブジェクトを&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効ではありません<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで指定された優先順位に非同期的に指定された引数の配列で、指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>パラメーターを指定できます<ph id="ph2">`null`</ph>の引数が必要ない場合。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;返します、&lt;xref:System.Windows.Threading.DispatcherOperation&gt;デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;によって返されるオブジェクト&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、&lt;xref:System.Windows.Threading.DispatcherPriority&gt;デリゲートの保留中は実行のイベント キューします&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-デリゲートがイベント キューから削除しています。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-を返すデリゲート待機しています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">後に、デリゲートが返された値を取得するが実行されます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">複数&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;同時呼び出しが行われる&lt;xref:System.Windows.Threading.DispatcherPriority&gt;、これらは、呼び出しが行われた順序で実行されます&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">場合&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;に&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、返された&lt;xref:System.Windows.Threading.DispatcherOperation&gt;&lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt;に設定されている&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;の status プロパティが&lt;/xref:System.Windows.Threading.Dispatcher&gt;呼び出されます&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">指定したメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">指定したメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">後にすぐに返されるオブジェクトを&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;が呼び出されると、保留中の実行では、デリゲートの対話に使用できる、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キュー&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; 。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not a valid priority.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>有効な優先度がありません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> asynchronously.</source>
          <target state="translated">シャット ダウンを開始、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期的にします。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>BeginInvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">BeginInvokeShutdown は、UI の無制限のアクセス許可を要求します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときに、&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、起動、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;に設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;シャット ダウンしない完全にイベント キューのアンワインドするまで&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了すると、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
          <target state="translated">ディスパッチャーのシャット ダウンを開始する優先度です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">呼び出し元のスレッドがこれに関連付けられているスレッドかどうかを判断<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Only the &lt;xref:System.Windows.Threading.Dispatcher&gt; that a &lt;xref:System.Windows.Threading.DispatcherObject&gt; is created on may access the object.</source>
          <target state="translated">のみ、&lt;xref:System.Windows.Threading.Dispatcher&gt;を&lt;xref:System.Windows.Threading.DispatcherObject&gt;が作成されるオブジェクトへのアクセス可能性がありますにします&lt;/xref:System.Windows.Threading.DispatcherObject&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; to access the object from a different thread.</source>
          <target state="translated">使用して&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;別のスレッドからオブジェクトにアクセスする&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CheckAccess can be called from any thread.</source>
          <target state="translated">CheckAccess は、任意のスレッドから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The difference between CheckAccess and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; is CheckAccess returns a Boolean indicating whether the calling thread has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; throws an exception.</source>
          <target state="translated">CheckAccess の違いと&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;CheckAccess が呼び出し元のスレッドがへのアクセスを持っているかどうかを示すブール値を返しますが、&lt;xref:System.Windows.Threading.Dispatcher&gt;と&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;例外をスローします&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the calling thread is the thread associated with this <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>かどうか、呼び出し元のスレッドがこれに関連付けられている<bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the thread currently executing and creates a new <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if one is not already associated with the thread.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のスレッドの現在実行中と新たに作成<bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>のスレッドに関連付けられているいずれかがない場合。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Windows.Threading.Dispatcher&gt; is not associated with the current thread, a new &lt;xref:System.Windows.Threading.Dispatcher&gt; will be created.</source>
          <target state="translated">場合、 &lt;xref:System.Windows.Threading.Dispatcher&gt;、現在のスレッドに関連付けられていない新しい&lt;xref:System.Windows.Threading.Dispatcher&gt;が作成されます&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This is not the case with the &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; method.</source>
          <target state="translated">これは、ケースではありません、&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;メソッド&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; will return <ph id="ph1">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;返されます<ph id="ph1">`null`</ph>指定されたスレッドに関連付けられているディスパッチャーがないかどうか。&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
          <target state="translated">現在のスレッドに関連付けられているディスパッチャー。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Disables processing of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">処理を無効になります、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キュー。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
          <target state="translated">ディスパッチャーの処理を無効にすることは、関連のない再入の可能性を排除するためのものでは、高度な方法です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The effects of disabling processing are as follows:      -   <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
          <target state="translated">処理を無効にする場合の影響は次のとおり:-<ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph>ロックはないメッセージ ポンプを内部的にします。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Windows.Threading.DispatcherFrame&gt; objects are not allowed to be pushed.</source>
          <target state="translated">-&lt;xref:System.Windows.Threading.DispatcherFrame&gt;プッシュするオブジェクトは許可されません&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>-   Message processing is not permitted.</source>
          <target state="translated">のメッセージ処理が許可されていません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure that DisableProcessing returns when it is called can be used to re-enable dispatcher processing.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;ディスパッチャーの処理を再度有効にする DisableProcessing が呼び出された場合に返す構造体を使用することができます&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Calling &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure re-enables processing.</source>
          <target state="translated">呼び出す&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;上、&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;構造が処理を再度有効します&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>DisableProcessing can only be called on the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is associated with.</source>
          <target state="translated">DisableProcessing は、スレッドでのみ呼び出すことができます、&lt;xref:System.Windows.Threading.Dispatcher&gt;に関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
          <target state="translated">ディスパッチャーの処理を有効にする構造体。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
          <target state="translated">入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified thread.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したスレッドにします。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
          <target state="translated">ディスパッチャーが使用できない場合、指定されたスレッドの<ph id="ph1">`null`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>FromThread does not create a &lt;xref:System.Windows.Threading.Dispatcher&gt; on a thread that does not have a &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">FromThread は作成されません、 &lt;xref:System.Windows.Threading.Dispatcher&gt; &lt;xref:System.Windows.Threading.Dispatcher&gt;。&lt;/xref:System.Windows.Threading.Dispatcher&gt;を持たないスレッドで&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A new &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on a thread that does not already have a &lt;xref:System.Windows.Threading.Dispatcher&gt; when attempting to get the &lt;xref:System.Windows.Threading.Dispatcher&gt; by using the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; property.</source>
          <target state="translated">新しい&lt;xref:System.Windows.Threading.Dispatcher&gt;をまだ持たないスレッドで作成された、&lt;xref:System.Windows.Threading.Dispatcher&gt;を取得しようとすると、&lt;xref:System.Windows.Threading.Dispatcher&gt;を使用して、&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;プロパティ&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from.</source>
          <target state="translated">取得する、スレッド、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>からです。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">ディスパッチャー <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has finished shutting down.</source>
          <target state="translated">指定するかどうか、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>シャット ダウンが完了します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときに、&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、起動、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;に設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;イベント キューのアンワインドするまで完全にシャット ダウンをしません&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the HasShutdownFinished property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了すると、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;イベントが発生し、HasShutdownFinished プロパティに設定<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dispatcher has finished shutting down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ディスパッチャーがシャット ダウンを完了した場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is shutting down.</source>
          <target state="translated">指定するかどうか、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>がシャット ダウン中です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and HasShutdownStarted is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときに、&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、起動、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;イベントが発生しに設定されている HasShutdownStarted <ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; 。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;シャット ダウンしない完全にイベント キューのアンワインドするまで&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了すると、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has started shutting down; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>シャット ダウン以外の場合が開始<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">に関するその他のイベント情報を提供するフック関数のコレクションを取得、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.DispatcherHooks&gt; class provides additional event information about the &lt;xref:System.Windows.Threading.Dispatcher&gt;, such as when the &lt;xref:System.Windows.Threading.Dispatcher&gt; is inactive or when an operation has competed.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherHooks&gt;クラスに関する追加のイベント情報を提供する、 &lt;xref:System.Windows.Threading.Dispatcher&gt;、場合など、&lt;xref:System.Windows.Threading.Dispatcher&gt;がアクティブでないか、操作が完了しました&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.DispatcherHooks&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これに関連付けられているフック<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで指定された優先順位で同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>関連付けられています。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された優先順位で同期的に指定されたデリゲートをスレッド上で実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドにデリゲートする引数を使用しないにプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等しい<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効な優先度がありません。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで指定された優先順位で同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">操作をキャンセルするかどうかを示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先順位にある指定された時間範囲内で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">操作が完了するまで待機する時間の最大量。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>指定できます<ph id="ph2">`null`</ph>で引数が不要な場合<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">プッシュする&amp;1; つの引数を受け取るメソッドへのデリゲート、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等しい<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効な優先度がありません。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created.</source>
          <target state="translated">スレッドで指定された優先順位に同期的に指定されたタイムアウト値で、指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>作成されました。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">操作が終了するまで待機する最大時間。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで指定された優先順位で同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">操作をキャンセルするかどうかを示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
          <target state="translated">操作を開始するまで待機する時間の最小量。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先順位にある指定された時間範囲内で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">指定されたパラメーターを受け取るメソッドへのデリゲート<ph id="ph1">`args`</ph>にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">操作が完了するまで待機する時間の最大量。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>指定できます<ph id="ph2">`null`</ph>で引数が不要な場合<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等しい<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効な優先度がありません。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>指定できます<ph id="ph2">`null`</ph>で引数が不要な場合<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">操作が終了するまで待機する最大時間。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">特定のメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no arguments are needed.</source>
          <target state="translated">これは、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引数が必要ない場合。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等しい<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効な優先度がありません。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>指定できます<ph id="ph2">`null`</ph>引数が必要ない場合。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>、作成されたスレッドのみ、&lt;xref:System.Windows.Threading.DispatcherObject&gt;そのオブジェクトにアクセスすることがあります&lt;/xref:System.Windows.Threading.DispatcherObject&gt;。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 &lt;xref:System.Windows.Controls.Button&gt;UI スレッド上に作成された&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 &lt;xref:System.Windows.Controls.Button&gt;、バック グラウンド スレッドに作業を委任する必要があります、 &lt;xref:System.Windows.Threading.Dispatcher&gt;UI スレッドに関連付けられている&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Controls.Button&gt;。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">いずれか&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;を使用してこれを実現します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期的および&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;は非同期です&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">操作は&lt;xref:System.Windows.Threading.Dispatcher&gt;、指定した&lt;xref:System.Windows.Threading.DispatcherPriority&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;で&lt;/xref:System.Windows.Threading.Dispatcher&gt;のイベント キューに追加されます。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">保留中の操作で、他の基準とした、優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キューを指定したメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">操作が終了するまで待機する最大時間。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント キュー。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
          <target state="translated">指定したメソッドに引数として渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">指定したメソッドに引数として渡すオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">呼び出されるデリゲートからの戻り値または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デリゲートに戻り値があるない場合。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>等しい<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効ではありません<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで非同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで指定された優先度で非同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">指定された実行&lt;xref:System.Action&gt;スレッドで指定された優先度で非同期的に、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられている&lt;/xref:System.Action&gt;。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">ディスパッチャーを介した呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">操作をキャンセルするかどうかを示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> synchronously.</source>
          <target state="translated">シャット ダウン プロセスを開始、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>同期的に処理します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>InvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">InvokeShutdown は、UI の無制限のアクセス許可を要求します。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときに、&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウン、起動、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;に設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;シャット ダウンしない完全にイベント キューのアンワインドするまで&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了すると、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
          <target state="translated">実行ループに入ります。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Threading.DispatcherFrame&gt; represents a loop that processes pending work items.</source>
          <target state="translated">A&lt;xref:System.Windows.Threading.DispatcherFrame&gt;保留中の作業項目を処理するループを表します&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The Dispatcher processes the work item queue in a loop.</source>
          <target state="translated">ディスパッチャーは、ループ内での作業項目のキューを処理します。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">ループは、フレームと呼ばれます。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The initial loop is typically initiated by the application by calling &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;。&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;を呼び出すことによって、アプリケーションによって初期ループが開始通常</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>PushFrame enters a loop represented by the parameter <ph id="ph1">`frame`</ph>.</source>
          <target state="translated">パラメーターによって表されるループに入る PushFrame<ph id="ph1">`frame`</ph>です。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>At each iteration of the loop, the &lt;xref:System.Windows.Threading.Dispatcher&gt; will check the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property on the &lt;xref:System.Windows.Threading.DispatcherFrame&gt; class to determine whether the loop should continue or if it should stop.</source>
          <target state="translated">ループの繰り返しごとに、&lt;xref:System.Windows.Threading.Dispatcher&gt;チェック、&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;プロパティを&lt;xref:System.Windows.Threading.DispatcherFrame&gt;ループを続行するかどうか、または停止したかどうかを決めるクラスを&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.DispatcherFrame&gt; allows for the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property to be set explicitly and it respects the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; property on the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;プロパティを明示的に設定して、尊重&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;xref:System.Windows.Threading.Dispatcher&gt;。&lt;/xref:System.Windows.Threading.Dispatcher&gt;プロパティ&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;では、します。&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>This means when the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, frames that use the default &lt;xref:System.Windows.Threading.DispatcherFrame&gt; implementation will exit, which enables all nested frames to exit.</source>
          <target state="translated">つまり、ときに、&lt;xref:System.Windows.Threading.Dispatcher&gt;をシャット ダウンが起動し、既定値を使用するフレーム&lt;xref:System.Windows.Threading.DispatcherFrame&gt;を終了する入れ子になったすべてのフレームを有効にする、実装が終了されます&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
          <target state="translated">ディスパッチャーが処理するのフレームです。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-or-       Dispatcher processing has been disabled.</source>
          <target state="translated">または、ディスパッチャーの処理を無効になっています。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">メインの実行のフレームに、イベント キューのプッシュ、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; processes the event queue in a loop.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;ループ内で、イベント キューを処理します&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">ループは、フレームと呼ばれます。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The initial loop is typically initiated by the application by calling Run.</source>
          <target state="translated">初期のループは、実行を呼び出すことによって通常、アプリケーションによって開始されます。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The main execution frame will continue until the &lt;xref:System.Windows.Threading.Dispatcher&gt; is shutdown.</source>
          <target state="translated">メインの実行のフレームはまで引き続き、&lt;xref:System.Windows.Threading.Dispatcher&gt;シャット ダウンします&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> finishes shutting down.</source>
          <target state="translated">発生したときに、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>シャット ダウンが完了するとします。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときのシャット ダウン プロセス、&lt;xref:System.Windows.Threading.Dispatcher&gt;が開始されて、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;イベントが発生したと&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;に設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;イベント キューのアンワインドするまで完全にシャット ダウンをしません&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the ShutdownFinished event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了したら、ShutdownFinished イベントは、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> begins to shut down.</source>
          <target state="translated">発生したときに、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>シャット ダウンを開始します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the ShutdownStarted event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ときに、シャット ダウン プロセスの&lt;xref:System.Windows.Threading.Dispatcher&gt;は ShutdownStarted イベントを発生が開始されると、および&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;éý ' è <ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; 。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher&gt;イベント キューのアンワインドするまで完全にシャット ダウンをしません&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ディスパッチャーは、シャット ダウンが完了すると、&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;イベントが発生し、&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets the thread this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">このスレッドを取得<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>に関連付けられています。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The thread.</source>
          <target state="translated">スレッドです。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">スレッドの例外がスローされ、によってデリゲートの実行中にキャッチされなかったときに発生&lt;&gt; <bpt id="p1">*</bpt>&gt; または&lt;&gt; <ept id="p1">*</ept>&gt; です。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is uncaught.</source>
          <target state="translated">このイベントはによってデリゲートの実行中にスローされた例外&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;はキャッチされません&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
          <target state="translated">ハンドラーが例外処理済みとしてマークから呼び出される内部の例外ハンドラーができなくなります。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the UnhandledException event.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;イベントは、UnhandledException イベントを発生させませんする手段を提供します&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the UnhandledException event will not be raised.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;イベントは、最初に、場合&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;上、&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;に設定されている<ph id="ph1">`false`</ph>、UnhandledException イベントは発生しません&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt; when in the filter stage.</source>
          <target state="translated">スレッドの例外がスローされ、によってデリゲートの実行中にキャッチされなかったときに発生&lt;&gt; <bpt id="p1">*</bpt>&gt; または&lt;&gt; <ept id="p1">*</ept>&gt; フィルター ステージの場合にします。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; and is uncaught.</source>
          <target state="translated">によってデリゲートの実行中に発生する例外のフィルターのステージ中にこのイベントは&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;または&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;がキャッチされたとします&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
          <target state="translated">呼び出しスタックは、この時点で (初回例外) アンワインドではありません。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The UnhandledExceptionFilter event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.</source>
          <target state="translated">UnhandledExceptionFilter イベントを発生させませんする手段を提供する、&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;イベント&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The UnhandledExceptionFilter event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.</source>
          <target state="translated">UnhandledExceptionFilter イベントが最初に、発生した場合に&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;で、&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;に設定<ph id="ph1">`false`</ph>、&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;イベントは発生しません&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a valid priority.</source>
          <target state="translated">決定するかどうか、指定した<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>優先順位が無効です。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
          <target state="translated">チェックする優先度です。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
          <target state="translated">優先順位が有効でない場合に発生する例外によって返される文字列。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>有効ではありません<bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">呼び出し元のスレッドがへのアクセスを持つかどうかを判断<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Only the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on may access the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">スレッドでのみ、&lt;xref:System.Windows.Threading.Dispatcher&gt;が作成される&lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt;でアクセス&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>This method is public; therefore, any thread can check to see whether it has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">このメソッドはパブリックです。したがって、任意のスレッドを&lt;xref:System.Windows.Threading.Dispatcher&gt;。&lt;/xref:System.Windows.Threading.Dispatcher&gt;へのアクセスを持っているかどうかが確認確認できます。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The difference between &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; and VerifyAccess is &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; returns a Boolean if the calling thread does not have access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and VerifyAccess throws an exception.</source>
          <target state="translated">間の違い&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;VerifyAccess は&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;呼び出し元のスレッドにへのアクセスがない場合は、ブール値を返します、 &lt;xref:System.Windows.Threading.Dispatcher&gt;VerifyAccess、例外をスローします&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">呼び出し元のスレッドでは、これにアクセスできない<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">このメソッドは、その他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">使用して、 <ph id="ph1">`await`</ph>、または<ph id="ph2">`Await`</ph>Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling the &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt; method and passing in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは、呼び出す&lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;メソッドと受け渡し&lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクト。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
          <target state="translated">このメソッドの結果を待機中のコードに制御が戻るときに発生する作業は、指定された優先順位がスケジュールされます。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">このメソッドは、その他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">使用して、 <ph id="ph1">`await`</ph>、または<ph id="ph2">`Await`</ph>Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
          <target state="translated">継続をスケジュールする優先度です。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>