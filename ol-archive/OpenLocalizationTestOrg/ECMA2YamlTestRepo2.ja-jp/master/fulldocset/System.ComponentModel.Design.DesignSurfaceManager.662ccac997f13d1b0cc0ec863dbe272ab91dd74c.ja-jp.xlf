<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbe3038dbd6853d5b2ffd171a900755dfb7aaa05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.DesignSurfaceManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aea0c34999ff3a5943b421338c09c8f382ab8a46</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffb49dee0809272db3f921eda0f01b188e02d6d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Manages a collection of <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurface"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">コレクションを管理<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurface"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class is designed to be a container of &lt;xref:System.ComponentModel.Design.DesignSurface&gt; objects.</source>
          <target state="translated">DesignSurfaceManager クラスは、コンテナーの設計されています&lt;xref:System.ComponentModel.Design.DesignSurface&gt;オブジェクト&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It provides common services that handle event routing between designers, property windows, and other global objects.</source>
          <target state="translated">そのハンドル イベントのルーティング デザイナー、プロパティ ウィンドウ、およびその他のグローバル オブジェクトの間で一般的なサービスを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.</source>
          <target state="translated">使って DesignSurfaceManager 省略可能ながいくつかのデザイナー ウィンドウがあるを場合お勧めします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class provides several design-time services automatically.</source>
          <target state="translated">DesignSurfaceManager クラスでは、いくつかのデザイン時サービスを自動的に提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can override each of these services by replacing them in the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.</source>
          <target state="translated">これらの各サービスを上書きするには、保護対象に置き換えることによって&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;プロパティ&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To replace a service, override the constructor, call base, and make any changes through the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.</source>
          <target state="translated">サービスを置き換えるには、コンス トラクターをオーバーライド、基本、および、保護対象から変更を加える&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;プロパティ&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All services added to the service container that implement the &lt;xref:System.IDisposable&gt; interface are disposed when the design surface manager is disposed.</source>
          <target state="translated">実装するサービス コンテナーに追加されたすべてのサービス、&lt;xref:System.IDisposable&gt;インターフェイスがデザイン サーフェイス マネージャーが破棄されるときに破棄されます&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The DesignSurfaceManager class provides the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface as the default service.</source>
          <target state="translated">DesignSurfaceManager クラスは、提供、&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;既定のサービスとのインターフェイス&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; provides a global eventing mechanism for designer events.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;デザイナー イベントのグローバル イベント メカニズムを提供します。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With this mechanism, an application is informed when a designer becomes active.</source>
          <target state="translated">このメカニズムにより、アプリケーションは、デザイナーがアクティブになったときに通知されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.</source>
          <target state="translated">サービスは、デザイナーのコレクションと、[プロパティ] ウィンドウなどのグローバル オブジェクトが選択範囲を監視できますを&amp;1; か所変更イベントを提供します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A parent service provider.</source>
          <target state="translated">親サービス プロバイダー。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.</source>
          <target state="translated">サービス要求は、デザイン サーフェイス マネージャーによって解決できない場合、このプロバイダーに転送されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets the active designer.</source>
          <target state="translated">取得またはアクティブなデザイナーを設定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The ActiveDesignSurface property should be set by the designer's user interface whenever a designer becomes the active window.</source>
          <target state="translated">デザイナーがアクティブ ウィンドウになったときに、デザイナーのユーザー インターフェイスによって ActiveDesignSurface プロパティを設定してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default implementation of this property works with the default implementation of the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface to notify interested parties that a new designer is now active.</source>
          <target state="translated">既定の実装でこのプロパティの既定の実装の動作、&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;新しいデザイナーが現在アクティブである関係者に通知するインターフェイス&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you provide your own implementation of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, you should override this property to notify your service appropriately.</source>
          <target state="translated">独自の実装を提供する場合&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;、サービスを適切に通知するには、このプロパティをオーバーライドする必要があります&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This property can be set to <ph id="ph1">`null`</ph>, indicating that no designer is active.</source>
          <target state="translated">このプロパティに設定することができます<ph id="ph1">`null`</ph>デザイナーがアクティブなないことを示すです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The active designer.</source>
          <target state="translated">アクティブなデザイナーです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Occurs when the currently active designer changes.</source>
          <target state="translated">現在アクティブなデザイナーが変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">デザイン画面のインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新しいデザイン サーフェス インスタンス。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">デザイン画面のインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you want to conveniently add additional per-designer services, use the <ph id="ph1">`parentProvider`</ph> parameter to provide a service provider for this design surface.</source>
          <target state="translated">デザイナーごとのサービスを簡単に追加する場合は、使用、<ph id="ph1">`parentProvider`</ph>このデザイン サーフェイスでのサービス プロバイダーを提供するパラメーターです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; itself.</source>
          <target state="translated">CreateDesignSurface メソッドの両方の指定したサービス プロバイダーからのサービス要求を満たすことができる結合サービス プロバイダーを作成するだけでなく&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;自体&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurface method then passes this service provider into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; method.</source>
          <target state="translated">このサービス プロバイダーに渡します CreateDesignSurface メソッド、&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; returns the design surface, the CreateDesignSurface method tries to obtain the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;デザイン画面で、メソッドが、 &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;。&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;を取得しようとしています。 CreateDesignSurface を取得&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;した後</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If it is present, and if it is the instance of the service that &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; provided by default, the CreateDesignSurface method raises the &lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt; event.</source>
          <target state="translated">これが存在する場合、およびサービスのインスタンスである場合を&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;CreateDesignSurface メソッドを発生させる既定では、指定された、&lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt;イベント&lt;/xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt;&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A parent service provider.</source>
          <target state="translated">親サービス プロバイダー。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object.</source>
          <target state="translated">新しい結合サービス プロバイダーが作成されますがまずサービスでこのプロバイダーに確認され、デザイン サーフェイス マネージャー オブジェクトに障害を委任します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This merged provider will be passed into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt; method.</source>
          <target state="translated">この結合されたプロバイダーに渡される、&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt;メソッド&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新しいデザイン サーフェス インスタンス。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;parentProvider&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;parentProvider&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implementation that creates the design surface.</source>
          <target state="translated">デザイン画面を作成するための実装です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The CreateDesignSurfaceCore method is called by both &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt; methods.</source>
          <target state="translated">CreateDesignSurfaceCore メソッドは両方によって&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is the implementation that actually creates the design surface.</source>
          <target state="translated">実際には、デザイン画面を作成する実装することをお勧めします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default implementation just returns a new &lt;xref:System.ComponentModel.Design.DesignSurface&gt;.</source>
          <target state="translated">既定の実装では、新しい&lt;xref:System.ComponentModel.Design.DesignSurface&gt;.&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;だけを返します</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You may override this method to provide a custom object that derives from the &lt;xref:System.ComponentModel.Design.DesignSurface&gt; class.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;クラス&lt;/xref:System.ComponentModel.Design.DesignSurface&gt;から派生したカスタム オブジェクトを提供するには、このメソッドをオーバーライドする可能性があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A service provider to pass to the design surface.</source>
          <target state="translated">デザイン画面に渡すサービス プロバイダー。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is either an instance of <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or an object that implements &lt;xref:System.IServiceProvider&gt;, and represents a merge between the service provider of the <bpt id="p2">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class and an externally passed provider.</source>
          <target state="translated">これは、いずれかのインスタンス<bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を実装するオブジェクトまたは&lt;xref:System.IServiceProvider&gt;のサービス プロバイダーとの間のマージを表すと、 <bpt id="p2">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>クラスおよび外部から渡されたプロバイダー&lt;/xref:System.IServiceProvider&gt; 。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A new design surface instance.</source>
          <target state="translated">新しいデザイン サーフェス インスタンス。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Occurs when a designer is created.</source>
          <target state="translated">デザイナーが作成されるときに発生します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when a designer is disposed.</source>
          <target state="translated">デザイナーが破棄されるときに発生します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a collection of design surfaces.</source>
          <target state="translated">デザイン サーフェイスのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The DesignSurfaces property is implemented directly on top of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, so if you provide your own implementation of that service, this property uses your implementation.</source>
          <target state="translated">上に直接 DesignSurfaces プロパティは実装&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;ので、このプロパティが実装を使用してそのサービスの実装を提供する場合&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A collection of design surfaces that are currently hosted by the design surface manager.</source>
          <target state="translated">デザイン サーフェイス マネージャーによって現在ホストされているデザイン サーフェイスのコレクション。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Releases the resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">によって使用されるリソースを解放、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The public Dispose method follows the standard &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">パブリックの Dispose メソッドの標準に準拠&lt;xref:System.IDisposable&gt;パターン&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">このメソッドを呼び出すと、デザイン サーフェイス マネージャーが破棄されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.</source>
          <target state="translated">これにより、すべてのサービスを実装するサービス コンテナーを破棄する&lt;xref:System.IDisposable&gt;も破棄されます&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">このメソッドの保護されているバージョンは<ph id="ph1">`virtual`</ph>であり、標準に従って&lt;xref:System.IDisposable&gt;パターン&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ため&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;、クリーンアップのすべてのネイティブ コードを持たない&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;.&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;を呼び出し、ファイナライザーがない&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you need to call &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;, you must add a finalizer yourself.</source>
          <target state="translated">呼び出す必要がある場合&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;、ファイナライザーを自分で追加する必要があります&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignSurfaceManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The public &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt; method follows the standard &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">パブリック&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;メソッドの標準に準拠&lt;xref:System.IDisposable&gt;パターン&lt;/xref:System.IDisposable&gt;&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">このメソッドを呼び出すと、デザイン サーフェイス マネージャーが破棄されます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.</source>
          <target state="translated">これにより、すべてのサービスを実装するサービス コンテナーを破棄する&lt;xref:System.IDisposable&gt;も破棄されます&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.</source>
          <target state="translated">このメソッドの保護されているバージョンは<ph id="ph1">`virtual`</ph>であり、標準に従って&lt;xref:System.IDisposable&gt;パターン&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls Dispose.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ため&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;、クリーンアップのすべてのネイティブ コードを持たない Dispose を呼び出すファイナライザーがない&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you need to call Dispose, you must add a finalizer yourself.</source>
          <target state="translated">Dispose を呼び出す必要がある場合必要があります自分自身を追加するファイナライザーです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose()`</ph>メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>にパラメーターが設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;呼び出す<ph id="ph1">`Dispose`</ph>で<ph id="ph2">`disposing`</ph>'éý'<ph id="ph3">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;参照。&lt;/xref:System.ComponentModel.Design.DesignSurfaceManager&gt; 。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose()`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets a service in the design surface manager’s service container.</source>
          <target state="translated">デザイン サーフェイス マネージャーのサービス コンテナーに、サービスを取得します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The GetService method forwards to any service provider that was given to the design surface manager at construction time.</source>
          <target state="translated">GetService メソッドは、構築時にデザイン サーフェイス マネージャーに指定されたサービス プロバイダーに転送します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The service type to retrieve.</source>
          <target state="translated">サービスの種類を取得します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An object that implements, or is a derived class of, the given service type; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the service does not exist in the service container.</source>
          <target state="translated">を実装するか、特定のサービス型の派生クラス オブジェクトそれ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>サービス コンテナーには、サービスが存在しない場合。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Occurs when the global selection changes.</source>
          <target state="translated">グローバルの選択が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This event is raised when the active designer's selection of component set changes.</source>
          <target state="translated">このイベントは、コンポーネントのアクティブなデザイナーの選択設定の変更時に発生します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is mapped through the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface.</source>
          <target state="translated">これにマップされている、&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;インターフェイス&lt;/xref:System.ComponentModel.Design.IDesignerEventService&gt;。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets the design surface manager's ServiceContainer.</source>
          <target state="translated">デザイン サーフェイス マネージャーの ServiceContainer を取得します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The design surface manager's ServiceContainer.</source>
          <target state="translated">デザイン サーフェイス マネージャーの ServiceContainer します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>