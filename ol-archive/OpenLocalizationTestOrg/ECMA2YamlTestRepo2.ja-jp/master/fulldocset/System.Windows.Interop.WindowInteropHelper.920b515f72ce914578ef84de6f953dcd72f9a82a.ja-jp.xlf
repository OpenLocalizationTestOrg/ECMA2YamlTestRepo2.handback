<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4630f91e3baca4c8c73026f92f6ba246ae29a8e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.WindowInteropHelper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab2f7c061939da3a25e1005ab14b5a26021c85db</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b86cfff4608a46f453ed9a38fd30635f7c287a1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Assists interoperation between <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> code.</source>
          <target state="translated">間の相互運用を支援し<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>と<ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>コード。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Members of this class allows the caller to have internal access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">このクラスのメンバーにより、内部にアクセスする権限が呼び出し元、 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND と親 HWND の<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The proper security checks are performed by those members.</source>
          <target state="translated">適切なセキュリティ チェックは、それらのメンバーによって実行されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use this class whenever you need a more specific object based on its HWND.</source>
          <target state="translated">具体的なオブジェクトと hwnd の分離に基づく必要がある場合は、このクラスを使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An example scenario is if you need to host a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">シナリオの例をホストする必要があるかどうか、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスで、<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initialize the WindowInteropHelper with a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.</source>
          <target state="translated">初期化と WindowInteropHelper、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスのウィンドウのオブジェクト。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can then get the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property and specify the owner for the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window with the &lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt; property.</source>
          <target state="translated">表示する、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ウィンドウのハンドル (HWND) から、&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;プロパティの所有者を指定し、 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>  ウィンドウで、&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;プロパティ&lt;/xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use WindowInteropHelper when hosting a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">次のコード例は、ホストしているときに、WindowInteropHelper を使用する方法を示しています、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>  ダイアログ ボックスで、<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p2">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p4">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept><ept id="p3">]</ept>       Another scenario supported by this class is to obtain a &lt;xref:System.Windows.Interop.HwndSource&gt; object from a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt; object.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CorePseudocode #WindowInteropHelper<ept id="p2">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CorePseudocode #WindowInteropHelper<ept id="p4">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept> <ept id="p3">]</ept>を取得するは、このクラスでサポートされている別のシナリオ、&lt;xref:System.Windows.Interop.HwndSource&gt;オブジェクトから、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;オブジェクト&lt;/xref:System.Windows.Window&gt;&lt;/xref:System.Windows.Interop.HwndSource&gt;。  </target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Interop.HwndSource&gt; enables direct processing of <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> messages through the &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.HwndSource&gt;有効の処理を指示する<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>を通じてメッセージ、&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;メソッド&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;&lt;/xref:System.Windows.Interop.HwndSource&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By using &lt;xref:System.Windows.Interop.HwndSource&gt; and &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; in place of a &lt;xref:System.Windows.Window&gt; you can still handle messages that have no equivalent or handling in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">使用して&lt;xref:System.Windows.Interop.HwndSource&gt;と&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;の代わりに、&lt;xref:System.Windows.Window&gt;いいえ同等またはで処理しているメッセージを処理することができますも<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>&lt;/xref:System.Windows.Window&gt;&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;&lt;/xref:System.Windows.Interop.HwndSource&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a WindowInteropHelper with the &lt;xref:System.Windows.Window&gt; source, then call &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; on the WindowInteropHelper to get from HWND to &lt;xref:System.Windows.Interop.HwndSource&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Window&gt;ソース、 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; &lt;xref:System.Windows.Interop.HwndSource&gt;。&lt;/xref:System.Windows.Interop.HwndSource&gt; HWND から取得する WindowInteropHelper&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;を呼び出し&lt;/xref:System.Windows.Window&gt;、WindowInteropHelper を作成します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a specified <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の指定されたクラス<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">ウィンドウには、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ウィンドウ オブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates the HWND of the window if the HWND has not been created yet.</source>
          <target state="translated">HWND はまだ作成されていない場合は、ウィンドウの HWND を作成します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">マネージ&lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt;の実際の表示のウィンドウ ハンドル (HWND) の作成を分割するときに、EnsureHandle メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</source>
          <target state="translated">これは、ウィンドウを表示する必要がないタスクを実行するオートメーション クライアントがある場合に便利です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the native window has not yet been created, this method creates the native window, sets the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property, and returns the HWND.</source>
          <target state="translated">ネイティブのウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;プロパティ、および、HWND を返します&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the native window has been created already, the handle of the existing native window is returned.</source>
          <target state="translated">ネイティブのウィンドウは、既に作成されている、既存のネイティブ ウィンドウのハンドルが返されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the native window is created as a result of calling this method, the &lt;xref:System.Windows.Window.SourceInitialized&gt; event is raised.</source>
          <target state="translated">このメソッドの呼び出しの結果として、[ネイティブ] ウィンドウを作成する場合、&lt;xref:System.Windows.Window.SourceInitialized&gt;イベントが発生します&lt;/xref:System.Windows.Window.SourceInitialized&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Querying the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property after the EnsureHandle method is called returns the existing window handle.</source>
          <target state="translated">クエリを実行する、 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;EnsureHandle メソッドが呼び出された後にプロパティが既存のウィンドウ ハンドルを返します&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The visual tree is not attached to the window until after the &lt;xref:System.Windows.Window.Show%2A&gt; method is called.</source>
          <target state="translated">ビジュアル ツリーが後まで、ウィンドウにアタッチされていない、&lt;xref:System.Windows.Window.Show%2A&gt;メソッドが呼び出されます&lt;/xref:System.Windows.Window.Show%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Calling the EnsureHandle method more than one time does not create new window handles.</source>
          <target state="translated">EnsureHandle メソッドを呼び出すと複数回、新しいウィンドウのハンドルが作成されることはできません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Calling the EnsureHandle method when the handle has already been created by a call to the &lt;xref:System.Windows.Window.Show%2A&gt; method does not create a new window handle.</source>
          <target state="translated">EnsureHandle メソッドを呼び出すと、ハンドルが既にへの呼び出しによって作成されたときに、&lt;xref:System.Windows.Window.Show%2A&gt;メソッドは新しいウィンドウ ハンドルを作成できません&lt;/xref:System.Windows.Window.Show%2A&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A native window is only created when no handle exists when the EnsureHandle method is called.</source>
          <target state="translated">ネイティブのウィンドウが作成されるは、EnsureHandle メソッドが呼び出されたときにハンドルが存在しない場合のみです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</source>
          <target state="translated">プラットフォーム呼び出しによるネイティブ ウィンドウ Api を使用して設定されているウィンドウのプロパティは、Api の管理 ウィンドウでされない可能性があります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the &lt;xref:System.Windows.Window.Topmost%2A&gt; property is not guaranteed to reflect the native setting.</source>
          <target state="translated">たとえば、EnsureHandle メソッドが呼び出された後に、ネイティブ MS_EX_TOPMOST フラグを使用して最上位にウィンドウを設定する場合、&lt;xref:System.Windows.Window.Topmost%2A&gt;プロパティは、ネイティブの設定を反映する保証はありません&lt;/xref:System.Windows.Window.Topmost%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that represents the HWND.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;HWND を表す&lt;/xref:System.IntPtr&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the window handle for a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window that is used to create this <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ウィンドウ ハンドルを取得、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>これを作成するために使用される<bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window handle (HWND).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>ウィンドウ ハンドル (HWND)。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> owner window.</source>
          <target state="translated">取得または設定のハンドル、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>オーナー ウィンドウです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can reparent windows by setting this property.</source>
          <target state="translated">Windows の親を変更するには、このプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As is true for general <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.</source>
          <target state="translated">True として一般的な<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>プログラミングと、既に使用されている windows ない親を変更しないでください。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The owner window handle (HWND).</source>
          <target state="translated">所有者のウィンドウ ハンドル (HWND))。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>