<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37e507b692d22cbd6ad4e589a76d68e2460b3f57</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.VisualBasic.Information.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4df636a001062fe64848835a12c72b3141b6852</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c09943a549e137ae8049e7252a5922fd68398c89</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Information" name="Information" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> module contains the procedures used to return, test for, or verify information.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Information" name="Information" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>モジュールを返す、テスト、または情報を確認するために使用する手順について説明します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</source>
          <target state="translated">このモジュールは、Visual Basic 言語のキーワードとエラー情報を提供し、データを検証して、配列の範囲を決定し、データの種類と色の情報を取得、ランタイム ライブラリ メンバーをサポートします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
          <target state="translated">最後に実行されたステートメントの行番号を示す整数を返します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If Visual Basic encounters no line numbers, it returns 0.</source>
          <target state="translated">Visual Basic に行番号がない場合は、0 を返します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
          <target state="translated">最後に実行されたステートメントの行番号を示す整数を返します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
          <target state="translated">読み取り専用です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Contains information about run-time errors.</source>
          <target state="translated">実行時エラーに関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">`Err`</ph> object are set by the generator of an error—Visual Basic, an object, or the programmer.</source>
          <target state="translated">プロパティ、<ph id="ph1">`Err`</ph>オブジェクトがエラーのジェネレーターによって設定されます: Visual Basic、オブジェクト、またはプログラマです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When a run-time error occurs, the properties of the <ph id="ph1">`Err`</ph> object are filled with information that uniquely identifies the error and that you can use to handle the error.</source>
          <target state="translated">実行時エラーが発生すると、プロパティの<ph id="ph1">`Err`</ph>オブジェクトは、エラーを一意に識別する情報が格納し、エラー処理に使用することができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To generate a run-time error in your code, use the <ph id="ph1">`Raise`</ph> method.</source>
          <target state="translated">コードの実行時エラーを生成するには、使用、<ph id="ph1">`Raise`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Err`</ph> object's properties are reset to zero or zero-length strings ("") after an <ph id="ph2">`Exit Sub`</ph>, <ph id="ph3">`Exit Function`</ph>, <ph id="ph4">`Exit Property`</ph>, or <ph id="ph5">`Resume Next`</ph> statement within an error-handling routine.</source>
          <target state="translated"><ph id="ph1">`Err`</ph>オブジェクトのプロパティがゼロまたは長さ&amp;0; の文字列にリセットされます ("") した後、 <ph id="ph2">`Exit Sub`</ph>、 <ph id="ph3">`Exit Function`</ph>、 <ph id="ph4">`Exit Property`</ph>、または<ph id="ph5">`Resume Next`</ph>エラー処理ルーチン内のステートメント。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using any form of the <ph id="ph1">`Resume`</ph> statement outside of an error-handling routine will not reset the <ph id="ph2">`Err`</ph> object's properties.</source>
          <target state="translated">任意の形式を使用して、<ph id="ph1">`Resume`</ph>エラー処理ルーチンの外部でのステートメントはリセットされません、<ph id="ph2">`Err`</ph>オブジェクトのプロパティです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Clear`</ph> method to explicitly reset <ph id="ph2">`Err`</ph>.</source>
          <target state="translated">使用することができます、<ph id="ph1">`Clear`</ph>メソッドを明示的にリセット<ph id="ph2">`Err`</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Raise`</ph> method rather than the <ph id="ph2">`Error`</ph> statement to generate run-time errors for system errors and class modules.</source>
          <target state="translated">使用して、<ph id="ph1">`Raise`</ph>メソッドではなく、<ph id="ph2">`Error`</ph>およびモジュールをクラスにシステム エラーの実行時エラーを生成するステートメント。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Your decision about whether to use the <ph id="ph1">`Raise`</ph> method in other code depends on the richness of the information you want to return.</source>
          <target state="translated">使用するかどうかについての決定、<ph id="ph1">`Raise`</ph>他のコードでメソッドを取得する情報の量によって異なります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Err`</ph> object is an intrinsic object with global scope.</source>
          <target state="translated"><ph id="ph1">`Err`</ph>オブジェクトは、グローバル スコープを持つ組み込みオブジェクトです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, you do not need to create an instance of it in your code.</source>
          <target state="translated">したがって、コードで、そのインスタンスを作成する必要はありません。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Contains information about run-time errors.</source>
          <target state="translated">実行時エラーに関する情報が含まれています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether a variable points to an array.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数が指す配列にいるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsArray`</ph> returns <ph id="ph2">`True`</ph> if the variable points to an array; otherwise, it returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsArray`</ph>返します<ph id="ph2">`True`</ph>変数が配列であるを指している場合、返します<ph id="ph3">`False`</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsArray`</ph> is especially useful with objects that might contain arrays.</source>
          <target state="translated"><ph id="ph1">`IsArray`</ph>オブジェクトの配列を含めることができると便利です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> variable.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変数。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether a variable points to an array.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数が指す配列にいるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression represents a valid <bpt id="p2">&lt;xref uid="langword_csharp_Date" name="Date" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値が有効な式を表すかどうかを示す<bpt id="p2">&lt;xref uid="langword_csharp_Date" name="Date" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsDate`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> is of the &lt;xref:System.DateTime&gt; data type or can be converted to it; otherwise, it returns <ph id="ph4">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsDate`</ph>返します<ph id="ph2">`True`</ph>場合<ph id="ph3">`Expression`</ph>は、&lt;xref:System.DateTime&gt;データを入力することもできますを変換後、それ以外を返します<ph id="ph4">`False`</ph>&lt;/xref:System.DateTime&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.DateTime&gt; data type holds both a date value and a time value.</source>
          <target state="translated">&lt;xref:System.DateTime&gt;データ型は、日付の値と時刻の値の両方を保持します&lt;/xref:System.DateTime&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsDate`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> represents a valid date, a valid time, or a valid date and time.</source>
          <target state="translated"><ph id="ph1">`IsDate`</ph>返します<ph id="ph2">`True`</ph>場合<ph id="ph3">`Expression`</ph>は有効な日付、有効な時刻や有効な日付と時刻を表します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression represents a valid <bpt id="p2">&lt;xref uid="langword_csharp_Date" name="Date" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値が有効な式を表すかどうかを示す<bpt id="p2">&lt;xref uid="langword_csharp_Date" name="Date" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression evaluates to the <bpt id="p2">&lt;xref href="System.DBNull"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に式を評価するかどうかを示す値、 <bpt id="p2">&lt;xref href="System.DBNull"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsDBNull`</ph> returns <ph id="ph2">`True`</ph> if the data type of <ph id="ph3">`Expression`</ph> evaluates to the &lt;xref:System.DBNull&gt; type; otherwise, <ph id="ph4">`IsDBNull`</ph> returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsDBNull`</ph>返します<ph id="ph2">`True`</ph>データ型の場合<ph id="ph3">`Expression`</ph>と評価される、&lt;xref:System.DBNull&gt;入力ですそれ以外の場合、<ph id="ph4">`IsDBNull`</ph>を返します<ph id="ph5">`False`</ph>。&lt;/xref:System.DBNull&gt; 。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.DBNull?displayProperty=fullName&gt; value indicates that the <ph id="ph1">`Object`</ph> represents missing or nonexistent data.</source>
          <target state="translated">&lt;xref:System.DBNull?displayProperty=fullName&gt;値が示す、<ph id="ph1">`Object`</ph>または存在しないデータを表します&lt;/xref:System.DBNull?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DBNull`</ph> is not the same as <ph id="ph2">`Nothing`</ph>, which indicates that a variable has not yet been initialized.</source>
          <target state="translated"><ph id="ph1">`DBNull`</ph>同じではない<ph id="ph2">`Nothing`</ph>変数がまだ初期化されてことを示します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DBNull`</ph> is also not the same as a zero-length string (<ph id="ph2">`""`</ph>), which is sometimes referred to as a null string.</source>
          <target state="translated"><ph id="ph1">`DBNull`</ph>またと同じ長さ&amp;0; の文字列 (<ph id="ph2">`""`</ph>)、null 文字列と呼ばします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression evaluates to the <bpt id="p2">&lt;xref href="System.DBNull"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に式を評価するかどうかを示す値、 <bpt id="p2">&lt;xref href="System.DBNull"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression is an exception type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式は、例外の種類であるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsError`</ph> returns <ph id="ph2">`True`</ph> if the expression represents an <ph id="ph3">`Object`</ph> variable that derives from the &lt;xref:System.Exception&gt; class in the &lt;xref:System&gt; namespace.</source>
          <target state="translated"><ph id="ph1">`IsError`</ph>返します<ph id="ph2">`True`</ph>式を表す場合、<ph id="ph3">`Object`</ph>から派生した変数、&lt;xref:System.Exception&gt;クラス内で、&lt;xref:System&gt;名前空間&lt;/xref:System&gt;&lt;/xref:System.Exception&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An exception that derives from &lt;xref:System.Exception?displayProperty=fullName&gt; can be caught with the <ph id="ph1">`Try...Catch...Finally`</ph> statements.</source>
          <target state="translated">派生した例外&lt;xref:System.Exception?displayProperty=fullName&gt;でキャッチできます、<ph id="ph1">`Try...Catch...Finally`</ph>ステートメント&lt;/xref:System.Exception?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression is an exception type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式は、例外の種類であるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression has no object assigned to it.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式に割り当てられたオブジェクトがないかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNothing`</ph> returns <ph id="ph2">`True`</ph> if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNothing`</ph>返します<ph id="ph2">`True`</ph>返すかどうか、式を現在持たないオブジェクトに割り当てられた; それ以外の場合、オブジェクト変数を表す、<ph id="ph3">`False`</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNothing`</ph> is intended to work on reference types.</source>
          <target state="translated"><ph id="ph1">`IsNothing`</ph>参照型で動作するものです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A value type cannot hold a value of  and reverts to its default value if you assign <ph id="ph1">`Nothing`</ph> to it.</source>
          <target state="translated">値型の値を保持することはできず、割り当てる場合は、既定値に戻ります<ph id="ph1">`Nothing`</ph>にします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you supply a value type in <ph id="ph1">`Expression`</ph>, <ph id="ph2">`IsNothing`</ph> always returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated">値の型を指定する場合<ph id="ph1">`Expression`</ph>、<ph id="ph2">`IsNothing`</ph>は常に返します<ph id="ph3">`False`</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression has no object assigned to it.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式に割り当てられたオブジェクトがないかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression can be evaluated as a number.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式を数値として評価できるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`True`</ph> if the data type of <ph id="ph3">`Expression`</ph> is <ph id="ph4">`Boolean`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Double`</ph>, <ph id="ph8">`Integer`</ph>, <ph id="ph9">`Long`</ph>, <ph id="ph10">`SByte`</ph>, <ph id="ph11">`Short`</ph>, <ph id="ph12">`Single`</ph>, <ph id="ph13">`UInteger`</ph>, <ph id="ph14">`ULong`</ph>, or <ph id="ph15">`UShort`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph>returns <ph id="ph2">`True`</ph> if the data type of <ph id="ph3">`Expression`</ph> is <ph id="ph4">`Boolean`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Double`</ph>, <ph id="ph8">`Integer`</ph>, <ph id="ph9">`Long`</ph>, <ph id="ph10">`SByte`</ph>, <ph id="ph11">`Short`</ph>, <ph id="ph12">`Single`</ph>, <ph id="ph13">`UInteger`</ph>, <ph id="ph14">`ULong`</ph>, or <ph id="ph15">`UShort`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It also returns <ph id="ph1">`True`</ph> if <ph id="ph2">`Expression`</ph> is a <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, or <ph id="ph5">`Object`</ph> that can be successfully converted to a number.</source>
          <target state="translated">返します<ph id="ph1">`True`</ph>場合<ph id="ph2">`Expression`</ph>は、 <ph id="ph3">`Char`</ph>、 <ph id="ph4">`String`</ph>、または<ph id="ph5">`Object`</ph>数値に正常に変換します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Expression`</ph> can contain non-numeric characters.</source>
          <target state="translated"><ph id="ph1">`Expression`</ph>数字以外の文字を含めることができます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> is a string that contains a valid hexadecimal or octal number.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph>返します<ph id="ph2">`True`</ph>場合<ph id="ph3">`Expression`</ph>は有効な&amp;16; 進数または&amp;8; 進数の数値を表す文字列。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNumeric`</ph> also returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> contains a valid numeric expression that begins with a + or - character or contains commas.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph>返されます<ph id="ph2">`True`</ph>場合<ph id="ph3">`Expression`</ph>で始まる有効な数値式が含まれています、+ または - の文字します。 またはコンマが含まれています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`False`</ph> if <ph id="ph3">`Expression`</ph> is of data type <ph id="ph4">`Date`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph>返します<ph id="ph2">`False`</ph>場合<ph id="ph3">`Expression`</ph>のデータ型は<ph id="ph4">`Date`</ph>します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`False`</ph> if <ph id="ph2">`Expression`</ph> is a <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, or <ph id="ph5">`Object`</ph> that cannot be successfully converted to a number.</source>
          <target state="translated">返します<ph id="ph1">`False`</ph>場合<ph id="ph2">`Expression`</ph>は、 <ph id="ph3">`Char`</ph>、 <ph id="ph4">`String`</ph>、または<ph id="ph5">`Object`</ph>番号に正常に変換できません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression can be evaluated as a number.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式を数値として評価できるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression evaluates to a reference type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式が参照型に評価するかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsReference`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> represents a reference type, such as a class instance, a <ph id="ph4">`String`</ph> type, or an array of any type; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsReference`</ph>返します<ph id="ph2">`True`</ph>場合<ph id="ph3">`Expression`</ph>クラスのインスタンスなどの参照型を表す、<ph id="ph4">`String`</ph>型、または任意の型の配列を返しますそれ以外の場合、<ph id="ph5">`False`</ph>です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A reference type contains a pointer to data stored elsewhere in memory.</source>
          <target state="translated">参照型には、メモリ内の他の場所で格納されているデータへのポインターが含まれています。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A value type contains its own data.</source>
          <target state="translated">値の型には、独自のデータが含まれています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating whether an expression evaluates to a reference type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>式が参照型に評価するかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the lowest available subscript for the indicated dimension of an array.</source>
          <target state="translated">指定された配列の次元の使用できる添字の最小値を返します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</source>
          <target state="translated">配列の添字は 0 から始まる、ためすべてのディメンションの使用できる添字の最小値は常に 0 です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For an array with the following dimensions, <ph id="ph1">`LBound`</ph> returns the values in the following table:      <ph id="ph2">```vb#   Dim a(100, 5, 4) As Byte   ```</ph>      |Call to LBound|Return value|   |--------------------|------------------|   |<ph id="ph3">`LBound(a, 1)`</ph>|0|   |<ph id="ph4">`LBound(a, 2)`</ph>|0|   |<ph id="ph5">`LBound(a, 3)`</ph>|0|</source>
          <target state="translated">次の次元の配列の<ph id="ph1">`LBound`</ph>次の表に、値を返します: <ph id="ph2">```vb#   Dim a(100, 5, 4) As Byte   ```</ph> |LBound への呼び出し |戻り値 |  |--------------------|------------------|  |<ph id="ph3">`LBound(a, 1)`</ph>|0|  |<ph id="ph4">`LBound(a, 2)`</ph>|0|  |<ph id="ph5">`LBound(a, 3)`</ph>|0|</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Array of any data type.</source>
          <target state="translated">任意のデータ型の配列です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The array in which you want to find the lowest possible subscript of a dimension.</source>
          <target state="translated">ディメンションの最も小さいインデックスを検索する配列。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">任意。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The dimension for which the lowest possible subscript is to be returned.</source>
          <target state="translated">最も小さいインデックスが返される次元です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Use 1 for the first dimension, 2 for the second, and so on.</source>
          <target state="translated">最初の次元、2 番目、2 1 を使用し、します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Rank`</ph> is omitted, 1 is assumed.</source>
          <target state="translated">場合<ph id="ph1">`Rank`</ph>は省略すると、1 と見なされます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The lowest value the subscript for the specified dimension can contain.</source>
          <target state="translated">最小値、指定されたディメンションの下付き文字を含めることができます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_LBound" name="LBound" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> always returns 0 as long as <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">Array</ph><ept id="p2">&lt;/code&gt;</ept> has been initialized, even if it has no elements, for example if it is a zero-length string.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_LBound" name="LBound" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>常に同じくらい 0 を返します<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">Array</ph> <ept id="p2">&lt;/code&gt;</ept>が初期化されて、たとえば、長さ 0 の文字列である場合、要素が存在しない場合でもです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Array</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_LBound" name="LBound" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> throws an &lt;xref:System.ArgumentNullException&gt;.</source>
          <target state="translated">If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Array</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_LBound" name="LBound" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> throws an &lt;xref:System.ArgumentNullException&gt;.&lt;/xref:System.ArgumentNullException&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Rank&lt;/code&gt;</ph> less than 1, or <ph id="ph2">&lt;code&gt;Rank&lt;/code&gt;</ph> is greater than the rank of <ph id="ph3">&lt;code&gt;Array&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Rank&lt;/code&gt;</ph>1 より小さい、または<ph id="ph2">&lt;code&gt;Rank&lt;/code&gt;</ph>のランクより大きい<ph id="ph3">&lt;code&gt;Array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the RGB color code corresponding to the specified color number.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>色を指定された対応する RGB 色コードを表す値の数。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</source>
          <target state="translated">以降、最下位バイトでは、返される値は、Visual Basic 言語で使用する RGB システムで適切な色を設定するために使用する赤、緑、および青の値を指定します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Color`</ph> argument has these settings.</source>
          <target state="translated"><ph id="ph1">`Color`</ph>引数がこれらの設定。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>|Number|Color|Number|Color|   |------------|-----------|------------|-----------|   |0|Black|8|Gray|   |1|Blue|9|Light blue|   |2|Green|10|Light green|   |3|Cyan|11|Light cyan|   |4|Red|12|Light red|   |5|Magenta|13|Light magenta|   |6|Yellow|14|Light yellow|   |7|White|15|Bright white|</source>
          <target state="translated">|番号 |色 |番号 |色 |  |------------|-----------|------------|-----------|  |&amp;0; |黒 |&amp;8; |灰色 |  |&amp;1; |青い |&amp;9; |薄い青 |  |&amp;2; |緑 |&amp;10; |明るい緑 |  |&amp;3; |シアン |&amp;11; |明るいシアン |  |&amp;4; |赤 |&amp;12; |赤のライト |  |&amp;5; |マゼンタ |&amp;13; |ライト マゼンタ |  |&amp;6; |黄色い |&amp;14; |薄い黄色 |  |&amp;7; |ホワイト |&amp;15; |明るいホワイト |</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A whole number in the range 0–15.</source>
          <target state="translated">0 ~ 15 の範囲の整数値。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing the RGB color code corresponding to the specified color number.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>色を指定された対応する RGB 色コードを表す値の数。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Color&lt;/code&gt;</ph> is outside of range 0 to 15, inclusive.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Color&lt;/code&gt;</ph>0 ~ 15 の包括的な範囲外です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing an RGB color value from a set of red, green and blue color components.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>赤、緑、青の色要素のセットから色の RGB 値を表す値です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</source>
          <target state="translated">色の指定をそのまま使用するアプリケーションのメソッドとプロパティは、RGB を表す数値を指定してカラー値を期待します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</source>
          <target state="translated">色の RGB 値は、赤、緑、および表示される具体的な色が青の相対強度を指定します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If the value for any argument to <ph id="ph1">`RGB`</ph> is greater than 255, 255 is used.</source>
          <target state="translated">場合に渡す引数の値<ph id="ph1">`RGB`</ph>255 より大きい 255 を使用します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following table lists some standard colors and the red, green, and blue values they include.</source>
          <target state="translated">次の表には、一部の標準的な色と含まれる赤、緑、および青の値が一覧表示します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>|Color|Red value|Green value|Blue value|   |-----------|---------------|-----------------|----------------|   |Black|0|0|0|   |Blue|0|0|255|   |Green|0|255|0|   |Cyan|0|255|255|   |Red|255|0|0|   |Magenta|255|0|255|   |Yellow|255|255|0|   |White|255|255|255|</source>
          <target state="translated">|色 |赤の値 |緑の値 |青の値 |  |-----------|---------------|-----------------|----------------|  |黒 |&amp;0; |&amp;0; |&amp;0; |  |青い |&amp;0; |&amp;0; |&amp;255; |  |緑 |&amp;0; |&amp;255; |&amp;0; |  |シアン |&amp;0; |&amp;255; |&amp;255; |  |赤 |&amp;255; |&amp;0; |&amp;0; |  |マゼンタ |&amp;255; |&amp;0; |&amp;255; |  |黄色い |&amp;255; |&amp;255; |&amp;0; |  |ホワイト |&amp;255; |&amp;255; |&amp;255; |</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>0 ~ 255 の範囲内では、色の赤の成分の濃度を表すです。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>0 ~ 255 の範囲内では、色の緑の成分の濃度を表すです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>0 ~ 255 の範囲内では、色の青の成分の濃度を表すです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value representing an RGB color value from a set of red, green and blue color components.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>赤、緑、青の色要素のセットから色の RGB 値を表す値です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Green&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;Blue&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;Red&lt;/code&gt;</ph> is outside of range 0 to 255, inclusive.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Green&lt;/code&gt;</ph>、 <ph id="ph2">&lt;code&gt;Blue&lt;/code&gt;</ph>、または<ph id="ph3">&lt;code&gt;Red&lt;/code&gt;</ph>は 0 ~ 255 の範囲外です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the system data type name of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>システム データ型名を含む変数の値。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SystemTypeName`</ph> returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</source>
          <target state="translated"><ph id="ph1">`SystemTypeName`</ph>完全修飾共通言語ランタイム (CLR) 型に対応する名前、Visual Basic の型名を返します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`VbName`</ph> contains "Date", <ph id="ph2">`SystemTypeName`</ph> returns "System.DateTime".</source>
          <target state="translated">たとえば場合、 <ph id="ph1">`VbName`</ph> 「日」を含む<ph id="ph2">`SystemTypeName`</ph>"System.DateTime"を返します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`SystemTypeName`</ph> does not recognize the value of <ph id="ph2">`VbName`</ph>, it returns <ph id="ph3">`Nothing`</ph> (not the string "Nothing").</source>
          <target state="translated">場合<ph id="ph1">`SystemTypeName`</ph>の値を認識しない<ph id="ph2">`VbName`</ph>、返します<ph id="ph3">`Nothing`</ph>(文字列ではなく"Nothing") です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> variable containing a Visual Basic type name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual Basic の型名を含む変数。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the system data type name of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>システム データ型名を含む変数の値。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing data-type information about a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数に関するデータ型情報を含む値です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following table shows the <ph id="ph1">`String`</ph> values returned by <ph id="ph2">`TypeName`</ph> for different contents of <ph id="ph3">`VarName`</ph>.</source>
          <target state="translated">次の表に、<ph id="ph1">`String`</ph>によって返される値<ph id="ph2">`TypeName`</ph>のさまざまな内容<ph id="ph3">`VarName`</ph>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>|<ph id="ph1">`VarName`</ph> contents|String returned|   |------------------------|---------------------|   |16-bit <ph id="ph2">`True`</ph> or <ph id="ph3">`False`</ph> value type|"Boolean"|   |8-bit binary value type|"Byte"|   |16-bit character value type|"Char"|   |64-bit date and time value type|"Date"|   |Reference type indicating missing or nonexistent data|"DBNull"|   |128-bit fixed-point numeric value type|"Decimal"|   |64-bit floating-point numeric value type|"Double"|   |32-bit integer value type|"Integer"|   |Reference type pointing to an unspecialized object|"Object"|   |Reference type pointing to a specialized object created from class <bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept>|"<bpt id="p2">*</bpt>objectclass<ept id="p2">*</ept>"|   |64-bit integer value type|"Long"|   |Reference type with no object currently assigned to it|"Nothing"|   |8-bit signed integer value type|"SByte"|   |16-bit integer value type|"Short"|   |32-bit floating-point numeric value type|"Single"|   |Reference type pointing to a string of 16-bit characters|"String"|   |32-bit unsigned integer value type|"UInteger"|   |64-bit unsigned integer value type|"ULong"|   |16-bit unsigned integer value type|"UShort"|       If <ph id="ph4">`VarName`</ph> is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</source>
          <target state="translated">|<ph id="ph1">`VarName`</ph>内容 |返される文字列 |  |------------------------|---------------------|  | 16 ビット<ph id="ph2">`True`</ph>または<ph id="ph3">`False`</ph>値の型 |"ブール値"|  | 8 ビットのバイナリ値の型 |"バイト"|  | 16 ビット文字値の型 |"文字"|  | 64 ビットの日付と時刻の値の型 |"日付"|  |参照型または存在しないデータを示す |"DBNull"|  | 128 ビットの固定小数点数値型 |"10 進数"|  | 64 ビット浮動小数点数値型 |"二重"|  | 32 ビット整数値の型 |"整数"|  |特殊化されていないオブジェクトを指す型を参照 |"オブジェクト"|  |参照型のクラスから作成された特殊なオブジェクトを指す<bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept>|"<bpt id="p2">*</bpt>objectclass<ept id="p2">*</ept>"|  | 64 ビット整数値の型 |"長い"|  |オブジェクトが現在割り当てられていない型を参照 |"何も"|  | 8 ビット符号付き整数値の型 |"SByte"|  | 16 ビット整数値の型 |"短い"|  | 32 ビット浮動小数点数値型 |"1 つ"|  |16 ビット文字の文字列を指す型を参照 |"文字列"|  | 32 ビット符号なし整数値の型 |"UInteger"|  | 64 ビット符号なし整数値の型 |"ULong"|  | 16 ビット符号なし整数値の型 |"UShort"|      場合<ph id="ph4">`VarName`</ph>配列は、返される文字列は空のかっこの前の表に、文字列のいずれかを指定できます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`VarName`</ph> points to an array of integers, <ph id="ph2">`TypeName`</ph> returns "Integer()".</source>
          <target state="translated">たとえば場合、 <ph id="ph1">`VarName`</ph> 、整数の配列を指す<ph id="ph2">`TypeName`</ph>"Integer()"を返します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`TypeName`</ph> returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</source>
          <target state="translated">ときに<ph id="ph1">`TypeName`</ph>参照型の名前を返します、クラスなどのみ名前自体は、修飾名ではなくを返します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`VarName`</ph> points to an object of class &lt;xref:System.Drawing.Printing.PaperSource?displayProperty=fullName&gt;, <ph id="ph2">`TypeName`</ph> returns "PaperSource".</source>
          <target state="translated">たとえば場合、<ph id="ph1">`VarName`</ph>クラスのオブジェクトを指す&lt;xref:System.Drawing.Printing.PaperSource?displayProperty=fullName&gt;、 <ph id="ph2">`TypeName`</ph> "PaperSource"を返します&lt;/xref:System.Drawing.Printing.PaperSource?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, <ph id="ph1">`TypeName`</ph> returns "Nothing".</source>
          <target state="translated">場合は、変数が特定のクラス型に宣言されている必要はありませんに割り当てられたオブジェクト<ph id="ph1">`TypeName`</ph>"Nothing"を返します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> variable.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変数。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_Option Strict" name="Option Strict" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_Off" name="Off" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, you can pass a variable of any data type except a structure.</source>
          <target state="translated">場合<bpt id="p1">&lt;xref uid="langword_csharp_Option Strict" name="Option Strict" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_Off" name="Off" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、構造体を除く任意のデータ型の変数を渡すことができます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing data-type information about a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数に関するデータ型情報を含む値です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns the highest available subscript for the indicated dimension of an array.</source>
          <target state="translated">指定された配列の次元の最も大きいインデックスを返します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Array of any data type.</source>
          <target state="translated">任意のデータ型の配列です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The array in which you want to find the highest possible subscript of a dimension.</source>
          <target state="translated">ディメンションの最も大きいインデックスを検索する配列。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">任意。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dimension for which the highest possible subscript is to be returned.</source>
          <target state="translated">最も大きいインデックスが返される次元です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Use 1 for the first dimension, 2 for the second, and so on.</source>
          <target state="translated">最初の次元、2 番目、2 1 を使用し、します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Rank`</ph> is omitted, 1 is assumed.</source>
          <target state="translated">場合<ph id="ph1">`Rank`</ph>は省略すると、1 と見なされます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The highest value the subscript for the specified dimension can contain.</source>
          <target state="translated">最も大きい値で指定した次元の下付き文字を含めることができます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Array</ph><ept id="p1">&lt;/code&gt;</ept> has only one element, <bpt id="p2">&lt;xref uid="langword_csharp_UBound" name="UBound" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> returns 0.</source>
          <target state="translated">場合<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">Array</ph> <ept id="p1">&lt;/code&gt;</ept> 1 つだけの要素を持つ<bpt id="p2">&lt;xref uid="langword_csharp_UBound" name="UBound" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 0 を返します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Array</ph><ept id="p1">&lt;/code&gt;</ept> has no elements, for example if it is a zero-length string, <bpt id="p2">&lt;xref uid="langword_csharp_UBound" name="UBound" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> returns -1.</source>
          <target state="translated">場合<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">Array</ph> <ept id="p1">&lt;/code&gt;</ept>長さ&amp;0; の文字列である場合の例については、要素が存在しない<bpt id="p2">&lt;xref uid="langword_csharp_UBound" name="UBound" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> -1 を返します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Rank&lt;/code&gt;</ph> is less than 1, or <ph id="ph2">&lt;code&gt;Rank&lt;/code&gt;</ph> is greater than the rank of <ph id="ph3">&lt;code&gt;Array&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;Rank&lt;/code&gt;</ph>1 より小さい、または<ph id="ph2">&lt;code&gt;Rank&lt;/code&gt;</ph>のランクより大きい<ph id="ph3">&lt;code&gt;Array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the data type classification of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数のデータ型の分類を含む値です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The integer value returned by <ph id="ph1">`VarType`</ph> is a member of the &lt;xref:Microsoft.VisualBasic.VariantType&gt;.</source>
          <target state="translated">によって返された整数値<ph id="ph1">`VarType`</ph> &lt;xref:Microsoft.VisualBasic.VariantType&gt;.&lt;/xref:Microsoft.VisualBasic.VariantType&gt;のメンバーであります。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The following table shows the values returned by <ph id="ph1">`VarType`</ph> for special cases of <ph id="ph2">`VarName`</ph>.</source>
          <target state="translated">によって返される値を次の表に示します<ph id="ph1">`VarType`</ph>の特殊なケースの<ph id="ph2">`VarName`</ph>します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>|Data type represented by <ph id="ph1">`VarName`</ph>|Value returned by <ph id="ph2">`VarType`</ph>|   |----------------------------------------|---------------------------------|   |<bpt id="p1">[</bpt>Nothing<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph3">|</ph><ph id="ph4">`VariantType.Object`</ph>|   |&lt;xref:System.DBNull&gt;|<ph id="ph5">`VariantType.Null`</ph>|   |Enumeration|Underlying data type (<ph id="ph6">`SByte`</ph>, <ph id="ph7">`Byte`</ph>, <ph id="ph8">`Short`</ph>, <ph id="ph9">`UShort`</ph>, <ph id="ph10">`Integer`</ph>, <ph id="ph11">`UInteger`</ph>, <ph id="ph12">`Long`</ph>, or <ph id="ph13">`ULong`</ph>)|   |Array|Bitwise OR of array element type and <ph id="ph14">`VariantType.Array`</ph>|   |Array of arrays|Bitwise OR of <ph id="ph15">`VariantType.Object`</ph> and <ph id="ph16">`VariantType.Array`</ph>|   |Structure (&lt;xref:System.ValueType?displayProperty=fullName&gt;)|<ph id="ph17">`VariantType.UserDefinedType`</ph>|   |&lt;xref:System.Exception&gt;|<ph id="ph18">`VariantType.Error`</ph>|   |Unknown|<ph id="ph19">`VariantType.Object`</ph><ph id="ph20">|</ph></source>
          <target state="translated">|データ型によって表される<ph id="ph1">`VarName`</ph>|によって返される値<ph id="ph2">`VarType`</ph>|  |----------------------------------------|---------------------------------|  |<bpt id="p1">[</bpt>Nothing<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph3">|</ph><ph id="ph4">`VariantType.Object`</ph>|  |&lt;xref:System.DBNull&gt;|<ph id="ph5">`VariantType.Null`</ph>|  |列挙体 |Underlying data type (<ph id="ph6">`SByte`</ph>, <ph id="ph7">`Byte`</ph>, <ph id="ph8">`Short`</ph>, <ph id="ph9">`UShort`</ph>, <ph id="ph10">`Integer`</ph>, <ph id="ph11">`UInteger`</ph>, <ph id="ph12">`Long`</ph>, or <ph id="ph13">`ULong`</ph>)|  |配列 |配列要素の型のビットごとの OR と<ph id="ph14">`VariantType.Array`</ph>|  |配列の配列 |ビットごとの OR<ph id="ph15">`VariantType.Object`</ph>と<ph id="ph16">`VariantType.Array`</ph>|  |構造体 (&lt;xref:System.ValueType?displayProperty=fullName&gt;) |<ph id="ph17">`VariantType.UserDefinedType`</ph>|  |&lt;xref:System.Exception&gt;|<ph id="ph18">`VariantType.Error`</ph>|  |不明な |<ph id="ph19">`VariantType.Object`</ph><ph id="ph20">|</ph>&lt;/xref:System.Exception&gt;&lt;/xref:System.ValueType?displayProperty=fullName&gt;&lt;/xref:System.DBNull&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> variable.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変数。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_Option Strict" name="Option Strict" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_Off" name="Off" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, you can pass a variable of any data type except a structure.</source>
          <target state="translated">場合<bpt id="p1">&lt;xref uid="langword_csharp_Option Strict" name="Option Strict" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_Off" name="Off" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、構造体を除く任意のデータ型の変数を渡すことができます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the data type classification of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変数のデータ型の分類を含む値です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the Visual Basic data type name of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual Basic データ型名を含む変数の値。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`VbTypeName`</ph> returns the Visual Basic type name corresponding to the common language runtime type name.</source>
          <target state="translated"><ph id="ph1">`VbTypeName`</ph>共通言語ランタイムの型名に対応する Visual Basic の型名を返します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`UrtName`</ph> contains "Int32" or "System.Int32", <ph id="ph2">`VbTypeName`</ph> returns "Integer".</source>
          <target state="translated">たとえば場合、 <ph id="ph1">`UrtName`</ph> "Int32"または"System.Int32"を含む<ph id="ph2">`VbTypeName`</ph>「整数」が返されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`VbTypeName`</ph> does not recognize the value of <ph id="ph2">`UrtName`</ph>, it returns <ph id="ph3">`Nothing`</ph> (not the string "Nothing").</source>
          <target state="translated">場合<ph id="ph1">`VbTypeName`</ph>の値を認識しない<ph id="ph2">`UrtName`</ph>、返します<ph id="ph3">`Nothing`</ph>(文字列ではなく"Nothing") です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The type name in <ph id="ph1">`UrtName`</ph> can be obtained from various sources, for example from the &lt;xref:System.Reflection.MemberInfo.Name%2A&gt; property in the &lt;xref:System.Reflection.MemberInfo&gt; array of the &lt;xref:System.Type&gt; class.</source>
          <target state="translated">内の型名<ph id="ph1">`UrtName`</ph>&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;&lt;xref:System.Reflection.MemberInfo&gt;&lt;xref:System.Type&gt;クラス&lt;/xref:System.Type&gt;の配列&lt;/xref:System.Reflection.MemberInfo&gt;内のプロパティ&lt;/xref:System.Reflection.MemberInfo.Name%2A&gt;からの変更など、さまざまなソースから取得できます</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> variable containing a type name used by the common language runtime.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>共通言語ランタイムによって使用される型名を含む変数を指定します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value containing the Visual Basic data type name of a variable.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual Basic データ型名を含む変数の値。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>