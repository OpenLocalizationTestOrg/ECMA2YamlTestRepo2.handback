<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be8b7a32520721d64686d6e64f9970d0f8d4c91e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeDeclaration.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b4fde65af60237b45db9cccbed3f9dbcc6788ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d786514f2af33e30490273c0179d256f113228d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">クラス、構造体、インターフェイス、または列挙型の型宣言を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated">クラス、構造体、インターフェイス、または列挙型を宣言するコードを表すため、CodeTypeDeclaration を使用できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CodeTypeDeclaration can be used to declare a type that is nested within another type.</source>
          <target state="translated">別の型の中で入れ子になっている型を宣言する CodeTypeDeclaration を使用できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt; property specifies the base type or base types of the type being declared.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;プロパティは、基本データ型または宣言された型の基本型を指定します&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt; property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;プロパティを含む型のメンバーでは、メソッド、フィールド、プロパティ、コメント、およびその他の種類に含めることができます&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt; property indicates the &lt;xref:System.Reflection.TypeAttributes&gt; values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;プロパティを示します、&lt;xref:System.Reflection.TypeAttributes&gt;型の宣言の型の型のカテゴリを示す値&lt;/xref:System.Reflection.TypeAttributes&gt;&lt;/xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, and &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;、 &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;、 &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;、および&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;メソッドを示すかどうか、型はクラス、構造体、列挙型、またはインターフェイス型は、それぞれ&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; プログラミング言語によっては、参照型またはクラスの宣言のみをサポートします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method to test for the appropriate &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags.</source>
          <target state="translated">インターフェイス、列挙型、または値の型を宣言するためのサポートの言語固有の CodeDOM コード ジェネレーターを確認するには、呼び出し、&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;を適切なテスト メソッド&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;フラグ&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for interfaces, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for enumerations, and &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for value types such as structures.</source>
          <target state="translated">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;インターフェイスのサポートを示す&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;、列挙型のサポートを示すと&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;構造体などの値の型のサポートを指定します&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;。&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">クラスまたは構造体の実装、1 つの完全な宣言を構築または実装では、複数の宣言に分散できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt; property indicates whether the type declaration is complete or partial.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;プロパティは、型宣言が完全または部分的なかどうかを示します&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">すべてのコード ジェネレーターがため&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;フラグ&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;。&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;でメソッド&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;を呼び出すことによって、このサポートをテストする必要があります、部分的な型宣言をサポートします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified name.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定した名前のクラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The name for the new type.</source>
          <target state="translated">新しい型の名前です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the base types of the type.</source>
          <target state="translated">型の基本型を取得します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include &lt;xref:System.Object&gt; as the first item in the BaseTypes collection.</source>
          <target state="translated">基本型から継承しないが、1 つまたは複数のインターフェイスを実装しているが、Visual Basic では、クラスを生成する必要があります&lt;xref:System.Object&gt;BaseTypes コレクションの最初の項目として&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0 you do not need the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Object&gt; if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; で .NET Framework version 2.0 が必要としない、&lt;xref:System.CodeDom.CodeTypeReference&gt;用&lt;xref:System.Object&gt;既にを実装するインターフェイスが存在するかどうかと、型で参照することです&lt;/xref:System.Object&gt;&lt;/xref:System.CodeDom.CodeTypeReference&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you are implementing the &lt;xref:System.Collections.ICollection&gt; interface and add it to the collection with this statement, <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">たとえば、実装している場合、&lt;xref:System.Collections.ICollection&gt;インターフェイスし、このステートメントを使用してコレクションに追加する<ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>、前述の必要はありません<ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph>ステートメント&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code illustrates the addition of a &lt;xref:System.CodeDom.CodeTypeReference&gt; to the collection that refers to &lt;xref:System.Object&gt;.</source>
          <target state="translated">次のコード&lt;xref:System.CodeDom.CodeTypeReference&gt;を参照する&lt;xref:System.Object&gt;。&lt;/xref:System.Object&gt;コレクションへ&lt;/xref:System.CodeDom.CodeTypeReference&gt;の追加</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph>       [C#]      <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph>       The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">[Visual Basic]     <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph> [C#]<ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph>上記のコードは、該当するショートカットは、次の Visual Basic コードを生成します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>       However, the Visual Basic code actually generated is the following.</source>
          <target state="translated"><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>ただし、実際に生成された Visual Basic のコードは次です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the base types of the type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>型の基本型を示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">取得または型がクラスまたは参照型であるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a class or reference type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>型がクラスまたは参照型である場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">取得または型が列挙型であるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an enumeration; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>型が列挙体の場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">取得または型がインターフェイスであるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an interface; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>型がインターフェイスである場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">取得または型の宣言が完全または部分的なかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">1 つの完全な宣言でクラスまたは構造体の実装を構築または実装では、複数の宣言に分散できます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">実装は、通常、1 つの完全な型の宣言で提供されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this case, set the type declaration IsPartial property to <ph id="ph1">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">ここでは、型宣言 IsPartial プロパティを設定<ph id="ph1">`false`</ph>、型宣言がクラスまたは構造体の実装の詳細情報を表すことを示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">部分型の宣言では、アプリケーションの異なるモジュールでクラスまたは構造体の実装の異なる部分を構築するやすくなります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">部分型の宣言は、1 つのソース ファイルに格納されているまたは統合型の実装を形成する一緒にコンパイル最終的には、複数のソース ファイルに分散できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# 言語のクラスの部分型の宣言をサポートしているし、を通じて構造体、<ph id="ph1">`partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic のクラスの部分型の宣言をサポートしていると構造体、<ph id="ph1">`Partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">すべてのコード ジェネレーターがため&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;フラグ&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;。&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;でメソッド&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;を呼び出すことによって、このサポートをテストする必要があります、部分的な型宣言をサポートします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Partial type declarations are supported for classes and structures.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; クラスと構造体の部分型の宣言はサポートされています。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">列挙型またはインターフェイスの部分的な型宣言を指定すると、生成されたコードはコンパイラのエラーを生成します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When supplying a class or structure implementation across multiple declarations, set the IsPartial property to <ph id="ph1">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">クラスまたは構造体の実装を指定する、複数の宣言にわたってときに、IsPartial プロパティを設定<ph id="ph1">`true`</ph>最初の宣言とすべての補足的な宣言です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">最初の宣言は、型を完全に指定する必要がありますアクセス修飾子を含むシグネチャが継承された型、およびインターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">補足の宣言は、型シグネチャを再指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">コンパイラ エラーは、補足宣言で型のシグネチャを再定義する場合に通常発生します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 では、デザイナーのコードからユーザーが生成されたコードを分離するのに部分的な型を使用します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic Windows アプリケーション プロジェクトで、ユーザー コードはで修飾されていない部分クラスに配置、<ph id="ph1">`Partial`</ph>キーワード以外の場合は、デザイナーによって提供されたコードを持つ部分クラスに表示されます、<ph id="ph2">`Partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# の場合、ユーザー コードとデザイナーのコードの両方に表示で識別される部分クラス、<ph id="ph1">`partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the class or structure declaration is a partial representation of the implementation; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>クラスまたは構造体の宣言が、実装の部分的な表現の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>宣言がクラスまたは構造体の完全な実装である場合。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">取得または型は、値型 (構造体) であるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>型が値型である場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">表される型のクラス メンバーのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the class members.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス メンバーを示すオブジェクト。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt; collection is accessed for the first time.</source>
          <target state="translated">発生したときに、&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;コレクションには、最初にアクセスします&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt; collection is accessed for the first time.</source>
          <target state="translated">発生したときに、&lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;コレクションには、最初にアクセスします&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">取得または型の属性を設定します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.TypeAttributes&gt; property contains the same type of values used by &lt;xref:System.Reflection&gt; when investigating a type at run time.</source>
          <target state="translated">&lt;xref:System.Reflection.TypeAttributes&gt;プロパティには、同じによって使用される値の型が含まれています&lt;xref:System.Reflection&gt;実行時に、型を調査する場合にします。&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; 。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">これらのフラグの多くは、一部の言語の型宣言の構文に対応していません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>As a result, only the following flags are significant to &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; : &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, and &lt;xref:System.Reflection.TypeAttributes&gt;.</source>
          <target state="translated">その結果、次のフラグのみに有効&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;: &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;、 &lt;xref:System.Reflection.TypeAttributes&gt;&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; 。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some of the flags such as &lt;xref:System.Reflection.TypeAttributes&gt; overlap with the meaning of flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property of &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; that is inherited from &lt;xref:System.CodeDom.CodeTypeMember&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; &lt;xref:System.Reflection.TypeAttributes&gt; &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;xref:System.CodeDom.CodeTypeMember&gt;.&lt;/xref:System.CodeDom.CodeTypeMember&gt;から継承されている&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;プロパティ&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;のフラグの意味と重複している&lt;/xref:System.Reflection.TypeAttributes&gt;などのフラグの一部</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property is a side effect of the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; class inheriting from &lt;xref:System.CodeDom.CodeTypeMember&gt; so that classes can be nested.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;プロパティは、副作用として、&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;から継承するクラス&lt;xref:System.CodeDom.CodeTypeMember&gt;クラスが入れ子にすることができるようにします&lt;/xref:System.CodeDom.CodeTypeMember&gt;&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The flags in the TypeAttributes property should be used instead of the flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.</source>
          <target state="translated">内のフラグではなく TypeAttributes プロパティのフラグを使用する必要があります、&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;プロパティ&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The pattern for setting the visibility flags (flags containing the words <ph id="ph2">`Public`</ph> or <ph id="ph3">`Nested`</ph>) is to mask out all visibility flags using the &lt;xref:System.Reflection.TypeAttributes&gt; and then set the desired visibility flag.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 参照範囲フラグを設定するためのパターン (単語を含むフラグ<ph id="ph2">`Public`</ph>または<ph id="ph3">`Nested`</ph>) には、すべての可視性をマスク フラグを使用して、&lt;xref:System.Reflection.TypeAttributes&gt;し、目的の参照範囲フラグを設定します&lt;/xref:System.Reflection.TypeAttributes&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the C# code statement to identify the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; (named <ph id="ph1">`cd`</ph>) as an internal class is <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">たとえば、c# コード ステートメントを識別する、 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;(という名前<ph id="ph1">`cd`</ph>) は、内部クラスとして<ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Visual Basic では、同じ値を設定するコードは<ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting the TypeAttributes property directly to a visibility flag (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">参照範囲フラグに直接 TypeAttributes プロパティを設定 (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) 設定されているその他のすべてのフラグが消去されます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.TypeAttributes&gt; object that indicates the attributes of the type.</source>
          <target state="translated">A&lt;xref:System.Reflection.TypeAttributes&gt;型の属性を示すオブジェクト&lt;/xref:System.Reflection.TypeAttributes&gt;。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">型宣言の型パラメーターを取得します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">ジェネリック型宣言を&amp;1; つまたは型パラメーターと呼ばれる型指定されていません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">型パラメーター名は、ジェネリック宣言の本体の種類を表します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, the generic declaration for the &lt;xref:System.Collections.Generic.List%601&gt; class contains the type parameter <ph id="ph1">`T`</ph>.</source>
          <target state="translated">ジェネリック宣言など、&lt;xref:System.Collections.Generic.List%601&gt;クラスには、型パラメーターが含まれています<ph id="ph1">`T`</ph>。&lt;/xref:System.Collections.Generic.List%601&gt; 。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">ジェネリックの詳細については、次を参照してください。 <bpt id="p1">[</bpt>、.NET Framework クラス ライブラリのジェネリック<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the type parameters for the type declaration.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>型の宣言の型パラメーターを格納しています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>