<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1a7d106a3f902a72b6d1d818912e92fca1c37ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.VisualBasic.VBMath.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">134e09d74e900ffe82427fe2d429124f10377ee1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac9b0d701fe6c54621572faea4833122b7c577ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_VbMath" name="VbMath" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> module contains procedures used to perform mathematical operations.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_VbMath" name="VbMath" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>モジュールには、算術演算の実行に使用されるプロシージャが含まれています。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This module supports the Visual Basic language keywords and run-time library members for generating random numbers.</source>
          <target state="translated">このモジュールは、乱数を生成するため、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーをサポートします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes the random-number generator.</source>
          <target state="translated">乱数ジェネレーターを初期化します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This overload of the <ph id="ph1">`Randomize`</ph> method does not take a seed value.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">`Randomize`</ph>メソッドは、シード値を取りません。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instead, the value returned by the system timer is used as the new seed value.</source>
          <target state="translated">代わりに、システム タイマーによって返される値は新しいシード値として使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Randomize`</ph> is not used, the <ph id="ph2">`Rnd`</ph> function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.</source>
          <target state="translated">場合<ph id="ph1">`Randomize`</ph>を使用していない、<ph id="ph2">`Rnd`</ph>関数 (引数なしで) 同じ数がシードとして使用、初めてこれが呼び出され、それ以降シード値と最後に生成された番号を使用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To repeat sequences of random numbers, call <ph id="ph2">`Rnd`</ph> with a negative argument immediately before using <ph id="ph3">`Randomize`</ph> with a numeric argument.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ランダムな数のシーケンスを繰り返すを呼び出す<ph id="ph2">`Rnd`</ph>を使用する前に、すぐに負の値の引数を持つ<ph id="ph3">`Randomize`</ph>数値の引数。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Because the <ph id="ph2">`Random`</ph> statement and the <ph id="ph3">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ため、<ph id="ph2">`Random`</ph>ステートメントおよび<ph id="ph3">`Rnd`</ph>関数の先頭にシード値は、有限の範囲内で番号を生成、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
          <target state="translated">その結果、<ph id="ph1">`Random`</ph>ステートメントおよび<ph id="ph2">`Rnd`</ph>関数は暗号化に使用する乱数生成に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;。&lt;/xref:System.Security.Cryptography.RandomNumberGenerator&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes the random-number generator.</source>
          <target state="translated">乱数ジェネレーターを初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Randomize`</ph> uses <ph id="ph2">`Number`</ph> to initialize the <ph id="ph3">`Rnd`</ph> function's random-number generator, giving it a new seed value.</source>
          <target state="translated"><ph id="ph1">`Randomize`</ph>使用して<ph id="ph2">`Number`</ph>初期化するために、<ph id="ph3">`Rnd`</ph>関数の乱数ジェネレーターは、新しいシード値を指定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you omit <ph id="ph1">`Number`</ph>, the value returned by the system timer is used as the new seed value.</source>
          <target state="translated">省略した場合<ph id="ph1">`Number`</ph>、システム タイマーによって返される値は、新しいシード値として使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Randomize`</ph> is not used, the <ph id="ph2">`Rnd`</ph> function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.</source>
          <target state="translated">場合<ph id="ph1">`Randomize`</ph>を使用していない、<ph id="ph2">`Rnd`</ph>関数 (引数なしで) 同じ数がシードとして使用、初めてこれが呼び出され、それ以降シード値と最後に生成された番号を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To repeat sequences of random numbers, call <ph id="ph2">`Rnd`</ph> with a negative argument immediately before using <ph id="ph3">`Randomize`</ph> with a numeric argument.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ランダムな数のシーケンスを繰り返すを呼び出す<ph id="ph2">`Rnd`</ph>を使用する前に、すぐに負の値の引数を持つ<ph id="ph3">`Randomize`</ph>数値の引数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Randomize`</ph> with the same value for <ph id="ph2">`Number`</ph> does not repeat the previous sequence.</source>
          <target state="translated">使用して<ph id="ph1">`Randomize`</ph>の値が同じ<ph id="ph2">`Number`</ph>以前のシーケンスを繰り返しません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Because the <ph id="ph2">`Random`</ph> statement and the <ph id="ph3">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ため、<ph id="ph2">`Random`</ph>ステートメントおよび<ph id="ph3">`Rnd`</ph>関数の先頭にシード値は、有限の範囲内で番号を生成、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
          <target state="translated">その結果、<ph id="ph1">`Random`</ph>ステートメントおよび<ph id="ph2">`Rnd`</ph>関数は暗号化に使用する乱数生成に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;。&lt;/xref:System.Security.Cryptography.RandomNumberGenerator&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">任意。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or any valid numeric expression.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>または有効な数値式です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a random number of type <bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">型の乱数を返します<bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Rnd`</ph> function returns a value less than 1, but greater than or equal to zero.</source>
          <target state="translated"><ph id="ph1">`Rnd`</ph>未満である 1 より大きいまたは 0 に等しい値が返されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before calling <ph id="ph1">`Rnd`</ph>, use the <ph id="ph2">`Randomize`</ph> statement without an argument to initialize the random-number generator with a seed based on the system timer.</source>
          <target state="translated">呼び出しの前に<ph id="ph1">`Rnd`</ph>を使用して、<ph id="ph2">`Randomize`</ph>システム タイマーに基づいて、乱数ジェネレーターでシードを初期化するために引数を指定しないでステートメントです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To produce random integers in a given range, use the following formula.</source>
          <target state="translated">特定の範囲内の整数の乱数を生成するには、次の数式を使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath#30<ept id="p2">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._94_1.vb)</ept><ept id="p1">]</ept>       Here, <ph id="ph1">`upperbound`</ph> is the highest number in the range, and <ph id="ph2">`lowerbound`</ph> is the lowest number in the range.</source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath&amp;#30;<ept id="p2">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._94_1.vb)</ept> <ept id="p1">]</ept>ここでは、 <ph id="ph1">`upperbound`</ph> 、範囲内の最大値と<ph id="ph2">`lowerbound`</ph>範囲の最小数です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To repeat sequences of random numbers, call <ph id="ph2">`Rnd`</ph> with a negative argument immediately before using <ph id="ph3">`Randomize`</ph> with a numeric argument.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ランダムな数のシーケンスを繰り返すを呼び出す<ph id="ph2">`Rnd`</ph>を使用する前に、すぐに負の値の引数を持つ<ph id="ph3">`Randomize`</ph>数値の引数。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Because the <ph id="ph2">`Random`</ph> statement and the <ph id="ph3">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ため、<ph id="ph2">`Random`</ph>ステートメントおよび<ph id="ph3">`Rnd`</ph>関数の先頭にシード値は、有限の範囲内で番号を生成、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
          <target state="translated">その結果、<ph id="ph1">`Random`</ph>ステートメントおよび<ph id="ph2">`Rnd`</ph>関数は暗号化に使用する乱数生成に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The next random number in the sequence.</source>
          <target state="translated">[次へ] ランダムな数のシーケンス。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns a random number of type <bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">型の乱数を返します<bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Rnd`</ph> function returns a value less than 1, but greater than or equal to zero.</source>
          <target state="translated"><ph id="ph1">`Rnd`</ph>未満である 1 より大きいまたは 0 に等しい値が返されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`Number`</ph> determines how <ph id="ph2">`Rnd`</ph> generates a random number.</source>
          <target state="translated">値<ph id="ph1">`Number`</ph>決定方法<ph id="ph2">`Rnd`</ph>乱数を生成します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For any given initial seed, the same number sequence is generated because each successive call to the <ph id="ph1">`Rnd`</ph> function uses the previously generated number as a seed for the next number in the sequence.</source>
          <target state="translated">に生成する番号のシーケンスが同じ初期シードの連続する呼び出しごとに、<ph id="ph1">`Rnd`</ph>関数は、シーケンス内の次の番号がシードとして以前に生成された番号を使用します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Before calling <ph id="ph1">`Rnd`</ph>, use the <ph id="ph2">`Randomize`</ph> statement without an argument to initialize the random-number generator with a seed based on the system timer.</source>
          <target state="translated">呼び出しの前に<ph id="ph1">`Rnd`</ph>を使用して、<ph id="ph2">`Randomize`</ph>システム タイマーに基づいて、乱数ジェネレーターでシードを初期化するために引数を指定しないでステートメントです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To produce random integers in a given range, use the following formula.</source>
          <target state="translated">特定の範囲内の整数の乱数を生成するには、次の数式を使用します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath#30<ept id="p2">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._212_1.vb)</ept><ept id="p1">]</ept>       Here, <ph id="ph1">`upperbound`</ph> is the highest number in the range, and <ph id="ph2">`lowerbound`</ph> is the lowest number in the range.</source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrMath&amp;#30;<ept id="p2">](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._212_1.vb)</ept> <ept id="p1">]</ept>ここでは、 <ph id="ph1">`upperbound`</ph> 、範囲内の最大値と<ph id="ph2">`lowerbound`</ph>範囲の最小数です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To repeat sequences of random numbers, call <ph id="ph2">`Rnd`</ph> with a negative argument immediately before using <ph id="ph3">`Randomize`</ph> with a numeric argument.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ランダムな数のシーケンスを繰り返すを呼び出す<ph id="ph2">`Rnd`</ph>を使用する前に、すぐに負の値の引数を持つ<ph id="ph3">`Randomize`</ph>数値の引数。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Randomize`</ph> with the same value for <ph id="ph2">`Number`</ph> does not repeat the previous sequence.</source>
          <target state="translated">使用して<ph id="ph1">`Randomize`</ph>の値が同じ<ph id="ph2">`Number`</ph>以前のシーケンスを繰り返しません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Because the <ph id="ph2">`Random`</ph> statement and the <ph id="ph3">`Rnd`</ph> function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ため、<ph id="ph2">`Random`</ph>ステートメントおよび<ph id="ph3">`Rnd`</ph>関数の先頭にシード値は、有限の範囲内で番号を生成、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Consequently, the <ph id="ph1">`Random`</ph> statement and the <ph id="ph2">`Rnd`</ph> function should not be used to generate random numbers for use in cryptography.</source>
          <target state="translated">その結果、<ph id="ph1">`Random`</ph>ステートメントおよび<ph id="ph2">`Rnd`</ph>関数は暗号化に使用する乱数生成に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">任意。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value or any valid <bpt id="p2">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> expression.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値も有効な<bpt id="p2">&lt;xref uid="langword_csharp_Single" name="Single" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If number is less than zero, Rnd generates the same number every time, using <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> as the seed.</source>
          <target state="translated">Rnd 生成同じ番号は&amp;0; より小さい場合、番号を使用するたびに<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">Number</ph> <ept id="p1">&lt;/code&gt;</ept>シードとして。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If number is greater than zero, Rnd generates the next random number in the sequence.</source>
          <target state="translated">数が&amp;0; より大きい場合は、Rnd は、シーケンス内の次の乱数を生成します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If number is equal to zero, Rnd generates the most recently generated number.</source>
          <target state="translated">数値が&amp;0; に等しい場合は、Rnd は最後に生成された番号を生成します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If number is not supplied, Rnd generates the next random number in the sequence.</source>
          <target state="translated">数が指定されていない場合 Rnd はシーケンスの次の乱数を生成します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>