<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95fd6000be25aa34c764b63e2170c12445c646eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlMember.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0f7a76a2d6e9aeb5019ce879b623b328d2052bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">847af931ba8799ec08203b9f9c25be6d8148e483</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
          <target state="translated">XAML の型のメンバーの XAML 型システム識別子を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) and also for general XAML type system logic.</source>
          <target state="translated">識別子がメンバー ノードの処理中に XAML リーダーと XAML ライターによって使用される (に XAML リーダーが配置されている場合、 <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>) また、一般的な XAML 型システムのロジックのです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XamlMember can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph1">`Lookup*`</ph> API that is provided by possible XamlMember subclasses.</source>
          <target state="translated">XamlMember は XAML メンバーに関する情報を返すための&amp;3; つの手法を使用できる: 共通言語ランタイム (CLR) のリフレクション標準です。呼び出す内部参照専用のリフレクション手法 Api 最適化を使用するビット フラグを設定です。上書きが仮想を呼び出すことや、<ph id="ph1">`Lookup*`</ph>考えられる XamlMember サブクラスによって提供される API。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For most uses of .NET Framework XAML Services APIs and the XamlMember API, you use the default XAML schema context.</source>
          <target state="translated">.NET Framework XAML サービス Api と XamlMember API のほとんどの用途、既定の XAML スキーマ コンテキストを使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
          <target state="translated">.NET Framework XAML サービスの既定の XAML スキーマ コンテキストでは、CLR の型システムのバックアップを使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
          <target state="translated">これにより、任意の型またはメンバーが定義されている入力、またはそれ以外の場合に使用できる、CLR および、リフレクション手法を使用するには、XAML リーダーと XAML ライター。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Lookup* APIs and XamlMember Derived Classes    XamlMember defines several virtual members that derived classes might override.</source>
          <target state="translated">参照 * Api と XamlMember 派生クラス XamlMember 定義がいくつかの派生クラスの仮想メンバーの方が優先されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
          <target state="translated">これらのメンバーは、常に、文字列で始まる名前を持つ<ph id="ph1">`Lookup`</ph>します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
          <target state="translated">API の残りの部分では、仮想メソッドに影響するプロパティ参照を名前します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, a XamlMember derived class might override &lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt; to influence what the base-defined property &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt; returns in a derived class.</source>
          <target state="translated">たとえば、XamlMember の派生クラスが&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;どのようなベースで定義されたプロパティを&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;、派生クラスを返します&lt;/xref:System.Xaml.XamlMember.TargetType%2A&gt;に影響を与える&lt;/xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;オーバーライド可能性があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can predict return values for such properties in XamlMember or existing derived classes by reading the documentation for the relevant <ph id="ph1">`Lookup*`</ph> methods.</source>
          <target state="translated">戻り値を予測するには、XamlMember または既存のでは、このようなプロパティは、関連するドキュメントを参照してクラスを派生<ph id="ph1">`Lookup*`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the XamlMember base class.</source>
          <target state="translated">目的、<ph id="ph1">`Lookup*`</ph>メソッドが XamlMember の基本クラスが組み込まれている XAML 型システムの拡張機能手法を提供することです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By deriving from XamlMember and overriding the <ph id="ph1">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
          <target state="translated">XamlMember から派生させ、オーバーライドして、<ph id="ph1">`Lookup`</ph>仮想メンバーを定義できます XAML スキーマの XAML メンバーの概念、XAML 型システムで、バッキング型システムまたはテクノロジの詳細に束縛されずになし。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
          <target state="translated">このスキームで提供されている XAML スキーマ コンテキストを使用してもと、目的の結果を返すことができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As an example, consider the XamlMember property &lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;.</source>
          <target state="translated">たとえば、XamlMember プロパティ&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;を検討してください。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This property informs callers that operations such as using a &lt;xref:System.Xaml.XamlWriter&gt; for serialization can write a value for this member on a target object.</source>
          <target state="translated">このプロパティを使用するなど、その操作を呼び出し元に通知する&lt;xref:System.Xaml.XamlWriter&gt;のシリアル化は、このメンバーの値を対象のオブジェクトで書き込むことができます&lt;/xref:System.Xaml.XamlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR &lt;xref:System.Type&gt; and its members (the &lt;xref:System.Reflection.MemberInfo&gt;).</source>
          <target state="translated">既定の実装では、メンバーが書き込み可能かどうかの決定がバッキング CLR に対するリフレクション手法を使用して行われます&lt;xref:System.Type&gt;とそのメンバー (、 &lt;xref:System.Reflection.MemberInfo&gt;).&lt;/xref:System.Reflection.MemberInfo&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
          <target state="translated">したがって、既定では、XAML 型システムによって異なります、CLR の型システム。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, you can remove this dependency for your XAML type system reporting of &lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt; by overriding the API &lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;.</source>
          <target state="translated">ただし、XAML 型システム レポート用の&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;API &lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;。&lt;/xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;をオーバーライドすることで&lt;/xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;この依存関係を削除することができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
          <target state="translated">、オーバーライド内で、テクノロジ、最適化された固定の XAML ボキャブラリやその他の方法は XAML メンバーが XAML ボキャブラリで書き込み可能かどうかを決定するためのさまざまなマスターのルックアップ テーブルに固有であるメタデータなどの他の決定を行うこともできます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Constructing XamlMember Without XAML Schema Context    Most constructors of XamlMember require a &lt;xref:System.Xaml.XamlSchemaContext&gt; as part of their initialization.</source>
          <target state="translated">XamlMember のコンス トラクター XamlMember せず XAML スキーマ コンテキスト最もを構築する必要があります、&lt;xref:System.Xaml.XamlSchemaContext&gt;初期化の一部として&lt;/xref:System.Xaml.XamlSchemaContext&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xaml.XamlSchemaContext&gt; is also necessary for many internal &lt;xref:System.Xaml.XamlSchemaContext&gt; operations, such as obtaining information that is being forwarded from the backing type.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlSchemaContext&gt;また多くの内部の必要があります&lt;xref:System.Xaml.XamlSchemaContext&gt;バッキング型から転送される情報の取得などの操作&lt;/xref:System.Xaml.XamlSchemaContext&gt;&lt;/xref:System.Xaml.XamlSchemaContext&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you are working with the XamlMember API, you typically have a &lt;xref:System.Xaml.XamlSchemaContext&gt; that is available from a surrounding construct such as a &lt;xref:System.Xaml.XamlWriter&gt;.</source>
          <target state="translated">XamlMember API を使用しているときに通常必要がある&lt;xref:System.Xaml.XamlSchemaContext&gt;&lt;xref:System.Xaml.XamlWriter&gt;。&lt;/xref:System.Xaml.XamlWriter&gt;などの周囲の構造から使用できます。&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, you can pass the &lt;xref:System.Xaml.XamlSchemaContext&gt; reference through to all XAML type system calls that require a XAML schema context.</source>
          <target state="translated">この例では、渡すことができます、 &lt;xref:System.Xaml.XamlSchemaContext&gt;XAML スキーマ コンテキストを必要とするすべての XAML 型システム呼び出しへの参照を使用します&lt;/xref:System.Xaml.XamlSchemaContext&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One specific constructor, &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;, does not require a &lt;xref:System.Xaml.XamlSchemaContext&gt;.</source>
          <target state="translated">1 つ特定のコンス トラクター、 &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; &lt;xref:System.Xaml.XamlSchemaContext&gt;。&lt;/xref:System.Xaml.XamlSchemaContext&gt;は必要ありません、&lt;/xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, a XamlMember that is constructed with the &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; signature returns <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;.</source>
          <target state="translated">ただしで構成される XamlMember、&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;署名を返します<ph id="ph1">`true`</ph> &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; 。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, such a member cannot be written into an object graph.</source>
          <target state="translated">関係する読み込みパスの&lt;xref:System.Xaml.XamlObjectWriter&gt;、このようなメンバーは、オブジェクト グラフに書き込まれることはできません&lt;/xref:System.Xaml.XamlObjectWriter&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the .NET Framework XAML services implementation, the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant XamlMember reports <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;.</source>
          <target state="translated">.NET Framework XAML サービス実装を使用して、&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;スローされます、&lt;xref:System.Xaml.XamlObjectWriterException&gt;関連 XamlMember を報告すると<ph id="ph1">`true`</ph> &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlObjectWriterException&gt; &lt;/xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should not construct a XamlMember that has a value of <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; unless your implementation can handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior.</source>
          <target state="translated">値を持つ XamlMember を構築する必要がありますいない<ph id="ph1">`true`</ph>の&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;実装からの例外を処理できる場合を除き、 &lt;xref:System.Xaml.XamlObjectWriter&gt;、その他の方法を調整することも、&lt;xref:System.Xaml.XamlObjectWriter&gt;動作&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, one or more of the  following might be true of your implementation:      -   The XAML schema context is available later.</source>
          <target state="translated">たとえば、次の&amp;1; つ以上があります、実装の場合は true。:-XAML スキーマ コンテキストが後で使用できます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-   You use a member invoker pattern.</source>
          <target state="translated">-は、メンバーの呼び出し元パターンを使用します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-   You deliberately override &lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; in a custom XAML writer.</source>
          <target state="translated">意図的にオーバーライド-&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;カスタム XAML ライターにします&lt;/xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using CLR type system &lt;xref:System.Reflection.EventInfo&gt; and a <bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの CLR 型システムを使用して&lt;xref:System.Reflection.EventInfo&gt;と<bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.EventInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
          <target state="translated">メンバーは、イベント (イベント ハンドラー接続ポイントのプロパティ) を表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.EventInfo&gt; that represents the event member.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.EventInfo&gt;イベント メンバーを表す&lt;/xref:System.Reflection.EventInfo&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using CLR type system &lt;xref:System.Reflection.PropertyInfo&gt; and a <bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの CLR 型システムを使用して&lt;xref:System.Reflection.PropertyInfo&gt;と<bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.PropertyInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
          <target state="translated">メンバー プロパティを表します (具体的には、イベント ハンドラー接続ではない) 場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property member.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.PropertyInfo&gt;プロパティ メンバーを表す&lt;/xref:System.Reflection.PropertyInfo&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using CLR type system &lt;xref:System.Reflection.EventInfo&gt; and a <bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, including <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの CLR 型システムを使用して&lt;xref:System.Reflection.EventInfo&gt;と<bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>など、 <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>情報&lt;/xref:System.Reflection.EventInfo&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
          <target state="translated">メンバーは、イベント (または、イベント ハンドラー接続ポイントのプロパティ) を表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.EventInfo&gt; that represents the event member.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.EventInfo&gt;イベント メンバーを表す&lt;/xref:System.Reflection.EventInfo&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time reflection calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対するランタイムのリフレクションを処理する実装を呼び出す、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using reflection &lt;xref:System.Reflection.PropertyInfo&gt; and a <bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, including <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>リフレクションを使用してクラス&lt;xref:System.Reflection.PropertyInfo&gt;と<bpt id="p2">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>など、 <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>情報&lt;/xref:System.Reflection.PropertyInfo&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
          <target state="translated">メンバーがプロパティを表す場合にのみ、およびイベント ハンドラー接続ではない場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property member.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.PropertyInfo&gt;プロパティ メンバーを表す&lt;/xref:System.Reflection.PropertyInfo&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time invocation calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対して実行時の呼び出しを処理する実装を呼び出す、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that represents an attachable event.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のクラス、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アタッチ可能なイベントを表すです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">メンバーは、アタッチ可能なイベント メンバーを表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The string name of the attachable event.</source>
          <target state="translated">アタッチ可能なイベントの文字列名。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the handler <bpt id="p1">&lt;xref uid="langword_csharp_Add" name="Add" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;ハンドラーの<bpt id="p1">&lt;xref uid="langword_csharp_Add" name="Add" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのメソッドの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a string name and declaring <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス文字列名を使用して、宣言する<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>情報。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is constructed with this signature has significant limitations; see Remarks.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>がこれで構築されているシグネチャに多くの制限があります。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xaml.XamlMember&gt; that is constructed with the XamlMember signature returns <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;.</source>
          <target state="translated">A&lt;xref:System.Xaml.XamlMember&gt;が XamlMember の署名を返しますで構築されている<ph id="ph1">`true`</ph> &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlMember&gt; 。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, such a member cannot be written into an object graph.</source>
          <target state="translated">関係する読み込みパスの&lt;xref:System.Xaml.XamlObjectWriter&gt;、このようなメンバーは、オブジェクト グラフに書き込まれることはできません&lt;/xref:System.Xaml.XamlObjectWriter&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using the .NET Framework XAML Services implementation, the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant &lt;xref:System.Xaml.XamlMember&gt; reports <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;.</source>
          <target state="translated">.NET Framework XAML サービス実装を使用して、&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;スローされます、&lt;xref:System.Xaml.XamlObjectWriterException&gt;ときに、関連する&lt;xref:System.Xaml.XamlMember&gt;レポート<ph id="ph1">`true`</ph>&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;です&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlObjectWriterException&gt;&lt;/xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You should not construct a &lt;xref:System.Xaml.XamlMember&gt; with &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;<ph id="ph1">`true`</ph> unless your implementation can handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior.</source>
          <target state="translated">構成しないで、&lt;xref:System.Xaml.XamlMember&gt;で&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;<ph id="ph1">`true`</ph>実装からの例外を処理できる場合を除き、 &lt;xref:System.Xaml.XamlObjectWriter&gt;、その他の方法を調整することも、&lt;xref:System.Xaml.XamlObjectWriter&gt;動作&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, one or more of the following might be true of your implementation:      -   The XAML schema context is available later.</source>
          <target state="translated">たとえば、次の&amp;1; つ以上があります、実装の場合は true。:-XAML スキーマ コンテキストが後で使用できます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-   You use a member invoker pattern.</source>
          <target state="translated">-は、メンバーの呼び出し元パターンを使用します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-   You deliberately override &lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; in a custom XAML writer.</source>
          <target state="translated">意図的にオーバーライド-&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;カスタム XAML ライターにします&lt;/xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The string name of the member.</source>
          <target state="translated">メンバーの文字列名。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the declaring type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>宣言する型について説明します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the member is attachable; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>メンバーがアタッチ可能であることを示しますそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;declaringType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;declaringType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that represents an attachable property.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のクラス、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アタッチ可能なプロパティを表すです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an attachable property.</source>
          <target state="translated">メンバーは、アタッチ可能なプロパティを表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The string name of the attachable property.</source>
          <target state="translated">アタッチ可能なプロパティの文字列名。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;の<bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのアクセサーの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;の<bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのアクセサーの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that represents an attachable event, including <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のクラス、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、アタッチ可能なイベントを表すなど<bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>情報。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">メンバーは、アタッチ可能なイベント メンバーを表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The string name of the attachable event.</source>
          <target state="translated">アタッチ可能なイベントの文字列名。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the handler <bpt id="p1">&lt;xref uid="langword_csharp_Add" name="Add" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;ハンドラーの<bpt id="p1">&lt;xref uid="langword_csharp_Add" name="Add" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのメソッドの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time invocation calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対して実行時の呼び出しを処理する実装を呼び出す、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that represents an attachable property, including <bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のクラス、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>添付可能なプロパティを表すなど<bpt id="p3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>情報。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Use this constructor if the member represents an attachable property member.</source>
          <target state="translated">メンバーは、アタッチ可能なプロパティ メンバーを表す場合は、このコンス トラクターを使用します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The string name of the attachable property.</source>
          <target state="translated">アタッチ可能なプロパティの文字列名。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;の<bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのアクセサーの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The CLR type system &lt;xref:System.Reflection.MethodInfo&gt; for the <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor of the attachable member's backing implementation.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MethodInfo&gt;の<bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーのアクセサーの実装をバックアップします&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> context that qualifies the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーを修飾するコンテキスト。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time invocation calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対して実行時の呼び出しを処理する実装を呼び出す、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the type that declares the member that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられているメンバーを宣言する型の<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">この値は、通常は初期化中に設定し、は通常ありません<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  DeclaringType information can be passed in by constructors for initialization.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; DeclaringType 情報を受け渡しできるでコンス トラクターによって初期化します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>By calling directly into base constructors, initialization for &lt;xref:System.Xaml.XamlMember&gt; derived classes can omit some of the value-checks that are made in the base class.</source>
          <target state="translated">基底コンス トラクターを直接呼び出すこと、&lt;xref:System.Xaml.XamlMember&gt;派生クラスは、一部の基本クラスに対して行われる値のチェックを省略できます&lt;/xref:System.Xaml.XamlMember&gt;の初期化</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
          <target state="translated">そのため、派生の初期化は、基になる CLR 宣言の型システム情報と予想される方法で配置されなくされるよう、XAML メンバーの報告された型のメンバー リレーションシップ情報を変更できます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
          <target state="translated">セキュリティ クリティカルなチェックの種類の情報を宣言するには、代わりに、基になる CLR 型を使用します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the type that declares the member that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられているメンバーを宣言する型の<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> XAML の遅延読み込みの際に使用されるオブジェクトがオブジェクトを宣言します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Calling DeferringLoader invokes &lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す DeferringLoader&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">この動作は、初期の内部リフレクション ロジックで、情報がまだ設定されていない場合に発生します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で<bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ジェネリックに制約します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">一覧を取得<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>These report the members where dependency relationships for initialization order exist relative to this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これらの基準としたこの初期化の順序の依存関係が存在するメンバー プロバイダー <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Calling DependsOn invokes &lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt; or a specific override of that method.</source>
          <target state="translated">DependsOn 呼び出すと、&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">この動作は、初期の内部リフレクション ロジックで、情報がまだ設定されていない場合に発生します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>パターンは、一般的な XAML 規則を意図的に矛盾するオブジェクト モデルのケースに適用することができます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
          <target state="translated">一般的な XAML 規則は、任意の順序で割り当てることが初期化のテキストとして (または、XAML 2009 のファクトリ メソッドを) は渡されない型のメンバーである必要があります。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
          <target state="translated">適用することによって、<ph id="ph1">`DependsOn`</ph>パターンがメンバーは、XAML ライターに指示することができますを常にこのメンバーの前に参照されたメンバーを処理します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
          <target state="translated">コンテキスト、またはその他の情報だけが利用できる他のメンバーを設定した後、現在のメンバーの値が必要とする状況では、このパターンを適用することができます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph>パターンを慎重に適用され、アーキテクチャの目的を機能にプロパティのシナリオ用に予約する必要があります。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
          <target state="translated">多数の依存関係には、XAML の処理速度が低下する可能性があります。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
          <target state="translated">また、可能であれば、循環依存関係を生成するために XAML 処理の動作が定義されている場合です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on &lt;xref:System.Windows.Controls.ControlTemplate&gt; and &lt;xref:System.Windows.DataTemplate&gt;, on &lt;xref:System.Windows.Trigger&gt;, and on &lt;xref:System.Windows.Setter&gt;.</source>
          <target state="translated">例<ph id="ph1">`DependsOn`</ph>WPF からシナリオで特定のプロパティを含める&lt;xref:System.Windows.Controls.ControlTemplate&gt;と&lt;xref:System.Windows.DataTemplate&gt;の&lt;xref:System.Windows.Trigger&gt;、および&lt;xref:System.Windows.Setter&gt;&lt;/xref:System.Windows.Setter&gt;&lt;/xref:System.Windows.Trigger&gt;&lt;/xref:System.Windows.DataTemplate&gt;&lt;/xref:System.Windows.Controls.ControlTemplate&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">一連の<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクトが等しい場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">obj</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーター、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">現在のオブジェクトが同じ型の別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクトが等しい場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">other</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーター、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
          <target state="translated">このオブジェクトのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
          <target state="translated">整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">この XAML メンバーが存在できる XAML 名前空間の一覧を返します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The default implementation returns the &lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName&gt; call result from the &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; that is associated with this &lt;xref:System.Xaml.XamlMember&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName&gt;&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;この&lt;xref:System.Xaml.XamlMember&gt;.&lt;/xref:System.Xaml.XamlMember&gt;に関連付けられている&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;からの結果を呼び出す&lt;/xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName&gt;既定の実装を返します</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A list of XAML namespace identifiers as strings.</source>
          <target state="translated">文字列としての XAML 名前空間の識別子の一覧。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている実装<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>パターンは高度な XAML 型システム拡張技術です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph>パターンは、.NET Framework XAML サービスの XAML 型システム定義を使用中に別のスキーマ型のマッピングの動作を挿入する方法を提供します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt; override returns <ph id="ph1">`null`</ph>, or if the default implementation returns <ph id="ph2">`null`</ph> because it lacks the &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; for this &lt;xref:System.Xaml.XamlMember&gt;, the Invoker property returns &lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">場合、&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;オーバーライド<ph id="ph1">`null`</ph>、既定の実装を返す場合、または<ph id="ph2">`null`</ph>&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;この&lt;xref:System.Xaml.XamlMember&gt;呼び出し元のプロパティを返します&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;がないため&lt;/xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; is the default.</source>
          <target state="translated">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;既定値です。&lt;/xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
          <target state="translated">これは、ほとんどの操作で .NET Framework XAML サービスおよび既定の XAML スキーマ コンテキストを使用し、固有の仕様が上書きされない場合は true。<ph id="ph1">`Invoker`</ph>パターンは XAML 型システム エンティティを構築するために渡されます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Calling Invoker invokes &lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出し元を呼び出すと&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている実装<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is reported as an ambient property.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>はアンビエント プロパティとして報告します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Calling IsAmbient invokes &lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す IsAmbient&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">この動作は、ここで初期の内部リフレクション ロジックで、情報は既に設定されていない実装で発生します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">チェックは、アンビエント プロパティには、通常、オブジェクトと型の修飾子のアンビエント使用量に依存する値が正しく動作するかどうかを確認する XAML の処理ロジックの一部です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with &lt;xref:System.Windows.Markup.AmbientAttribute&gt;.</source>
          <target state="translated">.NET Framework XAML サービス Api と既定の XAML スキーマ コンテキスト&lt;xref:System.Windows.Markup.AmbientAttribute&gt;。&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;属性に基づいてこの値を設定します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt; uses this existing &lt;xref:System.Windows.Markup.AmbientAttribute&gt; technique, and it returns <ph id="ph1">`true`</ph> if &lt;xref:System.Windows.Markup.AmbientAttribute&gt; exists on a member declaration.</source>
          <target state="translated">既定の実装&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;はこの既存&lt;xref:System.Windows.Markup.AmbientAttribute&gt;手法、およびそれを返します<ph id="ph1">`true`</ph>場合&lt;xref:System.Windows.Markup.AmbientAttribute&gt;メンバーの宣言に存在します&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;&lt;/xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Markup.AmbientAttribute&gt; is found on members of several WPF types, which include &lt;xref:System.Windows.Application&gt;, &lt;xref:System.Windows.Setter&gt;, and &lt;xref:System.Windows.Style&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;を含むいくつかの WPF 型のメンバーである&lt;xref:System.Windows.Application&gt;、 &lt;xref:System.Windows.Setter&gt;、 &lt;xref:System.Windows.Style&gt;。&lt;/xref:System.Windows.Style&gt; &lt;/xref:System.Windows.Setter&gt; &lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>It is also found on the &lt;xref:System.Windows.ResourceDictionary&gt; type, which connotes that any member that uses &lt;xref:System.Windows.ResourceDictionary&gt; as its type should be considered ambient even if the member is not specifically attributed.</source>
          <target state="translated">上でも検出される、&lt;xref:System.Windows.ResourceDictionary&gt;型で、使用する任意のメンバーを伴う&lt;xref:System.Windows.ResourceDictionary&gt;ようにその型見なすアンビエント場合でも、メンバーは、具体的には属性化されません&lt;/xref:System.Windows.ResourceDictionary&gt;&lt;/xref:System.Windows.ResourceDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is reported as an ambient property; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アンビエント プロパティとして報告された、それ以外は、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is an attachable member.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アタッチ可能なメンバーであります。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The IsAttachable value is initialized based on which constructor was used to construct a &lt;xref:System.Xaml.XamlMember&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember&gt;。&lt;/xref:System.Xaml.XamlMember&gt;を構築するためにどのコンス トラクターが使用されているに基づいて IsAttachable 値が初期化されます。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is an attachable member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アタッチ可能なメンバーには、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a XAML directive.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は XAML ディレクティブがします。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The IsDirective value is initialized based on which constructor was used to construct a &lt;xref:System.Xaml.XamlMember&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember&gt;。&lt;/xref:System.Xaml.XamlMember&gt;を構築するためにどのコンス トラクターが使用されているに基づいて IsDirective 値が初期化されます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The base &lt;xref:System.Xaml.XamlMember&gt; constructors initialize so that IsDirective is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">基本&lt;xref:System.Xaml.XamlMember&gt;コンス トラクター初期化ように IsDirective <ph id="ph1">`false`</ph>&lt;/xref:System.Xaml.XamlMember&gt; 。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>However, the &lt;xref:System.Xaml.XamlDirective&gt; class (a &lt;xref:System.Xaml.XamlMember&gt; derived class) initializes so that IsDirective is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ただし、&lt;xref:System.Xaml.XamlDirective&gt;クラス (、&lt;xref:System.Xaml.XamlMember&gt;派生クラス) ように IsDirective 初期化<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlDirective&gt;。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you want to report IsDirective as <ph id="ph1">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from &lt;xref:System.Xaml.XamlDirective&gt; because that is the only way to enable that behavior.</source>
          <target state="translated">IsDirective としてのレポートを作成する場合<ph id="ph1">`true`</ph>XAML メンバーに対するカスタム XAML スキーマ クラスの呼び出し元にから派生したことを確認&lt;xref:System.Xaml.XamlDirective&gt;その動作を有効にする唯一の方法であるためです&lt;/xref:System.Xaml.XamlDirective&gt;。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is a XAML directive; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>は XAML ディレクティブをそれ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an event member.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベント メンバーを表します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Calling IsEvent invokes &lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt; or a specific override of that method.</source>
          <target state="translated">Isevent メソッドを呼び出すと&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an event; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>イベントを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized with a valid <bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> string as its &lt;xref:System.Xaml.XamlMember.Name*&gt;.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は有効な初期化<bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>その&lt;xref:System.Xaml.XamlMember.Name*&gt;.&lt;/xref:System.Xaml.XamlMember.Name*&gt;として文字列</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is initialized with a valid <bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> string; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>は有効な初期化<bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>文字列です。 それ以外の場合、 <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a read-only member.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>読み取り専用のメンバーを表します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Calling IsReadOnly invokes &lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt; or a specific override of that method.</source>
          <target state="translated">IsReadOnly 呼び出すと、&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a read-only member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>読み取り専用のメンバーを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member with a callable public <bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>呼び出し可能なパブリック メンバーを表す<bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アクセサー。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The IsReadPublic value checks whether the &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; is public.</source>
          <target state="translated">IsReadPublic 値かどうかのチェック、&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;はパブリック&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; is nonpublic, the <ph id="ph1">`get`</ph> accessor is not callable in a practical way, and IsReadPublic returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;は、パブリックでない、<ph id="ph1">`get`</ph>アクセサーは実用的な方法で呼び出すことがないと IsReadPublic 返します<ph id="ph2">`false`</ph>&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Calling IsReadPublic invokes &lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す IsReadPublic&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt; method is virtual and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;、&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;メソッドは仮想であり、そのため、オーバーライドされることができます&lt;/xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">オーバーライドでは、情報を変更する (故意またはそれ以外の場合)、報告されたアクセスは XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合不要になったように可能性があります。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">アクセス レベルのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a callable public <bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> accessor; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>呼び出し可能なパブリックを表す<bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>アクセサー、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">メンバーは型およびメンバーの解決に使用されているバックアップ システムで解決できないかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xaml.XamlMember&gt; that is constructed with the &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; signature returns <ph id="ph1">`true`</ph> for IsUnknown.</source>
          <target state="translated">A&lt;xref:System.Xaml.XamlMember&gt;を構築する、&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;署名を返します<ph id="ph1">`true`</ph>IsUnknown 用&lt;/xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, a &lt;xref:System.Xaml.XamlMember&gt; with <ph id="ph1">`true`</ph> for IsUnknown cannot be written into an object graph.</source>
          <target state="translated">関係する読み込みパスの&lt;xref:System.Xaml.XamlObjectWriter&gt;、&lt;xref:System.Xaml.XamlMember&gt;で<ph id="ph1">`true`</ph>IsUnknown がオブジェクト グラフに書き込むためです&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant &lt;xref:System.Xaml.XamlMember&gt; reports <ph id="ph1">`true`</ph> for IsUnknown.</source>
          <target state="translated">.NET Framework XAML サービスの Api で既定の実装の下にある、&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;スローされます、&lt;xref:System.Xaml.XamlObjectWriterException&gt;ときに、関連する&lt;xref:System.Xaml.XamlMember&gt;レポート<ph id="ph1">`true`</ph>IsUnknown 用&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlObjectWriterException&gt;&lt;/xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You should not construct a &lt;xref:System.Xaml.XamlMember&gt; that has a value of <ph id="ph1">`true`</ph> for IsUnknown unless your implementation can handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior.</source>
          <target state="translated">構成しないで、&lt;xref:System.Xaml.XamlMember&gt;の値を持つ<ph id="ph1">`true`</ph>IsUnknown の実装からの例外を処理できる場合を除く&lt;xref:System.Xaml.XamlObjectWriter&gt;、その他の方法を調整することも、&lt;xref:System.Xaml.XamlObjectWriter&gt;動作&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Calling IsUnknown invokes &lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt; or a specific override of that method.</source>
          <target state="translated">IsUnknown を呼び出すと&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the member is not resolvable; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the member is resolvable.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、メンバーが解決できません。<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>メンバーが解決可能な場合です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a write-only member.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>書き込み専用のメンバーを表します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Calling IsWriteOnly invokes &lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す IsWriteOnly&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a write-only member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>書き込み専用のメンバーを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member that has a callable public <bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>呼び出し可能なパブリックを持つメンバーを表す<bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アクセサー。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The IsWritePublic value considers whether the &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; is public as part of the determination.</source>
          <target state="translated">IsWritePublic 値を考慮するかどうか、&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;はパブリックでは、決定の一部として&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; is nonpublic, the <ph id="ph1">`set`</ph> accessor is not callable in a practical way, and IsWritePublic returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;がパブリックでない、<ph id="ph1">`set`</ph>アクセサーは実用的な方法で呼び出すことがないと IsWritePublic 返します<ph id="ph2">`false`</ph>です&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Calling IsWritePublic invokes &lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す IsWritePublic&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt; method is virtual and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;、&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;メソッドは仮想であり、そのため、オーバーライドされることができます&lt;/xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">オーバーライドでは、情報を変更する (故意またはそれ以外の場合)、報告されたアクセスは XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合不要になったように可能性があります。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">アクセス レベルのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a callable public <bpt id="p3">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> accessor; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>呼び出し可能なパブリックを表す<bpt id="p3">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>アクセサー、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">派生クラスで実装された場合を返します、 <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">CLR 属性の値を取得する代替方法を内部のリフレクションを提供するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to &lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;.</source>
          <target state="translated">上書きがない場合、内部 reflector で&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;。&lt;/xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;への呼び出しなどの一般的な CLR リフレクション ロジック</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">返します、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> XAML の遅延読み込みの際に使用されるオブジェクトは、オブジェクトを宣言します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from the &lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt; property.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドが呼び出される、&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;プロパティ&lt;/xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt; to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt; information.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;リフレクションの内部に既定で有効になっている値からとは異なる値を返すカスタムも提供する場合と&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;情報です&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;&lt;/xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The default implementation returns an object either by reading &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt; or using a &lt;xref:System.Xaml.XamlDeferringLoader&gt; from the declaring type.</source>
          <target state="translated">既定の実装オブジェクトを返しますの読み取りを&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;またはを使用して、&lt;xref:System.Xaml.XamlDeferringLoader&gt;宣言する型から&lt;/xref:System.Xaml.XamlDeferringLoader&gt;&lt;/xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このメソッドを返す場合があるかどうか、どちらのオブジェクトは、使用、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>を持つ、 <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ジェネリックに制約します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Returns a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">一覧を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">リスト内の項目を報告この基準の初期化の順序の依存関係のあるメンバー <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from the &lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt; property.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドが呼び出される、&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;プロパティ&lt;/xref:System.Xaml.XamlMember.DependsOn%2A&gt;。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt; to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt; information.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;リフレクションの内部に既定で有効になっている値からとは異なる値を返すカスタムも提供する場合と&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;情報&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;&lt;/xref:System.Xaml.XamlMember.DependsOn%2A&gt;。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The WPF XAML reader and writer implementations attribute this case with &lt;xref:System.Windows.Markup.DependsOnAttribute&gt;.</source>
          <target state="translated">WPF XAML リーダーとライターの実装属性&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;。&lt;/xref:System.Windows.Markup.DependsOnAttribute&gt;ここ</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The default implementation uses this existing &lt;xref:System.Windows.Markup.DependsOnAttribute&gt; technique.</source>
          <target state="translated">既定の実装では、この既存&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;手法&lt;/xref:System.Windows.Markup.DependsOnAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Override this method if you are not using &lt;xref:System.Windows.Markup.DependsOnAttribute&gt; for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
          <target state="translated">使用していない場合は、このメソッドをオーバーライド&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;この目的および手法のため、独自のプロパティの処理順序を示すためには、その手法を置き換える&lt;/xref:System.Windows.Markup.DependsOnAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
          <target state="translated">プロパティの処理順序をサポートする予定がない場合は、その結果は返されません、これは適切なために、既定の実装を使用できます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The list is read-only.</source>
          <target state="translated">リストとは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">一連の<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This method is invoked by calls to &lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;.</source>
          <target state="translated">このメソッドが&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;.&lt;/xref:System.Xaml.XamlMember.Invoker%2A&gt;への呼び出しによって呼び出されます</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The default implementation does not require that a &lt;xref:System.Xaml.XamlMember&gt; be constructed by using one of the constructors that pass an initial &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;.</source>
          <target state="translated">既定の実装で、いる必要はありません&lt;xref:System.Xaml.XamlMember&gt;をパス、初期&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;.&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;コンス トラクターのいずれかを使用して構築します。&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>However, an &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; value must exist for the &lt;xref:System.Xaml.XamlMember&gt;; otherwise, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">ただし、&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;の値が存在する必要があります、&lt;xref:System.Xaml.XamlMember&gt;以外の場合、既定の実装を返します<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Override this method if you also derive from &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt; and intend to return the derived class.</source>
          <target state="translated">このメソッドをオーバーライドしても&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;、派生クラスを返すしようと&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;から派生した場合</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If you return <ph id="ph1">`null`</ph>, &lt;xref:System.Xaml.XamlMember.Invoker%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; to callers.</source>
          <target state="translated">返す場合<ph id="ph1">`null`</ph>、&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;返します&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;の呼び出し元にします&lt;/xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlMember.Invoker%2A&gt;。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; or <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; or <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is reported as an ambient property.</source>
          <target state="translated">返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>はアンビエント プロパティとして報告します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
          <target state="translated">このメソッドは、アンビエント XAML プロパティの情報を確認する内部の呼び出しによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
          <target state="translated">アンビエント プロパティの動作は、パブリック API の動作の XAML リーダーと XAML ライターに反映します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The internal calls that reference LookupIsAmbient are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">LookupIsAmbient を参照する内部の呼び出しは、オブジェクトと型の修飾子のアンビエント使用量に依存する値が正しく動作するかどうかを確認する XAML の処理ロジックの一部では通常です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
          <target state="translated">既定の .NET Framework XAML サービス実装は、CLR がバッキング型にリフレクションからこの情報を取得する属性を使用します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Specifically, the default implementation checks for &lt;xref:System.Windows.Markup.AmbientAttribute&gt; and returns <ph id="ph1">`true`</ph> for LookupIsAmbient if &lt;xref:System.Windows.Markup.AmbientAttribute&gt; exists on a member definition.</source>
          <target state="translated">具体的には、既定の実装をチェック&lt;xref:System.Windows.Markup.AmbientAttribute&gt;し、返します<ph id="ph1">`true`</ph>LookupIsAmbient の場合は&lt;xref:System.Windows.Markup.AmbientAttribute&gt;メンバー定義に存在する&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Override this method if you are not using &lt;xref:System.Windows.Markup.AmbientAttribute&gt; for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
          <target state="translated">使用していない場合は、このメソッドをオーバーライド&lt;xref:System.Windows.Markup.AmbientAttribute&gt;これを目的し、独自の方法では、XAML のアンビエント プロパティを示すためには、その手法を置き換える&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Example APIs from WPF that attribute with &lt;xref:System.Windows.Markup.AmbientAttribute&gt; are &lt;xref:System.Windows.Trigger.Property%2A?displayProperty=fullName&gt; and &lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">WPF&lt;xref:System.Windows.Markup.AmbientAttribute&gt;は&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=fullName&gt;および&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Trigger.Property%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;とその属性の例の Api</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to report this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> as an ambient property; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これをレポートする<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>がアンビエント プロパティとしてそれ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an event.</source>
          <target state="translated">取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントを表します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The default implementation checks whether &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; is of type &lt;xref:System.Reflection.EventInfo&gt;, and if it is, returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">既定の実装のチェックするかどうか&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;の種類は&lt;xref:System.Reflection.EventInfo&gt;場合を返しますと<ph id="ph1">`true`</ph>&lt;/xref:System.Reflection.EventInfo&gt;&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsEvent%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、XAML を解釈できる使用可能なメタデータが特殊なかどうかは、ケースごとにシステム表現を入力します&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to report that this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an event; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>レポートにこの<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>イベントを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an intended read-only property.</source>
          <target state="translated">返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>目的の読み取り専用プロパティを表します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; exists, but a public <ph id="ph2">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`true`</ph>場合&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;が存在するが、パブリック<ph id="ph2">`set`</ph>アクセサーでは、内部リフレクションによって決定されるには、存在しません&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;.</source>
          <target state="translated">このメソッドが、呼び出し元が&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;から値を取得するときに呼び出されます</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、XAML を解釈できる使用可能なメタデータが特殊なかどうかは、ケースごとにシステム表現を入力します&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to report this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> as an intended read-only property; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これをレポートする<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>として、意図された読み取り専用プロパティです。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a property that has a public <bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を持つパブリック プロパティを表す<bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アクセサー。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The default implementation returns results based either on internal reflection or the negation of &lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;, processing in that order.</source>
          <target state="translated">既定の実装は、内部リフレクションまたは否定のいずれかで結果を返します&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;、その順序で処理します&lt;/xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>LookupIsReadPublic returns whether the member itself is public; it returns <ph id="ph1">`true`</ph> for a public member on a nonpublic declaring type.</source>
          <target state="translated">LookupIsReadPublic は、そのメンバーがパブリックかどうかを返します返します<ph id="ph1">`true`</ph>のパブリック メンバーの型を宣言する重要な非公開にします。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt; instead, if you also want to consider the visibility of the declaring type.</source>
          <target state="translated">使用&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;代わりに、またするかどうか、宣言する型の可視性を検討してください&lt;/xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The LookupIsReadPublic method is virtual and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;、LookupIsReadPublic メソッドは仮想であり、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">オーバーライドでは、情報を変更する (故意またはそれ以外の場合)、報告されたアクセスは XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合不要になったように可能性があります。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">アクセス レベルのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a property that has a public <bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> accessor; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>を持つパブリック プロパティを表す<bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>アクセサー、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">返します。 かどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>型およびメンバーの解決に使用されるバッキング システムによって名前解決ではないメンバーを表します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This method may be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;.</source>
          <target state="translated">このメソッドは、呼び出し元が&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;から値を取得するときに呼び出される場合があります。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;, processing in that order.</source>
          <target state="translated">既定の実装には、内部、リフレクションに基づいてまたはチェックの結果が返されます、<ph id="ph1">`null`</ph>値の&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;、その順序で処理します&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a non-resolvable member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>以外で解決可能なメンバーを表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member that has a public <bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor but not a public <bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">返します。 かどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を持つパブリック メンバーを表す<bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アクセサーがパブリックではない<bpt id="p3">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>アクセサー。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; exists that has a public <ph id="ph2">`set`</ph> accessor and a nonpublic <ph id="ph3">`get`</ph> accessor, as determined by internal reflection.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`true`</ph>場合、&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;が存在するを持つパブリック<ph id="ph2">`set`</ph>アクセサーと、nonpublic<ph id="ph3">`get`</ph>アクセサー、内部リフレクションによって決定される&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;.&lt;/xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a write-only member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>書き込み専用のメンバーを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member that has a public <bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">返します。 かどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を持つパブリック メンバーを表す<bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アクセサー。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The default implementation returns results based  either internal reflection or the negation of &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;, processing in that order.</source>
          <target state="translated">既定の実装では、内部リフレクションまたは符号反転した値のいずれかに基づく結果を返します&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;、その順序で処理します&lt;/xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;.</source>
          <target state="translated">このメソッドが、呼び出し元が&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;。&lt;/xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;から値を取得するときに呼び出されます</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The LookupIsWritePublic method is virtual and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;、LookupIsWritePublic メソッドは仮想であり、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">オーバーライドでは、情報を変更する (故意またはそれ以外の場合)、報告されたアクセスは XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合不要になったように可能性があります。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">アクセス レベルのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a writable member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>書き込み可能なメンバーを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type where the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>型の場所、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>存在できます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
          <target state="translated">既定の実装は、アタッチ可能な不可能なメンバーと区別します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For non-attachable members, LookupTargetType always returns &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;.</source>
          <target state="translated">非アタッチ可能なメンバーは、LookupTargetType 常に返します&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;。&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For attachable members, LookupTargetType returns a result based on examining the &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; accessor parameter type and interprets that type based on XAML schema context.</source>
          <target state="translated">LookupTargetType アタッチ可能なメンバーは、検査に基づく結果を返します、&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;アクセサー パラメーターの型、型は XAML スキーマ コンテキストに基づいて解釈&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;.&lt;/xref:System.Xaml.XamlMember.TargetType%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The type where the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">型を<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>存在できます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーによって使用される型。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.Type%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.Type%2A&gt;。&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlMember.Type%2A&gt; to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt; information.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlMember.Type%2A&gt;リフレクションの内部に既定で有効になっている値からとは異なる値を返すカスタムも提供する場合と&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;情報&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The default implementation uses different code paths and conceptual meanings for the returned &lt;xref:System.Xaml.XamlType&gt; that is based on whether this &lt;xref:System.Xaml.XamlMember&gt; represents a property, method, or event.</source>
          <target state="translated">既定の実装は、異なるコード パスと概念の意味、返された&lt;xref:System.Xaml.XamlType&gt;かどうかに基づくこの&lt;xref:System.Xaml.XamlMember&gt;プロパティ、メソッド、またはイベントを表します&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>-   For a property, the returned &lt;xref:System.Xaml.XamlType&gt; is the type that sets the property or is returned by the property.</source>
          <target state="translated">-プロパティ場合、返された&lt;xref:System.Xaml.XamlType&gt;されるプロパティを設定またはプロパティによって返される型です&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>-   For an event, the returned &lt;xref:System.Xaml.XamlType&gt; is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">-返されるイベントの&lt;xref:System.Xaml.XamlType&gt;が必要なイベント ハンドラーの型 (CLR 実装内のデリゲート).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>-   For a method, &lt;xref:System.Xaml.XamlType&gt; is the return type.</source>
          <target state="translated">-、メソッドに対して&lt;xref:System.Xaml.XamlType&gt;は戻り値の型&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
          <target state="translated">いずれの場合、XAML スキーマ コンテキストは XAML の型基になるシステム型からの評価に使用されます。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.Type%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.Type%2A&gt;。&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーによって使用される型。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Returns a type converter implementation that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これに関連付けられている型コンバーターの実装を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The default implementation uses the following logic and processing order:      -   If attributing exists at the member level (&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;), the attribute information is used for a call to &lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt; against the XAML schema context.</source>
          <target state="translated">既定の実装を使用して、次のロジックと処理順序: - 属性メンバーのレベルで存在する場合 (&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;) への呼び出しの属性情報が使用される&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;、XAML スキーマ コンテキストに対してです&lt;/xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;&lt;/xref:System.ComponentModel.TypeConverterAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>-   If &lt;xref:System.Xaml.XamlMember.Type%2A&gt; is valid, a type converter that is associated with the type is returned.</source>
          <target state="translated">If&lt;xref:System.Xaml.XamlMember.Type%2A&gt;有効ですが、型に関連付けられている型コンバーターが返されます&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>-   If the member is an event, an event-specific type converter is returned.</source>
          <target state="translated">メンバーが、イベントの場合、イベント固有の型コンバーターが返されます。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;.</source>
          <target state="translated">このメソッドが、呼び出し元が&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;。&lt;/xref:System.Xaml.XamlMember.TypeConverter%2A&gt;から値を取得するときに呼び出されます</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> instance with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint; or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>インスタンス<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>制約または<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられているアクセサー <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The default implementation interprets the &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; property as &lt;xref:System.Reflection.PropertyInfo&gt; and returns the value of &lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName&gt; (with the parameter set to <ph id="ph1">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">既定の実装では、解釈、&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;プロパティとして&lt;xref:System.Reflection.PropertyInfo&gt;の値を返します&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName&gt;(パラメーターを設定した<ph id="ph1">`true`</ph>)、つまり、返されるメソッドが非パブリックできること&lt;/xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName&gt;&lt;/xref:System.Reflection.PropertyInfo&gt;&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
          <target state="translated">この動作が<ph id="ph1">`null`</ph>特定のケースします。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
          <target state="translated">関連付けられているアクセサーが存在しない場合や、メンバーがプロパティではない場合も含まれます。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from the &lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt; property on an associated &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;.</source>
          <target state="translated">このメソッドが、呼び出し元が&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;関連付けられている&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;。&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;プロパティ&lt;/xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;から値を取得するときに呼び出されます</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Make sure to implement LookupUnderlyingGetter, &lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;, and &lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt; so that they all return correlated results.</source>
          <target state="translated">LookupUnderlyingGetter を実装することを確認&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;、および&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;相関関係を持つ結果を返すようにします&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.MethodInfo&gt; for the associated <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor; or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Reflection.MethodInfo&gt;関連付けられている<bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アクセサー; または<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.MethodInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Returns a CLR type system &lt;xref:System.Reflection.MemberInfo&gt; that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR 型システムを返します&lt;xref:System.Reflection.MemberInfo&gt;これに関連付けられている<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.MemberInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
          <target state="translated">既定の実装では、構造に基づいての基になるメンバー情報を返します。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Reflection.MemberInfo&gt; object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">場合、&lt;xref:System.Reflection.MemberInfo&gt;基になるメンバーを設定するための十分な情報を提供しないシグネチャを持つオブジェクトを構築すると、このメソッドが戻る<ph id="ph1">`null`</ph>&lt;/xref:System.Reflection.MemberInfo&gt;。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
          <target state="translated">基になるメンバーは、構築時に設定されている場合は、このメソッドを呼び出す必要ありません。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;.</source>
          <target state="translated">このメソッドが、呼び出し元が&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;から値を取得するときに呼び出されます</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Make sure to implement &lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;, &lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;, and LookupUnderlyingMember so that they all return correlated results.</source>
          <target state="translated">実装することを確認&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;、 &lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;、および LookupUnderlyingMember すべてを返す関連結果&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A CLR type system &lt;xref:System.Reflection.MemberInfo&gt; object that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MemberInfo&gt;これに関連付けられているオブジェクト<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; または<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.MemberInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられているアクセサー <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The default implementation interprets &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; as &lt;xref:System.Reflection.PropertyInfo&gt; and returns the value of &lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName&gt; (with the parameter set to <ph id="ph1">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">既定の実装では、解釈&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;として&lt;xref:System.Reflection.PropertyInfo&gt;の値を返します&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName&gt;(パラメーターを設定した<ph id="ph1">`true`</ph>)、つまり、返されるメソッドが非パブリックできること&lt;/xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName&gt;&lt;/xref:System.Reflection.PropertyInfo&gt;&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
          <target state="translated">これにより、<ph id="ph1">`null`</ph>特定の多くの場合、このようなアクセサーがないまたはメンバーがプロパティではありません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt; on an associated &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;.Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">このメソッドは、呼び出し元に関連付けられている&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;から値を取得するときに呼び出されます。全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;&lt;/xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Make sure to implement &lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;, LookupUnderlyingSetter, and &lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt; so that they all return correlated results.</source>
          <target state="translated">実装することを確認&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;、LookupUnderlyingSetter、および&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;相関関係を持つ結果を返すようにします&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.MethodInfo&gt; for the associated <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor; or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Reflection.MethodInfo&gt;関連付けられている<bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>アクセサー; または<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Reflection.MethodInfo&gt; 。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Returns a value serializer implementation that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これに関連付けられている値シリアライザーの実装を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The default implementation uses the following logic and processing order:      -   If attributing exists at the member level (&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;), the attribute information is used for a call to &lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt; against the XAML schema context.</source>
          <target state="translated">既定の実装は、次のロジックと処理順序を使用: - 属性メンバーのレベルで存在する場合 (&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;) への呼び出しの属性情報を使用&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;、XAML スキーマ コンテキストに対して&lt;/xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;&lt;/xref:System.Windows.Markup.ValueSerializerAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>-   If &lt;xref:System.Xaml.XamlMember.Type%2A&gt; is valid, a value converter that is associated with the type is returned.</source>
          <target state="translated">If&lt;xref:System.Xaml.XamlMember.Type%2A&gt;有効ですが、型に関連付けられている値コンバーターが返されます&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-   If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">場合、上記の条件は適用されません<ph id="ph1">`null`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>This method is invoked when a caller gets a value from &lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;。&lt;/xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;から値を取得するときに、このメソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Override this method if you want to report uniform results for an entire &lt;xref:System.Xaml.XamlMember&gt; derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlMember&gt;派生クラスでは、ケースごとにこの確認に使用可能なメタデータを特殊化した場合またはします&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> instance with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>インスタンス&lt;xref:System.Windows.Markup.ValueSerializer&gt;制約、または<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.Markup.ValueSerializer&gt; 。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> name string that declares this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これを宣言する文字列名前<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>This value is always set during construction.</source>
          <target state="translated">この値は、構築時に常に設定されます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The constructors that are implemented by &lt;xref:System.Xaml.XamlMember&gt; typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph1">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
          <target state="translated">コンス トラクターによって実装される&lt;xref:System.Xaml.XamlMember&gt;通常から例外をスロー場合は、初期名が指定されていませんそのため、予期しないプロパティをする<ph id="ph1">`null`</ph>または .NET Framework XAML サービスの既定の実装を使用している場合、空の文字列。&lt;/xref:System.Xaml.XamlMember&gt; 。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
          <target state="translated"><bpt id="p1">[</bpt>XamlName の文法<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>CLR 型とメンバーの名前付け規則は、正確な intersect ではありません。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
          <target state="translated">CLR の下にある有効なメンバー名を宣言することは XAML の名前付け無効をお勧めします。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>You should avoid this situation if possible.</source>
          <target state="translated">このような状況をできる限り避ける必要があります。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> name string that declares this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これを宣言する文字列名前<bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have the same value.</source>
          <target state="translated">指定した&amp;2; つあるかどうかを判断<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが同じ値を設定します。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlMember1</ph><ept id="p2">&lt;/code&gt;</ept> is the same as the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlMember2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合の値<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlMember1</ph> <ept id="p2">&lt;/code&gt;</ept>はの値と同じ<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlMember2</ph> <ept id="p3">&lt;/code&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have different values.</source>
          <target state="translated">指定した&amp;2; つあるかどうかを判断<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが異なる値を設定します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlMember1</ph><ept id="p2">&lt;/code&gt;</ept> differs from the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlMember2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合の値<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlMember1</ph> <ept id="p2">&lt;/code&gt;</ept>の値と異なる<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlMember2</ph> <ept id="p3">&lt;/code&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 つの XAML 名前空間をこのプライマリの XAML 名前空間を識別する URI を取得<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The PreferredXamlNamespace property provides the same value as calling &lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt; and then getting the first value string from the returned list.</source>
          <target state="translated">PreferredXamlNamespace プロパティは、呼び出すことと同じ値を提供&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;、返された一覧から最初の値の文字列を取得しています&lt;/xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
          <target state="translated">テキストに戻るか、XAML 名前空間情報を保持している他の表現にメンバーを記述する場合は、任意の XAML 名前空間を使用してください。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The identifier for the primary XAML namespace for this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, as a string.</source>
          <target state="translated">このプライマリの XAML 名前空間の識別子<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、文字列として。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value, which indicates how a visual designer should process the member.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値で、ビジュアル デザイナーでのメンバーの処理方法を示します。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>列挙します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type where the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>型の場所、 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>存在できます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The returned value is different for attachable and non-attachable members.</source>
          <target state="translated">返される値は、アタッチ可能なおよび非アタッチ可能メンバーに対して異なるです。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>For non-attachable members, TargetType returns &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;.</source>
          <target state="translated">非アタッチ可能なメンバーの場合は、TargetType は&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;.&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;を返します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>For attachable members, &lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt; returns a result that is based on this logic:      -   If reflection cannot resolve a backing (&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; <ph id="ph1">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
          <target state="translated">アタッチ可能なメンバーの場合&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;このロジックに基づく結果を返します: - リフレクションは、バッキングを解決できない場合 (&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; <ph id="ph1">`true`</ph>)、このメソッドは、内部定数を汎用オブジェクトの種類を表すを返します&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>-   If the previous condition does not apply, &lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt; is called.</source>
          <target state="translated">場合、前の条件が適用されない&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;と呼びます&lt;/xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; that is based on examining the methods that implement the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">既定の実装を返します、&lt;xref:System.Xaml.XamlType&gt;を実装するメソッドを調べることに基づく、<ph id="ph1">`get`</ph>と<ph id="ph2">`set`</ph>アクセサー&lt;/xref:System.Xaml.XamlType&gt; 。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>A class might override &lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt; to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
          <target state="translated">クラスの方が優先&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;など、その他のメタデータを形成する異なる動作を使用する場合があります対象の種類のレポート アタッチ可能なメンバーです&lt;/xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The type where the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">型を<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>存在できます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この文字列表現を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>This implementation returns &lt;xref:System.Xaml.XamlMember.Name%2A&gt;.</source>
          <target state="translated">この実装を返します&lt;xref:System.Xaml.XamlMember.Name%2A&gt;。&lt;/xref:System.Xaml.XamlMember.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この文字列表現<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーによって使用される型。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Calling Type invokes &lt;xref:System.Xaml.XamlMember.LookupType%2A&gt; or a specific override of that method.</source>
          <target state="translated">型を呼び出すと&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">これは、初期の内部リフレクション ロジックで、情報は既に設定されていない場合に発生します。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>In the default behavior (no &lt;xref:System.Xaml.XamlMember.LookupType%2A&gt; override), the returned &lt;xref:System.Xaml.XamlType&gt; can have different conceptual meanings.</source>
          <target state="translated">既定の動作 (ありません&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;オーバーライド)、返された&lt;xref:System.Xaml.XamlType&gt;異なる概念意味を持つことができます&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlMember.LookupType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Which meaning applies depends on whether this &lt;xref:System.Xaml.XamlMember&gt; represents a property, method, or event, as the following list shows:      -   For a property, the returned &lt;xref:System.Xaml.XamlType&gt; is the type that sets the property or is returned by the property.</source>
          <target state="translated">かどうかに依存する意味が適用されますこの&lt;xref:System.Xaml.XamlMember&gt; ボックスの一覧を次に示すようプロパティ、メソッド、またはイベントを表す: - プロパティの場合、返された&lt;xref:System.Xaml.XamlType&gt;されるプロパティを設定またはプロパティによって返される型です&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>-   For an event, the returned &lt;xref:System.Xaml.XamlType&gt; is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">-返されるイベントの&lt;xref:System.Xaml.XamlType&gt;が必要なイベント ハンドラーの型 (CLR 実装内のデリゲート).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>-   For a method, &lt;xref:System.Xaml.XamlType&gt; is the return type of that method, which may be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">-、メソッドの&lt;xref:System.Xaml.XamlType&gt;可能性のあるメソッドは、戻り値の型は、 <ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.XamlType&gt; 。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
          <target state="translated">各ケースで、XAML スキーマ コンテキストは、バッキング型の XAML 型の評価に使用されます。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーによって使用される型。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>オブジェクトで、XAML オブジェクトを宣言の型変換の構築に使用することができます。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Calling TypeConverter invokes &lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt; or a specific override of that method.</source>
          <target state="translated">TypeConverter を呼び出すと&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">この動作は、初期の内部リフレクション ロジックで、情報が既に設定されていない場合に発生します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Implementations that return a non-null property value for TypeConverter are not necessarily a working &lt;xref:System.ComponentModel.TypeConverter&gt;.</source>
          <target state="translated">Null 以外のプロパティの値を返す TypeConverter の実装とは限りません作業&lt;xref:System.ComponentModel.TypeConverter&gt;.&lt;/xref:System.ComponentModel.TypeConverter&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The following is a list of possible non-null return values for TypeConverter and what these values represent:      -   The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
          <target state="translated">Null でない戻り値の TypeConverter とこれらの値が何を表すの一覧を次に示します:-戻り値は、そのメンバーを具体的には、またはコンバーターのターゲットの型に一般的に起因する型コンバーターを報告します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
          <target state="translated">この動作は、どのようなほとんどの XAML 型システムでは通常、XAML プロセッサが実行する型コンバーターのインスタンスを作成し、そのメソッドを呼び出すために探します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>-   The return value reports a built-in value converter.</source>
          <target state="translated">戻り値は、組み込みの値コンバーターを報告します。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
          <target state="translated">これらのコンバーターは XAML ライターによって実行される特定の内部処理に存在します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
          <target state="translated">具体的には、これらの組み込みの値コンバーターは、生の属性の文字列値を XAML 言語レベルのプリミティブに変換します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
          <target state="translated">.NET Framework XAML サービス実装では、これらの組み込み型の変換は、多くの場合、システム アセンブリで定義されている型コンバーターに転送します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>For example, a conversion for an &lt;xref:System.Int32&gt; value has built-in forwarded conversion, and therefore, the &lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt; value references &lt;xref:System.ComponentModel.Int32Converter&gt;.</source>
          <target state="translated">変換など、&lt;xref:System.Int32&gt;値が組み込みの変換、転送されると、そのため、&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;値の参照&lt;xref:System.ComponentModel.Int32Converter&gt;.&lt;/xref:System.ComponentModel.Int32Converter&gt; &lt;/xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt; &lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>-   The return value reports the special case of an unconstrained object model; that is, the &lt;xref:System.Xaml.XamlMember&gt; has a &lt;xref:System.Xaml.XamlMember.Type%2A&gt; value of &lt;xref:System.Object&gt;.</source>
          <target state="translated">戻り値は、制約のないオブジェクト モデルの特殊なケースを報告します。&lt;xref:System.Xaml.XamlMember&gt; &lt;xref:System.Xaml.XamlMember.Type%2A&gt; &lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt;の値&lt;/xref:System.Xaml.XamlMember.Type%2A&gt;を持つ&lt;/xref:System.Xaml.XamlMember&gt;は、</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; reports that the &lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName&gt; is {<ph id="ph1">`Object}`</ph>.</source>
          <target state="translated">ここで、&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;報告された、&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName&gt;は {<ph id="ph1">`Object}`</ph>&lt;/xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.Schema.XamlValueConverter%601&gt; 。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt; is <ph id="ph1">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
          <target state="translated">ただし、&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;は<ph id="ph1">`null`</ph>実際の型またはインスタンスにもこの変換を実行するためです&lt;/xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
          <target state="translated">代わりに、オブジェクト モデルの動作は、特定のテクノロジの実行時にグラフがオブジェクトの処理と判断したとき、実行時まで特定できません。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>If you can access a working &lt;xref:System.ComponentModel.TypeConverter&gt; from &lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;, you can invoke its conversion methods.</source>
          <target state="translated">作業中にアクセスできる場合&lt;xref:System.ComponentModel.TypeConverter&gt;から&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;、その変換メソッドを呼び出すことができます&lt;/xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;&lt;/xref:System.ComponentModel.TypeConverter&gt;。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>However, many conversion methods rely on service context.</source>
          <target state="translated">ただし、多くの変換メソッドは、サービス コンテキストに依存します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
          <target state="translated">場合は、同じサービス コンテキストを利用する型コンバーターが期待するオブジェクト グラフのオブジェクトを作成する一般的な役割がない、コンバーターのメソッドは例外をスローできます。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> value, with a <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>値で、 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ジェネリックに制約します。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Gets the CLR type system &lt;xref:System.Reflection.MemberInfo&gt; that is available for a member that is constructed by &lt;xref:System.Reflection.PropertyInfo&gt;, &lt;xref:System.Reflection.MethodInfo&gt;, or &lt;xref:System.Reflection.EventInfo&gt;.</source>
          <target state="translated">CLR 型システムを取得&lt;xref:System.Reflection.MemberInfo&gt;を構築するメンバーに対して使用できる&lt;xref:System.Reflection.PropertyInfo&gt;、 &lt;xref:System.Reflection.MethodInfo&gt;、または&lt;xref:System.Reflection.EventInfo&gt;.&lt;/xref:System.Reflection.EventInfo&gt; &lt;/xref:System.Reflection.MethodInfo&gt; &lt;/xref:System.Reflection.PropertyInfo&gt; &lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Calling UnderlyingMember invokes &lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt; or a specific override of that method.</source>
          <target state="translated">呼び出す UnderlyingMember&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>CLR type system &lt;xref:System.Reflection.MemberInfo&gt; information, as cast from the initial constructor parameters.</source>
          <target state="translated">CLR 型システム&lt;xref:System.Reflection.MemberInfo&gt;については、最初のコンス トラクターのパラメーターからのキャストとして&lt;/xref:System.Reflection.MemberInfo&gt;。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is constructed with the <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29<ph id="ph2">&amp;gt;</ph> signature returns <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を構築する、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29<ph id="ph2">&amp;gt;</ph>署名を返します<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> XAML オブジェクトを宣言の値のシリアル化に使用されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Calling ValueSerializer invokes &lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt; or a specific override of that method.</source>
          <target state="translated">ValueSerializer 呼び出すと、&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">この動作は、初期の内部リフレクション ロジックで、情報が既に設定されていない場合に発生します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Not all cases that return a non-null property value for ValueSerializer are necessarily a working &lt;xref:System.Windows.Markup.ValueSerializer&gt;.</source>
          <target state="translated">ValueSerializer の null 以外のプロパティの値を返すすべての場合、必ずしもでは、作業中&lt;xref:System.Windows.Markup.ValueSerializer&gt;。&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>See Remarks in &lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;; the same considerations apply to ValueSerializer.</source>
          <target state="translated">「解説」を参照してください&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;; ValueSerializer に同じ考慮事項が適用されます&lt;/xref:System.Xaml.XamlMember.TypeConverter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で&lt;xref:System.Windows.Markup.ValueSerializer&gt;、汎用の制約&lt;/xref:System.Windows.Markup.ValueSerializer&gt;。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>