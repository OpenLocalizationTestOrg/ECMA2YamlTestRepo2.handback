<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48866610ef8d80da05371b0b6ef7e6d9609661bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.MessageEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b4c6c1155c89c62ac6abe030dee87cf9fc8d618</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">033622fbc69b34a2532b7f1b35be969738c8cd13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
          <target state="translated">メッセージ キュー内のメッセージを列挙するため、順方向専用カーソルを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Use MessageEnumerator for dynamic interaction with messages in a queue.</source>
          <target state="translated">キュー内のメッセージの動的な対話を MessageEnumerator を使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Methods available through the &lt;xref:System.Messaging.MessageQueue&gt; class can return either a MessageEnumerator pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</source>
          <target state="translated">メソッドを介して使用できる、&lt;xref:System.Messaging.MessageQueue&gt;クラスは、指定したメソッドが呼び出された、キュー、または時に指定された時点のスナップショットのキューのコピーを格納する配列内のメッセージの動的な一覧を指すか、MessageEnumerator で返すことができます&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unlike a static snapshot, an enumerator allows you to modify the collection.</source>
          <target state="translated">列挙子では、静的なスナップショットとは異なり、コレクションを変更できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using a MessageEnumerator, you can remove messages from the queue, and the change is immediately reflected in the queue.</source>
          <target state="translated">MessageEnumerator を使用すると、キューからメッセージを削除することができ、変更がすぐにキューに反映されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An enumerator does not remove the messages from the queue when it queries the queue.</source>
          <target state="translated">キューを照会したときに、列挙子は、キューからメッセージを削除できません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It returns information about the message at the current cursor position, but it leaves the message in the queue.</source>
          <target state="translated">現在のカーソル位置にあるメッセージに関する情報を返しますが、メッセージはキューにそのままです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A MessageEnumerator is a cursor, initialized to the head of a dynamic list.</source>
          <target state="translated">MessageEnumerator は、カーソル、動的なリストの先頭に初期化します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The list order is the same as the order of the messages in the queue, according to message priority.</source>
          <target state="translated">一覧の順序は、メッセージの優先順位に従って、キュー内のメッセージの順序と同じです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can move the cursor to the first message in the queue by calling &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;を呼び出すことによって、キューの最初のメッセージにカーソルを移動することができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>After the enumerator has been initialized, you can use &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; to step forward through the remaining messages.</source>
          <target state="translated">列挙子が初期化された後に行うこともできます&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;残りのメッセージを転送ステップ&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can specify whether to wait for a message to become available by passing a timeout into the &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; method.</source>
          <target state="translated">使用可能になるにタイムアウトを渡すことによって、メッセージに対して待機するかどうかを指定することができます、&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;メソッド&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</source>
          <target state="translated">列挙子は動的であるため (たとえば、ため低優先度)、カーソルの現在位置より後に追加するメッセージは、列挙子によってアクセスできます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A message that is inserted before the cursor's current position cannot be accessed.</source>
          <target state="translated">カーソルの現在位置にアクセスすることはできません前に挿入されているメッセージです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is not possible to step backward with a MessageEnumerator.</source>
          <target state="translated">ステップ後退、MessageEnumerator にすることはできません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A cursor allows forward-only movement.</source>
          <target state="translated">カーソルでは、順方向専用の移動が可能です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt; method enables you to place the cursor back at the beginning of the queue.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;メソッドを使用すると、カーソルを置き、キューの先頭に戻ります&lt;/xref:System.Messaging.MessageEnumerator.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instances of MessageEnumerator for a given queue work independently.</source>
          <target state="translated">指定されたキューの MessageEnumerator のインスタンスは独立して動作します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can create two MessageEnumerator instances that apply to the same queue.</source>
          <target state="translated">同一のキューに適用される&amp;2; つの MessageEnumerator インスタンスを作成することができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The changes that one MessageEnumerator makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</source>
          <target state="translated">キュー内のメッセージが&amp;1; つ MessageEnumerator に加える変更は、2 番目の列挙子が&amp;1; つ目の前に配置されている場合、2 番目の列挙子にすぐに反映されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the &lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt; property on the now-deleted message.</source>
          <target state="translated">ただし、2 つの列挙子が同じ位置にある場合、これらのいずれか、メッセージを削除位置に、例外がスローされます他の列挙子の値を取得しようとすると、&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;削除メッセージのプロパティ&lt;/xref:System.Messaging.MessageEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you create an instance of &lt;xref:System.Messaging.MessageQueue&gt; with &lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt; set to <ph id="ph2">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; のインスタンスを作成する場合&lt;xref:System.Messaging.MessageQueue&gt;で&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt;'éý' <ph id="ph2">`true`</ph>、他のアプリケーションは変更できません、列挙子内のメッセージをキューに接続しているときにします&lt;/xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Frees the resources associated with the enumerator.</source>
          <target state="translated">列挙子に関連付けられているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The operating system retains an open handle to the queue during the lifetime of the cursor.</source>
          <target state="translated">オペレーティング システムでは、カーソルの有効期間中に、キューを開いているハンドルを保持します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you have finished working with the enumerator, call Close to release the resources associated with the handle.</source>
          <target state="translated">列挙子、呼び出しの閉じる操作が完了したら、ハンドルに関連付けられているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the current <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that this enumerator points to.</source>
          <target state="translated">現在の取得<bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>をこの列挙子が指しています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When the enumerator is created, it points to the head of the queue, at a location before the first message.</source>
          <target state="translated">列挙子の作成時に、最初のメッセージより前に、の位置、キューの先頭を指します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this case, Current is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">ここでは、現在が正しくないがアクセスされる場合、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; to position the cursor at the first message in the queue.</source>
          <target state="translated">呼び出す必要があります&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;にキューにある最初のメッセージをカーソルを移動します&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The current message.</source>
          <target state="translated">現在のメッセージ。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You called Current before the first call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext<bpt id="p1">*</bpt>&gt;. The cursor is located before the first element of the message enumeration.       -or-       You called Current after a call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext<ept id="p1">*</ept>&gt; had returned <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> (indicating the cursor is located after the last element of the message enumeration.)</source>
          <target state="translated">最初の呼び出しの前に現在を呼び出す&lt;&gt; <bpt id="p1">*</bpt>&gt; です。カーソルは、メッセージの列挙の最初の要素の前に位置します。      - または - への呼び出し後に現在が呼び出される&lt;&gt; <ept id="p1">*</ept>&gt; 返しました<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> (カーソルを示す後に配置されるメッセージの列挙の最後の要素です)。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The message the enumerator is currently pointing to no longer exists.</source>
          <target state="translated">列挙子が現在指して不要になったメッセージが存在します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It might have been deleted.</source>
          <target state="translated">削除された可能性があります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the native Message Queuing cursor handle used to browse messages in the queue.</source>
          <target state="translated">キューにメッセージを参照するために使用ネイティブのメッセージ キュー カーソル ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This property contains the native handle to the enumeration.</source>
          <target state="translated">このプロパティには、列挙型へのネイティブ ハンドルが含まれています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you have finished working with the enumerator, call &lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt; to release this resource.</source>
          <target state="translated">列挙子の操作が完了したら、呼び出す&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;をこのリソースを解放します&lt;/xref:System.Messaging.MessageEnumerator.Close%2A&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The native cursor handle.</source>
          <target state="translated">ネイティブなカーソルのハンドルです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The handle does not exist.</source>
          <target state="translated">ハンドルが存在しません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">によって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageEnumerator&gt; to be reallocated for other purposes.</source>
          <target state="translated">Dispose を呼び出すことによりで使用されるリソース、&lt;xref:System.Messaging.MessageEnumerator&gt;を他の目的に再割り当てされます&lt;/xref:System.Messaging.MessageEnumerator&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about Dispose, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Dispose の詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;&lt;/xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;呼び出す<ph id="ph1">`Dispose`</ph>で<ph id="ph2">`disposing`</ph>'éý'<ph id="ph3">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageEnumerator&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.Messaging.MessageEnumerator&gt;参照。&lt;/xref:System.Messaging.MessageEnumerator&gt; 。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose()`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next message in the queue, if one is currently available.</source>
          <target state="translated">いずれかが現在使用可能な場合は、キュー内の次のメッセージに、列挙子を進めます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This overload returns immediately if there is no message in the queue.</source>
          <target state="translated">このオーバー ロードは、キューにメッセージがないかどうかに直ちに返されます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There is another overload that waits a specified &lt;xref:System.TimeSpan&gt; for a message to arrive.</source>
          <target state="translated">指定したが待機する別のオーバー ロードがある&lt;xref:System.TimeSpan&gt;メッセージが到着するのです&lt;/xref:System.TimeSpan&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, MoveNext returns <ph id="ph1">`false`</ph> to the calling method.</source>
          <target state="translated">メッセージがないかどうか現在使用可能なキューが空であるため、またはコレクション内の最後の要素より後に移動するため、MoveNext を返します<ph id="ph1">`false`</ph>呼び出し元のメソッドです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to MoveNext brings the first message of the queue into view.</source>
          <target state="translated">作成した場合、列挙子が概念的には、キューの最初のメッセージの前に配置されているし、MoveNext への最初の呼び出し、キューの最初のメッセージを表示します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was succesfully advanced to the next message; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has reached the end of the queue.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>列挙子が次のメッセージに詳細に成功した場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>列挙子は、キューの末尾に達した場合。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">メッセージ キューに固有の例外がスローされました。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">次のメッセージをキューに、列挙子を進めます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the enumerator is positioned at the end of the queue, &lt;xref:System.Messaging.MessageEnumerator.MoveNext*&gt; waits until a message is available or the given timeout expires.</source>
          <target state="translated">列挙子が、キューの末尾に配置されている場合&lt;xref:System.Messaging.MessageEnumerator.MoveNext*&gt;メッセージが利用するか、指定したタイムアウト時間の有効期限が切れるまで待機します&lt;/xref:System.Messaging.MessageEnumerator.MoveNext*&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</source>
          <target state="translated">このオーバー ロードは、キューにメッセージがない場合、またはカーソルは、キューの末尾に達した場合を待機します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; waits the specified timeout.</source>
          <target state="translated">キューが空であるため、または、コレクション内の最後の要素より後に移動するため、メッセージを現在使用可能なことができない場合&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;指定したタイムアウト時間を待機します&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the cursor is already at the end of the queue, &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; only returns <ph id="ph1">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</source>
          <target state="translated">場合は、キューの末尾にカーソルは既に&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;のみが返されます<ph id="ph1">`true`</ph>場合は、指定された時間間隔内で新しいメッセージが到着すると、すべてのメッセージよりも優先順位の低い現在キューがありは、キューの末尾に置かれます&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An overload with no parameter returns immediately if no further messages are in the queue.</source>
          <target state="translated">パラメーターなしのオーバー ロードは、キューにこれ以上メッセージがないかどうかに直ちに返されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; brings the first message of the enumeration into view.</source>
          <target state="translated">作成時に列挙子は概念的には、列挙、および最初の呼び出しの最初のメッセージの前に配置&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;ビューには、列挙体の最初のメッセージを表示します&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; to wait for a message to be available if the enumerator is positioned at the end of the queue.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;列挙子がキューの末尾に配置されている場合に使用するメッセージを待機します&lt;/xref:System.TimeSpan&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator successfully advanced to the next message; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>列挙子は、次のメッセージに正常に進んだ場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>列挙子は、キューの末尾に達したし、メッセージがで指定された時間内では使用可能なならない場合、 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p3">&lt;/code&gt;</ept>パラメーター。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value specified for the timeout parameter is invalid.</source>
          <target state="translated">タイムアウト パラメーターに指定された値が正しくありません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It might represent a negative number.</source>
          <target state="translated">負の数を表すことができます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">メッセージ キューに固有の例外がスローされました。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-or-       The timeout has expired.</source>
          <target state="translated">- または - タイムアウトの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</source>
          <target state="translated">トランザクションまたは非トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">キューに到着するメッセージの指定したタイムアウト値はありません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>RemoveCurrent removes and returns the message at the cursor's current location.</source>
          <target state="translated">RemoveCurrent は削除し、カーソルの現在の場所でメッセージを返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling RemoveCurrent.</source>
          <target state="translated">呼び出していない&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;RemoveCurrent を呼び出した後&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは&amp;1; つの内部トランザクションを作成します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">キューに到着するメッセージの指定したタイムアウト値はありません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id="ph1">`transaction`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;削除し、によって定義された内部トランザクション コンテキストを使用して、カーソルの現在の場所でメッセージを返します、<ph id="ph1">`transaction`</ph>パラメーター。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;キューに返される&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">トランザクションがコミットされるまで、取り外しは取り消すことができません。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;の呼び出し後に&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the transaction in which the message will be removed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>でメッセージを削除するトランザクションを指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">キューに到着するメッセージの指定したタイムアウト値はありません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph1">`transactionType`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;削除しで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返します、<ph id="ph1">`transactionType`</ph>パラメーター。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">指定<ph id="ph1">`Automatic`</ph>の<ph id="ph2">`transactionType`</ph>パラメーター外部トランザクション コンテキストが既に存在する場合は、メッセージの受信に使用する場合、スレッドにアタッチします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">指定<ph id="ph1">`Single`</ph>単一の内部トランザクションとしてメッセージを受信する場合。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">指定できます<ph id="ph1">`None`</ph>トランザクション コンテキストの外部でトランザクション キューからメッセージを受信する場合。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;キューに返される&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">トランザクションがコミットされるまで、取り外しは取り消すことができません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;の呼び出し後に&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メッセージと関連付けるトランザクション コンテキストの型を記述する値。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transactionType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not one of the <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> members.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">transactionType</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターは、のいずれかではない、 <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>メンバー。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">現在のメッセージをキューから削除して、呼び出し元のアプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">削除するメッセージがある場合、メソッドを返します、すぐにします。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;削除し、カーソルの現在の場所でメッセージを返します。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、<ph id="ph1">`timeout`</ph>パラメーターの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;の呼び出し後に&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは&amp;1; つの内部トランザクションを作成します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for a message to arrive in the queue.</source>
          <target state="translated">メッセージがキューに到達するまで待機する時間間隔。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">指定された値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが無効です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">タイムアウトの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">削除するメッセージがある場合、メソッドを返します、すぐにします。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;削除し、カーソルの現在の場所でメッセージを返します。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、<ph id="ph1">`timeout`</ph>パラメーターの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;キューに返される&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">トランザクションがコミットされるまで、取り外しは取り消すことができません。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;の呼び出し後に&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">削除するメッセージを待機する時間間隔。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the transaction context for the message.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メッセージのトランザクション コンテキストを指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">指定された値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが無効です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">タイムアウトの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">削除するメッセージがある場合、メソッドを返します、すぐにします。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph1">`transactionType`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;削除しで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返します、<ph id="ph1">`transactionType`</ph>パラメーター。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、<ph id="ph1">`timeout`</ph>パラメーターの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">指定<ph id="ph1">`Automatic`</ph>の<ph id="ph2">`transactionType`</ph>パラメーター外部トランザクション コンテキストが既に存在する場合は、メッセージの受信に使用する場合、スレッドにアタッチします。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">指定<ph id="ph1">`Single`</ph>単一の内部トランザクションとしてメッセージを受信する場合。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">指定できます<ph id="ph1">`None`</ph>トランザクション コンテキストの外部でトランザクション キューからメッセージを受信する場合。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、&lt;xref:System.Messaging.MessageQueue&gt;クラスの&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;メソッドします&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt;&lt;/xref:System.Messaging.MessageQueue&gt;。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;キューに返される&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">トランザクションがコミットされるまで、取り外しは取り消すことができません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">現在のメッセージを削除すると、カーソルを次のメッセージに移動します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;の呼び出し後に&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">削除するメッセージを待機する時間間隔。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メッセージと関連付けるトランザクション コンテキストの型を記述する値。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューで利用可能な最初のメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">指定された値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが無効です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">タイムアウトの有効期限が切れました。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transactionType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not one of the <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> members.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">transactionType</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターは、のいずれかではない、 <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>メンバー。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Resets the current enumerator so it points to the head of the queue.</source>
          <target state="translated">キューの先頭を指すように、現在の列挙子をリセットします。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An enumerator can only move in a forward direction.</source>
          <target state="translated">列挙子は、順方向にのみ移動できます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Use this method to start over at the beginning of the queue.</source>
          <target state="translated">キューの先頭に最初からやり直すには、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>After calling Reset, the cursor points to the first message.</source>
          <target state="translated">リセットを呼び出した後は、カーソルは、最初のメッセージを指します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You do not need to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling Reset to move the cursor forward to the first message in the queue.</source>
          <target state="translated">呼び出す必要はありません&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;にカーソルを移動する Reset の呼び出し後に、キューの最初のメッセージを転送します&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the message at the current cursor position.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在のカーソル位置にあるメッセージを参照します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the message at the current cursor position.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在のカーソル位置にあるメッセージを参照します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>