<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6be823a18aeb670bec163beced5a5b7bd10194c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Web.UI.PageAsyncTask.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f5371e79fe8c4d7d8b5e807e7e123fcdd2af0ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef3816ca2a42fd149c3e09beebef528eaf86a728</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains information about an asynchronous task registered to a page.</source>
          <target state="translated">ページに登録されている非同期タスクについてを説明します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
          <target state="translated">ASP.NET version 2.0 を使用すると、ページに複数のタスクを登録し、ページを表示する前に非同期的に実行できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
          <target state="translated">タスクが、低速な処理は、他のプロセスが実行中に占有するしたくない場合に、非同期でに実行するを指定する場合があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
          <target state="translated">並列または順番に、非同期タスクを実行できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A PageAsyncTask object must be registered to the page through the &lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt; method.</source>
          <target state="translated">ページをめくる PageAsyncTask オブジェクトを登録する必要があります、&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;メソッド&lt;/xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
          <target state="translated">ページ自体は、非同期タスクの実行に非同期に処理する必要はありません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:       <ph id="ph4">`&lt;%@ Page Async="true" %&gt;`</ph>       When the <ph id="ph5">`Async`</ph> attribute is set to <ph id="ph6">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
          <target state="translated">設定することができます、<ph id="ph1">`Async`</ph>属性のいずれかに<ph id="ph2">`true`</ph>(示すように、次のコード例) または<ph id="ph3">`false`</ph>ページ ディレクティブと非同期のタスクは引き続き処理されます非同期的に:<ph id="ph4">`&lt;%@ Page Async="true" %&gt;`</ph>ときに、<ph id="ph5">`Async`</ph>属性に設定されている<ph id="ph6">`false`</ph>、すべての非同期タスクが完了するまで、ページを実行するスレッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any asynchronous tasks registered before the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event will be executed automatically by the page if they have not already been executed.</source>
          <target state="translated">非同期タスクを登録する前に、&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;イベントによって実行される自動的にページが既に実行されていない場合&lt;/xref:System.Web.UI.Page.PreRenderComplete&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Those asynchronous tasks registered after the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event must be executed explicitly through the &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method.</source>
          <target state="translated">これらの非同期タスクが後に登録されている、&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;を通じて明示的にイベントを実行する必要があります、&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;メソッド&lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;&lt;/xref:System.Web.UI.Page.PreRenderComplete&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method can also be used to start tasks before the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event.</source>
          <target state="translated">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;メソッドは前に、のタスクを開始するも使用できます、&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;イベント&lt;/xref:System.Web.UI.Page.PreRenderComplete&gt;&lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method executes all the registered asynchronous tasks on the page that have not been executed.</source>
          <target state="translated">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;メソッドが実行されていないページに登録されているすべての非同期タスクを実行します&lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
          <target state="translated">既定は 45 秒以内に完了していない場合の非同期タスクがタイムアウトします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
          <target state="translated">Web.config ファイルまたは page ディレクティブでは、別のタイムアウト値を指定できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
          <target state="translated"><ph id="ph1">`&lt;pages&gt;`</ph> 、Web.config ファイルのセクションが含まれています、<ph id="ph2">`asyncTimeout`</ph>属性が次のようにします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;system.web&gt;`</ph>       <ph id="ph2">`&lt;pages asyncTimeout="30"&gt;`</ph>       <ph id="ph3">`&lt;/pages&gt;`</ph>       <ph id="ph4">`&lt;/system.web&gt;`</ph>       The page directive contains an <ph id="ph5">`AsyncTimeout`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">`&lt;system.web&gt;`</ph>       <ph id="ph2">`&lt;pages asyncTimeout="30"&gt;`</ph>       <ph id="ph3">`&lt;/pages&gt;`</ph>       <ph id="ph4">`&lt;/system.web&gt;`</ph>ページ ディレクティブが含まれています、<ph id="ph5">`AsyncTimeout`</ph>属性。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using an event handler that enables the task to be canceled.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキャンセル可能タスクを有効にするイベント ハンドラーを使用します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This constructor wraps a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate so that the &lt;xref:System.Web.UI.PageAsyncTask&gt; object can integrate asynchronous code (based on &lt;xref:System.Threading.Tasks.Task&gt; objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
          <target state="translated">このコンス トラクターをラップ、&lt;xref:System.Web.CancellableTaskEventHandler&gt;を委任できるように、&lt;xref:System.Web.UI.PageAsyncTask&gt;オブジェクトは非同期コードを統合できます (に基づいて&lt;xref:System.Threading.Tasks.Task&gt;オブジェクト) 既存の ASP.NET Web フォーム ページの非同期機能を使用します&lt;/xref:System.Threading.Tasks.Task&gt;&lt;/xref:System.Web.UI.PageAsyncTask&gt;&lt;/xref:System.Web.CancellableTaskEventHandler&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ASP.NET will signal the &lt;xref:System.Threading.CancellationToken&gt; object that is passed to a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate for cancellation based on the &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt; attribute set in the <ph id="ph1">`@ Page`</ph> directive of the Web page.</source>
          <target state="translated">ASP.NET に通知する、&lt;xref:System.Threading.CancellationToken&gt;に渡されるオブジェクト、&lt;xref:System.Web.CancellableTaskEventHandler&gt;に基づくキャンセルの委任、&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;属性の設定、 <ph id="ph1">`@ Page`</ph> Web ページのディレクティブ&lt;/xref:System.Web.UI.Page.AsyncTimeout%2A&gt;&lt;/xref:System.Web.CancellableTaskEventHandler&gt;&lt;/xref:System.Threading.CancellationToken&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt; value has been reached, the &lt;xref:System.Threading.CancellationToken&gt; object will be signaled.</source>
          <target state="translated">ときに、&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;値に達している、&lt;xref:System.Threading.CancellationToken&gt;通知されるオブジェクト&lt;/xref:System.Threading.CancellationToken&gt;&lt;/xref:System.Web.UI.Page.AsyncTimeout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the &lt;xref:System.Web.CancellableTaskEventHandler&gt; class.</source>
          <target state="translated"><ph id="ph1">`CancellationToken`</ph>パラメーターは、&lt;xref:System.Web.CancellableTaskEventHandler&gt;クラス&lt;/xref:System.Web.CancellableTaskEventHandler&gt;の実装によって呼び出される非同期の Api に渡す必要があります</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
          <target state="translated">イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using an event handler that enables the task to be handled.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを処理するタスクを有効にするイベント ハンドラーを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
          <target state="translated">イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the default value for executing in parallel.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス並列で実行するための既定値を使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This implementation of the constructor sets the &lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt; property to <ph id="ph1">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
          <target state="translated">このコンス トラクターのセットの実装、&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;プロパティを<ph id="ph1">`false`</ph>のため、非同期タスクは、ページ上の他のタスクと並列で処理されません&lt;/xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">非同期タスクの開始時に呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内のタスクが正常に完了したときに呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内にタスクが正常に完了しなかった場合に呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
          <target state="translated">タスクの状態を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">beginHandler</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターまたは<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">endHandler</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーターが指定されていません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified value for executing in parallel.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス並列で実行するため、指定された値を使用します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
          <target state="translated">このコンス トラクターの実装では、非同期タスクは、ページ上の他のタスクと並列で処理されるかどうかを設定することができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">非同期タスクの開始時に呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内のタスクが正常に完了したときに呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内にタスクが正常に完了しなかった場合に呼び出すハンドラー。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
          <target state="translated">タスクの状態を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">その他のタスクと並列で処理できるかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">beginHandler</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターまたは<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">endHandler</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーターが指定されていません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets the method to call when beginning an asynchronous task.</source>
          <target state="translated">非同期タスクの開始時に呼び出すメソッドを取得します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The BeginHandler delegate is set in the constructor.</source>
          <target state="translated">BeginHandler デリゲートは、コンス トラクターで設定されています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.BeginEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when beginning the asynchronous task.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Web.BeginEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>非同期タスクを開始したときに呼び出すメソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内のタスクが正常に完了するときに呼び出すメソッドを取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The EndHandler delegate is set in the constructor.</source>
          <target state="translated">EndHandler デリゲートは、コンス トラクターで設定されています。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タイムアウト期間内のタスクが正常に完了するときに呼び出すメソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">その他のタスクと並列で処理できるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The ExecuteInParallel property is set in the constructor.</source>
          <target state="translated">ExecuteInParallel プロパティはコンス トラクターで設定します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When multiple tasks are registered in a page and the ExecuteInParallel property is set to <ph id="ph1">`true`</ph>, then those tasks are processed concurrently.</source>
          <target state="translated">ページに複数のタスクが登録されているし、ExecuteInParallel プロパティに設定<ph id="ph1">`true`</ph>、それらのタスクが同時に処理します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, if the ExecuteInParallel property is set to <ph id="ph1">`false`</ph>, then those tasks are processed sequentially.</source>
          <target state="translated">ただし、ExecuteInParallel プロパティ設定されている場合<ph id="ph1">`false`</ph>、それらのタスクが順番に処理します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and ExecuteInParallel is set to <ph id="ph1">`true`</ph>, both tasks will complete in 5 seconds.</source>
          <target state="translated">たとえば、ページには、2 つの非同期タスクが含まれている場合、それぞれの所要時間を完了する 5 秒し、ExecuteInParallel に設定されている<ph id="ph1">`true`</ph>、両方のタスクは 5 秒以内に完了します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If ExecuteInParallel is set to <ph id="ph1">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
          <target state="translated">ExecuteInParallel に設定されている場合<ph id="ph1">`false`</ph>同じこれらの 2 つのタスク、最初のタスクは 5 秒以内に完了し、2 番目のタスクは、最初のタスクの完了後に 5 秒を完了します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the task should be processed in parallel with other tasks; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、タスクは、他のタスクと並列で処理する必要があります。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets an object that represents the state of the task.</source>
          <target state="translated">タスクの状態を表すオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The State property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
          <target state="translated">State プロパティは、コンス トラクターで設定され、非同期タスクの実行中に変更することはできません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective State properties.</source>
          <target state="translated">ページ内の非同期タスクを区別するには、対応する状態プロパティに一意の文字列値を割り当てます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; that represents the state of the task.</source>
          <target state="translated">&lt;xref:System.Object&gt;タスクの状態を表す&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">タイムアウト期間内で、タスクが正常に完了しないときに呼び出すメソッドを取得します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The TimeoutHandler delegate is set in the constructor.</source>
          <target state="translated">TimeoutHandler デリゲートは、コンス トラクターで設定されています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タイムアウト期間内で、タスクが正常に完了しないときに呼び出すメソッドを表すデリゲート。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>