<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0aacd4cb6cd14bbcf5939edbbea7d4a0865948ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Input.InputBinding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">374f4a30fc737ae9d6faef2d97d08660c4dd868e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97904ba366e3b08a5924475b0b4986a3aa2e5ec5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a binding between an <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and a command.</source>
          <target state="translated">間のバインドを表す、 <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>とコマンド。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The command is potentially a <bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">コマンドは、潜在的な<bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides base initialization for classes derived from <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">派生したクラスの基本の初期化は、 <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.InputBinding&gt; is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;技術的には、抽象クラスではありませんが、既定のコンス トラクターが意図的にはアクセスを保護します。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This has the effect of making &lt;xref:System.Windows.Input.InputBinding&gt; an "abstract" class for <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">これは、作成の効果&lt;xref:System.Windows.Input.InputBinding&gt;「抽象」クラス<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type &lt;xref:System.Windows.Input.InputBinding&gt;, but you cannot specify an &lt;xref:System.Windows.Input.InputBinding&gt; instance in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">既存のプロパティがある<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ある<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>型のオブジェクトを想定する使用法&lt;xref:System.Windows.Input.InputBinding&gt;を指定することはできませんが、&lt;xref:System.Windows.Input.InputBinding&gt;でインスタンス<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>&lt;/xref:System.Windows.Input.InputBinding&gt;&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead, you can specify one of the device-specific &lt;xref:System.Windows.Input.InputBinding&gt; derived classes as values, for instance &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;派生クラス&lt;xref:System.Windows.Input.KeyBinding&gt;または&lt;xref:System.Windows.Input.MouseBinding&gt;。&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;のインスタンスの値として&lt;/xref:System.Windows.Input.InputBinding&gt;デバイスに固有のいずれかを指定する代わりに、</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified command and input gesture.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを指定したコマンドおよび入力ジェスチャを使用します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">既存の入力バインディング クラスを使用して、ソフトウェア開発者は、カスタム コマンドを定義する場合でも、通常はこのコンス トラクターを使用しません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instead, you will either use constructors of derived classes (&lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">派生クラスのコンス トラクターをするか、使用する代わりに、(&lt;xref:System.Windows.Input.KeyBinding&gt;と&lt;xref:System.Windows.Input.MouseBinding&gt;)、カスタム クラスの基本のインスタンスとして使用するこのコンス トラクターまたは&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although the &lt;xref:System.Windows.Input.InputBinding&gt; class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">ただし、&lt;xref:System.Windows.Input.InputBinding&gt;クラスは、原則として、実際には、入力バインドを表すどのデバイスを選択する必要がありますのさまざまな入力デバイスをサポートしています&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You only can set only one &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; value on the input binding, and gestures are device-specific.</source>
          <target state="translated">のみを設定する&amp;1; つだけ&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;入力バインディング、およびジェスチャの値は、デバイスに固有です&lt;/xref:System.Windows.Input.InputBinding.Gesture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The command to associate with <ph id="ph1">`gesture`</ph>.</source>
          <target state="translated">関連付けるコマンド<ph id="ph1">`gesture`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The input gesture to associate with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">関連付ける入力ジェスチャ<ph id="ph1">`command`</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">指定したオブジェクトのプロパティの基本 (アニメーション化されていない) 値をコピーします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">クローンを作成するオブジェクト。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">指定したオブジェクトのプロパティの現在の値をコピーします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">クローンを作成するオブジェクト。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Windows.Input.ICommand&gt; associated with this input binding.</source>
          <target state="translated">取得または設定、&lt;xref:System.Windows.Input.ICommand&gt;この入力バインドに関連付けられている&lt;/xref:System.Windows.Input.ICommand&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;クラスをサポートしません<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用状況、パブリックの既定のコンス トラクターが公開しないため (既定のコンス トラクターを持つが保護されている).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">ただし、派生クラスのパブリック コンス トラクターを公開できます。 および&lt;xref:System.Windows.Input.InputBinding&gt;。&lt;/xref:System.Windows.Input.InputBinding&gt;から継承されたプロパティがそのため、使用できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">既存の&amp;2; つ&lt;xref:System.Windows.Input.InputBinding&gt;でインスタンス化できるクラスを派生<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロパティを設定できる<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>の使用法が&lt;xref:System.Windows.Input.KeyBinding&gt;&lt;xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.ICommand&gt; references a type converter that enables certain preexisting &lt;xref:System.Windows.Input.ICommand&gt; implementations to specify values in the form of a string.</source>
          <target state="translated">&lt;xref:System.Windows.Input.ICommand&gt;既存の特定できるようにする型コンバーターを参照して&lt;xref:System.Windows.Input.ICommand&gt;文字列の形式で値を指定する実装&lt;/xref:System.Windows.Input.ICommand&gt;。&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">この型変換動作は、このプロパティの属性値の形式を設定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also bind the Command, &lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">コマンドをバインドすることもできます&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;、および&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;プロパティを、&lt;xref:System.Windows.Input.ICommand&gt;オブジェクトで定義されている。&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Input.InputBinding&gt;。&lt;/xref:System.Windows.Input.InputBinding&gt;&amp;2; 番目の例を参照してください。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage    &lt;<ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>="&lt;xref:System.Windows.Input.ICommand&gt;"/&gt;      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph4">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>="&lt;xref:System.Windows.Input.ICommand&gt;"/&gt; <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<ph id="ph4">`inputBindingDerivedClass`</ph>&lt;xref:System.Windows.Input.InputBinding&gt;&lt;xref:System.Windows.Input.KeyBinding&gt;または&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;など、オブジェクト要素の構文をサポートしている&lt;/xref:System.Windows.Input.InputBinding&gt;の派生クラス      &lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`iCommandImplementation`</ph>    An object implementation of &lt;xref:System.Windows.Input.ICommand&gt; that supports object element syntax (has a public default constructor).</source>
          <target state="translated"><ph id="ph1">`iCommandImplementation`</ph>オブジェクトの実装&lt;xref:System.Windows.Input.ICommand&gt;オブジェクト要素の構文をサポートしている (既定のパブリック コンス トラクターを持つ).&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The associated command.</source>
          <target state="translated">関連付けられたコマンド。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Command value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">コマンドの値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">取得または特定のコマンドのコマンドに固有のデータを設定します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The CommandParameter property is used to pass specific information to the command when it is executed.</source>
          <target state="translated">CommandParameter プロパティを実行するときに、コマンドに固有の情報を渡すために使用します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">データの型は、コマンドによって定義されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">多くのコマンドではコマンドのパラメーターが予期しません。これらのコマンドでは、渡された任意のコマンド パラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the command that an input binding is associated with is a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the CommandParameter of the input binding is passed to the &lt;xref:System.Windows.Input.RoutedCommand&gt; handlers through the &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; and the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; event data when the command is processed.</source>
          <target state="translated">入力バインディングが関連付けられているコマンドが、&lt;xref:System.Windows.Input.RoutedCommand&gt;に渡される入力バインドの CommandParameter、&lt;xref:System.Windows.Input.RoutedCommand&gt;を通じてハンドラー、&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;と&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;コマンドが処理されるときにイベント データ&lt;/xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;&lt;/xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;&lt;/xref:System.Windows.Input.RoutedCommand&gt;&lt;/xref:System.Windows.Input.RoutedCommand&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">データ型とコマンド パラメーターの目的コマンドごとに別々 に定義でき、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can bind the &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;, CommandParameter, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">バインドすることができます、 &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;、CommandParameter、および&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;プロパティを&lt;xref:System.Windows.Input.ICommand&gt;オブジェクトで定義されている&lt;/xref:System.Windows.Input.ICommand&gt;&lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;&lt;/xref:System.Windows.Input.InputBinding.Command%2A&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Input.InputBinding&gt;。&lt;/xref:System.Windows.Input.InputBinding&gt;&amp;2; 番目の例を参照してください。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;クラスをサポートしません<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用状況、パブリックの既定のコンス トラクターが公開しないため (既定のコンス トラクターを持つが保護されている).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">ただし、派生クラスのパブリック コンス トラクターを公開でき、そのためから継承されたプロパティを設定できます&lt;xref:System.Windows.Input.InputBinding&gt;で<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用状況&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">既存の&amp;2; つ&lt;xref:System.Windows.Input.InputBinding&gt;でインスタンス化できるクラスを派生<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>でプロパティを設定および<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>は&lt;xref:System.Windows.Input.KeyBinding&gt;および&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph3">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<ph id="ph3">`inputBindingDerivedClass`</ph>&lt;xref:System.Windows.Input.InputBinding&gt;&lt;xref:System.Windows.Input.KeyBinding&gt;または&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;など、オブジェクト要素の構文をサポートしている&lt;/xref:System.Windows.Input.InputBinding&gt;の派生クラス            </target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`commandParameterString`</ph>    A string that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterString`</ph>特定のコマンドによって処理される文字列。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">文字列は、コマンドのパラメーター簡単に設定するために使用される一般的な型<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">期待される文字列の形式とその目的は、入力バインディングが関連付けられている特定のコマンドのドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">多くのコマンドでは、パラメーターは期待できません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`commandParameterObject`</ph>    An object that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterObject`</ph>特定のコマンドによって処理されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">すべての既存<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>コマンドは、文字列を使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">そのため、このプロパティ要素構文では、カスタム コマンド シナリオに関連するだけです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">この構文をサポートするために、<ph id="ph1">`commandParameterObject`</ph>オブジェクトは、オブジェクトの要素の構文 (パブリック既定コンス トラクターがあります) もサポートする必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The command-specific data.</source>
          <target state="translated">コマンド固有のデータ。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt;依存関係プロパティ&lt;/xref:System.Windows.Input.InputBinding.CommandParameter*&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.Command*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.Input.InputBinding.Command*&gt;依存関係プロパティ&lt;/xref:System.Windows.Input.InputBinding.Command*&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">取得またはコマンドのターゲット要素を設定します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the CommandTarget property on an &lt;xref:System.Windows.Input.ICommandSource&gt; object is applicable only when the &lt;xref:System.Windows.Input.ICommand&gt; is a &lt;xref:System.Windows.Input.RoutedCommand&gt;.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>システム、CommandTarget プロパティをコマンド実行で、&lt;xref:System.Windows.Input.ICommandSource&gt;オブジェクトが場合にのみ適用&lt;xref:System.Windows.Input.ICommand&gt;&lt;xref:System.Windows.Input.RoutedCommand&gt;.&lt;/xref:System.Windows.Input.RoutedCommand&gt;は&lt;/xref:System.Windows.Input.ICommand&gt;&lt;/xref:System.Windows.Input.ICommandSource&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the CommandTarget is set on an &lt;xref:System.Windows.Input.ICommandSource&gt; and the corresponding command is not a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is ignored.</source>
          <target state="translated">CommandTarget が設定されている場合、 &lt;xref:System.Windows.Input.ICommandSource&gt;、対応するコマンドが、 &lt;xref:System.Windows.Input.RoutedCommand&gt;、コマンドの対象は無視されます&lt;/xref:System.Windows.Input.RoutedCommand&gt;&lt;/xref:System.Windows.Input.ICommandSource&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When used with a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is the object on which the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events are raised.</source>
          <target state="translated">使用すると、 &lt;xref:System.Windows.Input.RoutedCommand&gt;、コマンドの対象が対象となるオブジェクト、&lt;xref:System.Windows.Input.CommandManager.Executed&gt;と&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;イベントが発生します&lt;/xref:System.Windows.Input.CommandManager.CanExecute&gt;&lt;/xref:System.Windows.Input.CommandManager.Executed&gt;&lt;/xref:System.Windows.Input.RoutedCommand&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the CommandTarget property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">CommandTarget プロパティが設定されていない場合は、キーボード フォーカスを持つ要素がターゲットとして使用されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class itself does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;クラス自体はサポートしません<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用法、既定のパブリック コンス トラクターが公開しないため (既定のコンス トラクターがあるが、保護されている).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">ただし、派生クラスは、パブリック コンス トラクターを公開でき、したがってから継承されたプロパティを設定できます&lt;xref:System.Windows.Input.InputBinding&gt;で、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用状況&lt;/xref:System.Windows.Input.InputBinding&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">既存の&amp;2; つ&lt;xref:System.Windows.Input.InputBinding&gt;でインスタンス化できるクラスを派生<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>でプロパティを設定および<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>は&lt;xref:System.Windows.Input.KeyBinding&gt;および&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<ph id="ph2">`inputBindingDerivedClass`</ph>&lt;xref:System.Windows.Input.InputBinding&gt;&lt;xref:System.Windows.Input.KeyBinding&gt;または&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;など、オブジェクト要素の構文をサポートしている&lt;/xref:System.Windows.Input.InputBinding&gt;の派生クラス      </target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bindingToTarget`</ph>    A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated"><ph id="ph1">`bindingToTarget`</ph>要素の名前付きを既存のオブジェクト参照を返すことができるバインド構文の型を使用する文字列。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The target of the command.</source>
          <target state="translated">コマンドのターゲットです。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt;依存関係プロパティ&lt;/xref:System.Windows.Input.InputBinding.CommandTarget*&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates an instance of an <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">インスタンスを作成、 <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The new object.</source>
          <target state="translated">新しいオブジェクト。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with this input binding.</source>
          <target state="translated">取得または設定、 <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この入力バインドに関連付けられています。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The associated gesture.</source>
          <target state="translated">関連付けられているジェスチャ。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> by using base (non-animated) property values.</source>
          <target state="translated">インスタンスの指定された固定された複製は、 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>基本 (アニメーション化されていない) プロパティの値を使用しています。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">クローンを作成するオブジェクト。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在のインスタンスの指定された固定された複製は、 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">オブジェクトは、アニメーション化された依存関係プロパティを持っている場合は、その現在のアニメーション化された値がコピーされます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">クローンを作成するオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>