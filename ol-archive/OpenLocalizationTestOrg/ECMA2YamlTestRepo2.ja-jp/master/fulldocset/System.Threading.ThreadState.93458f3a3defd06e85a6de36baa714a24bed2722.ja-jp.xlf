<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">743b00cae26b2222671c6733ec6673f60a6aa7b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadState.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10f2e2991f5027d1a3f75652074c942e1152b47a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b58d0f8f571e866a50256a8fec82b65b3451b6b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the execution states of a <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">実行状態を指定、 <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The ThreadState enumeration is of interest only in a few debugging scenarios.</source>
          <target state="translated">ThreadState 列挙体は、いくつかでのみ関心のあるシナリオをデバッグします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
          <target state="translated">コードは、スレッドの活動を同期するために、スレッドの状態を使用する必要がありますしないでください。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ThreadState defines a set of all possible execution states for threads.</source>
          <target state="translated">ThreadState では、スレッドのすべての可能な実行状態のセットを定義します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
          <target state="translated">スレッドを作成すると、終了するまでの状態の少なくとも&amp;1; つです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
          <target state="translated">共通言語ランタイム内で作成されたスレッドは最初に、<ph id="ph1">`Unstarted`</ph>状態にある場合、ランタイムに付属している外部のスレッドが既に開始中に、<ph id="ph2">`Running`</ph>状態です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling &lt;xref:System.Threading.Thread.Start%2A&gt;.</source>
          <target state="translated"><ph id="ph1">`Unstarted`</ph>にスレッドが遷移した、 <ph id="ph2">`Running`</ph> &lt;xref:System.Threading.Thread.Start%2A&gt;.&lt;/xref:System.Threading.Thread.Start%2A&gt;を呼び出すことによって状態</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
          <target state="translated">すべての組み合わせ<ph id="ph1">`ThreadState`</ph>値は有効です。 たとえば、スレッドが両方にすることはできません、<ph id="ph2">`Aborted`</ph>と<ph id="ph3">`Unstarted`</ph>状態です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  There are two thread state enumerations,ThreadState and &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; は&amp;2; つのスレッドの状態の列挙体、ThreadState &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.&lt;/xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table shows the actions that cause a change of state.</source>
          <target state="translated">次の表は、状態の変更が発生するアクションを示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>|Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method on the new thread, and the call returns.</source>
          <target state="translated">|アクション |ThreadState |  |------------|-----------------|  |共通言語ランタイム内でスレッドを作成します |。まだ開始していない |  |別のスレッドの呼び出し、&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;新しいスレッドの呼び出しでメソッドを返します&lt;/xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Thread.Start%2A&gt; method does not return until the new thread has started running.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.Start%2A&gt;メソッドは、新しいスレッドの実行が開始されるまでを返しません&lt;/xref:System.Threading.Thread.Start%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There is no way to know at what point the new thread will start running, during the call to &lt;xref:System.Threading.Thread.Start%2A&gt;.|Running|   |The thread calls &lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Monitor.Wait%2A&gt; on another object.|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Thread.Join%2A&gt; on another thread.|WaitSleepJoin|   |Another thread calls &lt;xref:System.Threading.Thread.Interrupt%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Suspend%2A&gt; request.|Suspended|   |Another thread calls &lt;xref:System.Threading.Thread.Resume%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Abort%2A&gt; request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.Start%2A&gt;への呼び出し中に実行しますどの時点で、新しいスレッドが開始されますを知る方法はありません。 |。実行している |  |スレッド呼び出し&lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin |  |別のオブジェクトのスレッド呼び出し&lt;xref:System.Threading.Monitor.Wait%2A&gt;|。WaitSleepJoin |  |別のスレッドでスレッド呼び出し&lt;xref:System.Threading.Thread.Join%2A&gt;|。WaitSleepJoin |  |別のスレッド呼び出し&lt;xref:System.Threading.Thread.Interrupt%2A&gt;|実行している |  |別のスレッド呼び出し&lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested |  |スレッドが&lt;xref:System.Threading.Thread.Suspend%2A&gt;要求に応答します |。中断された |  |別のスレッド呼び出し&lt;xref:System.Threading.Thread.Resume%2A&gt;|実行している |  |別のスレッド呼び出し&lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested |  |スレッドが&lt;xref:System.Threading.Thread.Abort%2A&gt;要求に応答します |。停止 |  |スレッドが終了します |。停止 |      上記の状態、に加えても、<ph id="ph1">`Background`</ph>状態は、背景または前景でスレッドが実行されているかどうかを示します&lt;/xref:System.Threading.Thread.Abort%2A&gt;&lt;/xref:System.Threading.Thread.Abort%2A&gt;&lt;/xref:System.Threading.Thread.Resume%2A&gt;&lt;/xref:System.Threading.Thread.Suspend%2A&gt;&lt;/xref:System.Threading.Thread.Suspend%2A&gt;&lt;/xref:System.Threading.Thread.Interrupt%2A&gt;&lt;/xref:System.Threading.Thread.Join%2A&gt;&lt;/xref:System.Threading.Monitor.Wait%2A&gt;&lt;/xref:System.Threading.Thread.Sleep%2A&gt;&lt;/xref:System.Threading.Thread.Start%2A&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A thread can be in more than one state at a given time.</source>
          <target state="translated">スレッドは、特定の時点で&amp;1; つ以上の状態であることができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if a thread is blocked on a call to &lt;xref:System.Threading.Monitor.Wait%2A&gt;, and another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt; on the blocked thread, the blocked thread will be in both the <ph id="ph1">`WaitSleepJoin`</ph> and the <ph id="ph2">`AbortRequested`</ph> states at the same time.</source>
          <target state="translated">呼び出しでスレッドがブロックされている場合など、 &lt;xref:System.Threading.Monitor.Wait%2A&gt;、および別のスレッドの呼び出し&lt;xref:System.Threading.Thread.Abort%2A&gt;、ブロックされたスレッドでブロックされたスレッドされます両方で、<ph id="ph1">`WaitSleepJoin`</ph>と<ph id="ph2">`AbortRequested`</ph>同時状態&lt;/xref:System.Threading.Thread.Abort%2A&gt;&lt;/xref:System.Threading.Monitor.Wait%2A&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, as soon as the thread returns from the call to &lt;xref:System.Threading.Monitor.Wait%2A&gt; or is interrupted, it will receive the &lt;xref:System.Threading.ThreadAbortException&gt; to begin aborting.</source>
          <target state="translated">ここでは、スレッドがへの呼び出しから戻るとすぐに&lt;xref:System.Threading.Monitor.Wait%2A&gt;かが中断されるは受信、&lt;xref:System.Threading.ThreadAbortException&gt;中止を開始する&lt;/xref:System.Threading.ThreadAbortException&gt;&lt;/xref:System.Threading.Monitor.Wait%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt; property of a thread provides the current state of a thread.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;、スレッドのプロパティは、スレッドの現在の状態を提供します&lt;/xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
          <target state="translated">アプリケーションは、スレッドが実行されているかどうかを決定するのにビットマスクを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
          <target state="translated">値から<ph id="ph1">`Running`</ph>はゼロ (0) などの c# コードを使用して、スレッドが実行されているかどうかをテスト<ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph>またはなど、Visual Basic コード<ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.</source>
          <target state="translated">スレッドの状態を含む AbortRequested と、スレッドが停止している、今すぐがその状態がまだ停止 に変更されません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that will attempt to terminate it.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 、スレッドでメソッドが呼び出されて、スレッドをまだ受信していない、保留中<bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を中止することを試みます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
          <target state="translated">フォア グラウンド スレッドではなく、バック グラウンド スレッドとスレッドを実行中です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This state is controlled by setting the <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">この状態は、設定によって制御されます、 <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The thread has been started, it is not blocked, and there is no pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">スレッドが開始されて、ブロックされていないとが保留中のない<bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The thread has stopped.</source>
          <target state="translated">スレッドが停止しました。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The thread is being requested to stop.</source>
          <target state="translated">スレッドの停止が要求されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is for internal use only.</source>
          <target state="translated">これは内部使用のみです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The thread has been suspended.</source>
          <target state="translated">スレッドが中断されました。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The thread is being requested to suspend.</source>
          <target state="translated">スレッドを中断する要求されています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has not been invoked on the thread.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>スレッドでメソッドが呼び出されていません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The thread is blocked.</source>
          <target state="translated">スレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This could be the result of calling <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> or <ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>, of requesting a lock — for example, by calling <ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph> or <ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> — or of waiting on a thread synchronization object such as &lt;xref:System.Threading.ManualResetEvent&gt;.</source>
          <target state="translated">呼び出しの結果が考えられます<ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>または<ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>、ロックを要求する — などを呼び出して<ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph>または<ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> — &lt;xref:System.Threading.ManualResetEvent&gt;.&lt;/xref:System.Threading.ManualResetEvent&gt;など、スレッドの同期オブジェクトで待機しているのか</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>