<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ca694fa893704040c1750b3af4a5b75a4d11345</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadPool.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c04115738a06d9536a575b07c7fa6aa28c5077</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">104685958ab9f148f376ded976c4acf120b8d949</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">タスクの実行、作業項目のポスト、非同期 I/O の処理、他のスレッドでは、代理で行う待機、およびタイマーの処理に使用できるスレッドのプールを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">多くのアプリケーションでは、長時間時間スリープ状態で、イベントの発生を待機しているスレッドを作成します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">他のスレッドは、スリープ状態の変更をポーリングまたは状態情報の更新を定期的にスリープ解除する場合にのみを入力します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">スレッド プールでは、システムによって管理されるワーカー スレッドのプールを使用してアプリケーションを提供することにより、スレッドをより効率的に使用することができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Examples of operations that use thread pool threads include the following:      -   When you create a &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt; object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">スレッド プールのスレッドを使用する操作の例については、次のとおりです: を作成するときに、&lt;xref:System.Threading.Tasks.Task&gt;または&lt;xref:System.Threading.Tasks.Task%601&gt;タスクがスレッド プールのスレッドで実行するスケジュールを既定では、非同期的にいくつかのタスクを実行するオブジェクト&lt;/xref:System.Threading.Tasks.Task%601&gt;&lt;/xref:System.Threading.Tasks.Task&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>-   Asynchronous timers use the thread pool.</source>
          <target state="translated">-非同期タイマーは、スレッド プールを使用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Thread pool threads execute callbacks from the &lt;xref:System.Threading.Timer?displayProperty=fullName&gt; class and raise events from the &lt;xref:System.Timers.Timer?displayProperty=fullName&gt; class.</source>
          <target state="translated">スレッド プールのスレッドが&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;、&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;クラス&lt;/xref:System.Timers.Timer?displayProperty=fullName&gt;からクラス、および raise のイベント&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;からのコールバックを実行します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">-登録された待機ハンドルを使用する場合、システム スレッドは待機ハンドルの状態を監視します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">待機操作が完了すると、スレッド プールからワーカー スレッドは、対応するコールバック関数を実行します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>-   When you call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">の呼び出すと、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;スレッド プールのスレッド上で実行するメソッドをキューにします&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You do this by passing the method a &lt;xref:System.Threading.WaitCallback&gt; delegate.</source>
          <target state="translated">メソッドを渡すことによって、これを行う、&lt;xref:System.Threading.WaitCallback&gt;委任します&lt;/xref:System.Threading.WaitCallback&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The delegate has the signature      <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept>   <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>        where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">デリゲート シグネチャを持つ<bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept><bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>場所<ph id="ph1">`state`</ph>デリゲートによって使用されるデータを格納しているオブジェクトは、します。   </target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The actual data can be passed to the delegate by calling the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; method.</source>
          <target state="translated">実際のデータは、呼び出すことによって、デリゲートに渡すことが、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;メソッド&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The threads in the managed thread pool are background threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; マネージ スレッド プール内のスレッドがバック グラウンド スレッドです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That is, their &lt;xref:System.Threading.Thread.IsBackground%2A&gt; properties are <ph id="ph1">`true`</ph>.</source>
          <target state="translated">つまり、その&lt;xref:System.Threading.Thread.IsBackground%2A&gt;プロパティは、 <ph id="ph1">`true`</ph>&lt;/xref:System.Threading.Thread.IsBackground%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This means that a ThreadPool thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">これは、スレッド プールのスレッドによって、すべてのフォア グラウンド スレッドが終了した後に実行されるアプリケーションは保持しないことを意味します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; スレッド ローカル ストレージまたはでマークされたフィールドのデータは消去されません、スレッド プールには、スレッドが再利用、ときに、&lt;xref:System.ThreadStaticAttribute&gt;属性&lt;/xref:System.ThreadStaticAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">したがって、メソッドがスレッド ローカル ストレージを検査またはフィールドが付いている、&lt;xref:System.ThreadStaticAttribute&gt;属性、値が見つかる可能性があります残されるスレッド プールのスレッドの以前の使用&lt;/xref:System.ThreadStaticAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">また、スレッド プールに、待機操作に関連していない作業項目をキューできます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To request that a work item be handled by a thread in the thread pool, call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">作業項目をスレッド プール内のスレッドで処理することを要求するには、呼び出し、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">このメソッドは、メソッドまたはスレッド プールから選択したスレッドで呼び出されるデリゲートへの参照をパラメーターとして受け取ります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">キューに登録されましたが、作業項目をキャンセルする方法はありません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">タイマー キュー タイマーおよび登録された待機操作もスレッド プールを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">これらのコールバック関数は、スレッド プールにキューに入っています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There is one thread pool per process.</source>
          <target state="translated">プロセスごとに&amp;1; つのスレッド プールがあります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">以降で、<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>プロセスのスレッド プールの既定のサイズは、仮想アドレス領域のサイズなど、いくつかの要因によって異なります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A process can call the &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt; method to determine the number of threads.</source>
          <target state="translated">プロセスを呼び出すことができます、&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;スレッドの数を決定するメソッド&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The number of threads in the thread pool can be changed by using the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; method.</source>
          <target state="translated">使用しているスレッド プール内のスレッドの数を変更することができます、&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">各スレッドは、既定のスタック サイズを使用し、既定の優先順位で実行します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph2">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を .NET Framework をホストするアンマネージ コードを使用して、スレッド プールのサイズを変更することができます、 <ph id="ph2">`CorSetMaxThreads`</ph> mscoree.h ファイルで定義された関数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">スレッド プールを提供新しいワーカー スレッドまたは I/O 完了スレッド要求時に各カテゴリの最小値に達するまでします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">最低限に達すると、スレッド プールはそのカテゴリに追加のスレッドを作成または、いくつかのタスクを完了するまで待機できます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>、スレッド プールを作成し、タスクの単位時間あたりの完了数として定義されるスループットを最適化するためにワーカー スレッドを破棄します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">スレッドが少なすぎる可能性がありますいない、最適な使用使用可能なリソースは、スレッドが多すぎるはリソースの競合を増やすでしたがします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 需要が不足しているときに実際のスレッド プール スレッドの数を下回る場合、最小値。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method to obtain these minimum values.</source>
          <target state="translated">使用することができます、&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;これらの最小値を取得します&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  You can use the &lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt; method to increase the minimum number of threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; を使用することができます、&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;スレッドの最小数を増加させます&lt;/xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">ただし、不必要にこれらの値を増やすとパフォーマンスの問題が発生することができます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">タスクが多すぎますが、同時に開始する場合、は、低速であるし、すべての可能性があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">ほとんどの場合、スレッド プールが優れてスレッドを割り当てるための独自のアルゴリズムでします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">オペレーティング システム ハンドルのバインド、 <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that holds the handle.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;ハンドルを保持する&lt;/xref:System.IntPtr&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">ハンドルは、アンマネージ側の重複 I/O 用に開かれている必要があります。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、ハンドルがバインドされています。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">オペレーティング システム ハンドルのバインド、 <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;, which derives from the abstract &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; class.</source>
          <target state="translated"><ph id="ph1">`osHandle`</ph> &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;抽象&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;クラス&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt;から派生した、&lt;/xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;パラメーターでなければなりません</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; that holds the operating system handle.</source>
          <target state="translated">A&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;オペレーティング システム ハンドルを保持する&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">ハンドルは、アンマネージ側の重複 I/O 用に開かれている必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、ハンドルがバインドされています。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the &lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt; method, and the number currently active.</source>
          <target state="translated">によって返されるスレッド プールのスレッドの最大数の差を取得、&lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt;メソッド、および現在の数&lt;/xref:System.Threading.ThreadPool.GetMaxThreads*&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When GetAvailableThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">GetAvailableThreads 返されるときで指定された変数<ph id="ph1">`workerThreads`</ph>を開始する追加のワーカー スレッドとで指定された変数の数を表す<ph id="ph2">`completionPortThreads`</ph>を起動するその他の非同期 I/O スレッドの数が含まれています。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">使用可能なスレッドがない場合は、追加のスレッド プールの要求までキューに置かれたスレッド プールのスレッドが使用可能になるです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number of available worker threads.</source>
          <target state="translated">使用可能なワーカー スレッドの数。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">使用可能な非同期 I/O スレッドの数。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">同時にアクティブにできるスレッド プールに要求の数を取得します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">この数を超えるすべての要求は、スレッド プールのスレッドが使用可能になるまでキューに置かれます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When GetMaxThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">GetMaxThreads 返されるときで指定された変数<ph id="ph1">`workerThreads`</ph>スレッド プールで許可されるワーカー スレッドとで指定された変数の最大数を含む<ph id="ph2">`completionPortThreads`</ph>スレッド プールで許可される非同期の I/O スレッドの最大数が含まれています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt; method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">使用することができます、&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;実際のスレッド プール内のスレッド数を特定の時点を調べます&lt;/xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">使用することができます、&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;をスレッド プールでワーカー スレッドと非同期の I/O スレッドの最大数を設定します&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">システム メモリが許す限り多くのスレッド プールの要求とキューにできます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">スレッド プールのスレッドよりも多くの要求がある場合、追加の要求までキューに置かれたスレッド プールのスレッドが使用可能になります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">スレッド プール内のワーカー スレッドの最大数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">スレッド プール内の非同期 I/O スレッドの最大数。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">スレッドの作成と破棄を管理するためのアルゴリズムに切り替える前に、新しい要求が行われる、スレッド プールがオンデマンドで作成するスレッドの最小数を取得します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">スレッド プールを提供新しいワーカー スレッドまたは I/O 完了スレッド要求時に各カテゴリの最小値に達するまでします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">既定では、スレッドの最小数は、システム上のプロセッサの数を設定します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">最低限に達すると、スレッド プールはそのカテゴリに追加のスレッドを作成または、いくつかのタスクを完了するまで待機できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>、スレッド プールを作成し、タスクの単位時間あたりの完了数として定義されるスループットを最適化するためにスレッドを破棄します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">スレッドが少なすぎる可能性がありますいない、最適な使用使用可能なリソースは、スレッドが多すぎるはリソースの競合を増やすでしたがします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 需要が不足しているときに実際のスレッド プール スレッドの数を下回る場合、最小値。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">このメソッドが戻るとき、スレッド プールがオンデマンドで作成されるワーカー スレッドの最小数を格納します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">このメソッドが戻るとき、スレッド プールがオンデマンドで作成するための非同期 I/O スレッドの最小数を格納します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Queues a method for execution.</source>
          <target state="translated">メソッドの実行をキューに入れます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">メソッドは、スレッド プールのスレッドが利用可能になったらを実行します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; overload that accepts an object containing the necessary data.</source>
          <target state="translated">クラス、メソッドが定義されている、または使用することができますのインスタンス フィールドでキューに置かれたメソッドで必要なデータを配置することができます、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;を必要なデータを格納するオブジェクトを受け入れるオーバー ロード&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Visual Basic の場合は省略できます、&lt;xref:System.Threading.WaitCallback&gt;コンス トラクター、および使用するだけで、 <ph id="ph2">`AddressOf`</ph> &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;をコールバック メソッドを渡すときにオペレーター&lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic では、適切なデリゲート コンス トラクターは、自動的に呼び出します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">バージョン情報で、.NET Framework version 2.0 では、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the method to be executed.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を実行するメソッドを表すです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>メソッドが正常にキューに置かれた場合&lt;xref:System.NotSupportedException&gt;が、作業項目をキューにない場合にスローされます&lt;/xref:System.NotSupportedException&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">共通言語ランタイム (CLR) がホストされているし、ホストがこの操作をサポートしていません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">メソッドの実行をキューに配置し、メソッドによって使用されるデータを格納しているオブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">メソッドは、スレッド プールのスレッドが利用可能になったらを実行します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">コールバック メソッドには、複雑なデータが必要とする場合は、データを格納するクラスを定義することができます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to QueueUserWorkItem.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Visual Basic の場合は省略できます、&lt;xref:System.Threading.WaitCallback&gt;コンス トラクター、および使用するだけで、 <ph id="ph2">`AddressOf`</ph> QueueUserWorkItem をコールバック メソッドを渡すときにオペレーター&lt;/xref:System.Threading.WaitCallback&gt; 。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic では、適切なデリゲート コンス トラクターは、自動的に呼び出します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">バージョン情報で、.NET Framework version 2.0 では、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the method to execute.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を実行するメソッドを表すです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">メソッドによって使用されるデータを格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>メソッドが正常にキューに置かれた場合&lt;xref:System.NotSupportedException&gt;が、作業項目をキューにない場合にスローされます&lt;/xref:System.NotSupportedException&gt;。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">共通言語ランタイム (CLR) がホストされているし、ホストがこの操作をサポートしていません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、(ミリ秒単位) をタイムアウトとして 32 ビット符号付き整数を指定します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、スレッド プールに指定されたデリゲートをキューします。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">ワーカー スレッドは、次のいずれかが発生したときにデリゲートを実行します。-指定のオブジェクトがシグナル状態で。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-タイムアウト間隔が経過しました。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、指定されたオブジェクトの&lt;xref:System.Threading.WaitHandle&gt;。&lt;/xref:System.Threading.WaitHandle&gt;の現在の状態をチェックします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">オブジェクトの状態が通知されていない場合、メソッドは、待機操作を登録します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">待機操作は、スレッド プールのスレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">デリゲートは、オブジェクトの状態がシグナル状態またはタイムアウト間隔が経過すると、ワーカー スレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">場合、<ph id="ph1">`timeOutInterval`</ph>パラメーターが 0 (ゼロ) と<ph id="ph2">`executeOnlyOnce`</ph>パラメーターが<ph id="ph3">`false`</ph>イベントがシグナル状態またはタイムアウト期間が経過するたびに、タイマーがリセットします。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; を使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph2">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">代わりに、&lt;xref:System.Threading.Mutex&gt;を使用して、 &lt;xref:System.Threading.Semaphore&gt;1 の最大数を持つ&lt;/xref:System.Threading.Semaphore&gt;&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">待機操作をキャンセルする、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">待機スレッドが、Win32 を使用して<ph id="ph1">`WaitForMultipleObjects`</ph>登録された待機操作を監視する関数。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">したがって、RegisterWaitForSingleObject への複数の呼び出しでは、同じネイティブ オペレーティング システム ハンドルを使用する必要がある場合、は、Win32 を使用してハンドルを複製する必要があります<ph id="ph1">`DuplicateHandle`</ph>関数。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">RegisterWaitForSingleObject に渡されたイベント オブジェクト待機スレッドでイベントがシグナル状態にリセットされます。 前に、検出されないためにパルスいない必要があることに注意してください。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">、戻る前に、この関数は、一部の種類の同期オブジェクトの状態を変更します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">変更は、シグナル状態には、条件が満たされる待機条件が原因となったオブジェクトの場合のみ発生します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">たとえば、セマフォのカウントは&amp;1; ずつ減少します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">.NET framework version 2.0 では、バージョン情報の開始、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ネイティブ ハンドルをカプセル化します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、ミリ秒単位のタイムアウトの 64 ビット符号付き整数を指定します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、スレッド プールに指定されたデリゲートをキューします。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">ワーカー スレッドは、次のいずれかが発生したときにデリゲートを実行します。-指定のオブジェクトがシグナル状態で。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-タイムアウト間隔が経過しました。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、指定されたオブジェクトの&lt;xref:System.Threading.WaitHandle&gt;。&lt;/xref:System.Threading.WaitHandle&gt;の現在の状態をチェックします。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">オブジェクトの状態が通知されていない場合、メソッドは、待機操作を登録します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">待機操作は、スレッド プールのスレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">デリゲートは、オブジェクトの状態がシグナル状態またはタイムアウト間隔が経過すると、ワーカー スレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">場合、<ph id="ph1">`timeOutInterval`</ph>パラメーターが 0 (ゼロ) と<ph id="ph2">`executeOnlyOnce`</ph>パラメーターが<ph id="ph3">`false`</ph>イベントがシグナル状態またはタイムアウト期間が経過するたびに、タイマーがリセットします。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; を使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph2">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">代わりに、&lt;xref:System.Threading.Mutex&gt;を使用して、 &lt;xref:System.Threading.Semaphore&gt;1 の最大数を持つ&lt;/xref:System.Threading.Semaphore&gt;&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">待機操作をキャンセルする、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">待機スレッドが、Win32 を使用して<ph id="ph1">`WaitForMultipleObjects`</ph>登録された待機操作を監視する関数。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">したがって、RegisterWaitForSingleObject への複数の呼び出しでは、同じネイティブ オペレーティング システム ハンドルを使用する必要がある場合、は、Win32 を使用してハンドルを複製する必要があります<ph id="ph1">`DuplicateHandle`</ph>関数。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">RegisterWaitForSingleObject に渡されたイベント オブジェクト待機スレッドでイベントがシグナル状態にリセットされます。 前に、検出されないためにパルスいない必要があることに注意してください。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">、戻る前に、この関数は、一部の種類の同期オブジェクトの状態を変更します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">変更は、シグナル状態には、条件が満たされる待機条件が原因となったオブジェクトの場合のみ発生します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">たとえば、セマフォのカウントは&amp;1; ずつ減少します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">.NET framework version 2.0 では、バージョン情報の開始、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">オブジェクトは、デリゲートに渡されます。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ネイティブ ハンドルをカプセル化します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">待機するデリゲートを登録、&lt;xref:System.Threading.WaitHandle&gt;を指定して、&lt;xref:System.TimeSpan&gt;のタイムアウト値&lt;/xref:System.TimeSpan&gt;&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、スレッド プールに指定されたデリゲートをキューします。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">ワーカー スレッドは、次のいずれかが発生したときにデリゲートを実行します。-指定のオブジェクトがシグナル状態で。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-タイムアウト間隔が経過しました。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">RegisterWaitForSingleObject メソッドは、指定されたオブジェクトの&lt;xref:System.Threading.WaitHandle&gt;。&lt;/xref:System.Threading.WaitHandle&gt;の現在の状態をチェックします。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">オブジェクトの状態が通知されていない場合、メソッドは、待機操作を登録します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">待機操作は、スレッド プールのスレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">デリゲートは、オブジェクトの状態がシグナル状態またはタイムアウト間隔が経過すると、ワーカー スレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">場合、<ph id="ph1">`timeOutInterval`</ph>パラメーターが 0 (ゼロ) と<ph id="ph2">`executeOnlyOnce`</ph>パラメーターが<ph id="ph3">`false`</ph>イベントがシグナル状態またはタイムアウト期間が経過するたびに、タイマーがリセットします。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; を使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph2">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">代わりに、&lt;xref:System.Threading.Mutex&gt;を使用して、 &lt;xref:System.Threading.Semaphore&gt;1 の最大数を持つ&lt;/xref:System.Threading.Semaphore&gt;&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">待機操作をキャンセルする、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">待機スレッドが、Win32 を使用して<ph id="ph1">`WaitForMultipleObjects`</ph>登録された待機操作を監視する関数。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">したがって、RegisterWaitForSingleObject への複数の呼び出しでは、同じネイティブ オペレーティング システム ハンドルを使用する必要がある場合、は、Win32 を使用してハンドルを複製する必要があります<ph id="ph1">`DuplicateHandle`</ph>関数。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">RegisterWaitForSingleObject に渡されたイベント オブジェクト待機スレッドでイベントがシグナル状態にリセットされます。 前に、検出されないためにパルスいない必要があることに注意してください。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">、戻る前に、この関数は、一部の種類の同期オブジェクトの状態を変更します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">変更は、シグナル状態には、条件が満たされる待機条件が原因となったオブジェクトの場合のみ発生します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">たとえば、セマフォのカウントは&amp;1; ずつ減少します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">.NET framework version 2.0 では、バージョン情報の開始、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">オブジェクトは、デリゲートに渡されます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;。&lt;/xref:System.TimeSpan&gt;で表されるタイムアウト</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合<ph id="ph1">`timeout`</ph>0 (ゼロ) には、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`timeout`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ネイティブ ハンドルをカプセル化します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターがより大きい<ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、(ミリ秒単位) をタイムアウトとして 32 ビット符号なし整数を指定します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method queues the specified delegate to the thread pool.</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;キューにスレッド プールに指定されたデリゲート メソッド&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">ワーカー スレッドは、次のいずれかが発生したときにデリゲートを実行します。-指定のオブジェクトがシグナル状態で。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">-タイムアウト間隔が経過しました。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;メソッドは、指定されたオブジェクトの&lt;xref:System.Threading.WaitHandle&gt;。&lt;/xref:System.Threading.WaitHandle&gt;の現在の状態をチェックします。&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">オブジェクトの状態が通知されていない場合、メソッドは、待機操作を登録します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">待機操作は、スレッド プールのスレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">デリゲートは、オブジェクトの状態がシグナル状態またはタイムアウト間隔が経過すると、ワーカー スレッドによって実行されます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">場合、<ph id="ph1">`timeOutInterval`</ph>パラメーターが 0 (ゼロ) と<ph id="ph2">`executeOnlyOnce`</ph>パラメーターが<ph id="ph3">`false`</ph>イベントがシグナル状態またはタイムアウト期間が経過するたびに、タイマーがリセットします。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; を使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph2">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph3">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">代わりに、&lt;xref:System.Threading.Mutex&gt;を使用して、 &lt;xref:System.Threading.Semaphore&gt;1 の最大数を持つ&lt;/xref:System.Threading.Semaphore&gt;&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">待機操作をキャンセルする、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">待機スレッドが、Win32 を使用して<ph id="ph1">`WaitForMultipleObjects`</ph>登録された待機操作を監視する関数。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">したがってで同じオペレーティング システムのネイティブ ハンドルを使用する場合は複数回呼び出す&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;、Win32 を使用してハンドルを複製する必要があります<ph id="ph1">`DuplicateHandle`</ph>関数&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Note that you should not pulse an event object passed to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">渡されたイベント オブジェクトをパルスする必要がありますいないことに注意してください&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;待機スレッドでイベントがシグナル状態にリセットされます前に、検出されないため、。&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">、戻る前に、この関数は、一部の種類の同期オブジェクトの状態を変更します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">変更は、シグナル状態には、条件が満たされる待機条件が原因となったオブジェクトの場合のみ発生します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">たとえば、セマフォのカウントは&amp;1; ずつ減少します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">.NET framework version 2.0 では、バージョン情報の開始、&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;プロパティの値は、ワーカー スレッドに反映されるキューを使用して、&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">以前のバージョンでは、プリンシパルの情報は反映されません。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">オブジェクトは、デリゲートに渡されます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>登録された待機操作をキャンセルするを使用できます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">同時にアクティブにできるスレッド プールに要求の数を設定します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">この数を超えるすべての要求は、スレッド プールのスレッドが使用可能になるまでキューに置かれます。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">ことはできませんワーカー スレッドまたは I/O 完了スレッドの最大数未満に設定、数、コンピューター上のプロセッサの数。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>To determine how many processors are present, retrieve the value of the &lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">プロセッサの数が存在するには、値の取得、&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">さらに、ワーカー スレッドまたは I/O 完了スレッド、対応する最小ワーカー スレッド数より小さい数にまたは I/O 完了スレッドの最大数を設定することはできません。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>To determine the minimum thread pool size,  call the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method.</source>
          <target state="translated">最小スレッド プールのサイズを調べるを呼び出して、&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;メソッド&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">共通言語ランタイムがホストされている場合など、インターネット インフォメーション サービス (IIS) または SQL Server によって、ホストを制限したり、スレッド プールのサイズを変更できないようにできます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">スレッド プール内のスレッドの最大数を変更する場合は、注意を使用します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">コードがメリットがあるときに、変更はコード ライブラリを使用するに悪影響を与える可能性があります。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">スレッド プールのサイズが大きすぎる設定と、パフォーマンス問題が発生することができます。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">スレッドが多すぎるを同時に実行する場合のタスクの切り替えは重要な要因をオーバーヘッドになります。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">スレッド プール内のワーカー スレッドの最大数。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">スレッド プール内の非同期 I/O スレッドの最大数。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変更が成功した場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">スレッドの作成と破棄を管理するためのアルゴリズムに切り替える前に、新しい要求が行われる、スレッド プールがオンデマンドで作成するスレッドの最小数を設定します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">スレッド プールを提供新しいワーカー スレッドまたは I/O 完了スレッド要求時に各カテゴリの最小値に達するまでします。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">最低限に達すると、スレッド プールはそのカテゴリに追加のスレッドを作成または、いくつかのタスクを完了するまで待機できます。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>、スレッド プールを作成し、タスクの単位時間あたりの完了数として定義されるスループットを最適化するためにスレッドを破棄します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">スレッドが少なすぎる可能性がありますいない、最適な使用使用可能なリソースは、スレッドが多すぎるはリソースの競合を増やすでしたがします。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">要求が不足しているときに、実際のスレッド プール スレッドの数は最小の値を下回ることができます。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;), SetMinThreads returns <ph id="ph1">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">負の数またはアクティブなスレッド プールのスレッドの最大数より大きい数値を指定する場合 (を使用して取得&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;)、SetMinThreads 返します<ph id="ph1">`false`</ph>が最小値のいずれかが変更されていないとします&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 既定では、スレッドの最小数は、システム上のプロセッサの数を設定します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You can use the SetMinThreads method to increase the minimum number ofthreads.</source>
          <target state="translated">SetMinThreads メソッドを使用すると、最小の数値 ofthreads を大ききます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">ただし、不必要にこれらの値を増やすとパフォーマンスの問題が発生することができます。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">タスクが多すぎますが、同時に開始する場合、は、低速であるし、すべての可能性があります。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">ほとんどの場合、スレッド プールが優れてスレッドを割り当てるための独自のアルゴリズムでします。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">プロセッサの数もパフォーマンスを低下させる可能性がより小さくする最低限の削減。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">スレッド プールがオンデマンドで作成されるワーカー スレッドの最小数。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">スレッド プールがオンデマンドで作成するための非同期 I/O スレッドの最小数。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変更が成功した場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">重複した I/O 操作の実行キューに入れます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For information about using native Win32 overlapped I/O, see the &lt;xref:System.Threading.Overlapped&gt; class, the &lt;xref:System.Threading.NativeOverlapped&gt; structure, and the <ph id="ph1">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">ネイティブ Win32 を使用して情報には、I/O がオーバー ラップされたを参照してください、&lt;xref:System.Threading.Overlapped&gt;クラス、&lt;xref:System.Threading.NativeOverlapped&gt;構造体、および<ph id="ph1">`OVERLAPPED`</ph>Win32 プラットフォーム SDK の構造&lt;/xref:System.Threading.NativeOverlapped&gt;&lt;/xref:System.Threading.Overlapped&gt;。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafeQueueNativeOverlapped method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; を使用して、UnsafeQueueNativeOverlapped メソッドが誤って開きますセキュリティ ホールをします。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeQueueNativeOverlapped, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeQueueNativeOverlapped を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to queue.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>キューに構造体。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the operation was successfully queued to an I/O completion port; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>操作が正常に I/O 完了ポート; にキューに置かれた場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">指定したデリゲートをスレッド プール キューに配置が、コール スタックをワーカー スレッドに反映しません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method, UnsafeQueueUserWorkItem does not propagate the calling stack to the worker thread.</source>
          <target state="translated">異なり、 &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;UnsafeQueueUserWorkItem、メソッドはコール スタックをワーカー スレッドを反映しません&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">これにより、コード、呼び出し履歴が失われるとセキュリティ特権を昇格することができます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeQueueUserWorkItem could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeQueueUserWorkItem の使用は、セキュリティ ホールを誤って開けません。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeQueueUserWorkItem, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeQueueUserWorkItem を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>スレッド プール内のスレッドが作業項目をピックアップするときに呼び出されるデリゲートを表すです。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">スレッド プールから処理されるときに、デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method succeeds; &lt;xref:System.OutOfMemoryException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>メソッドが成功した場合&lt;xref:System.OutOfMemoryException&gt;が、作業項目をキューにない場合にスローされます&lt;/xref:System.OutOfMemoryException&gt;。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">メモリ不足の状態が発生しました。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The work item could not be queued.</source>
          <target state="translated">作業項目をキューにありませんでした。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、ミリ秒単位のタイムアウトの 32 ビット符号付き整数を使用します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">このメソッドはコール スタックをワーカー スレッドを反映していません。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">異なり、 &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;UnsafeRegisterWaitForSingleObject、メソッドはコール スタックをワーカー スレッドを反映しません&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">これにより、コード、呼び出し履歴が失われるとセキュリティ特権を昇格することができます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject の使用は、セキュリティ ホールを誤って開けません。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeRegisterWaitForSingleObject を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph1">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph2">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>登録された待機操作をキャンセルするために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、ミリ秒単位のタイムアウトの 64 ビット符号付き整数を指定します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">このメソッドはコール スタックをワーカー スレッドを反映していません。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">異なり、 &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;UnsafeRegisterWaitForSingleObject、メソッドはコール スタックをワーカー スレッドを反映しません&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">これにより、コード、呼び出し履歴が失われるとセキュリティ特権を昇格することができます。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject の使用は、セキュリティ ホールを誤って開けません。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeRegisterWaitForSingleObject を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph1">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph2">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>登録された待機操作をキャンセルするために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">待機するデリゲートを登録、&lt;xref:System.Threading.WaitHandle&gt;を指定して、&lt;xref:System.TimeSpan&gt;のタイムアウト値&lt;/xref:System.TimeSpan&gt;&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">このメソッドはコール スタックをワーカー スレッドを反映していません。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">異なり、 &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;UnsafeRegisterWaitForSingleObject、メソッドはコール スタックをワーカー スレッドを反映しません&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">これにより、コード、呼び出し履歴が失われるとセキュリティ特権を昇格することができます。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject の使用は、セキュリティ ホールを誤って開けません。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeRegisterWaitForSingleObject を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph1">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph2">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;。&lt;/xref:System.TimeSpan&gt;で表されるタイムアウト</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合<ph id="ph1">`timeout`</ph>0 (ゼロ) には、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`timeout`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>登録された待機操作をキャンセルするために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが-1 未満です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターがより大きい<ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">待機するデリゲートを登録、 &lt;xref:System.Threading.WaitHandle&gt;、(ミリ秒単位) をタイムアウトとして 32 ビット符号なし整数を指定します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">このメソッドはコール スタックをワーカー スレッドを反映していません。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">異なり、 &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;UnsafeRegisterWaitForSingleObject、メソッドはコール スタックをワーカー スレッドを反映しません&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">これにより、コード、呼び出し履歴が失われるとセキュリティ特権を昇格することができます。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject の使用は、セキュリティ ホールを誤って開けません。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">作業が UnsafeRegisterWaitForSingleObject を使用して、スレッド プール スレッドのキューにある場合、スレッド プールのスレッドのスタックには、実際の呼び出し元のコンテキストはありません。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">悪意のあるコードが必要になるアクセス許可のチェックを避けるためにこれを利用します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">使用して、&lt;xref:System.Threading.Mutex&gt;の<ph id="ph1">`waitObject`</ph>基になる Win32 API は、既定値を使用するため、コールバックの相互排他は提供されません<ph id="ph2">`WT_EXECUTEDEFAULT`</ph>フラグ、別のスレッド プールのスレッドで各コールバックがディスパッチされるようにします&lt;/xref:System.Threading.Mutex&gt;。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">終了したらを使用して、&lt;xref:System.Threading.RegisteredWaitHandle&gt;このメソッドによって返される、呼び出し、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;待機ハンドルへの参照を解放するメソッド&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;&lt;/xref:System.Threading.RegisteredWaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">常に呼び出すことをお勧め、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドを指定する場合でも<ph id="ph1">`true`</ph>の<ph id="ph2">`executeOnlyOnce`</ph>&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">ガベージ コレクションより効率的に動作を呼び出す場合は、&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;メソッドの代わりに、登録された待機ハンドルのファイナライザーによって異なります&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;を登録します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt; &lt;xref:System.Threading.Mutex&gt;。&lt;/xref:System.Threading.Mutex&gt;以外&lt;/xref:System.Threading.WaitHandle&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">ときに呼び出すデリゲート、<ph id="ph1">`waitObject`</ph>パラメーターがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">デリゲートに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">ミリ秒単位のタイムアウト。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">場合、<ph id="ph1">`millisecondsTimeOutInterval`</ph>パラメーターが 0 (ゼロ)、関数、オブジェクトの状態をテストを直ちに返されます。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">場合<ph id="ph1">`millisecondsTimeOutInterval`</ph>-1 で、関数のタイムアウトしません。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スレッドが待機不要になったことを示すために、<ph id="ph1">`waitObject`</ph>デリゲートが呼び出された後のパラメーター<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>を待機の登録が解除されるまでの待機操作が完了するたびに、タイマーがリセットされるかを示します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>登録された待機操作をキャンセルするために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元には、必要なアクセス許可がありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>