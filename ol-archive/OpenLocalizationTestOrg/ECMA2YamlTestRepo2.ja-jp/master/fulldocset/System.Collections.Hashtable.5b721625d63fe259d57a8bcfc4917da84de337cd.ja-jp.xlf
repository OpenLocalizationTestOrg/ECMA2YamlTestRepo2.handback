<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29a99113f6f5e8c636cca37d5dd69f98b78d8b76</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Hashtable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7adab19de5e9eff7db361e4d8a403ac1e8bbc6c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39d3f10f8859d27bfef8c293efca692035665ca7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a collection of key/value pairs that are organized based on the hash code of the key.</source>
          <target state="translated">キーのハッシュ コードに基づいて編成された、キー/値ペアのコレクションを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>.</source>
          <target state="translated">この型の .NET Framework ソース コードを参照するを参照してください。、<bpt id="p1">[</bpt>参照ソース<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; この型の .NET Framework ソース コードを表示するにはを参照してください、<bpt id="p1">[</bpt>参照ソース<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
          <target state="translated">ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース (パッチや更新を含む) をステップ参照してください<bpt id="p1">[</bpt>指示<ept id="p1">](http://referencesource.microsoft.com/)</ept>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each element is a key/value pair stored in a &lt;xref:System.Collections.DictionaryEntry&gt; object.</source>
          <target state="translated">各要素に格納されているキー/値ペアは、&lt;xref:System.Collections.DictionaryEntry&gt;オブジェクト&lt;/xref:System.Collections.DictionaryEntry&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>値を指定できますが、します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The objects used as keys by a Hashtable are required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; method (or the &lt;xref:System.Collections.IHashCodeProvider&gt; interface) and the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method (or the &lt;xref:System.Collections.IComparer&gt; interface).</source>
          <target state="translated">キーをハッシュ テーブルでは、オーバーライドする必要として使用するオブジェクト、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;メソッド (または&lt;xref:System.Collections.IHashCodeProvider&gt;インターフェイス) および&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド (または&lt;xref:System.Collections.IComparer&gt;インターフェイス).&lt;/xref:System.Collections.IComparer&gt; &lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; &lt;/xref:System.Collections.IHashCodeProvider&gt; &lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the Hashtable might behave incorrectly.</source>
          <target state="translated">メソッドとインターフェイスの両方の実装でも、大文字小文字の区別を同じ方法で処理する必要があります。それ以外の場合、ハッシュ テーブルが正しく動作しません。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, when creating a Hashtable, you must use the &lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt; class (or any case-insensitive &lt;xref:System.Collections.IHashCodeProvider&gt; implementation) with the &lt;xref:System.Collections.CaseInsensitiveComparer&gt; class (or any case-insensitive &lt;xref:System.Collections.IComparer&gt; implementation).</source>
          <target state="translated">など、ハッシュ テーブルを作成するときに行う必要があります、&lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt;クラス (またはその大文字と小文字&lt;xref:System.Collections.IHashCodeProvider&gt;実装) で、&lt;xref:System.Collections.CaseInsensitiveComparer&gt;クラス (またはその大文字と小文字&lt;xref:System.Collections.IComparer&gt;実装).&lt;/xref:System.Collections.IComparer&gt; &lt;/xref:System.Collections.CaseInsensitiveComparer&gt; &lt;/xref:System.Collections.IHashCodeProvider&gt; &lt;/xref:System.Collections.CaseInsensitiveHashCodeProvider&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the Hashtable.</source>
          <target state="translated">さらに、これらのメソッドは、ハッシュ テーブルで、キーが存在するときに、同じパラメーターで呼び出されたときに、同じ結果を生成する必要があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An alternative is to use a Hashtable constructor with an &lt;xref:System.Collections.IEqualityComparer&gt; parameter.</source>
          <target state="translated">代わりで Hashtable のコンス トラクターを使用する、&lt;xref:System.Collections.IEqualityComparer&gt;パラメーター&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If key equality were simply reference equality, the inherited implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; would suffice.</source>
          <target state="translated">キーの等値に単に参照の等価性を継承して実装されたかどうか&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;が十分に機能します&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Key objects must be immutable as long as they are used as keys in the Hashtable.</source>
          <target state="translated">ハッシュ テーブル内のキーとして使用される限り、主要なオブジェクトが変更可能なする必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When an element is added to the Hashtable, the element is placed into a bucket based on the hash code of the key.</source>
          <target state="translated">要素は、ハッシュ テーブルに追加するときに、要素は、キーのハッシュ コードに基づいてバケットに格納されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.</source>
          <target state="translated">キーの後続の参照は、要素を検索するために必要なキーの比較の数を大幅に削減するためだけに&amp;1; つのバケットで検索するキーのハッシュ コードを使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The load factor of a Hashtable determines the maximum ratio of elements to buckets.</source>
          <target state="translated">ハッシュ テーブルの占有率では、バケット数に対する要素の最大比率を決定します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Smaller load factors cause faster average lookup times at the cost of increased memory consumption.</source>
          <target state="translated">小さい負荷の要因が高速検索時間は平均的増加後のメモリ消費量がが欠点です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default load factor of 1.0 generally provides the best balance between speed and size.</source>
          <target state="translated">1.0 の既定の占有率は一般に、速度とサイズの最適なバランスを提供します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A different load factor can also be specified when the Hashtable is created.</source>
          <target state="translated">異なるテーブル占有率は、ハッシュ テーブルが作成されるときにも指定することができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As elements are added to a Hashtable, the actual load factor of the Hashtable increases.</source>
          <target state="translated">要素は、ハッシュ テーブルに追加されるため、ハッシュ テーブルの実際の占有率が増加します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets in the Hashtable is automatically increased to the smallest prime number that is larger than twice the current number of Hashtable buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、ハッシュ テーブルでバケットの数が現在のハッシュ テーブルのバケット数の&amp;2; 倍より大きい最小の素数を自動的に増加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each key object in the Hashtable must provide its own hash function, which can be accessed by calling &lt;xref:System.Collections.Hashtable.GetHash%2A&gt;.</source>
          <target state="translated">ハッシュ テーブル内の各キー オブジェクトが&lt;xref:System.Collections.Hashtable.GetHash%2A&gt;。&lt;/xref:System.Collections.Hashtable.GetHash%2A&gt;を呼び出すことによってアクセスできる独自のハッシュ関数を提供する必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, any object implementing &lt;xref:System.Collections.IHashCodeProvider&gt; can be passed to a Hashtable constructor, and that hash function is used for all objects in the table.</source>
          <target state="translated">ただし、いずれかのオブジェクトを実装する&lt;xref:System.Collections.IHashCodeProvider&gt;Hashtable のコンス トラクターに渡すことができ、テーブル内のすべてのオブジェクトのハッシュ関数が使用されます&lt;/xref:System.Collections.IHashCodeProvider&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The capacity of a Hashtable is the number of elements the Hashtable can hold.</source>
          <target state="translated">ハッシュ テーブルの容量とは、ハッシュ テーブルに格納できる要素の数です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As elements are added to a Hashtable, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素は、ハッシュ テーブルに追加されるため、容量を増やすは自動的に再割り当て、必要に応じて。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph1">`enabled`</ph> attribute of the  configuration element to <ph id="ph2">`true`</ph> in the run-time environment.</source>
          <target state="translated">ハッシュ テーブル オブジェクトの非常に大きい場合を設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、<ph id="ph1">`enabled`</ph>する構成要素の属性<ph id="ph2">`true`</ph>実行時環境でします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`For Each`</ph> Visual Basic で)、コレクション内の要素の型のオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since each element of the Hashtable is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">ハッシュ テーブルの各要素が、キー/値ペアであるため、要素の型は、キーの型または値の型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instead, the element type is &lt;xref:System.Collections.DictionaryEntry&gt;.</source>
          <target state="translated">代わりに、要素の型は、 &lt;xref:System.Collections.DictionaryEntry&gt;。&lt;/xref:System.Collections.DictionaryEntry&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p2">](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p4">](~/add/codesnippet/csharp/t-system.collections.has_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p6">](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)</ept><ept id="p5">]</ept>       The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated">例: <bpt id="p1">[!code-cpp</bpt> <bpt id="p2">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p2">](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p4">](~/add/codesnippet/csharp/t-system.collections.has_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id="p6">](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)</ept> <ept id="p5">]</ept> 、<ph id="ph1">`foreach`</ph>ステートメントがしか書き込まないことから、コレクションへの読み取りを許可する列挙子のラッパー。    </target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.</source>
          <target state="translated">シリアル化するため、ハッシュ テーブルでの要素を並べ替えるになる可能性がありますの列挙子を逆シリアル化は、呼び出さずに列挙を続行することはできません、&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;メソッド&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the &lt;xref:System.Type.Equals%2A&gt; method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; キーを継承する、その動作を変更、絶対の一意性を保証できませんを使用する比較であるため、&lt;xref:System.Type.Equals%2A&gt;メソッド&lt;/xref:System.Type.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the default initial capacity, load factor, hash code provider, and comparer.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの既定の初期容量を使用して、係数、ハッシュ コード プロバイダーおよび比較子をロードします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</source>
          <target state="translated">ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required.</source>
          <target state="translated">容量を増やすは自動的に要求します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定されたディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト初期容量は、コピーした要素の数と等しくあり既定占有率、ハッシュ コード プロバイダーおよび比較子を使用します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the default initial capacity and load factor, and the specified &lt;xref:System.Collections.IEqualityComparer&gt; object.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの既定の初期容量を使用して、係数、および指定されたを読み込む&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクト&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</source>
          <target state="translated">ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required.</source>
          <target state="translated">容量を増やすは自動的に要求します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;オブジェクトをオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、大文字と小文字の文字列の検索の実行などのシナリオを実現できます&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーと既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default hash code provider is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">既定のハッシュ コード プロバイダーの各キーの実装は、 <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>の各キーの実装で、既定の比較子<ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した初期容量と既定の占有率、ハッシュ コード プロバイダーおよび比較子を使用します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">`capacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to a new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定したディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified &lt;xref:System.Collections.IEqualityComparer&gt; object.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトの初期容量は、コピーした要素の数と同じとは、既定の占有率と、指定した&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクト&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;オブジェクトをオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、大文字と小文字の文字列の検索の実行などのシナリオを実現できます&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーと既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default hash code provider is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">既定のハッシュ コード プロバイダーの各キーの実装は、 <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>の各キーの実装で、既定の比較子<ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定されたディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト初期容量は、コピーした要素の数と等しくあり、指定された占有率では、既定のハッシュ コード プロバイダーとの比較子を使用します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph>0.1 未満です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the default initial capacity and load factor, and the specified hash code provider and comparer.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの既定の初期容量を使用して、要素、および指定したハッシュ コード プロバイダーとの比較子をロードします。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</source>
          <target state="translated">ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required.</source>
          <target state="translated">容量を増やすは自動的に要求します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーを使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;を使用して&amp;2; つのキーが等しいかどうかを判断するオブジェクト&lt;/xref:System.Collections.IComparer&gt;。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定の比較子を使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity and &lt;xref:System.Collections.IEqualityComparer&gt;, and the default load factor.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した初期容量を使用して&lt;xref:System.Collections.IEqualityComparer&gt;、および既定の占有率&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;をオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、大文字と小文字の文字列の検索の実行などのシナリオを実現できます&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the <ph id="ph3">`capacity`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は、<ph id="ph3">`capacity`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーと既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The default hash code provider is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">既定のハッシュ コード プロバイダーの各キーの実装は、 <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>の各キーの実装で、既定の比較子<ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した初期容量を使用して、係数、および既定のハッシュ コード プロバイダーとの比較子を読み込みます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the <ph id="ph3">`capacity`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は、<ph id="ph3">`capacity`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 0.1 よりも小さいです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is causing an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>オーバーフローの原因となっています。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is serializable using the specified <bpt id="p2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> and &lt;xref:System.Runtime.Serialization.StreamingContext&gt; objects.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を使用して、指定したシリアル化できるクラス<bpt id="p2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>と&lt;xref:System.Runtime.Serialization.StreamingContext&gt;オブジェクト&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.</source>
          <target state="translated">ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required.</source>
          <target state="translated">容量を増やすは自動的に要求します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.</source>
          <target state="translated">列挙子をシリアル化とシリアル化するため、&lt;xref:System.Collections.Hashtable&gt;の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;メソッド&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the information required to serialize the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトをシリアル化するために必要な情報を含む、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object containing the source and destination of the serialized stream associated with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A&lt;xref:System.Runtime.Serialization.StreamingContext&gt;オブジェクト ソースと関連付けられているシリアル化されたストリームの先を含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Runtime.Serialization.StreamingContext&gt; 。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定されたディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト初期容量は、コピーした要素の数と等しくあり、既定の占有率と、指定したハッシュ コード プロバイダーとの比較子を使用します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This API is obsolete.</source>
          <target state="translated">この API は今後使用しません。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For an alternative, see <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Hashtable.%23ctor%2A<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">代わりに、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Hashtable.%23ctor%2A<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーを使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;を使用して&amp;2; つのキーが等しいかどうかを判断するオブジェクト&lt;/xref:System.Collections.IComparer&gt;。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定の比較子を使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定されたディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and &lt;xref:System.Collections.IEqualityComparer&gt; object.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>初期容量は、コピーした要素の数と等しくあり、指定された占有率を使用してオブジェクトおよび&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクト&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;オブジェクトをオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、大文字と小文字の文字列の検索の実行などのシナリオを実現できます&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーと既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The default hash code provider is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">既定のハッシュ コード プロバイダーの各キーの実装は、 <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>の各キーの実装で、既定の比較子<ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph>0.1 未満です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity, hash code provider, comparer, and the default load factor.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した初期容量、ハッシュ コード プロバイダー、比較演算子、および既定の占有率を使用します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the <ph id="ph3">`capacity`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は、<ph id="ph3">`capacity`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーを使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;を使用して&amp;2; つのキーが等しいかどうかを判断するオブジェクト&lt;/xref:System.Collections.IComparer&gt;。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定の比較子を使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity, load factor, and &lt;xref:System.Collections.IEqualityComparer&gt; object.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを使用して、指定した初期量占有率、および&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクト&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;をオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、大文字と小文字の文字列の検索の実行などのシナリオを実現できます&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the <ph id="ph3">`capacity`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は、<ph id="ph3">`capacity`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーと既定の比較子を使用します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The default hash code provider is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">既定のハッシュ コード プロバイダーの各キーの実装は、 <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>の各キーの実装で、既定の比較子<ph id="ph3">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 0.1 よりも小さいです。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの新規作成 を指定されたディクショナリから要素をコピーして<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが初期容量は、コピーした要素の数と等しいと指定した占有率、ハッシュ コード プロバイダーおよび比較子を使用します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The initial capacity is set to the number of elements in the source dictionary.</source>
          <target state="translated">初期の容量は、ソース ディクショナリ内の要素の数に設定されます。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.</source>
          <target state="translated">新しい要素&lt;xref:System.Collections.Hashtable&gt;を列挙子が反復処理する順序と同じ順序で並べ替えられて、&lt;xref:System.Collections.IDictionary&gt;オブジェクト&lt;/xref:System.Collections.IDictionary&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in the <ph id="ph3">`d`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>内の要素の数が、<ph id="ph3">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;新しいコピー先のオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーを使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;を使用して&amp;2; つのキーが等しいかどうかを判断するオブジェクト&lt;/xref:System.Collections.IComparer&gt;。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定の比較子を使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;d&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph>0.1 未満です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified initial capacity, load factor, hash code provider, and comparer.</source>
          <target state="translated">新しい、空のインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した初期容量を使用して、係数、ハッシュ コード プロバイダーおよび比較子をロードします。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Capacity is automatically increased as required based on the load factor.</source>
          <target state="translated">容量が自動的には、占有率に基づく必要に応じて拡大します。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The load factor is the maximum ratio of elements to buckets.</source>
          <target state="translated">占有率は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>A smaller load factor means faster lookup at the cost of increased memory consumption.</source>
          <target state="translated">小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A load factor of 1.0 is the best balance between speed and size.</source>
          <target state="translated">1.0 の占有率は、速度とサイズの最適なバランスです。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</source>
          <target state="translated">実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&amp;2; 倍より大きい最小の素数をバケットの数は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">ハッシュ コード プロバイダーが&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;キーのハッシュ コードを管理します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定のハッシュ コード プロバイダーが&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The comparer determines whether two keys are equal.</source>
          <target state="translated">比較演算子は、2 つのキーが等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.</source>
          <target state="translated">内のすべてのキー、&lt;xref:System.Collections.Hashtable&gt;一意でなければなりません&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">既定の比較子は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;。&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;のキーの実装</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.</source>
          <target state="translated">カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the <ph id="ph3">`capacity`</ph> parameter.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は、<ph id="ph3">`capacity`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The approximate number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object can initially contain.</source>
          <target state="translated">要素の概算数を<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが最初に含めることができます。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.</source>
          <target state="translated">0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The result is the maximum ratio of elements to buckets.</source>
          <target state="translated">結果は、バケット数に対する要素の最大比率です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定のハッシュ コード プロバイダーを使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;を使用して&amp;2; つのキーが等しいかどうかを判断するオブジェクト&lt;/xref:System.Collections.IComparer&gt;。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">- または - <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定の比較子を使用するの各キーの実装は<ph id="ph1">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 0.1 よりも小さいです。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.</source>
          <target state="translated">- または - <ph id="ph1">&lt;code&gt;loadFactor&lt;/code&gt;</ph> 1.0 より大きい。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Adds an element with the specified key and value into the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定したキーと値を持つ要素を追加、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>値を指定できますが、します。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>An object that has no correlation between its state and its hash code value should typically not be used as the key.</source>
          <target state="translated">オブジェクトの状態とそのハッシュ コード値間の相関関係を持たない必要があります通常されませんするキーとして使用します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>For example, String objects are better than StringBuilder objects for use as keys.</source>
          <target state="translated">たとえば、文字列オブジェクトは、キーとして使用 StringBuilder オブジェクトよりも優れています。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;xref:System.Collections.Hashtable.Item%2A&gt; property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Hashtable&gt;; for example, <ph id="ph1">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">使用することも、&lt;xref:System.Collections.Hashtable.Item%2A&gt;にキーの値を設定して、新しい要素を追加するプロパティが存在しません、&lt;xref:System.Collections.Hashtable&gt;たとえば、 <ph id="ph1">`myCollection["myNonexistentKey"] = myValue`</ph>。&lt;/xref:System.Collections.Hashtable&gt; &lt;/xref:System.Collections.Hashtable.Item%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>However, if the specified key already exists in the &lt;xref:System.Collections.Hashtable&gt;, setting the &lt;xref:System.Collections.Hashtable.Item%2A&gt; property overwrites the old value.</source>
          <target state="translated">ただしで指定したキーが既に存在する場合、 &lt;xref:System.Collections.Hashtable&gt;、設定、&lt;xref:System.Collections.Hashtable.Item%2A&gt;プロパティに古い値が上書きされます&lt;/xref:System.Collections.Hashtable.Item%2A&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In contrast, the Add method does not modify existing elements.</source>
          <target state="translated">これに対し、追加のメソッドでは、既存の要素は変更しません。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Hashtable.Count%2A&gt; is less than the capacity of the &lt;xref:System.Collections.Hashtable&gt;, this method is an O(1) operation.</source>
          <target state="translated">場合&lt;xref:System.Collections.Hashtable.Count%2A&gt;の容量より小さい、 &lt;xref:System.Collections.Hashtable&gt;、このメソッドは、o (1) 操作になります&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The key of the element to add.</source>
          <target state="translated">追加する要素のキー。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The value of the element to add.</source>
          <target state="translated">追加する要素の値。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>An element with the same key already exists in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">同じキーを持つ要素は既に、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のサイズが固定されています。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Removes all elements from the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">すべての要素を削除、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Hashtable.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.Hashtable.Count%2A&gt;0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。&lt;/xref:System.Collections.Hashtable.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The capacity remains unchanged.</source>
          <target state="translated">容量はそのまま残ります。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピーを作成、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">コレクションの簡易コピーは、参照型または値の型が参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.Hashtable&gt; clone has the same count, the same capacity, the same &lt;xref:System.Collections.IHashCodeProvider&gt; implementation, and the same &lt;xref:System.Collections.IComparer&gt; implementation as the original &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Hashtable&gt;複製が同じ数、容量が同じで、同じ&lt;xref:System.Collections.IHashCodeProvider&gt;実装と同じでは、&lt;xref:System.Collections.IComparer&gt;実装元&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;として&lt;/xref:System.Collections.IComparer&gt;&lt;/xref:System.Collections.IHashCodeProvider&gt;&lt;/xref:System.Collections.Hashtable&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピー、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Collections.IComparer&gt; to use for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定、&lt;xref:System.Collections.IComparer&gt;に使用する、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; to use for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;に使用する、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The property is set to a value, but the hash table was created using an &lt;xref:System.Collections.IEqualityComparer&gt;.</source>
          <target state="translated">値に設定されますが、 &lt;xref:System.Collections.IEqualityComparer&gt;。&lt;/xref:System.Collections.IEqualityComparer&gt;を使用してハッシュ テーブルの作成</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> contains a specific key.</source>
          <target state="translated">指定するかどうか、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>特定のキーが含まれています。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Contains implements &lt;xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Implements &lt;xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName&gt;。&lt;/xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName&gt;が含まれています</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>It behaves exactly as &lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt;。&lt;/xref:System.Collections.Hashtable.ContainsKey%2A&gt;とまったく同じように動作します。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;メソッド<ph id="ph1">`item`</ph>項目が存在するかどうかを確認します&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework の以前のバージョンでは、この決定を使用して行われた、&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;のメソッド、<ph id="ph1">`item`</ph>コレクション内のオブジェクトのパラメーターです&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The key to locate in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">内で検索するキー、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> contains an element with the specified key; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、指定した要素が含まれるキー、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> contains a specific key.</source>
          <target state="translated">指定するかどうか、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>特定のキーが含まれています。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>This method behaves exactly as &lt;xref:System.Collections.Hashtable.Contains%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Hashtable.Contains%2A&gt;。&lt;/xref:System.Collections.Hashtable.Contains%2A&gt;とまったく同じようにこのメソッドを動作します。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;メソッド<ph id="ph1">`item`</ph>項目が存在するかどうかを確認します&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework の以前のバージョンでは、この決定を使用して行われた、&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;のメソッド、<ph id="ph1">`item`</ph>コレクション内のオブジェクトのパラメーターです&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The key to locate in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">内で検索するキー、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> contains an element with the specified key; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、指定した要素が含まれるキー、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> contains a specific value.</source>
          <target state="translated">指定するかどうか、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>特定の値が含まれています。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The values of the elements of the &lt;xref:System.Collections.Hashtable&gt; are compared to the specified value using the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">要素の値、&lt;xref:System.Collections.Hashtable&gt;を使用して、指定した値と比較されます、&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;メソッド<ph id="ph1">`item`</ph>項目が存在するかどうかを確認します&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework の以前のバージョンでは、この決定を使用して行われた、&lt;xref:System.Object.Equals%2A&gt;と&lt;xref:System.IComparable.CompareTo%2A&gt;のメソッド、<ph id="ph1">`item`</ph>コレクション内のオブジェクトのパラメーターです&lt;/xref:System.IComparable.CompareTo%2A&gt;&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The value to locate in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">内で検索する値、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> contains an element with the specified <bpt id="p3">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、指定した要素が含まれる<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p3">&lt;/code&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> elements to a one-dimensional &lt;xref:System.Array&gt; instance at the specified index.</source>
          <target state="translated">コピー、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要素を&amp;1; 次元&lt;xref:System.Array&gt;インスタンスの指定したインデックス位置&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;列挙&lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;同じ順序で&lt;/xref:System.Array&gt;要素のコピーします。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>To copy only the keys in the &lt;xref:System.Collections.Hashtable&gt;, use <ph id="ph1">`Hashtable.Keys.CopyTo`</ph>.</source>
          <target state="translated">内のキーのみをコピーする、&lt;xref:System.Collections.Hashtable&gt;を使用して<ph id="ph1">`Hashtable.Keys.CopyTo`</ph>&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>To copy only the values in the &lt;xref:System.Collections.Hashtable&gt;, use <ph id="ph1">`Hashtable.Values.CopyTo`</ph>.</source>
          <target state="translated">値だけをコピーする、&lt;xref:System.Collections.Hashtable&gt;を使用して<ph id="ph1">`Hashtable.Values.CopyTo`</ph>&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the &lt;xref:System.Collections.DictionaryEntry&gt; objects copied from <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 次元&lt;xref:System.Array&gt;のコピー先は、&lt;xref:System.Collections.DictionaryEntry&gt;からコピーされるオブジェクト<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.DictionaryEntry&gt; &lt;/xref:System.Array&gt; 。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0 から始まるインデックス番号が必要です&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">内の&amp;0; から始まるインデックス<ph id="ph1">`array`</ph>コピーの開始位置。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>多次元です。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">- または - ソース内の要素の数<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>から使用可能な領域より大きくなって<ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph>変換先の末尾に<ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">ソースの種類<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変換先の型に自動的にキャストすることはできません<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Gets the number of key/value pairs contained in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれているキー/値ペアの数を取得、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The number of key/value pairs contained in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれているキー/値ペアの数、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Gets the &lt;xref:System.Collections.IEqualityComparer&gt; to use for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、&lt;xref:System.Collections.IEqualityComparer&gt;に使用する、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; includes both the comparer and the hash code provider.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;、比較演算子と、ハッシュ コード プロバイダーの両方が含まれています&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.</source>
          <target state="translated">場合、&lt;xref:System.Collections.IEqualityComparer&gt;で使用される、&lt;xref:System.Collections.Hashtable&gt;コンス トラクター、オブジェクト内のキーとして使用する、&lt;xref:System.Collections.Hashtable&gt;をオーバーライドする必要はありません、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;と&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.IEqualityComparer&gt;。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IEqualityComparer&gt; to use for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEqualityComparer&gt;に使用する、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEqualityComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The property is set to a value, but the hash table was created using an <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and an &lt;xref:System.Collections.IComparer&gt;.</source>
          <target state="translated">値に設定されますが、ハッシュ テーブルは、使用して作成された、 <bpt id="p1">&lt;xref href="System.Collections.IHashCodeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Collections.IComparer&gt;&lt;/xref:System.Collections.IComparer&gt; 。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; that iterates through the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、&lt;xref:System.Collections.IDictionaryEnumerator&gt;を反復処理する、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IDictionaryEnumerator&gt; 。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>[Visual Basic, C#]       The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">[Visual Basic、C# の場合]      <ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがってを使用して<ph id="ph1">`foreach`</ph>列挙子を直接操作せずにお勧めします。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;列挙子をこの位置に戻さ点もあります。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">この位置にある&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">したがって、 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;いずれかのまで同じオブジェクトを返します&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;または&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;次の要素にします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返します<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;を返すことも<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">場合は、最後の呼び出し&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返される<ph id="ph1">`false`</ph>、&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;再度、コレクションの最初の要素に&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;続けて&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;を呼び出すことができます&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;を設定するには</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションには、変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</source>
          <target state="translated">列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は本質的にスレッド セーフな処理</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装しなければなりません。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.</source>
          <target state="translated">列挙子をシリアル化とシリアル化するため、&lt;xref:System.Collections.Hashtable&gt;の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;メソッド&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IDictionaryEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Returns the hash code for the specified key.</source>
          <target state="translated">指定されたキーのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>If the hash table was created with a specific &lt;xref:System.Collections.IHashCodeProvider&gt; implementation, this method uses that hash code provider; otherwise, it uses the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; implementation of <ph id="ph1">`key`</ph>.</source>
          <target state="translated">ハッシュ テーブルの作成時、特定の&lt;xref:System.Collections.IHashCodeProvider&gt;実装では、このメソッドは、そのハッシュ コード プロバイダーを使用して、それ以外の場合、使用、&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の実装<ph id="ph1">`key`</ph>&lt;/xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;&lt;/xref:System.Collections.IHashCodeProvider&gt;。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; for which a hash code is to be returned.</source>
          <target state="translated">&lt;xref:System.Object&gt;が返されるハッシュ コード&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The hash code for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">ハッシュ コード<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Implements the <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface and returns the data needed to serialize the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">実装して、 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インターフェイスし、シリアル化に必要なデータを返します、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the information required to serialize the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトをシリアル化するために必要な情報を含む、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object containing the source and destination of the serialized stream associated with the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A&lt;xref:System.Runtime.Serialization.StreamingContext&gt;オブジェクト ソースと関連付けられているシリアル化されたストリームの先を含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Runtime.Serialization.StreamingContext&gt; 。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The collection was modified.</source>
          <target state="translated">コレクションが変更されました。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Gets or sets the object that can dispense hash codes.</source>
          <target state="translated">取得またはハッシュ コードを提供するオブジェクトを設定します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The object that can dispense hash codes.</source>
          <target state="translated">ハッシュ コードを提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The property is set to a value, but the hash table was created using an &lt;xref:System.Collections.IEqualityComparer&gt;.</source>
          <target state="translated">値に設定されますが、 &lt;xref:System.Collections.IEqualityComparer&gt;。&lt;/xref:System.Collections.IEqualityComparer&gt;を使用してハッシュ テーブルの作成</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のサイズが固定されています。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">固定サイズ コレクションできない追加または削除の要素のコレクションが作成された後で既存の要素は変更できます。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has a fixed size; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が固定サイズです。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用であるコレクション追加、削除、または要素の変更後にできません、コレクションを作成します。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is read-only; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>は読み取り専用です。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">アクセスをするかどうかを示す値を取得、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が同期されている (スレッド セーフである)。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Collections.Hashtable&gt; can support one writer and multiple readers concurrently.</source>
          <target state="translated">A &lt;xref:System.Collections.Hashtable&gt;1 つのライターと複数リーダー同時にサポートできます&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>To support multiple writers, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Hashtable.Synchronized%2A&gt; method.</source>
          <target state="translated">複数のライターをサポートするために、によって返されるラッパーを介してすべての操作を行う必要があります、&lt;xref:System.Collections.Hashtable.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Hashtable.Synchronized%2A&gt;。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフな方法です。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt; during the entire enumeration:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)</ept><ept id="p5">]</ept></source>
          <target state="translated">次のコード例を使用してコレクションをロックする方法を示しています、&lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt;列挙中に: <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)</ept><ept id="p3">]</ept><bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p6">](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)</ept> <ept id="p5">]</ept>     &lt;/xref:System.Collections.Hashtable.SyncRoot%2A&gt;</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if access to the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合へのアクセス、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が同期 (スレッド セーフな) です。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Gets or sets the value associated with the specified key.</source>
          <target state="translated">取得または指定されたキーに関連付けられている値を設定します。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。<ph id="ph1">`myCollection[key]`</ph>です。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>You can also use the Item property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Hashtable&gt;; for example, <ph id="ph1">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">存在しないキーの値を設定して新しい要素を追加する項目のプロパティを使用することもできます、&lt;xref:System.Collections.Hashtable&gt;たとえば、 <ph id="ph1">`myCollection["myNonexistentKey"] = myValue`</ph>。&lt;/xref:System.Collections.Hashtable&gt; 。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>However, if the specified key already exists in the &lt;xref:System.Collections.Hashtable&gt;, setting the Item property overwrites the old value.</source>
          <target state="translated">ただしで指定したキーが既に存在する場合、 &lt;xref:System.Collections.Hashtable&gt;、古い値を上書きする項目のプロパティを設定します&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;xref:System.Collections.Hashtable.Add%2A&gt; method does not modify existing elements.</source>
          <target state="translated">これに対し、&lt;xref:System.Collections.Hashtable.Add%2A&gt;メソッドでは、既存の要素は変更しません&lt;/xref:System.Collections.Hashtable.Add%2A&gt;。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>値を指定できますが、します。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>To distinguish between <ph id="ph1">`null`</ph> that is returned because the specified key is not found and <ph id="ph2">`null`</ph> that is returned because the value of the specified key is <ph id="ph3">`null`</ph>, use the &lt;xref:System.Collections.Hashtable.Contains%2A&gt; method or the &lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt; method to determine if the key exists in the list.</source>
          <target state="translated">区別するために<ph id="ph1">`null`</ph>指定したキーが見つからないため、返されると<ph id="ph2">`null`</ph>指定したキーの値が返される<ph id="ph3">`null`</ph>を使用して、&lt;xref:System.Collections.Hashtable.Contains%2A&gt;メソッドまたは&lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt;一覧で、キーが存在するかどうかを決定するメソッド&lt;/xref:System.Collections.Hashtable.ContainsKey%2A&gt;&lt;/xref:System.Collections.Hashtable.Contains%2A&gt;。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the &lt;xref:System.Collections.IList.Item%2A&gt; property.</source>
          <target state="translated">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、&lt;xref:System.Collections.IList.Item%2A&gt;プロパティ&lt;/xref:System.Collections.IList.Item%2A&gt;。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Visual Basic implements Item as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic では、同様のインデックス機能を提供する既定のプロパティとして項目を実装します。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The key whose value to get or set.</source>
          <target state="translated">キー値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The value associated with the specified key.</source>
          <target state="translated">指定したキーに関連付けられている値。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>If the specified key is not found, attempting to get it returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, and attempting to set it creates a new element using the specified key.</source>
          <target state="translated">返しますを取得しようとして、指定したキーが見つからない場合<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、し、指定したキーを使用して、新しい要素を作成するように設定しようとしています。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The property is set and the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated">プロパティが設定され、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>-or-       The property is set, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> does not exist in the collection, and the <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">- または - プロパティが設定されて、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">key</ph> <ept id="p1">&lt;/code&gt;</ept> 、コレクションに存在しません、 <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>固定サイズです。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Compares a specific &lt;xref:System.Object&gt; with a specific key in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">特定の比較&lt;xref:System.Object&gt;内の特定のキーを持つ、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>If the hash table was created with a specific &lt;xref:System.Collections.IComparer&gt; implementation, this method uses that comparer; that is, &lt;xref:System.Collections.IComparer.Compare%2A&gt; (<ph id="ph1">`item`</ph>, <ph id="ph2">`key`</ph>).</source>
          <target state="translated">ハッシュ テーブルの作成時、特定の&lt;xref:System.Collections.IComparer&gt;実装では、このメソッドを使用してその; 比較できる比較演算子は、 &lt;xref:System.Collections.IComparer.Compare%2A&gt;(<ph id="ph1">`item`</ph>、 <ph id="ph2">`key`</ph>).&lt;/xref:System.Collections.IComparer.Compare%2A&gt; &lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Otherwise, it uses <ph id="ph1">`item.Equals(key)`</ph>.</source>
          <target state="translated">それ以外の場合、使用して<ph id="ph1">`item.Equals(key)`</ph>です。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to compare with <ph id="ph1">`key`</ph>.</source>
          <target state="translated">&lt;xref:System.Object&gt;と比較する<ph id="ph1">`key`</ph>&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The key in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to compare with <ph id="ph1">`item`</ph>.</source>
          <target state="translated">内のキー、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>と比較する<ph id="ph1">`item`</ph>です。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p2">&lt;/code&gt;</ept> and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p3">&lt;/code&gt;</ept> are equal; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p2">&lt;/code&gt;</ept> and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p3">&lt;/code&gt;</ept> are equal; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;item&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;item&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Gets an &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、&lt;xref:System.Collections.ICollection&gt;内のキーを含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.ICollection&gt; 。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The order of the keys in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated values in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Hashtable.Values%2A&gt; method.</source>
          <target state="translated">内のキーの順序、&lt;xref:System.Collections.ICollection&gt;は指定しませんが、関連付けられている値と同じ順序、&lt;xref:System.Collections.ICollection&gt;によって返される、&lt;xref:System.Collections.Hashtable.Values%2A&gt;メソッド&lt;/xref:System.Collections.Hashtable.Values%2A&gt;&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the keys in the original &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">返された&lt;xref:System.Collections.ICollection&gt;静的コピーではありません代わりに、 &lt;xref:System.Collections.ICollection&gt; &lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;は元のキーを逆参照&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Therefore, changes to the &lt;xref:System.Collections.Hashtable&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">そのため、変更&lt;xref:System.Collections.Hashtable&gt;&lt;xref:System.Collections.ICollection&gt;。&lt;/xref:System.Collections.ICollection&gt;反映されるまでに続行&lt;/xref:System.Collections.Hashtable&gt;するには</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;内のキーを含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.ICollection&gt; 。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Implements the <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface and raises the deserialization event when the deserialization is complete.</source>
          <target state="translated">実装して、 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インターフェイスし、逆シリアル化が完了すると、逆シリアル化イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Hashtable.Count%2A&gt;.&lt;/xref:System.Collections.Hashtable.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.</source>
          <target state="translated">列挙子をシリアル化とシリアル化するため、&lt;xref:System.Collections.Hashtable&gt;の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;メソッド&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The source of the deserialization event.</source>
          <target state="translated">逆シリアル化イベントのソース。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object associated with the current <bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is invalid.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトに現在関連付けられている<bpt id="p2">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>が無効です。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Removes the element with the specified key from the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定したキーを持つ要素を削除、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Collections.Hashtable&gt; does not contain an element with the specified key, the &lt;xref:System.Collections.Hashtable&gt; remains unchanged.</source>
          <target state="translated">場合、&lt;xref:System.Collections.Hashtable&gt;指定のキーを持つ要素が含まれていない、&lt;xref:System.Collections.Hashtable&gt;は変更されません&lt;/xref:System.Collections.Hashtable&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>No exception is thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The key of the element to remove.</source>
          <target state="translated">削除する要素のキー。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のサイズが固定されています。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Returns a synchronized (thread-safe) wrapper for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">同期 (スレッド セーフである) ラッパーを返します、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The Synchronized method is thread safe for multiple readers and writers.</source>
          <target state="translated">同期メソッドは、スレッド セーフの複数のリーダーとライターです。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.</source>
          <target state="translated">さらに、同期されたラッパーでは、書き込み、一度に&amp;1; つだけのライターがあることが確認されます。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt; during the entire enumeration:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)</ept><ept id="p5">]</ept>       This method is an O(1) operation.</source>
          <target state="translated">次のコード例を使用してコレクションをロックする方法を示しています、&lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt;列挙中に: <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)</ept><ept id="p3">]</ept><bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p6">](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)</ept> <ept id="p5">]</ept>このメソッドは、o (1) 操作になります    &lt;/xref:System.Collections.Hashtable.SyncRoot%2A&gt;。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>同期するためにします。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>A synchronized (thread-safe) wrapper for the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A 同期 (スレッド セーフである) ラッパーを<bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクセスを同期するために使用できるオブジェクトを取得、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>To create a synchronized version of the &lt;xref:System.Collections.Hashtable&gt;, use the &lt;xref:System.Collections.Hashtable.Synchronized%2A&gt; method.</source>
          <target state="translated">同期されたバージョンを作成する、&lt;xref:System.Collections.Hashtable&gt;を使用して、&lt;xref:System.Collections.Hashtable.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Hashtable.Synchronized%2A&gt;&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Hashtable&gt; using the SyncRoot property.</source>
          <target state="translated">ただし、派生クラスは、独自の同期されたバージョンを指定、 &lt;xref:System.Collections.Hashtable&gt;SyncRoot プロパティを使用します&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Hashtable&gt;, not directly on the &lt;xref:System.Collections.Hashtable&gt; .</source>
          <target state="translated">同期されたコードでの操作を実行する必要があります、 &lt;xref:System.Collections.Hashtable&gt;、 &lt;xref:System.Collections.Hashtable&gt;.&lt;/xref:System.Collections.Hashtable&gt;で直接&lt;/xref:System.Collections.Hashtable&gt;</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">これにより、他のオブジェクトから派生したコレクションを適切に操作します。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Hashtable&gt; object.</source>
          <target state="translated">具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、&lt;xref:System.Collections.Hashtable&gt;オブジェクト&lt;/xref:System.Collections.Hashtable&gt;。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフな方法です。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)</ept><ept id="p5">]</ept></source>
          <target state="translated">次のコード例は、列挙中に、SyncRoot を使用して、コレクションをロックする方法を示します: <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)</ept><ept id="p3">]</ept><bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>クラシック Hashtable.IsSynchronized 例&amp;2;    <ept id="p6">](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)</ept><ept id="p5">]</ept></target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクセスを同期するために使用できるオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>[Visual Basic, C#]       The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">[Visual Basic、C# の場合]      <ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがってを使用して<ph id="ph1">`foreach`</ph>列挙子を直接操作せずにお勧めします。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;列挙子をこの位置に戻さ点もあります。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.</source>
          <target state="translated">この位置で、呼び出す&lt;xref:System.Collections.IEnumerator.Current%2A&gt;例外をスローします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">したがって、 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;いずれかのまで同じオブジェクトを返します&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;または&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;次の要素にします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返します<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;を返すことも<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.</source>
          <target state="translated">場合は、最後の呼び出し&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返される<ph id="ph1">`false`</ph>、呼び出し元&lt;xref:System.Collections.IEnumerator.Current%2A&gt;例外をスローします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;再度、コレクションの最初の要素に&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;続けて&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;を呼び出すことができます&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;を設定するには</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">コレクションの変更が加えられた場合、列挙子の無効化など、追加、変更、または要素を削除すると、なり、次を&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;xref:System.InvalidOperationException&gt;。&lt;/xref:System.InvalidOperationException&gt;をスロー&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;または&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">間で、コレクションが変更された場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;と&lt;xref:System.Collections.IEnumerator.Current%2A&gt;、&lt;xref:System.Collections.IEnumerator.Current%2A&gt;列挙子が既に無効になっている場合でもに設定されている要素を返します&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</source>
          <target state="translated">列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は本質的にスレッド セーフな処理</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; that can be used to iterate through the collection.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator&gt;コレクションを反復処理に使用できる&lt;/xref:System.Collections.IEnumerator&gt;。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Gets an &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、&lt;xref:System.Collections.ICollection&gt;の値を含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.ICollection&gt; 。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The order of the values in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated keys in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Hashtable.Keys%2A&gt; method.</source>
          <target state="translated">内の値の順序、&lt;xref:System.Collections.ICollection&gt;は指定しませんが、関連付けられているキーと同じ順序、&lt;xref:System.Collections.ICollection&gt;によって返される、&lt;xref:System.Collections.Hashtable.Keys%2A&gt;メソッド&lt;/xref:System.Collections.Hashtable.Keys%2A&gt;&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the values in the original &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">返された&lt;xref:System.Collections.ICollection&gt;静的コピーではありません代わりに、 &lt;xref:System.Collections.ICollection&gt; &lt;xref:System.Collections.Hashtable&gt;。&lt;/xref:System.Collections.Hashtable&gt;は元の値を逆参照&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Therefore, changes to the &lt;xref:System.Collections.Hashtable&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">そのため、変更&lt;xref:System.Collections.Hashtable&gt;&lt;xref:System.Collections.ICollection&gt;。&lt;/xref:System.Collections.ICollection&gt;反映されるまでに続行&lt;/xref:System.Collections.Hashtable&gt;するには</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;の値を含む、 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.ICollection&gt; 。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>