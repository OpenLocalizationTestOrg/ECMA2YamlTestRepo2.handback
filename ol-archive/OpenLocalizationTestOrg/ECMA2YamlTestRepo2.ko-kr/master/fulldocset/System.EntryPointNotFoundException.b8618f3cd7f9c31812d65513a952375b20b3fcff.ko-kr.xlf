<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0534d815a44e5eef8224016b2183acc6d8f0ff24</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.EntryPointNotFoundException.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65687a1c5d0c79b71db55b3d30dfa6877c3d104d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fc7bed916b1d36594f8ce77813370676a4c46f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</source>
          <target state="translated">진입 메서드가 없어서 클래스를 로드 시도가 실패 한 경우 throw 되는 예외입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An EntryPointNotFoundException exception is thrown when the common language runtime is unable to load an assembly because it cannot identify the assembly's entry point.</source>
          <target state="translated">EntryPointNotFoundException 예외는 공용 언어 런타임에서 어셈블리의 진입점을 식별할 수 없는 어셈블리를 로드할 수 없는 경우 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown under the following conditions:      -   The common language runtime is unable to locate an application entry point (typically a <ph id="ph1">`Main`</ph> method) in an executable assembly.</source>
          <target state="translated">다음과 같은 경우이 예외가 throw 될 수 있습니다:-공용 언어 런타임 응용 프로그램 진입점을 찾을 수 없으면 (일반적으로 <ph id="ph1">`Main`</ph> 메서드)에서 실행 가능한 어셈블리.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application entry point must be a global or <ph id="ph1">`static`</ph> method that has either no parameters or a string array as its only parameter.</source>
          <target state="translated">응용 프로그램 진입점이 전역 여야 합니다 또는 <ph id="ph1">`static`</ph> 메서드 매개 변수 없이 또는 유일한 매개 변수로 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The entry point can return <ph id="ph1">`void`</ph>, or it can return an &lt;xref:System.Int32&gt; or &lt;xref:System.UInt32&gt; exit code.</source>
          <target state="translated">진입점을 반환할 수 있습니다 <ph id="ph1">`void`</ph>를 반환할 수 있습니다는 &lt;xref:System.Int32&gt;또는 &lt;xref:System.UInt32&gt;종료 코드.&lt;/xref:System.UInt32&gt; &lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application assembly cannot define more than one entry point.</source>
          <target state="translated">응용 프로그램 어셈블리에는 둘 이상의 진입점을 정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The call to a function in a Windows DLL cannot be resolved because the function cannot be found.</source>
          <target state="translated">-함수를 찾을 수 없으므로 Windows DLL에서 함수 호출을 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, an EntryPointNotFoundException exception is thrown because User32.dll does not include a function named <ph id="ph1">`GetMyNumber`</ph>.</source>
          <target state="translated">다음 예에서 EntryPointNotFoundException 예외가 User32.dll 라는 함수가 포함 되어 있지 않으므로 <ph id="ph1">`GetMyNumber`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#1<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_1.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#1<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_1.vb)</ept><ept id="p3">]</ept>      -   The call to a function in a Windows DLL cannot be resolved because the name used in the method call does not match a name found in the assembly.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#1<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#1<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_1.vb)</ept> <ept id="p3">]</ept> -메서드 호출에 사용 된 어셈블리의 이름이 일치 하지 않으므로 Windows DLL의 함수 호출에 확인할 수 없습니다.      </target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Frequently, this occurs because the &lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName&gt; field is either implicitly or explicitly set to <ph id="ph1">`true`</ph>, the called method includes one or more string parameters and has both an ANSI and a Unicode version, and the name used in the method call does not correspond to the name of this ANSI or Unicode version.</source>
          <target state="translated">대부분의 경우이 때문에 발생는 &lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName&gt;필드를로 암시적 또는 명시적으로 설정 <ph id="ph1">`true`</ph>, 호출된 된 메서드가 하나 이상의 문자열 매개 변수를 포함 한 ANSI 및 유니코드 버전 하 고 메서드 호출에 사용 된이 ANSI 또는 유니코드 버전의 이름과 일치 하지 않습니다.&lt;/xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides an illustration by attempting to call the Windows <ph id="ph1">`MessageBox`</ph> function in User32.dll.</source>
          <target state="translated">다음 예제에서는 Windows 호출을 시도 하 여 그림을 제공 <ph id="ph1">`MessageBox`</ph> User32.dll의 함수입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the first method definition specifies &lt;xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName&gt; for string marshaling, the common language looks for the wide-character version of the function, <ph id="ph1">`MessageBoxW`</ph>, instead of the name used in the method call, <ph id="ph2">`MessageBox`</ph>.</source>
          <target state="translated">첫 번째 메서드 정의 지정 하기 때문에 &lt;xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName&gt;문자열 마샬링에 함수의 와이드 문자 버전에 대 한 공용 언어 찾습니다 <ph id="ph1">`MessageBoxW`</ph>, 메서드 호출에 사용 되는 이름 대신 <ph id="ph2">`MessageBox`</ph>.&lt;/xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second method definition corrects this problem by calling the <ph id="ph1">`MessageBoxW`</ph> instead of the <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">호출 하 여이 문제를 해결 하는 두 번째 메서드 정의 <ph id="ph1">`MessageBoxW`</ph> 대신는 <ph id="ph2">`MessageBox`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#2<ept id="p2">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_2.vb)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#2<ept id="p4">](~/add/codesnippet/csharp/t-system.entrypointnotfo_2.cs)</ept><ept id="p3">]</ept>      -   You are trying to call a function in a dynamic link library by its simple name rather than its decorated name.</source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#2<ept id="p2">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_2.vb)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#2<ept id="p4">](~/add/codesnippet/csharp/t-system.entrypointnotfo_2.cs)</ept> <ept id="p3">]</ept> -트 데코 레이 된 이름이 아닌 간단한 이름은 동적 연결 라이브러리에는 함수를 호출 하려고 합니다.      </target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the C++ compiler generates a decorated name for DLL functions.</source>
          <target state="translated">일반적으로 c + + 컴파일러는 DLL 함수에 대 한 데코 레이트 된 이름을 생성합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C++ code defines a function named <ph id="ph1">`Double`</ph> in a library named TestDll.dll.</source>
          <target state="translated">다음 c + + 코드 라는 함수를 정의 하는 예를 들어 <ph id="ph1">`Double`</ph> TestDll.dll 라는 라이브러리에 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#6<ept id="p2">](~/add/codesnippet/cpp/testdll/testdll.cpp#6)</ept><ept id="p1">]</ept>           When the code in the following example tries to call the function, an EntryPointNotFoundException exception is thrown because the <ph id="ph1">`Double`</ph> function cannot be found.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#6<ept id="p2">](~/add/codesnippet/cpp/testdll/testdll.cpp#6)</ept> <ept id="p1">]</ept> 다음 예제에서 코드에 함수를 호출 하려고 EntryPointNotFoundException 예외가 발생 하기 때문에 <ph id="ph1">`Double`</ph> 함수를 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#7<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_4.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#7<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_4.vb)</ept><ept id="p3">]</ept>           However, if the function is called by using its decorated name (in this case, <ph id="ph1">`?Double@@YAHH@Z`</ph>), the function call succeeds, as the following example shows.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>그러나 System.EntryPointNotFoundException.Class#7<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_4.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#7<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_4.vb)</ept> <ept id="p3">]</ept> 함수가 데코 레이트 된 이름을 사용 하 여 호출 되는 경우 (이 경우 <ph id="ph1">`?Double@@YAHH@Z`</ph>), 다음 예제와 같이 함수 호출이 성공 합니다.      </target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#8<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_5.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#8<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_5.vb)</ept><ept id="p3">]</ept>           You can find the decorated names of functions exported by a DLL by using a utility such as Dumpbin.exe.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#8<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_5.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#8<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_5.vb)</ept> <ept id="p3">]</ept> Dumpbin.exe와 같은 유틸리티를 사용 하 여 DLL에서 내보내기 함수의 데코 레이트 된 이름을 찾을 수 있습니다.      </target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   You are attempting to call a method in a managed assembly as if it were an unmanaged dynamic link library.</source>
          <target state="translated">-관리 되지 않는 동적 연결 라이브러리 처럼 관리 되는 어셈블리의 메서드를 호출 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>To see this in action, compile the following example to an assembly named StringUtilities.dll.</source>
          <target state="translated">예를 보려면, StringUtilities.dll 이라는 어셈블리를 다음 예제를 컴파일하십시오.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#3<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_6.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_6.vb)</ept><ept id="p3">]</ept>           Then compile and execute the following example, which attempts to call the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method in the StringUtilities.dll dynamic link library as if it were unmanaged code.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#3<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_6.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_6.vb)</ept> <ept id="p3">]</ept> 컴파일하고 호출 하려고 하는 다음 예제를 실행 한 다음는 <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> StringUtilities.dll 동적 연결 라이브러리에서 메서드가 마치 비관리 코드 처럼 합니다.      </target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is an EntryPointNotFoundException exception.</source>
          <target state="translated">결과는 EntryPointNotFoundException 예외입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#4<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_7.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#4<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_7.vb)</ept><ept id="p3">]</ept>           To eliminate the exception, add a reference to the managed assembly and access the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method just as you would access any other method in managed code, as the following example does.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#4<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_7.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#4<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_7.vb)</ept> <ept id="p3">]</ept> 예외를 제거 하려면 관리 되는 어셈블리 및 액세스에 대 한 참조를 추가 <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> 메서드 다음 예제에서는 마찬가지로 관리 코드에서 다른 메서드 액세스와 같은 방법으로 합니다.      </target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#5<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_8.cs)</ept><ept id="p1">]</ept>      <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#5<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_8.vb)</ept><ept id="p3">]</ept>      -   You are trying to call a method in a COM DLL as if it were a Windows DLL.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.EntryPointNotFoundException.Class#5<ept id="p2">](~/add/codesnippet/csharp/t-system.entrypointnotfo_8.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.EntryPointNotFoundException.Class#5<ept id="p4">](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_8.vb)</ept> <ept id="p3">]</ept> -마치 Windows DLL 것 처럼 COM DLL의 메서드를 호출 하려고 합니다.      </target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To access a COM DLL, select the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> option in Visual Studio to add a reference to the project, and then select the type library from the <bpt id="p2">**</bpt>COM<ept id="p2">**</ept> tab.</source>
          <target state="translated">COM DLL에 액세스 하려면는 <bpt id="p1">**</bpt>참조 추가<ept id="p1">**</ept> 프로젝트에 대 한 참조를 추가 하 고 다음에서 형식 라이브러리를 선택 하려면 Visual Studio의 옵션은 <bpt id="p2">**</bpt>COM<ept id="p2">**</ept> 탭 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of initial property values for an instance of EntryPointNotFoundException, see the &lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt; constructors.</source>
          <target state="translated">목록이 EntryPointNotFoundException의 인스턴스에 대 한 초기 속성 값에 대 한 참조는 &lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt;생성자.&lt;/xref:System.EntryPointNotFoundException.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the &lt;xref:System.Exception.Message%2A&gt; property of the new instance to a system-supplied message that describes the error, such as "Entry point was not found."</source>
          <target state="translated">이 생성자에는 &lt;xref:System.Exception.Message%2A&gt;속성의 새 인스턴스를 "입력이 지점을 찾지 못했습니다." 오류를 설명 하는 시스템 제공 메시지로&lt;/xref:System.Exception.Message%2A&gt; 초기화합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">이 메시지는 현재 시스템 문화권을 고려 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.EntryPointNotFoundException&gt;.</source>
          <target state="translated">다음 표에서 &lt;xref:System.EntryPointNotFoundException&gt;안내 하십시오.&lt;/xref:System.EntryPointNotFoundException&gt; 인스턴스에 대 한 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).|   |&lt;xref:System.TypeLoadException.Message%2A&gt;|The localized error message string.|</source>
          <target state="translated">| 속성 | 값 |   |--------------|-----------|   | &lt;xref:System.Exception.InnerException%2A&gt;| Null 참조 (<ph id="ph1">`Nothing`</ph> Visual basic에서). |   | &lt;xref:System.TypeLoadException.Message%2A&gt;| 지역화 된 오류 메시지 문자열입니다. |&lt;/xref:System.TypeLoadException.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified error message.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 오류 메시지를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated">내용을 <ph id="ph1">`message`</ph> 사람이 이해할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">이 생성자의 호출자는이 문자열이 현재 시스템 문화권에 맞게 지역화 되었는지 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.EntryPointNotFoundException&gt;.</source>
          <target state="translated">다음 표에서 &lt;xref:System.EntryPointNotFoundException&gt;안내 하십시오.&lt;/xref:System.EntryPointNotFoundException&gt; 인스턴스에 대 한 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).|   |&lt;xref:System.TypeLoadException.Message%2A&gt;|The error message string.|</source>
          <target state="translated">| 속성 | 값 |   |--------------|-----------|   | &lt;xref:System.Exception.InnerException%2A&gt;| Null 참조 (<ph id="ph1">`Nothing`</ph> Visual basic에서). |   | &lt;xref:System.TypeLoadException.Message%2A&gt;| 오류 메시지 문자열입니다. |&lt;/xref:System.TypeLoadException.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">예외에 대 한 이유를 설명 하는 오류 메시지입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with serialized data.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> serialize 된 데이터 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">이 생성자는 스트림을 통해 전송 된 예외 개체를 다시 구성 하기 위해 역직렬화 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">직렬화 된 개체 데이터를 보유 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The contextual information about the source or destination.</source>
          <target state="translated">소스 또는 대상에 대 한 컨텍스트 정보입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.EntryPointNotFoundException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 오류 메시지와 해당 예외의 원인인 내부 예외에 대 한 참조를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the &lt;xref:System.Exception.InnerException%2A&gt; property.</source>
          <target state="translated">이전 예외의 직접적인 결과에 이전 예외에 대 한 참조가 들어 있어야 throw 되는 예외는 &lt;xref:System.Exception.InnerException%2A&gt;속성.&lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;생성자 또는 null 참조로 전달 되는 동일한 값을 반환 하는 속성 (<ph id="ph1">`Nothing`</ph> Visual basic에서) 하는 경우는 &lt;xref:System.Exception.InnerException%2A&gt;생성자에 내부 예외 값을 제공 하지 않는.&lt;/xref:System.Exception.InnerException%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.EntryPointNotFoundException&gt;.</source>
          <target state="translated">다음 표에서 &lt;xref:System.EntryPointNotFoundException&gt;안내 하십시오.&lt;/xref:System.EntryPointNotFoundException&gt; 인스턴스에 대 한 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|The inner exception reference.|   |&lt;xref:System.TypeLoadException.Message%2A&gt;|The error message string.|</source>
          <target state="translated">| 속성 | 값 |   |--------------|-----------|   | &lt;xref:System.Exception.InnerException%2A&gt;| 내부 예외를 참조 합니다. |   | &lt;xref:System.TypeLoadException.Message%2A&gt;| 오류 메시지 문자열입니다. |&lt;/xref:System.TypeLoadException.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">예외에 대 한 이유를 설명 하는 오류 메시지입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">현재 예외의 원인인 예외입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`inner`</ph> parameter is not a null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic), the current exception is raised in a <bpt id="p2">&lt;xref uid="langword_csharp_catch" name="catch" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> block that handles the inner exception.</source>
          <target state="translated">경우는 <ph id="ph1">`inner`</ph> 매개 변수가 null 참조 하지 않습니다. (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual basic에서)에서 현재 예외가 발생 한 <bpt id="p2">&lt;xref uid="langword_csharp_catch" name="catch" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 내부 예외를 처리 하는 블록.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>