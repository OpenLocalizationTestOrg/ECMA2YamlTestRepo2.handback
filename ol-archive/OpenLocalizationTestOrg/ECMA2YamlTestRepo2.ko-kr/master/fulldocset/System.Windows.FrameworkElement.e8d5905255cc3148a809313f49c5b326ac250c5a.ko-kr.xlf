<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">240cb01b67f3abf3da391c82f2d161450765f3a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.FrameworkElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5e9acf034c8dff6a4736515728e55dda335e074</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2049bca0cb4e08ccb7c2174b1d632ea6a401253f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a WPF framework-level set of properties, events, and methods for <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> elements.</source>
          <target state="translated">속성, 이벤트 및 방법에 대 한 WPF 프레임 워크 수준 집합을 제공 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class represents the provided WPF framework-level implementation that is built on the WPF core-level <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> that are defined by <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 클래스는 WPF 핵심 수준에 제공 된 WPF 프레임 워크 수준 구현 나타냅니다 <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> 에 정의 된 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of &lt;xref:System.Windows.UIElement&gt; presentation services.</source>
          <target state="translated">FrameworkElement가 WPF 프레임 워크 수준 요소 클래스와의 WPF 핵심 수준 집합 사이의 연결 점을 한 &lt;xref:System.Windows.UIElement&gt;프레젠테이션 서비스.&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about these concepts, see <bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이러한 개념에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF 아키텍처<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>FrameworkElement extends &lt;xref:System.Windows.UIElement&gt; and adds the following capabilities:      -   <bpt id="p1">**</bpt>Layout system definition<ept id="p1">**</ept>: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">FrameworkElement 확장 &lt;xref:System.Windows.UIElement&gt;다음과 같은 기능을 추가 하 고:- <bpt id="p1">**</bpt>레이아웃 시스템 정의<ept id="p1">**</ept>: FrameworkElement 특정 WPF 프레임 워크 수준 구현 특정 &lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt; 가상 멤버로 정의 된 메서드를 제공&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most notably, FrameworkElement seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</source>
          <target state="translated">가장 주목할 만한 FrameworkElement 특정 WPF 핵심 수준 레이아웃 재정의가 봉인 하 고 대신 파생 된 클래스 WPF 프레임 워크 수준 동작을 재정의 해야를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, FrameworkElement seals &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; but provides &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.</source>
          <target state="translated">FrameworkElement &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;이지만 &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; 제공&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt; 을 봉인 하는 예를 들어</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any FrameworkElement derived class.</source>
          <target state="translated">이러한 변경 내용은 된다는 사실에 입각 WPF 프레임 워크 수준에 있는 전체 레이아웃 시스템 모든 FrameworkElement를 렌더링할 수 있는 원위치 파생 클래스를 반영 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>At the WPF core level, certain members that will structure a general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> based layout solution are in place, but the actual engine of the layout system is not defined.</source>
          <target state="translated">WPF 핵심 수준, 특정 구성원을 일반 구성 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 기반된 레이아웃 솔루션 장소에 있더라도 레이아웃 시스템의 실제 엔진 정의 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>레이아웃<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>The logical tree:<ept id="p1">**</ept> The general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> programming model is often expressed in terms of being a tree of elements.</source>
          <target state="translated">- <bpt id="p1">**</bpt>논리적 트리에서:<ept id="p1">**</ept> 일반 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 프로그래밍 모델은 종종 요소 트리 되 고 측면에서 표현 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the FrameworkElement level.</source>
          <target state="translated">FrameworkElement 수준에서 구현 되며 함께 나타날 태그에서 해당 트리를 정의 하는 것에 대 한 지원 및 논리적 트리 요소 트리를 표현 하 지원 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note however that FrameworkElement deliberately does not define a content model, and leaves that responsibility to derived classes.</source>
          <target state="translated">하지만 FrameworkElement 의도 한 대로 콘텐츠 모델을 정의 하지 않는 및 해당 작업 파생된 클래스가 수행 note 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Object lifetime events:<ept id="p1">**</ept> It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</source>
          <target state="translated">- <bpt id="p1">**</bpt>개체 수명을 이벤트:<ept id="p1">**</ept> 요소의 초기화 시기를 알고 유용 (생성자를 호출) 요소는 처음으로 로드 논리적 트리로 또는 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>FrameworkElement defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</source>
          <target state="translated">FrameworkElement 개체 수명 관련 된 다른 자식 요소를 추가 하는 등의 요소를 포함 하는 코드 숨김 작업에 대 한 유용한 후크를 제공 하는 여러 이벤트를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Support for data binding and dynamic resource references:<ept id="p1">**</ept> The property-level support for data binding and resources is implemented by the &lt;xref:System.Windows.DependencyProperty&gt; class and embodied in the property system, but the ability to resolve a member value that is stored as an &lt;xref:System.Windows.Expression&gt; (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement.</source>
          <target state="translated">- <bpt id="p1">**</bpt>데이터 바인딩 및 동적 리소스 참조에 대 한 지원:<ept id="p1">**</ept> 데이터 바인딩 및 리소스에 대 한 속성 수준 지원을 구현한는 &lt;xref:System.Windows.DependencyProperty&gt;클래스 및 속성 시스템 하지만로 저장 하는 멤버 값을 해결 하는 기능에 포함 된 프로그램 &lt;xref:System.Windows.Expression&gt;(데이터 바인딩 및 동적 리소스 둘 다의 기반이 되는 프로그래밍 구문) FrameworkElement에 의해 구현 됩니다.&lt;/xref:System.Windows.Expression&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 및 <bpt id="p2">[</bpt>XAML 리소스<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Styles:<ept id="p1">**</ept> FrameworkElement defines the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.</source>
          <target state="translated">- <bpt id="p1">**</bpt>스타일:<ept id="p1">**</ept> FrameworkElement 정의 &lt;xref:System.Windows.FrameworkElement.Style%2A&gt;속성.&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, FrameworkElement does not yet define support for templates, or support decorators.</source>
          <target state="translated">그러나 FrameworkElement가 아직 템플릿에 대 한 지원을 정의 또는 데코레이터를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>These features are introduced by control classes such as &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.</source>
          <target state="translated">이러한 기능 &lt;xref:System.Windows.Controls.Control&gt;및 &lt;xref:System.Windows.Controls.ContentControl&gt;.&lt;/xref:System.Windows.Controls.ContentControl&gt; &lt;/xref:System.Windows.Controls.Control&gt; 등의 컨트롤 클래스에 의해 도입 된</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>More animation support:<ept id="p1">**</ept> Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing &lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt; and related members.</source>
          <target state="translated">- <bpt id="p1">**</bpt>지원:<ept id="p1">**</ept> WPF 핵심 수준 일부 애니메이션 지원을 이미 정의 하지만 FrameworkElement를 구현 하 여이 확장 &lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;및 멤버를 관련.&lt;/xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>As can be seen from the class hierarchy, many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> classes derive from FrameworkElement, either directly or through intermediate base classes such as &lt;xref:System.Windows.Controls.Panel&gt; or &lt;xref:System.Windows.Controls.Control&gt;.</source>
          <target state="translated">클래스 계층 구조에서 볼 수 있듯이 많은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 직접 또는 &lt;xref:System.Windows.Controls.Panel&gt;또는 &lt;xref:System.Windows.Controls.Control&gt;.&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Panel&gt; 같은 중간 기본 클래스를 통해 FrameworkElement에서 파생 되는 클래스</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you intend to use FrameworkElement as a base class, you might want to first examine the existing derived classes.</source>
          <target state="translated">FrameworkElement를 기본 클래스로 사용 하려는 경우 먼저 기존의 파생 된 클래스를 검사 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">FrameworkElement 다양 한 기본 시나리오에 대 한 지원을 제공 하지만 또한 다양 한 기능을 만드는 데 사용 하는 빌딩 블록의 의미의 "요소"에 대해 적합 하지 않습니다 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> 에서 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> child elements.</source>
          <target state="translated">예를 들어, FrameworkElement는 true 콘텐츠 모델; 정의 하지 않습니다. FrameworkElement를 기본 클래스로 만들 수 있는 속성을 정의 하지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, you might want to look at &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.</source>
          <target state="translated">특히, 할 수 있습니다 &lt;xref:System.Windows.Controls.Control&gt;및 &lt;xref:System.Windows.Controls.ContentControl&gt;.&lt;/xref:System.Windows.Controls.ContentControl&gt; &lt;/xref:System.Windows.Controls.Control&gt; 살펴보고</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the rendered height of this element.</source>
          <target state="translated">이 요소의 렌더링 된 높이 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is a calculated value based on other height inputs, and the layout system.</source>
          <target state="translated">이 속성은 다른 높이 입력 레이아웃 시스템에 따라 계산된 된 값입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; that are the basis of the input change.</source>
          <target state="translated">값은 실제 렌더링 단계에 따라 레이아웃 시스템 자체에서 설정 되며 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;입력된 변경 기준인.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because ActualHeight is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">ActualHeight 계산된 된 값 이기 때문에 있을 수 여러 또는 증분 변경 내용에 다양 한 작업의 결과로 시스템에서 보고 레이아웃 인식 해야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">이 레이아웃 시스템 등 및 부모 요소에 의해 제약 조건, 자식 요소에 필요한 측정 공간을 계산할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.</source>
          <target state="translated">이 속성을 설정할 수 없어도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, 기준을 지정할 수는 &lt;xref:System.Windows.Trigger&gt;스타일의 해당 값에.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The element's height, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 높이에 값으로 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value is 0 (zero).</source>
          <target state="translated">기본값은 0 (영)입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ActualHeight*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.ActualHeight*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.ActualHeight*&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the rendered width of this element.</source>
          <target state="translated">이 요소의 렌더링 된 너비를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is a calculated value based on other width inputs, and the layout system.</source>
          <target state="translated">이 속성은 다른 너비 입력 레이아웃 시스템에 따라 계산된 된 값입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; that are the basis of the input change.</source>
          <target state="translated">값은 실제 렌더링 단계에 따라 레이아웃 시스템 자체에서 설정 되며 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;입력된 변경 기준인.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because ActualWidth is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">ActualWidth 계산된 된 값 이기 때문에 있을 수 여러 또는 증분 변경 내용에 다양 한 작업의 결과로 시스템에서 보고 레이아웃 인식 해야 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">이 레이아웃 시스템 등 및 부모 요소에 의해 제약 조건, 자식 요소에 필요한 측정 공간을 계산할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.</source>
          <target state="translated">이 속성을 설정할 수 없어도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, 기준을 지정할 수는 &lt;xref:System.Windows.Trigger&gt;스타일의 해당 값에.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The element's width, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 너비에 값으로 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default value is 0 (zero).</source>
          <target state="translated">기본값은 0 (영)입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ActualWidth*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.ActualWidth*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.ActualWidth*&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Adds the provided object to the logical tree of this element.</source>
          <target state="translated">이 요소의 논리적 트리에서에 제공된 된 개체를 추가합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method for the implementation of collections on objects that represent logical child elements of an element.</source>
          <target state="translated">이 메서드는 요소의 논리 자식 요소를 나타내는 개체에는 컬렉션의 구현에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</source>
          <target state="translated">속성 getter 또는 setter, Changed 이벤트, 생성자의 또는 컬렉션 형식 자체 내에서 처리 하는 클래스에서 자식 요소 컬렉션에 대 한 컬렉션 유지 관리를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</source>
          <target state="translated">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 것이 좋을 사용 가능한 기본 컨트롤 클래스에 대 한 콘텐츠 모델의 제어 시나리오에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.</source>
          <target state="translated">수준에서 서브클래싱 고려 &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, 및 &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.&lt;/xref:System.Windows.Controls.HeaderedItemsControl&gt; &lt;/xref:System.Windows.Controls.ItemsControl&gt; &lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>These classes provide a content model with particular enforcement of logical tree child elements through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">이러한 클래스는 특정 적용 전용 통해 논리적 트리에서 자식 요소의 콘텐츠 모델을 제공 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 및는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 스타일 템플릿을 통해 같은 제어 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how to use &lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt; and AddLogicalChild, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;및 참조 AddLogicalChild <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>AddLogicalChild may throw an exception if called at a time when the logical tree is being iterated by another process.</source>
          <target state="translated">AddLogicalChild 논리적 트리를 다른 프로세스에 의해 반복 중일 때 한 번에 메서드를 호출 하면 예외가 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Child element to be added.</source>
          <target state="translated">추가 될 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</source>
          <target state="translated">필요한 경우 현재 템플릿의 시각적 트리를 생성 하 고 시각적 트리가이 호출으로 다시 작성 되었는지 여부를 나타내는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications can call this method to guarantee that the visual tree of an element is complete.</source>
          <target state="translated">응용 프로그램 프로그램 요소의 시각적 트리에 완료 되었음을 보장 하기 위해이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This guarantee step might be necessary if code will be checking the child elements in the tree.</source>
          <target state="translated">이 보장 단계 코드는 트리의 자식 요소를 확인 하는 경우에 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</source>
          <target state="translated">응용 프로그램 내에서 일반 요소 논리, ApplyTemplate를 호출할 필요가 없습니다, 서식 파일은 될 요소에 적용 되므로 적절 한 시점에 수명이에 자동으로 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.</source>
          <target state="translated">모든 측정값에 ApplyTemplate 라고 WPF 프레임 워크 수준 레이아웃 시스템으로 전달 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; derived classes can use the &lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; class handler to be notified of cases where this method was called explicitly, or by the layout system.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;파생된 클래스가 사용할 수는 &lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;클래스 처리기의 경우가이 메서드가 명시적으로 호출 된 또는 레이아웃 시스템에서 알림을 받도록 합니다.&lt;/xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; is called after the template is completely generated and attached to the logical tree.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;서식 파일 완전히 생성 되 고 논리적 트리에서에 연결 된 후 호출 됩니다.&lt;/xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if visuals were added to the tree; returns <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> otherwise.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>시각적 개체가 트리에; 추가 하는 경우 반환 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Implements &lt;xref:System.Windows.UIElement.ArrangeCore*&gt; (defined as virtual in <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) and seals the implementation.</source>
          <target state="translated">구현 &lt;xref:System.Windows.UIElement.ArrangeCore*&gt;(에서 virtual로 정의 된 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>) 구현 봉인.&lt;/xref:System.Windows.UIElement.ArrangeCore*&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is sealed.</source>
          <target state="translated">이 메서드는 봉인 클래스입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to override the logic in your custom element specifically for the arrange pass of element layout, your &lt;xref:System.Windows.FrameworkElement&gt; derived class must override &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;파생된 클래스에서 &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; 를 재정의 해야&lt;/xref:System.Windows.FrameworkElement&gt; 하는 요소 레이아웃의 정렬 단계에 맞게 사용자 지정 요소에 논리를 재정의.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">이 요소는 자신과 자식을 정렬 하는 데 사용 해야 하는 부모 내의 마지막 영역입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, positions child elements and determines a size for a <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class.</source>
          <target state="translated">파생된 클래스에서 재정의할 경우, 자식 요소를 배치 하 고 크기를 결정 한 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">이 요소는 자신과 자식을 정렬 하는 데 사용 해야 하는 부모 내의 마지막 영역입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The actual size used.</source>
          <target state="translated">사용 되는 실제 크기입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Starts the initialization process for this element.</source>
          <target state="translated">이 요소를 위한 초기화 프로세스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</source>
          <target state="translated">아직 노출 하거나 요소 요소 트리에 있는 방식으로 조정 하는 경우 개별 요소에서이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, you might have created a new &lt;xref:System.Windows.FrameworkElement&gt;, but have not yet attached it to any logical tree.</source>
          <target state="translated">예를 들어, 만든 새 &lt;xref:System.Windows.FrameworkElement&gt;, 논리적 트리에 아직 연결 되지 했으며 하지만.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</source>
          <target state="translated">또는 논리적 트리 요소가 자식 요소 내 창 또는 응용 프로그램의 페이지에 연결 하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions that are contained in the provided storyboard.</source>
          <target state="translated">제공 된 스토리 보드에 포함 된 작업의 순서를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">만들 때는 일반적으로 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;또는 &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;태그 및 다음에 요소 배치는 &lt;xref:System.Windows.EventTrigger&gt;요소에 콘텐츠.&lt;/xref:System.Windows.EventTrigger&gt; &lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;태그에서 노출 된 속성을 통해 해결할 수 있습니다.&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">시작 하려면 스토리 보드 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</source>
          <target state="translated">속성이 이미 애니메이션 효과가 적용 하는 경우 수행할 작업에 대해 지정 된 옵션으로 제공 된 스토리 보드에 포함 된 작업 순서를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">만들 때는 일반적으로 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;또는 &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;태그 및 다음에 요소 배치는 &lt;xref:System.Windows.EventTrigger&gt;요소에 콘텐츠.&lt;/xref:System.Windows.EventTrigger&gt; &lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;태그에서 노출 된 속성을 통해 해결할 수 있습니다.&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.</source>
          <target state="translated">전달 동작이 &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;안내 하십시오.&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt; 특성으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">작성 HandoffBehavior 적용할 때 사용 하는 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, 또는 &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;를 사용 하 여 속성에는 &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;있으면 모든 &lt;xref:System.Windows.Media.Animation.Clock&gt;해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 시계를 자동으로 제거 되지 않습니다.&lt;/xref:System.Windows.Media.Animation.Clock&gt; &lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; &lt;/xref:System.Windows.Media.Animation.AnimationTimeline&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">사용 하 여 많은 수의 clock 적용할 때 성능 문제를 방지 하려면 &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.</source>
          <target state="translated">클록을 제거 하는 방법은 여러 가지가:-모든 clock 속성에서 제거을 사용 하려면는 &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;또는 &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;애니메이션된 된 개체의 메서드.&lt;/xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; &lt;/xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">그러면 모든 애니메이션 클록 속성에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.</source>
          <target state="translated">-특정 &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;시계를 목록에서 &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;a &lt;xref:System.Windows.Media.Animation.ClockController&gt; &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; &lt;xref:System.Windows.Media.Animation.ClockController&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController&gt; 메서드&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; 호출을&lt;/xref:System.Windows.Media.Animation.ClockController&gt; 검색 하&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; 방법의 속성&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; 을 사용 하 여&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; 제거 하려면</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;클록에 대 한 이벤트 처리기.&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 &lt;xref:System.Windows.Media.Animation.ClockController&gt;; &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;자식 클록의 속성을 반환 <ph id="ph1">`null`</ph>.&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; &lt;/xref:System.Windows.Media.Animation.ClockController&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;클록의 유효 기간이 무제한 인 경우 이벤트가 발생 하지 않습니다.&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.</source>
          <target state="translated">이 경우 사용자 &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; 를 호출 하는 경우 결정 해야</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이 주로 수명이 긴 개체에 애니메이션에 대 한 문제입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집 된 경우 해당 clock도 연결이 끊어지고 가비지 수집.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">시작 하려면 스토리 보드 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">경우 스토리 보드에 설명 된 속성에 애니메이션을 이미 사용 하는 동작을 설명 하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</source>
          <target state="translated">애니메이션 시작 된 후의 컨트롤에 대 한 지정 된 상태와 함께 제공 된 스토리 보드에 포함 된 작업 순서를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">애니메이션의 가장 일반적인 시나리오는이 메서드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">만들 때는 일반적으로 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;또는 &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;태그 및 다음에 요소 배치는 &lt;xref:System.Windows.EventTrigger&gt;요소에 콘텐츠.&lt;/xref:System.Windows.EventTrigger&gt; &lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">이벤트에 의해 트리거될 때 애니메이션 다음 실행 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">대부분의 컨트롤 측면의는 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;태그에서 노출 된 속성을 통해 해결할 수 있습니다.&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">사용 하지 않는 서명을 위한는 <ph id="ph1">`isControllable`</ph>, 매개 변수를 해당 매개 변수에 지정 된 경우 또는 <ph id="ph2">`false`</ph>, 연결 된 애니메이션 시간 표시 막대 clock은 애니메이션이 "전체" 기간의 끝에 도달 하는 즉시 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">애니메이션을 제어 또한 있어야 스토리 보드는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 코드에서 참조로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.</source>
          <target state="translated">전달 동작이 &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;안내 하십시오.&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt; 특성으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">작성 HandoffBehavior 적용할 때 사용 하는 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, 또는 &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;를 사용 하 여 속성에는 &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;있으면 모든 &lt;xref:System.Windows.Media.Animation.Clock&gt;해당 속성을 이전에 연관 된 개체가 시스템 리소스를 소비한 계속 있으며 타이밍 시스템 시계를 자동으로 제거 되지 않습니다.&lt;/xref:System.Windows.Media.Animation.Clock&gt; &lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; &lt;/xref:System.Windows.Media.Animation.AnimationTimeline&gt; &lt;/xref:System.Windows.Media.Animation.Storyboard&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">사용 하 여 많은 수의 clock 적용할 때 성능 문제를 방지 하려면 &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;를 완성 한 후 속성에서 구성 중인 clock를 제거 해야 합니다.&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.</source>
          <target state="translated">클록을 제거 하는 방법은 여러 가지가:-모든 clock 속성에서 제거을 사용 하려면는 &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;또는 &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;애니메이션된 된 개체의 메서드.&lt;/xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; &lt;/xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 <ph id="ph1">`null`</ph> 를 두 번째입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">그러면 모든 애니메이션 클록 속성에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.</source>
          <target state="translated">-특정 &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;시계를 목록에서 &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; &lt;xref:System.Windows.Media.Animation.AnimationClock&gt;a &lt;xref:System.Windows.Media.Animation.ClockController&gt; &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; &lt;xref:System.Windows.Media.Animation.ClockController&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController&gt; 메서드&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; 호출을&lt;/xref:System.Windows.Media.Animation.ClockController&gt; 검색 하&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; 방법의 속성&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; 을 사용 하 여&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt; 제거 하려면</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.</source>
          <target state="translated">이 일반적으로 수행 된 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;클록에 대 한 이벤트 처리기.&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">유일한 루트 클록을 제어할 수 있는 참고는 &lt;xref:System.Windows.Media.Animation.ClockController&gt;; &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;자식 클록의 속성을 반환 <ph id="ph1">`null`</ph>.&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; &lt;/xref:System.Windows.Media.Animation.ClockController&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">또한는 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;클록의 유효 기간이 무제한 인 경우 이벤트가 발생 하지 않습니다.&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.</source>
          <target state="translated">이 경우 사용자 &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; 를 호출 하는 경우 결정 해야</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">이 주로 수명이 긴 개체에 애니메이션에 대 한 문제입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">개체가 가비지 수집 된 경우 해당 clock도 연결이 끊어지고 가비지 수집.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">클록 개체에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>애니메이션 및 타이밍 시스템 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">시작 하려면 스토리 보드 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">경우 스토리 보드에 설명 된 속성에 애니메이션을 이미 사용 하는 동작을 설명 하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Declares whether the animation is controllable (can be paused) after it is started.</source>
          <target state="translated">애니메이션은 제어할 수 있는지 여부를 선언 (일시 중지할 수) 시작 된 후입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used for the element.</source>
          <target state="translated">가져오거나는 <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소에 사용 되는 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Data.BindingGroup&gt; can be used to validate the values of multiple properties of an object.</source>
          <target state="translated">A &lt;xref:System.Windows.Data.BindingGroup&gt;개체의 여러 속성 값의 유효성 검사를 사용할 수 있습니다.&lt;/xref:System.Windows.Data.BindingGroup&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that an application prompts the user to enter an address and then populates an object of type <ph id="ph1">`Address`</ph>, which has the properties <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, and <ph id="ph5">`Country`</ph>, with the values that the user provided.</source>
          <target state="translated">예를 들어 응용 프로그램 주소를 입력 하 라는 메시지를 표시 하 고 다음 유형의 개체를 채웁니다 <ph id="ph1">`Address`</ph>, 속성이 있는 <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, 및 <ph id="ph5">`Country`</ph>, 사용자가 제공한 값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application has a panel that contains four &lt;xref:System.Windows.Controls.TextBox&gt; controls, each of which is bound to one of the object’s properties.</source>
          <target state="translated">응용 프로그램에&amp;4; 개를 포함 하는 패널 &lt;xref:System.Windows.Controls.TextBox&gt;개체의 속성 중 하나에 바인딩되어 있으며 각 컨트롤.&lt;/xref:System.Windows.Controls.TextBox&gt;</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a &lt;xref:System.Windows.Controls.ValidationRule&gt; in a &lt;xref:System.Windows.Data.BindingGroup&gt; to validate the <ph id="ph1">`Address`</ph> object.</source>
          <target state="translated">사용할 수 있습니다는 &lt;xref:System.Windows.Controls.ValidationRule&gt;에 &lt;xref:System.Windows.Data.BindingGroup&gt;유효성을 검사 하 여 <ph id="ph1">`Address`</ph> 개체입니다.&lt;/xref:System.Windows.Data.BindingGroup&gt; &lt;/xref:System.Windows.Controls.ValidationRule&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.Windows.Controls.ValidationRule&gt; can ensure that the zip code is valid for the country of the address.</source>
          <target state="translated">예를 들어는 &lt;xref:System.Windows.Controls.ValidationRule&gt;우편 번호 주소 국가 대 한 유효한 되는지 확인할 수 있습니다.&lt;/xref:System.Windows.Controls.ValidationRule&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Child elements inherit the &lt;xref:System.Windows.Data.BindingGroup&gt; from their parent elements, just as with any other inheritable property.</source>
          <target state="translated">자식 요소를 상속 된 &lt;xref:System.Windows.Data.BindingGroup&gt;다른 상속 가능한 속성 경우와 마찬가지로, 부모 요소 로부터.&lt;/xref:System.Windows.Data.BindingGroup&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_BindingGroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;|   |Metadata properties set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_BindingGroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;|   | 메타 데이터 속성이 <bpt id="p2">**</bpt>true<ept id="p2">**</ept>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used for the element.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소에 사용 되는 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.BindingGroup*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.BindingGroup*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.BindingGroup*&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">이 요소 내에 포함 된 스크롤 가능한 영역 내에서 보기에 표시 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.</source>
          <target state="translated">이 메서드를 호출 하 여 발생 한 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;현재 요소에서 시작 된 이벤트입니다.&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.</source>
          <target state="translated">처리 될 수 있도록이 이벤트는 발생 한 &lt;xref:System.Windows.Controls.ScrollViewer&gt;, 또는 파생 또는 유사한 클래스&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.</source>
          <target state="translated">예상 되는 동작은 표시 된 이벤트 데이터에서 처리 하는 부모 요소에는 이벤트를 처리 하 고 이벤트 소스에 포함 된 논리를 통해 보기에 표시 되는 &lt;xref:System.Windows.Controls.ScrollViewer&gt;컨트롤.&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">모두는 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;이벤트 나 BringIntoView 메서드에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 하는 모든 정보를 전송 합니다.&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">실패 한 이유 요소 설정 예 &lt;xref:System.Windows.UIElement.Visibility%2A&gt; &lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; 이외의 일부 값을&lt;/xref:System.Windows.UIElement.Visibility%2A&gt; 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.</source>
          <target state="translated">지정 하지 않는 서명을 사용 하는 경우는 <ph id="ph1">`targetRectangle`</ph>, 전체 요소 크기 합니다 (해당 &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) 볼 수 있게 됩니다.&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.</source>
          <target state="translated">이 메서드를 호출 하면 호출 됩니다 &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;요소가 포함 된 부모 스크롤 가능한 영역에서.&lt;/xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;이벤트는 발생 하지만 이벤트 수신기가 때문에 영향을 주지 않습니다 됩니다.&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">이 요소의 제공 된 영역 크기 내에 포함 된 스크롤 가능한 영역 내에서 보기에 표시 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.</source>
          <target state="translated">이 메서드를 호출 하 여 발생 한 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;현재 요소에서 시작 된 이벤트입니다.&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.</source>
          <target state="translated">처리 될 수 있도록이 이벤트는 발생 한 &lt;xref:System.Windows.Controls.ScrollViewer&gt;, 또는 파생 또는 유사한 클래스&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.</source>
          <target state="translated">예상 되는 동작은 표시 된 이벤트 데이터에서 처리 하는 부모 요소에는 이벤트를 처리 하 고 이벤트 소스에 포함 된 논리를 통해 보기에 표시 되는 &lt;xref:System.Windows.Controls.ScrollViewer&gt;컨트롤.&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt; method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">모두는 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;이벤트와 &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;메서드에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 하는 모든 정보를 전송 합니다.&lt;/xref:System.Windows.FrameworkElement.BringIntoView%2A&gt; &lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">실패 한 이유 요소 설정 예 &lt;xref:System.Windows.UIElement.Visibility%2A&gt; &lt;xref:System.Windows.Visibility&gt;.&lt;/xref:System.Windows.Visibility&gt; 이외의 일부 값을&lt;/xref:System.Windows.UIElement.Visibility%2A&gt; 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.</source>
          <target state="translated">지정 하지 않는 서명을 사용 하는 경우는 <ph id="ph1">`targetRectangle`</ph>, 전체 요소 크기 합니다 (해당 &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) 볼 수 있게 됩니다.&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.</source>
          <target state="translated">이 메서드를 호출 하면 호출 됩니다 &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;요소가 포함 된 부모 스크롤 가능한 영역에서.&lt;/xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;이벤트는 발생 하지만 이벤트 수신기가 때문에 영향을 주지 않습니다 됩니다.&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specified size of the element that should also be brought into view.</source>
          <target state="translated">지정 된 크기 보기에 가져올 수 있어야 하는 요소입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Gets or sets the context menu element that should appear whenever the context menu is requested through <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> from within this element.</source>
          <target state="translated">상황에 맞는 메뉴를 통해 요청 될 때마다 표시 되는 상황에 맞는 메뉴 요소를 가져오거나 설정 합니다. <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> 에서이 요소 내에서.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, and it is technically possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a ContextMenu property.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체는 &lt;xref:System.Windows.FrameworkElement&gt;파생 클래스가 있으며이 기술적으로 가능 &lt;xref:System.Windows.Controls.ContextMenu&gt;ContextMenu 속성 자체.&lt;/xref:System.Windows.Controls.ContextMenu&gt; &lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this creates a confusing context menu experience for the user and this practice is not recommended.</source>
          <target state="translated">그러나 이렇게 사용자에 대 한 혼란 스러운 상황에 맞는 메뉴 환경 만들어지고이 방법은 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ContextMenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ContextMenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The context menu assigned to this element.</source>
          <target state="translated">이 요소에 할당 된 상황에 맞는 메뉴입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Occurs just before any context menu on the element is closed.</source>
          <target state="translated">요소에 맞는 메뉴가 닫히기 바로 전에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>To suppress closing context menus, handlers of the event should mark it as handled.</source>
          <target state="translated">닫히지 않도록 하려면 상황에 맞는 메뉴는 이벤트 처리기로 표시 해야 처리.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying service's definition of the event:       <bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CorePseudocode#FEContextMenuClosing<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)</ept><ept id="p1">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger).</source>
          <target state="translated">이 이벤트로 사용 하는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서 이벤트의 원본으로 사용 하는 서비스의 정의 참조 해야 합니다: <bpt id="p1">[!code-xml</bpt> <bpt id="p2">[</bpt>CorePseudocode #FEContextMenuClosing<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)</ept> <ept id="p1">]</ept> (때문에이 사용은 필수에서 이벤트를 구현 &lt;xref:System.Windows.FrameworkElement&gt;내부를 노출 하는 트리거도 사용할 수 있도록 서비스 이벤트 ContextMenuClosing 식별자 매핑되지 않습니다).&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but the ContextMenuClosing event will not be raised by a context menu directly.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체는 &lt;xref:System.Windows.FrameworkElement&gt;파생 클래스 이지만 ContextMenuClosing 이벤트 발생 하지 것입니다 상황에 맞는 메뉴에서 직접.&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</source>
          <target state="translated">대신,이 이벤트는 속성으로 상황에 맞는 메뉴를 "소유" 하 고는 사용자가 UI의 상황에 맞는 메뉴를 시도할 때만 발생 하는 요소에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>However it is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property (a nested context menu).</source>
          <target state="translated">그러나 것이 가능 &lt;xref:System.Windows.Controls.ContextMenu&gt;자체에 &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;속성 (중첩 된 상황에 맞는 메뉴).&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the &lt;xref:System.Windows.Controls.ContextMenu&gt; really does own the nested &lt;xref:System.Windows.Controls.ContextMenu&gt; and might raise the event, with the source of the event being the nested context menu.</source>
          <target state="translated">이 경우에 &lt;xref:System.Windows.Controls.ContextMenu&gt;실제로 소유 하 고 중첩 된 &lt;xref:System.Windows.Controls.ContextMenu&gt;및 중첩 된 상황에 맞는 메뉴 되는 이벤트의 원본과 이벤트를 발생 시킬 수 있습니다.&lt;/xref:System.Windows.Controls.ContextMenu&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;) but the &lt;xref:System.Windows.Controls.ContextMenu.Closed&gt; event does not provide you the opportunity to cancel the user action.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체 클래스에 비슷한 이벤트 (&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;) 이지만 &lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;이벤트는 사용자 작업을 취소할 기회 제공 하지 않습니다.&lt;/xref:System.Windows.Controls.ContextMenu.Closed&gt; &lt;/xref:System.Windows.Controls.ContextMenu.Closed&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;|   | 라우팅 전략 | 버블링 |   | 대리자 | &lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -재정의 &lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.&lt;/xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenuEventHandler&gt; &lt;/xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Occurs when any context menu on the element is opened.</source>
          <target state="translated">요소에 맞는 메뉴가 열리면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>To manually open context menus, handlers of the events should mark the relevant event as handled.</source>
          <target state="translated">상황에 맞는 메뉴를 열어야 하는 처리 된 것으로 이벤트의 처리기 관련 이벤트를 표시 해야 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the existing value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property will be used to automatically open a context menu.</source>
          <target state="translated">그렇지 않은 경우의 기존 값에서 &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;를 자동으로 상황에 맞는 메뉴를 열려면 속성을 사용 합니다.&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property and then open the new &lt;xref:System.Windows.Controls.ContextMenu&gt;.</source>
          <target state="translated">이벤트를 처리 된을 효과적으로 기본 작업을 취소 및 다시 설정의 &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;속성 연 후 새 &lt;xref:System.Windows.Controls.ContextMenu&gt;.&lt;/xref:System.Windows.Controls.ContextMenu&gt; &lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; 값 영업 기회 수</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there is a timing issue you should be aware of.</source>
          <target state="translated">그러나은 알고 있어야 하는 타이밍 문제입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to completely replace the context menu through a ContextMenuOpening handler, the initial context menu must not be null / empty.</source>
          <target state="translated">ContextMenuOpening 처리기를 통해 상황에 맞는 메뉴를 완전히 바꾸기 위해 초기 상황에 맞는 메뉴 해야 null 이거나 비워 둘 수 없습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you might need to handle the event and then manually open a new context menu.</source>
          <target state="translated">또는 이벤트를 처리 한 다음 수동으로 새 상황에 맞는 메뉴를 엽니다. 해야 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>How to: Handle the ContextMenuOpening Event<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: ContextMenuOpening 이벤트를 처리할<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying attached event:       <bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CorePseudocode#FEContextMenuOpening<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)</ept><ept id="p1">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers).</source>
          <target state="translated">이 이벤트로 사용 하는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서 연결 된 이벤트를 참조 해야 합니다: <bpt id="p1">[!code-xml</bpt> <bpt id="p2">[</bpt>CorePseudocode #FEContextMenuOpening<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)</ept> <ept id="p1">]</ept> (때문에이 사용은 필수에서 이벤트를 구현 &lt;xref:System.Windows.FrameworkElement&gt;내부를 노출 하 트리거에서 사용할 수 있도록 서비스 이벤트에서는 ContextMenuOpening 식별자를 매핑하지 않습니다).&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but this event will not be raised from the context menu being opened as a source.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체는 &lt;xref:System.Windows.FrameworkElement&gt;클래스를 파생 되지만이 이벤트를 원본으로 열려는 상황에 맞는 메뉴에서 발생 하지 것입니다.&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</source>
          <target state="translated">속성으로 상황에 맞는 메뉴를 "소유" 하 고는 사용자가 UI의 상황에 맞는 메뉴를 열 때만 발생 하는 요소에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property, but you should avoid this scenario (for details, see &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;).</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체에 &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;속성을 하지만이 시나리오를 방지 해야 (세부 정보를 참조 하십시오. &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;).&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;) but &lt;xref:System.Windows.Controls.ContextMenu.Opened&gt; does not provide you the opportunity to cancel the user action.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;자체 클래스에 비슷한 이벤트 (&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;) 하지만 &lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;사용자 작업을 취소할 기회 제공 되지 않습니다.&lt;/xref:System.Windows.Controls.ContextMenu.Opened&gt; &lt;/xref:System.Windows.Controls.ContextMenu.Opened&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;|   | 라우팅 전략 | 버블링 |   | 대리자 | &lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -재정의 &lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.&lt;/xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenuEventHandler&gt; &lt;/xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ContextMenu*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.ContextMenu*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.ContextMenu*&gt;</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets or sets the cursor that displays when the mouse pointer is over this element.</source>
          <target state="translated">마우스 포인터가이 요소 위에 있을 때 표시 되는 커서를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set this property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor relies on type conversion for the &lt;xref:System.Windows.Input.Cursor&gt; class to evaluate the string.</source>
          <target state="translated">이 속성을 설정 하면 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서에 대 한 형식 변환에 의존는 &lt;xref:System.Windows.Input.Cursor&gt;문자열을 평가 하는 클래스입니다.&lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>The provided string should evaluate to a &lt;xref:System.Windows.Input.CursorType&gt; value.</source>
          <target state="translated">제공된 된 문자열을 평가 해야는 &lt;xref:System.Windows.Input.CursorType&gt;값.&lt;/xref:System.Windows.Input.CursorType&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Windows.Input.Cursor&gt; for details.</source>
          <target state="translated">참조 &lt;xref:System.Windows.Input.Cursor&gt;대 한 자세한 내용은.&lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; property.</source>
          <target state="translated">이 속성에서 설정한 커서가 여부 마우스 포인터가이 요소 위에 있을 때 표시 되지 것입니다의 값에 따라 결정 됩니다.는 &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;속성.&lt;/xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</source>
          <target state="translated">또한는 활성 끌기, 마우스 캡처, 컨트롤 및 등 내의 텍스트 편집 모드와 같은 이벤트 관련 고려 사항 보다 우선 순위가 높은 사용자가이 속성에 지정한 값 보다 커서를 적용도 됩니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>To revert the behavior of setting this property to the eventual default, set it to <ph id="ph1">`null`</ph> again.</source>
          <target state="translated">최종 기본적으로이 속성을 설정 하는 동작을 되돌리려면로 설정 <ph id="ph1">`null`</ph> 다시 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`null`</ph> default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</source>
          <target state="translated"><ph id="ph1">`null`</ph> 실제 커서 값의 결정 지연 시키고 다른 곳에서 가져올 기본값인 의미 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If presented without programmatic values from any source, the default cursor that is visually over a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> application will be an arrow.</source>
          <target state="translated">제공 되지 않는 경우 소스에서 프로그래밍 방식으로 값을 기본 커서를 초과 하는 시각적으로 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 응용 프로그램에 화살표가 됩니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the transient cursor changes are not set to the Cursor values of the elements when they are passed over.</source>
          <target state="translated">그러나 임시 커서 변경 내용이 통해 전달 될 때 요소의 커서 값으로 설정 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Cursor property will only report non null values in cases where it was actually set, for instance through code or a style.</source>
          <target state="translated">속성에 null이 아닌 값에 대해서만 보고 합니다 커서 있던 실제로 설정, 예를 들어 코드 또는 스타일을 통해 경우입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each movement of the mouse over a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> application raises a &lt;xref:System.Windows.UIElement.QueryCursor&gt; event.</source>
          <target state="translated">각 위로 마우스를 움직일은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 발생 한 &lt;xref:System.Windows.UIElement.QueryCursor&gt;이벤트.&lt;/xref:System.Windows.UIElement.QueryCursor&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</source>
          <target state="translated">이벤트 버블 및 경로 따라 모든 요소에는 이벤트를 처리 하 고이 이벤트의 인수를 통해 커서의 값을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the mechanism that produces the visually apparent cursor in most cases.</source>
          <target state="translated">대부분의 경우에서 명백 커서를 생성 하는 메커니즘입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Windows.UIElement.QueryCursor&gt; handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; is set.</source>
          <target state="translated">경우는 &lt;xref:System.Windows.UIElement.QueryCursor&gt;커서 결과 반환 하는 처리기 다음 이벤트를 처리 하 고 인수에서 변경 된 값은 보다 우선 모든 수준에서 커서 속성의 값 &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;설정 됩니다.&lt;/xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; &lt;/xref:System.Windows.UIElement.QueryCursor&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not are not creating a custom cursor, you typically set this property to a static property value of the &lt;xref:System.Windows.Input.Cursors&gt; class.</source>
          <target state="translated">사용자 지정 커서를 만드는 경우가, 하는 경우 일반적으로이 속성을 설정 하면 &lt;xref:System.Windows.Input.Cursors&gt;클래스&lt;/xref:System.Windows.Input.Cursors&gt; 의 정적 속성 값</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting Cursor in code requires one of the following:      -   Call the &lt;xref:System.Windows.Input.Cursor&gt; constructor to get a &lt;xref:System.Windows.Input.Cursor&gt; instance.</source>
          <target state="translated">다음 중 하나 필요로 코드에서 커서를 설정:-호출 된 &lt;xref:System.Windows.Input.Cursor&gt;를 가져오기 위해 생성자는 &lt;xref:System.Windows.Input.Cursor&gt;인스턴스.&lt;/xref:System.Windows.Input.Cursor&gt; &lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both signatures of the &lt;xref:System.Windows.Input.Cursor&gt; constructor use streams or files, in anticipation that you are creating the &lt;xref:System.Windows.Input.Cursor&gt; object for a custom cursor.</source>
          <target state="translated">서명을 모두는 &lt;xref:System.Windows.Input.Cursor&gt;생성자에서 만들고 있는 대비 하 여 파일을 사용 하 여는 &lt;xref:System.Windows.Input.Cursor&gt;사용자 지정 커서에 대 한 개체입니다.&lt;/xref:System.Windows.Input.Cursor&gt; &lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Use the &lt;xref:System.Windows.Input.CursorConverter&gt; class and its &lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt; method to specify a cursor by &lt;xref:System.Windows.Input.CursorType&gt;, or a string that can evaluate to a &lt;xref:System.Windows.Input.CursorType&gt;, and cast the return to &lt;xref:System.Windows.Input.Cursor&gt;.</source>
          <target state="translated">-사용는 &lt;xref:System.Windows.Input.CursorConverter&gt;클래스 및 해당 &lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;하 여 커서를 지정 하는 메서드 &lt;xref:System.Windows.Input.CursorType&gt;, 또는으로 계산 되는 문자열을 &lt;xref:System.Windows.Input.CursorType&gt;, &lt;xref:System.Windows.Input.Cursor&gt;.&lt;/xref:System.Windows.Input.Cursor&gt; 돌아가기 캐스팅 하 고&lt;/xref:System.Windows.Input.CursorType&gt; &lt;/xref:System.Windows.Input.CursorType&gt; &lt;/xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt; &lt;/xref:System.Windows.Input.CursorConverter&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the &lt;xref:System.Windows.Input.Cursor&gt; to a custom value is not enabled in partial trust.</source>
          <target state="translated">설정의 &lt;xref:System.Windows.Input.Cursor&gt;사용자 지정 값으로 설정 되지 않은 부분 신뢰.&lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on custom cursors, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">사용자 지정 커서에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Cursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.CursorProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Cursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.CursorProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.CursorProperty&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The cursor to display.</source>
          <target state="translated">표시할 커서입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The default value is defined as <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> per this dependency property.</source>
          <target state="translated">기본 값으로 정의 됩니다 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>However, the practical default at run time will come from a variety of factors.</source>
          <target state="translated">그러나 런타임 시 실제 기본값은 다양 한 요소에서에서 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Cursor*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt;</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Gets or sets the data context for an element when it participates in data binding.</source>
          <target state="translated">데이터 바인딩에 참여할 때 요소에 대 한 데이터 컨텍스트를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Data context<ept id="p1">*</ept> is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</source>
          <target state="translated"><bpt id="p1">*</bpt>데이터 컨텍스트<ept id="p1">*</ept> 정보 바인딩 뿐만 아니라 경로 같은 바인딩의 다른 특성에 사용 되는 데이터 원본에 대 한 부모 요소 로부터 상속할 수 있도록 하는 개념은 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data context can be set directly to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, with the bindings evaluating to properties of that object.</source>
          <target state="translated">데이터 컨텍스트를 직접 설정할 수는 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> 바인딩 해당 개체의 속성을 사용 하 여 개체입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can set the data context to a &lt;xref:System.Windows.Data.DataSourceProvider&gt; object.</source>
          <target state="translated">또는 데이터 컨텍스트 설정할 수는 &lt;xref:System.Windows.Data.DataSourceProvider&gt;개체입니다.&lt;/xref:System.Windows.Data.DataSourceProvider&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are child elements without other values for DataContext established through local values or styles, then the property system will set the value to be the DataContext value of the nearest parent element with this value assigned.</source>
          <target state="translated">로컬 값 또는 스타일을 통해 설정 된 DataContext에 대 한 다른 값이 없는 자식 요소가 없으면 속성 시스템은 값이이 값이 할당 된 가장 가까운 부모 요소의 DataContext 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use one of the following properties of the &lt;xref:System.Windows.Data.Binding&gt; class to specify the binding source explicitly: &lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;, &lt;xref:System.Windows.Data.Binding.Source%2A&gt;, or &lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;.</source>
          <target state="translated">다음 속성 중 하나를 사용할 수 있습니다 또는 &lt;xref:System.Windows.Data.Binding&gt;바인딩 소스를 명시적으로 지정 하려면 클래스: &lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;, &lt;xref:System.Windows.Data.Binding.Source%2A&gt;, 또는 &lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;.&lt;/xref:System.Windows.Data.Binding.RelativeSource%2A&gt; &lt;/xref:System.Windows.Data.Binding.Source%2A&gt; &lt;/xref:System.Windows.Data.Binding.ElementName%2A&gt; &lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 바인딩 소스를 지정<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, DataContext is most typically set to as a &lt;xref:System.Windows.Data.Binding&gt; declaration.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, DataContext가로 설정 가장 일반적으로 &lt;xref:System.Windows.Data.Binding&gt;선언.&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use either property element syntax or attribute syntax.</source>
          <target state="translated">속성 요소 구문 또는 특성 구문 중 하나를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attribute syntax is shown in the example on this page.</source>
          <target state="translated">특성 구문은이 페이지에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use code to set DataContext.</source>
          <target state="translated">DataContext를 설정 하려면 코드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>DataContext is a bindable property, to facilitate scenarios where one context might be bound to another.</source>
          <target state="translated">DataContext은 한 컨텍스트가 다른에 바인딩하여 있는 시나리오를 용이 하 게 바인딩할 수 있는 속성입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you bind to DataContext, be careful to not create circular binding references (do not bind a DataContext to itself, which is possible to do because of the property value inheritance nature of the DataContext property).</source>
          <target state="translated">그러나 DataContext에 바인딩하는 경우 (연결 하지 않음 DataContext를 DataContext 속성의 속성 값 상속 특성 때문에 수행할 수 있는 자체) 순환 바인딩 참조를 만들지 않도록 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.DataContext&gt;       &lt;dataContextObject /&gt;     &lt;/object.DataContext&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlAttributeUsage_DataContext"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph2">```   &lt;object DataContext="bindingUsage"/&gt;   - or -   &lt;object DataContext="{resourceExtension contextResourceKey}"/&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_DataContext"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>dataContextObject<ept id="p4">*</ept>    A directly embedded object that serves as data context for any bindings within the parent element.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 속성 요소 사용 <ph id="ph1">```   &lt;object&gt;     &lt;object.DataContext&gt;       &lt;dataContextObject /&gt;     &lt;/object.DataContext&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlAttributeUsage_DataContext"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 특성 사용 <ph id="ph2">```   &lt;object DataContext="bindingUsage"/&gt;   - or -   &lt;object DataContext="{resourceExtension contextResourceKey}"/&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_DataContext"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p4">*</bpt>dataContextObject<ept id="p4">*</ept> 부모 요소 내에서 모든 바인딩에 대 한 데이터 컨텍스트 역할을 하는 직접 포함 된 개체입니다.            </target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, this object is a &lt;xref:System.Windows.Data.Binding&gt; or another &lt;xref:System.Windows.Data.BindingBase&gt; derived class.</source>
          <target state="translated">이 개체는 &lt;xref:System.Windows.Data.Binding&gt;다른 &lt;xref:System.Windows.Data.BindingBase&gt;파생 클래스&lt;/xref:System.Windows.Data.BindingBase&gt; 또는&lt;/xref:System.Windows.Data.Binding&gt; 일반적으로</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, raw data of any <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> object type intended for binding may be placed here, with the actual bindings defined later.</source>
          <target state="translated">또는 원시 데이터 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> 개체 바인딩 나중에 정의 된 실제 바인딩은 여기서 배치 될 수 있습니다에 사용 되는 형식입니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept>    A binding usage that evaluates to an appropriate data context.</source>
          <target state="translated"><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept> 는 적절 한 데이터 컨텍스트를 평가 하는 바인딩 사용 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>바인딩 태그 확장<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept>    One of the following:  or .</source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept> 다음 중 하나: 또는 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>This usage is used when referring to raw data defined as an object in resources.</source>
          <target state="translated">리소스에는 개체로 정의 하는 원시 데이터를 참조할 때 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept>    The key identifier for the object being requested from within a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated"><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept> 에 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 내에서 요청 된 개체에 대 한 키 식별자</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DataContextProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.DataContextProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.DataContextProperty&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The object to use as data context.</source>
          <target state="translated">데이터 컨텍스트로 사용할 개체입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Occurs when the data context for this element changes.</source>
          <target state="translated">이 요소에 대 한 데이터 컨텍스트가 변경 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an explanation of data contexts and data binding, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조에 대 한 데이터 컨텍스트 및 데이터 바인딩에 설명은 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When the &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; for an element changes, all data-bound properties on this element are potentially affected.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 때는 &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;요소 변경을 위해이 요소의 모든 데이터 바인딩 속성은 영향을 받을 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</source>
          <target state="translated">이 모든 요소는 데이터 컨텍스트를 상속 하는 현재 요소의 논리적 트리에서 자식 요소를 서로 그리고 현재 요소 자체에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>All such existing bindings must re-interpret the new &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; and will reevaluate the binding results.</source>
          <target state="translated">이러한 모든 기존 바인딩은 다시 새 해석 해야 &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;고 바인딩 결과 다시 평가 됩니다.&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the DataContextChanged event.</source>
          <target state="translated">데이터 바인딩 엔진의 이러한 재계산이 DataContextChanged 이벤트의 발생을 기준으로 순서에 대 한 결정적있지 않습니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reevaluations can occur before the event, after the event, or in any mixture.</source>
          <target state="translated">혼합 또는 이벤트 이후에 전이나 이벤트 전에 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.DataContext*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.DataContext*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.DataContext*&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</source>
          <target state="translated">테마 스타일을 사용 하거나 정의 하는 경우이 컨트롤에 스타일을 참조 하는 데 키를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is typically not set through any of its direct property accessors.</source>
          <target state="translated">이 속성은 일반적으로 직접 속성 접근자를 통해 설정 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you override the type-specific metadata of this dependency property every time you create a new &lt;xref:System.Windows.FrameworkElement&gt; derived class.</source>
          <target state="translated">새 &lt;xref:System.Windows.FrameworkElement&gt;파생 클래스를&lt;/xref:System.Windows.FrameworkElement&gt; 만들 때마다이 종속성 속성의 유형별 메타 데이터 재정의 대신,</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you derive a control, call the &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method against the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt; identifier, within the static constructor of the control derived class (or equivalent class initialization).</source>
          <target state="translated">컨트롤을 파생 시킬 때 호출의 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;에 대 한 메서드는 &lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;컨트롤의 정적 생성자 내에서 식별자 파생 클래스 (또는 해당 하는 클래스 초기화).&lt;/xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</source>
          <target state="translated">컨트롤은 일반적으로 자체 형식으로이 속성의 기본값을 재정의 하지만 일부 경우에 사용할 수도 스타일 테마 사전에 존재 하는 기본 형식.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</source>
          <target state="translated">이 기본 컨트롤의 컨트롤 템플릿을 전체 해당 파생된 컨트롤의 시각적 표시를 정의 하 고 파생된 된 형식을 노출 하는 모든 추가 멤버 컨트롤 서식 파일의 일부로 추가 요소를 필요 하지 않은 경우에 유용한.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want your element or control to deliberately not use theme styles, set the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">테마 스타일을 사용 하지 않도록 신중 하 게 컨트롤을 하려는 경우 설정 된 &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;속성을 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_DefaultStyleKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_DefaultStyleKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The style key.</source>
          <target state="translated">스타일 키입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To work correctly as part of theme style lookup, this value is expected to be the &lt;xref:System.Type&gt; of the control being styled.</source>
          <target state="translated">테마 스타일 조회의 일부로 올바르게 작동 하려면이 값은 해야는 &lt;xref:System.Type&gt;스타일을 지정 하는 컨트롤의.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt;</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Indicates that the initialization process for the element is complete.</source>
          <target state="translated">요소에 대 한 초기화 프로세스가 완료 되었음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was previously called, the base implementation will raise the &lt;xref:System.Windows.FrameworkElement.Initialized&gt; event.</source>
          <target state="translated">경우 &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;가 이전에 호출, 기본 구현에서 발생 된 &lt;xref:System.Windows.FrameworkElement.Initialized&gt;이벤트.&lt;/xref:System.Windows.FrameworkElement.Initialized&gt; &lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, if &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was not called or it could not be determined whether &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was called, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; is not raised and an exception is thrown instead.</source>
          <target state="translated">그렇지 않은 경우, &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;호출 되지 않은 것일 수도 되었는지를 확인할 &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;를 호출 했지만 &lt;xref:System.Windows.FrameworkElement.Initialized&gt;발생 하지 않습니다 예외가 대신 및.&lt;/xref:System.Windows.FrameworkElement.Initialized&gt; &lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt; &lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>EndInit was called without &lt;xref:System.Windows.FrameworkElement.BeginInit*&gt; having previously been called on the element.</source>
          <target state="translated">EndInit 없이 호출한 &lt;xref:System.Windows.FrameworkElement.BeginInit*&gt;요소에 대해 이전에 호출 된.&lt;/xref:System.Windows.FrameworkElement.BeginInit*&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Finds an element that has the provided identifier name.</source>
          <target state="translated">제공 된 식별자 이름을 가진 요소를 찾습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the element has child elements, these child elements are all searched recursively for the requested named element.</source>
          <target state="translated">요소에 자식 요소가 있으면 이러한 자식 요소는 요청 된 명명 된 요소에 대 한 모든 검색 결과 재귀적으로.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>FindName operates within the current element's namescope.</source>
          <target state="translated">FindName 현재 요소의 이름 범위 내에서 작동합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The name of the requested element.</source>
          <target state="translated">요청한 요소의 이름입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The requested element.</source>
          <target state="translated">요청 된 요소입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no matching element was found.</source>
          <target state="translated">이 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가 일치 하는 요소가 없는 경우.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</source>
          <target state="translated">지정된 된 키와 리소스를 검색 하 고 요청 된 리소스가 없는 경우 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt;를 찾을 수 없는 키에 대 한이 메서드를 호출 하는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to handle exceptions that result from calling FindResource, call &lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; instead.</source>
          <target state="translated">FindResource, 호출을 호출 하 여 발생 하는 예외를 처리 하지 않을 경우 &lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;대신.&lt;/xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; returns <ph id="ph1">`null`</ph> when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;반환 <ph id="ph1">`null`</ph> 요청 된 리소스를 찾을 수 없으면 시점과 예외를 throw 하지 않습니다.&lt;/xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</source>
          <target state="translated">호출 하는 요소에는 리소스를 찾을 수 없습니다, 논리적 트리에서 부모 요소 이면 검색 결과 다음 다음는 응용 프로그램을 다음 테마, 고 마지막으로 시스템 리소스입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</source>
          <target state="translated">이 조회 방법은 태그에서 동적 리소스 참조 하 여 리소스를 요청 하는 경우 트리를 검색 하는 방법을 동일 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about resource lookup, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">리소스 조회에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you immediately cast a FindResource return value to the type of the property that you setting with the returned resource value.</source>
          <target state="translated">일반적으로 반환 되는 리소스 값을 사용 하 여 설정 하는 속성의 형식으로 반환 값 FindResource 즉시 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource keys are not necessarily strings.</source>
          <target state="translated">리소스 키는 반드시 문자열입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, styles for controls at the theme level are deliberately keyed to the &lt;xref:System.Type&gt; of the control, and application or page styles for controls typically use this same key convention.</source>
          <target state="translated">예를 들어, 컨트롤 테마 수준으로 지정에 대 한 스타일은 &lt;xref:System.Type&gt;컨트롤 및 스타일을 응용 프로그램 또는 페이지에 대 한 컨트롤 일반적으로 사용 하 여이 동일한 키 규칙.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](../Topic/XAML%20Resources.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스타일 및 템플릿<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 또는 <bpt id="p2">[</bpt>XAML 리소스<ept id="p2">](../Topic/XAML%20Resources.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The key identifier for the requested resource.</source>
          <target state="translated">요청된 된 리소스에 대 한 키 식별자입니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The requested resource.</source>
          <target state="translated">요청 된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>If no resource with the provided key was found, an exception is thrown.</source>
          <target state="translated">제공 된 키에 리소스가 없으면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value might also be returned in the exception case.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값 예외인 경우에 반환 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and an event handler does not exist for the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph>찾을 수 없으며 한 이벤트 처리기에 대 한 존재 하지 않습니다는 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and the <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*&gt;</ph> property is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> 찾을 수 없습니다 및 <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*&gt;</ph> 속성은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Gets or sets the direction that text and other <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> elements flow within any parent element that controls their layout.</source>
          <target state="translated">텍스트 및 기타 방향을 가져오거나 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> 해당 레이아웃을 제어 하는 부모 요소 안에서 요소를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The direction that text and other <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> elements flow within their parent element, as a value of the enumeration.</source>
          <target state="translated">방향 텍스트 및 기타 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> 열거형의 값으로 해당 부모 요소 안에서 요소를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.FlowDirection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.FlowDirection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</source>
          <target state="translated">모양, 효과 또는 기타 스타일 특성을 키보드 포커스를 캡처할 때이 요소에 적용 되는 사용자 지정할 수 있는 속성을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property affects visual appearance but does not report &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt; in metadata.</source>
          <target state="translated">이 속성 시각적 모양에 영향을 미칩니다. 하지만 보고 하지 않습니다 &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;메타 데이터에.&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</source>
          <target state="translated">시각적으로 유사한 변경 이벤트 구동 하 고 모든 시간에 적용 되지 않을 수 및 따라서 보고 하지 않아야 일반적으로 메타 데이터에는 visual 또는 레이아웃 정보가 때문입니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</source>
          <target state="translated">개념적으로 컨트롤에 적용 되는 포커스의 시각적 동작 컨트롤에 일관 된 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</source>
          <target state="translated">일관성을 적용 하는 가장 적절 한 방법은 전체 테마를 작성 하는 경우에 포커스 시각적 스타일을 변경 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</source>
          <target state="translated">개별 컨트롤 스타일 및 테마의 일부가 아니라이 속성을 설정할 수는 없습니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as &lt;xref:System.Windows.UIElement.IsFocused%2A&gt; or &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;, and to do so in a way that does not visually interfere with any existing focus visual style.</source>
          <target state="translated">테마 전체에서 일관 된 의도 한 대로 되지 않는 컨트롤 관련 동작을 하려는 경우 더 좋은 방법은를 사용 하 트리거 스타일의 개별 입력된 상태 속성 같은 &lt;xref:System.Windows.UIElement.IsFocused%2A&gt;또는 &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;, 하므로 기존 포커스 시각적 스타일 시각적 방해 하지 않는 방식으로 수행할 수 있습니다.&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt; &lt;/xref:System.Windows.UIElement.IsFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the design intention of FocusVisualStyle and alternative focus properties, see <bpt id="p1">[</bpt>Styling for Focus in Controls, and FocusVisualStyle<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">FocusVisualStyle 및 대체 포커스 속성의 디자인 의도에 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>컨트롤과 FocusVisualStyle에 포커스에 대 한 스타일 지정<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object FocusVisualStyle="{resourceExtension styleResourceKey}"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_FocusVisualStyle"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id="p3">&lt;a name="xamlValues_FocusVisualStyle"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>    One of the following: , or .</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object FocusVisualStyle="{resourceExtension styleResourceKey}"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_FocusVisualStyle"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 속성 요소 사용 <bpt id="p3">&lt;a name="xamlValues_FocusVisualStyle"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept> 다음 중 하나:, 또는.      </target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>    The key that identifies the style being requested.</source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept> 요청 되는 스타일을 식별 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">에 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 의 기존 리소스를이 키는</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 속성 요소 구문을 기술적으로 가능 하지만 권장 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>인라인 스타일 및 템플릿<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.</source>
          <target state="translated">사용 하 여 바인딩 참조 또는 &lt;xref:System.Windows.Data.Binding&gt;가능 하지만 일반적이 지 않은 이기도 합니다.&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The desired style to apply on focus.</source>
          <target state="translated">포커스에 적용 하려면 원하는 스타일입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The default value as declared in the dependency property is an empty static <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">종속성 속성에 선언 된 기본값은 빈 정적 <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</source>
          <target state="translated">그러나 런타임 시 유효 값은 대체로 (항상 그렇지는 않음) 컨트롤에 대 한 테마 지원에서 제공 되는 스타일입니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should force the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> to render the cursor as declared by the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; property.</source>
          <target state="translated">표시 하는 값을 가져오거나 설정 합니다. 여부이 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 강제로 다시 시작은 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> 으로 선언 된 커서를 렌더링 하는 &lt;xref:System.Windows.FrameworkElement.Cursor*&gt;속성.&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set this property to <ph id="ph1">`true`</ph> you will override the cursor preferences established by child elements.</source>
          <target state="translated">이 속성을 설정 하는 경우 <ph id="ph1">`true`</ph> 자식 요소에서 설정한 커서 기본 설정을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so in general application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> might be confusing for the user, particularly if child elements are attempting to specify cursors.</source>
          <target state="translated">이렇게 하면 일반적 응용 프로그램 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> 자식 요소는 커서를 지정 하려고 하는 경우에 특히 해당 사용자를 혼동 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting ForceCursor is more appropriate in control subclassing or compositing scenarios.</source>
          <target state="translated">ForceCursor 설정은 컨트롤 서브클래싱 또는 작성 시나리오에 보다 적합 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ForceCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ForceCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if cursor presentation while over this element is forced to use current &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; settings for the cursor (including on all child elements); otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 요소 위에 있는 동안 커서가 표시 현재 사용 하도록 강제 됩니다 &lt;xref:System.Windows.FrameworkElement.Cursor*&gt;(모든 자식 요소 포함); 커서에 대 한 설정을 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ForceCursor*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.ForceCursor*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.ForceCursor*&gt;</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the binding on the specified property.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 속성의 바인딩을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checking the return value for <ph id="ph1">`null`</ph> is a technique you can use to determine whether a property has an active binding.</source>
          <target state="translated">에 대 한 반환 값을 확인 <ph id="ph1">`null`</ph> 기술을 사용 하면 속성에 활성 바인딩이 있는지 여부를 확인 하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is really just a convenience wrapper around the &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 실제로 편리한 래퍼는 &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetBindingExpression passes the current instance and the <ph id="ph1">`dp`</ph> parameter to &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">현재 인스턴스를 전달 하는 GetBindingExpression 및 <ph id="ph1">`dp`</ph> &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt; 매개 변수</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The target <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to get the binding from.</source>
          <target state="translated">대상 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에서 바인딩을 가져오려는 합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the target property has an active binding; otherwise, returns <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 대상 속성에 활성 바인딩이; 그렇지 않으면 반환 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Gets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the specified <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값을 가져옵니다는 &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;연결 된 속성에서 지정 된 <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main purpose of this method is to support attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">에 대 한 연결 된 속성 구문을 지원 하도록이 메서드의 주요 목적은는 &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;속성, 자식 요소는 제공 된 &lt;xref:System.Windows.FrameworkElement&gt;해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하도록 합니다.&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.</source>
          <target state="translated">현재 값을 &lt;xref:System.Windows.FrameworkElement&gt;를 직접 사용 하 여 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> 접근자 &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The element to return a &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; for.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;&amp;Gt;for&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt; 반환할 요소</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The requested flow direction, as a value of the enumeration.</source>
          <target state="translated">열거형의 값으로 요청 된 흐름 방향입니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Returns a geometry for a clipping mask.</source>
          <target state="translated">클리핑 기 하 도형을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</source>
          <target state="translated">/ / 마스크에는 레이아웃 시스템에서 사용 가능한 표시 공간 보다 큰 요소를 정렬 하려고 하는 경우 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Margins will be subtracted from the <ph id="ph1">`layoutSlotSize`</ph> as part of layout system behavior.</source>
          <target state="translated">여백에서 차감는 <ph id="ph1">`layoutSlotSize`</ph> 레이아웃 시스템 동작의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>A returned null reference indicates that no clipping will occur.</source>
          <target state="translated">Null 참조가 반환 되는 오려낸 없습니다 발생 하는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation always returns <ph id="ph1">`null`</ph> when &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">기본 구현에서는 항상 반환 <ph id="ph1">`null`</ph> 때 &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;은 <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.UIElement.ClipToBounds%2A&gt;</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드를 재정의 &lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation uses &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; in its calculations.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;구현 사용 &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;계산에.&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several subclasses of &lt;xref:System.Windows.FrameworkElement&gt; override this method again.</source>
          <target state="translated">여러 하위 클래스 &lt;xref:System.Windows.FrameworkElement&gt;다시이 메서드를 재정의 합니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;, overrides to always return <ph id="ph1">`null`</ph> because adorners are often deliberately outside the ordinary bounds.</source>
          <target state="translated">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;를 반환을 항상 재정의 <ph id="ph1">`null`</ph> 표시기 경우가 많기 때문에 의도적으로 일반 범위를 벗어났습니다.&lt;/xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt; and &lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt; return <ph id="ph1">`null`</ph> if &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt;and &lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt; return <ph id="ph1">`null`</ph> if &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.UIElement.ClipToBounds%2A&gt;&lt;/xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The size of the part of the element that does visual presentation.</source>
          <target state="translated">시각적 표시를 수행 하는 요소 부분의 크기입니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The clipping geometry.</source>
          <target state="translated">클리핑 기 하 도형입니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Returns the named element in the visual tree of an instantiated <bpt id="p1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">명명된 된 요소는 인스턴스화된의 시각적 트리에 반환 <bpt id="p1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>Templates in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> have a self-contained namescope.</source>
          <target state="translated">서식 파일에서 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 는 자체 포함 된 네임 스페이스에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</source>
          <target state="translated">서식 파일에 정의 된 이름이 없는 고유 하지 않게 될 각 컨트롤의 여러 인스턴스 템플릿을 인스턴스화하면 및 템플릿이 다시 사용 되므로 때문입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the GetTemplateChild method to return references to objects that come from the template after it is instantiated.</source>
          <target state="translated">인스턴스화된 후 서식 파일에서 가져온 개체에 대 한 참조를 반환 하려면 GetTemplateChild 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use the &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; method to find items from templates because &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; acts in a more general scope, and there is no connection between the &lt;xref:System.Windows.Controls.ControlTemplate&gt; class itself and the instantiated template once it is applied.</source>
          <target state="translated">사용할 수 없습니다는 &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;때문에 서식 파일에서 항목을 찾을 메서드의 &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;범위 보다 일반적인 내에서 작동 하 고 간의 연결이 &lt;xref:System.Windows.Controls.ControlTemplate&gt;클래스 자체와 인스턴스화된 템플릿이 적용 되 고 나면.&lt;/xref:System.Windows.Controls.ControlTemplate&gt; &lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; supplies the same function as this method.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;이 방법으로 동일한 기능을 제공합니다.&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;요소 이름이 items이 고 그 안에 찾기 내의 서식 파일에 액세스할 수 있도록 허용 하는 올바른 이름-범위 고려 사항 사용 하는 public이 아닌 보호.&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; when you need to get an element outside of its parent control.</source>
          <target state="translated">사용 하 여 &lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;부모 컨트롤 외부에서 요소를 가져오는 중지 해야 합니다.&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Name of the child to find.</source>
          <target state="translated">찾을 자식의의 이름입니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The requested element.</source>
          <target state="translated">요청 된 요소입니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no element of the requested name exists.</source>
          <target state="translated">되었을 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요청한 이름이의 요소가 없을 경우.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Returns an alternative logical parent for this element if there is no visual parent.</source>
          <target state="translated">시각적 부모가 없는 경우이 요소에 대 한 대체 논리 부모를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드를 재정의 &lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default &lt;xref:System.Windows.FrameworkElement&gt; implementation returns the expected single visual parent, which is the same result as getting the &lt;xref:System.Windows.FrameworkElement.Parent%2A&gt; value.</source>
          <target state="translated">기본 &lt;xref:System.Windows.FrameworkElement&gt;구현은 가져오는와 동일한 결과 즉 예상된 단일 시각적 부모는 &lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;값.&lt;/xref:System.Windows.FrameworkElement.Parent%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived class implementations might return alternate parent relationships.</source>
          <target state="translated">파생된 클래스 구현은 대체 부모 관계를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Returns something other than <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</source>
          <target state="translated">이외의 다른 값을 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 때마다이 메서드의 WPF 프레임 워크 수준 구현에 시각적 부모가 아닌 연결이 있습니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Overrides <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>, and returns a child at the specified index from a collection of child elements.</source>
          <target state="translated">재정의 <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>, 자식 요소 컬렉션에서 지정된 된 인덱스의 자식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the &lt;xref:System.Windows.FrameworkElement&gt; implementation, the only valid index is zero.</source>
          <target state="translated">에 &lt;xref:System.Windows.FrameworkElement&gt;구현만 유효한 인덱스는&amp;0;입니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content model for GetVisualChild supports either zero or one child elements, not a collection.</source>
          <target state="translated">콘텐츠 모델 GetVisualChild에&amp;0; 개 또는&amp;1; 자식 요소, 컬렉션이 아닌를 지원합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The zero-based index of the requested child element in the collection.</source>
          <target state="translated">컬렉션에서 요청 된 자식 요소의&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The requested child element.</source>
          <target state="translated">요청 된 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This should not return <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; if the provided index is out of range, an exception is thrown.</source>
          <target state="translated">이렇게 하면 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>부재 중 지정 된 인덱스는 범위, 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets or sets the suggested height of the element.</source>
          <target state="translated">요소의 제안 된 높이 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>Height is one of three writable properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">높이 세 개의 쓰기 가능한 속성 중 하나에서 &lt;xref:System.Windows.FrameworkElement&gt;높이 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual height determination is that first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally, if it is within bounds, Height.</source>
          <target state="translated">간에 충돌 하는 경우 이들 값이 실제 높이 결정 하기 위한 응용 프로그램의 순서는 첫 번째 &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;다음, 해야 &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, 마지막으로, 높이 범위 내에 있는 경우.&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</source>
          <target state="translated">이 요소는 자식 요소가 다른 요소 내에서 이면 다음이 속성 값을 설정 실제로 제안 된 값입니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</source>
          <target state="translated">이 레이아웃 시스템 뿐만 아니라 부모 요소의 특정 레이아웃 논리 값이 사용 됩니다 바인딩되지 입력으로 레이아웃 과정입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>In practical terms, a &lt;xref:System.Windows.FrameworkElement&gt; is almost always the child element of something else; even when you set the Height on &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">실제로 &lt;xref:System.Windows.FrameworkElement&gt;거의 항상 &lt;xref:System.Windows.Window&gt;.&lt;/xref:System.Windows.Window&gt; 높이 설정 하는 경우에 다른; 값인지의 자식 요소는&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For &lt;xref:System.Windows.Window&gt;, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)       In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.</source>
          <target state="translated">(에 대 한 &lt;xref:System.Windows.Window&gt;, 응용 프로그램을 호스팅하는 기본 응용 프로그램 모델의 기본 렌더링 가정은 Hwnd를 만드는 하는 경우 값이 사용 됩니다.)&lt;/xref:System.Windows.Window&gt;       &lt;xref:System.Double&gt;이 속성 값 또한 &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.&lt;/xref:System.Double.NaN?displayProperty=fullName&gt; 수&lt;/xref:System.Double&gt; 허용 하는 것 외에도</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is how you specify auto sizing behavior in code.</source>
          <target state="translated">코드에서 자동 크기 조정 동작을 지정 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분)로 자동 크기 조정 동작을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Auto sizing behavior implies that the element will fill the height available to it.</source>
          <target state="translated">자동 크기 조정 동작 요소를 사용할 수 있는 높이 가득 찰 의미 합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">그러나 note 특정 컨트롤을 기본 테마 스타일 자동 크기 조정 동작 구체적으로 다시 설정 된 경우가 아니라면 사용할 수 없게 됩니다을 통해 기본 값 제공 하는 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">이 속성의 반환 값은 항상에 대해 설정 된 값과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; may vary.</source>
          <target state="translated">반대로,의 값은 &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;다를 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</source>
          <target state="translated">어떤 이유로 제안 된 크기를 거부 하는 레이아웃 정적으로 발생할 수 있습니다이 일시적으로 또는 합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system itself works asynchronously relative to the property system's set of Height and may not have processed that particular sizing property change yet.</source>
          <target state="translated">레이아웃 시스템 자체의 높이 속성 시스템의 집합을 기준으로 비동기적으로 작동 하 고 해당 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">에 대 한 값 제한은 &lt;xref:System.Double&gt;값에 의해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;메커니즘.&lt;/xref:System.Windows.ValidateValueCallback&gt; &lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).</source>
          <target state="translated">유효성 검사 이외에 비결 정적 상한 값이 레이아웃 시스템에 의해 적용 되는 높이 대 한 경계 (이 보다 큰 매우 큰 숫자 &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt;보다 높지만 &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).&lt;/xref:System.Double.MaxValue?displayProperty=fullName&gt; &lt;/xref:System.Single.MaxValue?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">이 경계를 초과 하면 요소가 렌더링 되지 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not set Height to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">높이 가능한 시각적 표시의 최대 크기 보다 훨씬 큰 값으로 설정 하지 않으면 또는 비결 정적이 상한 값을 초과할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Height="double"/&gt;   - or -   &lt;object Height="qualifiedDouble"/&gt;   - or -   &lt;object Height="Auto"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Height"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object Height="double"/&gt;   - or -   &lt;object Height="qualifiedDouble"/&gt;   - or -   &lt;object Height="Auto"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Height"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대 한 설명을 참조 하세요.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px       <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>    Enables autosizing behavior.</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <bpt id="p1">**</bpt>자동<ept id="p1">**</ept> 크기 자동 조정 동작을 사용 합니다.       </target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HeightProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.HeightProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.HeightProperty&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 높이 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0 보다 크거나 같은 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대 한 설명을 참조 하세요.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Height*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Height*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Height*&gt;</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</source>
          <target state="translated">패널 또는 항목 컨트롤 같은 부모 요소에서 작성 하는 경우이 요소에 적용 되는 가로 맞춤 특징을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to &lt;xref:System.Windows.HorizontalAlignment&gt;.</source>
          <target state="translated">경우 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;속성 요소에 명시적으로 설정 되어, 이러한 측정값을 레이아웃 하는 동안 높은 우선 되며 &lt;xref:System.Windows.HorizontalAlignment&gt;.&lt;/xref:System.Windows.HorizontalAlignment&gt; HorizontalAlignment을 설정할 때의 일반적인 효과 취소 합니다.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>HorizontalAlignment is the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated">HorizontalAlignment는는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</source>
          <target state="translated">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 서브클래싱된 요소, 특히 컨트롤에서에서 서로 다르게 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 해당 기본값을 설정 하기 위한 여러 가지 메타 데이터 사용 하면서도 특정 서브 클래스에 다시 등록 있거나 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일 적용 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the apparent "default" of HorizontalAlignment for a &lt;xref:System.Windows.Controls.Label&gt; control will be &lt;xref:System.Windows.HorizontalAlignment&gt;, even though &lt;xref:System.Windows.Controls.Label&gt; inherits HorizontalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">예를 들어 명백한 "기본값인"에 대 한 HorizontalAlignment는 &lt;xref:System.Windows.Controls.Label&gt;컨트롤 됩니다 &lt;xref:System.Windows.HorizontalAlignment&gt;경우라도, &lt;xref:System.Windows.Controls.Label&gt; &lt;xref:System.Windows.FrameworkElement&gt;.&lt;/xref:System.Windows.FrameworkElement&gt; HorizontalAlignment 직접 상속&lt;/xref:System.Windows.Controls.Label&gt; &lt;/xref:System.Windows.HorizontalAlignment&gt; &lt;/xref:System.Windows.Controls.Label&gt;</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.Label&gt;, within the style's control template.</source>
          <target state="translated">즉, 해당 값의 기본 스타일 내에서 다시 설정 된 &lt;xref:System.Windows.Controls.Label&gt;, 스타일의 컨트롤 템플릿 내에서.&lt;/xref:System.Windows.Controls.Label&gt;</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Canvas&gt; does not use HorizontalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas&gt;되므로 사용 하지 않습니다 HorizontalAlignment 레이아웃을 구성할 때 &lt;xref:System.Windows.Controls.Canvas&gt;절대 위치에 따라.&lt;/xref:System.Windows.Controls.Canvas&gt;&lt;/xref:System.Windows.Controls.Canvas&gt;</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inherited by &lt;xref:System.Windows.Controls.Label&gt; or derived classes, &lt;xref:System.Windows.Controls.Label&gt; redefines the default value of this dependency property to be &lt;xref:System.Windows.HorizontalAlignment&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Label&gt;또는 &lt;xref:System.Windows.Controls.Label&gt; &lt;xref:System.Windows.HorizontalAlignment&gt;.&lt;/xref:System.Windows.HorizontalAlignment&gt; 되도록이 종속성 속성의 기본값 다시 정의 하는&lt;/xref:System.Windows.Controls.Label&gt; 파생된 클래스에서&lt;/xref:System.Windows.Controls.Label&gt; 상속 되는 경우</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A horizontal alignment setting, as a value of the enumeration.</source>
          <target state="translated">열거형의 값으로는 가로 맞춤 설정입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.HorizontalAlignment"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</source>
          <target state="translated">속성 값 상속, 리소스 키 조회 및 RelativeSource FindAncestor 조회에 대 한 범위 제한을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</source>
          <target state="translated">요소 트리의 특정 경계를에서 의도 한 대로 응용 프로그램 리소스를 확인 하거나 RelativeSource FindAncestor 조회를 더 이상 현재 요소 또는 쿼리 않으려면 force 리소스 조회에 상속 동작의 범위를 제한 하는 InheritanceBehavior를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>RelativeSource FindAncestor lookup occurs when a binding uses a &lt;xref:System.Windows.Data.RelativeSource&gt; that has its &lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt; property set to the &lt;xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt; value.</source>
          <target state="translated">RelativeSource FindAncestor 조회 바인딩을 사용 하는 경우에 발생 한 &lt;xref:System.Windows.Data.RelativeSource&gt;있는 해당 &lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;속성이로 설정는 &lt;xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt;값.&lt;/xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt; &lt;/xref:System.Windows.Data.RelativeSource.Mode%2A&gt; &lt;/xref:System.Windows.Data.RelativeSource&gt;</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</source>
          <target state="translated">이 속성을 설정 하려면 파생된 클래스를 사용 하도록 하려는 경우 정적 생성자 또는 다른 초기화 루틴에서 그렇게 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.InheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.InheritanceBehavior"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Occurs when this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized.</source>
          <target state="translated">발생 경우이 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>This event coincides with cases where the value of the &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; property changes from <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (or undefined) to <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 이벤트는 경우와 일치 여기서의 값은 &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt;속성이에서 변경 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (또는 undefined)를 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.IsInitialized*&gt;</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event will be raised whenever the &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; or &lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt; methods are called.</source>
          <target state="translated">이 이벤트가 될 때마다 발생는 &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;또는 &lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;메서드가 호출 됩니다.&lt;/xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt; &lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to either method could have come from application code, or through the <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> processor behavior when a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> page is processed.</source>
          <target state="translated">두 방법 중 하나에 대 한 호출에서 응용 프로그램 코드 또는 나올 수는 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 프로세서 동작 때는 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 페이지를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to handle &lt;xref:System.Windows.FrameworkElement.Loaded&gt; or Initialized depends on your requirements.</source>
          <target state="translated">처리 하도록 선택 하 든 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;없거나 Initialized 요구 사항에 따라 다릅니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, Initialized might be the better event to act upon.</source>
          <target state="translated">요소 속성, 속성을 다시 사용할 필요가 없습니다 레이아웃 정보가 필요 하지 않은 경우 Initialized 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, &lt;xref:System.Windows.FrameworkElement.Loaded&gt; might be the better event to act upon.</source>
          <target state="translated">를 사용할 수 있도록이 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;더 나은 이벤트 작업을 수행할 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">처리기에 필요한 새로운 레이아웃 단계는이 레이아웃 시스템에서 해석 하는 모든 속성이 다시 설정 하는 경우 재진입 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">(확인 해야 할 수 있습니다는 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;속성 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성의 값 변경 된 경우에 전달 합니다.)&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;       개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 &lt;xref:System.Windows.FrameworkElement&gt;, 또한 여러 관련 응용 프로그램 및 요소 클래스를 참조 하 고 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Gets or sets the context for input used by this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 사용 되는 입력에 대 한 컨텍스트를 가져오거나 설정 합니다. <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are child elements without other values for InputScope established through local values or styles, then the property system will set the value to be the InputScope value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">InputScope 로컬 값 또는 스타일을 통해 설정에 대 한 다른 값이 없는 자식 요소가 없으면 속성 시스템은 값이이 값이 할당 된 가장 가까운 상위 항목 요소 InputScope 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax usage is listed and is syntactically allowed, setting this property in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is not common.</source>
          <target state="translated">하지만 한 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 구문 사용 나열 되 고 구문이 허용 되는 경우이 속성을 설정할 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 이 일반적입니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_InputScope"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.InputScopeProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_InputScope"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.InputScopeProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.InputScopeProperty&gt;</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The input scope, which modifies how input from alternative input methods is interpreted.</source>
          <target state="translated">대체 입력 메서드에서 입력이 해석 되는 방법을 수정 하는 입력된 범위입니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (which results in a default handling of commands).</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (명령의 기본 처리 결과).</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.InputScope*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.InputScope*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.InputScope*&gt;</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has been initialized, either during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor, or by explicitly having its &lt;xref:System.Windows.FrameworkElement.EndInit*&gt; method called.</source>
          <target state="translated">이 요소가 초기화 되었는지 여부를 나타내는 값을 가져옵니다에서 처리 하는 동안는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서를 명시적으로 해당 &lt;xref:System.Windows.FrameworkElement.EndInit*&gt;메서드를 호출 합니다.&lt;/xref:System.Windows.FrameworkElement.EndInit*&gt;</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property may also be <ph id="ph1">`true`</ph> if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</source>
          <target state="translated">두이 일 수도 <ph id="ph1">`true`</ph> 새 부모 요소가 있으며 따라서 요소가 다시 로드 되도록이 요소의 논리적 트리 내에서 옮겨졌습니다 경우.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is useful if you also are using &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;.</source>
          <target state="translated">이 속성은 또한 사용 중인 경우 &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt; &lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt; 유용</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in the logical tree that is loaded by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor are assured to be initialized.</source>
          <target state="translated">로드 하는 논리적 트리에서 요소는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서 초기화를 보장 합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements not in the logical tree are initialized when &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; is called.</source>
          <target state="translated">논리 트리에 없는 요소를 초기화할 때 &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;호출 됩니다.&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>In absence of any specific handling of &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;, this will happen as soon as the constructor returns the initialized result.</source>
          <target state="translated">없는 경우 모든 특정 처리 &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;, 생성자 초기화 된 결과 반환 하는 즉시 발생 합니다.&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt; &lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is initialized per the aforementioned <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processing or method calls; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>요소가 앞서 언급 한 마다 초기화 되 면 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 처리 또는 메서드 호출, 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has been loaded for presentation.</source>
          <target state="translated">이 요소를 표시 하기 위해 로드 했는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>From a newly constructed &lt;xref:System.Windows.FrameworkElement&gt;, this property starts off <ph id="ph1">`false`</ph>, and remains <ph id="ph2">`true`</ph> after it is set to <ph id="ph3">`true`</ph>, even if the element is subsequently removed from a connected logical tree by code.</source>
          <target state="translated">새로 생성 된 &lt;xref:System.Windows.FrameworkElement&gt;,이 속성 설정을 시작할 <ph id="ph1">`false`</ph>, 상태를 유지 하 고 <ph id="ph2">`true`</ph> 로 설정 된 후 <ph id="ph3">`true`</ph>는 요소가 코드를 통해 연결 된 논리적 트리에서 제거 되는 경우에.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`true`</ph> state is set by the general presentation logic when elements are loaded into the presentation engine.</source>
          <target state="translated"><ph id="ph1">`true`</ph>요소 프레젠테이션 엔진에 로드 될 때 상태가 일반 프레젠테이션 논리에 의해 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, loaded elements are rendered, but not all &lt;xref:System.Windows.FrameworkElement&gt; derived classes have a presentation, and other properties such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; can influence presentation.</source>
          <target state="translated">일반적으로 로드 된 요소는 렌더링 아니지만 일부 &lt;xref:System.Windows.FrameworkElement&gt;파생된 클래스에는 프레젠테이션 및과 같은 기타 속성 &lt;xref:System.Windows.UIElement.Visibility%2A&gt;프레젠테이션에 영향을 줄 수 있습니다.&lt;/xref:System.Windows.UIElement.Visibility%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current element is attached to an element tree; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the element has never been attached to a loaded element tree.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>현재 요소의 요소 트리에서;에 연결 된 경우 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 요소는 로드 된 요소 트리에 연결 되지 않은 경우.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Gets or sets localization/globalization language information that applies to an element.</source>
          <target state="translated">요소에 적용 되는 지역화/세계화 언어 정보를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string formats follow the RFC 3066 standard.</source>
          <target state="translated">문자열 형식의 RFC 3066 표준에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, U.S. English is "en-US".</source>
          <target state="translated">예를 들어 미국 영어는 "EN-US"입니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the values and format, see &lt;xref:System.Windows.Markup.XmlLanguage&gt;.</source>
          <target state="translated">값 및 형식에 대 한 자세한 내용은 &lt;xref:System.Windows.Markup.XmlLanguage&gt;.&lt;/xref:System.Windows.Markup.XmlLanguage&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>This dependency property inherits property values.</source>
          <target state="translated">속성 값이 종속성 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are child elements without other values for Language established through local values or styles, the property system will set the value to be the Language value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">로컬 값 또는 스타일을 통해 설정 하는 언어에 대 한 다른 값이 없는 자식 요소가 없으면 속성 시스템에 값이이 값이 할당 된 가장 가까운 상위 요소의 언어 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph> defines the general meaning of the <ph id="ph2">`xml:lang`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>일반적인 의미를 정의 고 <ph id="ph2">`xml:lang`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language essentially exposes the meaning of this attribute as a dependency property.</source>
          <target state="translated">언어는 기본적으로이 특성의 의미는 종속성 속성으로 노출합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the <ph id="ph1">`xml:lang`</ph> attribute can inherit to child element scope in <ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>.</source>
          <target state="translated">언어 프로그래밍 방식으로 조정할 수 있습니다 및 기능과 유사한 방식으로 속성 시스템 값을 상속에 참여할 수는 어떻게 <ph id="ph1">`xml:lang`</ph> 특성의 자식 요소 범위를 상속할 수 <ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set Language, that value becomes the <ph id="ph1">`xml:lang`</ph> and overwrites any previous value.</source>
          <target state="translated">언어를 설정 하는 경우 해당 값이 고 <ph id="ph1">`xml:lang`</ph> 하 고 이전 값을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>xml:lang Handling in XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>xml: lang XAML의 처리<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_CultureInfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LanguageProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_CultureInfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.LanguageProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.LanguageProperty&gt;</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The language information for this element.</source>
          <target state="translated">이 요소에 대 한 언어 정보입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The default value is an <bpt id="p1">&lt;xref href="System.Windows.Markup.XmlLanguage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with its &lt;xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt; value set to the string "en-US".</source>
          <target state="translated">기본값은는 <bpt id="p1">&lt;xref href="System.Windows.Markup.XmlLanguage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 와 해당 &lt;xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt;값 문자열 "EN-US"로 설정 합니다.&lt;/xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt;</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Language*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Language*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Language*&gt;</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</source>
          <target state="translated">레이아웃이 수행 될 때이 요소에 적용 해야 하는 그래픽 변형을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast to &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;, LayoutTransform will affect results of layout.</source>
          <target state="translated">달리 &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;, LayoutTransform 레이아웃의 결과 영향을 줍니다.&lt;/xref:System.Windows.UIElement.RenderTransform%2A&gt;</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a transform provides powerful capabilities of scaling and rotating.</source>
          <target state="translated">변환을 설정 하면 크기 조정 및 회전의 강력한 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, LayoutTransform ignores &lt;xref:System.Windows.Media.TranslateTransform&gt; operations.</source>
          <target state="translated">그러나 LayoutTransform 무시 &lt;xref:System.Windows.Media.TranslateTransform&gt;작업.&lt;/xref:System.Windows.Media.TranslateTransform&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the layout system behavior for child elements of a &lt;xref:System.Windows.FrameworkElement&gt; auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</source>
          <target state="translated">때문에 이것이의 자식 요소에 대 한 레이아웃 시스템 동작은 &lt;xref:System.Windows.FrameworkElement&gt;자동 수정 레이아웃에 크기가 조정 되거나 회전 된 요소의 위치 및 좌표계 부모 요소에 대 한 오프셋입니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>LayoutTransform can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</source>
          <target state="translated">LayoutTransform은 레이아웃 시스템에서 전체 과정을 필요로 하지 않는 시나리오에서 호출 하는 경우 응용 프로그램 성능이 저하 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you apply a LayoutTransform to the &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection of the &lt;xref:System.Windows.Controls.Panel&gt;, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</source>
          <target state="translated">LayoutTransform을 적용 하는 경우는 &lt;xref:System.Windows.Controls.Panel.Children%2A&gt;의 컬렉션은 &lt;xref:System.Windows.Controls.Panel&gt;, 레이아웃 시스템에서 새로운 패스를 트리거합니다 및 모든 화면 트리거되고 하 고 다시 정렬 하려면 개체가.&lt;/xref:System.Windows.Controls.Panel&gt; &lt;/xref:System.Windows.Controls.Panel.Children%2A&gt;</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are updating the complete application <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>, this functionality might be exactly what you need.</source>
          <target state="translated">전체 응용 프로그램을 업데이트 하는 경우 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>,이 기능은 정확히 일 수 있습니다 어떻게 해야 합니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you do not need a full layout pass, use the &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt; property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</source>
          <target state="translated">그러나 전체 레이아웃 단계를 필요 하지 않은 경우 사용 하 여는 &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;속성 레이아웃 시스템을 호출 하지 않는 이며 따라서 일반적으로이 시나리오에 대 한 더 좋습니다.&lt;/xref:System.Windows.UIElement.RenderTransform%2A&gt;</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.      <bpt id="p1">&lt;a name="dependencyPropertyInfo_LayoutTransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated">예를 들면 여기서 LayoutTransform 것이 유용한 다음과: 편집 동작 등을 제공 하는 포커스 (확대) 요소 크기를 조정 하는 가로 또는 그 반대로 세로로 메뉴 구성 요소 같은 요소를 회전 합니다.      <bpt id="p1">&lt;a name="dependencyPropertyInfo_LayoutTransform"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> # # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The transform this element should use.</source>
          <target state="translated">이 요소를 사용 해야 하는 변환입니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The default is &lt;xref:System.Windows.Media.Transform.Identity*&gt;.</source>
          <target state="translated">기본값은 &lt;xref:System.Windows.Media.Transform.Identity*&gt;.&lt;/xref:System.Windows.Media.Transform.Identity*&gt;</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.LayoutTransform*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.LayoutTransform*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.LayoutTransform*&gt;</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Occurs when the element is laid out, rendered, and ready for interaction.</source>
          <target state="translated">요소를 배치 하 고 상호 작용할 준비가 렌더링 하는 경우 발생 합니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>Loaded is usually the last event raised in an element initialization sequence.</source>
          <target state="translated">로드는 일반적으로 마지막 이벤트 발생 요소 초기화 시퀀스 합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>It will always be raised after &lt;xref:System.Windows.FrameworkElement.Initialized&gt;.</source>
          <target state="translated">항상 &lt;xref:System.Windows.FrameworkElement.Initialized&gt;.&lt;/xref:System.Windows.FrameworkElement.Initialized&gt; 후 발생 합니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to handle Loaded or &lt;xref:System.Windows.FrameworkElement.Initialized&gt; depends on your requirements.</source>
          <target state="translated">로드를 처리 하도록 선택 하 든 또는 &lt;xref:System.Windows.FrameworkElement.Initialized&gt;요구 사항에 따라 달라 집니다.&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; might be the better event to act upon.</source>
          <target state="translated">요소 속성을 읽는 필요 하지 않는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 &lt;xref:System.Windows.FrameworkElement.Initialized&gt;더 나은 이벤트 작업을 수행할 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, Loaded might be the better event to act upon.</source>
          <target state="translated">모든 속성을 사용 해야 할 경우에 요소를 사용할 수 있도록 하 고 속성을 설정 레이아웃을 다시 설정할 수 있는 로드 더 나은 이벤트 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">처리기에 필요한 새로운 레이아웃 단계는이 레이아웃 시스템에서 해석 하는 모든 속성이 다시 설정 하는 경우 재진입 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">(확인 해야 할 수 있습니다는 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;속성 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성의 값 변경 된 경우에 전달 합니다.)&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;       개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 &lt;xref:System.Windows.FrameworkElement&gt;, 또한 여러 관련 응용 프로그램 및 요소 클래스를 참조 하 고 <bpt id="p1">[</bpt>개체 수명 이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서.&lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Loaded and &lt;xref:System.Windows.FrameworkElement.Unloaded&gt; might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated">로드 및 &lt;xref:System.Windows.FrameworkElement.Unloaded&gt;시스템 사용자가 시작한 테마 변경의 결과로 컨트롤에서 발생할 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.Unloaded&gt;</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">테마를 변경 하면 컨트롤 템플릿 및 포함 된 시각적 트리가 그러면 언로드하고 다시 로드 하기 위해 전체 컨트롤의 무효화 합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore Loaded cannot be assumed to occur only when a page is first loaded through navigation to the page.</source>
          <target state="translated">따라서 Loaded만 페이지를 처음 로드할 때 페이지 탐색을 통해 적용 되려면 가정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Loaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LoadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Loaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.LoadedEvent&gt;|   | 라우팅 전략 | 직접 |   | 대리자 | &lt;xref:System.Windows.RoutedEventHandler&gt;|&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.LoadedEvent&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Loaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Loaded"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for logical child elements of this element.</source>
          <target state="translated">이 요소의 논리 자식 요소에 대 한 열거자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>LogicalChildren allows you to iterate over child elements.</source>
          <target state="translated">LogicalChildren를 사용 하면 자식 요소를 반복할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly &lt;xref:System.Windows.FrameworkContentElement&gt; child elements.</source>
          <target state="translated">이 정의 되 고 전용 컬렉션이 수 있지만 여전히 특히 둘 이상의 자식 요소를 포함 하는 요소에 대 한 유용한 &lt;xref:System.Windows.FrameworkContentElement&gt;자식 요소.&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how to use LogicalChildren and &lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">LogicalChildren를 사용 하는 방법에 대 한 자세한 내용은 및 &lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;, 참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>An enumerator for logical child elements of this element.</source>
          <target state="translated">이 요소의 논리 자식 요소에 대 한 열거자입니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Gets or sets the outer margin of an element.</source>
          <target state="translated">요소의 바깥쪽 여백을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>The margin is the space between this element and other elements that will be adjacent when layout creates the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 요소와 레이아웃을 만들 때 인접 하는 다른 요소 사이의 간격을 여백은 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</source>
          <target state="translated">공유 요소 피어 요소 (예: 다른 요소는 공통 부모 컨트롤의 컬렉션), 없거나이 요소의 부모 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>Margin is set as a &lt;xref:System.Windows.Thickness&gt; structure rather than as a number so that the margin can be set asymmetrically.</source>
          <target state="translated">여백이 설정으로 &lt;xref:System.Windows.Thickness&gt;구조 아닌 숫자로 여백을 비대칭적으로 설정할 수 있도록 합니다.&lt;/xref:System.Windows.Thickness&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Thickness&gt; structure itself supports string type conversion so that you can specify an asymmetric Margin in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax also.</source>
          <target state="translated">&lt;xref:System.Windows.Thickness&gt;구조 자체 비대칭 여백에 지정할 수 있도록 문자열 형식 변환을 지원 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 특성 구문 에서도.&lt;/xref:System.Windows.Thickness&gt;</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>A non-zero margin applies space outside the element layout's &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;.</source>
          <target state="translated">0이 아닌 여백 &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; 요소 레이아웃의 바깥쪽에 공간을 적용</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</source>
          <target state="translated">여백은 레이아웃; 형제 요소에 대 한 추가 예를 들어 인접 가장자리 30의 여백 모두 설정 하는 인접 요소 두 개 사이 공백 60 개의 것입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements that have margins set will not typically constrain the size of the specified Margin if the allotted rectangle space is not large enough for the margin plus the element content area.</source>
          <target state="translated">할당 된 사각형 공간이 여백 및 요소 콘텐츠 영역에 충분 하지 않을 경우 여백이 설정 되어 있는 요소 지정 된 여백 크기를 일반적으로 제한 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element content area will be constrained instead when layout is calculated.</source>
          <target state="translated">대신 레이아웃을 계산할 때 요소 콘텐츠 영역에 제한이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only case where margins would be constrained also is if the content is already constrained all the way to zero.</source>
          <target state="translated">여백을 제한할 수는 유일한 경우는 또한 하는 경우이 콘텐츠가 이미&amp;0;까지 제약 조건이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Margin="left,top,right,bottom"/&gt;   - or -   &lt;object Margin="left,top"/&gt;   - or -   &lt;object Margin="thicknessReference"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Margin"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     &lt;object.Margin&gt;       &lt;Thickness Left="left" Top="top" Right="right" Bottom="bottom"/&gt;     &lt;/object.Margin&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_Margin"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>left, top, right, bottom<ept id="p4">*</ept>    Number values between 0 and &lt;xref:System.Double.PositiveInfinity&gt; that specify the four possible dimension properties of a &lt;xref:System.Windows.Thickness&gt; structure.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object Margin="left,top,right,bottom"/&gt;   - or -   &lt;object Margin="left,top"/&gt;   - or -   &lt;object Margin="thicknessReference"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Margin"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 속성 요소 사용 <ph id="ph2">```   &lt;object&gt;     &lt;object.Margin&gt;       &lt;Thickness Left="left" Top="top" Right="right" Bottom="bottom"/&gt;     &lt;/object.Margin&gt;   &lt;/object&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_Margin"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p4">*</bpt>상위, 오른쪽, 아래쪽,<ept id="p4">*</ept> 0 사이의 숫자 값 및 &lt;xref:System.Double.PositiveInfinity&gt;의 4 가지 가능한 차원 속성을 지정 하는 한 &lt;xref:System.Windows.Thickness&gt;구조.&lt;/xref:System.Windows.Thickness&gt; &lt;/xref:System.Double.PositiveInfinity&gt;            </target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</source>
          <target state="translated">특성 사용에 수락할 대칭적 및 논리적으로 제공 된 순서에 적용 되는 약어 값도 합니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, <ph id="ph1">`Margin="20"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with all properties set to 20.</source>
          <target state="translated">예를 들어, <ph id="ph1">`Margin="20"`</ph> 의미를 해석할 수는 &lt;xref:System.Windows.Thickness&gt;20으로 설정 하는 모든 속성을 가진.&lt;/xref:System.Windows.Thickness&gt;</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Margin="20,50"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with &lt;xref:System.Windows.Thickness.Left%2A&gt; and &lt;xref:System.Windows.Thickness.Right%2A&gt; set to 20, and &lt;xref:System.Windows.Thickness.Top%2A&gt; and &lt;xref:System.Windows.Thickness.Bottom%2A&gt; set to 50.</source>
          <target state="translated"><ph id="ph1">`Margin="20,50"`</ph>으로 해석 됩니다는 &lt;xref:System.Windows.Thickness&gt;와 &lt;xref:System.Windows.Thickness.Left%2A&gt;및 &lt;xref:System.Windows.Thickness.Right%2A&gt;20으로 설정 하 고 &lt;xref:System.Windows.Thickness.Top%2A&gt;및 &lt;xref:System.Windows.Thickness.Bottom%2A&gt;50으로 설정 합니다.&lt;/xref:System.Windows.Thickness.Bottom%2A&gt; &lt;/xref:System.Windows.Thickness.Top%2A&gt; &lt;/xref:System.Windows.Thickness.Right%2A&gt; &lt;/xref:System.Windows.Thickness.Left%2A&gt; &lt;/xref:System.Windows.Thickness&gt;</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default unit for a &lt;xref:System.Windows.Thickness&gt; measure is <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>.</source>
          <target state="translated">기본 단위는 &lt;xref:System.Windows.Thickness&gt;측정값은 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>.&lt;/xref:System.Windows.Thickness&gt;</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify other units by appending the unit type strings <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`pt`</ph> to any measure.</source>
          <target state="translated">단위 형식 문자열을 추가 하 여 다른 단위를 지정할 수도 <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, 또는 <ph id="ph3">`pt`</ph> 모든 측정값을 합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>Number values provided as <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</source>
          <target state="translated">숫자 값으로 제공 된 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 특성 소수점이 하를 지정 하지 않아도 (0이 허용 되는, 0.0으로 제공 될 필요는 없습니다.).</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated">대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 사용량, &lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt; 를 참조 하세요.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept>    An object reference to an existing &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated"><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept> 기존 &lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt; 에 대 한 개체 참조</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be a <ph id="ph1">`}`</ph>, a , or <ph id="ph2">`}`</ph> reference.</source>
          <target state="translated">이렇게 할 수는 <ph id="ph1">`}`</ph>a, 또는 <ph id="ph2">`}`</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated">대 한 자세한 내용은 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 사용량, &lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt; 를 참조 하세요.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MarginProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.MarginProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MarginProperty&gt;</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Provides margin values for the element.</source>
          <target state="translated">요소에 대 한 여백 값을 제공합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The default value is a <bpt id="p1">&lt;xref href="System.Windows.Thickness"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with all properties equal to 0 (zero).</source>
          <target state="translated">기본값은 한 <bpt id="p1">&lt;xref href="System.Windows.Thickness"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성은 모두 0 (영)입니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Margin*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Margin*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Margin*&gt;</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum height constraint of the element.</source>
          <target state="translated">요소의 최대 높이 제약 조건을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 &lt;xref:System.Windows.FrameworkElement&gt;높이 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual height determination is first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then MaxHeight, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 높이 결정 하기 위한 응용 프로그램의 순서는 첫 번째 &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;, 다음 최대 높이 마지막으로 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; 범위 내에 있는 이러한 각 경우&lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">에 대 한 값 제한은 &lt;xref:System.Double&gt;값에 의해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;메커니즘.&lt;/xref:System.Windows.ValidateValueCallback&gt; &lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set an invalid value a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MaxHeight="double"/&gt;   - or –   &lt;object MaxHeight ="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MaxHeight"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object MaxHeight="double"/&gt;   - or –   &lt;object MaxHeight ="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MaxHeight"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> if you need to explicitly set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.</source>
          <target state="translated">동일한 &lt;xref:System.Double&gt;속성 값 섹션에 설명 된 대로 제한 된 범위 적용 <bpt id="p1">[</bpt>X:static 태그 확장<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> &lt;xref:System.Double.PositiveInfinity&gt;.&lt;/xref:System.Double.PositiveInfinity&gt; 되도록 값을 명시적으로 설정 해야 하는 경우&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxHeight"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> # # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;|   | 메타 데이터 속성이 <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;       </target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The maximum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 최대 높이 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Double&gt;.</source>
          <target state="translated">기본값은 &lt;xref:System.Double&gt;.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값에는 0.0 보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double&gt; is also valid.</source>
          <target state="translated">&lt;xref:System.Double&gt;도 유효합니다.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MaxHeight*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.MaxHeight*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.MaxHeight*&gt;</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum width constraint of the element.</source>
          <target state="translated">요소의 최대 너비 제약 조건을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 &lt;xref:System.Windows.FrameworkElement&gt;너비 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then MaxWidth, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 너비 결정 하기 위한 응용 프로그램의 순서는 첫 번째 &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;, 다음 최대 너비를 마지막으로 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; 범위 내에 있는 이러한 각 경우&lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">에 대 한 값 제한은 &lt;xref:System.Double&gt;값에 의해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;메커니즘.&lt;/xref:System.Windows.ValidateValueCallback&gt; &lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MaxWidth="double"/&gt;   - or -   &lt;object MaxWidth="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MaxWidth"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object MaxWidth="double"/&gt;   - or -   &lt;object MaxWidth="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MaxWidth"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> to set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.</source>
          <target state="translated">동일한 &lt;xref:System.Double&gt;속성 값 섹션에 설명 된 대로 제한 된 범위 적용 <bpt id="p1">[</bpt>X:static 태그 확장<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> &lt;xref:System.Double.PositiveInfinity&gt;.&lt;/xref:System.Double.PositiveInfinity&gt; 되도록 값을 설정 하려면&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxWidth"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> # # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;|   | 메타 데이터 속성이 <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;       </target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The maximum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 최대 너비의 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Double&gt;.</source>
          <target state="translated">기본값은 &lt;xref:System.Double&gt;.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값에는 0.0 보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double&gt; is also valid.</source>
          <target state="translated">&lt;xref:System.Double&gt;도 유효합니다.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MaxWidth*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.MaxWidth*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.MaxWidth*&gt;</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Implements basic measure-pass layout system behavior for <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">구현 기본 측정 단계 레이아웃 시스템 동작에 대 한 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt; to connect the  WPF core-level and WPF framework-level layout measure implementations.</source>
          <target state="translated">이 메서드를 재정의 &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;WPF 핵심 수준 및 WPF 프레임 워크 수준 레이아웃 측정 구현을 연결할.&lt;/xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation seals the method.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;구현에서는 메서드가 봉인.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt; instead.</source>
          <target state="translated">WPF 프레임 워크 수준에 작성 되는 요소의 측정 단계 레이아웃 동작을 조정 하려면 재정의 &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;대신.&lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use &lt;xref:System.Windows.FrameworkElement&gt;, override &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">의도적으로 또는 하지 않는 WPF 프레임 워크 수준에서 빌드 &lt;xref:System.Windows.FrameworkElement&gt;, &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt; 재정의&lt;/xref:System.Windows.FrameworkElement&gt; 사용 하 여 요소의 측정 단계 레이아웃 동작을 조정 하려면</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The available size that the parent element can give to the child elements.</source>
          <target state="translated">부모 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The desired size of this element in layout.</source>
          <target state="translated">원하는 크기 레이아웃에서이 요소입니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>-derived class.</source>
          <target state="translated">파생된 클래스에서 재정의할 경우, 자식 요소에 필요한 레이아웃의 크기를 측정 하 여 크기를 결정은 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>-클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> layout system.</source>
          <target state="translated">재정의에 참여 하는 대로 프로그램 요소에 대 한 사용자 지정 레이아웃 크기 조정 동작을 구현 하는 일반적은 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 레이아웃 시스템입니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation should do the following:      1.</source>
          <target state="translated">구현에서 다음을 수행 해야 합니다. 1.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterate your element's particular collection of children that are part of layout, call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child element.</source>
          <target state="translated">요소의 특정 레이아웃, 호출의 일부인 자식 컬렉션을 반복 &lt;xref:System.Windows.UIElement.Measure%2A&gt;각 자식 요소에 대해.&lt;/xref:System.Windows.UIElement.Measure%2A&gt;</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Immediately get &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; on the child (this is set as a property after &lt;xref:System.Windows.UIElement.Measure%2A&gt; is called).</source>
          <target state="translated">즉시 &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;자식 (후 속성으로 설정 되어이 &lt;xref:System.Windows.UIElement.Measure%2A&gt;라고).&lt;/xref:System.Windows.UIElement.Measure%2A&gt; &lt;/xref:System.Windows.UIElement.DesiredSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compute the net desired size of the parent based upon the measurement of the child elements.</source>
          <target state="translated">자식 요소의 측정에 따라 부모 net 원하는 크기를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of MeasureOverride should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</source>
          <target state="translated">일반적 반환 값에는 현재 요소의 부모 요소에 대 한 측정값 입력 되는 요소 자체의 필요한 크기 여야 합니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>This same process continues through the layout system until the root element of the page is reached.</source>
          <target state="translated">페이지의 루트 요소에 도달할 때까지 동일한 프로세스에이 레이아웃 시스템을 통해 계속 합니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>During this process, child elements might return a larger &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; size than the initial <ph id="ph1">`availableSize`</ph> to indicate that the child element wants more space.</source>
          <target state="translated">이 과정에서 자식 요소를 반환할 수 있습니다 더 큰 &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;초기 보다 크기가 <ph id="ph1">`availableSize`</ph> 를 나타내는 자식 요소에 공간이 더 필요 합니다.&lt;/xref:System.Windows.UIElement.DesiredSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</source>
          <target state="translated">이 측정 또는 콘텐츠를 정렬에 대 한 솔루션을 개수에 관계 없이 또는 누적 주문의 특정 방식으로 설정 하 여 부모 컨트롤 크기 조정 하 여 스크롤 가능한 영역을 도입 하 여 사용자 고유의 구현에서 처리 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Elements should call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child during this process, otherwise the child elements will not be correctly sized or arranged.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 요소를 호출 해야 &lt;xref:System.Windows.UIElement.Measure%2A&gt;이 프로세스 동안 각 자식에 그렇지 않은 경우 자식 요소 되거나 되지 것입니다 수 올바르게 크기의 배열입니다.&lt;/xref:System.Windows.UIElement.Measure%2A&gt;</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The available size that this element can give to child elements.</source>
          <target state="translated">이 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Infinity can be specified as a value to indicate that the element will size to whatever content is available.</source>
          <target state="translated">요소가 크기는 모든 콘텐츠를 사용할 수 있는지를 나타내는 값으로 무한대를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The size that this element determines it needs during layout, based on its calculations of child element sizes.</source>
          <target state="translated">이 요소 것을 결정 하는 크기 자식 요소 크기 계산에 따라 레이아웃 중에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum height constraint of the element.</source>
          <target state="translated">요소의 최소 높이 제약 조건을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 &lt;xref:System.Windows.FrameworkElement&gt;높이 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">실제 높이 결정은 응용 프로그램의 순서에서는 이러한 값 간에 충돌이 발생 하는 경우 첫 번째 MinHeight 해야이 적용 될 다음 &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, 마지막으로 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; 범위 내에 있는 이러한 각 경우&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">에 대 한 값 제한은 &lt;xref:System.Double&gt;값에 의해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;메커니즘.&lt;/xref:System.Windows.ValidateValueCallback&gt; &lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MinHeight="double"/&gt;   - or -   &lt;object MinHeight="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MinHeight"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object MinHeight="double"/&gt;   - or -   &lt;object MinHeight="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MinHeight"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">동일한 &lt;xref:System.Double&gt;속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinHeightProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinHeight"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> # # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.MinHeightProperty&gt;|   | 메타 데이터 속성이 <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeightProperty&gt;       </target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The minimum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 최소 높이 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The default value is 0.0.</source>
          <target state="translated">기본값은 0.0입니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값에는 0.0 보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Double&gt; is NOT valid, nor is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">그러나 &lt;xref:System.Double&gt;않습니다 유효 없거나 이러한 속성이 <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MinHeight*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.MinHeight*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.MinHeight*&gt;</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum width constraint of the element.</source>
          <target state="translated">요소의 최소 너비 제약 조건을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 &lt;xref:System.Windows.FrameworkElement&gt;너비 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">실제 너비 결정은 응용 프로그램의 순서에서는 이러한 값 간에 충돌이 발생 하는 경우 첫 번째 MinWidth 해야이 적용 될 다음 &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, 마지막으로 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; 범위 내에 있는 이러한 각 경우&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">에 대 한 값 제한은 &lt;xref:System.Double&gt;값에 의해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;메커니즘.&lt;/xref:System.Windows.ValidateValueCallback&gt; &lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MinWidth="double"/&gt;   - or -   &lt;object MinWidth="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MinWidth"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object MinWidth="double"/&gt;   - or -   &lt;object MinWidth="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MinWidth"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">동일한 &lt;xref:System.Double&gt;속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinWidthProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinWidth"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> # # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.MinWidthProperty&gt;|   | 메타 데이터 속성이 <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidthProperty&gt;       </target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The minimum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 최소 너비에 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The default value is 0.0.</source>
          <target state="translated">기본값은 0.0입니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">이 값에는 0.0 보다 크거나 같은 임의의 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Double&gt; is not valid, nor is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">그러나 &lt;xref:System.Double&gt;없거나 유효 하지 않을 경우 <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MinWidth*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.MinWidth*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.MinWidth*&gt;</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</source>
          <target state="translated">제공 된 이동 방향을에서이 요소에서와 다른 요소에 키보드 포커스를 이동합니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation overrides &lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt; and seals the method.</source>
          <target state="translated">이 구현을 재정의 &lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt;메서드를 봉인.&lt;/xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>The direction that focus is to be moved, as a value of the enumeration.</source>
          <target state="translated">방향 포커스 열거형의 값으로 이동 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if focus is moved successfully; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the target element in direction as specified does not exist or could not be keyboard focused.</source>
          <target state="translated">반환 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 포커스가 성공적으로 이동 하는 경우 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 대상 요소 방향으로 지정 하는 존재 하지 않는 경우 또는 키보드 포커스가 수 하지 못했습니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Gets or sets the identifying name of the element.</source>
          <target state="translated">식별 하는 요소 이름을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor.</source>
          <target state="translated">이름으로 처리 하는 동안 생성 된 후 이벤트 처리기 코드 등의 코드 숨김에서 태그 요소를 참조할 수 있도록 참조를 제공는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 프로세서.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common usage of this property is to specify a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element name as an attribute in markup.</source>
          <target state="translated">지정 하는 것이 속성의 가장 일반적인 용도 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 태그에서 특성으로 요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property essentially provides a WPF framework-level convenience property to set the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이 속성에는 기본적으로 설정 하는 WPF 프레임 워크 수준 편의 속성은 제공 된 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>Names must be unique within a namescope.</source>
          <target state="translated">이름은 이름 범위 내에서 고유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>Getting a Name if you are creating elements in code is not common.</source>
          <target state="translated">코드에서 요소를 만드는 경우 이름을 받은 흔하지 않습니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the Name.</source>
          <target state="translated">코드에 적절 한 참조가 이미 있는 경우 방금 메서드를 호출할 수 있습니다 및 요소에서 속성 참조 하 고 일반적으로 이름을 하지 않아도 됩니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 예외는 이름 문자열에 오버 로드 된 의미가 경우, 예를 들어이에 해당 이름을 표시 하는 유용한 경우 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will not change the original object reference.</source>
          <target state="translated">코드 숨김 원래 이름 태그에서 설정 된 경우에서 이름을 권장 되지 설정 및 속성을 로드 한 후 변경의 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 원래 개체 참조를 변경 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object references are created only when the underlying namescopes are explicitly created during parsing.</source>
          <target state="translated">개체 참조는 구문 분석 중에 기본 이름 범위를 명시적으로 만든 경우에 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must specifically call &lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt; to make an effective change to the Name property of an already loaded element.</source>
          <target state="translated">명시적으로 호출 해야 &lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;이미 로드 된 요소의 Name 속성에 대 한 효과적인 변경 되도록 합니다.&lt;/xref:System.Windows.FrameworkElement.RegisterName%2A&gt;</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>One notable case where setting Name from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</source>
          <target state="translated">코드에서 이름을 설정 하는 것이 중요 한 경우에는 런타임 시 참조할 수 있도록 스토리 보드에 대해를 실행 하는 요소에 대 한 이름을 등록 하는 경우는 합니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before you can register a name, might also need to instantiate and assign a &lt;xref:System.Windows.NameScope&gt; instance.</source>
          <target state="translated">이름을 등록할 수 있습니다, 전에 인스턴스화하고 할당 해야 할 수도 &lt;xref:System.Windows.NameScope&gt;인스턴스.&lt;/xref:System.Windows.NameScope&gt;</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Example section, or <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">예 섹션을 참조 하거나 <bpt id="p1">[</bpt>적기<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting Name from code has limited applications, but getting an element by Name is more common.</source>
          <target state="translated">설정 이름 코드에서 응용 프로그램을 제한적으로 하지만 요소 이름으로 시작 하는 것이 더 일반적입니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT">
          <source>One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</source>
          <target state="translated">하나의 특정 한 시나리오는 응용 프로그램은 여기서에 응용 프로그램 페이지가 다시 로드 하 고 런타임 코드는 반드시 해당 페이지에 대해 정의 된 코드 숨김 하지 탐색 모델을 지원 하는 경우입니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility method &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;, which is available from any &lt;xref:System.Windows.FrameworkElement&gt;, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary.</source>
          <target state="translated">유틸리티 메서드 &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;에서 사용 하지 않는 &lt;xref:System.Windows.FrameworkElement&gt;, 필요에 따라 재귀적으로 트리를 검색 하는 해당 요소에 대 한 논리적 트리에서 이름으로 모든 요소를 찾을 수 있습니다.&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement.FindName%2A&gt;</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or you can use the &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt; static method of &lt;xref:System.Windows.LogicalTreeHelper&gt;, which also takes a Name string as an argument.</source>
          <target state="translated">또는 사용할 수 있습니다는 &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;의 정적 메서드 &lt;xref:System.Windows.LogicalTreeHelper&gt;, 이름 문자열을 인수로 걸립니다.&lt;/xref:System.Windows.LogicalTreeHelper&gt; &lt;/xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically used root elements (&lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Controls.Page&gt; for example) implement the interface &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">일반적으로 사용 되는 루트 요소 (&lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Controls.Page&gt;예를 들어) &lt;xref:System.Windows.Markup.INameScope&gt;.&lt;/xref:System.Windows.Markup.INameScope&gt; 인터페이스를 구현&lt;/xref:System.Windows.Controls.Page&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of this interface are expected to enforce that names be unambiguous within their scope.</source>
          <target state="translated">이 인터페이스의 구현 적용 이름이 해당 범위 내에서 모호한 것으로 예상 됩니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>The root elements that define this interface also define the namescope behavior boundaries for all the related <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">또한이 인터페이스를 정의 하는 루트 요소에는 모든의 이름 범위 동작 경계를 정의 하면 관련 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Name property also serves as an identifier for other processes.</source>
          <target state="translated">Name 속성은 다른 프로세스에 대 한 식별자로도 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> automation model will use Name as the AutomationId for clients and providers.</source>
          <target state="translated">예를 들어,는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 자동화 모델 클라이언트 및 공급자에 AutomationId로 이름이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string values used for Name have some restrictions, as imposed by the underlying <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../Topic/x:Name%20Directive.md)</ept> defined by the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> specification.</source>
          <target state="translated">내부에서 부여 된 이름에 사용 되는 문자열 값에 몇 가지 제한 사항이 있는 <bpt id="p1">[</bpt>X:name 지시문<ept id="p1">](../Topic/x:Name%20Directive.md)</ept> 정의한는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 사양입니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most notably, a Name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</source>
          <target state="translated">가장 주목할 만한 이름을 문자 또는 밑줄 문자 (_)을 시작 해야 하며 문자, 숫자 또는 밑줄만 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](../Topic/WPF%20XAML%20Namescopes.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](../Topic/WPF%20XAML%20Namescopes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name is one of the very few dependency properties that cannot be animated (&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; is <ph id="ph1">`true`</ph> in metadata), because the name itself is vital for targeting an animation.</source>
          <target state="translated">이름은 애니메이션을 적용할 수 있는 종속성 속성이 거의 중 하나입니다 (&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; 은 <ph id="ph1">`true`</ph> 메타 데이터에) 이름 자체는 애니메이션을 대상으로 하는 것에 대 한 중요 한 이기 때문에.&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data binding a Name is technically possible, but is an extremely uncommon scenario because a data-bound Name cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</source>
          <target state="translated">데이터 바인딩 이름을 기술적으로 가능 하지만 데이터 바인딩 이름 수 없는 속성의 주 용도 대로 사용 하기 때문에 매우 드문 경우: 코드 숨김에 대 한 식별자 연결 지점을 제공 하기.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Name"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.NameProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Name"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.NameProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;|&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; &lt;/xref:System.Windows.FrameworkElement.NameProperty&gt;</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The name of the element.</source>
          <target state="translated">요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The default is an empty string.</source>
          <target state="translated">기본값은 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Name*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Name*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Name*&gt;</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is invoked whenever application code or internal processes call &lt;xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;.</source>
          <target state="translated">파생된 클래스에서 재정의 하는 경우 응용 프로그램 코드 또는 내부 프로세스 &lt;xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;.&lt;/xref:System.Windows.FrameworkElement.ApplyTemplate*&gt; 호출할 때마다 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
          <target state="translated">이 메서드는 기본 구현이 없습니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>Templates are the section of an element's completed visual tree that comes from the Template property of a &lt;xref:System.Windows.Style&gt; that is applied for the element.</source>
          <target state="translated">서식 파일은 섹션 요소 완료 된 시각적 트리의 템플릿 속성에서 제공 되는 &lt;xref:System.Windows.Style&gt;요소에 대해 적용 되는.&lt;/xref:System.Windows.Style&gt;</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스타일 및 템플릿<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">처리 되지 않은 때마다 호출 됩니다. <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트가 해당 경로에서이 클래스에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스를 추가 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대 한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">처리 되지 않은 때마다 호출 됩니다. <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트가 해당 경로에서이 클래스에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스를 추가 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 이벤트 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event reaches this element in its route.</source>
          <target state="translated">처리 되지 않은 때마다 호출 됩니다. <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트가 해당 경로에서이 요소에 도달할 합니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation.</source>
          <target state="translated">에 다른 달리 * OnGotFocus 기본 요소에서 노출 하는 방법에는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it has an implementation that overrides the null implementation in the next level of base element down, &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;.</source>
          <target state="translated">특히,이 &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;.&lt;/xref:System.Windows.UIElement.OnGotFocus%2A&gt; 다운 기본 요소의 다음 수준에서 null 구현을 재정의 하는 구현이</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</source>
          <target state="translated">호출 되 면 OnGotFocus 이벤트가 키보드 포커스로 인해 현재 요소에서 시작 하는 경우에이 요소에 적절 한 포커스 동작을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element.</source>
          <target state="translated">현재 요소에 포커스가 설정 되어 있더라도 처리 된 것으로 OnGotFocus 처리기 이벤트 인수를 표시 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event's source was another element in the tree (not the current element), the handler does nothing.</source>
          <target state="translated">이벤트의 소스는 현재 요소가 아닌 트리의 다른 요소를 한 경우 처리기는 아무 작업도 수행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see &lt;xref:System.Windows.UIElement.Focusable%2A&gt;).</source>
          <target state="translated">이러한 방식으로 포커스 동작을 변경 수 쉽게 수행할 수는 요소 전혀 허용 하지 않도록 수 있지만 요소에 대 한 기본 포커스 동작을 변경 하기 위해이 메서드를 재정의할 수 있습니다 (참조 &lt;xref:System.Windows.UIElement.Focusable%2A&gt;).&lt;/xref:System.Windows.UIElement.Focusable%2A&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 이벤트 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Initialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">발생 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Initialized"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>This method is invoked whenever &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; is set to <bpt id="p1">&lt;xref uid="langword_csharp_true " name="true " href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>internally.</source>
          <target state="translated">이 메서드가 호출 될 때마다 &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt;로 설정 된 <bpt id="p1">&lt;xref uid="langword_csharp_true " name="true " href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>내부적으로.&lt;/xref:System.Windows.FrameworkElement.IsInitialized*&gt;</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 이벤트 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Invoked whenever the effective value of any dependency property on this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been updated.</source>
          <target state="translated">때마다 호출에서이 종속성 속성의 유효 값 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 업데이트 되었습니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The specific dependency property that changed is reported in the arguments parameter.</source>
          <target state="translated">변경 된 특정 종속성 속성이 인수 매개 변수에서 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Overrides &lt;xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged*&gt; 재정의</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to generally detect property changes or invalidations.</source>
          <target state="translated">일반적으로 속성 변경 내용 또는 무효화를 검색 하려면이 메서드를 사용 하는 것이 없습니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</source>
          <target state="translated">대신 것은 일반적인 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is potentially invoked many times during the life of an object.</source>
          <target state="translated">이 메서드는 개체의 수명 동안 여러 번 호출 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you can achieve better performance if you override the metadata of specific properties and then attach &lt;xref:System.Windows.CoerceValueCallback&gt; or &lt;xref:System.Windows.PropertyChangedCallback&gt; functions for individual properties.</source>
          <target state="translated">따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 성능을 향상 시킬 수 있습니다 &lt;xref:System.Windows.CoerceValueCallback&gt;또는 &lt;xref:System.Windows.PropertyChangedCallback&gt;개별 속성에 대 한 함수.&lt;/xref:System.Windows.PropertyChangedCallback&gt; &lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you would use this method if a &lt;xref:System.Windows.FrameworkElement&gt; includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">그러나, 사용이 메서드는 경우는 &lt;xref:System.Windows.FrameworkElement&gt;많은 수의 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that there is an identically named <ph id="ph1">`OnPropertyChanged`</ph> method with a different signature (the parameter type is &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;) that can appear on a number of classes.</source>
          <target state="translated">같은 이름의 <ph id="ph1">`OnPropertyChanged`</ph> 를 다른 서명으로 메서드 (매개 변수 형식이 &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;)는 다양 한 클래스에 나타날 수 있는.&lt;/xref:System.ComponentModel.PropertyChangedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>That <ph id="ph1">`OnPropertyChanged`</ph> is used for data object notifications, and is part of the contract for &lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;.</source>
          <target state="translated"><ph id="ph1">`OnPropertyChanged`</ph> 데이터 개체 알림에 사용 되 고 &lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;.&lt;/xref:System.ComponentModel.INotifyPropertyChanged&gt; 에 대 한 계약의 일부인</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The event data that describes the property that changed, as well as old and new values.</source>
          <target state="translated">변경 된 속성을 설명 하는 이벤트 데이터 뿐만 아니라 이전 및 새 값입니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event, using the specified information as part of the eventual event data.</source>
          <target state="translated">발생는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트 형식, 최종적인 이벤트 데이터의 일부로 지정 된 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;.</source>
          <target state="translated">이 메서드를 재정의 &lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;.&lt;/xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method you will reset the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; property, the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</source>
          <target state="translated">다시 설정 되며이 메서드를 호출 하는 경우는 &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;속성은 &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;제공된 된 인수에서 속성 또는 두로 지정 된 내용에 따라 변경 되 고 됩니다 하면 항상 이벤트를 발생 시킵니다.&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Details of the old and new size involved in the change.</source>
          <target state="translated">변경과 관련 된 이전 및 새 크기의 세부 정보입니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Invoked when the style in use on this element changes, which will invalidate the layout.</source>
          <target state="translated">이 요소에서 사용 중인 스타일이 변경 될 때 호출 되는 레이아웃을 무효화 됩니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has a default implementation that sets an internal flag that notes the style changed condition.</source>
          <target state="translated">이 메서드는 스타일 변경 상태를 기록 하는 내부 플래그를 설정 하는 기본 구현입니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The old style.</source>
          <target state="translated">이전 스타일입니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>The new style.</source>
          <target state="translated">새 스타일입니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">처리 되지 않은 때마다 호출 됩니다. <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트가 해당 경로에서이 클래스에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스를 추가 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대 한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Invoked whenever the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">때마다 호출 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트가 해당 경로에서이 클래스에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">이 이벤트를 처리 하는 클래스를 추가 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">이벤트에 대 한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Invoked when the parent of this element in the visual tree is changed.</source>
          <target state="translated">시각적 트리에서이 요소의 부모가 변경 될 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Overrides &lt;xref:System.Windows.UIElement.OnVisualParentChanged*&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.OnVisualParentChanged*&gt;.&lt;/xref:System.Windows.UIElement.OnVisualParentChanged*&gt; 재정의</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</source>
          <target state="translated">시각적 트리 컬렉션 같은 시각적으로 렌더링 되지 않는 요소를 생략 하기 때문에 잠재적으로 다른 논리적 트리에서 고 해당 테마 및 스타일 합치기를 기반으로 일부 요소를 확장 합니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>The old parent element.</source>
          <target state="translated">이전 부모 요소입니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the element did not have a visual parent previously.</source>
          <target state="translated">수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 요소는 시각적 부모가 없는 이전에 나타냅니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</source>
          <target state="translated">이 요소가 테마 스타일의 스타일 속성을 통합 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</source>
          <target state="translated">이 속성의 가장 일반적인 사용법은 테마 스타일을 제공 하는 스타일의 setter 내에서 간접적으로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you set OverridesDefaultStyle to <ph id="ph2">`true`</ph> on a control, you will be suppressing the default control template supplied by the theme styles.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; OverridesDefaultStyle을 설정 하면 <ph id="ph2">`true`</ph> 컨트롤에 표시 되지 것입니다 테마 스타일에서 제공 하는 기본 컨트롤 템플릿을 합니다.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>That control template typically includes the content presenter and other composited elements that provide basic <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> functionality and visualization for the control.</source>
          <target state="translated">컨트롤 템플릿에 일반적으로 콘텐츠 발표자 및 기본 제공 하는 다른 복합 요소 포함 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> 기능 및 컨트롤에 대 한 시각화입니다.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</source>
          <target state="translated">계속 기본 테마 스타일과 같은 기능을 지원 하려면 제어 하려는 경우 동일한 구조를 복제 하는 컨트롤 템플릿 사용 하 여 대체 스타일을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>컨트롤 제작 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_OverridesDefaultStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_OverridesDefaultStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 요소가 테마 스타일 속성을 사용 하지 않는 경우 스타일에서 생성 하는 모든 속성의 로컬 응용 프로그램 스타일 및 테마 스타일 속성이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>응용 프로그램 스타일이 먼저 적용 하 고 테마 스타일 응용 프로그램 스타일에 구체적으로 설정 되지 않은 속성에 대 한 다음 적용 합니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt;</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Gets the logical parent  element of this element.</source>
          <target state="translated">이 요소의 논리적 부모 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parent may be <ph id="ph1">`null`</ph> in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</source>
          <target state="translated">부모 <ph id="ph1">`null`</ph> 요소 인스턴스화 하지만 결국 페이지 수준 루트 요소 또는 응용 프로그램 개체에 연결 하는 모든 논리적 트리에 연결 되지 않은 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</source>
          <target state="translated">Note 요소의 논리적 부모 응용 프로그램의 기능에 따라 변경 될 수 있습니다 및이 속성의 값을 유지 해도 해당 변경 내용을 반영 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically should get the value immediately before you need it.</source>
          <target state="translated">일반적으로 필요한 직전 값을 가져올 해야 합니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>In WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 논리적 트리 이동 및 부모 요소 검색 기법으로 부모를 사용 하는 적절 한 시나리오에 대 한 자세한 내용은 합니다.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</source>
          <target state="translated">속성 엔진에서는 다시 계산할 수 요소의 모든 속성 값, 부모가 때 일부 속성 논리 트리를 통해 값을 상속 하기 때문에 합니다.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; that applies for bindings can also change when elements are reparented.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;적용 되는 요소는 부모가 바인딩 크기도 변경 수에 대 한.&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</source>
          <target state="translated">요소의 부모는 일반적으로을 통해 변경할 컬렉션 조작, 전용을 사용 하 여 추가 또는 제거 메서드, 또는 요소의 콘텐츠 속성을 설정 하는 과정입니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most typical scenario for using the Parent property is to obtain a reference and then get various &lt;xref:System.Windows.FrameworkElement&gt; property values from the parent.</source>
          <target state="translated">부모 속성을 사용 하는 가장 일반적인 시나리오는 다양 한를 가져온 후 한 참조를 가져올를 &lt;xref:System.Windows.FrameworkElement&gt;부모 개체에서 속성 값.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>For templates, the Parent of the template eventually will be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">템플릿, 결국 서식 파일의 부모 됩니다 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get past this point and extend into the logical tree where the template is actually applied, use &lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;.</source>
          <target state="translated">이 지점을 벗어나 하는 템플릿이 실제로 적용 되는 논리 트리로 확장를 &lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt; 사용</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</source>
          <target state="translated">이 속성은 논리적 트리 부모에서 다른 경우에는 시각적 트리 부모 항목을 보고 하지 note 합니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</source>
          <target state="translated">시각적 트리 부모 일반 응용 프로그램의 경우에 일반적으로 중요 하지 않지만 특정 시각적 수준의 경우에 대 한 원하는 상위 요소가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Windows.Media.VisualTreeHelper&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;.&lt;/xref:System.Windows.Media.VisualTreeHelper&gt; 를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>This element's logical parent.</source>
          <target state="translated">이 요소의 논리적 부모입니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Supports incremental layout implementations in specialized subclasses of <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">특수화 된 서브 클래스에서 증분 레이아웃 구현을 지원 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>ParentLayoutInvalidated is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</source>
          <target state="translated">ParentLayoutInvalidated에서 부모의 측정에 영향을 주도록 메타 데이터에 표시 된 속성을 자식 요소가 무효화 될 때 호출 되 또는 레이아웃 하는 동안 정렬 전달 합니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element has a child element on which some property was invalidated and the property was marked as &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt; or &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt; in property metadata during registration, this method is invoked.</source>
          <target state="translated">이 요소에는 자식 요소에 무효화 된 일부 속성 및 속성으로 표시 된 &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;또는 &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;등록 하는 동안 속성 메타 데이터에이 메서드가 호출 됩니다.&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</source>
          <target state="translated">메서드 호출에이 요소 레이아웃의 부분 (증분) 업데이트를 지 원하는 경우 특정 자식 요소에 다시 측정 해야 하는 부모 요소를 알립니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, &lt;xref:System.Windows.FrameworkElement&gt; does not support incremental layout, and in the &lt;xref:System.Windows.FrameworkElement&gt; class this method has no default implementation.</source>
          <target state="translated">기본적으로 &lt;xref:System.Windows.FrameworkElement&gt;증분 레이아웃을 지원 하지 않습니다 및는 &lt;xref:System.Windows.FrameworkElement&gt;클래스이 메서드에 기본 구현이 없습니다.&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</source>
          <target state="translated">기본 레이아웃 시스템 동작을 수정 해야 하기 때문에이 메서드를 재정의할 수 없는 필요한 시나리오 일반적이 지 않습니다.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</source>
          <target state="translated">WPF 프레임 워크 수준 레이아웃 시스템 보다 더 제한적인 가능한 자식 요소에 대 한 형식 제한을 클래스의 경우에 이러한 구현 방식을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</source>
          <target state="translated">이러한 사용자 지정 요소 이기 때문에 속성 변경 내용은 연기 될 수 의도적으로 일부 사용자 지정 레이아웃 동작을 구현 하는 경우.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</source>
          <target state="translated">예를 들어, 특정 유형의 다른 레이아웃 과정에서 일반적으로 발생 하는 변경 내용에 대 한 자식 요소를 최적화 하려고 하는 렌더링 패스, 측정값/정렬 메서드 재정의 지연 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>The child element reporting the change.</source>
          <target state="translated">변경을 보고 하는 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</source>
          <target state="translated">제공 된 포커스 이동 방향에 대 한이 요소를 기준으로 포커스를 받을 하지만 실제로 포커스를 이동 하지 않는 다음 요소를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt; is the related method that actually does move focus.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;실제로 포커스를 이동 하는 관련된 방법.&lt;/xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The direction for which a prospective focus change should be determined.</source>
          <target state="translated">예상 포커스 변경을 결정 해야 하는 방향입니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The next element that focus would move to if focus were actually traversed.</source>
          <target state="translated">포커스를 실제로 이동 하는 경우에 집중 하는 다음 요소로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>May return <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if focus cannot be moved relative to this element for the provided direction.</source>
          <target state="translated">반환할 수 있습니다 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공된 방향에 대해이 요소를 기준으로 포커스를 이동할 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Specified one of the following directions in the <bpt id="p1">&lt;xref href="System.Windows.Input.TraversalRequest"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>: <bpt id="p2">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Specified one of the following directions in the <bpt id="p1">&lt;xref href="System.Windows.Input.TraversalRequest"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>: <bpt id="p2">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>These directions are not legal for PredictFocus (but they are legal for &lt;xref:System.Windows.FrameworkElement.MoveFocus*&gt;).</source>
          <target state="translated">이 지침 PredictFocus에 적합 하지 않습니다 (에 사용할 하지만 &lt;xref:System.Windows.FrameworkElement.MoveFocus*&gt;).&lt;/xref:System.Windows.FrameworkElement.MoveFocus*&gt;</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Provides an accessor that simplifies access to the &lt;xref:System.Windows.NameScope&gt; registration method.</source>
          <target state="translated">에 대 한 액세스를 간소화 하는 접근자를 제공는 &lt;xref:System.Windows.NameScope&gt;등록 방법을.&lt;/xref:System.Windows.NameScope&gt;</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.NameScope.RegisterName%2A&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Windows.NameScope.RegisterName%2A&gt;.&lt;/xref:System.Windows.NameScope.RegisterName%2A&gt; 호출에 대 한 편의 메서드</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation will check successive parent elements until it finds the applicable &lt;xref:System.Windows.NameScope&gt; implementation, which is found by finding an element that implements &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">적용 가능한 &lt;xref:System.Windows.NameScope&gt; &lt;xref:System.Windows.Markup.INameScope&gt;.&lt;/xref:System.Windows.Markup.INameScope&gt; 를 구현 하는 요소를 검색 하 여 위에 표시 되는 구현&lt;/xref:System.Windows.NameScope&gt; 을 찾을 때까지 구현 연속 된 부모 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">네임 스페이스에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling RegisterName is necessary in order to correctly hook up animation storyboards for applications when created in code.</source>
          <target state="translated">레지스터 이름 호출 하는 것은 올바르게 코드에서 만들어진 경우 응용 프로그램에 대 한 애니메이션 스토리 보드를 연결 하는 데 필요 합니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because one of the key storyboard properties, &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;, uses a run-time name lookup instead of being able to take a reference to a target element.</source>
          <target state="translated">속성을 스토리 보드 키 중 하나 때문에 이것이 &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;, 대상 요소에 대 한 참조 하는 대신 런타임 이름 조회를 사용 합니다.&lt;/xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true even if that element is accessible by reference from the code.</source>
          <target state="translated">해당 요소는 코드에서 참조 하 여 액세스할 수 있는 경우에 마찬가지입니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on why you need to register names for storyboard targets, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">스토리 보드 대상에 대 한 이름을 등록 해야 이유에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>적기<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Name to use for the specified name-object mapping.</source>
          <target state="translated">지정 된 이름-개체 매핑을 위해 사용할 이름입니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Object for the mapping.</source>
          <target state="translated">매핑에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Removes the provided object from this element's logical tree.</source>
          <target state="translated">이 요소의 논리적 트리에서 제공된 된 개체를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> updates the affected logical tree parent pointers to keep in sync with this deletion.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 삭제 작업과 동기화 상태로 유지 하려면 영향을 받는 논리적 트리 부모 포인터를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method for the implementation of collections on objects that represent logical children of an element.</source>
          <target state="translated">논리 자식 요소를 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be done in property getters or setters, class handlers of <ph id="ph1">`Changed`</ph> events, constructors, or within the collection types themselves.</source>
          <target state="translated">속성 getter 또는 setter의 클래스 처리기에서 수행할 수 있습니다이 <ph id="ph1">`Changed`</ph> 이벤트, 생성자 또는 형식 자체는 컬렉션 내에서.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</source>
          <target state="translated">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 것이 좋을 제공 된 기본 컨트롤 클래스의 정적 콘텐츠 모델 중 적절 한 합니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.</source>
          <target state="translated">수준에서 서브클래싱 고려 &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, 및 &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.&lt;/xref:System.Windows.Controls.HeaderedItemsControl&gt; &lt;/xref:System.Windows.Controls.ItemsControl&gt; &lt;/xref:System.Windows.Controls.ContentControl&gt;</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>These classes provide a content model with particular enforcement of logical children through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">이러한 클래스는 특정 방식으로 전용 통해 논리 자식 적용을 사용 하 여 콘텐츠 모델 제공 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 및는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 스타일 템플릿을 통해 같은 제어 합니다.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>The element to remove.</source>
          <target state="translated">제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Occurs when &lt;xref:System.Windows.FrameworkElement.BringIntoView*&gt; is called on this element.</source>
          <target state="translated">발생 경우 &lt;xref:System.Windows.FrameworkElement.BringIntoView*&gt;이 요소에 호출 됩니다.&lt;/xref:System.Windows.FrameworkElement.BringIntoView*&gt;</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event indicates to a parent &lt;xref:System.Windows.Controls.ScrollViewer&gt; (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region.</source>
          <target state="translated">이 이벤트는 부모에 알립니다 &lt;xref:System.Windows.Controls.ScrollViewer&gt;(또는 파생 클래스) RequestBringIntoView 이벤트를 발생 하는 요소 수 있도록 표시 되는 스크롤 가능한 영역 내에서.&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Controls.ScrollViewer&gt; will then mark the RequestBringIntoView event as handled, by using class handling of the event.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ScrollViewer&gt;이벤트의 클래스 처리를 사용 하 여 처리 된 것으로 RequestBringIntoView 이벤트 후 표시 됩니다.&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;.</source>
          <target state="translated">일반적 RequestBringIntoView 이벤트 데이터 표시 하지 말아야 처리는 스크롤 영역을 제어 하는 클래스에 의해 모든 인스턴스 처리기를 &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.BringIntoView%2A&gt; 요소의 원하는 목표 방해 하 게 이렇게</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RequestBringIntoViewEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;|   | 라우팅 전략 | 버블링 |   | 대리자 | &lt;xref:System.Windows.RequestBringIntoViewEventHandler&gt;|&lt;/xref:System.Windows.RequestBringIntoViewEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Gets or sets the locally-defined resource dictionary.</source>
          <target state="translated">로컬로 정의 된 리소스 사전을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource dictionaries that can be defined completely or partially in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> are typically created as a property element, and are typically on the root element for any individual page or for the application.</source>
          <target state="translated">완전히 또는 부분적으로 정의할 수 있는 리소스 사전 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 개별 페이지 또는 응용 프로그램에 대 한 루트 요소에는 일반적으로 및 속성 요소로 일반적으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</source>
          <target state="translated">이 수준에서 리소스 사전을 배치 쉽게 페이지의 개별 자식 요소 (또는 응용 프로그램의 경우에는 페이지)를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</source>
          <target state="translated">대부분의 응용 프로그램 시나리오의 리소스 사전에서 개체 요소로 스타일을 정의 하는 것 권장 전체 스타일 리소스 자체 포함 될 수 있도록 외부 리소스로 정의 된 또는 (이 방법은 하 개발자 책임에서 편집 해야 하는 물리적 파일을 구분 하 여).</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this property returns only the resource dictionary declared directly within that element.</source>
          <target state="translated">이 속성에서 반환 하는 리소스 사전에만 해당 요소 내부에서 직접 선언 참고 합니다.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</source>
          <target state="translated">이 자식 요소를 위쪽으로 재귀적으로 검색 되는 각 부모 요소에 정의 된 리소스에 액세스할 수 있는 실제 리소스 조회 프로세스와 다릅니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resources can also be referenced by code from within the collection, but be aware that resources created in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will definitely not be accessible until after &lt;xref:System.Windows.FrameworkElement.Loaded&gt; is raised by the element that declares the dictionary.</source>
          <target state="translated">리소스에서 리소스를 만들 수 있지만 컬렉션 내에서 코드에 의해 참조 될 수도 있습니다 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 를 확실 하 게 액세스할 수 없는까지 후 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;는 사전을 선언 하는 요소에 의해 발생 합니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>In fact, resources are parsed asynchronously and not even the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event is an assurance that you can reference a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resource.</source>
          <target state="translated">비동기적으로 및 not 리소스 구문 분석 하는 사실, 심지어는 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;이벤트는 참조할 수 있는 보증은 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 리소스를 정의 합니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason you should generally only access <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resources as part of run-time code, or through other <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> techniques such as styles or resource extension references for attribute values.</source>
          <target state="translated">따라서 일반적으로 액세스 해야 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 또는 다른를 통해 런타임 코드의 일부로 정의 된 리소스 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 스타일이 나 특성 값에 대 한 리소스 확장 참조 하는 기법입니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you access resources through code, it is essentially equivalent to a  reference made from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">기본적으로 해당에서 만든 참조 하는 코드를 통해 리소스에 액세스할 때 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying &lt;xref:System.Windows.ResourceDictionary&gt; supports the methods required to add, remove or query resources from within the collection by using code.</source>
          <target state="translated">내부 &lt;xref:System.Windows.ResourceDictionary&gt;추가, 제거 또는 코드를 사용 하 여 컬렉션 내에서 리소스를 쿼리 하는 데 필요한 메서드를 지원 합니다.&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">리소스 속성은 완전히 새로운 되도록 요소의 리소스 컬렉션을 교체 하는 시나리오를 지원 하기 위해 설정할 수 나 다른 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax shown does not include an element for the &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 표시 된 구문 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 에 대 한 요소를 포함 하지 않습니다</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</source>
          <target state="translated">이것이; 암시적 컬렉션 구문의 예 컬렉션 요소를 나타내는 태그를 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements that are added as items to the collection are specified instead.</source>
          <target state="translated">컬렉션에 항목으로 추가 하는 요소 대신 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implicit collections and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">암시적 컬렉션에 대 한 자세한 내용은 및 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, 참조 <bpt id="p1">[</bpt>XAML 구문에서 세부<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT">
          <source>One case where a &lt;xref:System.Windows.ResourceDictionary&gt; is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">하나의 &lt;xref:System.Windows.ResourceDictionary&gt;요소가 병합된 된 사전을 도입 하는 경우이 경우 일반적으로 없는 자식 요소가 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 으로 명시적으로 지정 되어&lt;/xref:System.Windows.ResourceDictionary&gt; 있는 경우</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>자세한<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Resources"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.Resources&gt;       oneOrMoreResourceElements     &lt;/object.Resources&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Resources"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreResourceElements<ept id="p3">*</ept>    One or more object elements, each of which defines a resource.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Resources"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 속성 요소 사용 <ph id="ph1">```   &lt;object&gt;     &lt;object.Resources&gt;       oneOrMoreResourceElements     &lt;/object.Resources&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Resources"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>oneOrMoreResourceElements<ept id="p3">*</ept> 리소스 정의 하는 하나 이상의 개체 요소입니다.      </target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each resource property element within each &lt;xref:System.Windows.ResourceDictionary&gt; must have a unique value for the <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, which serves as the unique key when values are retrieved from the &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">각 내에서 각 리소스 속성 요소 &lt;xref:System.Windows.ResourceDictionary&gt;에 대 한 고유 값이 있어야는 <bpt id="p1">[</bpt>X:key 지시문<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 에서 값을 검색할 때 고유 키로 제공 되&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The current locally-defined dictionary of resources, where each resource can be accessed by key.</source>
          <target state="translated">현재 로컬로 정의 된 사전 키로 각 리소스에 액세스할 수 있는 리소스입니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</source>
          <target state="translated">데이터 원본에 대 한 경로 정규화도 제공 된 원본 속성 이름에 따라이 요소에 바인딩을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;, and creates a new &lt;xref:System.Windows.Data.Binding&gt; based on the provided <ph id="ph1">`path`</ph> parameter.</source>
          <target state="translated">이 메서드는 호출에 대 한 편리한 메서드입니다 &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;는 현재 인스턴스를 전달 하는 &lt;xref:System.Windows.DependencyObject&gt;, 새 및 &lt;xref:System.Windows.Data.Binding&gt;제공 된 기준 <ph id="ph1">`path`</ph> 매개 변수.&lt;/xref:System.Windows.Data.Binding&gt; &lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature is more convenient if you are establishing a simple default binding.</source>
          <target state="translated">이 서명은 단순한 기본 바인딩을 설정 하는 경우 더 편리 합니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to specify any binding properties to non-default conditions, or want to use a &lt;xref:System.Windows.Data.MultiBinding&gt; or &lt;xref:System.Windows.Data.PriorityBinding&gt;,you should use the &lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt; signature.</source>
          <target state="translated">기본이 아닌 조건에 대 한 바인딩 속성을 지정 하거나 사용 하려는 해야 할 경우는 &lt;xref:System.Windows.Data.MultiBinding&gt;또는 &lt;xref:System.Windows.Data.PriorityBinding&gt;, 사용할지는 &lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;서명.&lt;/xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt; &lt;/xref:System.Windows.Data.PriorityBinding&gt; &lt;/xref:System.Windows.Data.MultiBinding&gt;</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Identifies the destination property where the binding should be established.</source>
          <target state="translated">바인딩을 해야 설정할 대상 속성을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The source property name or the path to the property used for the binding.</source>
          <target state="translated">원본 속성 이름 또는 경로 바인딩에 사용 되는 속성입니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Records the conditions of the binding.</source>
          <target state="translated">바인딩 상태를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">이 반환 값은 오류 검사에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Attaches a binding to this element, based on the provided binding object.</source>
          <target state="translated">제공된 된 바인딩 개체를 기반으로이 요소에 바인딩을 연결 합니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, &lt;xref:System.Windows.DependencyObject&gt;.&lt;/xref:System.Windows.DependencyObject&gt; 는 현재 인스턴스를 전달 하는&lt;/xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt; 호출에 대 한 편의 메서드</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Identifies the property where the binding should be established.</source>
          <target state="translated">바인딩을 해야 설정할 속성을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Represents the specifics of the data binding.</source>
          <target state="translated">데이터 바인딩의 고유 정보를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Records the conditions of the binding.</source>
          <target state="translated">바인딩 상태를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">이 반환 값은 오류 검사에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the provided element.</source>
          <target state="translated">값을 설정 하는 &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;연결 된 지정된 된 요소에 대 한 속성.&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">이 메서드는 지원에 대 한 연결 된 속성 구문이 &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;속성, 자식 요소는 제공 된 &lt;xref:System.Windows.FrameworkElement&gt;해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하도록 합니다.&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.</source>
          <target state="translated">현재 값을 설정 하려면 &lt;xref:System.Windows.FrameworkElement&gt;를 직접 사용 하 여 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> 접근자 &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>The element that specifies a flow direction.</source>
          <target state="translated">흐름 방향을 지정 하는 요소입니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, specifying the direction.</source>
          <target state="translated">방향을 지정 하는 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</source>
          <target state="translated">지정 된 이름의 리소스를 검색 하 고 지정 된 속성에 리소스 참조를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>A resource reference is similar to the use of a <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> in markup.</source>
          <target state="translated">리소스 참조는를 사용 하는 <bpt id="p1">[</bpt>DynamicResource 태그 확장<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 태그에 있습니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</source>
          <target state="translated">리소스 참조는 런타임에 지연 기준 지정된 된 속성의 값을 제공 하는 내부 식을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</source>
          <target state="translated">내부 이벤트를 통해 변경 된 값을 표시 하는 리소스 사전 때마다 또는 현재 요소에 부모가 될 때마다 식이 다시 계산 됩니다 (부모 변경 변경 사전 조회 경로).</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The property to which the resource is bound.</source>
          <target state="translated">리소스 연결 된 속성입니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>The name of the resource.</source>
          <target state="translated">리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property.</source>
          <target state="translated">Serialization 프로세스의 콘텐츠를 serialize 해야 하는지 여부를 반환 합니다.는 &lt;xref:System.Windows.FrameworkElement.Resources*&gt;속성.&lt;/xref:System.Windows.FrameworkElement.Resources*&gt;</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will return <ph id="ph1">`true`</ph> as long as there is at least one keyed resource in the local &lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 으로 로컬 &lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Resources%2A&gt; 중인 키가 지정 된 리소스를 하나 이상 있습니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우는 &lt;xref:System.Windows.FrameworkElement.Resources*&gt;고, 그렇지 않으면 직렬화 된 속성 값은 여야 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.Resources*&gt;</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property.</source>
          <target state="translated">Serialization 프로세스의 콘텐츠를 serialize 해야 하는지 여부를 반환 합니다.는 &lt;xref:System.Windows.FrameworkElement.Style*&gt;속성.&lt;/xref:System.Windows.FrameworkElement.Style*&gt;</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will return <ph id="ph1">`true`</ph> if the &lt;xref:System.Windows.Style&gt; is locally set.</source>
          <target state="translated">이 반환 됩니다 <ph id="ph1">`true`</ph> 경우는 &lt;xref:System.Windows.Style&gt;로컬로 설정.&lt;/xref:System.Windows.Style&gt;</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우는 &lt;xref:System.Windows.FrameworkElement.Style*&gt;고, 그렇지 않으면 직렬화 된 속성 값은 여야 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.Style*&gt;</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property.</source>
          <target state="translated">Serialization 프로세스의 콘텐츠를 serialize 해야 하는지 여부를 반환 합니다.는 &lt;xref:System.Windows.FrameworkElement.Triggers*&gt;속성.&lt;/xref:System.Windows.FrameworkElement.Triggers*&gt;</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns <ph id="ph1">`true`</ph> if the &lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt; property is locally set.</source>
          <target state="translated">이 메서드가 반환 <ph id="ph1">`true`</ph> 경우는 &lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;속성이 로컬로.&lt;/xref:System.Windows.FrameworkElement.Triggers%2A&gt;</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우는 &lt;xref:System.Windows.FrameworkElement.Triggers*&gt;고, 그렇지 않으면 직렬화 된 속성 값은 여야 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.FrameworkElement.Triggers*&gt;</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Occurs when either the &lt;xref:System.Windows.FrameworkElement.ActualHeight<bpt id="p1">*</bpt>&gt; or the &lt;xref:System.Windows.FrameworkElement.ActualWidth<ept id="p1">*</ept>&gt; properties change value on this element.</source>
          <target state="translated">발생 경우 중 하나는 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 또는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 속성이이 요소의 값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서.&lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system reads properties within the &lt;xref:System.Windows.SizeChangedEventArgs&gt; argument class of this event, to  determine whether the reported size changes should be considered significant.</source>
          <target state="translated">이 레이아웃 시스템 내에서 속성을 읽고는 &lt;xref:System.Windows.SizeChangedEventArgs&gt;고려할지 여부를 보고 된 크기를 변경 하는 중요 한을 확인 하려면이 이벤트의 인수 클래스입니다.&lt;/xref:System.Windows.SizeChangedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</source>
          <target state="translated">이 레이아웃 시스템 또는 이전 구문과 새 높이 또는 너비 값 사이의 않는 시각적으로 차이로 인해 레이아웃 변경을 적용 하지 않도록 사용자 컨트롤별 레이아웃 구현을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</source>
          <target state="translated">차이로 부동 소수점 데이터 형식 반올림 하거나 동일한 결과 계산 때문일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_SizeChanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.SizeChangedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_SizeChanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;|   | 라우팅 전략 | 직접 |   | 대리자 | &lt;xref:System.Windows.SizeChangedEventHandler&gt;|&lt;/xref:System.Windows.SizeChangedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Occurs when the source value changes for any existing property binding on this element.</source>
          <target state="translated">이 요소에 있는 바인딩 기존 속성에 대 한 소스 값이 변경 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the &lt;xref:System.Windows.Data.Binding.SourceUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 &lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;의해 발생 하는 이벤트 &lt;xref:System.Windows.Data.Binding&gt;이 요소와 관련 된.&lt;/xref:System.Windows.Data.Binding&gt; &lt;/xref:System.Windows.Data.Binding.SourceUpdated&gt;</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_SourceUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object SourceUpdated="eventHandler"/&gt;   ```</ph></source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_SourceUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용<ph id="ph1">```   &lt;object SourceUpdated="eventHandler"/&gt;   ```</ph></target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Gets or sets the style used by this element when it is rendered.</source>
          <target state="translated">렌더링 될 때이 요소에서 사용 되는 스타일을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</source>
          <target state="translated">컨트롤에 대 한 현재 스타일은 보통 제어 테마 설정의 기본 스타일 제공 또는 스타일에서 리소스 페이지 또는 응용 프로그램 수준 (암시적 스타일)에 의해 일반적으로 컨트롤 형식에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</source>
          <target state="translated">이 속성은 설정 하거나 반환 하지 기본 (테마) 스타일 않지만 요소에 사용 되는 명시적 스타일 또는 암시적 스타일 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</source>
          <target state="translated">암시적 또는 명시적 스타일의 경우 스타일은 지정 된 이름이 든 리소스로 로컬 정의 중요지 않습니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the styles has some restrictions.</source>
          <target state="translated">스타일 정의는 몇 가지 제한 사항이 있습니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset the entire Style property to a new &lt;xref:System.Windows.Style&gt; at any time, which will force a layout recomposition.</source>
          <target state="translated">새 전체 스타일 속성을 다시 설정할 수 있습니다 &lt;xref:System.Windows.Style&gt;언제 든 지는 됩니다 언제.&lt;/xref:System.Windows.Style&gt;</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, as soon as that style is placed in use by a loaded element, the &lt;xref:System.Windows.Style&gt; should be considered sealed.</source>
          <target state="translated">그러나 가능한 한 즉시 해당 스타일 로드 된 요소에서 사용 하 게 되는 &lt;xref:System.Windows.Style&gt;고려해 야 봉인.&lt;/xref:System.Windows.Style&gt;</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to make a change to any individual property of an in-use style (such as anything within the collection of &lt;xref:System.Windows.Style.Setters%2A&gt;) causes an exception to be thrown.</source>
          <target state="translated">사용 중인 스타일의 개별 속성을 변경 하려고 (컬렉션 내에서 아무 것도 같은 &lt;xref:System.Windows.Style.Setters%2A&gt;) 예외를 throw 합니다.&lt;/xref:System.Windows.Style.Setters%2A&gt;</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</source>
          <target state="translated">태그에 정의 된 스타일 (리소스)에 대 한 리소스 사전에서 로드 하거나 내에 포함 된 페이지가 (인라인 스타일)에 대 한 로드 사용 중인 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>Style is a dependency property with special precedence.</source>
          <target state="translated">스타일은 특별 한 우선 순위가 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>The locally set style generally operates at the highest precedence in the property system.</source>
          <target state="translated">로컬로 설정 된 스타일은 일반적으로 가장 높은 우선 순위에서 속성 시스템 작동 합니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the Style is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</source>
          <target state="translated">스타일 null 인 경우이 시점에서 속성을 로드 하는 동안 시스템 확인 암시적 스타일이 해당 유형을 지정 하는 로컬 또는 응용 프로그램 리소스에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the Style property value.</source>
          <target state="translated">이 단계를 수행한 후 스타일 여전히 null 이면 기본 (테마) 스타일에서 실행 되며 스타일 프레젠테이션을 위해를 일반적으로 제공 다음 되지만 기본 스타일의 스타일 속성 값에 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Styling and Templating<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>종속성 속성 값 우선 순위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 또는 <bpt id="p2">[</bpt>스타일 및 템플릿<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Style="{resourceExtension styleResourceKey}"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Style"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id="p3">&lt;a name="xamlValues_Style"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>    One of the following: , or .</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object Style="{resourceExtension styleResourceKey}"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Style"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 속성 요소 사용 <bpt id="p3">&lt;a name="xamlValues_Style"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept> 다음 중 하나:, 또는.      </target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>    The key that identifies the style being requested.</source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept> 요청 되는 스타일을 식별 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT">
          <source>The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">에 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt; 의 기존 리소스를이 키는</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended for most style scenarios.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 속성 요소 구문을 기술적으로 가능 하지만 대부분의 스타일 시나리오에 대 한 권장 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt>인라인 스타일 및 템플릿<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.</source>
          <target state="translated">사용 하 여 바인딩 참조 또는 &lt;xref:System.Windows.Data.Binding&gt;가능 하지만 일반적이 지 않은 이기도 합니다.&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.StyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.StyleProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.StyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The applied, nondefault style for the element, if present.</source>
          <target state="translated">있는 경우 요소에 대 한 적용 된 기본값이 아닌 스타일입니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The default for a default-constructed <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본 생성 된 기본 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 은 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Style*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Style*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Style*&gt;</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>For a description of this member, see the &lt;xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt; method.</source>
          <target state="translated">이 멤버에 대 한 참조는 &lt;xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt;메서드.&lt;/xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt;</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현 이며</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the &lt;xref:System.Windows.FrameworkElement&gt; instance is cast to an &lt;xref:System.Windows.Markup.IQueryAmbient&gt; interface.</source>
          <target state="translated">사용할 수 있습니다 경우에만 &lt;xref:System.Windows.FrameworkElement&gt;인스턴스로 캐스팅 되는 &lt;xref:System.Windows.Markup.IQueryAmbient&gt;인터페이스.&lt;/xref:System.Windows.Markup.IQueryAmbient&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>The name of the requested ambient property.</source>
          <target state="translated">요청된 된 앰비언트 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">propertyName</ph><ept id="p2">&lt;/code&gt;</ept> is available; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">propertyName</ph> <ept id="p2">&lt;/code&gt;</ept> 사용할 수 없으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Gets or sets an arbitrary object value that can be used to store custom information about this element.</source>
          <target state="translated">이 요소에 대 한 사용자 지정 정보를 저장 하는 데 사용할 수 있는 임의의 개체 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is analogous to Tag properties in other <ph id="ph1">[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]</ph> programming models, such as <ph id="ph2">[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]</ph> or <ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 속성은 다른 태그 속성과 유사 <ph id="ph1">[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]</ph> 프로그래밍 모델을 같은 <ph id="ph2">[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]</ph> 또는 <ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tag is intended to provide a pre-existing property location where you can store some basic custom information about any &lt;xref:System.Windows.FrameworkElement&gt; without requiring you to subclass an element.</source>
          <target state="translated">태그에 대 한 몇 가지 기본 사용자 지정 정보를 저장할 수 있는 기존 속성 위치를 제공 하기 위한 용도가 &lt;xref:System.Windows.FrameworkElement&gt;요소 하위 클래스를 요구 하지 않고.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this property takes an object, you would need to use the property element usage in order to set the Tag property in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> to anything other than an object with a known and built-in type converter, such as a string.</source>
          <target state="translated">이 속성은 개체, 않으므로 속성 요소 사용에서 태그 속성을 설정 하려면 사용 하도록 해야 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> , 문자열 등의 알려진된 기본 제공 형식 변환기를 가진 개체가 아닌 다른 값으로.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects used in this manner are typically not within the standard <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> elements.</source>
          <target state="translated">이런이 방식으로 사용 되는 개체가 아닌 일반적으로 표준 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 네임 스페이스 따라서으로 외부 네임 스페이스에 대 한 네임 스페이스 매핑을 필요할 수 있습니다 및 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>XAML and Custom Classes for WPF<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 및 <bpt id="p2">[</bpt>XAML을 WPF에 대 한 사용자 지정 클래스<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Tag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.TagProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Tag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.TagProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.TagProperty&gt;</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>The intended value.</source>
          <target state="translated">원하는 값입니다.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
          <target state="translated">이 속성에 기본값이 없습니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Tag*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Tag*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Tag*&gt;</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Occurs when the target value changes for any property binding on this element.</source>
          <target state="translated">이 요소의 속성 바인딩에 대 한 대상 값이 변경 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the &lt;xref:System.Windows.Data.Binding.TargetUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.</source>
          <target state="translated">이 이벤트에 대 한 별칭을 만들어는 &lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;의해 발생 하는 이벤트 &lt;xref:System.Windows.Data.Binding&gt;이 요소와 관련 된.&lt;/xref:System.Windows.Data.Binding&gt; &lt;/xref:System.Windows.Data.Binding.TargetUpdated&gt;</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</source>
          <target state="translated">이 일반적으로 해당 바인딩이 양방향 바인딩에 바인딩된 종속성 속성은 하는 이전 속성 값이 이제 모든 유효성 검사 또는 캐싱 체계를 지 원하는 속성 또는 데이터 원본에 유효 의미 합니다.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the event data of the TargetUpdated event to determine the specific property that is reporting the target value update.</source>
          <target state="translated">TargetUpdated 이벤트의 이벤트 데이터를 사용 하 여 대상 값 업데이트를 보고 하는 특정 속성을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object TargetUpdated="eventHandler"/&gt;   ```</ph></source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용<ph id="ph1">```   &lt;object TargetUpdated="eventHandler"/&gt;   ```</ph></target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Gets a reference to the template parent of this element.</source>
          <target state="translated">이 요소의 템플릿 부모에 대 한 참조를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>This property is not relevant if the element was not created through a template.</source>
          <target state="translated">이 속성은 요소 템플릿을 통해 만들어지지 않은 경우와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT">
          <source>TemplatedParent is frequently <ph id="ph1">`null`</ph> for objects that are created in your application markup or code.</source>
          <target state="translated">TemplatedParent는 자주 <ph id="ph1">`null`</ph> 응용 프로그램 태그 또는 코드에서 만든 개체에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because you create those objects directly, not via a template.</source>
          <target state="translated">템플릿을 통해 직접 해당 개체를 만들기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</source>
          <target state="translated">루트, 논리적 트리를 탐색 하 여 가져온 개체 참조 또는 일반 이름으로 참조를 서식 파일에서 제공 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cases where TemplatedParent might not be <ph id="ph1">`null`</ph> include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with &lt;xref:System.Windows.Media.VisualTreeHelper&gt;, or working with enumerators, which might return elements that came from templates.</source>
          <target state="translated">TemplatedParent 되지 수 없는 경우 <ph id="ph1">`null`</ph> 작업 등의 시각적 트리를 탐색 낮은 수준의 특정 입력된 이벤트에 대 한 이벤트 처리 적중 테스트, &lt;xref:System.Windows.Media.VisualTreeHelper&gt;, 열거자, 작업을 반환할 수 있는 템플릿에서 생성 되는 요소 또는.&lt;/xref:System.Windows.Media.VisualTreeHelper&gt;</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another case is if you specifically call &lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt; against an existing &lt;xref:System.Windows.FrameworkTemplate&gt; and are work with the returned object.</source>
          <target state="translated">경우에도 명시적으로 호출 하는 경우 &lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;기존에 대해 &lt;xref:System.Windows.FrameworkTemplate&gt;하며 반환 된 개체를 사용 하는.&lt;/xref:System.Windows.FrameworkTemplate&gt; &lt;/xref:System.Windows.FrameworkTemplate.FindName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT">
          <source>Templates are actually shared objects, where the contents of the template are created only once.</source>
          <target state="translated">템플릿은 실제로 공유 개체를 서식 파일의 내용을 한 번만 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</source>
          <target state="translated">따라서 서식 파일에서 생성 된 요소에 대 한 개체 참조를 가져오는 경우 명백한 논리적 트리 루트 페이지에 도달 하지 않도록 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to connect such a template reference to the page's logical tree, you should get the TemplatedParent value and continue to navigate that element tree as desired.</source>
          <target state="translated">이러한 서식 파일 참조 페이지의 논리 트리를 연결 하려면 먼저 TemplatedParent 값을 가져올를 계속를 원하는 대로 해당 요소 트리를 탐색 합니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>The element whose <bpt id="p1">&lt;xref href="System.Windows.FrameworkTemplate"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Windows.FrameworkTemplate.VisualTree*&gt; caused this element to be created.</source>
          <target state="translated">요소를 <bpt id="p1">&lt;xref href="System.Windows.FrameworkTemplate"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Windows.FrameworkTemplate.VisualTree*&gt;이 요소를 만들 수 있습니다.&lt;/xref:System.Windows.FrameworkTemplate.VisualTree*&gt;</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>This value is frequently <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated">이 값은 대개 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Gets or sets the tool-tip object that is displayed for this element in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">이 요소에 대해 표시 되는 도구 설명 개체를 가져오거나 설정 합니다.는 <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of this property is of type &lt;xref:System.Windows.Controls.ToolTip&gt;, then that value is the tool-tip that will be used in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 속성의 값 형식인 경우 &lt;xref:System.Windows.Controls.ToolTip&gt;, 해당 값은에 사용 되는 도구 설명의 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.&lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value is of any other type, then that value will be used as the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> for a &lt;xref:System.Windows.Controls.ToolTip&gt; provided (constructed) by the system.</source>
          <target state="translated">값이 다른 형식의 경우 해당 값으로 사용 됩니다는 <bpt id="p1">*</bpt>콘텐츠<ept id="p1">*</ept> 에 대 한는 &lt;xref:System.Windows.Controls.ToolTip&gt;제공 (생성 된) 시스템에 의해.&lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Controls.ToolTipService&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Windows.Controls.ToolTipService&gt;.&lt;/xref:System.Windows.Controls.ToolTipService&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service class provides attached properties that can be used to further customize a &lt;xref:System.Windows.Controls.ToolTip&gt;.</source>
          <target state="translated">추가적으로 사용자 지정할 &lt;xref:System.Windows.Controls.ToolTip&gt;.&lt;/xref:System.Windows.Controls.ToolTip&gt; 사용할 수 있는 연결 된 속성을 제공 하는 서비스 클래스</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object ToolTip="toolTipContent"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_ToolTip"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     &lt;object.ToolTip&gt;       &lt;ToolTip .../&gt;     &lt;/object.ToolTip&gt;   &lt;/object&gt;   - or -   &lt;object&gt;     &lt;object.ToolTip&gt;       toolTipObjectContent     &lt;/object.ToolTip&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_ToolTip"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>toolTipContent<ept id="p4">*</ept>    A string that becomes the display text for the ToolTip.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object ToolTip="toolTipContent"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_ToolTip"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 속성 요소 사용 <ph id="ph2">```   &lt;object&gt;     &lt;object.ToolTip&gt;       &lt;ToolTip .../&gt;     &lt;/object.ToolTip&gt;   &lt;/object&gt;   - or -   &lt;object&gt;     &lt;object.ToolTip&gt;       toolTipObjectContent     &lt;/object.ToolTip&gt;   &lt;/object&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_ToolTip"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p4">*</bpt>toolTipContent<ept id="p4">*</ept> 도구 설명 텍스트 표시 되는 문자열입니다.            </target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept>    Some object, provided in object element form, that should be used as the content for the &lt;xref:System.Windows.FrameworkElement&gt; .</source>
          <target state="translated"><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> &lt;xref:System.Windows.FrameworkElement&gt;.&lt;/xref:System.Windows.FrameworkElement&gt; 에 대 한 내용으로 사용 해야 하는 개체 요소 형태에 제공 된 몇 가지 개체</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically this would be a &lt;xref:System.Windows.FrameworkElement&gt; or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing.</source>
          <target state="translated">이 수는 일반적으로 &lt;xref:System.Windows.FrameworkElement&gt;또는 다른 요소는 콘텐츠 결국 텍스트가 포함 된 도구 설명에 대 한 레이아웃 합치기를 만드는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this usage, the &lt;xref:System.Windows.Controls.ToolTip&gt; element is created implicitly from the parsed <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, and the <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> content is set as its &lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">이 사용법에서는 &lt;xref:System.Windows.Controls.ToolTip&gt;요소가 만들어집니다 구문 분석 된에서 암시적으로 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, 및 <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> 내용이 설정으로 해당 &lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;<ph id="ph1">`ToolTip`</ph> .../&gt;    See &lt;xref:System.Windows.Controls.ToolTip&gt;.</source>
          <target state="translated"><ph id="ph1">`ToolTip`</ph>.../&gt;    See &lt;xref:System.Windows.Controls.ToolTip&gt;.&lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ToolTipProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.FrameworkElement.ToolTipProperty&gt;</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The tooltip object.</source>
          <target state="translated">도구 설명 개체입니다.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>See Remarks below for details on why this parameter is not strongly typed.</source>
          <target state="translated">왜이 매개 변수는 강력한 형식이 아니며 대 한 자세한 내용은 아래 설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Occurs just before any tooltip on the element is closed.</source>
          <target state="translated">요소에 도구 설명이 닫히기 바로 전에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the ToolTipClosing event as handled does not cancel closing the tooltip.</source>
          <target state="translated">ToolTipClosing 이벤트 처리로 표시 도구 설명 닫기 취소 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</source>
          <target state="translated">도구 설명이 표시 되 면 도구 설명 닫기 사용자 UI와 상호 작용에 대 한 응답에만 작업 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">이 이벤트는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서.&lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">이 이벤트의 식별자 필드에는 다시 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스의 구현을 사용 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;|   | 라우팅 전략 | 직접 |   | 대리자 | &lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -재정의 &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.&lt;/xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; &lt;/xref:System.Windows.Controls.ToolTipEventHandler&gt; &lt;/xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Occurs when any tooltip on the element is opened.</source>
          <target state="translated">요소에 도구 설명이 열릴 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the &lt;xref:System.Windows.Controls.ToolTipEventArgs&gt; event data handled.</source>
          <target state="translated">도구 설명 UI에 표시 되지 않도록 하려면의 처리기에 표시할 수는 &lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;이벤트 데이터를 처리 합니다.&lt;/xref:System.Windows.Controls.ToolTipEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the tooltip is displayed, using the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property as the tooltip content.</source>
          <target state="translated">그렇지 않으면, 도구 설명 표시 됩니다, 값을 사용 하 여 &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;도구 설명 콘텐츠로 속성.&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another possible scenario is that you could write a handler that resets the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property for the element that is the event source, just before the tooltip is displayed.</source>
          <target state="translated">다른 가능한 시나리오는의 값을 기본값으로 다시 설정 하는 처리기를 작성할 수는 &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;도구 설명이 표시 되는 바로 전에 이벤트 원본에 있는 요소에 대 한 속성.&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>ToolTipOpening will not be raised if the value of &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; is <ph id="ph1">`null`</ph> or otherwise unset.</source>
          <target state="translated">경우에 발생 하지 것입니다 값 &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;은 <ph id="ph1">`null`</ph> 명시적 이거나 설정 되지 않은.&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not deliberately set &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; to <ph id="ph1">`null`</ph> while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</source>
          <target state="translated">의도적으로 설정 하지 않으면 &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;를 <ph id="ph1">`null`</ph> 도구 설명이 현재 열려 있거나 열기;이 도구 설명, 닫히고 없으며 UI에는 원하지 않는 시각적 요소가 만들어집니다 대신 동안.&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ToolTipOpening event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">에 이벤트 일 수 없습니다는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서.&lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">이 이벤트의 식별자 필드에는 다시 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스의 구현을 사용 하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;|   | 라우팅 전략 | 직접 |   | 대리자 | &lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -재정의 &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;파생된 클래스에서이 이벤트를 처리 하는 클래스를 구현 합니다.&lt;/xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; &lt;/xref:System.Windows.Controls.ToolTipEventHandler&gt; &lt;/xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ToolTip*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.ToolTip*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.ToolTip*&gt;</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Gets the collection of triggers established directly on this element, or in child elements.</source>
          <target state="translated">이 요소에 직접 또는 자식 요소에 설정 된 트리거의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This property can only be set in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;이 속성 설정할 수 있습니다 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 또는 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 표시 된 컬렉션 구문을 통해 합니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property to access the collection object itself is read-only, the collection itself is read-write.</source>
          <target state="translated">컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</source>
          <target state="translated">속성이 루트 요소에만 있습니다. 찾거나 다른 곳에서 설정 하려고 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not enable you to examine triggers that exist as part of styles in use on this element.</source>
          <target state="translated">이 속성에서는 없습니다이 요소에 사용 중인 스타일의 일부로 존재 하는 트리거를 검사할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It only reports the collection of triggers that are literally added to the collection, either in markup or code.</source>
          <target state="translated">태그 또는 코드에서 컬렉션에 추가 된 트리거의 컬렉션만 보고 합니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</source>
          <target state="translated">요소 기본적으로 기존 등의 요소에 일반적으로 없습니다 (템플릿을 통해 예를 들어); 것이 더 일반적 컨트롤 대신 스타일에 설정 하는 합성에서 제공 하는 트리거에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In terms of behavior (and trying to establish which effect came from which element's declared Triggers collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</source>
          <target state="translated">동작 (및 어느 요소 선언 하는 트리거 컬렉션에서 생성 되는 효과 설정 하려고) 측면에서 트리거 조건 및 트리거 효과 모두이 요소에 있을 수 있습니다 또는 논리적 트리에서 자식 요소에 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that if you use lifetime events such as &lt;xref:System.Windows.FrameworkElement.Loaded&gt; to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</source>
          <target state="translated">와 같은 수명 이벤트를 사용 하는 경우 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;이 컬렉션을 가져오려면 자식 요소의 트리거 아직 완전히 로드와 되지 컬렉션은 런타임 시 실제로 것 보다 더 작은 됩니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the collection of triggers established on an element only supports &lt;xref:System.Windows.EventTrigger&gt;, not property triggers (&lt;xref:System.Windows.Trigger&gt;).</source>
          <target state="translated">요소에 설정 된 트리거의 컬렉션만 지원 합니다. 이때 &lt;xref:System.Windows.EventTrigger&gt;, 하지 속성 트리거 (&lt;xref:System.Windows.Trigger&gt;).&lt;/xref:System.Windows.Trigger&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property, or indirectly through an implicit style reference.</source>
          <target state="translated">속성 트리거를 필요로 하는 경우 스타일이 나 템플릿 내에서이 배치 하 고 다음 할당 해야 스타일이 나 템플릿을 요소에 하거나 통해 직접는 &lt;xref:System.Windows.FrameworkElement.Style%2A&gt;속성, 암시적 스타일 참조를 통해 간접적으로 또는.&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept>    One or more defined &lt;xref:System.Windows.EventTrigger&gt; elements.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 속성 요소 사용 <ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept> 하나 이상의 정의 된 &lt;xref:System.Windows.EventTrigger&gt;요소.&lt;/xref:System.Windows.EventTrigger&gt;      </target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each such trigger is expected to contain valid storyboard actions and references.</source>
          <target state="translated">이러한 각 트리거에서 올바른 스토리 보드의 작업 및 참조를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this collection can only be established on the root element of a page.</source>
          <target state="translated">참고가이 컬렉션 페이지의 루트 요소에만 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>적기<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>A strongly typed collection of <bpt id="p1">&lt;xref href="System.Windows.Trigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">강력한 형식의 컬렉션 <bpt id="p1">&lt;xref href="System.Windows.Trigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified key, and returns that resource if found.</source>
          <target state="translated">지정된 된 키와 리소스를 검색 하 고 해당 리소스를 반환 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</source>
          <target state="translated">호출 하는 요소에는 리소스를 찾을 수 없습니다, 논리 트리를 통해 부모 리소스 트리를 위쪽으로 검색, 트리 것 동일한 방식으로 검색 결과 리소스 된 요청 하는 경우 키에 의해 런타임 시.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`null`</ph> only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called.</source>
          <target state="translated">메서드가 반환 <ph id="ph1">`null`</ph> 만 리소스 트리에 아무 곳 이나 해당 키의 리소스가 존재 하는 경우 시간에는 트리의 기존 조건 당 해당 TryFindResource 라고 합니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</source>
          <target state="translated">일반적으로 반환 값을 반환 되는 리소스 값으로 설정 하 려 했던 하는 속성의 형식 캐스팅 즉시 것입니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt; method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;메서드가 비슷한 동작을 제외 하 고 제공 된 키에 리소스가 반환 된 경우 예외를 throw 합니다.&lt;/xref:System.Windows.FrameworkElement.FindResource%2A&gt;</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The key identifier of the resource to be found.</source>
          <target state="translated">찾을 리소스의 키 식별자입니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>The found resource, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no resource with the provided <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p2">&lt;/code&gt;</ept> is found.</source>
          <target state="translated">찾은 리소스 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 리소스가 없으면 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">key</ph> <ept id="p2">&lt;/code&gt;</ept> 를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Occurs when the element is removed from within an element tree of loaded elements.</source>
          <target state="translated">로드 된 요소의 요소 트리에서 요소에서 제거 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">라우트된 이벤트를 직접 경로 따르지 않는, 에서만 발생 하는 동일한 요소 내에서 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">라우트된 이벤트에 다른 라우트된 이벤트 동작 지원 않는 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 &lt;xref:System.Windows.EventTrigger&gt;스타일에서.&lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement.Loaded&gt; and Unloaded might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;및 Unloaded 시스템 사용자가 시작한 테마 변경의 결과로 컨트롤에서 발생할 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">테마를 변경 하면 컨트롤 템플릿 및 포함 된 시각적 트리가 그러면 언로드하고 다시 로드 하기 위해 전체 컨트롤의 무효화 합니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore Unloaded cannot be assumed to occur only on navigation away from the page.</source>
          <target state="translated">따라서 페이지 탐색에 대해서만 발생 하도록 언로드를 가정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the Unloaded event is not raised after an application begins shutting down.</source>
          <target state="translated">Note 응용 프로그램 종료를 시작한 후 Unloaded 이벤트 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application shutdown occurs when the condition defined by the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property occurs.</source>
          <target state="translated">응용 프로그램 종료 조건에 정의 된 경우에 수행 된 &lt;xref:System.Windows.Application.ShutdownMode%2A&gt;속성이 발생 합니다.&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you place cleanup code within a handler for the Unloaded event, such as for a &lt;xref:System.Windows.Window&gt; or a &lt;xref:System.Windows.Controls.UserControl&gt;, it may not be called as expected.</source>
          <target state="translated">에 대 한와 같은 Unloaded 이벤트에 대 한 처리기 내에서 정리 코드를 배치 하는 경우는 &lt;xref:System.Windows.Window&gt;또는 &lt;xref:System.Windows.Controls.UserControl&gt;, 예상 대로 하지 호출 수도 있습니다.&lt;/xref:System.Windows.Controls.UserControl&gt; &lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Unloaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.UnloadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Unloaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 이벤트 정보 라우트된 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.UnloadedEvent&gt;|   | 라우팅 전략 | 직접 |   | 대리자 | &lt;xref:System.Windows.RoutedEventHandler&gt;|&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.UnloadedEvent&gt;</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Unloaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">식별 된 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Unloaded"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라우트된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트가 등록 될 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">클래스 처리기를 추가 하려면 이러한 식별자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">라우트된 이벤트를 등록 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">라우트된 이벤트 식별자를 사용 하 여 클래스 처리기를 추가 하는 방법에 대 한 자세한 내용은 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Simplifies access to the &lt;xref:System.Windows.NameScope&gt; de-registration method.</source>
          <target state="translated">에 대 한 액세스를 간소화 된 &lt;xref:System.Windows.NameScope&gt;등록 취소 메서드에.&lt;/xref:System.Windows.NameScope&gt;</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You only need to un-register names if you intend to re-register another element with that same name.</source>
          <target state="translated">하기만 하면 등록을 취소할 이름에 동일한 이름 갖는 다른 요소의 하려는 경우.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Name of the name-object pair to remove from the current scope.</source>
          <target state="translated">현재 범위에서 제거 하는 이름-개체 쌍의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Reapplies the default style to the current <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">현재 기본 스타일을 다시 적용 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</source>
          <target state="translated">여부 레이아웃 반올림에 적용 해야이 요소의 크기와 위치 레이아웃 하는 동안 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the UseLayoutRounding property for an element is <ph id="ph1">`true`</ph>, all non-integral pixel values that are calculated during the &lt;xref:System.Windows.UIElement.Measure%2A&gt; and &lt;xref:System.Windows.UIElement.Arrange%2A&gt; passes are rounded to whole pixel values.</source>
          <target state="translated">요소에 대 한 사항은 속성이 <ph id="ph1">`true`</ph>, 중에 계산 되는 모든 정수 계열이 아닌 픽셀 값은 &lt;xref:System.Windows.UIElement.Measure%2A&gt;및 &lt;xref:System.Windows.UIElement.Arrange%2A&gt;전달 정수 픽셀 값으로 반올림 됩니다.&lt;/xref:System.Windows.UIElement.Arrange%2A&gt; &lt;/xref:System.Windows.UIElement.Measure%2A&gt;</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is inherited by child elements.</source>
          <target state="translated">이 속성은 자식 요소에 의해 상속 됩니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You should set UseLayoutRounding to <ph id="ph2">`true`</ph> on the root element.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;으로 설정 해야 사항은 <ph id="ph2">`true`</ph> 루트 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</source>
          <target state="translated">부모 좌표로; 자식 좌표를 추가 하는 레이아웃 시스템 따라서 부모 좌표는 픽셀 경계에 없는 경우 자식 좌표가 픽셀 경계에 있습니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If UseLayoutRounding cannot be set at the root, set &lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt; on the child to obtain the effect that you want.</source>
          <target state="translated">사항은 루트에 설정할 수 없는 경우 설정 &lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;자식 원하는 효과 가져올 수 있습니다.&lt;/xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</source>
          <target state="translated">픽셀 경계에 개체를 그리기는 지 장치 픽셀 중간 포함 때 앤티 앨리어싱에 의해 생성 되는 반투명 가장자리 제거 합니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</source>
          <target state="translated">다음 그림을 장치 픽셀의 중간에 단일 픽셀 너비 줄의 출력을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line on the left does not use layout rounding and is anti-aliased.</source>
          <target state="translated">왼쪽에 줄 레이아웃 반올림을 사용 하지 않는 되며 앤티 앨리어싱 있습니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The line on the right uses layout rounding.</source>
          <target state="translated">오른쪽에 있는 줄 레이아웃 반올림을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Anti&amp;#45;aliased line compared to single pixel line.<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>Anti-aliased line compared to single pixel line.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>단일 픽셀 선에 비교한 앤티 앨리어싱된 선입니다. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>단일 픽셀 선에 비교한 앤티 앨리어싱된 선입니다.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use layout rounding and &lt;xref:System.Windows.GridUnitType&gt; sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</source>
          <target state="translated">레이아웃 반올림을 사용 하는 경우 및 &lt;xref:System.Windows.GridUnitType&gt;크기 조정, 레이아웃 시스템 약간 변동에에서 만듭니다 하위 픽셀 렌더링 하지 않으려면 열 또는 행 측정.&lt;/xref:System.Windows.GridUnitType&gt;</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a grid has a total width of 100 with 3 columns each of size &lt;xref:System.Windows.GridUnitType&gt;, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</source>
          <target state="translated">예를 들어 눈금 크기의 3 열이 있는 100의 전체 너비 &lt;xref:System.Windows.GridUnitType&gt;, 3 개의 열을 만드는 대신 33.3의 같은 너비를 가진, 레이아웃 시스템은 33 모델과 34의 너비의 너비는 2 개의 열을 만듭니다.&lt;/xref:System.Windows.GridUnitType&gt;</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;에서.NET 4.6을 변경한 레이아웃 반올림 테두리가 있는 컨트롤에 클리핑 인스턴스를 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</source>
          <target state="translated">기본적으로 대상 프레임 워크는.NET Framework 4.6 이상이 경우이 기능이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: <ph id="ph1">`&lt;runtime&gt;``&lt;AppContextSwitchOverrides      value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;``&lt;/runtime&gt;`</ph> The setting only takes effect when the application is running on the .NET Framework 4.6.</source>
          <target state="translated">이전 버전의 framework 대상으로 하는 응용 프로그램 app.config 파일에 다음 설정을 추가 하 여 새 동작을에 선택할 수: <ph id="ph1">`&lt;runtime&gt;``&lt;AppContextSwitchOverrides      value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;``&lt;/runtime&gt;`</ph> 응용 프로그램은.NET Framework 4.6에서 실행 되는 하면 설정이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if layout rounding is applied; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>레이아웃 반올림이 적용 된; 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt;</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</source>
          <target state="translated">패널 또는 항목 컨트롤 같은 부모 요소에서 작성 하는 경우이 요소에 적용 되는 세로 맞춤 특징을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to &lt;xref:System.Windows.VerticalAlignment&gt;.</source>
          <target state="translated">때 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;속성 요소에 명시적으로 설정 되어, 이러한 값 이전의 레이아웃을 선택 하 고 &lt;xref:System.Windows.VerticalAlignment&gt;.&lt;/xref:System.Windows.VerticalAlignment&gt; 이 속성을 설정 하 여 일반적인 효과 취소&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; 하 고&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>VerticalAlignment is the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated">VerticalAlignment는는 <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> 이란 현실에서 종속성 속성에 대 한 속성 접근자입니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</source>
          <target state="translated">이 특정 종속성 속성에는 해당 "기본값이"이 파생 된 요소 클래스, 특히 컨트롤에서에서 서로 다르게 설정 많습니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 해당 기본값을 설정 하기 위한 여러 가지 메타 데이터 사용 하면서도 특정 파생된 클래스에 다시 등록 있거나 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일 적용 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the apparent "default" of VerticalAlignment for a &lt;xref:System.Windows.Controls.ComboBoxItem&gt; control will be &lt;xref:System.Windows.VerticalAlignment&gt;, even though &lt;xref:System.Windows.Controls.ComboBoxItem&gt; inherits VerticalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">예를 들어 명백한 "기본값인"에 대 한 VerticalAlignment는 &lt;xref:System.Windows.Controls.ComboBoxItem&gt;컨트롤 됩니다 &lt;xref:System.Windows.VerticalAlignment&gt;경우라도, &lt;xref:System.Windows.Controls.ComboBoxItem&gt; &lt;xref:System.Windows.FrameworkElement&gt;.&lt;/xref:System.Windows.FrameworkElement&gt; VerticalAlignment 직접 상속&lt;/xref:System.Windows.Controls.ComboBoxItem&gt; &lt;/xref:System.Windows.VerticalAlignment&gt; &lt;/xref:System.Windows.Controls.ComboBoxItem&gt;</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.ComboBoxItem&gt;, within the style's control template.</source>
          <target state="translated">즉, 해당 값의 기본 스타일 내에서 다시 설정 된 &lt;xref:System.Windows.Controls.ComboBoxItem&gt;, 스타일의 컨트롤 템플릿 내에서.&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Canvas&gt; does not use VerticalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas&gt;되므로 사용 하지 않습니다 VerticalAlignment 레이아웃을 구성할 때 &lt;xref:System.Windows.Controls.Canvas&gt;절대 위치에 따라.&lt;/xref:System.Windows.Controls.Canvas&gt;&lt;/xref:System.Windows.Controls.Canvas&gt;</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inherited by &lt;xref:System.Windows.Controls.ComboBoxItem&gt; or any derived classes, &lt;xref:System.Windows.Controls.ComboBoxItem&gt; redefines the default value of this property to be &lt;xref:System.Windows.VerticalAlignment&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;또는 &lt;xref:System.Windows.Controls.ComboBoxItem&gt; &lt;xref:System.Windows.VerticalAlignment&gt;.&lt;/xref:System.Windows.VerticalAlignment&gt; 되려면이 속성의 기본값 다시 정의 하는&lt;/xref:System.Windows.Controls.ComboBoxItem&gt; 모든 파생된 클래스에서&lt;/xref:System.Windows.Controls.ComboBoxItem&gt; 상속 되는 경우</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>A vertical alignment setting.</source>
          <target state="translated">세로 맞춤 설정입니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.VerticalAlignment"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.VerticalAlignment*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.VerticalAlignment*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.VerticalAlignment*&gt;</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Gets the number of visual child elements within this element.</source>
          <target state="translated">이 요소 내 시각적 자식 요소의 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation of VisualChildrenCount always returns either zero or one.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;VisualChildrenCount의 구현에서는 항상&amp;0; 이나&amp;1;을 반환 합니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that maintain a visual child collection that might exceed one must override both this property and &lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;.</source>
          <target state="translated">이 속성 및 &lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt; 하나 초과 하는 시각적 자식 컬렉션을 유지 관리 하는 클래스를 재정의 해야</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;, &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;).</source>
          <target state="translated">이 속성은 레이아웃 재정의 구현 하기 위해 현재 자식 컬렉션의 상한값을 확인 하려면 일반적으로 사용 됩니다 (&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;, &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;).&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The number of visual child elements for this element.</source>
          <target state="translated">이 요소에 대 한 시각적 자식 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Gets or sets the width of the element.</source>
          <target state="translated">요소의 너비를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">이 세 가지 속성 중 하나에 &lt;xref:System.Windows.FrameworkElement&gt;너비 정보를 지정 하는.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.</source>
          <target state="translated">다른 두 &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;및 &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt; 은</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, Width.</source>
          <target state="translated">이러한 값 간에 충돌이 발생 하는 경우 실제 너비 결정 하기 위한 응용 프로그램의 순서는 첫 번째 &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;다음, 해야 &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, 마지막으로 너비 범위 내에 있는 이러한 각 경우.&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">이 속성의 반환 값은 항상에 대해 설정 된 값과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; may vary.</source>
          <target state="translated">반대로,의 값은 &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;다를 수 있습니다.&lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout may have rejected the suggested size for some reason.</source>
          <target state="translated">레이아웃은 몇 가지 이유로 제안된 크기를 거부 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the layout system itself works asynchronously relative to the property system set of Width and may not have processed that particular sizing property change yet.</source>
          <target state="translated">또한이 레이아웃 시스템 자체 너비의 속성 시스템 집합을 기준으로 비동기적으로 작동 하 고 해당 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Double&gt;이 속성 값 또한 &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.&lt;/xref:System.Double.NaN?displayProperty=fullName&gt; 수&lt;/xref:System.Double&gt; 허용 하는 것 외에도</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is how you specify auto sizing behavior.</source>
          <target state="translated">자동 크기 조정 동작을 지정 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분)로 자동 크기 조정 동작을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Auto sizing behavior implies that the element will fill the width available to it.</source>
          <target state="translated">자동 크기 조정 동작 요소를 사용할 수 있는 너비 가득 찰 의미 합니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">그러나 note 특정 컨트롤을 구체적으로 다시 설정 된 경우가 아니라면 크기 조정 동작은 자동 수 없게 하는 기본 스타일에서 기본값 제공 하는 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).</source>
          <target state="translated">유효성 검사 이외에 비결 정적 상한 값이 레이아웃 시스템에 의해 적용 되는 너비에 대 한 경계 (이 보다 큰 매우 큰 숫자 &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt;보다 높지만 &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).&lt;/xref:System.Double.MaxValue?displayProperty=fullName&gt; &lt;/xref:System.Single.MaxValue?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">이 경계를 초과 하면 요소가 렌더링 되지 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not set Width to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">가능한 시각적 표시의 최대 크기 보다 훨씬 큰 값으로 너비를 설정 하지 않으면 또는 비결 정적이 상한 값을 초과할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Width="double"/&gt;   - or –   &lt;object Width ="qualifiedDouble"/&gt;   - or -   &lt;object Width ="Auto"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Width"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object Width="double"/&gt;   - or –   &lt;object Width ="qualifiedDouble"/&gt;   - or -   &lt;object Width ="Auto"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Width"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>double<ept id="p3">*</ept> &lt;xref:System.Double&gt; 의 문자열 표현은 &lt;xref:System.Double&gt;0.0 보다 크거나 같은 값.&lt;/xref:System.Double&gt; &lt;/xref:System.Double&gt;          </target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대 한 설명을 참조 하세요.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">이 값으로 해석 되는 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> 측정 합니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">문자열은 소수점이 하를 명시적으로 포함 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">예를 들어 값의 <ph id="ph1">`1`</ph> 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>도<ept id="p1">*</ept> A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> 단위 선언 문자열 중 하나에 의해 다음 위에서 설명한 대로 값: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px       <ph id="ph6">`Auto`</ph>    Enables autosizing behavior.</source>
          <target state="translated"><ph id="ph1">`px`</ph>(기본값)은 <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph> <ph id="ph3">`in`</ph> 인치; 1in 96px = = <ph id="ph4">`cm`</ph> 센티미터; 1cm==(96/2.54) px <ph id="ph5">`pt`</ph> 은 포인트; 1pt==(96/72) px <ph id="ph6">`Auto`</ph> 자동 크기 조정 동작을 사용 합니다.       </target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.WidthProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.FrameworkElement.WidthProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.WidthProperty&gt;</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>The width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">요소의 너비에 <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">이 값은 0.0 보다 크거나 같은 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">상한 정보에 대 한 설명을 참조 하세요.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Width*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.FrameworkElement.Width*&gt;종속성 속성입니다.&lt;/xref:System.Windows.FrameworkElement.Width*&gt;</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>