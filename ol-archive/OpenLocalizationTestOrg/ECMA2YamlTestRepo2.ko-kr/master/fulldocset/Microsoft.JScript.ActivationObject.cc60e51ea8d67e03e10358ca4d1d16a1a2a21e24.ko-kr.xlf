<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b73aab7d40fe618e2afe5345c7828f2acd2e371</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.JScript.ActivationObject.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">057ef4a390755e33136d6a18d9b8e868bff8c219</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2918fa2ae9792699cff9d50f26eab9ff7c30fa1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an object that is taking part in a scope hierarchy.</source>
          <target state="translated">범위 계층에 참여 하는 개체를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class contains methods for resolving scope and for getting member information.</source>
          <target state="translated">이 클래스는 범위를 확인 하 고 멤버 정보를 가져오기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It belongs to the compilation and run-time state category.</source>
          <target state="translated">컴파일 및 런타임 상태 범주에 속합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Creates a new global variable, using the specified name, value, and attributes.</source>
          <target state="translated">지정한 이름, 값 및 특성을 사용 하 여 새 전역 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The name of the field.</source>
          <target state="translated">필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that describe the attributes of a field.</source>
          <target state="translated">필드의 특성을 설명 하는 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Reflection.FieldAttributes&gt; is added automatically.</source>
          <target state="translated">&lt;xref:System.Reflection.FieldAttributes&gt;자동으로 추가 됩니다.&lt;/xref:System.Reflection.FieldAttributes&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The value of the field.</source>
          <target state="translated">필드의 값입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A global variable that has the specified name, value, and attributes.</source>
          <target state="translated">지정한 이름, 값 및 특성을 가진 전역 변수입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Stores an array of variables that are in scope.</source>
          <target state="translated">배열 범위에 있는 변수를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gets the current default scope, which is either the contained object of a <bpt id="p1">&lt;xref uid="langword_csharp_with" name="with" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> statement scope, or the global scope.</source>
          <target state="translated">포함된 된 개체는 현재 기본 범위를 가져옵니다는 <bpt id="p1">&lt;xref uid="langword_csharp_with" name="with" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 문 범위 또는 전역 범위입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The current default scope.</source>
          <target state="translated">현재 기본 범위입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns a field that has the specified name by searching the scope hierarchy.</source>
          <target state="translated">범위 계층 구조를 검색 하 여 지정된 된 이름을 가진 필드를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This method searches only the scope that is specified by the lexical level.</source>
          <target state="translated">이 메서드는 어휘 수준으로 지정 된 범위에만 검색 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method applies to fields that cannot be resolved at compile time.</source>
          <target state="translated">이 메서드는 컴파일 타임에 확인할 수 없는 필드에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs when an <ph id="ph1">`eval`</ph> expression refers to a field in the outer scope.</source>
          <target state="translated">이 경우는 <ph id="ph1">`eval`</ph> 식 외부 범위에 있는 필드를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`eval`</ph> expression can declare a local field that has the same name as a field in the outer scope, the field cannot be early bound to the outer scope field.</source>
          <target state="translated">때문에 <ph id="ph1">`eval`</ph> 식 외부 범위에 있는 필드와 이름이 같은 지정 된 로컬 필드를 선언할 수, 외부 범위의 필드에 초기 바인딩할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The name of the field to search for.</source>
          <target state="translated">검색할 필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The lexical level to search.</source>
          <target state="translated">검색할 어휘 수준입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.FieldInfo&gt; object that has the specified name.</source>
          <target state="translated">A &lt;xref:System.Reflection.FieldInfo&gt;지정한 이름을 가진 개체입니다.&lt;/xref:System.Reflection.FieldInfo&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</source>
          <target state="translated">모듈 범위 예를 들어 정적 변수를 포함 하는 범위를 찾을 때까지 범위 계층 구조를 검색 하 여 전역 범위를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The global scope.</source>
          <target state="translated">전역 범위입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the local declaration of a field that has the specified name.</source>
          <target state="translated">지정된 된 이름을 지정 된 필드의 지역 선언이 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is used at compile time for error checking.</source>
          <target state="translated">이 오류를 검사에 대 한 컴파일 타임에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the field.</source>
          <target state="translated">필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The local declaration of the field.</source>
          <target state="translated">필드의 지역 선언이 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Retrieves an array of &lt;xref:System.Reflection.MemberInfo&gt; objects that correspond to all members that match a specified name.</source>
          <target state="translated">배열을 검색 &lt;xref:System.Reflection.MemberInfo&gt;지정 된 이름과 일치 하는 모든 멤버에 해당 하는 개체입니다.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The name of the member to search for.</source>
          <target state="translated">검색할 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</source>
          <target state="translated">리플렉션으로 멤버에 대 한 검색 수행 하는 방법을 지정 하는 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An array of objects that match the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> argument.</source>
          <target state="translated">일치 하는 개체의 배열에서 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept> 인수입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Retrieves an array of &lt;xref:System.Reflection.MemberInfo&gt; objects that corresponds to all members of the current object.</source>
          <target state="translated">배열을 검색 &lt;xref:System.Reflection.MemberInfo&gt;현재 개체의 모든 멤버에 해당 하는 개체입니다.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</source>
          <target state="translated">리플렉션으로 멤버에 대 한 검색 수행 하는 방법을 지정 하는 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An array of objects that contains all members of the current object.</source>
          <target state="translated">현재 개체의 모든 멤버가 포함 된 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets the value of the specified member by searching the scope hierarchy.</source>
          <target state="translated">범위 계층 구조를 검색 하 여 지정된 된 멤버의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method searches only the scope that is specified by the lexical level.</source>
          <target state="translated">이 메서드는 어휘 수준으로 지정 된 범위에만 검색 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method applies to members that cannot be resolved at compile time.</source>
          <target state="translated">이 메서드는 컴파일 타임에 확인할 수 없는 멤버에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs when an <ph id="ph1">`eval`</ph> expression refers to a member in the outer scope.</source>
          <target state="translated">이 경우는 <ph id="ph1">`eval`</ph> 식 외부 범위에 있는 멤버를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`eval`</ph> expression can declare a local member that has the same name as a member in the outer scope, the member cannot be early bound to the outer scope member.</source>
          <target state="translated">때문에 <ph id="ph1">`eval`</ph> 식 외부 범위에 있는 멤버와 동일한 이름을 가진 로컬 멤버를 선언할 수, 초기 외부 범위 구성원 바인딩할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The name of the member to search for.</source>
          <target state="translated">검색할 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The lexical level to search.</source>
          <target state="translated">검색할 어휘 수준입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The value of the member <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">멤버의 값 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>