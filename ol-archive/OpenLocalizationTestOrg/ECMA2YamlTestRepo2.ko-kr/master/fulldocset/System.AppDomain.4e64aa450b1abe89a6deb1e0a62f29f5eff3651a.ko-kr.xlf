<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddc805849dad52b7f6ecc8dc61619425ff6d15ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.AppDomain.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb1f76f36d7e63660d7304ad2e668b7fd60afd16</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">447c5c8ccca396a96683bb7393a2ee01d04ec844</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an application domain, which is an isolated environment where applications execute.</source>
          <target state="translated">격리 된 환경 응용 프로그램이 실행 되는 응용 프로그램 도메인을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application domains, which are represented by AppDomain objects, help provide isolation, unloading, and security boundaries for executing managed code.</source>
          <target state="translated">AppDomain 개체에 표시 되는 응용 프로그램 도메인을 관리 코드를 실행 하는 것에 대 한 격리, 언로드 및 보안 경계를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Use application domains to isolate tasks that might bring down a process.</source>
          <target state="translated">-프로세스를 중단 시킬 수 있는 작업을 격리 하려면 응용 프로그램 도메인을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the state of the AppDomain that's executing a task becomes unstable, the AppDomain can be unloaded without affecting the process.</source>
          <target state="translated">작업을 실행 하는 AppDomain의 상태가 불안정 해지, AppDomain 언로드할 수는 프로세스에 영향을 주지 않고 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is important when a process must run for long periods without restarting.</source>
          <target state="translated">프로세스 다시 시작 하지 않고 오래 동안 실행 해야 하는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use application domains to isolate tasks that should not share data.</source>
          <target state="translated">또한 데이터를 공유 해야 하는 작업을 격리 하려면 응용 프로그램 도메인을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</source>
          <target state="translated">-어셈블리를 기본 응용 프로그램 도메인에 로드 하는 경우 프로세스가 실행 되는 동안 메모리에서 언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</source>
          <target state="translated">그러나 로드 하 고 어셈블리를 실행 하는 두 번째 응용 프로그램 도메인을 열면 해당 응용 프로그램 도메인이 언로드될 때 어셈블리 로드 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</source>
          <target state="translated">이 기술을 사용 하 여 때 큰 Dll을 사용 하 여 장기 실행 프로세스의 작업 집합을 최소화 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</source>
          <target state="translated">여러 응용 프로그램 도메인은 단일 프로세스;에서 실행할 수 있습니다. 그러나 응용 프로그램 도메인과 스레드 간에 일대일 상관 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</source>
          <target state="translated">여러 스레드는 단일 응용 프로그램 도메인에 속할 수 있습니다 및 단일 응용 프로그램 도메인에 스레드를 실행 하는 동안 지정된 된 스레드가 지정된 된 시간에는 단일 응용 프로그램 도메인으로 제한 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application domains are created using the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">사용 하 여 응용 프로그램 도메인이 만들어집니다는 &lt;xref:System.AppDomain.CreateDomain%2A&gt;메서드.&lt;/xref:System.AppDomain.CreateDomain%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>AppDomain instances are used to load and execute assemblies (&lt;xref:System.Reflection.Assembly&gt;).</source>
          <target state="translated">AppDomain 인스턴스 로드 하 고 어셈블리를 실행 하는 데 사용 됩니다 (&lt;xref:System.Reflection.Assembly&gt;).&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an AppDomain is no longer in use, it can be unloaded.</source>
          <target state="translated">AppDomain 더 이상 사용 중일 때 로드 되지 않습니다 수 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AppDomain class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</source>
          <target state="translated">AppDomain 클래스에는 응용 프로그램이 응용 프로그램 도메인이 언로드되면, 또는 처리 되지 않은 예외가 throw 되 면 어셈블리를 로드할 때 응답할 수 있도록 하는 이벤트 집합을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on using application domains, see <bpt id="p1">[</bpt>Application Domains<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">응용 프로그램 도메인 사용에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>응용 프로그램 도메인<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements the &lt;xref:System.MarshalByRefObject&gt;, &lt;xref:System._AppDomain&gt;, and &lt;xref:System.Security.IEvidenceFactory&gt; interfaces.</source>
          <target state="translated">이 클래스가 구현 하는 &lt;xref:System.MarshalByRefObject&gt;, &lt;xref:System._AppDomain&gt;, 및 &lt;xref:System.Security.IEvidenceFactory&gt;인터페이스.&lt;/xref:System.Security.IEvidenceFactory&gt; &lt;/xref:System._AppDomain&gt; &lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should never create a remotable wrapper for an AppDomain object.</source>
          <target state="translated">AppDomain 개체에 대 한 원격 가능 래퍼를 만들지 마십시오.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so could publish a remote reference to that AppDomain, exposing methods such as &lt;xref:System.AppDomain.CreateInstance%2A&gt; to remote access and effectively destroying code access security for that AppDomain.</source>
          <target state="translated">이렇게 하면와 같은 메서드를 노출 하는 AppDomain에 대 한 원격 참조를 게시할 수 &lt;xref:System.AppDomain.CreateInstance%2A&gt;원격 액세스 및 AppDomain에 대 한 코드 액세스 보안을 효과적으로 제거 합니다.&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious clients connecting to the remoted AppDomain could obtain access to any resource the AppDomain itself has access to.</source>
          <target state="translated">원격으로 실행할 AppDomain에 연결 되는 악성 클라이언트 자체는 AppDomain에 액세스할 수 있는 리소스에 대 한 액세스를 얻을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not create remotable wrappers for any type that extends &lt;xref:System.MarshalByRefObject&gt; and that implements methods that could be used by malicious clients to bypass the security system.</source>
          <target state="translated">확장 하는 모든 형식에 대 한 원격 가능 래퍼를 만들지 마십시오 &lt;xref:System.MarshalByRefObject&gt;보안 시스템을 무시 하는 악의적인 클라이언트가 사용할 수 있는 메서드를 구현 하 고.&lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The default value for the &lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt; property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;에 대 한 기본값은 &lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;속성은 <ph id="ph2">`false`</ph>.&lt;/xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This setting is unsafe for services.</source>
          <target state="translated">이 설정은 서비스에 대 한 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">서비스에서 부분적으로 신뢰할 수 있는 코드가 다운로드를 방지 하려면이 속성을 설정 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the activation context for the current application domain.</source>
          <target state="translated">현재 응용 프로그램 도메인에 대해 활성화 컨텍스트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An object that represents the activation context for the current application domain, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the domain has no activation context.</source>
          <target state="translated">현재 응용 프로그램 도메인의 활성화 컨텍스트를 나타내는 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 도메인에 활성화 컨텍스트가 없는 경우.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appends the specified directory name to the private path list.</source>
          <target state="translated">지정 된 디렉터리 이름을 전용 경로 목록에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</source>
          <target state="translated">이 속성의 사용에 이미 로드 된 후 어셈블리 검색 경로 변경 될 수 있으므로 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt; property instead.</source>
          <target state="translated">사용 하 여 &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;속성 대신.&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</source>
          <target state="translated">전용 경로 또는 상대 검색 경로 어셈블리 확인자에서 전용 어셈블리를 조사 하는 위치는 기본 디렉터리에 상대적인 경로입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The name of the directory to be appended to the private path.</source>
          <target state="translated">전용 경로에 추가 되는 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the identity of the application in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 응용 프로그램의 id를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object that identifies the application in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 응용 프로그램을 식별 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</source>
          <target state="translated">응용 프로그램 및 응용 프로그램을 실행할 수 있게 하는 신뢰 수준에 있는지 여부에 부여 된 사용 권한을 설명 하는 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An object that encapsulates permission and trust information for the application in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 응용 프로그램에 대 한 권한과 신뢰 정보를 캡슐화 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns the assembly display name after policy has been applied.</source>
          <target state="translated">정책이 적용 된 후 어셈블리 표시 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ApplyPolicy method takes an assembly display name and returns the post-policy display name.</source>
          <target state="translated">메서드는 어셈블리를 사용 하며 ApplyPolicy 표시 이름, 사후 정책 표시 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</source>
          <target state="translated">리플렉션 전용 컨텍스트에 정책을 적용 하지 않습니다 때문에 정책을 사용 하 여 어셈블리를 로드 해야 할 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The assembly display name, in the form provided by the <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">제공 하는 형식에서 표시 이름, 어셈블리는 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A string containing the assembly display name after policy has been applied.</source>
          <target state="translated">정책이 적용 된 후 이름을 표시 하는 어셈블리를 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Occurs when an assembly is loaded.</source>
          <target state="translated">어셈블리가 로드 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AssemblyLoadEventHandler&gt; delegate for this event indicates what assembly was loaded.</source>
          <target state="translated">&lt;xref:System.AssemblyLoadEventHandler&gt;대리자이 이벤트는 어떤 어셈블리가 로드 되었는지 나타냅니다.&lt;/xref:System.AssemblyLoadEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 &lt;xref:System.Security.SecurityException&gt;throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of an assembly fails.</source>
          <target state="translated">어셈블리 확인이 실패 하면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is the responsibility of the &lt;xref:System.ResolveEventHandler&gt; for this event to return the assembly that is specified by the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property, or to return null if the assembly is not recognized.</source>
          <target state="translated">책임은 &lt;xref:System.ResolveEventHandler&gt;는 어셈블리를 반환 하 여 지정 된이 이벤트에 대 한는 &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;속성 또는 어셈블리가 인식 되지 않으면 null을 반환 합니다.&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</source>
          <target state="translated">어셈블리는 실행 컨텍스트에 로드 해야 합니다. 리플렉션 전용 컨텍스트에 로드 하는 경우이 이벤트를 발생 시킨 로드는 실패 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For guidance on the use of this event, see <bpt id="p1">[</bpt>Resolving Assembly Loads<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이 이벤트의 사용에 대 한 지침을 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 로드 해결<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;속성을 확인할 수 없는 어셈블리 로드를 요청한 어셈블리를 반환 합니다.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</source>
          <target state="translated">예를 들어 로더 수 요청 어셈블리와 해당 종속성 검색 경로에 없기 때문에 요청한 어셈블리의 종속성을 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</source>
          <target state="translated">요청한 어셈블리의 id를 알면 종속성의 둘 이상의 버전을 사용할 수 있는 경우 올바른 버전을 확인 또는 종속성을 찾거나에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Beginning with the <ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the &lt;xref:System.ResolveEventHandler&gt; event is raised for all assemblies, including resource assemblies.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 부터는 <ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, &lt;xref:System.ResolveEventHandler&gt;리소스 어셈블리를 포함 하는 모든 어셈블리에 대 한 이벤트가 발생 합니다.&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the event was not raised for resource assemblies.</source>
          <target state="translated">이전 버전에서는 리소스 어셈블리에 대 한 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</source>
          <target state="translated">운영 체제에 지역화 된 처리기에 여러 번 호출할 수 있습니다: 대체 (fallback) 체인의 각 문화권에 대해 한 번씩입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this event, the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property returns the assembly name before policy is applied.</source>
          <target state="translated">이 이벤트는 &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;속성 정책 적용 하기 전에 어셈블리 이름을 반환 합니다.&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn't <ph id="ph2">`null`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 둘 이상의 이벤트 처리기가이 이벤트에 대 한 등록을 하는 경우 이벤트 처리기는 값을 반환할 때까지 순서 대로 이벤트 handlersarecalled 반드시 그럴 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent event handlers are ignored.</source>
          <target state="translated">후속 이벤트 처리기는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">어셈블리 확인자에서 사용 하 여 어셈블리를 조사 하는 기본 디렉터리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property corresponds to the &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">이 속성에 해당 하는 &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be retrieved using the &lt;xref:System.AppDomain.GetData%2A&gt; method with the string "APPBASE".</source>
          <target state="translated">또한 검색할 수 있습니다를 사용 하는 &lt;xref:System.AppDomain.GetData%2A&gt;메서드에 "APPBASE" 문자열.&lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">어셈블리 확인자에서 어셈블리를 조사 사용 되는 기본 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Resets the path that specifies the location of private assemblies to the empty string ("").</source>
          <target state="translated">빈 문자열을 전용 어셈블리의 위치를 지정 하는 경로 다시 설정 ("").</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</source>
          <target state="translated">전용 경로 공용 언어 런타임에서 전용 어셈블리를 찾는 검색 하는 기본 디렉터리의 상대 경로입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Resets the list of directories containing shadow copied assemblies to the empty string ("").</source>
          <target state="translated">섀도 복사 된 어셈블리를 빈 문자열을 포함 하는 디렉터리 목록을 다시 설정 ("").</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The shadow copy path is a list of directories where shadow copied assemblies are stored.</source>
          <target state="translated">섀도 복사본 경로가 어셈블리 섀도 복사 디렉터리의 목록이 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;및 <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">지정한 COM 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">매개 변수 형식을 포함 하는 어셈블리가 포함 된 파일의 이름 및 형식의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">이 메서드를 사용 하 여 형식을 로컬로 로드할 필요 없이 개체를 원격으로 만들려는 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 래핑되지 실제 개체에 액세스 해야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>A&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt; attribute with a value of <ph id="ph1">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, &lt;xref:System.TypeLoadException&gt; is thrown.</source>
          <target state="translated">A&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt; 의 값을 가진 특성 <ph id="ph1">`true`</ph> ; 해당 형식의 인스턴스를 만들려면이 메서드에 대 한 COM 형식으로 명시적으로 나 기본적으로 적용할 해야 그렇지 &lt;xref:System.TypeLoadException&gt;throw 됩니다.&lt;/xref:System.TypeLoadException&gt; &lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리를 포함 하는 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The name of the requested type.</source>
          <target state="translated">요청 된 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The type cannot be loaded.</source>
          <target state="translated">형식을 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">매개 변수가 없는 public 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>클래스는 추상 클래스는입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-or-       This member was invoked with a late-binding mechanism.</source>
          <target state="translated">-또는-이 멤버가 런타임에 바인딩 메커니즘으로 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>빈 문자열 ("").</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The COM object that is being referred to is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">참조 되는 COM 개체는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">지정한 COM 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">매개 변수 형식을 포함 하는 어셈블리가 포함 된 파일의 이름 및 형식의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">이 메서드를 사용 하 여 형식을 로컬로 로드할 필요 없이 개체를 원격으로 만들려는 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 래핑되지 실제 개체에 액세스 해야 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt; attribute with a value of <ph id="ph1">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, &lt;xref:System.TypeLoadException&gt; is thrown.</source>
          <target state="translated">A &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;의 값을 가진 특성 <ph id="ph1">`true`</ph> ; 해당 형식의 인스턴스를 만들려면이 메서드에 대 한 COM 형식으로 명시적으로 나 기본적으로 적용할 해야 그렇지 &lt;xref:System.TypeLoadException&gt;throw 됩니다.&lt;/xref:System.TypeLoadException&gt; &lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리를 포함 하는 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The name of the requested type.</source>
          <target state="translated">요청 된 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">계산된 된 해시 코드 값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">어셈블리 매니페스트에 사용 되는 해시 알고리즘을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The type cannot be loaded.</source>
          <target state="translated">형식을 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">매개 변수가 없는 public 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>클래스는 추상 클래스는입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-or-       This member was invoked with a late-binding mechanism.</source>
          <target state="translated">-또는-이 멤버가 런타임에 바인딩 메커니즘으로 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>가 빈 문자열 ("").</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The COM object that is being referred to is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">참조 되는 COM 개체는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the specified name.</source>
          <target state="translated">지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`friendlyName`</ph> parameter is intended to identify the domain in a manner that is meaningful to humans.</source>
          <target state="translated"><ph id="ph1">`friendlyName`</ph> 매개 변수는 사용자에 게 의미 있는 방식으로 도메인을 식별 하기 위한 것이 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This string should be suitable for display in user interfaces.</source>
          <target state="translated">이 문자열은 사용자 인터페이스에 표시 하기에 적합 해야 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload uses the &lt;xref:System.AppDomainSetup&gt; information from the default application domain.</source>
          <target state="translated">이 메서드 오버 로드는 &lt;xref:System.AppDomainSetup&gt;기본 응용 프로그램 도메인에서 정보.&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name using the supplied evidence.</source>
          <target state="translated">제공 된 증명 정보를 사용 하 여 지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">이 이름은 도메인을 식별 하기 위해 사용자 인터페이스에 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 실행 되는 코드의 id를 설정 하는 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">전달 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 현재 응용 프로그램 도메인의 증거를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Creates a new application domain using the specified name, evidence, and application domain setup information.</source>
          <target state="translated">지정한 이름, 증명 정보 및 응용 프로그램 도메인 설치 정보를 사용 하 여 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">이 이름은 도메인을 식별 하기 위해 사용자 인터페이스에 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 실행 되는 코드의 id를 설정 하는 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">전달 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 현재 응용 프로그램 도메인의 증거를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">응용 프로그램 도메인 초기화 정보를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</source>
          <target state="translated">지정한 이름, 증명 정보, 응용 프로그램 도메인 설치 정보, 기본 권한 집합 및 완전히 신뢰할 수 있는 어셈블리의 배열을 사용 하 여 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; property of the &lt;xref:System.AppDomainSetup&gt; object that you supply for <ph id="ph1">`info`</ph>.</source>
          <target state="translated">설정 해야 합니다는 &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;의 속성은 &lt;xref:System.AppDomainSetup&gt;에 대해 제공 하는 개체 <ph id="ph1">`info`</ph>.&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.ApplicationBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, an exception is thrown.</source>
          <target state="translated">그렇지 않으면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">경우 <ph id="ph1">`securityInfo`</ph> 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information provided for <ph id="ph1">`grantSet`</ph> and <ph id="ph2">`fullTrustAssemblies`</ph> is used to create an &lt;xref:System.Security.Policy.ApplicationTrust&gt; object for the new application domain.</source>
          <target state="translated">에 제공 된 정보의 <ph id="ph1">`grantSet`</ph> 및 <ph id="ph2">`fullTrustAssemblies`</ph> 만드는 데 사용 되는 &lt;xref:System.Security.Policy.ApplicationTrust&gt;새 응용 프로그램 도메인에 대 한 개체입니다.&lt;/xref:System.Security.Policy.ApplicationTrust&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">이 이름은 도메인을 식별 하기 위해 사용자 인터페이스에 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information, see the description of &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt; 설명은 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 실행 되는 코드의 id를 설정 하는 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">전달 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 현재 응용 프로그램 도메인의 증거를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">응용 프로그램 도메인 초기화 정보를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</source>
          <target state="translated">기본 권한 집합을 부여 된 모든 어셈블리에 로드 특정 권한이 없는 새 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An array of strong names representing assemblies to be considered fully trusted in the new application domain.</source>
          <target state="translated">완전히 간주할 어셈블리를 나타내는 강력한 이름의 배열을 새 응용 프로그램 도메인에서 신뢰할 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The application domain is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">응용 프로그램 도메인이 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-       The &lt;xref:System.AppDomainSetup.ApplicationBase*&gt; property is not set on the <bpt id="p1">&lt;xref href="System.AppDomainSetup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that is supplied for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">-또는- &lt;xref:System.AppDomainSetup.ApplicationBase*&gt;속성에 설정 되어 있지는 <bpt id="p1">&lt;xref href="System.AppDomainSetup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체에 대해 제공한 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">info</ph> <ept id="p2">&lt;/code&gt;</ept>.&lt;/xref:System.AppDomainSetup.ApplicationBase*&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">증명 정보, 응용 프로그램 기본 경로, 상대 검색 경로 및 어셈블리의 섀도 복사본이 응용 프로그램 도메인에 로드 되는지를 지정 하는 매개 변수를 사용 하 여 지정 된 이름의 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">이 이름은 도메인을 식별 하기 위해 사용자 인터페이스에 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 실행 되는 코드의 id를 설정 하는 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">전달 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 현재 응용 프로그램 도메인의 증거를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">어셈블리 확인자에서 어셈블리를 조사 사용 되는 기본 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.BaseDirectory*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.BaseDirectory*&gt;.&lt;/xref:System.AppDomain.BaseDirectory*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">전용 어셈블리를 어셈블리 확인자에서 조사할 기본 디렉터리는 상대 경로입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.&lt;/xref:System.AppDomain.RelativeSearchPath*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, a shadow copy of an assembly is loaded into this application domain.</source>
          <target state="translated">경우 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 어셈블리의 섀도 복사본이이 응용 프로그램 도메인에 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">증명 정보, 응용 프로그램 기본 경로, 상대 검색 경로 및 어셈블리의 섀도 복사본이 응용 프로그램 도메인에 로드 되는지를 지정 하는 매개 변수를 사용 하 여 지정 된 이름의 새 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</source>
          <target state="translated">응용 프로그램 도메인이 초기화 될 때 호출 되는 콜백 메서드와 콜백 메서드를 전달할 문자열 인수의 배열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">이 이름은 도메인을 식별 하기 위해 사용자 인터페이스에 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 실행 되는 코드의 id를 설정 하는 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">전달 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 현재 응용 프로그램 도메인의 증거를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">어셈블리 확인자에서 어셈블리를 조사 사용 되는 기본 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.BaseDirectory*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.BaseDirectory*&gt;.&lt;/xref:System.AppDomain.BaseDirectory*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">전용 어셈블리를 어셈블리 확인자에서 조사할 기본 디렉터리는 상대 경로입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.&lt;/xref:System.AppDomain.RelativeSearchPath*&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to load a shadow copy of an assembly into the application domain.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>어셈블리의 섀도 복사본이 응용 프로그램 도메인에 로드 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.AppDomainInitializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents a callback method to invoke when the new <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object is initialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.AppDomainInitializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 될 때 호출할 콜백 메서드를 나타내는 대리자 새 <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체가 초기화 되었습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An array of string arguments to be passed to the callback represented by <ph id="ph1">`adInit`</ph>, when the new <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is initialized.</source>
          <target state="translated">배열에서 나타내는 콜백으로 전달할 문자열 인수의 <ph id="ph1">`adInit`</ph>때 새 <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체가 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">새로 만든된 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">지정된 된 어셈블리에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call CreateInstance on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 부하를 CreateInstance은 현재 어플리케이션 도메인 되지 않은 대상 응용 프로그램 도메인에서 호출 하려는 경우 발생 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">이후는 &lt;xref:System.Reflection.Assembly&gt;않습니다 &lt;xref:System.MarshalByRefObject&gt;이 메서드를 반환 하려고 시도 하는 경우는 &lt;xref:System.Reflection.Assembly&gt;은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 로드가 실패할 수 있습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">지정된 된 어셈블리에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A parameter specifies an array of activation attributes.</source>
          <target state="translated">매개 변수는 활성화 특성의 배열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">호출 하려고 &lt;xref:System.AppDomain.CreateInstance%2A&gt;응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">이후는 &lt;xref:System.Reflection.Assembly&gt;않습니다 &lt;xref:System.MarshalByRefObject&gt;이 메서드를 반환 하려고 시도 하는 경우는 &lt;xref:System.Reflection.Assembly&gt;은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 로드가 실패할 수 있습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">지정된 된 어셈블리에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</source>
          <target state="translated">매개 변수는 바인더, 바인딩 플래그, 생성자 인수, 인수 및 선택적 활성화 특성을 해석 하는 데 사용 되는 culture 관련 정보를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">호출 하려고 &lt;xref:System.AppDomain.CreateInstance%2A&gt;응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">이후는 &lt;xref:System.Reflection.Assembly&gt;않습니다 &lt;xref:System.MarshalByRefObject&gt;이 메서드를 반환 하려고 시도 하는 경우는 &lt;xref:System.Reflection.Assembly&gt;은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 로드가 실패할 수 있습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 사용 하 여 개체.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">일치 하는 생성자를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">지정된 된 어셈블리에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</source>
          <target state="translated">매개 변수는 바인더, 바인딩 플래그, 생성자 인수, 인수, 활성화 특성 및 형식을 만들기 위한 인증을 해석 하는 데 사용 되는 culture 관련 정보를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">호출 하려고 &lt;xref:System.AppDomain.CreateInstance%2A&gt;응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">이후는 &lt;xref:System.Reflection.Assembly&gt;않습니다 &lt;xref:System.MarshalByRefObject&gt;이 메서드를 반환 하려고 시도 하는 경우는 &lt;xref:System.Reflection.Assembly&gt;은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 로드가 실패할 수 있습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 사용 하 여 개체.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">생성을 인증 하는 데 사용 되는 정보 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 새 인스턴스의 래퍼인 개체 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">일치 하는 생성자를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> should be <bpt id="p2">&lt;xref uid="langword_csharp_null." name="null." href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept></source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityAttributes</ph> <ept id="p1">&lt;/code&gt;</ept> 이어야 합니다<bpt id="p2">&lt;xref uid="langword_csharp_null." name="null." href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Parameters specify the assembly where the type is defined, and the name of the type.</source>
          <target state="translated">매개 변수는 형식이 정의 되어 있는 어셈블리 및 형식의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstance%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstance%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">참조는 &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;속성의 형식에 대 한 <ph id="ph1">`typeName`</ph>.&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by CreateInstanceAndUnwrap, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 메서드에 대 한 초기 바인딩 호출을 확인 하는 경우 <ph id="ph2">`M`</ph> 형식의 개체의 <ph id="ph3">`T1`</ph> CreateInstanceAndUnwrap, 반환한 및 해당 메서드를 사용 하면 형식의 개체의 메서드에 대 한 초기 바인딩 호출 <ph id="ph4">`T2`</ph> 어셈블리에 <ph id="ph5">`C`</ph> 현재 어셈블리 또는 포함 된 어셈블리 이외의 <ph id="ph6">`T1`</ph>, 어셈블리 <ph id="ph7">`C`</ph> 은 현재 어플리케이션 도메인에 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 <ph id="ph1">`T1.M()`</ph> 의 본문에서 만들어진는 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, 또는 다른 동적으로 생성 된 코드에서.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">현재 도메인 어셈블리는 기본 도메인 인지 <ph id="ph1">`C`</ph> 프로세스가 끝날 때까지 언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 <ph id="ph1">`C`</ph>, 하지만 실패 합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 개체의 인스턴스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</source>
          <target state="translated">매개 변수는 형식이 정의 되어 있는 어셈블리, 형식, 이름 및 활성화 특성의 배열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstance%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstance%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">참조는 &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;속성의 형식에 대 한 <ph id="ph1">`typeName`</ph>.&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 메서드에 대 한 초기 바인딩 호출을 확인 하는 경우 <ph id="ph2">`M`</ph> 형식의 개체의 <ph id="ph3">`T1`</ph> 반환한 &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 <ph id="ph4">`T2`</ph> 어셈블리에 <ph id="ph5">`C`</ph> 현재 어셈블리 또는 포함 된 어셈블리 이외의 <ph id="ph6">`T1`</ph>, 어셈블리 <ph id="ph7">`C`</ph> 은 현재 어플리케이션 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 <ph id="ph1">`T1.M()`</ph> 의 본문에서 만들어진는 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, 또는 다른 동적으로 생성 된 코드에서.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">현재 도메인 어셈블리는 기본 도메인 인지 <ph id="ph1">`C`</ph> 프로세스가 끝날 때까지 언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 <ph id="ph1">`C`</ph>, 하지만 실패 합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 개체의 인스턴스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">때 형식 이름의 대/소문자 무시 되는지 여부를 지정 하 여 지정 된 어셈블리에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다. 만들; 유형을 선택 하는 데 사용 되는 바인더와 바인딩 특성 생성자의 인수 문화권 및 활성화 특성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstance%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstance%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">참조는 &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;속성의 형식에 대 한 <ph id="ph1">`typeName`</ph>.&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 메서드에 대 한 초기 바인딩 호출을 확인 하는 경우 <ph id="ph2">`M`</ph> 형식의 개체의 <ph id="ph3">`T1`</ph> 반환한 &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 <ph id="ph4">`T2`</ph> 어셈블리에 <ph id="ph5">`C`</ph> 현재 어셈블리 또는 포함 된 어셈블리 이외의 <ph id="ph6">`T1`</ph>, 어셈블리 <ph id="ph7">`C`</ph> 은 현재 어플리케이션 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 <ph id="ph1">`T1.M()`</ph> 의 본문에서 만들어진는 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, 또는 다른 동적으로 생성 된 코드에서.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">현재 도메인 어셈블리는 기본 도메인 인지 <ph id="ph1">`C`</ph> 프로세스가 끝날 때까지 언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 <ph id="ph1">`C`</ph>, 하지만 실패 합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 사용 하 여 개체.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">형식의 강제 변환을 제어 하는 데 사용 되는 문화권별 개체입니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 현재 스레드가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">원격 개체를 활성화 하는 데 필요한 URL을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 개체의 인스턴스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">일치 하는 생성자를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of the type, and how it is found and created.</source>
          <target state="translated">매개 변수는 형식과 발견 및 생성 방법의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstance%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstance%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">참조 &lt;xref:System.Reflection.AssemblyName&gt;형식의 <ph id="ph1">`assemblyName`</ph>.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">참조는 &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;속성의 형식에 대 한 <ph id="ph1">`typeName`</ph>.&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 메서드에 대 한 초기 바인딩 호출을 확인 하는 경우 <ph id="ph2">`M`</ph> 형식의 개체의 <ph id="ph3">`T1`</ph> 반환한 &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 <ph id="ph4">`T2`</ph> 어셈블리에 <ph id="ph5">`C`</ph> 현재 어셈블리 또는 포함 된 어셈블리 이외의 <ph id="ph6">`T1`</ph>, 어셈블리 <ph id="ph7">`C`</ph> 은 현재 어플리케이션 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 <ph id="ph1">`T1.M()`</ph> 의 본문에서 만들어진는 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, 또는 다른 동적으로 생성 된 코드에서.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">현재 도메인 어셈블리는 기본 도메인 인지 <ph id="ph1">`C`</ph> 프로세스가 끝날 때까지 언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 <ph id="ph1">`C`</ph>, 하지만 실패 합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 사용 하 여 개체.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">형식의 강제 변환을 제어 하는 데 사용 되는 문화권별 개체입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 현재 스레드가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">생성을 인증 하는 데 사용 되는 정보 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">지정한 개체의 인스턴스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">일치 하는 생성자를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출할 수 있는 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph> 가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the CreateInstanceFrom method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">다른 응용 프로그램 도메인, 호출이 수행 된 대상 응용 프로그램 도메인에 인스턴스를 만들려고 CreateInstanceFrom 메서드를 사용할 때 어셈블리가 대상 응용 프로그램 도메인에 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 하는 경우 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 &lt;xref:System.MissingMethodException&gt;발생할 수 있습니다.&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-호출 응용 프로그램 도메인에서 초기 바인딩 호출 인스턴스 유형으로 하는 경우 &lt;xref:System.InvalidCastException&gt;인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리가 포함 된 파일의 경로 포함 하는 이름입니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">사용 하는 어셈블리가 로드 되는 &lt;xref:System.Reflection.Assembly.LoadFrom*&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">새 인스턴스의 래퍼인 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">매개 변수가 없는 public 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph> 가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드에 대 한 자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">경우는 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 하는 경우 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 &lt;xref:System.MissingMethodException&gt;발생할 수 있습니다.&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-호출 응용 프로그램 도메인에서 초기 바인딩 호출 인스턴스 유형으로 하는 경우 &lt;xref:System.InvalidCastException&gt;인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리가 포함 된 파일의 경로 포함 하는 이름입니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">사용 하는 어셈블리가 로드 되는 &lt;xref:System.Reflection.Assembly.LoadFrom*&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">새 인스턴스의 래퍼인 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">경우는 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 하는 경우 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 &lt;xref:System.MissingMethodException&gt;발생할 수 있습니다.&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-호출 응용 프로그램 도메인에서 초기 바인딩 호출 인스턴스 유형으로 하는 경우 &lt;xref:System.InvalidCastException&gt;인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리가 포함 된 파일의 경로 포함 하는 이름입니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">사용 하는 어셈블리가 로드 되는 &lt;xref:System.Reflection.Assembly.LoadFrom*&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 통해.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">새 인스턴스의 래퍼인 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드에 대 한 자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">경우는 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 하는 경우 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 &lt;xref:System.MissingMethodException&gt;발생할 수 있습니다.&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-호출 응용 프로그램 도메인에서 초기 바인딩 호출 인스턴스 유형으로 하는 경우 &lt;xref:System.InvalidCastException&gt;인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">요청된 된 형식을 정의 하는 어셈블리가 포함 된 파일의 경로 포함 하는 이름입니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">사용 하는 어셈블리가 로드 되는 &lt;xref:System.Reflection.Assembly.LoadFrom*&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 통해.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">생성을 인증 하는 데 사용 되는 정보 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">새 인스턴스의 래퍼인 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">반환 값은 실제 개체에 액세스 하기 위해 래핑이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> should be <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityAttributes</ph> <ept id="p1">&lt;/code&gt;</ept> 해야 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 인스턴스는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">파일 이름과 요청된 된 형식을 정의 하는 어셈블리의 경로입니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">요청된 된 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">매개 변수가 없는 public 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">이 메서드 호출에 대 한 기본 생성자 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드에 대 한 자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">파일 이름과 요청된 된 형식을 정의 하는 어셈블리의 경로입니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly (see the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property).</source>
          <target state="translated">어셈블리를 제외한 네임 스페이스를 포함 하 여 요청 된 형식의 정규화 된 이름 (참조는 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성).</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">요청된 된 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">매개 변수가 없는 public 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">지정 된 형식의 지정 된 어셈블리 파일에 정의 된; 때 형식 이름의 대/소문자 무시 되는지 여부를 지정 하는 새 인스턴스를 만듭니다. 만들; 유형을 선택 하는 데 사용 되는 바인더와 바인딩 특성 생성자의 인수 문화권 및 활성화 특성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드에 대 한 자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">파일 이름과 요청된 된 형식을 정의 하는 어셈블리의 경로입니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 통해.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">요청된 된 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime that the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 공용 언어 런타임의 이후 버전으로 컴파일된 버전 되는 현재 로드 합니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">지정한 어셈블리 파일에 정의 된 지정 된 형식의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드 &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;및 &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt; 는</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드에 대 한 자세한 내용은 참조는 &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">파일 이름과 요청된 된 형식을 정의 하는 어셈블리의 경로입니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">반환 된 네임 스페이스만 어셈블리가 아닌 포함 하 여 요청 된 형식의 정규화 된 이름에서 <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">대/소문자 구분 검색을 수행할지 여부를 지정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">에 대 한 검색에 영향을 미치는&amp;0; 또는 그 이상의 비트 플래그의 조합 된 <ph id="ph1">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">경우 <ph id="ph1">`bindingAttr`</ph> 수행 하는 public 생성자가&amp;0; 이면 대/소문자 구분 검색 합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">바인딩, 인수 강제 변환 하는 개체 형식, 멤버 호출 및 검색 &lt;xref:System.Reflection.MemberInfo&gt;리플렉션을 통해.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">경우 <ph id="ph1">`binder`</ph> 가 null 이면 기본 바인더가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">이 인수 배열은 호출할 생성자의 매개 변수를 입력 및 번호, 순서 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">기본 생성자가 기본 방법 <ph id="ph1">`args`</ph> 빈 배열 이거나 null 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">강제 변환을 제어 하는 문화권별 정보 <ph id="ph1">`args`</ph> 에 대해 선언 된 공식적인 형식에는 <ph id="ph2">`typeName`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">경우 <ph id="ph1">`culture`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, &lt;xref:System.Globalization.CultureInfo&gt;현재 스레드가 사용 됩니다.&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">활성화에 참여할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">일반적으로 포함 된 배열을 단일 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원격 개체를 활성화 하는 데 필요한 URL을 지정 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">클라이언트 활성화는 이전 버전과 호환성을 위해 유지 되지만 새로운 개발에 권장 되지 않습니다는 레거시 기술입니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">분산된 응용 프로그램 Windows Communication Foundation을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">생성을 인증 하는 데 사용 되는 정보 <ph id="ph1">`typeName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">요청된 된 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">호출자에서 상속 되지 않는 개체에 대 한 활성화 특성을 제공할 수 없는 <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>찾을 수 없습니다 <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">일치 하는 공용 생성자가 없습니다 찾았습니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">호출자에 게가이 생성자를 호출 하 충분 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Gets the current application domain for the current <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">현재 응용 프로그램 도메인에 대 한 현재 가져옵니다 <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The current application domain.</source>
          <target state="translated">현재 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name and access mode.</source>
          <target state="translated">지정된 된 이름 및 액세스 모드를 사용 하는 동적 어셈블리를 정의합니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 대 한 액세스 모드입니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and access mode.</source>
          <target state="translated">지정한 이름 및 액세스 모드를 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes.</source>
          <target state="translated">지정한 이름, 액세스 모드 및 사용자 지정 특성을 갖는 동적 어셈블리를 정의합니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">예를 들어 같은 보안 특성 &lt;xref:System.Security.SecurityTransparentAttribute&gt;및 &lt;xref:System.Security.SecurityCriticalAttribute&gt;동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this restriction, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 제한에 대 한 자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는 오버 로드는 <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 대 한 액세스 모드입니다.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">어셈블리에 적용 될 특성의 열거형 목록 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 특성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and evidence.</source>
          <target state="translated">지정한 이름, 액세스 모드 및 증명 정보를 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 <ph id="ph1">`evidence`</ph> 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 를 정의 하는 경우</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt;through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑될는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 <ph id="ph1">`evidence`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 &lt;xref:System.Reflection.Assembly&gt;동적 &lt;xref:System.Reflection.Assembly&gt;정의 되 고 정책을 해결 된 것으로 표시 합니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">경우 동적 &lt;xref:System.Reflection.Assembly&gt;은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 위치는 &lt;xref:System.Reflection.Assembly&gt;저장 되었습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and storage directory.</source>
          <target state="translated">지정한 이름, 액세스 모드 및 저장소 디렉터리를 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 기본값으로 합니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</source>
          <target state="translated">지정한 이름, 액세스 모드 및 사용자 지정 특성을 사용 하 여 동적 어셈블리를 정의 하 고 보안 컨텍스트에 대해 지정된 된 소스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">예를 들어 같은 보안 특성 &lt;xref:System.Security.SecurityTransparentAttribute&gt;및 &lt;xref:System.Security.SecurityCriticalAttribute&gt;동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this restriction, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 제한에 대 한 자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 대 한 액세스 모드입니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">어셈블리에 적용 될 특성의 열거형 목록 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 특성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>The source of the security context.</source>
          <target state="translated">보안 컨텍스트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityContextSource</ph><ept id="p1">&lt;/code&gt;</ept> was not one of the enumeration values.</source>
          <target state="translated">값 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityContextSource</ph> <ept id="p1">&lt;/code&gt;</ept> 열거형 값 중 하나가 없습니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리 및 증명 정보를 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 <ph id="ph1">`evidence`</ph> 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 를 정의 하는 경우</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑될는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 <ph id="ph1">`evidence`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 &lt;xref:System.Reflection.Assembly&gt;동적 &lt;xref:System.Reflection.Assembly&gt;정의 되 고 정책을 해결 된 것으로 표시 합니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">경우 동적 &lt;xref:System.Reflection.Assembly&gt;은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 위치는 &lt;xref:System.Reflection.Assembly&gt;저장 되었습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 기본값으로 합니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and permission requests.</source>
          <target state="translated">지정한 이름, 액세스 모드 및 권한 요청을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 동적 어셈블리 저장 되 고 메모리에 다시 로드 하지 않는 한 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence as well as requested permissions, and supply an &lt;xref:System.Security.Policy.Evidence&gt; object.</source>
          <target state="translated">임시 어셈블리의 오버 로드를 사용 하는 디스크에 저장 되지 않은 대 한 권한 요청을 지정 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;요청 된 사용 권한 및 공급으로 증명 정보를 지정 하는 메서드는 &lt;xref:System.Security.Policy.Evidence&gt;개체입니다.&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload .</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리 및 동기화 옵션을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">예를 들어 같은 보안 특성 &lt;xref:System.Security.SecurityTransparentAttribute&gt;및 &lt;xref:System.Security.SecurityCriticalAttribute&gt;동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`isSynchronized`</ph> 은 <ph id="ph2">`true`</ph>, 결과 다음과 같은 방법을 &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;동기화 됩니다: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, 및 &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">동적 어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the current directory is used.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모듈, 형식 및 멤버에 동적 어셈블리의 만들기를 동기화 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">어셈블리에 적용 될 특성의 열거형 목록 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 특성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</source>
          <target state="translated">지정한 이름, 액세스 모드, 증명 정보 및 권한 요청을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 경우에 사용 <ph id="ph4">`evidence`</ph> 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 <ph id="ph1">`evidence`</ph> 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 를 정의 하는 경우</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑될는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 <ph id="ph1">`evidence`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 &lt;xref:System.Reflection.Assembly&gt;동적 &lt;xref:System.Reflection.Assembly&gt;정의 되 고 정책을 해결 된 것으로 표시 합니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">경우 동적 &lt;xref:System.Reflection.Assembly&gt;은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 위치는 &lt;xref:System.Reflection.Assembly&gt;저장 되었습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리 및 권한 요청을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 동적 어셈블리 저장 되 고 메모리에 다시 로드 하지 않는 한 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence as well as requested permissions, and supply an &lt;xref:System.Security.Policy.Evidence&gt; object.</source>
          <target state="translated">임시 어셈블리의 오버 로드를 사용 하는 디스크에 저장 되지 않은 대 한 권한 요청을 지정 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;요청 된 사용 권한 및 공급으로 증명 정보를 지정 하는 메서드는 &lt;xref:System.Security.Policy.Evidence&gt;개체입니다.&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하는 &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 기본값으로 합니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보 및 권한 요청을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 경우에 사용 <ph id="ph4">`evidence`</ph> 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 <ph id="ph1">`evidence`</ph> 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 를 정의 하는 경우</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑될는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 <ph id="ph1">`evidence`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 &lt;xref:System.Reflection.Assembly&gt;동적 &lt;xref:System.Reflection.Assembly&gt;정의 되 고 정책을 해결 된 것으로 표시 합니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">경우 동적 &lt;xref:System.Reflection.Assembly&gt;은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 위치는 &lt;xref:System.Reflection.Assembly&gt;저장 되었습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">자세한 내용은 참조는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 기본값으로 합니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보, 권한 요청 및 동기화 옵션을 사용 하 여 동적 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 경우에 사용 <ph id="ph4">`evidence`</ph> 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;에 <ph id="ph2">`refusedPermissions`</ph>.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">포함 하 여 &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;에 <ph id="ph1">`refusedPermissions`</ph> 매개 변수를 사용 하면 MSIL이 확인 됩니다.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply their evidence when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">완전히 신뢰할 수 있는 호출자만 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 정의할 때 해당 증명 정보를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑될는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">호출자를 부분적으로 신뢰할 수 있는 <ph id="ph1">`null`</ph> 에 대 한는 <ph id="ph2">`evidence`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 &lt;xref:System.Reflection.Assembly&gt;동적 &lt;xref:System.Reflection.Assembly&gt;정의 되 고 정책을 해결 된 것으로 표시 합니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">경우 동적 &lt;xref:System.Reflection.Assembly&gt;은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 위치는 &lt;xref:System.Reflection.Assembly&gt;저장 되었습니다.&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`isSynchronized`</ph> 은 <ph id="ph2">`true`</ph>, 결과 다음과 같은 방법을 &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;동기화 됩니다: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, 및 &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>If two of these methods are called on different threads, one will block until the other completes.</source>
          <target state="translated">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">동적 어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 기본값으로 합니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모듈, 형식 및 멤버에 동적 어셈블리의 만들기를 동기화 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</source>
          <target state="translated">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보, 권한 요청, 동기화 옵션 및 사용자 지정 특성을 갖는 동적 어셈블리를 정의합니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">예를 들어 같은 보안 특성 &lt;xref:System.Security.SecurityTransparentAttribute&gt;및 &lt;xref:System.Security.SecurityCriticalAttribute&gt;동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission requests specified for the <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> parameters are used only if the <ph id="ph4">`evidence`</ph> parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">에 대 한 지정 된 권한 요청은 <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, 및 <ph id="ph3">`refusedPermissions`</ph> 경우에 사용 되는 매개 변수는 <ph id="ph4">`evidence`</ph> 매개 변수도 제공한, 또는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you develop code that emits dynamic assemblies, we recommend that you include the &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; flag in the <ph id="ph2">`refusedPermissions`</ph> parameter.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동적 어셈블리를 내보내는 코드를 개발 하는 경우 포함 하는 것이 좋습니다는 &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;플래그는 <ph id="ph2">`refusedPermissions`</ph> 매개 변수.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</source>
          <target state="translated">이 플래그를 포함 하면 Microsoft MSIL (intermediate language)를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</source>
          <target state="translated">이 기술은 있는 파악 하기가 매우 어렵습니다 비안정형 코드의 의도 하지 않게 생성을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when it is used with code that demands full trust.</source>
          <target state="translated">이 방법의 제한 사항은은 &lt;xref:System.Security.SecurityException&gt;를 완전 신뢰를 요청 하는 코드를 함께 사용 하는 경우.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only fully trusted callers can supply evidence when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">완전히 신뢰할 수 있는 호출자만 동적 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 정의할 때 증명 정보를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime maps the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">런타임에 매핑되는 &lt;xref:System.Security.Policy.Evidence&gt;부여 된 권한을 확인 하기 위해 보안 정책을 통해.&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">호출자를 부분적으로 신뢰할 수 있는 <ph id="ph1">`null`</ph> 에 대 한는 <ph id="ph2">`evidence`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</source>
          <target state="translated">경우 <ph id="ph1">`evidence`</ph> 은 <ph id="ph2">`null`</ph>, 런타임에서 호출자의 어셈블리에서 정의 되 고 확인 된 것으로 고 정책을 표시 하는 동적 어셈블리에 (즉, 즉 현재 부여 및 거부 집합) 사용 권한 집합을 복사 합니다.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</source>
          <target state="translated">동적 어셈블리 후속 디스크에 저장 됩니다 부하는 동적 어셈블리를 저장할 위치와 연결 된 정책을 기반으로 하는 권한을 부여 받습니다.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`isSynchronized`</ph> 은 <ph id="ph2">`true`</ph>, 결과 다음과 같은 방법을 &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;동기화 됩니다: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, 및 &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는 오버 로드는 <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">동적 어셈블리의 고유 id입니다.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">동적 어셈블리 액세스 되는 모드입니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">동적 어셈블리를 저장할 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the current directory is used.</source>
          <target state="translated">경우 <ph id="ph1">`dir`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 현재 디렉터리가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>The evidence that is supplied for the dynamic assembly.</source>
          <target state="translated">동적 어셈블리에 제공 된 증거입니다.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">증명 정보는 변경 되지 않고 정책 결정에 사용할 증명 정보는 최종로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">필수 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">선택적 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">거부 된 권한 요청입니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모듈, 형식 및 멤버에 동적 어셈블리의 만들기를 동기화 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">어셈블리에 적용 될 특성의 열거형 목록 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 특성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">지정한 이름 및 기능을 사용 하는 동적 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept> 공백으로 시작 하거나 슬래시 또는 백슬래시를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Executes the code in another application domain that is identified by the specified delegate.</source>
          <target state="translated">지정한 대리자에서 식별 되는 다른 응용 프로그램 도메인에서 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`callBackDelegate`</ph> can specify a marshal-by-value, &lt;xref:System.MarshalByRefObject&gt;, or &lt;xref:System.ContextBoundObject&gt;.</source>
          <target state="translated"><ph id="ph1">`callBackDelegate`</ph>마샬링-by-값을 지정할 수 &lt;xref:System.MarshalByRefObject&gt;, 또는 &lt;xref:System.ContextBoundObject&gt;.&lt;/xref:System.ContextBoundObject&gt; &lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>A delegate that specifies a method to call.</source>
          <target state="translated">호출할 메서드를 지정 하는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBackDelegate&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBackDelegate&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Gets the domain manager that was provided by the host when the application domain was initialized.</source>
          <target state="translated">응용 프로그램 도메인이 초기화 될 때 호스트에서 제공한 도메인 관리자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>An unmanaged host of the common language runtime (CLR) can provide a domain manager.</source>
          <target state="translated">공용 언어 런타임 (CLR)의 관리 되지 않는 호스트는 도메인 관리자를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>The domain manager can participate in initializing the new application domain and supply other managers, such as a &lt;xref:System.Security.HostSecurityManager&gt;, that participate in the operations of the application domain.</source>
          <target state="translated">도메인 관리자는 새 응용 프로그램 도메인 초기화에 참여할 고와 같은 다른 관리자를 제공할 수는 &lt;xref:System.Security.HostSecurityManager&gt;, 응용 프로그램 도메인의 작업에 참여 하는.&lt;/xref:System.Security.HostSecurityManager&gt;</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>An object that represents the domain manager provided by the host when the application domain was initialized, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no domain manager was provided.</source>
          <target state="translated">응용 프로그램 도메인이 초기화 되었을 때 호스트에서 제공한 도메인 관리자를 나타내는 개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 없는 도메인 관리자가 제공 하는 경우.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Occurs when an <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is about to be unloaded.</source>
          <target state="translated">발생 경우는 <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 언로드 되려고 합니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.EventHandler&gt; delegate for this event can perform any termination activities before the application domain is unloaded.</source>
          <target state="translated">&lt;xref:System.EventHandler&gt;대리자이 이벤트는 응용 프로그램 도메인 로드 되기 전에 종료 동작을 수행할 수 있습니다.&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</source>
          <target state="translated">각 응용 프로그램 도메인에 로드 되지 않았을 때 처리를 수행 해야 하는이 이벤트에 대 한 이벤트 처리기를 등록 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>A shared event handler should not be used, because the &lt;xref:System.EventHandler&gt; delegate does not identify the domain that is being unloaded.</source>
          <target state="translated">공유 이벤트 처리기 해야 하지 때문에 사용할 수는 &lt;xref:System.EventHandler&gt;대리자 언로드되고 도메인을 식별 하지 않습니다.&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This event is never raised in the default application domain.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 기본 응용 프로그램 도메인에서이 이벤트는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not make assumptions about the thread the event is raised on.</source>
          <target state="translated">에 이벤트가 발생 하는 스레드에 대 한 가정을 만들지 마십시오.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event can be raised on a different thread than the one that called the &lt;xref:System.AppDomain.Unload%2A&gt; method.</source>
          <target state="translated">호출한 스레드가 아닌 다른 스레드에서 이벤트가 발생할 수 있습니다는 &lt;xref:System.AppDomain.Unload%2A&gt;메서드.&lt;/xref:System.AppDomain.Unload%2A&gt;</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">어셈블리 확인자에서 사용 하 여 동적으로 만든된 어셈블리를 조사 하는 디렉터리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the dynamic directory, assign a base directory path to the &lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt; property of the &lt;xref:System.AppDomainSetup&gt; object that will be used to create the new application domain.</source>
          <target state="translated">동적 디렉터리를 설정 하려면 기본 디렉터리 경로를 할당는 &lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;의 속성은 &lt;xref:System.AppDomainSetup&gt;새 응용 프로그램 도메인을 만드는 데 사용할 개체입니다.&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt; property, so the format of the base directory is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept>.</source>
          <target state="translated">속성에 할당 하는 기본 디렉터리 경로 단순 이름인에 할당 하는 문자열의 해시 코드 하위 디렉터리를 추가 하 여 수정 되는 &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;기본 디렉터리의 형식은 속성 <bpt id="p1">*</bpt>원래 경로<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>해시 코드<ept id="p2">*</ept>.&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dynamic directory is a subdirectory of this base directory.</source>
          <target state="translated">동적 디렉터리에는이 기본 디렉터리의 하위 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its simple name is the value of the &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt; property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph2">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">간단한 이름은의 값인는 &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;속성, 해당 형식은입니다 <bpt id="p1">*</bpt>원래 경로<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>해시 코드<ept id="p2">*</ept><ph id="ph2">\\</ph><bpt id="p3">*</bpt>응용 프로그램 이름<ept id="p3">*</ept>.&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>The directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">어셈블리 확인자에서 동적으로 생성된 된 어셈블리를 조사 사용 되는 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Security.Policy.Evidence"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with this application domain.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Security.Policy.Evidence"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 응용 프로그램 도메인에 연결 합니다.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>The evidence associated with this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인과 관련 된 증거입니다.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file.</source>
          <target state="translated">지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create the &lt;xref:System.AppDomain&gt; to load and execute, use the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">만들려는 &lt;xref:System.AppDomain&gt;로드 하 고 실행을 사용 하 여는 &lt;xref:System.AppDomain.CreateDomain%2A&gt;메서드.&lt;/xref:System.AppDomain.CreateDomain%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence.</source>
          <target state="translated">지정한 증명 정보를 사용 하 여 지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드는 새 프로세스 또는 응용 프로그램 도메인을 만들지 않습니다을 진입점 메서드 새 스레드에서 실행 되지 않습니다.&lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified arguments.</source>
          <target state="translated">지정된 된 인수를 사용 하 여 지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에 대 한 인수입니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환 되는 값입니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence and arguments.</source>
          <target state="translated">지정한 증거와 인수를 사용 하 여 지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">어셈블리에 대 한 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에 대 한 인수입니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> 해야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</source>
          <target state="translated">지정 된 인수, 해시 값 및 해시 알고리즘을 사용 하 여 지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에 대 한 인수입니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">계산된 된 해시 코드 값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">어셈블리 매니페스트에 사용 되는 해시 알고리즘을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환 되는 값입니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</source>
          <target state="translated">지정한 증명 정보, 인수, 해시 값 및 해시 알고리즘을 사용 하 여 지정된 된 파일에 포함 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 어셈블리 로드는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">사용 하 여 어셈블리를 실행할 수도 있습니다는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드를 사용 하 여 어셈블리를 로드 하는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">실행할 어셈블리가 포함 된 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">어셈블리에 대 한 제공 된 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에 대 한 인수입니다.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">계산된 된 해시 코드 값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">어셈블리 매니페스트에 사용 되는 해시 알고리즘을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> 해야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Executes an assembly given its display name.</source>
          <target state="translated">표시 이름이 지정 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create the &lt;xref:System.AppDomain&gt; to load and execute, use the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">만들려는 &lt;xref:System.AppDomain&gt;로드 하 고 실행을 사용 하 여는 &lt;xref:System.AppDomain.CreateDomain%2A&gt;메서드.&lt;/xref:System.AppDomain.CreateDomain%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Executes the assembly given an &lt;xref:System.Reflection.AssemblyName&gt;, using the specified arguments.</source>
          <target state="translated">지정 된 어셈블리를 실행 한 &lt;xref:System.Reflection.AssemblyName&gt;, 지정된 된 인수를 사용 하 여.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.AssemblyName&gt; object representing the name of the assembly.</source>
          <target state="translated">&lt;xref:System.Reflection.AssemblyName&gt;어셈블리의 이름을 나타내는 개체입니다.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환 되는 값입니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Executes an assembly given its display name, using the specified evidence.</source>
          <target state="translated">지정한 증명 정보를 사용 하 여 표시 이름이 지정 된 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 새 프로세스 또는 응용 프로그램 도메인을 만들지 않습니다을 진입점 메서드 새 스레드에서 실행 되지 않습니다.&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 사용 하는 경우는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 &lt;xref:System.Security.Policy.Evidence&gt;매개 변수, 증명 정보가 병합 됩니다.&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">증명 정보에는 인수로 제공 되는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Executes the assembly given its display name, using the specified arguments.</source>
          <target state="translated">지정된 된 인수를 사용 하 여 지정 된 표시 이름, 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환 되는 값입니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 공용 언어 런타임이 현재 로드 되어 있는 버전 보다 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>Executes the assembly given an &lt;xref:System.Reflection.AssemblyName&gt;, using the specified evidence and arguments.</source>
          <target state="translated">지정 된 어셈블리를 실행 한 &lt;xref:System.Reflection.AssemblyName&gt;, 지정한 증거와 인수를 사용 하 여.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 사용 하는 경우는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 &lt;xref:System.Security.Policy.Evidence&gt;매개 변수, 증명 정보가 병합 됩니다.&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">증명 정보에는 인수로 제공 되는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.AssemblyName&gt; object representing the name of the assembly.</source>
          <target state="translated">&lt;xref:System.Reflection.AssemblyName&gt;어셈블리의 이름을 나타내는 개체입니다.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> 해야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Executes the assembly given its display name, using the specified evidence and arguments.</source>
          <target state="translated">지정한 증거와 인수를 사용 하 여 지정 된 표시 이름, 어셈블리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;에 유사한 기능을 제공 하는 메서드는 &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 &lt;xref:System.Reflection.AssemblyName&gt;아닌 파일 위치에 따라.&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">따라서 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;여 어셈블리를 로드는 &lt;xref:System.Reflection.Assembly.Load%2A&gt;메서드 대신는 &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;메서드.&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 사용 하는 경우는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 &lt;xref:System.Security.Policy.Evidence&gt;매개 변수, 증명 정보가 병합 됩니다.&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">증명 정보에는 인수로 제공 되는 &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">프로세스를 시작할 때 전달할 명령줄 인수입니다.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">어셈블리의 진입점에서 반환한 값입니다.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 를 찾았지만 로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">로 지정 된 어셈블리 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> 해야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">지정된 된 어셈블리에 진입점을 없습니다.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</source>
          <target state="translated">런타임에서 응용 프로그램 도메인에서 예외 처리기에 대 한 호출 스택을 검색 하기 전에 관리 코드에서 예외가 throw 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is only a notification.</source>
          <target state="translated">이 이벤트는 알림만 합니다.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handling this event does not handle the exception or affect subsequent exception handling in any way.</source>
          <target state="translated">이 이벤트를 처리 해도 예외를 처리 하거나 후속 예외 어떤 식으로든에서 처리 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</source>
          <target state="translated">이벤트가 발생 하 고 이벤트 처리기가 호출 된 후에 공용 언어 런타임 (CLR) 예외에 대 한 처리기를 검색 하기 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT">
          <source>FirstChanceException provides the application domain with a first chance to examine any managed exception.</source>
          <target state="translated">FirstChanceException 모든 관리 되는 예외를 검사 하는 첫 번째 기회를 사용 하 여 응용 프로그램 도메인을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event can be handled per application domain.</source>
          <target state="translated">응용 프로그램 도메인 별로 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</source>
          <target state="translated">스레드를 통과 하면 여러 응용 프로그램 도메인을 통해 호출을 실행 하는 동안 CLR에서 해당 응용 프로그램 도메인에 일치 하는 예외 처리기에 대 한 검색을 시작 하기 전에 이벤트 처리기를 등록 된 각 응용 프로그램 도메인에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the event has been handled, a search is made for a matching exception handler in that application domain.</source>
          <target state="translated">이벤트 처리 된 후 해당 응용 프로그램 도메인에 일치 하는 예외 처리기에 대 한 검색이 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>If none is found, the event is raised in the next application domain.</source>
          <target state="translated">검색 된 항목이 없는 경우 다음 응용 프로그램 도메인에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must handle all exceptions that occur in the event handler for the FirstChanceException event.</source>
          <target state="translated">FirstChanceException 이벤트에 대 한 처리기를 이벤트 발생 하는 모든 예외를 처리 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, FirstChanceException is raised recursively.</source>
          <target state="translated">그렇지 않으면 FirstChanceException이 재귀적으로 발생된 합니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This could result in a stack overflow and termination of the application.</source>
          <target state="translated">이 스택 오버플로 및 응용 프로그램이 종료 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</source>
          <target state="translated">메모리 부족 또는 스택 오버플로와 같은 인프라 관련 예외 예외 알림을 처리 되는 동안 가상 컴퓨터에 영향을 주지 않도록 하기 위해 제약이 있는 실행 영역 (Cer)으로이 이벤트에 대 한 이벤트 처리기를 구현 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt; attribute.</source>
          <target state="translated">이벤트 처리기가 보안에 중요 한 및 하지 않는 한 손상 액세스 위반과 같이 프로세스 상태를 나타내는 예외에 대 한이 이벤트는 &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;특성.&lt;/xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime suspends thread aborts while this notification event is being handled.</source>
          <target state="translated">스레드 중단 알림 이벤트가이 처리 되는 동안 일시 중단 하는 공용 언어 런타임.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Gets the friendly name of this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The friendly name of the default application domain is the file name of the process executable.</source>
          <target state="translated">기본 응용 프로그램 도메인의 이름을 프로세스 실행 파일의 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the executable used to start the process is <ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>, the friendly name of the default application domain is <ph id="ph2">`"MyAssembly.exe"`</ph>.</source>
          <target state="translated">예를 들어 파일을 실행 하는 프로세스를 시작 하는 데는 <ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>, 기본 응용 프로그램 도메인의 대화명은 <ph id="ph2">`"MyAssembly.exe"`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>The friendly name of this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Gets the assemblies that have been loaded into the execution context of this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인의 실행 컨텍스트에 로드 된 어셈블리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>An array of assemblies in this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인에서 어셈블리의 배열입니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Gets the current thread identifier.</source>
          <target state="translated">현재 스레드 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt; property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</source>
          <target state="translated">사용 하 여는 &lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt;속성을.NET Framework이 지 원하는 파이버 (즉, 경량 스레드) 환경에서 호스트 된 경우에 안정적입니다.&lt;/xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer that is the identifier of the current thread.</source>
          <target state="translated">현재 스레드의 식별자가 32 비트 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Gets the value stored in the current application domain for the specified name.</source>
          <target state="translated">지정 된 이름에 대 한 현재 응용 프로그램 도메인에 저장 된 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">이 메서드를 사용 하 여 &lt;xref:System.AppDomain&gt;안내 하십시오.&lt;/xref:System.AppDomain&gt; 이 인스턴스의 속성을 설명 하는 이름-데이터 쌍의 내부 캐시에 있는 항목의 값을 검색 하려면</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the comparison of <ph id="ph1">`name`</ph> with the name of key-value pairs is case-sensitive.</source>
          <target state="translated">비교 <ph id="ph1">`name`</ph> 키-값 쌍의 이름으로는 대/소문자 구분 합니다.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can inspect their values with the GetData method, or the equivalent &lt;xref:System.AppDomainSetup&gt; properties.</source>
          <target state="translated">GetData 메서드 또는 해당 하는 해당 값을 검사할 수 &lt;xref:System.AppDomainSetup&gt;속성.&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can insert or modify your own user defined name-data pairs with the &lt;xref:System.AppDomain.SetData%2A&gt; method and inspect their values with the GetData method.</source>
          <target state="translated">삽입 하거나 사용자 정의 이름-데이터 쌍으로 수정할 수는 &lt;xref:System.AppDomain.SetData%2A&gt;메서드 GetData 방법으로 해당 값을 검사할 및.&lt;/xref:System.AppDomain.SetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes the <ph id="ph1">`name`</ph> of each predefined system entry and its corresponding &lt;xref:System.AppDomainSetup&gt; property.</source>
          <target state="translated">다음 표에서 <ph id="ph1">`name`</ph> 미리 정의 된 각 시스템 항목 및 해당 &lt;xref:System.AppDomainSetup&gt;속성.&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Value of 'name'|Property|   |---------------------|--------------|   |"APPBASE"|&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;|   |"APP_CONFIG_FILE"|&lt;xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt;|   |"APP_LAUNCH_URL"|(no property)</source>
          <target state="translated">| 값 'n'의 | 속성 |   |---------------------|--------------|   |" APPBASE "| &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;|   |" APP_CONFIG_FILE "| &lt;xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt;|   |" APP_LAUNCH_URL "| (속성 없음)&lt;/xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT">
          <source>"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</source>
          <target state="translated">"APP_LAUNCH_URL"는 리디렉션 하기 전에 사용자가 원래 요청한 URL을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is available only when the application has been launched with a browser such as Internet Explorer.</source>
          <target state="translated">Internet Explorer와 같은 브라우저 응용 프로그램 시작 되었습니다 하는 경우에 사용할 수 있는 유용 합니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all browsers provide this value.|   |"APP_NAME"|&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;|   |"BINPATH_PROBE_ONLY"|&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;|   |"CACHE_BASE"|&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;|   |"CODE_DOWNLOAD_DISABLED"|&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;|   |"DEV_PATH"|(no property)|   |"DISALLOW_APP"|&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;|   |"DISALLOW_APP_BASE_PROBING"|&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;|   |"DISALLOW_APP_REDIRECTS"|&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;|   |"DYNAMIC_BASE"|&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;|   |"FORCE_CACHE_INSTALL"|&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;|   |"LICENSE_FILE", or an application-specific string|&lt;xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;|   |"LOADER_OPTIMIZATION"|&lt;xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;|   |"LOCATION_URI"|(no property)|   |"PRIVATE_BINPATH"|&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;|   |"REGEX_DEFAULT_MATCH_TIMEOUT"|&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;</source>
          <target state="translated">이 값을 제공 하지 않는 브라우저. |   |" APP_NAME "| &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;|   |" BINPATH_PROBE_ONLY "| &lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;|   |" CACHE_BASE "| &lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;|   |" CODE_DOWNLOAD_DISABLED "| &lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;|   |" DEV_PATH "| (속성 없음) |   |" DISALLOW_APP "| &lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;|   |" DISALLOW_APP_BASE_PROBING "| &lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;|   |" DISALLOW_APP_REDIRECTS "| &lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;|   |" DYNAMIC_BASE "| &lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;|   |" FORCE_CACHE_INSTALL "| &lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;|   |" LICENSE_FILE"또는 응용 프로그램별 문자열 | &lt;xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;|   |" LOADER_OPTIMIZATION "| &lt;xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;|   |" LOCATION_URI "| (속성 없음) |   |" PRIVATE_BINPATH "| &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;|   |" REGEX_DEFAULT_MATCH_TIMEOUT "| &lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;&lt;/xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the &lt;xref:System.AppDomain.SetData%2A&gt; method.|   |"SHADOW_COPY_DIRS"|&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;|</source>
          <target state="translated">"REGEX_DEFAULT_MATCH_TIMEOUT" 시스템 항목 아니며 &lt;xref:System.AppDomain.SetData%2A&gt;메서드를 호출 하 여 해당 값을 설정할 수 있습니다. |   |" SHADOW_COPY_DIRS "| &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;|&lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.SetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>The name of a predefined application domain property, or the name of an application domain property you have defined.</source>
          <target state="translated">미리 정의 된 응용 프로그램 도메인 속성의 이름 또는 응용 프로그램 도메인 속성의 이름을 정의 했습니다.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> property, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the property does not exist.</source>
          <target state="translated">값은 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept> 속성 또는 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 속성이 존재 하지 않는 경우.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Gets the type of the current instance.</source>
          <target state="translated">현재 인스턴스의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>The type of the current instance.</source>
          <target state="translated">현재 인스턴스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Gets an integer that uniquely identifies the application domain within the process.</source>
          <target state="translated">프로세스 내에서 응용 프로그램 도메인을 고유 하 게 식별 하는 정수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>An integer that identifies the application domain.</source>
          <target state="translated">응용 프로그램 도메인을 식별 하는 정수입니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>Gives the <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> an infinite lifetime by preventing a lease from being created.</source>
          <target state="translated">제공 된 <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 임대가 만들어지는 것을 방지 하 여 무한 수명을 합니다.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Always <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Always <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</source>
          <target state="translated">지정한 호환성 스위치가 설정 되어 있는지 여부 그리고 있다면 호환성 스위치가 설정 되어 있는지 여부를 나타내는 nullable 부울 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>The compatibility switch to test.</source>
          <target state="translated">테스트할 호환성 스위치입니다.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> is set.</source>
          <target state="translated">Null 참조 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual basic에서) 호환성 스위치가 설정; 그렇지 않으면 부울 값을 나타내는 지정 된 호환성 스위치가 있는 여부 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the application domain is the default application domain for the process.</source>
          <target state="translated">응용 프로그램 도메인의 프로세스에 대 한 기본 응용 프로그램 도메인 인지 여부를 나타내는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every managed process has a default application domain.</source>
          <target state="translated">모든 관리 되는 프로세스에 기본 응용 프로그램 도메인을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Execution begins in the default domain.</source>
          <target state="translated">기본 도메인에서 실행을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object represents the default application domain for the process; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>하는 경우 현재 <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체가 프로세스;에 대 한 기본 응용 프로그램 도메인을 나타내면 그렇지 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</source>
          <target state="translated">이 응용 프로그램 도메인의 언로드 여부 및 공용 언어 런타임에 의해 포함 된 개체를 종료 하 고 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</source>
          <target state="translated">개체에 대 한 종료 메서드는 개체가 가비지 수집 되기 전에 필요한 정리 작업을 수행할 수 있습니다를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT">
          <source>After finalization, the object is accessible but in an invalid state and therefore unusable.</source>
          <target state="translated">종료 된 후 개체는 액세스할 수 있지만 잘못 된 상태에 있고 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Eventually, garbage collection completes and reclaims the object.</source>
          <target state="translated">결국 가비지 수집을 완료 하 고 개체를 회수 합니다.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</source>
          <target state="translated">개체의 종료 메서드는 다음과 같은 상황 중 하나에서: 가비지 수집 중 공용 언어 런타임의 종료 될 때 또는 개체가 포함 된 응용 프로그램 도메인이 언로드될 때.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The IsFinalizingForUnload method returns <ph id="ph1">`true`</ph> only in the last case; it does not return <ph id="ph2">`true`</ph> if finalization results from routine garbage collection or from CLR shutdown.</source>
          <target state="translated">IsFinalizingForUnload 메서드가 반환 <ph id="ph1">`true`</ph> ; 지난 경우에만 반환 하지 않는 <ph id="ph2">`true`</ph> 종료 CLR 종료 또는 일상적인 가비지 수집에서 발생 하는 경우.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To determine whether finalization is due to CLR shutdown, use the &lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; CLR 종료로 인해 종료 되는지 확인 하려면는 &lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT">
          <source>It returns <ph id="ph1">`true`</ph> if finalization is due to an application domain being unloaded or to the CLR shutting down.</source>
          <target state="translated">반환 <ph id="ph1">`true`</ph> 또는 종료 하 고 CLR 응용 프로그램 도메인이 언로드되고으로 인해 종료 되는 경우.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT">
          <source>While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</source>
          <target state="translated">언로드 작업이 수행 하는 동안 종료 메서드에서 실행을 하는 동안 정적 필드에서 참조 하 고 종료 메서드를 포함 하는 다른 개체에 액세스 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot reliably do so because the accessed object might already have been finalized.</source>
          <target state="translated">그러나 안정적 수 없습니다 액세스 한 개체가 종료 이미 수 있으므로 합니다.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An exception to this rule is the &lt;xref:System.Console&gt; class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;이 규칙의 예외는 &lt;xref:System.Console&gt;스트림 개체를 참조 하는 정적 필드가 포함 되어 있지만 도메인 언로드하거나 시스템 종료 하는 동안에 시스템 콘솔에 항상 작성할 수 있도록 특별히 구현 되는 클래스입니다.&lt;/xref:System.Console&gt;</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</source>
          <target state="translated">개체의 종료 메서드에 개체를 포함 하는 응용 프로그램 도메인이 언로드되고 있는지 여부를 확인 하려면이 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</source>
          <target state="translated">해당 되는 경우 종료 메서드를 포함 하는 정적 필드에서 참조 하는 모든 개체 안정적으로 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 응용 프로그램 도메인이 언로드 및 공용 언어 런타임 프로세스 시작 여부 종료자를 호출 합니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</source>
          <target state="translated">현재 어플리케이션 도메인에 로드 된 어셈블리가 완전 신뢰로 실행 되는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method always returns <ph id="ph1">`true`</ph> for the default application domain of an application that runs on the desktop.</source>
          <target state="translated">이 메서드는 항상 반환 <ph id="ph1">`true`</ph> 데스크톱에서 실행 하는 응용 프로그램의 기본 응용 프로그램 도메인에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT">
          <source>It returns <ph id="ph1">`false`</ph> for a sandboxed application domain that was created by using the <bpt id="p1">[</bpt>AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName<ph id="ph2">\[</ph><ph id="ph3">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</source>
          <target state="translated">반환 <ph id="ph1">`false`</ph> 를 사용 하 여 만든 샌드 박싱된 응용 프로그램 도메인에 대 한는 <bpt id="p1">[</bpt>AppDomain.CreateDomain (String, 증명 정보, AppDomainSetup, PermissionSet, StrongName<ph id="ph2">\[</ph><ph id="ph3">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> 응용 프로그램 도메인에서 부여 된 권한을 완전 신뢰와 동일 하지 않으면 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>완전 신뢰로; 현재 응용 프로그램 도메인에 로드 된 어셈블리를 실행 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</source>
          <target state="translated">현재 어플리케이션 도메인에는 응용 프로그램 도메인에 로드 된 모든 어셈블리에 부여 된 사용 권한 집합에 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current application domain has a homogenous set of permissions; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>현재 응용 프로그램 도메인에는 형식이 같은 권한 집합이 있습니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;내보낸된 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 포함 된 공용 개체 파일 (COFF 형식) 기반 이미지가 포함 된&lt;/xref:System.Reflection.Assembly&gt; 로드</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>,이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 즉 COFF 기반 이미지를 생성된 된 어셈블리가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its &lt;xref:System.Reflection.AssemblyName&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;해당 &lt;xref:System.Reflection.AssemblyName&gt;.&lt;/xref:System.Reflection.AssemblyName&gt; 지정&lt;/xref:System.Reflection.Assembly&gt; 로드</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</source>
          <target state="translated">이미 로드 되어 요청된 된 어셈블리의 버전 다른 버전이 요청 된 경우에이 메서드는 로드 된 어셈블리를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supplying a partial assembly name for <ph id="ph1">`assemblyRef`</ph> is not recommended.</source>
          <target state="translated">에 대 한 부분 어셈블리 이름을 제공 <ph id="ph1">`assemblyRef`</ph> 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT">
          <source>(A partial name omits one or more of culture, version, or public key token.</source>
          <target state="translated">(부분 이름은 하나 이상의 culture, 버전, 사용 또는 공개 키 토큰을 생략 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT">
          <source>For overloads that take a string instead of an &lt;xref:System.Reflection.AssemblyName&gt; object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</source>
          <target state="translated">대신 문자열을 허용 하는 오버 로드에 대 한는 &lt;xref:System.Reflection.AssemblyName&gt;개체를 "MyAssembly, Version =&amp;1;.0.0.0"은 이름의 일부의 예 및 "MyAssembly, Version =&amp;1;.0.0.0, Culture = neutral, PublicKeyToken&amp;18;ab3442da84b47 ="은 예 전체 이름입니다.)&lt;/xref:System.Reflection.AssemblyName&gt; 부분 이름을 사용 하면 성능에 부정적인 영향을 있습니다.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (&lt;xref:System.AppDomain.BaseDirectory%2A&gt; or &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;).</source>
          <target state="translated">또한 부분 어셈블리 이름을 로드할 수 어셈블리를 전역 어셈블리 캐시에서 응용 프로그램 기본 디렉터리에 있는 어셈블리의 정확한 복사본 필요한 경우에 (&lt;xref:System.AppDomain.BaseDirectory%2A&gt; 또는 &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;).&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.BaseDirectory%2A&gt;</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current &lt;xref:System.AppDomain&gt; object represents application domain <ph id="ph1">`A`</ph>, and the &lt;xref:System.AppDomain.Load%2A&gt; method is called from application domain <ph id="ph2">`B`</ph>, the assembly is loaded into both application domains.</source>
          <target state="translated">하는 경우 현재 &lt;xref:System.AppDomain&gt;개체가 응용 프로그램 도메인을 나타내면 <ph id="ph1">`A`</ph>, 및 &lt;xref:System.AppDomain.Load%2A&gt;메서드는 응용 프로그램 도메인에서 <ph id="ph2">`B`</ph>, 어셈블리 두 응용 프로그램 도메인에 로드 됩니다.&lt;/xref:System.AppDomain.Load%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code loads <ph id="ph1">`MyAssembly`</ph> into the new application domain <ph id="ph2">`ChildDomain`</ph> and also into the application domain where the code executes:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.AppDomain.Load#1<ept id="p2">](~/add/codesnippet/visualbasic/m-system.appdomain.load-_2_1.vb)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.AppDomain.Load#1<ept id="p4">](~/add/codesnippet/cpp/m-system.appdomain.load-_2_1.cpp)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.AppDomain.Load#1<ept id="p6">](~/add/codesnippet/csharp/m-system.appdomain.load-_2_1.cs)</ept><ept id="p5">]</ept>       The assembly is loaded into both domains because &lt;xref:System.Reflection.Assembly&gt; does not derive from &lt;xref:System.MarshalByRefObject&gt;, and therefore the return value of the &lt;xref:System.AppDomain.Load%2A&gt; method cannot be marshaled.</source>
          <target state="translated">예를 들어 다음 코드 로드 <ph id="ph1">`MyAssembly`</ph> 새 응용 프로그램 도메인 <ph id="ph2">`ChildDomain`</ph> 및 코드를 실행 하는 응용 프로그램 도메인에도: <bpt id="p1">[!code-vb</bpt> <bpt id="p2">[</bpt>System.AppDomain.Load#1<ept id="p2">](~/add/codesnippet/visualbasic/m-system.appdomain.load-_2_1.vb)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.AppDomain.Load#1<ept id="p4">](~/add/codesnippet/cpp/m-system.appdomain.load-_2_1.cpp)</ept><ept id="p3">]</ept><bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.AppDomain.Load#1<ept id="p6">](~/add/codesnippet/csharp/m-system.appdomain.load-_2_1.cs)</ept> <ept id="p5">]</ept> 어셈블리가 로드 되는 두 도메인에 있으므로 &lt;xref:System.Reflection.Assembly&gt;에서 파생 되지 않은 &lt;xref:System.MarshalByRefObject&gt;, 따라서의 반환 값과는 &lt;xref:System.AppDomain.Load%2A&gt;메서드를 마샬링할 수 없습니다.&lt;/xref:System.AppDomain.Load%2A&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;    </target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the common language runtime tries to load the assembly into the calling application domain.</source>
          <target state="translated">대신, 공용 언어 런타임 어셈블리 호출 응용 프로그램 도메인에 로드 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</source>
          <target state="translated">두 응용 프로그램 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If both the &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt; property and the &lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt; property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the &lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt; property).</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 둘 다는 &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;속성 및 &lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt;속성이 설정 되어, 어셈블리를 로드할 첫 번째 시도 표시 이름을 사용 하 여 (에서 반환 된 버전, 문화권 및 등을 포함 하는 &lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;속성).&lt;/xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt; &lt;/xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt; &lt;/xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file is not found, the &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt; property is used to search for the assembly.</source>
          <target state="translated">파일이 없는 경우는 &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;속성 어셈블리를 검색 하는 데 사용 됩니다.&lt;/xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the assembly is found using &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;, the display name is matched against the assembly.</source>
          <target state="translated">사용 하는 어셈블리가 있는 경우 &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;, 표시 이름은 어셈블리와 일치 합니다.&lt;/xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the match fails, a &lt;xref:System.IO.FileLoadException&gt; is thrown.</source>
          <target state="translated">일치가 실패 하면는 &lt;xref:System.IO.FileLoadException&gt;throw 됩니다.&lt;/xref:System.IO.FileLoadException&gt;</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">로드할 어셈블리를 설명 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its display name.</source>
          <target state="translated">로드는 &lt;xref:System.Reflection.Assembly&gt;표시 이름이 지정 됩니다.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>은<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;내보낸된 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 포함 된 공용 개체 파일 (COFF 형식) 기반 이미지가 포함 된&lt;/xref:System.Reflection.Assembly&gt; 로드</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>The raw bytes representing the symbols for the &lt;xref:System.Reflection.Assembly&gt; are also loaded.</source>
          <target state="translated">에 대 한 기호를 나타내는 원시 바이트는 &lt;xref:System.Reflection.Assembly&gt;도 로드 됩니다.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>,이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 즉 COFF 기반 이미지를 생성된 된 어셈블리가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 어셈블리에 대 한 기호를 나타내는 원시 바이트가 포함 된 합니다.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its &lt;xref:System.Reflection.AssemblyName&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;해당 &lt;xref:System.Reflection.AssemblyName&gt;.&lt;/xref:System.Reflection.AssemblyName&gt; 지정&lt;/xref:System.Reflection.Assembly&gt; 로드</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">로드할 어셈블리를 설명 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>은<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its display name.</source>
          <target state="translated">로드는 &lt;xref:System.Reflection.Assembly&gt;표시 이름이 지정 됩니다.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>은<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>´ ù.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;내보낸된 &lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt; 포함 된 공용 개체 파일 (COFF 형식) 기반 이미지가 포함 된&lt;/xref:System.Reflection.Assembly&gt; 로드</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>The raw bytes representing the symbols for the &lt;xref:System.Reflection.Assembly&gt; are also loaded.</source>
          <target state="translated">에 대 한 기호를 나타내는 원시 바이트는 &lt;xref:System.Reflection.Assembly&gt;도 로드 됩니다.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>,이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt; 같은 메서드를 사용 하 여 다른 응용 프로그램 도메인에 어셈블리를 로드 하려면</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;메서드 오버 로드.&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 즉 COFF 기반 이미지를 생성된 된 어셈블리가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 어셈블리에 대 한 기호를 나타내는 원시 바이트가 포함 된 합니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">어셈블리 로드에 대 한 증명 정보입니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">로드 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>유효한 어셈블리가 않습니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-또는-버전 2.0 이상의 공용 언어 런타임이 현재 로드 되어 및 <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> 이후 버전으로 컴파일 되었습니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">레거시 CAS 정책을 설정 하지 않으면 <ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> 해야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</source>
          <target state="translated">현재 프로세스의 CPU 및 메모리 모니터링 응용 프로그램 도메인 사용 되는지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Once monitoring is enabled for a process, it cannot be disabled.</source>
          <target state="translated">모니터링 프로세스에 대 한 활성화 되 면 해제할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`static`</ph> property (<ph id="ph2">`Shared`</ph> property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</source>
          <target state="translated">이 <ph id="ph1">`static`</ph> 속성 (<ph id="ph2">`Shared`</ph> Visual Basic에서 속성)의 CPU 및 메모리 모니터링 프로세스의 모든 응용 프로그램 도메인을 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to set this property to <ph id="ph1">`false`</ph>, a &lt;xref:System.ArgumentException&gt; exception is thrown, even if the current value of the property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">이 속성을 설정 하려고 하면 <ph id="ph1">`false`</ph>, &lt;xref:System.ArgumentException&gt;예외가 throw 되는 속성의 현재 값은 경우에 <ph id="ph2">`false`</ph>.&lt;/xref:System.ArgumentException&gt;</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once monitoring is enabled, you can use the &lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;, and &lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt; instance properties to monitor CPU and memory use of individual application domains.</source>
          <target state="translated">모니터링이 활성화 되 면 사용할 수 있습니다는 &lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;, 및 &lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt;인스턴스 개별 응용 프로그램 도메인의 CPU 및 메모리 사용을 모니터링 하는 속성.&lt;/xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt; &lt;/xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt; &lt;/xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt; &lt;/xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if monitoring is enabled; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모니터링을 사용 하면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>The current process attempted to assign the value <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to this property.</source>
          <target state="translated">현재 프로세스에 값을 할당 하려고 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</source>
          <target state="translated">현재 응용 프로그램 도메인에서 참조 하도록 알려진 마지막 컬렉션 후에 유지 하는 바이트 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The statistics are updated with each garbage collection.</source>
          <target state="translated">통계는 각 가비지 컬렉션으로 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</source>
          <target state="translated">그러나을 정확 하 게 한 전체 차단 컬렉션 후에 보장 됩니다. 즉, 모든 세대를 포함 하 고 수집 하는 동안 응용 프로그램을 중지 하는 컬렉션에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.GC.Collect?displayProperty=fullName&gt; method overload performs a full, blocking collection.</source>
          <target state="translated">예를 들어는 &lt;xref:System.GC.Collect?displayProperty=fullName&gt;전체 차단 수집을 수행 하는 메서드 오버 로드.&lt;/xref:System.GC.Collect?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Concurrent collection occurs in the background and does not block the application.)</source>
          <target state="translated">(동시 컬렉션은 백그라운드에서 실행 및 응용 프로그램을 차단 하지 않습니다.)</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>The number of surviving bytes.</source>
          <target state="translated">유지 되는 바이트의 수입니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> Visual basic에서) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;속성이 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Gets the total bytes that survived from the last collection for all application domains in the process.</source>
          <target state="translated">프로세스의 모든 응용 프로그램 도메인에 대 한 마지막 컬렉션에서 유지 된 총 바이트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</source>
          <target state="translated">힙의 관리 되는 바이트 수가 현재 보유 하에이 숫자 나타냅니다 전체 차단 수집 후 합니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should be close to the number reported by the &lt;xref:System.GC.GetTotalMemory%2A&gt; method.</source>
          <target state="translated">보고 된 수에 가까운 것은 &lt;xref:System.GC.GetTotalMemory%2A&gt;메서드.&lt;/xref:System.GC.GetTotalMemory%2A&gt;</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</source>
          <target state="translated">임시 컬렉션 후이 수 바이트 수가 현재 저장 나타냅니다 라이브 임시 세대에서입니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>The total number of surviving bytes for the process.</source>
          <target state="translated">프로세스에 대해 유지 되는 바이트의 총 수입니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> Visual basic에서) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;속성이 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</source>
          <target state="translated">수집 된 메모리를 제외 하지 않고 만들어진 후 응용 프로그램 도메인에서 실행 된 모든 메모리 할당의 바이트의 총 크기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>The total size of all memory allocations.</source>
          <target state="translated">모든 메모리 할당의 총 크기입니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> Visual basic에서) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;속성이 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</source>
          <target state="translated">프로세스가 시작 된 후 현재 응용 프로그램 도메인에서 실행 되는 동안 모든 스레드에서 사용 된 총 프로세서 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT">
          <source>The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</source>
          <target state="translated">각 스레드는 프로세스에서 해당 응용 프로그램 도메인에서 실행에 소요 된 시간을 포함 하는 응용 프로그램 도메인에 대 한 보고 되는 총 시간입니다.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</source>
          <target state="translated">비관리 코드를 호출 하는 스레드는 응용 프로그램 도메인에 여전히 연결 되며 비관리 코드 호출 여러분이 응용 프로그램 도메인에 대 한 보고를 실행 하는 데 프로세서 시간이 걸리는 합니다.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a thread is blocked or sleeping, it does not consume processor time.</source>
          <target state="translated">스레드가 차단 또는 중지는 사용 하지 않습니다 프로세서 시간 면 합니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>Total processor time for the current application domain.</source>
          <target state="translated">현재 어플리케이션 도메인에 대 한 총 프로세서 시간입니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> Visual basic에서) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;속성이 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Gets the permission set of a sandboxed application domain.</source>
          <target state="translated">샌드 박싱된 응용 프로그램 도메인의 권한 집합을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sandboxed application domains that were created by using the <bpt id="p1">[</bpt>AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</source>
          <target state="translated">사용 하 여 만든 샌드 박싱된 응용 프로그램 도메인에서 <bpt id="p1">[</bpt>AppDomain.CreateDomain (문자열, 증명 정보, AppDomainSetup, PermissionSet, StrongName<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> 메서드 오버 로드는 형식이 같은 권한 집합이 수 있으며 응용 프로그램 도메인에 로드 되는 부분적으로 신뢰할 수 있는 모든 어셈블리에 동일한 사용 권한 집합이 부여 됩니다 즉, 합니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT">
          <source>A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</source>
          <target state="translated">샌드 박싱된 응용 프로그램 도메인에는 필요에 따라이 사용 권한을 설정 하 고 대신 완전 신뢰로 실행에서 제외 되는 강력한 이름의 어셈블리의 목록을 있습니다.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>The permission set of the sandboxed application domain.</source>
          <target state="translated">샌드 박싱된 응용 프로그램 도메인의 권한 집합입니다.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Occurs when the default application domain's parent process exits.</source>
          <target state="translated">기본 응용 프로그램 도메인의 부모 프로세스가 종료 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.EventHandler&gt; for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</source>
          <target state="translated">&lt;xref:System.EventHandler&gt;이 이벤트는 파일 닫기 등의 종료 작업을 수행할 수에 대 한 프로세스가 종료 되기 전에 저장소를 등의 해제.&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</source>
          <target state="translated">.NET Framework 버전 2.0부터,이 이벤트는 이벤트 처리기를 등록 하는 각 응용 프로그램 도메인에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The total execution time of all ProcessExit event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 모든 종료자의 총 실행 시간 프로세스가 종료 될 때 제한 된 것 처럼 모든 ProcessExit 이벤트 처리기의 총 실행 시간 제한 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is two seconds.</source>
          <target state="translated">기본값은&amp;2; 초입니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT">
          <source>An unmanaged host can change this execution time by calling the <bpt id="p1">[</bpt>ICLRPolicyManager::SetTimeout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> method with the <bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept> enumeration value.</source>
          <target state="translated">관리 되지 않는 호스트를 호출 하 여이 실행 시간을 변경할 수는 <bpt id="p1">[</bpt>iclrpolicymanager:: Settimeout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 메서드는 <bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept> 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 이벤트는 기본 응용 프로그램 도메인 에서만 발생 하 고 기본 응용 프로그램 도메인에는 이벤트 처리기가 등록 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 &lt;xref:System.Security.SecurityException&gt;throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of an assembly fails in the reflection-only context.</source>
          <target state="translated">리플렉션 전용 컨텍스트에서 어셈블리 확인이 실패 하면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the reflection-only context, dependencies are not resolved automatically.</source>
          <target state="translated">리플렉션 전용 컨텍스트에 종속성 자동으로 확인 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>They must be preloaded or returned by the handler for this event.</source>
          <target state="translated">미리 로드 되거나이 이벤트 처리기에 의해 반환 될 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</source>
          <target state="translated">이 이벤트는 어셈블리를 리플렉션 전용 컨텍스트에 로드 되지 않는 종속성에 있을 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The missing dependency is specified by the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">누락 된 종속성으로 지정 된 &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event must return an assembly that satisfies the dependency.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;이 이벤트는 종속성을 충족 하는 어셈블리를 반환 해야 합니다.&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that is returned must be loaded into the reflection-only context.</source>
          <target state="translated">반환 된 어셈블리를 리플렉션 전용 컨텍스트에 로드 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the &lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt; method).</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 리플렉션 전용 컨텍스트에 로드 되는 어셈블리의 종속성이 누락에 대해서만 발생 합니다 (사용 하 여 예를 들어는 &lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt;메서드).&lt;/xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not raised if the assembly that you are loading cannot be found.</source>
          <target state="translated">로드 하는 어셈블리를 찾을 수 없는 경우에 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;속성을 확인할 수 없는 어셈블리 로드를 요청한 어셈블리를 반환 합니다.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</source>
          <target state="translated">요청한 어셈블리의 id를 알면 둘 이상의 버전을 사용할 수 있는 경우 올바른 버전의 종속성을 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this event, the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property returns the assembly name before policy is applied.</source>
          <target state="translated">이 이벤트는 &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;속성 정책 적용 하기 전에 어셈블리 이름을 반환 합니다.&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</source>
          <target state="translated">응용 프로그램 도메인의 리플렉션 전용 컨텍스트에 로드 된 어셈블리를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the assemblies that have been loaded into the reflection-only context.</source>
          <target state="translated">이 메서드는 리플렉션 전용 컨텍스트에 로드 된 어셈블리를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the assemblies that have been loaded for execution, use the &lt;xref:System.AppDomain.GetAssemblies%2A&gt; method.</source>
          <target state="translated">실행을 위해 로드 된 어셈블리를 가져오려면는 &lt;xref:System.AppDomain.GetAssemblies%2A&gt;메서드.&lt;/xref:System.AppDomain.GetAssemblies%2A&gt;</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>An array of &lt;xref:System.Reflection.Assembly&gt; objects that represent the assemblies loaded into the reflection-only context of the application domain.</source>
          <target state="translated">배열을 &lt;xref:System.Reflection.Assembly&gt;응용 프로그램 도메인의 리플렉션 전용 컨텍스트에 로드 된 어셈블리를 나타내는 개체입니다.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>An operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">전용 어셈블리 확인자에서 어셈블리를 조사할 기본 디렉터리 아래의 경로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">전용 어셈블리는 응용 프로그램과 동일한 디렉터리 구조에 배포 됩니다.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the path specified by the RelativeSearchPath property is not under &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;, it is ignored.</source>
          <target state="translated">없으면 RelativeSearchPath 속성에 지정 된 경로 아래에서 &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;, 무시 됩니다.&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns the value set using &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 속성은 &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt; 를 사용 하 여 설정 된 값 반환</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>The path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">전용 어셈블리를 어셈블리 확인자에서 조사할 기본 디렉터리 아래의 경로입니다.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</source>
          <target state="translated">리소스가 어셈블리에서 올바르게 링크 되거나 포함 된 리소스가 아니어서 리소스 확인이 실패 하면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event can attempt to locate the assembly containing the resource and return it.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;이 이벤트에 대 한 하려고 할 수 있습니다는 리소스를 포함 하는 어셈블리를 찾아 반환 합니다.&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This event is not raised if resolution fails because no file can be found for a valid linked resource.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 없습니다 파일이 유효한 연결 된 리소스에 대 한 확인이 실패 하는 경우이 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</source>
          <target state="translated">이 이벤트는 발생 매니페스트 리소스 스트림을 찾을 수 없는 경우는 개별 리소스 키를 찾을 수 없는 경우는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property contains the assembly that requested the resource.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;속성에 리소스를 요청한 어셈블리를 포함 합니다.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 &lt;xref:System.Security.SecurityException&gt;throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Establishes the security policy level for this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인에 대 한 보안 정책 수준을 설정합니다.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before an assembly is loaded into the &lt;xref:System.AppDomain&gt; in order for the security policy to have effect.</source>
          <target state="translated">어셈블리에 로드 되기 전에이 메서드는 &lt;xref:System.AppDomain&gt;보안 정책 적용 하기 위해에서.&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>The security policy level.</source>
          <target state="translated">보안 정책 수준입니다.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domainPolicy&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domainPolicy&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>The security policy level has already been set.</source>
          <target state="translated">보안 정책 수준 이미 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the location where assemblies are shadow copied.</source>
          <target state="translated">지정한 디렉터리 경로 어셈블리가 섀도 복사 되는 위치로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache path is ignored if the &lt;xref:System.AppDomainSetup.ApplicationName%2A&gt; property is not set.</source>
          <target state="translated">캐시 경로 무시 됩니다는 &lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;속성이 설정 되지 않았습니다.&lt;/xref:System.AppDomainSetup.ApplicationName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">참조는 &lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>The fully qualified path to the shadow copy location.</source>
          <target state="translated">섀도 복사본 위치에 대 한 정규화 된 경로입니다.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>Assigns the specified value to the specified application domain property.</source>
          <target state="translated">지정 된 응용 프로그램 도메인 속성에 지정된 된 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">를 삽입 하려면이 메서드를 사용 하거나 &lt;xref:System.AppDomain&gt;안내 하십시오.&lt;/xref:System.AppDomain&gt; 이 인스턴스의 속성을 설명 하는 이름-데이터 쌍의 내부 캐시에 있는 항목의 값을 수정</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">삽입 하거나이 메서드를 사용 하 여 시스템 항목을 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">시스템 항목을 수정 하려고 시도 하는 메서드 호출에 영향을 주지 않습니다. 메서드는 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can inspect the values of system entries with the &lt;xref:System.AppDomain.GetData%2A&gt; method, or the equivalent &lt;xref:System.AppDomainSetup&gt; properties described in &lt;xref:System.AppDomain.GetData%2A&gt;.</source>
          <target state="translated">&lt;xref:System.AppDomain.GetData%2A&gt;메서드 또는 해당 하는 &lt;xref:System.AppDomainSetup&gt;속성 &lt;xref:System.AppDomain.GetData%2A&gt;.&lt;/xref:System.AppDomain.GetData%2A&gt; 에 설명 된&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomain.GetData%2A&gt; 시스템 항목의 값을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a &lt;xref:System.TimeSpan&gt; value that represents the timeout interval as the value of the <ph id="ph2">`data`</ph> argument.</source>
          <target state="translated">값으로 "REGEX_DEFAULT_MATCH_TIMEOUT" 공급으로 정규식 패턴을 평가 하기 위한 기본 제한 시간 간격의 값을 설정 하려면이 메서드를 호출할 수 있습니다는 <ph id="ph1">`name`</ph> 인수 및 &lt;xref:System.TimeSpan&gt;값의 값으로 제한 시간 간격을 나타내는 <ph id="ph2">`data`</ph> 인수.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the &lt;xref:System.AppDomain.GetData%2A&gt; method.</source>
          <target state="translated">수도 삽입 또는 수정 사용자 정의 이름-데이터 쌍이 방법을 사용 하 고 수와 해당 값을 검사할는 &lt;xref:System.AppDomain.GetData%2A&gt;메서드.&lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">만들거나 변경할 사용자 정의 응용 프로그램 도메인 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">속성의 값입니다.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">지정 된 권한 수요에 속성을 검색할 때 호출자의 지정 된 응용 프로그램 도메인 속성에 지정된 된 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</source>
          <target state="translated">이 메서드를 사용 하 여 응용 프로그램 도메인의 속성을 설명 하는 이름/데이터 쌍의 내부 캐시에 사용자 고유의 사용자 지정 항목을 삽입 하거나 수정할 합니다.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a &lt;xref:System.TimeSpan&gt; value that represents the timeout interval as the value of the <ph id="ph2">`data`</ph> argument.</source>
          <target state="translated">항목을 삽입 하는 경우 항목을 검색할 때 적용할 권한 요청을 지정할 수 있습니다. 값으로 "REGEX_DEFAULT_MATCH_TIMEOUT" 공급으로 정규식 패턴을 평가 하기 위한 기본 제한 시간 간격의 값을 설정 하려면이 메서드를 호출할 수는 또한는 <ph id="ph1">`name`</ph> 인수 및 &lt;xref:System.TimeSpan&gt;값의 값으로 제한 시간 간격을 나타내는 <ph id="ph2">`data`</ph> 인수.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use this method to assign a security demand to a system-defined property string.</source>
          <target state="translated">시스템 정의 속성 문자열을 보안 요청을 할당 하려면이 메서드를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">삽입 하거나이 메서드를 사용 하 여 시스템 항목을 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">시스템 항목을 수정 하려고 시도 하는 메서드 호출에 영향을 주지 않습니다. 메서드는 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can inspect the values of system entries with the &lt;xref:System.AppDomain.GetData%2A&gt; method or the equivalent &lt;xref:System.AppDomainSetup&gt; properties described in the Remarks section for the &lt;xref:System.AppDomain.GetData%2A&gt; method.</source>
          <target state="translated">와 시스템 항목의 값을 검사할 수는 &lt;xref:System.AppDomain.GetData%2A&gt;메서드 또는 해당 &lt;xref:System.AppDomainSetup&gt;에 대 한 설명 섹션에 설명 된 속성의 &lt;xref:System.AppDomain.GetData%2A&gt;메서드.&lt;/xref:System.AppDomain.GetData%2A&gt; &lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">만들거나 변경할 사용자 정의 응용 프로그램 도메인 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">속성의 값입니다.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>The permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">수요에 속성을 검색할 때 호출자의 권한입니다.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> specifies a system-defined property string and <ph id="ph2">&lt;code&gt;permission&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>시스템 정의 속성 문자열을 지정 하 고 <ph id="ph2">&lt;code&gt;permission&lt;/code&gt;</ph> 않습니다 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</source>
          <target state="translated">동적으로 생성 된 파일이 저장 되 고 액세스 하는 하위 디렉터리의 기본 디렉터리로 지정한 디렉터리 경로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the &lt;xref:System.AppDomainSetup.DynamicBase%2A&gt; property of the internal &lt;xref:System.AppDomainSetup&gt; associated with this instance.</source>
          <target state="translated">이 메서드는 설정의 &lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;내부 속성 &lt;xref:System.AppDomainSetup&gt;이 인스턴스와 연결 된.&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.DynamicBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</source>
          <target state="translated">기본 디렉터리인 하위 디렉터리에 대 한 동적 어셈블리를 저장 하는 정규화 된 경로입니다.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</source>
          <target state="translated">어떻게 사용자 및 id 개체에 연결 되어야 스레드 스레드가 특정 보안 주체에이 응용 프로그램 도메인에서 실행 하는 동안 바인딩을 시도 하는 경우를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this value will only be effective if you set it before using the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">이 값으로 설정만 적용 됩니다 사용 하기 전에 설정 하는 경우는 &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you set &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; to a given principal (for example, a generic principal) and then use the SetPrincipalPolicy method to set the &lt;xref:System.Security.Principal.PrincipalPolicy&gt; to &lt;xref:System.Security.Principal.PrincipalPolicy&gt;, the current principal will remain the generic principal.</source>
          <target state="translated">예를 들어, 설정한 경우 &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;주어진된 주 서버 (예: 일반 사용자)와 다음 사용 하 여 설정 하려면 SetPrincipalPolicy 메서드는 &lt;xref:System.Security.Principal.PrincipalPolicy&gt;를 &lt;xref:System.Security.Principal.PrincipalPolicy&gt;, 현재 보안 주체가 제너릭 주체 유지 됩니다.&lt;/xref:System.Security.Principal.PrincipalPolicy&gt; &lt;/xref:System.Security.Principal.PrincipalPolicy&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Security.Principal.PrincipalPolicy"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that specifies the type of the principal object to attach to threads.</source>
          <target state="translated">중 하나는 <bpt id="p1">&lt;xref href="System.Security.Principal.PrincipalPolicy"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스레드에 연결할 principal 개체의 형식을 지정 하는 값입니다.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>Turns on shadow copying.</source>
          <target state="translated">섀도 복사를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the location of assemblies to be shadow copied.</source>
          <target state="translated">섀도 복사 되는 어셈블리의 위치와 지정 된 디렉터리 경로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a shadow copy includes all assemblies found through probing.</source>
          <target state="translated">섀도 복사본을 기본적으로 검색을 통해 발견 된 모든 어셈블리를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SetShadowCopyPath method restricts the shadow copy to the assemblies in the directories specified by <ph id="ph1">`path`</ph>.</source>
          <target state="translated">SetShadowCopyPath 메서드 섀도 복사를 통해 지정 된 디렉터리의 어셈블리에 제한 <ph id="ph1">`path`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SetShadowCopyPath method does not specify additional directories to be searched for assemblies.</source>
          <target state="translated">SetShadowCopyPath 메서드는 어셈블리에 대 한 검색할 추가 디렉터리를 지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assemblies to be shadow-copied must already be located in the search path, for example under &lt;xref:System.AppDomain.BaseDirectory%2A&gt;.</source>
          <target state="translated">어셈블리가 섀도 복사 되는 검색 경로 &lt;xref:System.AppDomain.BaseDirectory%2A&gt;.&lt;/xref:System.AppDomain.BaseDirectory%2A&gt; 아래 예를 들어 이미에 있어야</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SetShadowCopyPath method specifies which search paths are eligible to be shadow-copied.</source>
          <target state="translated">SetShadowCopyPath 메서드는 검색 경로 섀도 복사 하도록 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt; property of the internal &lt;xref:System.AppDomainSetup&gt; associated with this instance.</source>
          <target state="translated">이 메서드는 설정의 &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;내부 속성 &lt;xref:System.AppDomainSetup&gt;이 인스턴스와 연결 된.&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>A list of directory names, where each name is separated by a semicolon.</source>
          <target state="translated">각 이름이 세미콜론으로 구분 되는 위치는 디렉터리 이름 목록입니다.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</source>
          <target state="translated">이 응용 프로그램 도메인에서 실행 하는 동안 보안 주체에 바인딩하려는 경우 스레드에 연결 수를 기본 principal 개체를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>The principal object to attach to threads.</source>
          <target state="translated">스레드에 연결할 principal 개체입니다.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;principal&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;principal&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>The thread principal has already been set.</source>
          <target state="translated">스레드 보안 주체가 이미 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>Gets the application domain configuration information for this instance.</source>
          <target state="translated">이 인스턴스에 대 한 응용 프로그램 도메인 구성 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>The application domain initialization information.</source>
          <target state="translated">응용 프로그램 도메인 초기화 정보입니다.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>Gets an indication whether the application domain is configured to shadow copy files.</source>
          <target state="translated">응용 프로그램 도메인이 파일을 섀도 복사 구성 되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt; and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 &lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;및 <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the application domain is configured to shadow copy files; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>응용 프로그램 도메인이 파일을 섀도 복사; 구성 된 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">언로드된 응용 프로그램 도메인에서 작업이 시도 됩니다.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">이름 집합을 해당 디스패치 식별자 집합에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하도록 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">전달 된 이름의 배열을 매핑할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Count of the names to be mapped.</source>
          <target state="translated">매핑할 이름의 수입니다.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">이름을 해석할 로캘 컨텍스트.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">이름에 해당 하는 Id를 받는 호출자가 할당 된 배열입니다.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">COM을 사용 하 여 런타임에 바인딩된 액세스 <ph id="ph1">`IDispatch`</ph> 인터페이스가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">인터페이스에 대 한 형식 정보를 얻으려면 다음 사용할 수 있는 개체에 대 한 형식 정보를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>The type information to return.</source>
          <target state="translated">반환할 형식 정보입니다.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>The locale identifier for the type information.</source>
          <target state="translated">형식 정보에 대 한 로캘 식별자입니다.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">요청 된 형식 정보 개체에 대 한 포인터를 받습니다.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">COM을 사용 하 여 런타임에 바인딩된 액세스 <ph id="ph1">`IDispatch`</ph> 인터페이스가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">개체 (0 또는 1)를 제공 하는 형식 정보 인터페이스의 수를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">개체에서 제공 하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">COM을 사용 하 여 런타임에 바인딩된 액세스 <ph id="ph1">`IDispatch`</ph> 인터페이스가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">개체에서 노출 하는 메서드와 속성에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::Invoke`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Identifies the member.</source>
          <target state="translated">멤버를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하도록 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">인수를 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call.</source>
          <target state="translated">호출의 컨텍스트를 설명 하는 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">인수의 배열, 명명 된 인수 및 배열에 있는 요소 수에 대 한 수에 대 한 인수 Dispid의 배열에 포함 된 구조체에 대 한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">결과 저장 될 위치에 대 한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">예외 정보가 포함 된 구조에 대 한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">오류가 있는 첫 번째 인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">COM을 사용 하 여 런타임에 바인딩된 액세스 <ph id="ph1">`IDispatch`</ph> 인터페이스가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>Obtains a string representation that includes the friendly name of the application domain and any context policies.</source>
          <target state="translated">응용 프로그램 도메인과 컨텍스트 정책의 이름이 포함 된 문자열 표현을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</source>
          <target state="translated">리터럴 문자열을 연결 하 여 구성 되는 문자열 "이름:"는 친숙 한 이름 응용 프로그램 도메인 및 컨텍스트 정책의 문자열 표현 또는 문자열의 "컨텍스트 정책이 없습니다."</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>The application domain represented by the current <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been unloaded.</source>
          <target state="translated">현재 응용 프로그램 도메인 <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 언로드 되었습니다.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of a type fails.</source>
          <target state="translated">형식 확인이 실패 하면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TypeResolve event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</source>
          <target state="translated">TypeResolve 이벤트에는 공용 언어 런타임 요청된 된 형식을 만들 수 있는 어셈블리를 확인할 수 없는 경우 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</source>
          <target state="translated">이 유형을 동적 어셈블리에 정의 되어 또는 유형을 동적 어셈블리에 정의 되지 않은 있지만 런타임 형식에 정의 되어 있는 어셈블리를 알지 못합니다 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT">
          <source>The latter situation can occur when &lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt; is called with a type name that is not qualified with the assembly name.</source>
          <target state="translated">후자의 경우에 발생할 수 있습니다 때 &lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;어셈블리 이름으로 한정 되지 않았습니다. 형식 이름으로 호출 합니다.&lt;/xref:System.Type.GetType%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event can attempt to locate and create the type.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;에이 이벤트를 찾아 형식을 만드는 시도할 수 있습니다.&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the TypeResolve event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</source>
          <target state="translated">그러나 TypeResolve 이벤트 런타임에서 특정 어셈블리에서 형식을 찾을 수 없는 경우에 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</source>
          <target state="translated">예를 들어이 이벤트는 런타임 형식을 정적 어셈블리에 동적으로 추가할 수 없습니다 알기 때문에 형식을 정적 어셈블리에 없는 경우에 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property contains the assembly that requested the type.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;속성 유형을 요청 하는 어셈블리를 포함 합니다.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 &lt;xref:System.Security.SecurityException&gt;throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is not caught.</source>
          <target state="translated">예외는 잡히지 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event provides notification of uncaught exceptions.</source>
          <target state="translated">이 이벤트를 확인할 수 없는 예외에 대 한 알림을 제공합니다.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT">
          <source>It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</source>
          <target state="translated">시스템 기본 처리기는 사용자에 게 예외를 보고 하 고 응용 프로그램이 종료 되기 전에 예외에 대 한 정보를 기록 하도록 응용 프로그램 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT">
          <source>If sufficient information about the state of the application is available, other actions may be undertaken — such as saving program data for later recovery.</source>
          <target state="translated">응용 프로그램의 상태에 대 한 충분 한 정보가 표시 되 면 다른 작업을 수행할 수 있습니다-나중에 복구에 대 한 프로그램 데이터를 저장 하는 등입니다.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT">
          <source>Caution is advised, because program data can become corrupted when exceptions are not handled.</source>
          <target state="translated">예외 처리 되지 않은 프로그램 데이터 손상 될 수 있으므로 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;.NET Framework 버전 1.0 및 1.1에서는 응용 프로그램 종료 및 디버깅 옵션은 보고 사용자에 게이 이벤트를 발생 시키려면 이후 보다 합니다.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event can be handled in any application domain.</source>
          <target state="translated">이 이벤트는 응용 프로그램 도메인에서 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the event is not necessarily raised in the application domain where the exception occurred.</source>
          <target state="translated">그러나 이벤트 예외가 발생 하는 응용 프로그램 도메인에서 반드시 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</source>
          <target state="translated">스레드에 대 한 전체 스택을 정리 된 하므로 이벤트가 발생할 수 있는 첫 번째 위치는 스레드가 생성 된 응용 프로그램 도메인에 적절 한 예외 처리기를 찾지 않고 하는 경우에 예외가 처리 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 응용 프로그램이 시작 될 때 시스템에서 생성 되는 기본 응용 프로그램 도메인에 대해서만.NET Framework 버전 1.0 및 1.1이이 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</source>
          <target state="translated">응용 프로그램에 추가 응용 프로그램 도메인을 만드는 경우 해당 응용 프로그램 도메인에서이 이벤트에 대 한 대리자를 지정 하 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the UnhandledException event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</source>
          <target state="translated">기본 응용 프로그램 도메인에서 UnhandledException 이벤트가 처리 하는 경우 발생에서 스레드가 시작 응용 프로그램 도메인에 관계 없이 모든 스레드에서 처리 되지 않은 모든 예외에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the thread started in an application domain that has an event handler for UnhandledException, the event is raised in that application domain.</source>
          <target state="translated">스레드가 UnhandledException에 대 한 이벤트 처리기가 응용 프로그램 도메인에서 시작 하는 경우 해당 응용 프로그램 도메인에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</source>
          <target state="translated">해당 응용 프로그램 도메인 기본 응용 프로그램 도메인 아니며 기본 응용 프로그램 도메인에서 이벤트 처리기도는 경우이 이벤트는 두 응용 프로그램 도메인에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</source>
          <target state="translated">예를 들어 가정 스레드를 시작할 응용 프로그램 도메인 "AD1" "AD2" 응용 프로그램 도메인의 메서드를 호출 및 거기서에서 메서드를 호출 하는 "AD3" 응용 프로그램 도메인에서 예외가 throw 되 합니다.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first application domain in which the UnhandledException event can be raised is "AD1".</source>
          <target state="translated">UnhandledException 이벤트가 발생할 수 있습니다는 첫 번째 응용 프로그램 도메인은 "AD1"입니다.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that application domain is not the default application domain, the event can also be raised in the default application domain.</source>
          <target state="translated">해당 응용 프로그램 도메인의 기본 응용 프로그램 도메인에 있지 않은 경우 이벤트 기본 응용 프로그램 도메인에도 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The common language runtime suspends thread aborts while event handlers for the UnhandledException event are executing.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 공용 언어 런타임 UnhandledException 이벤트에 대 한 이벤트 처리기를 실행 하는 동안 스레드 중단을 일시 중단 합니다.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event handler has a &lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt; attribute with the appropriate flags, the event handler is treated as a constrained execution region.</source>
          <target state="translated">이벤트 처리기의 경우는 &lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;특성의 적절 한 플래그를 이벤트 처리기 제약이 있는 실행 영역으로 처리 됩니다.&lt;/xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt; attribute.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, 스택 오버플로 같은 프로세스의 상태가 손상 또는 액세스 위반, 이벤트 처리기가 보안에 중요 한 및 경우가 아니면 하는 예외에 대 한이 이벤트는 &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;특성.&lt;/xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는 기본 응용 프로그램 스레드를 제외한 스레드에서 발생 하는 처리 되지 않은 예외 런타임에서 발생 하 고 따라서 응용 프로그램이 종료를 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, it is possible for the UnhandledException event to be raised without the application terminating.</source>
          <target state="translated">따라서 UnhandledException 이벤트를 응용 프로그램을 종료 하지 않고 발생 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</source>
          <target state="translated">.NET Framework 버전 2.0 이상에서는 자식 스레드에서 처리 되지 않은 예외에 대 한이 백업을 제거 이러한 누적 된 효과가 포함 성능이 저하 되 고 손상 된 데이터는 모두 디버그 하기가 어렵기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">런타임 종료 되지 않는 사례 목록을 비롯 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>관리 되는 스레드의 예외<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 &lt;xref:System.Security.SecurityException&gt;throw 됩니다.&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other Events for Unhandled Exceptions    For certain application models, the UnhandledException event can be preempted by other events if the unhandled exception occurs in the main application thread.</source>
          <target state="translated">다른 이벤트를 처리 되지 않은 예외에 대 한 특정 응용 프로그램 모델링, UnhandledException 이벤트 주 응용 프로그램 스레드에서 처리 되지 않은 예외가 발생 하는 경우 다른 이벤트에 의해 선점 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT">
          <source>In applications that use Windows Forms, unhandled exceptions in the main application thread cause the &lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt; event to be raised.</source>
          <target state="translated">Windows Forms를 사용 하는 응용 프로그램에서 처리 되지 않은 예외에서 기본 응용 프로그램 스레드는 &lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt;이벤트를 발생 합니다.&lt;/xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</source>
          <target state="translated">이 이벤트를 처리 하는 경우 기본 동작은 예외로 인해 응용 프로그램을 종료 하지 않을 응용 프로그램은 알 수 없는 상태로 남아 있지만 합니다.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the UnhandledException event is not raised.</source>
          <target state="translated">이 경우 UnhandledException 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior can be changed by using the application configuration file, or by using the &lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt; method to change the mode to &lt;xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt; before the &lt;xref:System.Windows.Forms.Application.ThreadException&gt; event handler is hooked up.</source>
          <target state="translated">응용 프로그램 구성 파일을 사용 하 여 또는 &lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt;하기 &lt;xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt;전에 &lt;xref:System.Windows.Forms.Application.ThreadException&gt;이벤트 처리기 후크 되는&lt;/xref:System.Windows.Forms.Application.ThreadException&gt; &lt;/xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt; 모드를 변경 하는 메서드&lt;/xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt; 를 사용 하 여이 동작을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT">
          <source>This applies only to the main application thread.</source>
          <target state="translated">이 기본 응용 프로그램 스레드에만 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledException event is raised for unhandled exceptions thrown in other threads.</source>
          <target state="translated">다른 스레드에서 throw 된 처리 되지 않은 예외에 대 한 UnhandledException 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</source>
          <target state="translated">Microsoft Visual Studio 2005 이상에서는 Visual Basic 응용 프로그램 프레임 워크는 주 응용 프로그램 스레드에서 처리 되지 않은 예외에 대 한 다른 이벤트를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt; event.</source>
          <target state="translated">참조는 &lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt;이벤트.&lt;/xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event has an event arguments object with the same name as the event arguments object used by UnhandledException, but with different properties.</source>
          <target state="translated">이 이벤트는 이벤트 인수 개체 UnhandledException에서 사용 하는 이벤트 인수 개체와 동일한 이름의 같지만 서로 다른 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, this event arguments object has an &lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt; property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</source>
          <target state="translated">특히이 이벤트 인수 개체에는 &lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;속성을 사용 하 고 계속 실행, 처리 되지 않은 예외를 무시 합니다. (응용 프로그램 상태를 알 수)을 응용 프로그램.&lt;/xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the UnhandledException event is not raised.</source>
          <target state="translated">이 경우 UnhandledException 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Unloads the specified application domain.</source>
          <target state="translated">지정 된 응용 프로그램 도메인을 언로드합니다.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</source>
          <target state="translated">.NET Framework 버전 2.0에에서는 스레드가 없는 응용 프로그램 도메인 언로드 전용입니다.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT">
          <source>This improves reliability, especially when the .NET Framework is hosted.</source>
          <target state="translated">.NET Framework 호스팅되는 경우에 특히 안정성 향상 됩니다.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a thread calls Unload, the target domain is marked for unloading.</source>
          <target state="translated">스레드 호출 언로드 대상 도메인을 언로드하 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</source>
          <target state="translated">전용된 스레드가 도메인의 언로드 하 고 도메인의 모든 스레드가 중단 합니다.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a <ph id="ph1">`finally`</ph> block, then after a period of time a &lt;xref:System.CannotUnloadAppDomainException&gt; is thrown in the thread that originally called Unload.</source>
          <target state="translated">스레드 중단 되지 않는 예를 들어 비관리 코드를 실행 하는 경우 또는 실행 한 <ph id="ph1">`finally`</ph> 일정 기간 후 다음 블록은 &lt;xref:System.CannotUnloadAppDomainException&gt;언로드를 원래 호출한 스레드에서에서 throw 된.&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the thread that could not be aborted eventually ends, the target domain is not unloaded.</source>
          <target state="translated">결국 중단 하지 스레드가 종료 되는 경우에 대상 도메인은 언로드되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, in the .NET Framework version 2.0 <ph id="ph1">`domain`</ph> is not guaranteed to unload, because it might not be possible to terminate executing threads.</source>
          <target state="translated">따라서.NET Framework 버전 2.0에서에서 <ph id="ph1">`domain`</ph> 보장 되지 않는 언로드되도록 것 수 없는 경우에 실행 중인 스레드를 종료할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In some cases, calling Unload causes an immediate &lt;xref:System.CannotUnloadAppDomainException&gt;, for example if it is called in a finalizer.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 경우도 언로드를 호출 하면 즉시 &lt;xref:System.CannotUnloadAppDomainException&gt;, 예를 들어 종료자에서 호출 되 면.&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT">
          <source>The threads in <ph id="ph1">`domain`</ph> are terminated using the &lt;xref:System.Threading.Thread.Abort%2A&gt; method, which throws a &lt;xref:System.Threading.ThreadAbortException&gt; in the thread.</source>
          <target state="translated">스레드 <ph id="ph1">`domain`</ph> 를 사용 하 여 종료 되는 &lt;xref:System.Threading.Thread.Abort%2A&gt;throw 하는 메서드는 &lt;xref:System.Threading.ThreadAbortException&gt;스레드에서.&lt;/xref:System.Threading.ThreadAbortException&gt; &lt;/xref:System.Threading.Thread.Abort%2A&gt;</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a <ph id="ph1">`finally`</ph> clause.</source>
          <target state="translated">하지 않은 시간에 실행을 계속할 수 있지만 스레드가 즉시 종료 되어야는 <ph id="ph1">`finally`</ph> 절.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Compatibility    In the .NET Framework version 1.0 and 1.1 if the thread that calls Unload is running in <ph id="ph1">`domain`</ph>, another thread is started to perform the unload operation.</source>
          <target state="translated">버전 호환성.NET Framework 버전 1.0 및 1.1에서 언로드를 호출 하는 스레드에서 실행 중인 경우 <ph id="ph1">`domain`</ph>, 다른 스레드 언로드 작업을 수행 하기 시작 합니다.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`domain`</ph> cannot be unloaded, a &lt;xref:System.CannotUnloadAppDomainException&gt; is thrown in that thread, not in the original thread that called Unload.</source>
          <target state="translated">경우 <ph id="ph1">`domain`</ph> 언로드할 수 없으며는 &lt;xref:System.CannotUnloadAppDomainException&gt;언로드를 호출한 원래 스레드가에 없는 해당 스레드에서 throw 됩니다.&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the thread that calls Unload is running outside <ph id="ph1">`domain`</ph>, that thread receives the exception.</source>
          <target state="translated">그러나 Unload 외부에서 실행 되는 스레드를 호출 하는 경우에 <ph id="ph1">`domain`</ph>, 스레드가 예외를 받습니다.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>An application domain to unload.</source>
          <target state="translated">응용 프로그램 도메인을 언로드합니다.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph> could not be unloaded.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph>언로드할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>An error occurred during the unload process.</source>
          <target state="translated">언로드하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>