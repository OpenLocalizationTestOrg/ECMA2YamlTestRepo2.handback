<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">743b00cae26b2222671c6733ec6673f60a6aa7b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadState.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4339ccc806e16bb613901c0fedb2568b5da50f14</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b58d0f8f571e866a50256a8fec82b65b3451b6b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the execution states of a <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">실행 상태를 지정 된 <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ThreadState enumeration is of interest only in a few debugging scenarios.</source>
          <target state="translated">몇 가지에만 관심 ThreadState 열거형은 디버깅 시나리오입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
          <target state="translated">코드 스레드 활동을 동기화 할 스레드 상태를 사용해 해야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>ThreadState defines a set of all possible execution states for threads.</source>
          <target state="translated">ThreadState 일련의 스레드에 대 한 모든 가능한 실행 상태를 정의합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
          <target state="translated">만든 스레드는 종료 될 때까지 상태 중 하나 이상에 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
          <target state="translated">공용 언어 런타임 내에서 만들어진 스레드는 초기는 <ph id="ph1">`Unstarted`</ph> 상태인을 런타임에 제공 되는 외부 스레드에 이미 있는 반면는 <ph id="ph2">`Running`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling &lt;xref:System.Threading.Thread.Start%2A&gt;.</source>
          <target state="translated"><ph id="ph1">`Unstarted`</ph> 스레드를 전환 되 고 <ph id="ph2">`Running`</ph> &lt;xref:System.Threading.Thread.Start%2A&gt;.&lt;/xref:System.Threading.Thread.Start%2A&gt; 를 호출 하 여 상태</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
          <target state="translated">모든 조합의 <ph id="ph1">`ThreadState`</ph> 유효한 값은; 모두에 스레드 수 없습니다. 예를 들어는 <ph id="ph2">`Aborted`</ph> 및 <ph id="ph3">`Unstarted`</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  There are two thread state enumerations,ThreadState and &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 두 스레드 상태 열거형, ThreadState 및 &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.&lt;/xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt; 없는</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the actions that cause a change of state.</source>
          <target state="translated">다음 표에서 상태 변경이 발생 하는 작업을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method on the new thread, and the call returns.</source>
          <target state="translated">| 작업 | ThreadState |   |------------|-----------------|   | 공용 언어 런타임 내에서 스레드가 생성 됩니다. | 시작 되지 않은 |   | 다른 스레드 호출에서 &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;새 스레드 및 호출에 메서드를 반환 합니다.&lt;/xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.Thread.Start%2A&gt; method does not return until the new thread has started running.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.Start%2A&gt;새 스레드가 실행을 시작할 때까지 메서드는 반환 하지 않습니다.&lt;/xref:System.Threading.Thread.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to know at what point the new thread will start running, during the call to &lt;xref:System.Threading.Thread.Start%2A&gt;.|Running|   |The thread calls &lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Monitor.Wait%2A&gt; on another object.|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Thread.Join%2A&gt; on another thread.|WaitSleepJoin|   |Another thread calls &lt;xref:System.Threading.Thread.Interrupt%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Suspend%2A&gt; request.|Suspended|   |Another thread calls &lt;xref:System.Threading.Thread.Resume%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Abort%2A&gt; request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
          <target state="translated">어느 시점에서 새 스레드 실행을 시작 합니다, &lt;xref:System.Threading.Thread.Start%2A&gt;호출 하는 동안 알 수 있는 방법이 있습니다. | 실행 |   | 스레드 호출 &lt;xref:System.Threading.Thread.Sleep%2A&gt;| WaitSleepJoin |   | 다른 개체에 스레드 호출 &lt;xref:System.Threading.Monitor.Wait%2A&gt;. | WaitSleepJoin |   | 다른 스레드의 스레드 호출 &lt;xref:System.Threading.Thread.Join%2A&gt;. | WaitSleepJoin |   | 다른 스레드 호출 &lt;xref:System.Threading.Thread.Interrupt%2A&gt;| 실행 |   | 다른 스레드 호출 &lt;xref:System.Threading.Thread.Suspend%2A&gt;| SuspendRequested |   | 스레드가 &lt;xref:System.Threading.Thread.Suspend%2A&gt;요청에 응답 합니다. | 일시 중단 |   | 다른 스레드 호출 &lt;xref:System.Threading.Thread.Resume%2A&gt;| 실행 |   | 다른 스레드 호출 &lt;xref:System.Threading.Thread.Abort%2A&gt;| AbortRequested |   | 스레드가 &lt;xref:System.Threading.Thread.Abort%2A&gt;요청에 응답 합니다. | 중지 |   | 스레드가 종료 됩니다. | 중지 |       위에서 설명한 상태 외에 <ph id="ph1">`Background`</ph> 를 배경이 나 전경에서 스레드가 실행 되 고 있는지 여부를 나타내는 상태.&lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Thread.Resume%2A&gt; &lt;/xref:System.Threading.Thread.Suspend%2A&gt; &lt;/xref:System.Threading.Thread.Suspend%2A&gt; &lt;/xref:System.Threading.Thread.Interrupt%2A&gt; &lt;/xref:System.Threading.Thread.Join%2A&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt; &lt;/xref:System.Threading.Thread.Sleep%2A&gt; &lt;/xref:System.Threading.Thread.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread can be in more than one state at a given time.</source>
          <target state="translated">스레드는 한 번에 둘 이상의 상태일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a thread is blocked on a call to &lt;xref:System.Threading.Monitor.Wait%2A&gt;, and another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt; on the blocked thread, the blocked thread will be in both the <ph id="ph1">`WaitSleepJoin`</ph> and the <ph id="ph2">`AbortRequested`</ph> states at the same time.</source>
          <target state="translated">예를 들어에 대 한 호출에서 스레드가 차단 되 면 &lt;xref:System.Threading.Monitor.Wait%2A&gt;, 및 다른 스레드 호출 &lt;xref:System.Threading.Thread.Abort%2A&gt;에 차단 된 스레드는 차단 된 스레드가 모두 됩니다는 <ph id="ph1">`WaitSleepJoin`</ph> 및 <ph id="ph2">`AbortRequested`</ph> 동시에 상태.&lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, as soon as the thread returns from the call to &lt;xref:System.Threading.Monitor.Wait%2A&gt; or is interrupted, it will receive the &lt;xref:System.Threading.ThreadAbortException&gt; to begin aborting.</source>
          <target state="translated">이 경우 스레드가에 대 한 호출에서 반환 되는 즉시 &lt;xref:System.Threading.Monitor.Wait%2A&gt;아니거나 중단 되 면 수신는 &lt;xref:System.Threading.ThreadAbortException&gt;중단 하려면.&lt;/xref:System.Threading.ThreadAbortException&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt; property of a thread provides the current state of a thread.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;스레드 속성은 스레드의 현재 상태를 제공 합니다.&lt;/xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
          <target state="translated">응용 프로그램 스레드가 실행 되 고 있는지 확인 하는 비트 마스크를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
          <target state="translated">에 대 한 값이 이후 <ph id="ph1">`Running`</ph> 영 (0), 스레드가 같은 C# 코드를 사용 하 여 실행 중인지 여부를 테스트 <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> 또는 Visual Basic 코드와 같은 <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.</source>
          <target state="translated">스레드 상태 AbortRequested를 포함 하 고, 이제는 스레드가 되지만 상태로 아직 중지 됨으로 변경 되지 않은.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that will attempt to terminate it.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 스레드에서 메서드를 호출 하지만 스레드가 아직 받지 못한는 보류 중인 <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 종료 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
          <target state="translated">포그라운드 스레드 달리 백그라운드 스레드로 스레드가 실행 중입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This state is controlled by setting the <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">이 상태를 설정 하 여 제어 되는 <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The thread has been started, it is not blocked, and there is no pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">스레드가 시작 하 고 차단 되지 않습니다는 보류 중인 더 <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The thread has stopped.</source>
          <target state="translated">스레드가 중지 되었습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The thread is being requested to stop.</source>
          <target state="translated">스레드 중지 요청 되 고 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is for internal use only.</source>
          <target state="translated">내부 전용입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The thread has been suspended.</source>
          <target state="translated">스레드가 일시 중단 되었습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The thread is being requested to suspend.</source>
          <target state="translated">스레드를 일시 중단 요청 되 고 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has not been invoked on the thread.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 스레드에서 메서드를 호출 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The thread is blocked.</source>
          <target state="translated">스레드가 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This could be the result of calling <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> or <ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>, of requesting a lock — for example, by calling <ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph> or <ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> — or of waiting on a thread synchronization object such as &lt;xref:System.Threading.ManualResetEvent&gt;.</source>
          <target state="translated">이 호출의 결과 수 <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 또는 <ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>, 잠금을 요청-호출 하 여 예를 들어 <ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph> 또는 <ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> -또는 &lt;xref:System.Threading.ManualResetEvent&gt;.&lt;/xref:System.Threading.ManualResetEvent&gt; 같은 스레드 동기화 개체에 대해 대기 중</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>