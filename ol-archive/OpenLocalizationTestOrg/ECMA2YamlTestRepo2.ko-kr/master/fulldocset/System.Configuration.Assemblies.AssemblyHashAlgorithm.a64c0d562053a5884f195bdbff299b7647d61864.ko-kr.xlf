<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dda0f45a38e977e0923dfbbb74c2c7c404d6a86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.Assemblies.AssemblyHashAlgorithm.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbd0b217f7879421f3da9ea54f4aa27a319c2f42</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1eabe0cbe8461f784f1ab3258aa8011eaa6f3702</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies all the hash algorithms used for hashing files and for generating the strong name.</source>
          <target state="translated">파일을 해시 하 고 강력한 이름을 생성에 사용 되는 모든 해시 알고리즘을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`hash function``H`</ph> is a transformation that takes an input <ph id="ph2">`m`</ph> and returns a fixed-size string, which is called the hash value <ph id="ph3">`h`</ph> (that is, <ph id="ph4">`h`</ph><ph id="ph5"> = </ph><ph id="ph6">`H`</ph> (<ph id="ph7">`m`</ph>)).</source>
          <target state="translated">A <ph id="ph1">`hash function``H`</ph> 입력을 가져와서 하는 변환 <ph id="ph2">`m`</ph> 해시 값을 호출 하는 고정 크기 문자열을 반환 하 고 <ph id="ph3">`h`</ph> (즉, <ph id="ph4">`h`</ph> <ph id="ph5"> = </ph> <ph id="ph6">`H`</ph> (<ph id="ph7">`m`</ph>)).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hash functions with just this property have a variety of general computational uses, but when employed in cryptography, the hash functions are usually chosen to have some additional properties.</source>
          <target state="translated">이 속성을 가진 해시 함수는 다양 한 일반 계산 사용 하지만 암호화에 사용할 경우 해시 함수는 일반적으로 몇 가지 추가 속성이 있어야 수 선택 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The basic requirements for a cryptographic hash function are:      -   The input can be of any length.</source>
          <target state="translated">암호화 해시 함수에 대 한 기본 요구 사항은:-의 길이 입력 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The output has a fixed length.</source>
          <target state="translated">-출력은 고정된 길이입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`H`</ph> (<ph id="ph2">`x)`</ph> is relatively easy to compute for any given x.</source>
          <target state="translated">- <ph id="ph1">`H`</ph> (<ph id="ph2">`x)`</ph> 은 비교적 쉽습니다 지정한 x에 대 한 계산 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) is one-way.</source>
          <target state="translated">-   <ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) is one-way.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>) is collision-free.</source>
          <target state="translated">- <ph id="ph1">`H`</ph> (<ph id="ph2">`x`</ph>)는 충돌이 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hash value represents concisely the longer message or document from which it was computed; this value is called the message digest.</source>
          <target state="translated">해시 값은 긴 메시지 또는 문서를 계산 되었는지; 간결 하 게 나타냅니다. 이 값이 메시지 다이제스트를 라고 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can think of a message digest as a digital fingerprint of the larger document.</source>
          <target state="translated">메시지 다이제스트는 더 큰 문서의 디지털 지문 생각할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of well-known hash functions are MD2 and and SHA.</source>
          <target state="translated">잘 알려진 해시 함수는 MD2 및 및 SHA 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Retrieves the MD5 message-digest algorithm.</source>
          <target state="translated">MD5 메시지 다이제스트 알고리즘을 검색합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>MD5 was developed by Rivest in 1991.</source>
          <target state="translated">MD5 Rivest 1991 년에 개발 되었습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is basically MD4 with safety-belts and while it is slightly slower than MD4, it helps provide more security.</source>
          <target state="translated">앱은 기본적으로 MD4 안전 하 고 MD4 보다 조금 느리기 인 하는 데 도움이 추가 보안을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The algorithm consists of four distinct rounds, which has a slightly different design from that of MD4.</source>
          <target state="translated">알고리즘으로 이루어져 네 개의 고유 라운드 MD4의 약간 다른 디자인에 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Message-digest size, as well as padding requirements, remain the same.</source>
          <target state="translated">패딩 요구 사항 뿐만 아니라 메시지 다이제스트 크기 ֿ ´ .</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A mask indicating that there is no hash algorithm.</source>
          <target state="translated">해시 알고리즘이 없는 임을 나타내는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">&lt;xref uid="langword_csharp_None" name="None" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a multi-module assembly, the common language runtime defaults to the SHA1 algorithm, since multi-module assemblies need to generate a hash.</source>
          <target state="translated">지정 하는 경우 <bpt id="p1">&lt;xref uid="langword_csharp_None" name="None" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 다중 모듈 어셈블리에 대 한 공용 언어 런타임은 기본적으로 SHA1 알고리즘을 다중 모듈 어셈블리는 해시를 생성할 필요가 없기 때문입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A mask used to retrieve a revision of the Secure Hash Algorithm that corrects an unpublished flaw in SHA.</source>
          <target state="translated">S h A의 게시 되지 않은 프로그램 결함을 수정 하는 보안 해시 알고리즘의 수정 버전을 검색 하는 데 사용 하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 256 bits.</source>
          <target state="translated">해시 크기는 256 비트 보안 해시 알고리즘의 버전을 검색 하는 데 사용 하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 384 bits.</source>
          <target state="translated">384 비트 해시 크기를 가진 보안 해시 알고리즘의 버전을 검색 하는 데 사용 하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A mask used to retrieve a version of the Secure Hash Algorithm with a hash size of 512 bits.</source>
          <target state="translated">512 비트 해시 크기를 가진 보안 해시 알고리즘의 버전을 검색 하는 데 사용 하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>