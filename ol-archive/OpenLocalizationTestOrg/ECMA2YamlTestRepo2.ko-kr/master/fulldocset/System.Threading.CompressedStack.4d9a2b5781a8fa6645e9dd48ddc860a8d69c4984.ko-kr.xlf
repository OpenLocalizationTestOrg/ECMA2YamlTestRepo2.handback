<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f01fb3b9fecff4c00cf5461905d1f78e693840d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.CompressedStack.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e057c1a6bb632748d011a46d1af67cbc30411da5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e67de13fed7a3139c8a9fc0bee5348c8f25d0c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides methods for setting and capturing the compressed stack on the current thread.</source>
          <target state="translated">설정 하 고 현재 스레드에서 압축된 스택을 캡처링 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compressed stack is a compact representation of all the code access security information on the call stack, such as &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt; and &lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt; actions.</source>
          <target state="translated">압축 된 스택은 호출 스택의 모든 코드 액세스 보안 정보의 압축 된 표현을 같은 &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;및 &lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;작업.&lt;/xref:System.Security.CodeAccessPermission.Assert%2A&gt; &lt;/xref:System.Security.CodeAccessPermission.Deny%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt; action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.</source>
          <target state="translated">예를 들어 경우는 &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;동작은 두 스택 프레임 현재 프레임에서 보유 한 경우가 코드 액세스 보안 주석 사이 현재 프레임을 압축 된 스택만 해당 정보를 전체 호출 스택을 serialize 하지 않고 기록.&lt;/xref:System.Security.CodeAccessPermission.Deny%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CompressedStackclass is used internally by the &lt;xref:System.Security.SecurityContext&gt; class.</source>
          <target state="translated">&lt;xref:System.Security.SecurityContext&gt;클래스&lt;/xref:System.Security.SecurityContext&gt; 는 CompressedStackclass는 내부적으로 사용</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName&gt; method captures the compressed stack for the current call stack, along with impersonation and culture information.</source>
          <target state="translated">예를 들어는 &lt;xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName&gt;메서드는 현재 호출 스택의 가장 및 문화권 정보와 함께 압축된 스택을 캡처합니다.&lt;/xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.SecurityContext&gt; class is used in turn by the &lt;xref:System.Threading.ExecutionContext&gt; class to flow context across threads, for example when scheduling thread pool tasks.</source>
          <target state="translated">&lt;xref:System.Security.SecurityContext&gt;클래스에 사용 되는 &lt;xref:System.Threading.ExecutionContext&gt;예를 들어 스레드 풀 작업 일정을 만들 때 스레드 간에 흐름 컨텍스트 클래스.&lt;/xref:System.Threading.ExecutionContext&gt; &lt;/xref:System.Security.SecurityContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is not used in ordinary application programming.</source>
          <target state="translated">이 클래스는 일반적인 응용 프로그램 프로그래밍에 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Captures the compressed stack from the current thread.</source>
          <target state="translated">현재 스레드에서 압축된 스택을 캡처합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Captures all the code access security information on the call stack, such as &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt; and &lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt; actions, in a compressed format.</source>
          <target state="translated">와 같은 호출 스택의 모든 코드 액세스 보안 정보를 캡처하여 &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;및 &lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;압축된 된 형식으로 작업 합니다.&lt;/xref:System.Security.CodeAccessPermission.Assert%2A&gt; &lt;/xref:System.Security.CodeAccessPermission.Deny%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt; action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.</source>
          <target state="translated">예를 들어 경우는 &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;동작은 두 스택 프레임 현재 프레임에서 보유 한 경우가 코드 액세스 보안 주석 사이 현재 프레임을 압축 된 스택만 해당 정보를 전체 호출 스택을 serialize 하지 않고 기록.&lt;/xref:System.Security.CodeAccessPermission.Deny%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The captured compressed stack can be applied to another thread.</source>
          <target state="translated">압축된 된 캡처된 스택은 다른 스레드를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current compressed stack.</source>
          <target state="translated">현재 스택의 압축 된 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful for creating a copy of the current compressed stack to apply to another thread.</source>
          <target state="translated">이 메서드는 다른 스레드를 적용 하려면 현재 압축된 스택의 복사본을 만드는 데 유용 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the current compressed stack.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 압축된 스택을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the compressed stack for the current thread.</source>
          <target state="translated">현재 스레드에 대 한 압축된 스택을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If security is enabled, the current compressed stack is returned.</source>
          <target state="translated">보안을 사용 하는 경우 현재 압축된 스택을 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If security is disabled, GetCompressedStack returns an empty &lt;xref:System.Threading.CompressedStack&gt; object.</source>
          <target state="translated">보안을 해제 하면 GetCompressedStack 빈 반환 &lt;xref:System.Threading.CompressedStack&gt;개체입니다.&lt;/xref:System.Threading.CompressedStack&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method uses &lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt; to prevent it from being called from untrusted code; only the immediate caller is required to have &lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName&gt; permission.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;이 방법은 사용 하 여 &lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 포함 해야 합니다. &lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName&gt;권한.&lt;/xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName&gt; &lt;/xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For important limitations on using the <ph id="ph1">`LinkDemand`</ph> member, see <bpt id="p1">[</bpt>Demand vs. LinkDemand<ept id="p1">](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)</ept>.</source>
          <target state="translated">사용 하는 중요 한 제한에 대 한는 <ph id="ph1">`LinkDemand`</ph> 멤버 참조 <bpt id="p1">[</bpt>Demand 합니다. LinkDemand<ept id="p1">](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;이 멤버에는 또한는 올바른 암호화 키가 아니라 의사 키 있는 ECMA 공개 키에 대 한 링크 요청을 만듭니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key.</source>
          <target state="translated">.NET Framework 내에서 링크 요청 ECMA 의사 키에 대 한 자동으로 Microsoft 공개 키에 대 한 링크 요청으로 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The security exception is based on the Microsoft public key, not the ECMA pseudo key.</source>
          <target state="translated">보안 예외가 ECMA 의사 키가 아니라 Microsoft 공개 키를 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current thread.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 스레드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A caller in the call chain does not have permission to access unmanaged code.</source>
          <target state="translated">호출 체인에 호출자에 비관리 코드에 액세스할 수 있는 권한이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-       The request for <bpt id="p1">&lt;xref href="System.Security.Permissions.StrongNameIdentityPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> failed.</source>
          <target state="translated">-또는-에 대 한 요청 <bpt id="p1">&lt;xref href="System.Security.Permissions.StrongNameIdentityPermission"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 실패 했습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Sets the <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object with the logical context information needed to recreate an instance of this execution context.</source>
          <target state="translated">설정의 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 실행 컨텍스트의 인스턴스를 다시 만드는 데 필요한 논리 컨텍스트 정보가 포함 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetObjectData sets a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; with the logical call context information.</source>
          <target state="translated">GetObjectData 집합은 &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;논리적 컨텍스트 정보를 호출 합니다.&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>During deserialization, the execution context object is reconstituted from the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; transmitted over the stream.</source>
          <target state="translated">역직렬화 하는 동안 실행 컨텍스트 개체에서 다시 구성 되는 &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;스트림을 통해 전송 된.&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;.&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to be populated with serialization information.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> serialization 정보로 채울 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; structure representing the destination context of the serialization.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;serialization의 대상 컨텍스트를 나타내는 구조입니다.&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Runs a method in the specified compressed stack on the current thread.</source>
          <target state="translated">압축된 된 지정 된 스택을에서 현재 스레드에 대 한 메서드를 실행합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compressed stack is returned to its previous state when the method completes.</source>
          <target state="translated">압축 된 스택 메서드가 완료를 이전 상태로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to set.</source>
          <target state="translated">The <bpt id="p1">&lt;xref href="System.Threading.CompressedStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to set.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Threading.ContextCallback&gt; that represents the method to be run in the specified security context.</source>
          <target state="translated">A &lt;xref:System.Threading.ContextCallback&gt;나타내는 메서드를 지정 된 보안 컨텍스트에서 실행 되도록 합니다.&lt;/xref:System.Threading.ContextCallback&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The object to be passed to the callback method.</source>
          <target state="translated">콜백 메서드로 전달 될 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;compressedStack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;compressedStack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>