<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1245680de30d058b656087aa3abd774676cc28ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Markup.XamlTypeMapper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d477a4d3a1b66176146675d40b492494271faf7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa32ef088b74b44fc3aed6338e08adabd7c22ca9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Maps a XAML element name to the appropriate CLR &lt;xref:System.Type&gt; in assemblies.</source>
          <target state="translated">적절 한 CLR에 XAML 요소 이름을 매핑합니다 &lt;xref:System.Type&gt;어셈블리에.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for &lt;xref:System.Windows.Markup.XamlReader&gt; and &lt;xref:System.Windows.Markup.XamlWriter&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.XamlReader&gt;및 &lt;xref:System.Windows.Markup.XamlWriter&gt;.&lt;/xref:System.Windows.Markup.XamlWriter&gt; &lt;/xref:System.Windows.Markup.XamlReader&gt; 에 대 한 대체 컨텍스트를 제공 하는 고급 WPF 시나리오의 일부인 XamlTypeMapper</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> WPF applications, you should consider overriding &lt;xref:System.Xaml.XamlSchemaContext&gt; for this scenario, rather than attempting to use XamlTypeMapper.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> WPF 응용 프로그램을 고려해 야 재정의 &lt;xref:System.Xaml.XamlSchemaContext&gt;XamlTypeMapper 사용 하려고 하지 않고이 시나리오에 대 한.&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; values on the assembly code.</source>
          <target state="translated">XamlTypeMapper를 사용 하 여 XAML 파서에의 응용 프로그램 보다 더 직접적 기법을 통해 사용자 지정 매핑 정보로 제공할 수 있습니다 &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;어셈블리 코드에 대 한 값.&lt;/xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; attributing.</source>
          <target state="translated">이 추가 하기 위해 다시 컴파일할 필요 없이 기존 어셈블리에 있는 xaml 형식을 참조 하거나 어셈블리의 모든 CLR 네임 스페이스의 통합 하는 데 유용할 수 있습니다 &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;특성 지정 합니다.&lt;/xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically create a XamlTypeMapper instance in order to specify the &lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt; property value for a &lt;xref:System.Windows.Markup.ParserContext&gt;.</source>
          <target state="translated">일반적으로 &lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt; &lt;xref:System.Windows.Markup.ParserContext&gt;.&lt;/xref:System.Windows.Markup.ParserContext&gt; 에 대 한 속성 값&lt;/xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt; 을 지정 하기 위해 XamlTypeMapper 인스턴스를 만들으십시오</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Markup.ParserContext&gt; in turn can be used as the context for a &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;call.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.ParserContext&gt;차례로으로 사용할 수에 대 한 컨텍스트는 &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;호출.&lt;/xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt; &lt;/xref:System.Windows.Markup.ParserContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default Mapper    You can obtain a default mapper using the &lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt; static property.</source>
          <target state="translated">사용 하 여 기본 맵 편집기를 가져올 수 기본 매퍼 있습니다는 &lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt;정적 속성입니다.&lt;/xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default mapper only works on a default assembly list.</source>
          <target state="translated">기본 매퍼 기본 어셈블리 목록에 대해서만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>No specific information about assemblies (as is specified in XamlTypeMapper constructors) is used.</source>
          <target state="translated">(XamlTypeMapper 생성자에 지정 됨) 처럼 어셈블리에 대 한 특정 정보가 없습니다 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 텍스트 사용</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by specifying an array of assembly names that the <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 어셈블리의 배열을 지정 하 여 클래스 이름을 지정 하는 <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">어셈블리 이름의 배열은 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified array of assembly names and the specified namespace maps.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스, 지정된 된 어셈블리 이름 배열을 사용 하 고 지정된 된 네임 스페이스에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">어셈블리 이름의 배열은 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The array of namespace maps the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">네임 스페이스 맵 배열은 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">어셈블리에 XML 네임 스페이스와 CLR 네임 스페이스 간의 매핑을 정의 하 고에 추가 된 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 정보입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>AddMappingProcessingInstruction is a programmatic way to add a mapping.</source>
          <target state="translated">AddMappingProcessingInstruction은 매핑을 추가 하려면 프로그래밍 방식으로 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:      <ph id="ph1">```   &lt;Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples"&gt;   ...   ```</ph>       The <ph id="ph2">`xmlNamespace`</ph> is <ph id="ph3">`SDK`</ph>, the <ph id="ph4">`clrNamespace`</ph> is <ph id="ph5">`Samples`</ph>, and the <ph id="ph6">`assemblyName`</ph> is <ph id="ph7">`SDKSamples`</ph>.</source>
          <target state="translated">예를 들어 다음 XAML mapping 명령의 여러 부분은 매개 변수에 해당 하는 AddMappingProcessingInstruction의: <ph id="ph1">```   &lt;Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples"&gt;   ...   ```</ph> 는 <ph id="ph2">`xmlNamespace`</ph> 은 <ph id="ph3">`SDK`</ph>, <ph id="ph4">`clrNamespace`</ph> 은 <ph id="ph5">`Samples`</ph>, 및 <ph id="ph6">`assemblyName`</ph> 은 <ph id="ph7">`SDKSamples`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The prefix for the XML namespace..</source>
          <target state="translated">XML 네임 스페이스의 접두사입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The CLR  namespace that contains the types to map.</source>
          <target state="translated">매핑할 형식을 포함 하는 CLR 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The assembly that contains the CLR  namespace.</source>
          <target state="translated">CLR 네임 스페이스를 포함 하는 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>       -or-       <ph id="ph3">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>       -or-       <ph id="ph3">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requests permission for a <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived type that is called under full trust to access a specific internal type.</source>
          <target state="translated">에 대 한 권한을 요청는 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 파생 형식에서 특정 내부 형식에 액세스 하려면 완전 신뢰 수준에서 호출 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not overridden by a subclass, AllowInternalType always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">AllowInternalType 항상 반환 하위 클래스에서 재정의 되지 않으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overridden by a subclass, the behavior should be that AllowInternalType should return <ph id="ph1">`true`</ph> if the internal type can be accessed; otherwise, <ph id="ph2">`false`</ph>.</source>
          <target state="translated">동작은 AllowInternalType 반환할지 여부 있어야 하위 클래스에서 재정의 되 면 <ph id="ph1">`true`</ph> 내부 형식이 고, 그렇지 않으면 액세스 될 수 있도록 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type to access.</source>
          <target state="translated">액세스 형식입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the internal type can be accessed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>내부 형식; 액세스할 수 있는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets an instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use if one has not been specified.</source>
          <target state="translated">인스턴스를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 되지 않은 경우 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default mapper only works on a default assembly list.</source>
          <target state="translated">기본 매퍼 기본 어셈블리 목록에 대해서만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>No specific information about assemblies (as is specified in &lt;xref:System.Windows.Markup.XamlTypeMapper&gt; constructors) is used.</source>
          <target state="translated">어셈블리에 대 한 특정 정보가 없습니다 (에 지정 되어 &lt;xref:System.Windows.Markup.XamlTypeMapper&gt;생성자) 사용 됩니다.&lt;/xref:System.Windows.Markup.XamlTypeMapper&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the current implementation the default assembly list is: <ph id="ph1">`WindowsBase`</ph>, <ph id="ph2">`PresentationCore`</ph>, <ph id="ph3">`PresentationFramework`</ph>.</source>
          <target state="translated">현재 구현에서 기본 어셈블리 목록은: <ph id="ph1">`WindowsBase`</ph>, <ph id="ph2">`PresentationCore`</ph>, <ph id="ph3">`PresentationFramework`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all.</source>
          <target state="translated">기본 맵 편집기를 사용 하 여 사용할 수 없다는 사용자 지정 어셈블리/형식 XAML에서 전혀 의미 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as <ph id="ph1">`xmlns`</ph> attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API.</source>
          <target state="translated">사용자 지정 형식/어셈블리를 사용 하는 경우 사용 해야 기본 XAML 기술을으로 매핑을 만드는 의미일 뿐 <ph id="ph1">`xmlns`</ph> , 형식 매퍼 API와 달리, 형식/어셈블리 참조는 각 XAML 페이지에서 특성입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default type mapper.</source>
          <target state="translated">기본 형식 매퍼입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the CLR &lt;xref:System.Type&gt; that a given XAML element is mapped to, using the specified XML namespace prefix and element name.</source>
          <target state="translated">CLR 가져옵니다 &lt;xref:System.Type&gt;지정된 된 XAML 요소가 매핑되는, 지정 된 XML 네임 스페이스 접두사와 요소 이름을 사용 하 여.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type cannot be found that maps to the provided information, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">제공된 된 정보에 매핑되는 형식을 찾을 수 없는 경우 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not include the prefix as part of <ph id="ph1">`localName`</ph>.</source>
          <target state="translated">일부분으로 접두사를 넣지 마십시오 <ph id="ph1">`localName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any prefixed XAML element information, separate it into <ph id="ph1">`xmlNamespace`</ph> and <ph id="ph2">`localName`</ph> components for this API call.</source>
          <target state="translated">XAML 요소 정보를 접두사로 하나에 대 한 요소로 구분 <ph id="ph1">`xmlNamespace`</ph> 및 <ph id="ph2">`localName`</ph> 이 API 호출에 대 한 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The specified XML namespace prefix.</source>
          <target state="translated">지정 된 XML 네임 스페이스 접두사입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The "local" name of the XAML element to obtain the mapped &lt;xref:System.Type&gt; for.</source>
          <target state="translated">매핑된 &lt;xref:System.Type&gt;&gt;for&lt;/xref:System.Type&gt; 얻으려고 XAML 요소의 "local" 이름</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Local in this context means as mapped versus the provided <ph id="ph1">`xmlNamespace`</ph>.</source>
          <target state="translated">이 컨텍스트에서 로컬 의미와 제공 된 매핑 <ph id="ph1">`xmlNamespace`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; for the object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no mapping could be resolved.</source>
          <target state="translated">&lt;xref:System.Type&gt;개체 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 매핑이 없는 확인할 수 있는 경우.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;localName&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;localName&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifies the path to use when loading an assembly.</source>
          <target state="translated">어셈블리를 로드할 때 사용할 경로를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The short name of the assembly without an extension or path specified (equivalent to <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>).</source>
          <target state="translated">확장명 또는 경로 지정 하지 않고 어셈블리의 짧은 이름 (해당 하 <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The file path of the assembly.</source>
          <target state="translated">어셈블리의 파일 경로입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The assembly path must be a full file path containing a file extension.</source>
          <target state="translated">어셈블리 경로는 파일 확장명을 포함 하는 전체 파일 경로 여야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref:System.String&gt;</ph>       -or-       <ph id="ph3">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>       -or-       <ph id="ph5">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is not a full file path containing a file extension.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph><ph id="ph2">&lt;xref:System.String&gt;</ph> -또는- <ph id="ph3">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> 은 <ph id="ph4">&lt;xref:System.String&gt;</ph> -또는- <ph id="ph5">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> 은 파일 확장명을 포함 하는 전체 파일 경로가 아닙니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>