<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc96f5d826913c72f4b28898e711248f18446e84</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.IDesignerSerializationManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c96c2320520be75b3549f49e3edd205877733c8f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0c7a907a00a6ba1e153d6d7eb21a26b8486e3ba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an interface that can manage design-time serialization.</source>
          <target state="translated">디자인 타임 serialization을 관리할 수 있는 인터페이스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A designer can utilize IDesignerSerializationManager to access services useful to managing design-time serialization processes.</source>
          <target state="translated">디자이너는 디자인 타임 serialization 프로세스 관리에 유용한 서비스를 IDesignerSerializationManager을 활용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.</source>
          <target state="translated">예를 들어 디자이너 serialization 관리자를 구현 하는 클래스 개체를 만들, 형식을 조회 하 고, 개체를 식별 하 고 특정 형식의 serialization을 사용자 지정 하려면이 인터페이스를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds the specified serialization provider to the serialization manager.</source>
          <target state="translated">Serialization 관리자에 지정된 된 serialization 공급자를 추가합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method adds a custom serialization provider to the serialization manager.</source>
          <target state="translated">이 메서드를 serialization 관리자는 사용자 지정 serialization 공급자를 추가합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Serialization providers can provide custom serializers for a particular type of object or set of types of objects.</source>
          <target state="translated">Serialization 공급자는 특정 유형의 개체 또는 개체의 형식 집합에 대 한 사용자 지정 serializer를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one.</source>
          <target state="translated">직렬화 중에 각 사용자 지정 serialization 공급자는 하나를 제공할 수 있으면 특정 데이터 형식에 대 한 serializer를 반환 하도록 쿼리 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.</source>
          <target state="translated">Serialization 관리자는 특정 형식에 대 한 기본 serializer를 사용 하기 전에이 메서드에서 제공 하는 사용자 지정 serializer를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The serialization provider to add.</source>
          <target state="translated">추가할 serialization 공급자입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets a stack-based, user-defined storage area that is useful for communication between serializers.</source>
          <target state="translated">Serializer 간의 통신에 유용한 스택 기반의 사용자 정의 저장소 영역을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This storage area provides communication of object context information to serializers.</source>
          <target state="translated">이 저장소 영역 serializer를 통신 개체 컨텍스트 정보를 제공합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Context information about objects that are being serialized can be stored and accessed through this &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.</source>
          <target state="translated">Serialize 되 고 개체에 대 한 컨텍스트 정보를 저장 하 고이 &lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.ContextStack&gt; 를 통해 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that stores data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 데이터를 저장 하는 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creates an instance of the specified type and adds it to a collection of named instances.</source>
          <target state="translated">지정 된 형식의 인스턴스를 만들어 명명 된 인스턴스의 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that implement &lt;xref:System.ComponentModel.IComponent&gt; are added to the design-time container if the <ph id="ph1">`addToContainer`</ph> parameter is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">구현 하는 개체 &lt;xref:System.ComponentModel.IComponent&gt;경우 디자인 타임 컨테이너에 추가 되는 <ph id="ph1">`addToContainer`</ph> 매개 변수는 <ph id="ph2">`true`</ph>.&lt;/xref:System.ComponentModel.IComponent&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data type to create.</source>
          <target state="translated">만들려는 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor for this type.</source>
          <target state="translated">이 형식에 대 한 생성자에 전달할 인수입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the object.</source>
          <target state="translated">개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This name can be used to access the object later through &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt;.</source>
          <target state="translated">이 이름은 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*&gt; 통해 나중에 개체 액세스 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the object is still created but cannot be accessed by name.</source>
          <target state="translated">경우 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 은 전달 된 개체는 계속 만들어지지만 이름으로 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, this object is added to the design container.</source>
          <target state="translated">경우 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>,이 개체를 디자인 컨테이너에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The object must implement <bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this to have any effect.</source>
          <target state="translated">개체를 구현 해야 <bpt id="p1">&lt;xref href="System.ComponentModel.IComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 영향을 줄 수에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The newly created object instance.</source>
          <target state="translated">새로 만든된 개체 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets an instance of a created object of the specified name, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if that object does not exist.</source>
          <target state="translated">지정된 된 이름 가진 생성된 된 개체의 인스턴스를 가져옵니다 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 해당 개체가 존재 하지 않는 경우.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the object to retrieve must have been set through a prior call to &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.</source>
          <target state="translated">검색할 개체의 이름 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt; 를 이전에 호출을 통해 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the object to retrieve.</source>
          <target state="translated">검색할 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An instance of the object with the given name, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no object by that name can be found.</source>
          <target state="translated">지정 된 이름의 개체의 인스턴스 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 해당 이름의 개체를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the name of the specified object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object has no name.</source>
          <target state="translated">지정된 된 개체의 이름을 가져옵니다 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체에 이름이 없는 경우.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The object to retrieve the name for.</source>
          <target state="translated">에 대 한 이름을 검색 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object is unnamed.</source>
          <target state="translated">개체의 이름 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 이름이 없으면 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets a serializer of the requested type for the specified object type.</source>
          <target state="translated">지정된 된 개체 형식에 대 한 요청 된 형식의 serializer를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of the object to get the serializer for.</source>
          <target state="translated">에 대 한 직렬 변환기를 가져올 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type of the serializer to retrieve.</source>
          <target state="translated">검색할 serializer의 형식입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An instance of the requested serializer, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no appropriate serializer can be located.</source>
          <target state="translated">요청 된 serializer의 인스턴스 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 적절 한 serializer가 찾을 수 없으면입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets a type of the specified name.</source>
          <target state="translated">지정 된 이름의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type to load.</source>
          <target state="translated">로드 하는 유형의 정규화 된 이름입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An instance of the type, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type cannot be loaded.</source>
          <target state="translated">형식의 인스턴스 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식을 로드할 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indicates custom properties that can be serializable with available serializers.</source>
          <target state="translated">사용 가능한 serializer로 직렬화 될 수 있는 사용자 지정 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can contain an empty collection.</source>
          <target state="translated">이 속성은 빈 컬렉션을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A serializer should never assume that such properties exist.</source>
          <target state="translated">Serializer 해야 이러한 속성이 존재 하는 것이 아닙니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class or implementation of &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt; defines the set of properties that are exposed here.</source>
          <target state="translated">파생된 클래스 또는 구현의 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;여기에 노출 되는 속성의 집합을 정의 합니다.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.ComponentModel.PropertyDescriptorCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the properties to be serialized.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.ComponentModel.PropertyDescriptorCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 직렬화 할 속성을 포함 하 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Removes a custom serialization provider from the serialization manager.</source>
          <target state="translated">Serialization 관리자에서 사용자 지정 serialization 공급자를 제거합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The provider to remove.</source>
          <target state="translated">제거할 공급자입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This object must have been added using &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt;.</source>
          <target state="translated">이 개체 추가 되어 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*&gt; 를 사용 하 여</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Reports an error in serialization.</source>
          <target state="translated">Serialization의에서 오류를 보고합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the serialization manager supports logging multiple errors in its implementation of ReportError, it can store the error information object for a future report where all the errors encountered can be displayed at once.</source>
          <target state="translated">Serialization 관리자 ReportError 구현에서 여러 개의 오류를 로깅을 지 원하는 경우 발생 한 모든 오류를 한 번에 표시 될 수 있는 향후 보고서에 대 한 오류 정보 개체를 저장할 수 저장할 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method stores multiple errors, serialization can continue after a call to this method.</source>
          <target state="translated">이 메서드는 여러 오류를 저장, serialization이이 메서드를 호출한 후 계속 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.</source>
          <target state="translated">이 방법은 여러 개의 오류를 기록 하는 것을 지원 하지 않습니다, 하는 경우이 메서드는 serialization을 중단 하는 예외를 throw 해야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The serialization manager should never throw an exception for errors encountered during serialization.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Serialization 관리자는 직렬화 하는 동안 발생 한 오류에 대 한 예외를 throw 하지 해야 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should only throw an exception during deserialization.</source>
          <target state="translated">만 역직렬화 하는 동안 예외가 throw 해야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, users become confused because saving the document should never fail.</source>
          <target state="translated">그렇지 않으면 사용자가 문서를 저장 하기 때문에 혼란 스 러 워 실패 하지 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The error to report.</source>
          <target state="translated">보고서에 대 한 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This information object can be of any object type.</source>
          <target state="translated">이 정보 개체는 모든 개체 유형일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If it is an exception, the message of the exception is extracted and reported to the user.</source>
          <target state="translated">예외 이면 예외 메시지 추출 하 고 사용자에 게 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If it is any other type, &lt;xref:System.Object.ToString*&gt; is called to display the information to the user.</source>
          <target state="translated">다른 형식인 경우 &lt;xref:System.Object.ToString*&gt;사용자에 게 정보를 표시 하기 위해 호출 됩니다.&lt;/xref:System.Object.ToString*&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt; cannot locate the specified name in the serialization manager's name table.</source>
          <target state="translated">발생 경우 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt;지정된 된 이름을 serialization 관리자의 이름 테이블에서 찾을 수 없습니다.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency.</source>
          <target state="translated">이 이벤트 종속성에 의해 serializer가 개체 생성을 명령에 보유 하지 않는 serializer 필요에 따라 개체를 만들 수 있는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate for this event is cleared immediately after serialization or deserialization is complete.</source>
          <target state="translated">이 이벤트에 대 한 대리자는 serialization 후 즉시 제거 됩니다 또는 deserialization이 완료 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Occurs when serialization is complete.</source>
          <target state="translated">Serialization이 완료 되었을 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when serialization or deserialization is complete.</source>
          <target state="translated">이 이벤트는 serialization 또는 deserialization이 완료 하는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing.</source>
          <target state="translated">일반적으로 serialization 코드를 serialization 데이터를 내보낼 쓰고 상태 관련 확인 및 처리가 일반적으로 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the SerializationComplete event, and clear the data after serialization.</source>
          <target state="translated">Serialization 동안 상태 데이터를 유지 해야 하는 데이터를 설정 하거나 SerializationComplete 이벤트를 수신 하 고 serialization 후 데이터를 지울 수 있는 serializer에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.</source>
          <target state="translated">직렬화 중에 직렬 변환기를 다시 사용할 수 있습니다 하 고 나머지 상태 데이터 나 열려 있는 스트림이 올바르지 않을 수 있으므로 serialization 중요할 수 있습니다 후 적절 한 상태를 복원 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished.</source>
          <target state="translated">예를 들어 serializer 리소스 파일 등의 다른 파일에 쓸 수 있어야 하는 경우 이기 완료 되 면 파일을 닫고 serializer를 디자인 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Serializing an object graph usually requires several serializers.</source>
          <target state="translated">일반적으로 개체 그래프를 직렬화 하는 중 몇 가지 serializer 필요 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource file would be opened and closed many times.</source>
          <target state="translated">리소스 파일을 열고 여러 번을 닫을 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the resource file can be closed at the end of serialization by an object that listened to the SerializationComplete event.</source>
          <target state="translated">대신, 리소스 파일 SerializationComplete 이벤트 수신 대기 하는 개체로 직렬화의 끝에 닫을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Sets the name of the specified existing object.</source>
          <target state="translated">지정된 된 기존 개체의 이름을 설정합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful when it is necessary to create and then name an instance of an object without using &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.</source>
          <target state="translated">만들고 다음 &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt; 사용 하지 않고 개체의 인스턴스 이름을 지정 해야 하는 경우이 메서드가 유용 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.</source>
          <target state="translated">기존 개체의 이름을 변경 하려는 경우 또는 새 개체에 이미 사용 되는 이름을 지정 하려고 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The object instance to name.</source>
          <target state="translated">이름에는 개체 인스턴스.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The name to give the instance.</source>
          <target state="translated">인스턴스에 지정할 이름입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>