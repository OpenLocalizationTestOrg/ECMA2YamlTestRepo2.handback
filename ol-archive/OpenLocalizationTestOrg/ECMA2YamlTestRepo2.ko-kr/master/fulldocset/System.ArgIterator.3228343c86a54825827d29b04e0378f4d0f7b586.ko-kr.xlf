<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff886eeb61ea08b7a181aae86ece61d64676c147</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ArgIterator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97074f1e87ec336d4772f8378a791f98e736a30d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c863d7934db9fb2827f0fc39902e5226a406636</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.</source>
          <target state="translated">가변 길이 인수 목록을; 나타냅니다. 즉, 함수 매개 변수 생긴다는 가변 인수 수입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list.</source>
          <target state="translated">컴파일러를 작성 하는 개발자 필수 및 선택적 인수는 인수 목록에서 열거 하는 ArgIterator 구조를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ArgIterator structure is not generally useful for applications other than compilers.</source>
          <target state="translated">ArgIterator 구조 컴파일러 이외의 응용 프로그램에 일반적으로 유용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language.</source>
          <target state="translated">기능 ArgIterator 구조에서 특정 프로그래밍 언어의 구문에 일반적으로 숨겨져 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis ("...") at the end of the argument list.</source>
          <target state="translated">예를 들어 프로그래밍 언어는 c + +는 인수 목록의 끝에 줄임표 ("…")를 가변 길이 인수 목록을 선언 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.</source>
          <target state="translated">ArgIterator 구조는 개발 언어를 지원 하지 않는 직접 가변 길이 매개 변수를 액세스 하기 위한 경우에 주로 유용 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure using the specified argument list.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인수 목록을 사용 하 여 구성 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the first optional argument.</source>
          <target state="translated">새 &lt;xref:System.ArgIterator&gt;개체의 첫 번째 선택적 인수에서 시작 하는 인수 목록을 열거 합니다.&lt;/xref:System.ArgIterator&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
          <target state="translated">필수 인수와 선택적 인수 구성 되는 인수 목록입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure using the specified argument list and a pointer to an item in the list.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.ArgIterator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 목록에 지정된 된 인수 목록 및 항목에 대 한 포인터를 사용 하 여 구성 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the argument specified by <ph id="ph1">`ptr`</ph>, or the first mandatory argument if <ph id="ph2">`ptr`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">새 &lt;xref:System.ArgIterator&gt;개체에 지정 된 인수에서 시작 하는 인수 목록을 열거 <ph id="ph1">`ptr`</ph>, 또는 첫 번째 필수 인수 경우 <ph id="ph2">`ptr`</ph> 은 <ph id="ph3">`null`</ph>.&lt;/xref:System.ArgIterator&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
          <target state="translated">필수 인수와 선택적 인수 구성 되는 인수 목록입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to the argument in <ph id="ph1">`arglist`</ph> to access first, or the first mandatory argument in <ph id="ph2">`arglist`</ph> if <ph id="ph3">`ptr`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">인수에 대 한 포인터 <ph id="ph1">`arglist`</ph> 첫 번째 옵션 또는 첫 번째 필수 인수에 액세스 하려면 <ph id="ph2">`arglist`</ph> 경우 <ph id="ph3">`ptr`</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Concludes processing of the variable-length argument list represented by this instance.</source>
          <target state="translated">이 인스턴스가 나타내는 가변 길이 인수 그룹의 처리가 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, End concludes the processing of a variable-length argument list.</source>
          <target state="translated">개념적으로 끝으로 가변 길이 인수 목록 처리를 마칩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this method has no actual implementation; the End method body is empty.</source>
          <target state="translated">그러나이 메서드는 실제 구현이 없습니다. End 메서드 본문이 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.</source>
          <target state="translated">이 메서드를 논리적으로 처리 하는 가변 길이 인수 목록 끝나는 나타내려면 표식으로 코드에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The End method corresponds to the <ph id="ph1">`va_end`</ph> method in the C standard library.</source>
          <target state="translated">에 해당 하는 End 메서드는 <ph id="ph1">`va_end`</ph> C 표준 라이브러리의 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method is not supported, and always throws &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">이 메서드는 지원 되지 않으며 &lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt; 는 항상 throw</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An object to be compared to this instance.</source>
          <target state="translated">이 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This comparison is not supported.</source>
          <target state="translated">이 비교는 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
          <target state="translated">아무 값도 반환 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method is not supported.</source>
          <target state="translated">이 메서드가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the hash code of this object.</source>
          <target state="translated">이 개체의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32 비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list.</source>
          <target state="translated">가변 길이 인수 목록에서 다음 인수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The iterator is automatically advanced to the next argument.</source>
          <target state="translated">반복기는 다음 인수를 자동으로 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next argument as a <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">로 서의 다음 인수는 <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
          <target state="translated">목록의 끝을 넘어 읽으려고 했습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list that has a specified type.</source>
          <target state="translated">지정 된 형식이 지정 된 가변 길이 인수 목록에서 다음 인수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The iterator is automatically advanced to the next argument.</source>
          <target state="translated">반복기는 다음 인수를 자동으로 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A runtime type handle that identifies the type of the argument to retrieve.</source>
          <target state="translated">에 검색 인수의 형식을 식별 하는 런타임 형식 핸들입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The next argument as a <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">로 서의 다음 인수는 <bpt id="p1">&lt;xref href="System.TypedReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
          <target state="translated">목록의 끝을 넘어 읽으려고 했습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The pointer to the remaining arguments is zero.</source>
          <target state="translated">나머지 인수에 대 한 포인터는&amp;0;입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the type of the next argument.</source>
          <target state="translated">다음 인수 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not advance the iterator to the next argument.</source>
          <target state="translated">이 메서드는 다음 인수에 반복기를 진행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetNextArgType returns the type of the argument as specified in the calling function.</source>
          <target state="translated">GetNextArgType 함수 호출에서 지정 된 대로 인수의 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an argument is type &lt;xref:System.String&gt;, but the calling function specifies the argument as type &lt;xref:System.Object&gt;, GetNextArgType reports the argument as type &lt;xref:System.Object&gt;.</source>
          <target state="translated">예를 들어, 형식 인수가 &lt;xref:System.String&gt;, 호출 함수 &lt;xref:System.Object&gt;GetNextArgType 보고 이름 필드에 &lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt; 로 서의 인수,&lt;/xref:System.Object&gt; 입력 인수를 지정 하지만&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of the next argument.</source>
          <target state="translated">다음 인수 형식입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the number of arguments remaining in the argument list.</source>
          <target state="translated">인수 목록에 남아 있는 인수 개수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The number of remaining arguments.</source>
          <target state="translated">나머지 인수의 수입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>