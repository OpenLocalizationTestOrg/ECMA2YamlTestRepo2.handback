<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd77ce9ae4bff918cb155252ff8cd46db0814bf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.HMACSHA512.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7deed3b24a54d69aa7c8fd00c0c513ab4c4cc1cc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebf21e8d035964fd6cf6399d5d5b7b76a7e73cfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <bpt id="p1">&lt;xref href="System.Security.Cryptography.SHA512"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> hash function.</source>
          <target state="translated">해시 기반 계산 HMAC 메시지 인증 코드 ()를 사용 하는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.SHA512"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 됩니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>HMACSHA512 is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated">HMACSHA512에 s h A-512 해시 함수에서 생성 된 및로 HMAC 해시 기반 메시지 인증 코드 () 사용 되는 키 지정된 해시 알고리즘의 형식입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HMAC process mixes a secret key with the message data and hashes the result.</source>
          <target state="translated">HMAC 프로세스는 메시지 데이터에는 비밀 키를 혼합 하 고 그 결과입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hash value is mixed with the secret key again, and then hashed a second time.</source>
          <target state="translated">해시 값이 다시 비밀 키와 혼합 하 고를 두 번째로 해시 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The output hash is 512 bits in length.</source>
          <target state="translated">출력 해시는 길이 512 비트입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC 비밀 키를 공유 하는 발신자와 수신자 보안상 위험한 채널을 통해 보낸 메시지가 훼손 되었는지 여부를 확인 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">보낸 사람에 게는 원본 데이터에 대 한 해시 값을 계산 하 고 단일 메시지로 원래 데이터와 해시 값을 보냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">수신자는 받은 메시지에 대해 해시 값을 다시 계산 하 고 계산된 HMAC 전송 된 HMAC 일치 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">원래과 계산 된 해시 값이 일치 하는 경우에 메시지 인증 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If they do not match, either the data or the hash value has been changed.</source>
          <target state="translated">일치 하지 않으면 데이터 나 해시 값 변경 되었습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">Hmac 비밀 키의 지식이 없어도 메시지를 변경 하 고 올바른 해시 값을 다시 만들기 때문에 변조 행동에 대해 보안을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>HMACSHA512 accepts keys of any size, and produces a hash sequence of length 512 bits.</source>
          <target state="translated">HMACSHA512 모든 크기의 키를 받아서 512 비트 길이는 해시 시퀀스를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a randomly generated key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 임의로 생성 된 키를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this constructor, a 64-byte, randomly generated key is used.</source>
          <target state="translated">이 생성자는 64 바이트 임의로 생성 된 키가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified key data.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 키 데이터를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The secret key for <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> encryption.</source>
          <target state="translated">에 대 한 비밀 키 <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The key can be any length.</source>
          <target state="translated">키 길이는 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, the recommended size is 128 bytes.</source>
          <target state="translated">그러나 권장된 크기는 128 바이트입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key.</source>
          <target state="translated">키가 128 바이트를 초과 합니다 (사용 하 여 s h A-512) 해시 되기 128 비트 키를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If it is less than 128 bytes long, it is padded to 128 bytes.</source>
          <target state="translated">128 바이트 보다 작은 경우 128 바이트 패딩 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Provides a workaround for the <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> implementation of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> algorithm, which is inconsistent with the <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> implementation.</source>
          <target state="translated">에 대 한 해결 방법을 제공는 <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> 구현의 <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA512"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 일치 하지 않는 알고리즘의 <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of the ProduceLegacyHmacValues Boolean property is to enable <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> applications.</source>
          <target state="translated">사용할 수 있도록 ProduceLegacyHmacValues Boolean 속성의 목적은 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> 와 상호 작용 하는 응용 프로그램 <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set this property to <ph id="ph1">`true`</ph>, the &lt;xref:System.Security.Cryptography.HMACSHA512&gt; object produces values that match the values produced by the <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>.</source>
          <target state="translated">이 속성을 설정 하면 <ph id="ph1">`true`</ph>, &lt;xref:System.Security.Cryptography.HMACSHA512&gt;에서 생성 된 값과 일치 하는 값을 생성 하는 개체는 <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph>.&lt;/xref:System.Security.Cryptography.HMACSHA512&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should set this property only once after you create your HMAC object.</source>
          <target state="translated">HMAC 개체를 만든 후에이 속성을 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will need to reset your key afterwards, as shown in the following example.</source>
          <target state="translated">됩니다 다시 설정 해야 키 이후에, 다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to enable <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>사용할 수 있도록 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph> 응용 프로그램 상호 작용을 <ph id="ph2">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> 응용 프로그램, 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>