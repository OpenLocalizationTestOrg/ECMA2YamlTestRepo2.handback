<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">905c14769cbf01faa2a4715cab9ff22565142665</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Serialization.IDataContractSurrogate.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">481b3baeeb0047f6149426f1bf21529d6e6c71d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33df00df818b2b1baa8399c5998c1f9267961c1e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the methods needed to substitute one type for another by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; during serialization, deserialization, and export and import of XML schema documents (XSD).</source>
          <target state="translated">다른 형식으로 대체 하는 데 필요한 메서드를 제공는 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;중 serialization, deserialization 및 스키마 XSD (XML 문서) 가져오기 및 내보내기.&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the IDataContractSurrogate when using the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</source>
          <target state="translated">사용 하는 경우는 IDataContractSurrogate를 사용 하 여는 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;다음 중 하나를 수행 해야 할 경우: 유형임을 대체 하거나 또 다른 경우 또는 스키마 변형을 동적으로 생성 하는 개체입니다.&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a sample application, see <bpt id="p1">[</bpt>DataContract Surrogate<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">샘플 응용 프로그램에 대 한 참조 <bpt id="p1">[</bpt>DataContract 서로게이트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about data contracts, see <bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">데이터 계약에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>를 사용 하 여 데이터 계약<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, you can find the specific &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt; for any operation in a service by using the &lt;xref:System.ServiceModel.Description.OperationDescription&gt; to find the &lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt; instance.</source>
          <target state="translated">실행 시 특정을 찾을 수 있습니다 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;사용 하 여 서비스의 모든 작업에 대해는 &lt;xref:System.ServiceModel.Description.OperationDescription&gt;찾으려고는 &lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;인스턴스.&lt;/xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt; &lt;/xref:System.ServiceModel.Description.OperationDescription&gt; &lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing the interface to create a surrogate, see <bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">서로게이트를 만들려면 인터페이스를 구현 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 계약 서로게이트<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the IDataContractSurrogate to affect the import and export of XML schemas when you are using the &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt; and &lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt; classes.</source>
          <target state="translated">가져오기 및 내보내기는 XML 스키마를 사용 하는 경우 영향을 줄의 IDataContractSurrogate을 사용할 수도 있습니다는 &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;및 &lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;클래스.&lt;/xref:System.Runtime.Serialization.XsdDataContractImporter&gt; &lt;/xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do so by assigning the IDataContractSurrogate to the &lt;xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt; property of the &lt;xref:System.Runtime.Serialization.ExportOptions&gt; class, or to the &lt;xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A&gt; property of the &lt;xref:System.Runtime.Serialization.ImportOptions&gt; class.</source>
          <target state="translated">IDataContractSurrogate를 할당 하 여 그렇게 할 수는 &lt;xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt;의 속성은 &lt;xref:System.Runtime.Serialization.ExportOptions&gt;클래스 또는 &lt;xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A&gt; &lt;xref:System.Runtime.Serialization.ImportOptions&gt;클래스&lt;/xref:System.Runtime.Serialization.ImportOptions&gt; 의 속성&lt;/xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A&gt; 에&lt;/xref:System.Runtime.Serialization.ExportOptions&gt; &lt;/xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Schema Import and Export<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스키마 가져오기 및 내보내기<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
          <target state="translated">스키마 내보내기 작업 중, null이 아닌 반환 값에 대 한 스키마에 주석을 삽입합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.MemberInfo&gt; that describes the member.</source>
          <target state="translated">A &lt;xref:System.Reflection.MemberInfo&gt;멤버를 설명 하는.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Type&gt;.</source>
          <target state="translated">A &lt;xref:System.Type&gt;.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
          <target state="translated">XML 스키마 정의에 삽입할 주석을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
          <target state="translated">스키마 내보내기 작업 중, null이 아닌 반환 값에 대 한 스키마에 주석을 삽입합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The CLR type to be replaced.</source>
          <target state="translated">바꿀 CLR 형식입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data contract type to be annotated.</source>
          <target state="translated">주석을 추가할 데이터 계약 형식입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
          <target state="translated">XML 스키마 정의에 삽입할 주석을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</source>
          <target state="translated">Serialization, deserialization 및 스키마 가져오기 및 내보내기 중에 지정한 형식을 대체 하는 데이터 계약 형식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The CLR type &lt;xref:System.Type&gt; to substitute.</source>
          <target state="translated">CLR 형식 &lt;xref:System.Type&gt;대체할.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to substitute for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> value.</source>
          <target state="translated">&lt;xref:System.Type&gt;를 대체할는 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">type</ph> <ept id="p1">&lt;/code&gt;</ept> 값.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This type must be serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
          <target state="translated">이 형식에 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt; 직렬화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
          <target state="translated">예를 들어으로 표시 되어야 합니다는 &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;특성 또는 serializer가 인식 하는 기타 메커니즘.&lt;/xref:System.Runtime.Serialization.DataContractAttribute&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>During deserialization, returns an object that is a substitute for the specified object.</source>
          <target state="translated">역직렬화 하는 동안 지정된 된 개체에 대 한 대체 하는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a simple implementation, use an if…then…else control structure to test whether the <ph id="ph1">`obj`</ph> value is of the surrogated type.</source>
          <target state="translated">간단한 구현을 사용 하 여 if... then... else 제어 구조를 테스트 하는지 여부를 <ph id="ph1">`obj`</ph> 서로게이트 된 형식의 값은 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, transform it as necessary and return the substituted object.</source>
          <target state="translated">이 경우 필요한으로 반환에서 대체 된 개체를 변환 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The substituted object can be a new instance or the same <ph id="ph1">`obj`</ph> instance.</source>
          <target state="translated">새 인스턴스 또는 동일한 대체 된 개체 수 <ph id="ph1">`obj`</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The deserialized object to be substituted.</source>
          <target state="translated">대체 되는 deserialize 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; that the substituted object should be assigned to.</source>
          <target state="translated">&lt;xref:System.Type&gt;에 대체 된 개체를 할당 해야 합니다.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The substituted deserialized object.</source>
          <target state="translated">대체 된 역직렬화 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This object must be of a type that is serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
          <target state="translated">이 개체에 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt; 직렬화 할 수 있는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
          <target state="translated">예를 들어으로 표시 되어야 합니다는 &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;특성 또는 serializer가 인식 하는 기타 메커니즘.&lt;/xref:System.Runtime.Serialization.DataContractAttribute&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets the collection of known types to use for serialization and deserialization of the custom data objects.</source>
          <target state="translated">Serialization에 사용할 알려진된 형식 컬렉션 및 사용자 지정 데이터 개체의 역직렬화를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is required during schema export or schema import only if annotations are inserted into the schema using the &lt;xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A&gt; method.</source>
          <target state="translated">이 메서드는 스키마 내보내기 또는 스키마 가져오기 중 경우에 사용 하 여 스키마에 주석을 삽입 하는 &lt;xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A&gt;메서드.&lt;/xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.ObjectModel.Collection%601<ph id="ph2">&amp;gt;</ph> of &lt;xref:System.Type&gt; to add known types to.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.ObjectModel.Collection%601<ph id="ph2">&amp;gt;</ph> 의 &lt;xref:System.Type&gt;에 알려진된 형식을 추가 합니다.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>During serialization, returns an object that substitutes the specified object.</source>
          <target state="translated">직렬화 중에 지정된 된 개체를 대체 하는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method must not return <ph id="ph1">`null`</ph> because on deserialization the data will be cast to type &lt;xref:System.Object&gt; and an &lt;xref:System.InvalidCastException&gt; is thrown.</source>
          <target state="translated">이 메서드는 반환 하지 않아야 <ph id="ph1">`null`</ph> deserialization 중에 데이터 형식으로 캐스팅 됩니다 &lt;xref:System.Object&gt;및 &lt;xref:System.InvalidCastException&gt;throw 됩니다.&lt;/xref:System.InvalidCastException&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object to substitute.</source>
          <target state="translated">대체할 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; that the substituted object should be assigned to.</source>
          <target state="translated">&lt;xref:System.Type&gt;에 대체 된 개체를 할당 해야 합니다.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The substituted object that will be serialized.</source>
          <target state="translated">Serialize 될 대체 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The object must be serializable by the &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.</source>
          <target state="translated">개체에 &lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;.&lt;/xref:System.Runtime.Serialization.DataContractSerializer&gt; 직렬화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt; attribute or other mechanisms that the serializer recognizes.</source>
          <target state="translated">예를 들어으로 표시 되어야 합니다는 &lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;특성 또는 serializer가 인식 하는 기타 메커니즘.&lt;/xref:System.Runtime.Serialization.DataContractAttribute&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>During schema import, returns the type referenced by the schema.</source>
          <target state="translated">스키마 가져오기 중 스키마에서 참조 하는 형식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Null`</ph> should be returned if a CLR type does not exist for representing the schema type.</source>
          <target state="translated"><ph id="ph1">`Null`</ph>반환 되어야 합니다는 CLR 형식 스키마 형식을 나타내기에 대 한 존재 하지 않는 경우.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will cause a new type to be generated during schema import.</source>
          <target state="translated">이렇게 하면 새 형식을 스키마 가져오기 중에 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name of the type in schema.</source>
          <target state="translated">스키마에서 유형 이름입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The namespace of the type in schema.</source>
          <target state="translated">네임 스페이스 스키마의 형식입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</source>
          <target state="translated">데이터는 참조 된 형식을 찾는 데 사용할 수 있는 XML 스키마 정의에 삽입할 주석을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to use for the referenced type.</source>
          <target state="translated">&lt;xref:System.Type&gt;참조 된 형식에 대해 사용할.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Processes the type that has been generated from the imported schema.</source>
          <target state="translated">가져온된 스키마에서 생성 된 형식을 처리 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; or other information in the &lt;xref:System.CodeDom.CodeCompileUnit&gt; can be modified by the user in this method.</source>
          <target state="translated">입력 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;또는 기타 정보에는 &lt;xref:System.CodeDom.CodeCompileUnit&gt;이 방법에서는 사용자가 수정할 수 있습니다.&lt;/xref:System.CodeDom.CodeCompileUnit&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`null`</ph> is returned, it will cause the type to not be generated.</source>
          <target state="translated">경우 <ph id="ph1">`null`</ph> 형식이 생성 되지 하면 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; is returned, it will replace the original type generated.</source>
          <target state="translated">새 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;반환 되 면 생성 된 원래 형식을 바뀝니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to process that represents the type declaration generated during schema import.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 가져오기 중에 생성 된 형식 선언을 나타내는 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the other code generated during schema import.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 가져오기 중에 생성 된 다른 코드를 포함 하는 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the processed type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 처리 된 형식을 포함 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>