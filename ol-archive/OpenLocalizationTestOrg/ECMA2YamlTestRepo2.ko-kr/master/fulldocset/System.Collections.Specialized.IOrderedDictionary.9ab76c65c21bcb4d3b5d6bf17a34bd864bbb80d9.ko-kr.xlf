<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4bc886fa7a56c7eb8ae26cc12138d2c48f9cd2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Specialized.IOrderedDictionary.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89bdfef4c2f459fd071edb6fdfde8601b397fbc0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79bb36ed007e7b4f9de4a448db98cff7469fee9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an indexed collection of key/value pairs.</source>
          <target state="translated">키/값 쌍의 인덱싱된 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>IOrderedDictionary elements can be accessed either with the key or with the index.</source>
          <target state="translated">키 또는 인덱스와 IOrderedDictionary 요소를 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each element is a key/value pair stored in a &lt;xref:System.Collections.DictionaryEntry&gt; structure.</source>
          <target state="translated">각 요소에 저장 된 키/값 쌍은는 &lt;xref:System.Collections.DictionaryEntry&gt;구조.&lt;/xref:System.Collections.DictionaryEntry&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each pair must have a unique key that is not <ph id="ph1">`null`</ph>, but the value can be <ph id="ph2">`null`</ph> and does not have to be unique.</source>
          <target state="translated">각 쌍에는 없는 고유 키가 있어야 <ph id="ph1">`null`</ph>, 값일 수는 있지만 <ph id="ph2">`null`</ph> 및 고유할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The IOrderedDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
          <target state="translated">IOrderedDictionary 인터페이스에서는 포함 된 키와 값을 열거할 수 있지만 특정 정렬 순서를 의미 하지는 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`For Each`</ph> Visual basic에서) 컬렉션의 요소 형식의 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because each element of the &lt;xref:System.Collections.IDictionary&gt; is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">때문에의 각 요소는 &lt;xref:System.Collections.IDictionary&gt;은 키/값 쌍 요소 형식이 키의 형식 또는 값의 형식입니다.&lt;/xref:System.Collections.IDictionary&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the element type is &lt;xref:System.Collections.DictionaryEntry&gt;, as the following example shows.</source>
          <target state="translated">요소 형식이 대신 &lt;xref:System.Collections.DictionaryEntry&gt;다음 예제와 같이.&lt;/xref:System.Collections.DictionaryEntry&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p2">](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p4">](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p6">](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)</ept><ept id="p5">]</ept>       The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p2">](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p4">](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#03<ept id="p6">](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb)</ept> <ept id="p5">]</ept> 는 <ph id="ph1">`foreach`</ph> 문에 주변 열거자를 컬렉션에 쓰는 것부터 읽기를 허용 합니다.    </target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">반복 하는 열거자를 반환 된 <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic, C#]       The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">[Visual Basic, C#]       <ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`for each`</ph> Visual basic에서)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended instead of directly manipulating the enumerator.</source>
          <target state="translated">따라서 사용 하 여 <ph id="ph1">`foreach`</ph> 열거자를 직접 조작 하는 대신 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;또한이 위치로 복원 열거자를 가져옵니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property is undefined.</source>
          <target state="translated">이 위치는 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;속성이 정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">따라서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환할 수도 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;그 뒤 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 설정 하려면</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the entire <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionaryEnumerator&gt;전체 <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션.&lt;/xref:System.Collections.IDictionaryEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Inserts a key/value pair into the collection at the specified index.</source>
          <target state="translated">키/값 쌍을 컬렉션 내의 지정한 인덱스에 삽입합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.Specialized.IOrderedDictionary&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`index`</ph> parameter is equal to &lt;xref:System.Collections.ICollection.Count%2A&gt;, the <ph id="ph2">`value`</ph> parameter is added to the end of the &lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; collection.</source>
          <target state="translated">경우는 <ph id="ph1">`index`</ph> 매개 변수와 같으면 &lt;xref:System.Collections.ICollection.Count%2A&gt;, <ph id="ph2">`value`</ph> 매개 변수가의 끝에 추가 되는 &lt;xref:System.Collections.Specialized.IOrderedDictionary&gt;컬렉션.&lt;/xref:System.Collections.Specialized.IOrderedDictionary&gt; &lt;/xref:System.Collections.ICollection.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">연속 요소를 컬렉션의 목록, 삽입 지점 다음에 오는 요소를 아래로 이동 처럼 새 요소를 적용 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.</source>
          <target state="translated">여기서 요소는 개념적으로 그룹화 되어 해시 테이블 같은 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The zero-based index at which the key/value pair should be inserted.</source>
          <target state="translated">키/값 쌍을 삽입할&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object to use as the key of the element to add.</source>
          <target state="translated">추가할 요소의 키로 사용 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object to use as the value of the element to add.</source>
          <target state="translated">추가할 요소의 값으로 사용 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크면 <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An element with the same key already exists in the <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">같은 키를 가진 요소가 이미는 <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">지정된 된 인덱스에 요소를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.Specialized.IOrderedDictionary&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.Specialized.IOrderedDictionary&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the Item property.</source>
          <target state="translated">C# 언어는 키워드를 사용 하 여 항목 속성을 구현 하는 대신 인덱서를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic implements Item as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 기본 속성으로 항목을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows you to access a specific element in the collection by using the following syntax:       <bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id="p2">](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id="p4">](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)</ept><ept id="p5">]</ept></source>
          <target state="translated">이 속성을 사용 하면 다음 구문을 사용 하 여 컬렉션의 특정 요소에 액세스할 수 있습니다: <bpt id="p1">[!code-cs</bpt> <bpt id="p2">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id="p2">](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04<ept id="p4">](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Collections.Specialized.IOrderedDictionary_Implementation#04    <ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)</ept><ept id="p5">]</ept></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">가져오거나 설정할 요소의&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The element at the specified index.</source>
          <target state="translated">지정된 된 인덱스에 요소입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크거나 같으면 <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Removes the element at the specified index.</source>
          <target state="translated">지정된 된 인덱스에 요소를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.</source>
          <target state="translated">여기서 요소는 개념적으로 그룹화 되어 해시 테이블 같은 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">제거할 요소의&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크거나 같으면 <ph id="ph2">&lt;xref:System.Collections.ICollection.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.Specialized.IOrderedDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션 크기가 고정된 되어 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>