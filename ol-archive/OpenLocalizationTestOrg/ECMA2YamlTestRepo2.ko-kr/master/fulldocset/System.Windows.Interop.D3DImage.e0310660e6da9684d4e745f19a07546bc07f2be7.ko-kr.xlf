<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">407f6a9d8a677ca56b07af087cbe00271f077fb4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.D3DImage.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd61e163311e51174b24ed668e58a73af67b079f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac1ac022ae41e27e6828851c358734e5ea9a5442</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that displays a user-created Direct3D surface.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Media.ImageSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용자가 만든 Direct3D 화면을 표시 하는 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the D3DImage class to host Direct3D content in a Windows Presentation Foundation (WPF) application.</source>
          <target state="translated">D3DImage 클래스를 사용 하 여 Windows Presentation Foundation (WPF) 응용 프로그램에서 Direct3D 콘텐츠를 호스트 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; method to change the Direct3D content displayed by the D3DImage.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt;는 D3DImage에 표시 된 Direct3D 내용을 변경 하려면 메서드.&lt;/xref:System.Windows.Interop.D3DImage.Lock%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method to assign a Direct3D surface to a D3DImage.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드는 D3DImage Direct3D 화면을 할당할 수 있습니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; method to track updates to the Direct3D surface.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt;Direct3D 화면에 업데이트를 추적 하는 메서드.&lt;/xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method to display the changed areas.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;변경 된 영역을 표시 하는 메서드.&lt;/xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The D3DImage class manages two display buffers, which are called the <bpt id="p1">*</bpt>back buffer<ept id="p1">*</ept> and the <bpt id="p2">*</bpt>front buffer<ept id="p2">*</ept>.</source>
          <target state="translated">D3DImage 클래스 라고 하는 두 디스플레이 버퍼를 관리 하는 <bpt id="p1">*</bpt>백 버퍼<ept id="p1">*</ept> 및 <bpt id="p2">*</bpt>프런트 버퍼<ept id="p2">*</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The back buffer is your Direct3D surface.</source>
          <target state="translated">백 버퍼가 Direct3D 화면을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the back buffer are copied forward to the front buffer when you call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method, where it is displayed on the hardware.</source>
          <target state="translated">백 버퍼에 대 한 변경에 복사 됩니다 프런트 버퍼 호출 하는 경우는 &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;메서드를 하드웨어에 표시 됩니다.&lt;/xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Occasionally, the front buffer becomes unavailable.</source>
          <target state="translated">경우에 따라서는 프런트 버퍼 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</source>
          <target state="translated">이 처럼 가용성 화면 잠금, 전체 화면 전용 Direct3D 응용 프로그램, 사용자 전환 또는 기타 시스템 작업에 의해 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, your WPF application is notified by handling the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event.</source>
          <target state="translated">WPF 응용 프로그램 처리를 통해 알림을 이러한 경우는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;이벤트.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
          <target state="translated">사용 하지 못하게 될 프런트 버퍼에 응용 프로그램의 응답으로 소프트웨어 렌더링 대체 WPF 사용 여부에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드에 WPF 소프트웨어 렌더링으로 다시 속하는지 여부를 지정 하는 매개 변수를 사용 하는 오버 로드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Responding to an Unavailable Front Buffer when WPF Does not Fall Back to Software Rendering    When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt; overload or call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</source>
          <target state="translated">소프트웨어 렌더링 호출 하는 경우에 대체 되지 않고 WPF 응답을 사용할 수 없는 프런트 버퍼에는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt;오버 로드 또는 호출의 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;오버 로드는 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`false`</ph>, 렌더링 시스템 프런트 버퍼를 사용할 수 없게 되며 아무 것도 표시 하는 경우 백 버퍼에 대 한 참조를 해제 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; &lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
          <target state="translated">프런트 버퍼를 사용할 수 있는 다시 렌더링 발생는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;WPF 응용 프로그램에 알리는 이벤트를.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
          <target state="translated">에 대 한 이벤트 처리기를 만들 수는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.</source>
          <target state="translated">렌더링을 다시 시작 하려면 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; 를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Responding to an Unavailable Front Buffer when WPF Falls Back to Software Rendering    When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`true`</ph>, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; when the front buffer is available again.</source>
          <target state="translated">WPF 대체 다시 때 소프트웨어 렌더링을 호출 하는 경우 사용할 수 없는 프런트 버퍼에 응답는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;오버 로드는 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`true`</ph>, 렌더링 시스템을 호출할 필요가 없습니다 이므로 프런트 버퍼를 사용할 수 없을 때 백 버퍼에 대 한 참조를 유지 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;때 프런트 버퍼를 다시 사용할 수 있습니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>There may be situations where the user’s device becomes unavailable.</source>
          <target state="translated">사용자의 장치 사용할 수 없게 되는 경우가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When that occurs, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; to release WPF’s reference to the back buffer.</source>
          <target state="translated">이 경우 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;백 버퍼에 대 한 WPF의 참조를 해제 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to reset your device, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; with the <ph id="ph1">`backBuffer`</ph> parameter set to <ph id="ph2">`null`</ph>, and then call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; again with <ph id="ph3">`backBuffer`</ph> set to a valid Direct3D surface.</source>
          <target state="translated">장치를 재설정 해야 할 경우 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;와 <ph id="ph1">`backBuffer`</ph> 매개 변수 설정 <ph id="ph2">`null`</ph>, 한 다음 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;사용 하 여 다시 <ph id="ph3">`backBuffer`</ph> 유효한 Direct3D 화면으로 설정 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Performance depends greatly on the settings of the Direct3D surface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 성능은 Direct3D 화면 설정에 따라 크게 다릅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Performance Considerations for Direct3D9 and WPF Interoperability<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Direct3D9 및 WPF 상호 운용성에 대 한 성능 고려 사항<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The D3DImage class does not display Direct3D content when WPF renders in software, such as over a Remote Desktop connection, unless you call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; and specify <ph id="ph2">`true`</ph> for the <ph id="ph3">`enableSoftwareFallback`</ph> parameter.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; The D3DImage 클래스 면 표시 되지 않습니다 Direct3D 콘텐츠 WPF 소프트웨어에서 렌더링와 같은 원격 데스크톱 연결을 통해 호출 하지 않으면 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;지정 <ph id="ph2">`true`</ph> 에 대 한는 <ph id="ph3">`enableSoftwareFallback`</ph> 매개 변수.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default display resolution is 1/96th inch.</source>
          <target state="translated">기본 디스플레이 해상도 1/96 인치입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified display resolution.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 디스플레이 해상도 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default display resolution is 1/96th inch.</source>
          <target state="translated">기본 디스플레이 해상도 1/96 인치입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The display resolution on the x-axis.</source>
          <target state="translated">X 축에 대 한 디스플레이 해상도입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The display resolution on the y-axis.</source>
          <target state="translated">Y 축에 대 한 디스플레이 해상도입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dpiX&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;dpiY&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;dpiX&lt;/code&gt;</ph>또는 <ph id="ph2">&lt;code&gt;dpiY&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifies the area of the back buffer that changed.</source>
          <target state="translated">변경 된 백 버퍼의 영역을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the AddDirtyRect method to indicate changes your code has made to the back buffer.</source>
          <target state="translated">백 버퍼에 호출을 나타내는 AddDirtyRect 메서드 코드를 변경 했습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be rendered, the changed area on the back buffer must have a corresponding changed area on the &lt;xref:System.Windows.Interop.D3DImage&gt;.</source>
          <target state="translated">변경된 된 영역 백 버퍼에 있는 &lt;xref:System.Windows.Interop.D3DImage&gt;.&lt;/xref:System.Windows.Interop.D3DImage&gt; 변경 된 해당 영역이를 렌더링할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; and &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; methods before calling the AddDirtyRect method.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;및 &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt;AddDirtyRect 메서드를 호출 하기 전에.&lt;/xref:System.Windows.Interop.D3DImage.Lock%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt; method to copy the changed areas to the front buffer.</source>
          <target state="translated">호출 된 &lt;xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;프런트 버퍼에 변경된 된 영역을 복사 하려면.&lt;/xref:System.Windows.Interop.D3DImage.Unlock%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  After a few calls to the AddDirtyRect method, the changed areas are merged into a single area.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 단일 영역으로 병합 하는 변경된 된 영역 AddDirtyRect 메서드를 몇 번 호출 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means you must have valid data outside of the changed areas.</source>
          <target state="translated">이 변경된 된 영역 외부 유효한 데이터가 있어야 의미 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Int32Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the area that changed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Int32Rect"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변경 된 영역을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The bitmap has not been locked by a call to the &lt;xref:System.Windows.Interop.D3DImage.Lock<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Interop.D3DImage.TryLock<ept id="p1">*</ept>&gt; methods.</source>
          <target state="translated">비트맵에 대 한 호출에 의해 잠기지 않은 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 또는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 메서드.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-or-       The back buffer has not been assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer*&gt; method.</source>
          <target state="translated">-또는-백 버퍼를 호출 하 여 할당 되지 않은 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer*&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer*&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One or more of the following conditions is true.</source>
          <target state="translated">다음 조건 중 하나 이상이 true입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dirtyRect.X</ph><ept id="p1">&lt;/code&gt;</ept> <ph id="ph2">&amp;lt;</ph> 0       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">dirtyRect.Y</ph><ept id="p2">&lt;/code&gt;</ept> <ph id="ph4">&amp;lt;</ph> 0       <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">dirtyRect.Width</ph><ept id="p3">&lt;/code&gt;</ept> <ph id="ph6">&amp;lt;</ph> 0 or <bpt id="p4">&lt;code&gt;</bpt><ph id="ph7">dirtyRect.Width</ph><ept id="p4">&lt;/code&gt;</ept> <ph id="ph8">&amp;gt;</ph> &lt;xref:System.Windows.Interop.D3DImage.PixelWidth<bpt id="p5">*</bpt><ph id="ph9">&gt;       </ph><bpt id="p6">&lt;code&gt;</bpt><ph id="ph10">dirtyRect.Height</ph><ept id="p6">&lt;/code&gt;</ept> <ph id="ph11">&amp;lt;</ph> 0 or <bpt id="p7">&lt;code&gt;</bpt><ph id="ph12">dirtyRect.Height</ph><ept id="p7">&lt;/code&gt;</ept> <ph id="ph13">&amp;gt;</ph> &lt;xref:System.Windows.Interop.D3DImage.PixelHeight<ept id="p5">*</ept><ph id="ph14">&gt;</ph></source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dirtyRect.X</ph><ept id="p1">&lt;/code&gt;</ept><ph id="ph2">&amp;lt;</ph> 0       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">dirtyRect.Y</ph><ept id="p2">&lt;/code&gt;</ept> <ph id="ph4">&amp;lt;</ph> 0       <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">dirtyRect.Width</ph><ept id="p3">&lt;/code&gt;</ept> <ph id="ph6">&amp;lt;</ph> 0 or <bpt id="p4">&lt;code&gt;</bpt><ph id="ph7">dirtyRect.Width</ph><ept id="p4">&lt;/code&gt;</ept> <ph id="ph8">&amp;gt;</ph> &lt;&gt;<bpt id="p5">*</bpt><ph id="ph9">&gt;       </ph><bpt id="p6">&lt;code&gt;</bpt><ph id="ph10">dirtyRect.Height</ph><ept id="p6">&lt;/code&gt;</ept> <ph id="ph11">&amp;lt;</ph> 0 or <bpt id="p7">&lt;code&gt;</bpt><ph id="ph12">dirtyRect.Height</ph><ept id="p7">&lt;/code&gt;</ept> <ph id="ph13">&amp;gt;</ph>&lt;&gt;<ept id="p5">*</ept><ph id="ph14">&gt;</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Creates a modifiable clone of this <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, making deep copies of this object's values.</source>
          <target state="translated">수정 가능한 복제본을 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체를이 개체 값의 전체 복사본입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When copying dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</source>
          <target state="translated">종속성 속성을 복사 하는 경우이 메서드는 리소스 참조와 데이터 바인딩이 없습니다 더 이상 확인 있는 하지만 애니메이션 말거나의 현재 값은 복사 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects (or any &lt;xref:System.Windows.Freezable&gt; object).</source>
          <target state="translated">수정 가능한 복사본을 생성 하기 위해이 메서드는 고정 된 &lt;xref:System.Windows.Freezable&gt;개체 (또는 모든 &lt;xref:System.Windows.Freezable&gt;개체).&lt;/xref:System.Windows.Freezable&gt; &lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, this method shadows the inherited version with a strongly typed implementation.</source>
          <target state="translated">편의 위해이 메서드는 강력한 형식의 구현이 포함 된 상속 된 버전을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A modifiable clone of the current object.</source>
          <target state="translated">현재 개체의 수정 가능한 복제본입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen<bpt id="p1">*</bpt>&gt; property will be <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen<ept id="p1">*</ept>&gt; property was <bpt id="p3">&lt;xref uid="langword_csharp_true." name="true." href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept></source>
          <target state="translated">복제 된 개체의 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 속성은 됩니다 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 경우에 원본의 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 속성은<bpt id="p3">&lt;xref uid="langword_csharp_true." name="true." href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Makes the instance a clone (deep copy) of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using base (non-animated) property values.</source>
          <target state="translated">인스턴스는 지정 된 복제본 (전체 복사본)으로 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 (애니메이션이 적용 되지 않은) 속성 값을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">복제할 개체입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Creates a modifiable clone of this <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object, making deep copies of this object's current values.</source>
          <target state="translated">수정 가능한 복제본을 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체를이 개체의 현재 값의 전체 복사본입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Resource references, data bindings, and animations are not copied, but their current values are copied.</source>
          <target state="translated">리소스 참조, 데이터 바인딩 및 애니메이션은 복사 되지 않지만 이러한 요소의 현재 값은 복사 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects (or any &lt;xref:System.Windows.Freezable&gt; object).</source>
          <target state="translated">수정 가능한 복사본을 생성 하기 위해이 메서드는 고정 된 &lt;xref:System.Windows.Freezable&gt;개체 (또는 모든 &lt;xref:System.Windows.Freezable&gt;개체).&lt;/xref:System.Windows.Freezable&gt; &lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, this method shadows the inherited version with a strongly typed implementation.</source>
          <target state="translated">편의 위해이 메서드는 강력한 형식의 구현이 포함 된 상속 된 버전을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A modifiable clone of the current object.</source>
          <target state="translated">현재 개체의 수정 가능한 복제본입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen<bpt id="p1">*</bpt>&gt; property will be <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen<ept id="p1">*</ept>&gt; property was <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">복제 된 개체의 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 속성은 됩니다 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 경우에 원본의 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 속성은 <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Makes the instance a modifiable clone (deep copy) of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using current property values.</source>
          <target state="translated">인스턴스는 지정 된 수정 가능한 복제본 (전체 복사본)으로 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 속성 값을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be cloned.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 복제 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creates a software copy of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">소프트웨어 복사본을 만듭니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CopyBackBuffer method is called by clients such as the printing system and the &lt;xref:System.Windows.Media.Imaging.RenderTargetBitmap&gt; class.</source>
          <target state="translated">인쇄 시스템, &lt;xref:System.Windows.Media.Imaging.RenderTargetBitmap&gt;클래스&lt;/xref:System.Windows.Media.Imaging.RenderTargetBitmap&gt; 등의 클라이언트 CopyBackBuffer 메서드를 호출</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally override the CopyBackBuffer method to implement custom logic and return a different &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;.</source>
          <target state="translated">필요에 따라 사용자 지정 논리를 구현 하 고 다른 &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;.&lt;/xref:System.Windows.Media.Imaging.BitmapSource&gt; 반환 하려면 CopyBackBuffer 메서드를 재정의</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can return a placeholder &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt; if the default CopyBackBuffer implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">예를 들어 자리 표시자를 반환할 수 있습니다 &lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;기본 CopyBackBuffer 구현은 반환 하는 경우 <ph id="ph1">`null`</ph>.&lt;/xref:System.Windows.Media.Imaging.BitmapSource&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Media.Imaging.BitmapSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a software copy of the current state of the back buffer; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the back buffer cannot be read.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Media.Imaging.BitmapSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의 소프트웨어 복사본 즉 백 버퍼의 상태가 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 백 버퍼를 읽을 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, creates a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우의 새 인스턴스를 만듭니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you derive from the &lt;xref:System.Windows.Interop.D3DImage&gt; class, you must override the CreateInstanceCore method to enable correct cloning.</source>
          <target state="translated">파생 하는 경우는 &lt;xref:System.Windows.Interop.D3DImage&gt;클래스 올바른 복제를 활성화 CreateInstanceCore 메서드를 재정의 해야 합니다.&lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation performs a <ph id="ph1">`return new D3DImage()`</ph>, which will not be correct if the instance is a different class.</source>
          <target state="translated">수행 하지 않습니다는 <ph id="ph1">`return new D3DImage()`</ph>, 다른 클래스 인스턴스가 올바른 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The new instance.</source>
          <target state="translated">새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Frees resources and performs other cleanup operations before the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is reclaimed by garbage collection.</source>
          <target state="translated">리소스를 해제 하 고 기타 정리 작업 하기 전에 수행 된 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가비지 수집에서 회수 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides &lt;xref:System.Object.Finalize%2A&gt;.</source>
          <target state="translated">이 메서드를 재정의 &lt;xref:System.Object.Finalize%2A&gt;.&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application code should not call this method; an object's <ph id="ph1">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A&gt; method.</source>
          <target state="translated">응용 프로그램 코드,이 메서드를 호출 하지 않아야 개체의 <ph id="ph1">`Finalize`</ph> 메서드를 호출 하 여 가비지 수집기의 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지 수집 중 호출 됩니다는 &lt;xref:System.GC.SuppressFinalize%2A&gt;메서드.&lt;/xref:System.GC.SuppressFinalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Finalize 메서드 및 소멸자<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>관리 되지 않는 리소스 정리<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, 및 <bpt id="p3">[</bpt>Finalize 메서드를 재정의<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Makes the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> unmodifiable or determines whether it can be made unmodifiable.</source>
          <target state="translated">만듭니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 수정할 수 없게 하거나 설정할 수 있는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage&gt; class does not allow freezing because changes are always possible due to front buffer availability.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.D3DImage&gt;클래스 프런트 버퍼 가용성으로 인해 가능한 변경 내용이 항상 있으므로 고정을 허용 하지 않습니다.&lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Has no effect.</source>
          <target state="translated">아무런 영향이 없습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in all cases.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모든 경우</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using base (non-animated) property values.</source>
          <target state="translated">인스턴스는 지정 된 고정된 복제본으로 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 (애니메이션이 적용 되지 않은) 속성 값을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The instance to copy.</source>
          <target state="translated">복사할 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">현재 인스턴스가 지정 된의 고정된 복제본으로 만듭니다 <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">개체에 애니메이션 효과 준된 종속성 속성이 애니메이션된의 현재 값은 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to copy and freeze.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 복사 및 고정할 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets the height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">높이 가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of Height can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
          <target state="translated">높이 값은 새 백 버퍼에 대 한 호출에 의해 할당 된 경우 변경할 수는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in measure units.</source>
          <target state="translated">높이 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>의 측정 단위입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A measure unit is 1/96th inch.</source>
          <target state="translated">측정 단위는 1/96 인치입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a front buffer exists.</source>
          <target state="translated">프런트 버퍼 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Occasionally, the front buffer becomes unavailable.</source>
          <target state="translated">경우에 따라서는 프런트 버퍼 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</source>
          <target state="translated">이 처럼 가용성 화면 잠금, 전체 화면 전용 Direct3D 응용 프로그램, 사용자 전환 또는 기타 시스템 작업에 의해 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, your WPF application is notified by handling the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event.</source>
          <target state="translated">WPF 응용 프로그램 처리를 통해 알림을 이러한 경우는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;이벤트.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
          <target state="translated">사용 하지 못하게 될 프런트 버퍼에 응용 프로그램의 응답으로 소프트웨어 렌더링 대체 WPF 사용 여부에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드에 WPF 소프트웨어 렌더링으로 다시 속하는지 여부를 지정 하는 매개 변수를 사용 하는 오버 로드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the remarks in the &lt;xref:System.Windows.Interop.D3DImage&gt; class.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Windows.Interop.D3DImage&gt;클래스&lt;/xref:System.Windows.Interop.D3DImage&gt; 의 설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFrontBufferAvailable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFrontBufferAvailable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 종속성 속성 정보 | | |   |-|-|   | 식별자 필드 | &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty&gt;|   | 메타 데이터 속성이 <ph id="ph1">`true`</ph>| None |&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a front buffer exists; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>프런트 버퍼 있으면; 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt; property changes.</source>
          <target state="translated">발생 경우는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt;속성 변경.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handle the IsFrontBufferAvailableChanged to be notified when the status of the front buffer changes.</source>
          <target state="translated">전면 버퍼의 상태가 변경 될 때 알림을 받으려면 IsFrontBufferAvailableChanged 처리 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</source>
          <target state="translated">사용 하지 못하게 될 프런트 버퍼에 응용 프로그램의 응답으로 소프트웨어 렌더링 대체 WPF 사용 여부에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드에 WPF 소프트웨어 렌더링으로 다시 속하는지 여부를 지정 하는 매개 변수를 사용 하는 오버 로드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the remarks in the &lt;xref:System.Windows.Interop.D3DImage&gt; class.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Windows.Interop.D3DImage&gt;클래스&lt;/xref:System.Windows.Interop.D3DImage&gt; 의 설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt;종속성 속성입니다.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable*&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Locks the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and enables operations on the back buffer.</source>
          <target state="translated">잠급니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 백 버퍼에 대 한 작업을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the Lock method to change the back buffer by calling the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; and &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; methods.</source>
          <target state="translated">Lock 메서드를 호출 하 여 백 버퍼를 변경 하려면 호출 하는 &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt;및 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the &lt;xref:System.Windows.Interop.D3DImage&gt; is locked, your application can also render to the Direct3D surface assigned to the back buffer.</source>
          <target state="translated">반면는 &lt;xref:System.Windows.Interop.D3DImage&gt;은 잠겨 있고 응용 프로그램에 렌더링할 수도 있습니다 백 버퍼에 할당 된 Direct3D 화면.&lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The Lock method blocks when the rendering system is reading the back buffer to update the front buffer.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Lock 메서드가 차단 렌더링 시스템 백 버퍼 업데이트 프런트 버퍼를 읽는 중입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Windows.Interop.D3DImage.TryLock%2A&gt; method to avoid blocking indefinitely.</source>
          <target state="translated">사용 된 &lt;xref:System.Windows.Interop.D3DImage.TryLock%2A&gt;메서드를 무기한으로 차단 되지 않도록 합니다.&lt;/xref:System.Windows.Interop.D3DImage.TryLock%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The lock count equals &lt;xref:System.UInt32.MaxValue&gt;.</source>
          <target state="translated">잠금 횟수가 &lt;xref:System.UInt32.MaxValue&gt;.&lt;/xref:System.UInt32.MaxValue&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Gets the metadata associated with the image source.</source>
          <target state="translated">이미지 원본 연관 된 메타 데이터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in all cases.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>모든 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets the height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
          <target state="translated">높이 가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, (픽셀)에서입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of PixelHeight can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
          <target state="translated">PixelHeight의 값은 새 백 버퍼에 대 한 호출에 의해 할당 된 경우 변경할 수는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The height of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
          <target state="translated">높이 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, (픽셀)에서입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets the width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
          <target state="translated">너비를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, (픽셀)에서입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of PixelWidth can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
          <target state="translated">PixelWidth의 값은 새 백 버퍼에 대 한 호출에 의해 할당 된 경우 변경할 수는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in pixels.</source>
          <target state="translated">너비는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, (픽셀)에서입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Assigns a Direct3D surface as the source of the back buffer.</source>
          <target state="translated">백 버퍼의 원본으로 하는 Direct3D 표면에 할당합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the SetBackBuffer method to assign a Direct3D surface to the back buffer.</source>
          <target state="translated">Direct3D 화면 백 버퍼를 할당 하려면 SetBackBuffer 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Performance depends greatly on the settings of the Direct3D surface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 성능은 Direct3D 화면 설정에 따라 크게 다릅니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Performance Considerations for Direct3D9 and WPF Interoperability<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Direct3D9 및 WPF 상호 운용성에 대 한 성능 고려 사항<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the SetBackBuffer overload is identical to calling the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">SetBackBuffer 오버 로드는 동일한 호출 하는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;오버 로드는 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call SetBackBuffer or call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt; with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when front buffer becomes unavailable and nothing is displayed.</source>
          <target state="translated">SetBackBuffer 또는 호출을 호출 하면 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;와 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`false`</ph>, 렌더링 시스템 프런트 버퍼를 사용할 수 없게 되며 아무 것도 표시 하는 경우 백 버퍼에 대 한 참조를 해제 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
          <target state="translated">프런트 버퍼를 사용할 수 있는 다시 렌더링 발생는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;WPF 응용 프로그램에 알리는 이벤트를.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
          <target state="translated">에 대 한 이벤트 처리기를 만들 수는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call SetBackBuffer.</source>
          <target state="translated">렌더링을 다시 시작 하려면 SetBackBuffer 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the required back buffer settings for the <ph id="ph1">`IDirect3DSurface9`</ph> type.</source>
          <target state="translated">다음 목록에 대 한 필요한 백 버퍼 설정을 표시는 <ph id="ph1">`IDirect3DSurface9`</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> or <ph id="ph2">`D3DFMT_X8R8G8B8`</ph><ph id="ph3">      -   </ph><ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph><ph id="ph5">      -   </ph><ph id="ph6">`D3DPOOL_DEFAULT`</ph>       Multisampling is allowed on <ph id="ph7">`IDirect3DSurface9Ex`</ph> surfaces only.</source>
          <target state="translated">- <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> 또는 <ph id="ph2">`D3DFMT_X8R8G8B8`</ph> <ph id="ph3">      -   </ph> <ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph> <ph id="ph5">      -   </ph> <ph id="ph6">`D3DPOOL_DEFAULT`</ph> 샘플링에 사용할 수는 <ph id="ph7">`IDirect3DSurface9Ex`</ph> 만 표시 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The type of Direct3D surface.</source>
          <target state="translated">Direct3D 화면의 형식입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Must be a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">유효한 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The Direct3D surface to assign as the back buffer.</source>
          <target state="translated">백 버퍼를 할당 하는 Direct3D 화면입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has not been locked by a call to the &lt;xref:System.Windows.Interop.D3DImage.Lock<bpt id="p2">*</bpt>&gt; or &lt;xref:System.Windows.Interop.D3DImage.TryLock<ept id="p2">*</ept>&gt; methods.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 호출에 의해 잠기지 않은 &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>&gt; 또는 &lt;&gt; &lt;/&gt; <ept id="p2">*</ept>&gt; 메서드.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;backBufferType&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;backBufferType&lt;/code&gt;</ph>유효 하지 않거나 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The creation parameters for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">backBuffer</ph><ept id="p1">&lt;/code&gt;</ept> do not meet the requirements for the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">backBufferType</ph><ept id="p2">&lt;/code&gt;</ept>-or-The <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">backBuffer</ph><ept id="p3">&lt;/code&gt;</ept> device is not valid.</source>
          <target state="translated">생성 매개 변수를 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">backBuffer</ph> <ept id="p1">&lt;/code&gt;</ept> 에 대 한 요구 사항을 충족 하지 않는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">backBufferType</ph> <ept id="p2">&lt;/code&gt;</ept>-또는-는 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">backBuffer</ph> <ept id="p3">&lt;/code&gt;</ept> 장치가 유효 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Assigns a Direct3D surface as the source of the back buffer.</source>
          <target state="translated">백 버퍼의 원본으로 하는 Direct3D 표면에 할당합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt; overload or call the SetBackBuffer overload with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`false`</ph>, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</source>
          <target state="translated">호출 하는 경우는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt;오버 로드 또는 SetBackBuffer 오버 로드를 호출는 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`false`</ph>, 렌더링 시스템 프런트 버퍼를 사용할 수 없게 되며 아무 것도 표시 하는 경우 백 버퍼에 대 한 참조를 해제 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the front buffer is available again, the rendering system raises the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to notify your WPF application.</source>
          <target state="translated">프런트 버퍼를 사용할 수 있는 다시 렌더링 발생는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;WPF 응용 프로그램에 알리는 이벤트를.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt; event to restart rendering again with a valid Direct3D surface.</source>
          <target state="translated">에 대 한 이벤트 처리기를 만들 수는 &lt;xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.&lt;/xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restart rendering, you must call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.</source>
          <target state="translated">렌더링을 다시 시작 하려면 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; 를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call SetBackBuffer with the <ph id="ph1">`enableSoftwareFallback`</ph> parameter set to <ph id="ph2">`true`</ph>, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; when the front buffer is available again.</source>
          <target state="translated">와 SetBackBuffer를 호출 하는 경우는 <ph id="ph1">`enableSoftwareFallback`</ph> 매개 변수 설정 <ph id="ph2">`true`</ph>, 렌더링 시스템을 호출할 필요가 없습니다 이므로 프런트 버퍼를 사용할 수 없을 때 백 버퍼에 대 한 참조를 유지 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;때 프런트 버퍼를 다시 사용할 수 있습니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>There may be situations where the user’s device becomes unavailable.</source>
          <target state="translated">사용자의 장치 사용할 수 없게 되는 경우가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>When that occurs, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; to release WPF’s reference to the back buffer.</source>
          <target state="translated">이 경우 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;백 버퍼에 대 한 WPF의 참조를 해제 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to reset your device, call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; with <ph id="ph1">`backBuffer`</ph> set to <ph id="ph2">`null`</ph>, and then call &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; again with <ph id="ph3">`backBuffer`</ph> set to a valid Direct3D surface.</source>
          <target state="translated">장치를 재설정 해야 할 경우 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;와 <ph id="ph1">`backBuffer`</ph> 로 설정 <ph id="ph2">`null`</ph>, 한 다음 호출 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;사용 하 여 다시 <ph id="ph3">`backBuffer`</ph> 유효한 Direct3D 화면으로 설정 합니다.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the required back buffer settings for the <ph id="ph1">`IDirect3DSurface9`</ph> type.</source>
          <target state="translated">다음 목록에 대 한 필요한 백 버퍼 설정을 표시는 <ph id="ph1">`IDirect3DSurface9`</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> or <ph id="ph2">`D3DFMT_X8R8G8B8`</ph><ph id="ph3">      -   </ph><ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph><ph id="ph5">      -   </ph><ph id="ph6">`D3DPOOL_DEFAULT`</ph>       Multisampling is allowed on <ph id="ph7">`IDirect3DSurface9Ex`</ph> surfaces only.</source>
          <target state="translated">- <ph id="ph1">`D3DFMT_A8R8G8B8`</ph> 또는 <ph id="ph2">`D3DFMT_X8R8G8B8`</ph> <ph id="ph3">      -   </ph> <ph id="ph4">`D3DUSAGE_RENDERTARGET`</ph> <ph id="ph5">      -   </ph> <ph id="ph6">`D3DPOOL_DEFAULT`</ph> 샘플링에 사용할 수는 <ph id="ph7">`IDirect3DSurface9Ex`</ph> 만 표시 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The type of Direct3D surface.</source>
          <target state="translated">Direct3D 화면의 형식입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Must be a valid <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">유효한 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DResourceType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The Direct3D surface to assign as the back buffer.</source>
          <target state="translated">백 버퍼를 할당 하는 Direct3D 화면입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to fall back on software rendering; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>소프트웨어 렌더링;으로 변경 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Attempts to lock the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and waits for the specified duration.</source>
          <target state="translated">잠그려고 시도 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하 고 지정 된 기간에 대 한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The duration to wait for the lock to be acquired.</source>
          <target state="translated">잠금을 얻기 위해 대기 기간입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the lock was acquired; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>잠금을 획득; 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Duration.Automatic*&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph>로 설정 된 <ph id="ph2">&lt;xref:System.Windows.Duration.Automatic*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The lock count equals &lt;xref:System.UInt32.MaxValue&gt;.</source>
          <target state="translated">잠금 횟수가 &lt;xref:System.UInt32.MaxValue&gt;.&lt;/xref:System.UInt32.MaxValue&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Decrements the lock count for the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 잠금 횟수를 감소는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the lock count for the &lt;xref:System.Windows.Interop.D3DImage&gt; reaches zero, the &lt;xref:System.Windows.Interop.D3DImage&gt; is fully unlocked.</source>
          <target state="translated">잠금 횟수를 &lt;xref:System.Windows.Interop.D3DImage&gt;0는 &lt;xref:System.Windows.Interop.D3DImage&gt;완전히 잠금 해제 되어 있습니다.&lt;/xref:System.Windows.Interop.D3DImage&gt; &lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.D3DImage&gt; is marked for rendering if the image has changed areas that were specified by previous calls to the &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.D3DImage&gt;이미지에 대 한 이전 호출에 지정 된 영역 변경 된 경우 렌더링에 대 한 표시는 &lt;xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A&gt; &lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the changes are committed and rendering occurs, additional calls to the &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt; method block until the render thread has copied the contents of the back buffer to the front buffer.</source>
          <target state="translated">변경 내용이 커밋되고 시점과 렌더링이 발생 대 한 추가 호출이 &lt;xref:System.Windows.Interop.D3DImage.Lock%2A&gt;렌더링 스레드에 백 버퍼의 내용을 프런트 버퍼에 복사 될 때까지 메서드 블록.&lt;/xref:System.Windows.Interop.D3DImage.Lock%2A&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>This synchronization avoids display artifacts, such as tearing.</source>
          <target state="translated">이 동기화 하는 데 필요한 같은 디스플레이 아티팩트를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Do not update the Direct3D surface while the &lt;xref:System.Windows.Interop.D3DImage&gt; is unlocked.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 동안 Direct3D 화면을 업데이트 하지 않으면는 &lt;xref:System.Windows.Interop.D3DImage&gt;잠금 해제 되어 있습니다.&lt;/xref:System.Windows.Interop.D3DImage&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets the width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">너비를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of Width can change when a new back buffer is assigned by a call to the &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt; method.</source>
          <target state="translated">너비 값은 새 백 버퍼에 대 한 호출에 의해 할당 된 경우 변경할 수는 &lt;xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;메서드.&lt;/xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The width of the <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in measure units.</source>
          <target state="translated">너비는 <bpt id="p1">&lt;xref href="System.Windows.Interop.D3DImage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>의 측정 단위입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A measure unit is 1/96th inch.</source>
          <target state="translated">측정 단위는 1/96 인치입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>