<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a0a2350f797e7004899be2ae99afc26fc6c0ed1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.IStreamProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c453596205532990f9448fbc498db02ca8196896</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553334242ad2dd9aa062f7f1675ed8528d2843c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an interface that can be implemented by classes providing streams.</source>
          <target state="translated">스트림을 제공 하는 클래스에서 구현 될 수 있는 인터페이스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing an outgoing message containing a streamed body to an XML writer, the &lt;xref:System.ServiceModel.Channels.Message&gt; will use a sequence of calls similar to the following in its &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; implementation:      -   Write any necessary information preceding the stream (For example, the opening XML tag).</source>
          <target state="translated">XML 작성기에 스트리밍된 본문이 포함 된 보내는 메시지를 작성할 때는 &lt;xref:System.ServiceModel.Channels.Message&gt;에 다음과 유사한 호출의 시퀀스를 사용 합니다 해당 &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;구현:-(예를 들어 여는 XML 태그) 스트림 앞에 필요한 정보를 씁니다.&lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; &lt;/xref:System.ServiceModel.Channels.Message&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Write the stream.</source>
          <target state="translated">-스트림을 씁니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Write any information following the stream (For example, the closing XML tag).</source>
          <target state="translated">스트림 뒤에 (예: 닫는 XML 태그) 정보를 씁니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
          <target state="translated">이 텍스트 XML 인코딩과 유사한 인코딩을 사용 하 여 작동 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</source>
          <target state="translated">그러나 요소 내에 포함 된 데이터와 함께 XML infoset 정보 (예: XML 요소의 시작 및 끝에 대 한 태그)를 배치 하지 않는 일부 인코딩이 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
          <target state="translated">예를 들어 MTOM 인코딩에서 메시지는 여러 부분으로 나누어집니다 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>One part contains the XML infoset, which may contain references to other parts for actual element contents.</source>
          <target state="translated">한 부분에 대 한 실제 요소 콘텐츠의 다른 부분에 대 한 참조를 포함할 수 있는 XML infoset이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</source>
          <target state="translated">있으므로 XML infoset은 일반적으로 작은 스트리밍된 콘텐츠와 비교 하,는 아웃 작성을 다음 스트리밍된 방법으로의 콘텐츠를 쓰는 infoset을 버퍼링 하 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that by the time the closing element tag is written, we should not have written out the stream yet.</source>
          <target state="translated">즉, 시간순으로 닫는 요소 태그가 작성 해야 하지 쓰면 스트림이 아직 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this purpose, the IStreamProvider interface is used.</source>
          <target state="translated">이 작업을 위해 IStreamProvider 인터페이스 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interface has a &lt;xref:System.Xml.IStreamProvider.GetStream&gt; method that returns the stream to be written.</source>
          <target state="translated">인터페이스에는 &lt;xref:System.Xml.IStreamProvider.GetStream&gt;작성할 스트림을 반환 하는 메서드입니다.&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The correct way to write out a streamed message body in &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; is as follows:      -   Write any necessary information preceding the stream (For example, the opening XML tag)      -   Call the <ph id="ph1">`WriteValue`</ph> overload on the &lt;xref:System.Xml.XmlDictionaryWriter&gt; that takes an IStreamProvider, with an <ph id="ph2">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
          <target state="translated">스트리밍된 메시지 본문을 쓰는 올바른 방법은 &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;는 다음과 같습니다:-(예를 들어 여는 XML 태그) 스트림 앞에 필요한 정보를 쓰기-호출는 <ph id="ph1">`WriteValue`</ph> 오버 로드는 &lt;xref:System.Xml.XmlDictionaryWriter&gt;와 IStreamProvider를 사용 하는 <ph id="ph2">`IStreamProvider`</ph> 작성할 스트림을 반환 하는 구현.&lt;/xref:System.Xml.XmlDictionaryWriter&gt; &lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Write any information following the stream (For example, the closing XML tag)       With this approach, the XML writer has a choice of when to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; and write out the streamed data.</source>
          <target state="translated">-이 방법을 사용 (예: 닫는 XML 태그) 스트림 뒤 필요한 정보를 쓸 XML 작성기에는 다양 한 호출 하는 경우, &lt;xref:System.Xml.IStreamProvider.GetStream&gt;고 스트리밍된 데이터를 작성할.&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</source>
          <target state="translated">예를 들어 텍스트 및 이진 XML 작성기가를 즉각 호출 하 고 시작 및 끝 태그 사이 스트리밍된 콘텐츠를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MTOM writer may decide to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; later, when it is ready to write the appropriate part of the message.</source>
          <target state="translated">MTOM 작성기를 호출할지 결정할 수 있습니다 &lt;xref:System.Xml.IStreamProvider.GetStream&gt;메시지의 적절 한 일부를 쓸 준비가 되 면 나중에.&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a stream.</source>
          <target state="translated">스트림을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to return the stream to be written.</source>
          <target state="translated">이 메서드는 작성할 스트림을 반환 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object.</source>
          <target state="translated">A &lt;xref:System.IO.Stream&gt;개체입니다.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases a stream to output.</source>
          <target state="translated">스트림을 출력으로 해제 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The stream being released.</source>
          <target state="translated">해제할 스트림입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>