<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f4685f089157d7cffa96a0c899b97e49c87d376</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.Schema.XamlTypeName.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8da96fbe3b1f27ec7a9187af23d765d62297e30d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c588978310d9d321c775bd1f6709cfc6a965c308</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a means to specify a XAML type in terms of name and namespace.</source>
          <target state="translated">XAML 형식 이름 및 네임 스페이스로 지정 하는 수단을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlType&gt; is the type information class in the XAML type system, whereas XamlTypeName is more of a data structure that provides different ways of specifying that type.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;반면 XamlTypeName 더 해당 형식을 지정 하는 다른 방법을 제공 하는 데이터 구조는 XAML 형식 시스템에서 형식 정보 클래스가입니다.&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlTypeName also provides static helper methods for generating a XamlTypeName by resolving an existing type identifier in a XAML namespace.</source>
          <target state="translated">또한 XamlTypeName XAML 네임 스페이스에서 기존 형식 식별자를 확인 하 여 한 XamlTypeName를 생성 하기 위한 정적 도우미 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on an existing <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기존 기반 클래스 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An existing <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기존 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xamlType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on name and namespace strings.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이름 및 네임 스페이스 문자열에 기반 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains name.</source>
          <target state="translated">이름을 포함 하는 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name of the type to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">만들려는 형식의 이름을 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on name and namespace strings as well as an array of type arguments.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스, 형식 인수의 배열을: 이름 및 네임 스페이스 문자열에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the signature to use if you are specifying a generic type and type arguments for that type.</source>
          <target state="translated">이 제네릭 형식 및 해당 형식에 대 한 형식 인수를 지정 하는 경우 사용할 서명입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains <ph id="ph1">`name`</ph>.</source>
          <target state="translated">포함 된 XAML 네임 스페이스 <ph id="ph1">`name`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the type to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">만들려는 형식의 이름을 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of type arguments, each of which must be a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">해야 하며 각 형식 인수의 배열을 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the name used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 생성 하는 데 사용 된 이름을 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of Name is &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;이 &lt;xref:System.Xaml.Schema.XamlTypeName&gt;이름의 값은 &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt; ,&lt;/xref:System.Xaml.Schema.XamlTypeName&gt; 생성 하는 데 사용 된&lt;/xref:System.Xaml.XamlType&gt; 경우</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the type.</source>
          <target state="translated">형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the XAML namespace identifier used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 생성 하는 데 XAML 네임 스페이스 식별자를 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of Namespace is <ph id="ph1">`xamlType.GetXamlNamespaces()[0]`</ph>.</source>
          <target state="translated">경우는 &lt;xref:System.Xaml.XamlType&gt;이 생성 하는 데 사용한 &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, Namespace의 값은 <ph id="ph1">`xamlType.GetXamlNamespaces()[0]`</ph>.&lt;/xref:System.Xaml.Schema.XamlTypeName&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The XAML namespace identifier.</source>
          <target state="translated">XAML 네임 스페이스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">제공 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값 형식 이름 및 네임 스페이스에는 태그 접두사를 확인할 수 있는 개체에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type name to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value for.</source>
          <target state="translated">만들 형식 이름은 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">구현 하는 개체 또는 서비스 공급자 <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">만든 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>String cannot be parsed.</source>
          <target state="translated">문자열을 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">제공 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 여러 형식 이름을 지정할 수 있는 문자열 및 네임 스페이스에는 태그 접두사를 확인할 수 있는 개체에 따라 값입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is quasi-BNF for the nested type name or multiple type name parsing enabled by this method:      <ph id="ph1">```   NestedTypeName = Name | Name '+' NestedTypeName   TypeName = NestedTypeName | NestedTypeName ‘[]’   XamlTypeName = Prefix ‘:’ TypeName TypeArgs  | TypeName TypeArgs   TypeArgs = empty | ‘(‘ XamlTypeNameList ‘)’   XamlTypeNameList = XamlTypeName XamlTypeNameList1   XamlTypeNameList1 = empty | ‘,’ XamlTypeNameList   ```</ph></source>
          <target state="translated">다음은 중첩 된 형식 이름 또는 여러 개의 형식 이름을 구문 분석이 메서드에서 사용 하는 의사 BNF입니다.<ph id="ph1">```   NestedTypeName = Name | Name '+' NestedTypeName   TypeName = NestedTypeName | NestedTypeName ‘[]’   XamlTypeName = Prefix ‘:’ TypeName TypeArgs  | TypeName TypeArgs   TypeArgs = empty | ‘(‘ XamlTypeNameList ‘)’   XamlTypeNameList = XamlTypeName XamlTypeNameList1   XamlTypeNameList1 = empty | ‘,’ XamlTypeNameList   ```</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A string that contains multiple types.</source>
          <target state="translated">여러 형식을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">구현 하는 개체 또는 서비스 공급자 <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">만든 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>String cannot be parsed.</source>
          <target state="translated">문자열을 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation.</source>
          <target state="translated">이 값으로 변환 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 을 해당 하는 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature is equivalent to calling &lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;, passing <ph id="ph1">`null`</ph> for <ph id="ph2">`prefixLookup`</ph>.</source>
          <target state="translated">이 서명을 하는 것 &lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;전달 <ph id="ph1">`null`</ph> 에 대 한 <ph id="ph2">`prefixLookup`</ph>.&lt;/xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>s</source>
          <target state="translated">s</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The equivalent string representation of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> .</source>
          <target state="translated">이 문자열 표현 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</source>
          <target state="translated">이 값으로 변환 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 을 해당 문자열 표현으로 사용할 수 있는 태그 구문에서 형식의 개체 요소 사용에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">접두사 조회에 대 한 서비스 참조 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A prefixed usage string.</source>
          <target state="translated">접두사가 있는 사용 문자열입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace<bpt id="p1">*</bpt>&gt; for this <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.       -or-       &lt;xref:System.Xaml.Schema.XamlTypeName.Name<ept id="p1">*</ept>&gt; is not valid.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>&gt; for this <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.       -또는- &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-or-       Could not look up the prefix.</source>
          <target state="translated">-또는-접두사를 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</source>
          <target state="translated">이 값으로 변환 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 을 해당 문자열 표현으로 사용할 수 있는 태그 구문에서 여러 유형의 개체 요소 사용에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A list of types.</source>
          <target state="translated">목록 형식입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">접두사 조회에 대 한 서비스 참조 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A concatenated string of all type results.</source>
          <target state="translated">모든 형식 결과의 연결 된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;prefixLookup&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeNameList&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;prefixLookup&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeNameList&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">제공 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값 형식 이름 및 네임 스페이스에는 태그 접두사를 확인할 수 있는 개체에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The type name to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value for.</source>
          <target state="translated">만들 형식 이름은 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">구현 하는 개체 또는 서비스 공급자 <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Out parameter that contains the created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the return value is <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Out 매개 변수는 만든 포함 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 반환 값이 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the parse was successful and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p2">&lt;/code&gt;</ept> contains a useful value; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>성공적으로 구문 분석 하 고 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">result</ph> <ept id="p2">&lt;/code&gt;</ept> 유용한 값이 포함 된, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">제공 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 여러 형식 이름을 지정할 수 있는 문자열 및 네임 스페이스에는 태그 접두사를 확인할 수 있는 개체에 따라 값입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A string that contains multiple types.</source>
          <target state="translated">여러 형식을 포함 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">구현 하는 개체 또는 서비스 공급자 <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Out parameter that contains the created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the return value is <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Out 매개 변수는 만든 포함 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 반환 값이 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the parse was successful and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p2">&lt;/code&gt;</ept> contains a useful value; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>성공적으로 구문 분석 하 고 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">result</ph> <ept id="p2">&lt;/code&gt;</ept> 유용한 값이 포함 된, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the type arguments used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 생성 하는 데 형식 인수를 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of TypeArguments is formed from &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;이 &lt;xref:System.Xaml.Schema.XamlTypeName&gt; &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.TypeArguments%2A&gt; TypeArguments 값 형식이,&lt;/xref:System.Xaml.Schema.XamlTypeName&gt; 생성 하는 데 사용 된&lt;/xref:System.Xaml.XamlType&gt; 경우</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type arguments, if any.</source>
          <target state="translated">있는 경우 형식 인수입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>May be null.</source>
          <target state="translated">Null 일 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>