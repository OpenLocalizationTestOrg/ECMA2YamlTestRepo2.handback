<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b64572575619f7a896684e2196bf4e2b0992954f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Reflection.Emit.DynamicILInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5a5c362050b52a243b66dd52c38cc7f8d60d798</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8886c1867fbf54fb3be60e1ace1708b37380f95d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</source>
          <target state="translated">Microsoft intermediate language MSIL ()를 생성 하는 다른 방법에 대 한 지원 및 메타 데이터에 대 한 토큰을 만들기 위한 및 코드, 예외 처리 및 로컬 변수 서명에 blob을 삽입 하기 위한 메서드를 포함 하 여 동적 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DynamicILInfo class allows developers to write their own MSIL generators instead of using &lt;xref:System.Reflection.Emit.ILGenerator&gt;.</source>
          <target state="translated">DynamicILInfo 클래스 &lt;xref:System.Reflection.Emit.ILGenerator&gt;.&lt;/xref:System.Reflection.Emit.ILGenerator&gt; 를 사용 하는 대신 MSIL 생성기를 직접 작성 하는 개발자를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</source>
          <target state="translated">다른 형식의 인스턴스를 만들려면, 메서드, 및 등 호출에 MSIL을 생성 하면 이러한 엔터티에 대 한 토큰 포함 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DynamicILInfo class provides several overloads of the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method, which return tokens valid in the scope of the current DynamicILInfo.</source>
          <target state="translated">DynamicILInfo 클래스는 다양 한 오버 로드를 제공는 &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;현재 DynamicILInfo의 범위에 유효한 토큰을 반환 하는 메서드.&lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you need to call an overload of the &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt; method, you can obtain a &lt;xref:System.RuntimeMethodHandle&gt; for that overload and pass it to the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; method to obtain a token to embed in your MSIL.</source>
          <target state="translated">예를 들어의 오버 로드를 호출 하는 경우는 &lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;메서드를 가져올 수 있습니다는 &lt;xref:System.RuntimeMethodHandle&gt;오버 로드 하 고 전달 하는 &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;메서드에서 프로그램 MSIL에 포함할 수 있는 토큰을 가져오기 위해.&lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt; &lt;/xref:System.RuntimeMethodHandle&gt; &lt;/xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have created &lt;xref:System.Byte&gt; arrays for your local variable signature, exceptions, and code body, you can use the &lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;, &lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;, and &lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt; methods to insert them into the &lt;xref:System.Reflection.Emit.DynamicMethod&gt; associated with your DynamicILInfo object.</source>
          <target state="translated">만든 후 &lt;xref:System.Byte&gt;사용할 수 있습니다 로컬 변수 서명에, 예외 및 코드 본문에 대 한 배열는 &lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;, &lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;, 및 &lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;로 삽입 하는 메서드는 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;DynamicILInfo 개체와 관련 된.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt; &lt;/xref:System.Byte&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 경험 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Do not use DynamicILInfo to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 대리자를 만드는 다른 동적 메서드에 대리자 생성자를 직접 호출 하 여 코드를 생성할 DynamicILInfo를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, use the &lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt; method to create the delegate.</source>
          <target state="translated">대신를 사용 하 여는 &lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;대리자를 만드는 방법.&lt;/xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</source>
          <target state="translated">대리 생성자를 사용 하 여 만든 대리자에는 대상 동적 메서드에 대 한 참조가 없습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</source>
          <target state="translated">동적 메서드가 대리자 사용 되는 동안 가비지 수집에 의해 회수 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets the dynamic method whose body is generated by the current instance.</source>
          <target state="translated">본문이 현재 인스턴스에 의해 생성 되는 동적 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object is always associated with a dynamic method.</source>
          <target state="translated">A &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체는 항상 동적 메서드에 연결 된.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of the &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the &lt;xref:System.Reflection.Emit.ILGenerator&gt; class.</source>
          <target state="translated">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;MSIL 스트림에, 예외 처리 및 &lt;xref:System.Reflection.Emit.ILGenerator&gt;클래스&lt;/xref:System.Reflection.Emit.ILGenerator&gt; 를 사용 하지 않고 MSIL을 생성 하려는 개발자를 위한 동적 메서드에 로컬 변수 서명에 삽입의 다른 방법을 제공 하는 클래스는&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt; 의 용도</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.Emit.DynamicMethod&gt; object representing the dynamic method for which the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is generating code.</source>
          <target state="translated">A &lt;xref:System.Reflection.Emit.DynamicMethod&gt;동적 메서드를 나타내는 개체 현재 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 코드를 생성 합니다.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing the signature for the associated dynamic method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 연결 된 동적 메서드의 시그니처를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">서명 blob에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An array that contains the signature.</source>
          <target state="translated">서명이 들어 있는 배열입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</source>
          <target state="translated">메타 데이터 및 연결된 된 동적 메서드의 MSIL 스트림에에 포함할 수 있는 토큰입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a dynamic method to be called from the associated method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 연결 된 메서드에서 호출할 수는 동적 메서드를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 현재 연관 된 동적 메서드에서 동적 메서드를 호출할 수 있습니다 &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>To call the associated dynamic method recursively, pass the value of the &lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt; property.</source>
          <target state="translated">연결 된 동적 메서드를 재귀적으로 호출 하려면 값을 전달는 &lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;속성.&lt;/xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The dynamic method to call.</source>
          <target state="translated">동적 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</source>
          <target state="translated">MSIL 명령 대상으로 연결된 된 동적 메서드의 MSIL 스트림에 포함할 수 있는 토큰입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>에 연결 된 동적 메서드에서 액세스 하는 필드 표시 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; &lt;xref:System.Reflection.FieldInfo&gt;액세스 한 다음 &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; &lt;xref:System.RuntimeFieldHandle&gt;.&lt;/xref:System.RuntimeFieldHandle&gt; 가져올 속성을&lt;/xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; 사용 하 여 필드에 대 한&lt;/xref:System.Reflection.FieldInfo&gt; 가져올 메서드를&lt;/xref:System.Type.GetField%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The field to be accessed.</source>
          <target state="translated">액세스할 필드입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">현재 범위에서 필드에 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a method to be accessed from the associated dynamic method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>에 연결 된 동적 메서드에서 액세스 하는 메서드를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must obtain a token for any method that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 메서드에 대 한 토큰을 얻어야 &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to access, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; &lt;xref:System.Reflection.MethodInfo&gt;액세스 하 고 다음 &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; &lt;xref:System.RuntimeMethodHandle&gt;.&lt;/xref:System.RuntimeMethodHandle&gt; 가져올 속성&lt;/xref:System.Reflection.MethodBase.MethodHandle%2A&gt; 을 사용 하려는 방법에 대 한&lt;/xref:System.Reflection.MethodInfo&gt; 가져올 메서드를&lt;/xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  For a method that belongs to a generic type, use the &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt; method overload and specify a &lt;xref:System.RuntimeTypeHandle&gt; for the generic type.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 제네릭 형식에 속하는 메서드를 사용 하 여는 &lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;메서드 오버 로드 하 고 지정 된 &lt;xref:System.RuntimeTypeHandle&gt;제네릭 형식에 대 한.&lt;/xref:System.RuntimeTypeHandle&gt; &lt;/xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method to be accessed.</source>
          <target state="translated">에 액세스 하는 메서드.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">와 같은 메서드를 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 &lt;xref:System.Reflection.Emit.OpCodes.Call&gt;또는 &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, 현재 범위에서 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.&lt;/xref:System.Reflection.Emit.OpCodes.Ldtoken&gt; &lt;/xref:System.Reflection.Emit.OpCodes.Call&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a type to be used in the associated dynamic method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 연결 된 동적 메서드에서 사용할 형식을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">이 메서드 오버 로드에서 반환 된 토큰을 사용 하면 로컬 변수 유형을 정의 하 고 현재와 관련 된 동적 메서드에서 형식의 인스턴스를 만들려는 msil &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a &lt;xref:System.RuntimeTypeHandle&gt; representing a type, use the &lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">가져오려는 &lt;xref:System.RuntimeTypeHandle&gt;형식을 나타내는 사용 하 여는 &lt;xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.Type.TypeHandle%2A?displayProperty=fullName&gt; &lt;/xref:System.RuntimeTypeHandle&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The type to be used.</source>
          <target state="translated">형식이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">현재 범위에서 형식이 필요한 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a string literal to be used in the associated dynamic method.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 연결 된 동적 메서드에서 사용할 리터럴 문자열을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The string to be used.</source>
          <target state="translated">사용할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">현재 범위에는 문자열을 필요로 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 지정된 된 제네릭 형식에는 필드는 필드에서 연결된 된 동적 메서드에서;에 액세스할 수를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">현재와 관련 된 동적 메서드를 통해 액세스할 수 있는 모든 필드에 대 한 토큰을 얻어야 &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.FieldInfo&gt; for the field you want to access, and then use the &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; property to get the &lt;xref:System.RuntimeFieldHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Type.GetField%2A?displayProperty=fullName&gt; &lt;xref:System.Reflection.FieldInfo&gt;액세스 하 고 다음 &lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; &lt;xref:System.RuntimeFieldHandle&gt;.&lt;/xref:System.RuntimeFieldHandle&gt; 가져올 속성&lt;/xref:System.Reflection.FieldInfo.FieldHandle%2A&gt; 을 사용 하려면 필드에 대 한&lt;/xref:System.Reflection.FieldInfo&gt; 가져올 메서드를&lt;/xref:System.Type.GetField%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The field to be accessed.</source>
          <target state="translated">액세스할 필드입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The generic type the field belongs to.</source>
          <target state="translated">제네릭 형식 필드에 속해 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">현재 범위에 있는 필드에 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a token, valid in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, representing a method on a generic type.</source>
          <target state="translated">현재 범위 내에 토큰을 가져옵니다. <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 제네릭 형식에 메서드를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must obtain a token for any method that will be called by the dynamic method associated with the current &lt;xref:System.Reflection.Emit.DynamicILInfo&gt; object.</source>
          <target state="translated">현재와 연결 된 동적 메서드에서 호출 될 메서드에 대 한 토큰을 얻어야 &lt;xref:System.Reflection.Emit.DynamicILInfo&gt;개체입니다.&lt;/xref:System.Reflection.Emit.DynamicILInfo&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.MethodInfo&gt; for the method you want to call, and then use the &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; property to get the &lt;xref:System.RuntimeMethodHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; &lt;xref:System.Reflection.MethodInfo&gt;호출 하 고 다음 &lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt; &lt;xref:System.RuntimeMethodHandle&gt;.&lt;/xref:System.RuntimeMethodHandle&gt; 가져올 속성&lt;/xref:System.Reflection.MethodBase.MethodHandle%2A&gt; 을 사용 하려는 방법에 대 한&lt;/xref:System.Reflection.MethodInfo&gt; 가져올 메서드를&lt;/xref:System.Type.GetMethod%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The method.</source>
          <target state="translated">메서드입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The generic type the method belongs to.</source>
          <target state="translated">메서드는 제네릭 형식에 속합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;xref:System.Reflection.Emit.OpCodes.Call&gt; or &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, in the scope of the current <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">와 같은 메서드를 액세스 하는 MSIL 명령의 피연산자로 사용할 수 있는 토큰 &lt;xref:System.Reflection.Emit.OpCodes.Call&gt;또는 &lt;xref:System.Reflection.Emit.OpCodes.Ldtoken&gt;, 현재 범위에서 <bpt id="p1">&lt;xref href="System.Reflection.Emit.DynamicILInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.&lt;/xref:System.Reflection.Emit.OpCodes.Ldtoken&gt; &lt;/xref:System.Reflection.Emit.OpCodes.Call&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">연결 된 동적 메서드의 코드 본문을 설정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">사용자 고유의 메타 데이터와 MSIL를 생성 하려면 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 경험 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array that contains the MSIL stream.</source>
          <target state="translated">MSIL 스트림에 포함 된 배열입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">메서드를 실행 하는 경우 피연산자 스택에 항목의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">연결 된 동적 메서드의 코드 본문을 설정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">유효성을 검사 하지 않습니다는 MSIL 스트림에에서 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">두 번째로이 메서드를 호출 합니다. 첫 번째 MSIL 스트림에 두 번째 바꿉니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</source>
          <target state="translated">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미"에 익숙한 사용자 고유의 메타 데이터와 MSIL를 생성 하려면 및 "파티션 III: CIL 명령 집합을 사용 합니다."</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A pointer to a byte array containing the MSIL stream.</source>
          <target state="translated">MSIL 스트림에 포함 하는 바이트 배열에 대 한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The number of bytes in the MSIL stream.</source>
          <target state="translated">MSIL 스트림에 바이트의 수입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">메서드를 실행 하는 경우 피연산자 스택에 항목의 최대 수입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;code&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;codeSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;code&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <ph id="ph2">&lt;code&gt;codeSize&lt;/code&gt;</ph> 0 보다 큽니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;codeSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;codeSize&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">연결 된 동적 메서드의 예외 메타 데이터를 설정합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, 필터링 하 고 오류 블록입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">이 메타 데이터의 레이아웃에 정보를 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An array that contains the exception metadata.</source>
          <target state="translated">예외 메타 데이터가 포함 된 배열입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">연결 된 동적 메서드의 예외 메타 데이터를 설정합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">메서드에 대 한 예외 메타 데이터 정의 모두의 크기와 위치 <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, 필터링 하 고 오류 블록입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">이 메타 데이터의 레이아웃에 정보를 인프라 CLI (공용 언어) 설명서, "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A pointer to a byte array containing the exception metadata.</source>
          <target state="translated">예외 메타 데이터를 포함 하는 바이트 배열에 대 한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The number of bytes of exception metadata.</source>
          <target state="translated">예외 메타 데이터의 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;exceptions&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;exceptions&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <ph id="ph2">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> 0 보다 큽니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;exceptionSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;exceptionSize&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">연결된 된 동적 메서드에서 대 한 지역 변수의 레이아웃을 설명 하는 지역 변수 시그니처를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.</source>
          <target state="translated">로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;가져올 메서드를 한 &lt;xref:System.Reflection.Emit.SignatureHelper&gt;로컬 서명에 대 한.&lt;/xref:System.Reflection.Emit.SignatureHelper&gt; &lt;/xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">로컬 변수 서명에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.</source>
          <target state="translated">지역 변수 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt; 연결된에 대 한 레이아웃을 포함 하는 배열</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">연결된 된 동적 메서드에서 대 한 지역 변수의 레이아웃을 설명 하는 지역 변수 시그니처를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">로컬 변수 서명에 메서드의 로컬 변수가의 레이아웃을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt; method to get a &lt;xref:System.Reflection.Emit.SignatureHelper&gt; for the local signature.</source>
          <target state="translated">로컬 변수 서명에의 생성을 간소화 하기 위해 사용 하 여는 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서) &lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;가져올 메서드를 한 &lt;xref:System.Reflection.Emit.SignatureHelper&gt;로컬 서명에 대 한.&lt;/xref:System.Reflection.Emit.SignatureHelper&gt; &lt;/xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">로컬 변수 서명에 대 한 자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인입니다. 참조 <bpt id="p1">[</bpt>ECMA C# 및 Common Language Infrastructure 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> msdn 및 <bpt id="p2">[</bpt>Standard ecma-335-인프라 CLI (공용 언어)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> Ecma International 웹 사이트에 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An array that contains the layout of local variables for the associated &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.</source>
          <target state="translated">지역 변수 &lt;xref:System.Reflection.Emit.DynamicMethod&gt;.&lt;/xref:System.Reflection.Emit.DynamicMethod&gt; 연결된에 대 한 레이아웃을 포함 하는 배열</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The number of bytes in the signature.</source>
          <target state="translated">서명의 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localSignature&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;localSignature&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <ph id="ph2">&lt;code&gt;signatureSize&lt;/code&gt;</ph> 0 보다 큽니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signatureSize&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;signatureSize&lt;/code&gt;</ph>0 보다 작습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>