<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6841cd9162d398cfba77671a7ff12c4c406f12ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.SqlClient.SqlTransaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce31d06fd403d43c5cdc34303ca3f401cfa5aa61</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98adb299035ddd3858f6e0d3130dc478b06bfe13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a <ph id="ph1">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> transaction to be made in a <ph id="ph2">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> database.</source>
          <target state="translated">나타냅니다는 <ph id="ph1">[!INCLUDE[tsql](~/add/includes/tsql-md.md)]</ph> 에 만들 트랜잭션을 <ph id="ph2">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> 데이터베이스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Commits the database transaction.</source>
          <target state="translated">데이터베이스 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Commit method is equivalent to the Transact-SQL COMMIT TRANSACTION statement.</source>
          <target state="translated">Commit 메서드 TRANSACT-SQL COMMIT TRANSACTION 문을 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database.</source>
          <target state="translated">롤백할 수 없습니다 트랜잭션이 커밋된 후 모든 수정 내용이 데이터베이스의 영구적인 부분이 있어야 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see SQL Server Books Online.</source>
          <target state="translated">자세한 내용은 SQL Server 온라인 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">`Try`</ph><ph id="ph4">/</ph><ph id="ph5">`Catch`</ph> exception handling should always be used when committing or rolling back a &lt;xref:System.Data.SqlClient.SqlTransaction&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph> <ph id="ph3">`Try`</ph> <ph id="ph4">/</ph> <ph id="ph5">`Catch`</ph> 예외 처리 커밋 또는 롤백에 &lt;xref:System.Data.SqlClient.SqlTransaction&gt;.&lt;/xref:System.Data.SqlClient.SqlTransaction&gt; 때 항상 사용 해야</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both <ph id="ph1">`Commit`</ph> and &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; generates an &lt;xref:System.InvalidOperationException&gt; if the connection is terminated or if the transaction has already been rolled back on the server.</source>
          <target state="translated">둘 다 <ph id="ph1">`Commit`</ph> 및 &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;생성 한 &lt;xref:System.InvalidOperationException&gt;연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</source>
          <target state="translated">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An error occurred while trying to commit the transaction.</source>
          <target state="translated">트랜잭션을 커밋하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-or-       The connection is broken.</source>
          <target state="translated">-또는-연결이 끊어졌습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object associated with the transaction, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the transaction is no longer valid.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 트랜잭션과 관련 된 개체 또는 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 트랜잭션이 더 이상 유효한 경우.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single application may have multiple database connections, each with zero or more transactions.</source>
          <target state="translated">단일 응용 프로그램에는 각각&amp;0; 개 이상의 트랜잭션을 사용 하 여 여러 데이터베이스 연결을 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property lets you determine the connection object associated with a particular transaction created by &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;.</source>
          <target state="translated">이 속성을 사용 하면 &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;.&lt;/xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; 만든 특정 트랜잭션과 관련 된 연결 개체를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object associated with the transaction.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.SqlClient.SqlConnection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 트랜잭션과 관련 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">&lt;xref href="System.Data.IsolationLevel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this transaction.</source>
          <target state="translated">지정 된 <bpt id="p1">&lt;xref href="System.Data.IsolationLevel"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parallel transactions are not supported.</source>
          <target state="translated">병렬 트랜잭션은 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the &lt;xref:System.Data.IsolationLevel&gt; applies to the whole transaction.</source>
          <target state="translated">따라서는 &lt;xref:System.Data.IsolationLevel&gt;전체 트랜잭션에 적용 됩니다.&lt;/xref:System.Data.IsolationLevel&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</source>
          <target state="translated">SQL Server 격리 수준에 대 한 자세한 내용은 "격리 수준에서" 데이터베이스 엔진의 SQL Server 온라인 설명서를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.IsolationLevel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this transaction.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.IsolationLevel"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_ReadCommitted" name="ReadCommitted" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_ReadCommitted" name="ReadCommitted" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Rolls back a transaction from a pending state.</source>
          <target state="translated">보류 상태에서 트랜잭션을 롤백합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Rollback method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</source>
          <target state="translated">Rollback 메서드 TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see SQL Server Books Online.</source>
          <target state="translated">자세한 내용은 SQL Server 온라인 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction can only be rolled back from a pending state (after &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; has been called, but before &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; is called).</source>
          <target state="translated">트랜잭션이 롤백할 수 보류 상태에서 (후 &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;호출 하기 전에 &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;라고).&lt;/xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; &lt;/xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction is rolled back in the event it is disposed before <ph id="ph1">`Commit`</ph> or <ph id="ph2">`Rollback`</ph> is called.</source>
          <target state="translated">다시 이벤트 삭제 하기 전에 트랜잭션이 <ph id="ph1">`Commit`</ph> 또는 <ph id="ph2">`Rollback`</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">`Try`</ph><ph id="ph4">/</ph><ph id="ph5">`Catch`</ph> exception handling should always be used when rolling back a transaction.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph> <ph id="ph3">`Try`</ph> <ph id="ph4">/</ph> <ph id="ph5">`Catch`</ph> 트랜잭션을 롤백할 때 항상 예외 처리를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Rollback`</ph> generates an &lt;xref:System.InvalidOperationException&gt; if the connection is terminated or if the transaction has already been rolled back on the server.</source>
          <target state="translated">A <ph id="ph1">`Rollback`</ph> 생성 한 &lt;xref:System.InvalidOperationException&gt;연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</source>
          <target state="translated">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An error occurred while trying to commit the transaction.</source>
          <target state="translated">트랜잭션을 커밋하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-or-       The connection is broken.</source>
          <target state="translated">-또는-연결이 끊어졌습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.</source>
          <target state="translated">보류 상태에서 트랜잭션을 롤백합니다 고, 트랜잭션 또는 저장점 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</source>
          <target state="translated">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다.&lt;/xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see "Explicit Transactions" and "Transaction Savepoints" in SQL Server Books Online.</source>
          <target state="translated">자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "트랜잭션 저장점"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction can only be rolled back from a pending state (after &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; has been called, but before &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; is called).</source>
          <target state="translated">트랜잭션이 롤백할 수 보류 상태에서 (후 &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;호출 하기 전에 &lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;라고).&lt;/xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt; &lt;/xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transaction is rolled back if it is disposed before <ph id="ph1">`Commit`</ph> or <ph id="ph2">`Rollback`</ph> is called.</source>
          <target state="translated">하기 전에 삭제 되는 경우 트랜잭션이 <ph id="ph1">`Commit`</ph> 또는 <ph id="ph2">`Rollback`</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">`Try`</ph><ph id="ph4">/</ph><ph id="ph5">`Catch`</ph> exception handling should always be used when rolling back a transaction.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph> <ph id="ph3">`Try`</ph> <ph id="ph4">/</ph> <ph id="ph5">`Catch`</ph> 트랜잭션을 롤백할 때 항상 예외 처리를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Rollback`</ph> generates an &lt;xref:System.InvalidOperationException&gt; if the connection is terminated or if the transaction has already been rolled back on the server.</source>
          <target state="translated">A <ph id="ph1">`Rollback`</ph> 생성 한 &lt;xref:System.InvalidOperationException&gt;연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</source>
          <target state="translated">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The name of the transaction to roll back, or the savepoint to which to roll back.</source>
          <target state="translated">트랜잭션이 롤백 또는 롤백할 수 있는 저장 점으로의 이름입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No transaction name was specified.</source>
          <target state="translated">트랜잭션 이름이 지정 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-or-       The connection is broken.</source>
          <target state="translated">-또는-연결이 끊어졌습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.</source>
          <target state="translated">트랜잭션의 일부를 사용할 수 있으며 저장점 이름을 지정 하는 트랜잭션에 저장 점을 만듭니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Save method is equivalent to the Transact-SQL SAVE TRANSACTION statement.</source>
          <target state="translated">Save 메서드 TRANSACT-SQL SAVE TRANSACTION 문을 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value used in the <ph id="ph1">`savePoint`</ph> parameter can be the same value used in the <ph id="ph2">`transactionName`</ph> parameter of some implementations of the &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt; method.</source>
          <target state="translated">사용 되는 값은 <ph id="ph1">`savePoint`</ph> 매개 변수에서 사용 하는 일 수는 <ph id="ph2">`transactionName`</ph> 일부 구현의 매개 변수는 &lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;메서드.&lt;/xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Savepoints offer a mechanism to roll back parts of transactions.</source>
          <target state="translated">저장 점은 트랜잭션의 일부를 롤백해야 하는 메커니즘을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>You create a savepoint using the Save method, and then later call the &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt; method to roll back to the savepoint instead of rolling back to the start of the transaction.</source>
          <target state="translated">Save 메서드를 사용 하 여 저장 점을 만들 한 다음 이후의 호출에서 &lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;메서드를 트랜잭션의 시작 부분으로 롤백하는 대신 저장 점으로 롤백하려면.&lt;/xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The name of the savepoint.</source>
          <target state="translated">저장 점의 이름입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An error occurred while trying to commit the transaction.</source>
          <target state="translated">트랜잭션을 커밋하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The transaction has already been committed or rolled back.</source>
          <target state="translated">트랜잭션이 이미 커밋 또는 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-or-       The connection is broken.</source>
          <target state="translated">-또는-연결이 끊어졌습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>