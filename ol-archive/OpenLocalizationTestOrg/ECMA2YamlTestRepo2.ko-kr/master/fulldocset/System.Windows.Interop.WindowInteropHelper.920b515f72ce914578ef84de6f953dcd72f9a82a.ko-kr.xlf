<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4630f91e3baca4c8c73026f92f6ba246ae29a8e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.WindowInteropHelper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a996eefd90f00f2c60dcacf7f609cfccd1c5f2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b86cfff4608a46f453ed9a38fd30635f7c287a1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Assists interoperation between <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> code.</source>
          <target state="translated">사이의 상호 운용을 지원 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 및 <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> 코드입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class allows the caller to have internal access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">이 클래스의 멤버 수에 대 한 내부 액세스 하려면 호출자는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> HWND 및 부모 HWND의는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;.&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The proper security checks are performed by those members.</source>
          <target state="translated">이러한 멤버를 통해 적절 한 보안 검사가 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class whenever you need a more specific object based on its HWND.</source>
          <target state="translated">해당 HWND를 기반으로 하는 보다 구체적인 개체 필요할 때마다이 클래스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example scenario is if you need to host a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">호스트 해야 하는 예제 시나리오는 한 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 대화 상자에는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initialize the WindowInteropHelper with a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.</source>
          <target state="translated">와 WindowInteropHelper 초기화는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 대화 상자에 대 한 window 개체입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then get the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property and specify the owner for the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window with the &lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt; property.</source>
          <target state="translated">가져올 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 에서 창 핸들 (HWND)는 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;속성에 대 한 소유자를 지정는 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 창에는 &lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;속성.&lt;/xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt; &lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code example shows how to use WindowInteropHelper when hosting a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">다음 코드 예제에서는 WindowInteropHelper 호스트할 때 사용 하는 방법을 보여 줍니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 대화 상자에는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p2">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CorePseudocode#WindowInteropHelper<ept id="p4">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept><ept id="p3">]</ept>       Another scenario supported by this class is to obtain a &lt;xref:System.Windows.Interop.HwndSource&gt; object from a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt; object.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CorePseudocode #WindowInteropHelper<ept id="p2">](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CorePseudocode #WindowInteropHelper<ept id="p4">](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper)</ept> <ept id="p3">]</ept> 을 가져오는 것이 클래스에서 지원 되는 또 다른 시나리오로 &lt;xref:System.Windows.Interop.HwndSource&gt;에서 개체는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> &lt;xref:System.Windows.Window&gt;개체입니다.&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Interop.HwndSource&gt;  </target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Interop.HwndSource&gt; enables direct processing of <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> messages through the &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.HwndSource&gt;직접 처리할 수 있으므로 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 를 통해 메시지는 &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;메서드.&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; &lt;/xref:System.Windows.Interop.HwndSource&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using &lt;xref:System.Windows.Interop.HwndSource&gt; and &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; in place of a &lt;xref:System.Windows.Window&gt; you can still handle messages that have no equivalent or handling in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">사용 하 여 &lt;xref:System.Windows.Interop.HwndSource&gt;및 &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;대신는 &lt;xref:System.Windows.Window&gt;해당 기능이 나에서 처리 된 메시지를 계속 처리할 수 있습니다 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.&lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; &lt;/xref:System.Windows.Interop.HwndSource&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a WindowInteropHelper with the &lt;xref:System.Windows.Window&gt; source, then call &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; on the WindowInteropHelper to get from HWND to &lt;xref:System.Windows.Interop.HwndSource&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Window&gt;다음 호출 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;에서 HWND &lt;xref:System.Windows.Interop.HwndSource&gt;.&lt;/xref:System.Windows.Interop.HwndSource&gt; 를 가져오려는 WindowInteropHelper에&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; 소스&lt;/xref:System.Windows.Window&gt; 를 사용 하 여 한 WindowInteropHelper 만들기</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class for a specified <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 항목에 대 한 클래스 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 창.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> application.</source>
          <target state="translated">창 대화 상자 또는 범위 내에서 호스팅하기에 적합 하지 않은 일 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window object.</source>
          <target state="translated">A <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> window 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates the HWND of the window if the HWND has not been created yet.</source>
          <target state="translated">HWND 아직 생성 되지 않은 경우 창의 HWND를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the EnsureHandle method when you want to separate window handle (HWND) creation from the actual showing of the managed &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">관리 되는 &lt;xref:System.Windows.Window&gt;.&lt;/xref:System.Windows.Window&gt; 실제 모습에서 창 핸들 (HWND) 만들기를 분리 하려면 때 EnsureHandle 방법 사용</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</source>
          <target state="translated">창을 표시 하는 데 필요 없이 해당 작업을 수행할 수 있는 자동화 클라이언트가 있을 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window has not yet been created, this method creates the native window, sets the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property, and returns the HWND.</source>
          <target state="translated">이 메서드는 네이티브 창이 집합 만듭니다 네이티브 창이 아직 만들지 않은 경우는 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;속성과 HWND 반환 합니다.&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window has been created already, the handle of the existing native window is returned.</source>
          <target state="translated">네이티브 창이 이미 생성 된 경우 기존 기본 창 핸들 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the native window is created as a result of calling this method, the &lt;xref:System.Windows.Window.SourceInitialized&gt; event is raised.</source>
          <target state="translated">이 메서드를 호출 하 여 네이티브 창이 만들어지면는 &lt;xref:System.Windows.Window.SourceInitialized&gt;이벤트가 발생 합니다.&lt;/xref:System.Windows.Window.SourceInitialized&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Querying the &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt; property after the EnsureHandle method is called returns the existing window handle.</source>
          <target state="translated">쿼리는 &lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;속성 EnsureHandle 메서드가 호출 된 후 기존 창 핸들을 반환 합니다.&lt;/xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visual tree is not attached to the window until after the &lt;xref:System.Windows.Window.Show%2A&gt; method is called.</source>
          <target state="translated">시각적 트리 후까지 창에 연결 되어 있지는 &lt;xref:System.Windows.Window.Show%2A&gt;메서드를 호출 합니다.&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the EnsureHandle method more than one time does not create new window handles.</source>
          <target state="translated">한 번 이상 EnsureHandle 메서드를 호출 합니다. 새 창 핸들을 만들지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the EnsureHandle method when the handle has already been created by a call to the &lt;xref:System.Windows.Window.Show%2A&gt; method does not create a new window handle.</source>
          <target state="translated">메서드를 호출 하면 EnsureHandle 핸들에 대 한 호출에서 이미 만들어진 때의 &lt;xref:System.Windows.Window.Show%2A&gt;메서드는 새 창 핸들을 만들지 않습니다.&lt;/xref:System.Windows.Window.Show%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A native window is only created when no handle exists when the EnsureHandle method is called.</source>
          <target state="translated">네이티브 창 핸들이 없는 EnsureHandle 메서드를 호출할 때 경우에 만들어집니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</source>
          <target state="translated">창 설정 된 속성을 통해 p/invoke 네이티브 창 Api를 사용 하 여 Api 관리 되는 창에 나타나지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the EnsureHandle method is called, the &lt;xref:System.Windows.Window.Topmost%2A&gt; property is not guaranteed to reflect the native setting.</source>
          <target state="translated">예를 들어, EnsureHandle 메서드를 호출한 후에 네이티브 MS_EX_TOPMOST 플래그를 사용 하 여 창을 설정 하는 경우는 &lt;xref:System.Windows.Window.Topmost%2A&gt;네이티브 설정을 반영 하도록 속성은 아닙니다.&lt;/xref:System.Windows.Window.Topmost%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that represents the HWND.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;HWND를 나타내는입니다.&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the window handle for a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window that is used to create this <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 창 핸들을 가져옵니다는 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 이 만드는 데 사용 되는 창 <bpt id="p1">&lt;xref href="System.Windows.Interop.WindowInteropHelper"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> window handle (HWND).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 창 핸들 (HWND).</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> owner window.</source>
          <target state="translated">핸들을 가져오거나 설정 합니다.는 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 소유자 창.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reparent windows by setting this property.</source>
          <target state="translated">이 속성을 설정 하 여 windows 부모를 재지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>As is true for general <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.</source>
          <target state="translated">일반 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 프로그래밍을 이미 사용 중인 windows 부모 재지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The owner window handle (HWND).</source>
          <target state="translated">소유자 창 핸들 (HWND)입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>