<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ce462ec6d08f53e85ba17f2d1c8385fd5c72f20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Automation.Text.TextPatternRange.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bc2543dafa7e3aeecb308c621e5fa929041bbf8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d4e5212b60b890f55de14778ddcb2b8d31f2f0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a span of continuous text in a <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> container.</source>
          <target state="translated">연속 된 텍스트의 범위를 나타냅니다는 <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컨테이너입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A TextPatternRange can represent an insertion point, a subset, or all of the text in a &lt;xref:System.Windows.Automation.TextPattern&gt; container.</source>
          <target state="translated">삽입 지점 하위 집합 또는 모두에 있는 텍스트의 한 TextPatternRange를 나타낼 수 있습니다는 &lt;xref:System.Windows.Automation.TextPattern&gt;컨테이너.&lt;/xref:System.Windows.Automation.TextPattern&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A TextPatternRange will become invalid if one of the following occurs: the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container changes because of some user activity, or the &lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt; method of &lt;xref:System.Windows.Automation.ValuePattern&gt; is used to programmatically change the value of the text in the &lt;xref:System.Windows.Automation.TextPattern&gt; container.</source>
          <target state="translated">TextPatternRange 다음 중 하나가 발생 하는 경우에 유효 하지 않게 됩니다:의 텍스트는 &lt;xref:System.Windows.Automation.TextPattern&gt;사용자 작업으로 인해 또는 &lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;방식의 &lt;xref:System.Windows.Automation.ValuePattern&gt;프로그래밍 방식으로 텍스트의 값을 변경 하는 데 사용 되는 &lt;xref:System.Windows.Automation.TextPattern&gt;컨테이너.&lt;/xref:System.Windows.Automation.TextPattern&gt; &lt;/xref:System.Windows.Automation.ValuePattern&gt; &lt;/xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt; &lt;/xref:System.Windows.Automation.TextPattern&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">추가 선택 서로 분리 된 여러를 지 원하는 텍스트 컨테이너의 강조 표시 된 텍스트 컬렉션에 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">새 선택의 영역에 텍스트 삽입 지점 이동합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">삽입 지점이 이동 디 제너 레이트 텍스트 범위를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">텍스트 공급자는 여러를 지원 하지 않는 경우 선택 항목을 서로 분리 된 (예를 들어 &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;의 값이 있어야 <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).&lt;/xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Retrieves a new <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identical to the original <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> and inheriting all properties of the original.</source>
          <target state="translated">새 검색 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원본과 동일 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRange"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 및 모든 속성을 상속 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, create a new &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; from the &lt;xref:System.Windows.Automation.TextPattern&gt; and move the two endpoints to correspond with the endpoints of the original text range.</source>
          <target state="translated">또는 새를 만들 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;에서 &lt;xref:System.Windows.Automation.TextPattern&gt;원래 텍스트 범위 끝점에 해당 하는 두 개의 끝점을 이동 합니다.&lt;/xref:System.Windows.Automation.TextPattern&gt; &lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">새 범위를에서 독립적으로 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The new text range.</source>
          <target state="translated">새 텍스트 범위입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.</source>
          <target state="translated">Null 참조 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>)는 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Returns a &lt;xref:System.Boolean&gt; value indicating whether the span (the <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> endpoint to the <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">반환은 &lt;xref:System.Boolean&gt;나타내는 값 여부 범위 (의 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 끝점을는 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 끝점) 범위는 다른 텍스트 범위와 동일한 텍스트.&lt;/xref:System.Boolean&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A text range to compare.</source>
          <target state="translated">비교할 텍스트 범위입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the span of both text ranges is identical; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>두 텍스트 범위가;와 같은 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">범위와 비교 되는 경우 같은 텍스트 공급자에서 제공 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Int32&gt; indicating whether two text ranges have identical endpoints.</source>
          <target state="translated">반환 된 &lt;xref:System.Int32&gt;두 텍스트 범위의 끝점이 동일한 지 여부를 나타내는.&lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</source>
          <target state="translated">시작 및 끝 끝점을 동일한 텍스트 범위를 비교 하 여 텍스트 범위는 중복 제거 하거나 끝점 논리 텍스트 방향 순서 대로 경우를 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint of the caller.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 호출자의 끝점입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The target range for comparison.</source>
          <target state="translated">비교에 대 한 대상 범위입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoint of the target.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 대상의 끝점입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">호출자의 끝점이 대상 끝점 보다 텍스트의 앞부분에 나오는 발생 하는 경우 음수 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">호출자의 끝점이 대상 끝점과 같은 위치에 있으면&amp;0;을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">호출자의 끝점이 대상 끝점 보다 텍스트에 나중에 나타나면 양수 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If range is a null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">범위가 null 참조 이면 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If range is from another container.</source>
          <target state="translated">범위를 다른 컨테이너에서 경우.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Expands the text range to the specified <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 텍스트 범위 확장 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">범위 지정된 단위는 정확한 수량 이미 있으면 다음 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.</source>
          <target state="translated">ExpandToEnclosingUnit 메서드를 성공적으로 실행 되려면, 일련의 동작 원리를 자세히 파악할수록 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, making the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화 됩니다. 텍스트 범위에서 중복 제거 범위로 축소 되어, 즉는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점을 만드는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점이 불필요 해 집니다.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 뒤로 이동는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;요청한의 시작 부분에 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id="ph1">`unit`</ph> boundaries.</source>
          <target state="translated">범위에서 앞 이나 뒤로 이동 되는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;요청 된 수 만큼 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">이동 하 여 중복 제거 범위 상태이 던 범위가 확장 한 다음 됩니다는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;요청 된 끝점 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()      &gt; <ph id="ph1">[!NOTE]</ph> &gt;  These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated"><bpt id="p1">![</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept> move () 및 ExpandToEnclosingUnit() 텍스트 범위가 조정 되는 방법의 예 &gt; <ph id="ph1">[!NOTE]</ph> &gt;는 전체 단어, 문장 또는 삽입 지점 또는 가상 커서 위치에서 전체 단락 읽으므로 화면 판독기에 대 한 일반적이 단계는 필요 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExpandToEnclosingUnit respects both hidden and visible text.</source>
          <target state="translated">ExpandToEnclosingUnit는 숨겨진 / 표시 텍스트를 존중 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI 자동화 클라이언트가 확인할 수는 &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부에 대 한.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExpandToEnclosingUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">ExpandToEnclosingUnit 단위는 다음 가장 큰 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;지원 되는 경우에는 주어진 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;컨트롤에서 지원 되지 않습니다.&lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;</source>
          <target state="translated">-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The textual unit.</source>
          <target state="translated">텍스트 단위입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">지정 된 특성 값을 갖는 텍스트 범위 하위 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI 자동화 클라이언트 צ ְ ײ &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부를 확인 하려면.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 사용 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;전체 문서를 검색 하려면.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The attribute to search for.</source>
          <target state="translated">검색할 특성입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The attribute value to search for.</source>
          <target state="translated">검색할 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">이 값은 특성에 대해 지정 된 형식과 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>첫 번째; 마지막으로 나타나는 텍스트 범위를 반환 해야 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A text range having a matching attribute and attribute value; otherwise null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">일치 하는 특성 및 특성 값 텍스트 범위 없으면 null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">지정된 된 텍스트를 포함 하는 텍스트 범위 하위 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI 자동화 클라이언트 צ ְ ײ &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부를 확인 하려면.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Use &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to search the entire document.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 사용 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;전체 문서를 검색 하려면.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The text string to search for.</source>
          <target state="translated">검색할 텍스트 문자열입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the last occurring text range should be returned instead of the first; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>첫 번째; 마지막으로 나타나는 텍스트 범위를 반환 해야 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if case should be ignored; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>대/소문자를 구분 하지 않으면 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A text range matching the specified text; otherwise null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">지정된 된 텍스트와 일치 하는 텍스트 범위 없으면 null (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <ph id="ph1">[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified attribute across the entire text range.</source>
          <target state="translated">전체 텍스트 범위에서 지정된 된 특성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>UI Automation clients can use &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; to check text visibility.</source>
          <target state="translated">UI 자동화 클라이언트 צ ְ ײ &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부를 확인 하려면.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The text attribute.</source>
          <target state="translated">텍스트 특성입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified attribute.</source>
          <target state="translated">지정된 된 특성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</source>
          <target state="translated">예를 들어 GetAttributeValue(TextPattern.FontNameAttribute)는 부울 값을 반환 글꼴이 하나만 사용 되는 동안 텍스트 범위에 고유한 경우 글꼴 이름을 나타내는 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern.MixedAttributeValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">반환 <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern.MixedAttributeValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 텍스트 범위에서 지정된 된 특성의 값에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement.NotSupported"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">반환 <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement.NotSupported"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 지정된 된 특성의 공급자 또는 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">지정 된 특성이 올바르지 않으면 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">완전히 또는 부분적으로 표시 각 줄 텍스트 범위에서 텍스트의 경계 사각형의 컬렉션을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">각 전체 또는 부분 줄 텍스트 범위에서 텍스트의 경계 사각형의 배열입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An empty array for a degenerate text range.</source>
          <target state="translated">디 제너 레이트 텍스트 범위에 대 한 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">빈 배열을 텍스트 범위의 화면 좌표가 화면에서 완전히 벗어나거나, 스크롤되어 하거나 겹치는 창으로 가려진 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">텍스트 범위 안에 있는 모든 포함 된 개체의 컬렉션을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A collection of all child objects that fall within the range.</source>
          <target state="translated">범위 안에 있는 모든 자식 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">범위와 겹치지만 완전히 포함 되지 않는 자식 개체 컬렉션에도 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">자식 개체가 없으면 빈 컬렉션을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Returns the innermost <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encloses the text range.</source>
          <target state="translated">가장 안쪽 함수가 반환 <bpt id="p1">&lt;xref href="System.Windows.Automation.AutomationElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 텍스트 범위를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enclosing &lt;xref:System.Windows.Automation.AutomationElement&gt;, typically the text provider that supplies the text range.</source>
          <target state="translated">묶는 &lt;xref:System.Windows.Automation.AutomationElement&gt;, 일반적으로 텍스트 범위를 제공 하는 텍스트 공급자입니다.&lt;/xref:System.Windows.Automation.AutomationElement&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">그러나 텍스트 공급자에서 테이블 또는 하이퍼링크와 같은 자식 요소를 지 원하는 경우 다음 바깥쪽 요소 수는 텍스트 공급자의 하위 항목이 있습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The innermost element enclosing the caller.</source>
          <target state="translated">호출자를 포함 하는 가장 안쪽의 요소입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns the plain text of the text range.</source>
          <target state="translated">텍스트 범위의 일반 텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetText respects both hidden and visible text.</source>
          <target state="translated">GetText는 숨겨진 / 표시 텍스트를 존중 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI 자동화 클라이언트가 확인할 수는 &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부에 대 한.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">경우 <ph id="ph1">`maxLength`</ph> 길이 보다 크면 호출자의 텍스트 범위를 반환 하는 문자열 텍스트 범위의 일반 텍스트 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated">GetText은 텍스트 방향;에서 끝점 순서에 의해 적용 되지 않습니다. 논리적 텍스트 흐름 순서로 텍스트 범위의 시작 및 끝 끝점 사이의 텍스트 항상 반환 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The maximum length of the string to return.</source>
          <target state="translated">반환할 문자열의 최대 길이입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`-1`</ph> if no limit is required.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`-1`</ph> 제한이 필요한 경우.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The plain text of the text range, possibly truncated at the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">문자열이 지정 된 텍스트 범위의 일반 텍스트 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">maxLength</ph> <ept id="p1">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept> is less than -1.</source>
          <target state="translated">경우 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">maxLength</ph> <ept id="p1">&lt;/code&gt;</ept> -1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">텍스트 범위의 지정 된 텍스트 단위 수를 이동합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.</source>
          <target state="translated">텍스트 범위의 내용을 이동 해야 하는 Move 메서드를 성공적으로 실행 되려면 백그라운드 일련의 단계를 거쳐야 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화 됩니다. 텍스트 범위에서 중복 제거 범위로 축소 되어, 즉는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점은 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점이 불필요 해 집니다.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 뒤로 이동는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;요청한의 시작 부분에 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is moved forward or backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; by the requested number of <ph id="ph1">`unit`</ph> boundaries.</source>
          <target state="translated">범위에서 앞 이나 뒤로 이동 되는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;요청 된 수 만큼 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">이동 하 여 중복 제거 범위 상태이 던 범위가 확장 한 다음 됩니다는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;요청 된 끝점 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated"><bpt id="p1">![</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept> move () 및 ExpandToEnclosingUnit() 텍스트 내용 (또는 내부 텍스트)의 텍스트 컨테이너 및 포함 된 개체, 예: 하이퍼링크 또는 테이블 셀에 대 한 텍스트 범위가 조정 되는 방법의 예는 컨트롤 뷰 및 콘텐츠 뷰 모두에서 지속적인 단일 텍스트 스트림으로 노출 되는 <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> 트리; 개체 경계는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">UI 자동화 클라이언트가 낭독, 해석 또는 다른 방법으로 분석 하기 위해 텍스트를 검색 하는 경우 텍스트 내용이 나 기타 포함 된 개체가 있는 테이블과 같이 특수 한 경우에는 텍스트 범위를 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">이 호출 하 여 수행할 수 있습니다 &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;가져올 수는 &lt;xref:System.Windows.Automation.AutomationElement&gt;각 포함 된 개체 호출 다음에 대 한 &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;각 요소에 대 한 텍스트 범위를 가져오려면이 모든 텍스트 내용이 검색 될 때까지 반복적으로 수행 됩니다.&lt;/xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; &lt;/xref:System.Windows.Automation.AutomationElement&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example of a text stream with embedded objects and their range spans       Move respects both hidden and visible text.</source>
          <target state="translated">포함 된 개체와 해당 범위의 있는 텍스트 스트림과 예 이동 측면 모두 숨겨진 및 표시 되는 텍스트를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI 자동화 클라이언트가 확인할 수는 &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부에 대 한.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">이동 단위는 다음 가장 큰 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;지원 되는 경우에는 주어진 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;컨트롤에서 지원 되지 않습니다.&lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      &gt; <ph id="ph1">[!NOTE]</ph> &gt;  The text is not altered in any way as the text range just spans a different part of the text.</source>
          <target state="translated">- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;- &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&gt; <ph id="ph1">[!NOTE]</ph> &gt; 텍스트 범위는 텍스트의 다른 부분에만 걸쳐으로 텍스트는 전혀 변경 되지 않습니다.&lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The text unit boundary.</source>
          <target state="translated">텍스트 단위 경계입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The number of text units to move.</source>
          <target state="translated">이동할 텍스트 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">양수 값을 텍스트 범위를 앞으로 이동 하 고 음수 값을 이동 하면 텍스트 범위가 뒤로, 0은 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The number of units actually moved.</source>
          <target state="translated">실제로 이동한 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange*&gt; endpoints.</source>
          <target state="translated">이 새 텍스트 범위의 끝점 중 하나는 보다 크거나 작은 경우 요청 된 수보다 작을 수 보다는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange*&gt;끝점.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange*&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">텍스트 범위의 한 끝점을 두 번째 텍스트 범위의 지정된 된 끝점으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; is always less than or equal to &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).</source>
          <target state="translated">이동 하는 끝점이 동일한 텍스트 범위에 다른 끝점을 교차 경우 다른 끝점도 이동 하는 중복 제거 범위에서 확장 하 고 끝점의 순서가 올바르게 (즉, &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;항상 보다 작거나 같음 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;).&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
          <target state="translated">이동할 끝점입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Another range from the same text provider.</source>
          <target state="translated">같은 텍스트 공급자의 다른 범위입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An endpoint on the other range.</source>
          <target state="translated">다른 범위의 끝점입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of the text range the specified number of <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>s within the document range.</source>
          <target state="translated">한 끝점에서 텍스트의 범위 지정된 된 수의 이동 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>문서 범위 내에서.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the &lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt; method to execute successfully.</source>
          <target state="translated">텍스트 범위의 내용을 이동 해야 하는 백그라운드에서 순서에 대 한 일련의 단계를 거쳐야는 &lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;메서드를 실행 합니다.&lt;/xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>1.</source>
          <target state="translated">1.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint, which makes the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화 됩니다. 텍스트 범위에서 중복 제거 범위로 축소 되어, 즉는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점은 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;끝점이 불필요 해 집니다.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt; to the beginning of the requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 뒤로 이동는 &lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;요청한의 시작 부분에 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint by one requested <ph id="ph1">`unit`</ph> boundary.</source>
          <target state="translated">이동 하 여 중복 제거 범위 상태이 던 범위가 확장 한 다음 됩니다는 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;요청 된 끝점 <ph id="ph1">`unit`</ph> 경계.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept>   Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()       The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated"><bpt id="p1">![</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>이동 / / ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept> move () 및 ExpandToEnclosingUnit() 텍스트 내용 (또는 내부 텍스트)의 텍스트 컨테이너 및 포함 된 개체, 예: 하이퍼링크 또는 테이블 셀에 대 한 텍스트 범위가 조정 되는 방법의 예는 컨트롤 뷰 및 콘텐츠 뷰 모두에서 지속적인 단일 텍스트 스트림으로 노출 되는 <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]</ph> 트리; 개체 경계는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">UI 자동화 클라이언트가 낭독, 해석 또는 다른 방법으로 분석 하기 위해 텍스트를 검색 하는 경우 텍스트 내용이 나 기타 포함 된 개체가 있는 테이블과 같이 특수 한 경우에는 텍스트 범위를 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be accomplished by calling &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt; to obtain an &lt;xref:System.Windows.Automation.AutomationElement&gt; for each embedded object and then calling &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">이 호출 하 여 수행할 수 있습니다 &lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;가져올 수는 &lt;xref:System.Windows.Automation.AutomationElement&gt;각 포함 된 개체 호출 다음에 대 한 &lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;각 요소에 대 한 텍스트 범위를 가져오려면이 모든 텍스트 내용이 검색 될 때까지 반복적으로 수행 됩니다.&lt;/xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt; &lt;/xref:System.Windows.Automation.AutomationElement&gt; &lt;/xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example of a text stream with embedded objects and their range spans       MoveEndpointByUnit defers to the next largest &lt;xref:System.Windows.Automation.Text.TextUnit&gt; supported if the given &lt;xref:System.Windows.Automation.Text.TextUnit&gt; is not supported by the control.</source>
          <target state="translated">포함 된 개체와 해당 범위의 MoveEndpointByUnit 단위는 다음 텍스트 스트림과 예 가장 큰 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;지원 되는 지정 된 &lt;xref:System.Windows.Automation.Text.TextUnit&gt;컨트롤에서 지원 되지 않습니다.&lt;/xref:System.Windows.Automation.Text.TextUnit&gt; &lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;</source>
          <target state="translated">-   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;      -   &lt;xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;&lt;/xref:System.Windows.Automation.Text.TextUnit&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
          <target state="translated">이동할 끝점입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The textual unit for moving.</source>
          <target state="translated">이동할 텍스트 단위입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The number of units to move.</source>
          <target state="translated">이동할 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A positive count moves the endpoint forward.</source>
          <target state="translated">양수에는 끝점이 앞으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A negative count moves backward.</source>
          <target state="translated">음수 개수 뒤로 이동합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A count of 0 has no effect.</source>
          <target state="translated">0에는 영향이 없습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">실제로 이동한 단위 수 이며 수 면 요청 된 수보다 작을 이동 하면서 수 시작 이나 끝 문서의으로 끝점 실행 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Removes a highlighted section of text, corresponding to the calling text range <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">영역을 호출 하는 텍스트 범위에 해당 하는 텍스트의 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 끝점에서 지 원하는 여러 텍스트 컨테이너의 강조 표시 된 텍스트의 기존 컬렉션에서 선택 항목 서로 분리 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">텍스트 삽입 지점 제거 강조 표시 영역으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">디 제너 레이트 텍스트 범위를 제공 하는 삽입 지점을 이동 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (for example, &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt; must have a value of <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">텍스트 공급자는 여러를 지원 하지 않는 경우 선택 항목을 서로 분리 된 (예를 들어 &lt;xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;의 값이 있어야 <bpt id="p1">&lt;xref uid="langword_csharp_Multiple" name="Multiple" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).&lt;/xref:System.Windows.Automation.TextPattern.SupportedTextSelection*&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">텍스트 컨트롤이 텍스트 범위 뷰포트에 표시 될 때까지 세로로 스크롤합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>ScrollIntoView respects both hidden and visible text.</source>
          <target state="translated">ScrollIntoView는 숨겨진 / 표시 텍스트를 존중 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI Automation client can check the &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt; for text visibility.</source>
          <target state="translated">UI 자동화 클라이언트가 확인할 수는 &lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;텍스트 표시 여부에 대 한.&lt;/xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">텍스트 범위를 숨길 경우에 텍스트 컨트롤은 숨겨진된 텍스트 뷰포트에 앵커를 포함 하는 경우에 스크롤됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the text control should be scrolled so the text range is flush with the top of the viewport; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if it should be flush with the bottom of the viewport.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>텍스트 컨트롤 스크롤하여 뷰포트 맨 위에 텍스트 범위는 경우 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 뷰포트 맨 아래에 맞추려면 해야 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If scrolling is not supported by the control.</source>
          <target state="translated">경우 스크롤 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Highlights text in the text control corresponding to the text range <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> endpoints.</source>
          <target state="translated">텍스트 범위에 해당 하는 텍스트 컨트롤에 텍스트를 강조 표시 <bpt id="p1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <bpt id="p2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 끝점입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a degenerate text range is provided, the text insertion point will move to the &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt; endpoint of the text range.</source>
          <target state="translated">디 제너 레이트 텍스트 범위를 제공 하는 경우에 텍스트 삽입 지점에서 이동 하 여 &lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;텍스트 범위의 끝점입니다.&lt;/xref:System.Windows.Automation.Text.TextPatternRangeEndpoint&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">텍스트 컨트롤에서 텍스트 선택이 지원 되지 않는 경우 발생 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with the text range.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Windows.Automation.TextPattern"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 텍스트 범위와 연결 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The text provider.</source>
          <target state="translated">텍스트 공급자입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>