<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4736c2735cf188d5cdcd8bf7d866c85b11e0817</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.AccessControl.AceEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78ee34c7a8ac94d63772b5add84e3ddea0cb184a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76922cfb96bd81241f747e491e4e10bf4012631c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</source>
          <target state="translated">액세스 제어 목록 (ACL)에 (Ace)의 액세스 제어 항목을 반복 하는 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Gets the current element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">현재 요소를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This property gets the type-friendly version of the object.</source>
          <target state="translated">이 속성은 프로젝트의 형식에 적합 한 버전을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The current element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">현재 요소는 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next element of the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">열거자의 다음 요소로 이동는 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection.</source>
          <target state="translated">열거자를 만든 후 또는 호출한 후에 &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;메서드, 열거자가 컬렉션의 첫 번째 요소 앞에 위치 하 고 MoveNext 메서드가 처음 호출 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the end of the collection is passed, subsequent calls to MoveNext return <ph id="ph1">`false`</ph> until &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">컬렉션의 끝이 전달 된 후에 이후에 MoveNext 호출 반환 <ph id="ph1">`false`</ph> 될 때까지 &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">컬렉션에 요소를 삭제 또는 추가, 수정 등의 변화 경우 열거자는 무효화 및 MoveNext 또는 &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; throw&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; 을 다음에 호출</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>열거자를 다음 요소로 이동 성공 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 열거자가 컬렉션의 끝을 통과 하는 경우.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">컬렉션은 열거자를 만든 후 수정 되었습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Sets the enumerator to its initial position, which is before the first element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">첫 번째 요소 앞의 초기 위치에 열거자를 설정 합니다.는 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method or the Reset method throws an &lt;xref:System.InvalidOperationException&gt;</source>
          <target state="translated">열거자는 무효화 및을 다음에 호출할 경우, 추가 같은 요소를, 수정 또는 삭제 컬렉션에 내용이는 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;메서드나 Reset 메서드를 throw 한 &lt;xref:System.InvalidOperationException&gt;&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">컬렉션은 열거자를 만든 후 수정 되었습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, you must call the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined.</source>
          <target state="translated">열거자를 만든 후 또는 호출한 후에 &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;호출 해야 합니다는 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;하 여 열거자 IEnumerator.Current;의 값을 읽기 전에 컬렉션의 첫 번째 요소로 메서드 IEnumerator.Current 그렇지 않으면 정의 되지 않습니다.&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; &lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>IEnumerator.Current also throws an exception if the last call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated">마지막으로 호출 하는 경우 또한 예외를 throw IEnumerator.Current &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>, 컬렉션의 끝을 나타내는.&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">IEnumerator.Current가 열거자의 위치를 이동 하지 않으며 IEnumerator.Current 연속으로 호출 될 때까지 동일한 개체를 반환 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; &lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">컬렉션에 요소를 삭제 또는 추가, 수정 등의 변화 경우 열거자는 무효화, 및을 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; throw&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; 하거나&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; 다음에 호출</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is modified between &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;IEnumerator.Current, IEnumerator.Current로 설정 되어 요소 반환 열거자가 이미 무효로 되 었 하는 경우에.&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">컬렉션은 열거자를 만든 후 수정 되었습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>