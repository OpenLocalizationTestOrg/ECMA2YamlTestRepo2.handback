<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0301c540b2817e0d685cb31f9a82dfc17535cd1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.TypeLibExporterFlags.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6458e5d77cb6f559b014c1358cf807730043ab5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">434767dbc9dd1ca3785a17146eaaef85eb40dbac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates how a type library should be produced.</source>
          <target state="translated">형식 라이브러리를 생성 해야 하는 방법을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Used with &lt;xref:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib%2A&gt;.&lt;/xref:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib%2A&gt; 함께 사용</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows the caller to explicitly resolve type library references without consulting the registry.</source>
          <target state="translated">호출자를를 명시적으로 레지스트리를 조회 하지 않고 형식 라이브러리 참조를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When compiling on a 64-bit computer, specifies that the Type Library Exporter (Tlbexp.exe) generates a 32-bit type library.</source>
          <target state="translated">64 비트 컴퓨터에서 컴파일할 때 형식 라이브러리 내보내기 (Tlbexp.exe) 32 비트 형식 라이브러리를 생성 하도록 지정 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All data types are transformed appropriately.</source>
          <target state="translated">모든 데이터 형식은 적절 하 게 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When compiling on a 32-bit computer, specifies that the Type Library Exporter (Tlbexp.exe) generates a 64-bit type library.</source>
          <target state="translated">32 비트 컴퓨터에서 컴파일할 때 형식 라이브러리 내보내기 (Tlbexp.exe) 64 비트 형식 라이브러리를 생성 하도록 지정 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All data types are transformed appropriately.</source>
          <target state="translated">모든 데이터 형식은 적절 하 게 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Specifies no flags.</source>
          <target state="translated">플래그가 지정합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
          <target state="translated">이것이 기본값입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When exporting type libraries, the .NET Framework resolves type name conflicts by decorating the type with the name of the namespace; for example, <bpt id="p1">&lt;xref uid="langword_csharp_System.Windows.Forms.HorizontalAlignment" name="System.Windows.Forms.HorizontalAlignment" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is exported as <bpt id="p2">&lt;xref uid="langword_csharp_System_Windows_Forms_HorizontalAlignment" name="System_Windows_Forms_HorizontalAlignment" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">형식 라이브러리를 내보낼 때.NET Framework 확인 데코레이팅하여 이름의; 네임 스페이스의 형식 이름이 충돌 예를 들어 <bpt id="p1">&lt;xref uid="langword_csharp_System.Windows.Forms.HorizontalAlignment" name="System.Windows.Forms.HorizontalAlignment" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 으로 내보낸 <bpt id="p2">&lt;xref uid="langword_csharp_System_Windows_Forms_HorizontalAlignment" name="System_Windows_Forms_HorizontalAlignment" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When there is a conflict with the name of a type that is not visible from COM, the .NET Framework exports the undecorated name.</source>
          <target state="translated">COM에 표시 되는 형식의 이름으로 충돌이 발생 하는 경우.NET Framework 데코레이팅되지 않은 이름을 내보냅니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Set the OldNames flag or use the <bpt id="p1">&lt;xref uid="langword_csharp_/oldnames" name="/oldnames" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> option in the Type Library Exporter (Tlbexp.exe) to force the .NET Framework to export the decorated name.</source>
          <target state="translated">OldNames 플래그를 설정 하거나 사용 하 여는 <bpt id="p1">&lt;xref uid="langword_csharp_/oldnames" name="/oldnames" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식 라이브러리 내보내기 (Tlbexp.exe)에서.NET Framework 데코레이팅된 이름을 내보내는를 강제로 옵션입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that exporting the decorated name was the default behavior in versions prior to the .NET Framework version 2.0.</source>
          <target state="translated">.NET Framework 버전 2.0 이전 버전의 기본 동작이 데코레이팅된 이름을 내보내는 note 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Exports references to types that were imported from COM as <bpt id="p1">&lt;xref uid="langword_csharp_IUnknown" name="IUnknown" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type does not have a registered type library.</source>
          <target state="translated">COM에서 가져온 형식에 대 한 참조를 내보냅니다 <bpt id="p1">&lt;xref uid="langword_csharp_IUnknown" name="IUnknown" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식에 등록된 된 형식 라이브러리가 없는 경우.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Set this flag when you want the type library exporter to look for dependent types in the registry rather than in the same directory as the input assembly.</source>
          <target state="translated">형식 라이브러리 내보내기에서 아닌 입력된 어셈블리와 동일한 디렉터리에 레지스트리에 종속 형식을 검색 하는 경우이 플래그를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>