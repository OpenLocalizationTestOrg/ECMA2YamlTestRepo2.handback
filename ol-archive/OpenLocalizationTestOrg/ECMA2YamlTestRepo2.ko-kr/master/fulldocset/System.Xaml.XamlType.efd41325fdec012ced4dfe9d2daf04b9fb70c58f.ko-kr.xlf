<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">feaf2e9bc010ccda11a135d0aa3e621b5a7c5cdf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24fc7e820c5ddefe92de2308b53bbd78beaf5eba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12c1164f8af654693804ae92fafcabbf97d05a43</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">.NET Framework XAML 서비스에서 구현 되는 전체 XAML 시스템의 일부로 XAML 형식에 대 한 정보를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many APIs in the XamlType class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">XamlType 클래스의 대부분의 Api에 대해 보고 개념은 XAML 사양 [MS XAML]의 특정 섹션으로 비슷하지만 XAML 형식에 대 한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlType is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated">XamlType는 XAML 형식에 대 한 보고 정보에 대 한.NET Framework XAML 서비스 API에서 광범위 하 게 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlType reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated">XamlType는 인스턴스를 사용 하기 위해 또는 XAML 노드 스트림을 또는 유사한 XAML 표현에서 해당 멤버에 액세스 하는 XAML 형식에 대해 알아야 할 수 있는 정보를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its reporting is similar to how the &lt;xref:System.Type&gt; in the CLR type system, together with reflection classes such as &lt;xref:System.Reflection.MemberInfo&gt;, provide information about a CLR type and its usage.</source>
          <target state="translated">보고 하는 것은 어떻게 비슷합니다 &lt;xref:System.Type&gt;CLR 형식 시스템에서 리플렉션 클래스와 함께 같은 &lt;xref:System.Reflection.MemberInfo&gt;, CLR 유형 및 그 사용법에 대 한 정보를 제공 합니다.&lt;/xref:System.Reflection.MemberInfo&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To extend the XAML type system, you can derive from XamlType.</source>
          <target state="translated">XAML 형식 시스템을 확장 하려면 XamlType에서 파생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do so effectively, you might also need to implement a &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">효과적으로 수행 하려면 또한 해야 &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt; 구현</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;호출 동작의 일부로 지정 하는 백업 유형 시스템에서 사용 하 여 일반화 된 XAML 형식 시스템을 사용 하도록 설정 합니다.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specific custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; provides a way to reduce the dependencies on the CLR type system, which are used by the default XamlType behavior.</source>
          <target state="translated">특정 사용자 지정 &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;기본 XamlType 동작에 의해 사용 되는 CLR 형식 시스템에 대 한 종속성을 줄일 수 있는 방법을 제공 합니다.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the underlying CLR type information.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 기본 CLR 형식 정보에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The underlying CLR &lt;xref:System.Type&gt; for the XAML type to construct.</source>
          <target state="translated">기본 CLR &lt;xref:System.Type&gt;를 생성 하려면 XAML 형식에 대 한.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 판독기 또는 XAML 작성기에 대 한 XAML 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on a string name for the type.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 형식에 대 한 문자열 이름을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a protected constructor.</source>
          <target state="translated">protected 생성자입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">현재 공용 파생된 클래스가 생성을 위해이 특정 경로 사용 하는 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a consumer of the existing &lt;xref:System.Xaml.XamlType&gt;, you must use the other constructor signatures (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;, &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;, or &lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) to initialize a &lt;xref:System.Xaml.XamlType&gt; object.</source>
          <target state="translated">기존 소비자로 &lt;xref:System.Xaml.XamlType&gt;, 다른 생성자 시그니처를 사용 해야 합니다 (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;, &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;, 또는 &lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) 초기화 하는 &lt;xref:System.Xaml.XamlType&gt;개체입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the type to create.</source>
          <target state="translated">만들려는 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">에 대 한 형식 인수는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제네릭 형식을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">하며 될 수 있습니다 (자주) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 제네릭 형식 아님을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML 판독기 및 XAML 작성기에 대 한 XAML 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on underlying type information and a <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 형식 정보에 따라 클래스 및 <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">생성 하려면 XAML 형식에 대 한 내부 형식입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML 판독기에 대 한 XAML 스키마 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time reflection calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 런타임 리플렉션을 처리 하는 구현에 대 한 호출에서 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스는 XAML 네임 스페이스 및 유형에 대 한 문자열 이름에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">이 생성자는 단독으로 분석 및 XAML 노드는 지원 형식 시스템 및 XAML 스키마 컨텍스트에는 백업에 알려진 형식 사용 기록 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">내부 형식 시스템에 매핑되는 XAML 형식의 사용할 수 있는 "알 수 없음된" 형식에 대해서만이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor might not produce a result where &lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt; is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">이 생성자의 결과 생성할 수 없습니다 여기서 &lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;는 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the default reflector logic reports the underlying type as &lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">기본 reflector 논리 &lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt; 내부 형식에 보고 하는 대신,</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this behavior can change because of the &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; override.</source>
          <target state="translated">그러나이 동작 때문에 변경할 수는 &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;재정의.&lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">문자열 형식에 대 한 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The name of the type in the provided <ph id="ph1">`unknownTypeNamespace`</ph> XAML namespace.</source>
          <target state="translated">제공 된 형식의 이름을 <ph id="ph1">`unknownTypeNamespace`</ph> XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">에 대 한 형식 인수는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제네릭 형식을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">하며 될 수 있습니다 (자주) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 제네릭 형식 아님을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 판독기 또는 XAML 작성기에 대 한 XAML 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets a read-only collection of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">읽기 전용으로 사용할 수 있는 형식 컬렉션을 가져옵니다는 &lt;xref:System.Xaml.XamlType.ContentProperty*&gt;값이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of AllowedContentTypes.</source>
          <target state="translated">할당 가능한 형식 (예: 콘텐츠 형식으로 허용 되는 기본 형식에 할당할 수)를 특정 콘텐츠 형식 여러 유형의 용도로 AllowedContentTypes 간주 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">이 값의 결정이 내부 형식에 기반 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, BaseType returns an internal constant that represents an &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본적으로 BaseType 반환 나타내는 내부 상수는 &lt;xref:System.Object&gt;경우 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;는 가상 함수 이며 따라서 재정의할 수 있습니다.&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether an instance of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has the specified <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in its list of assignable types.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 인스턴스의 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가 지정 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 할당 가능한 형식 목록에 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">할당 가능한 형식이 참조 형식의 모든 기능을 제공 하지는 않지만 할당을 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">예를 들어 속성의 값에 대 한 형식 일치 하는 할당을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">XAML에서 할당할 수 있는 형식의 개념은 CLR 형식 시스템에서 위로 캐스팅의 개념과 비슷합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, under a CLR type system, every type has an &lt;xref:System.Object&gt; in its assignable type list.</source>
          <target state="translated">예를 들어 CLR 형식 시스템에서 모든 형식에는 &lt;xref:System.Object&gt;할당 가능한 형식 목록에.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If one of the two &lt;xref:System.Xaml.XamlType&gt; instances that are used for comparison has &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; equal to <ph id="ph1">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph2">`true`</ph> if the two &lt;xref:System.Xaml.XamlType&gt; instances are equivalent.</source>
          <target state="translated">경우 둘 중 &lt;xref:System.Xaml.XamlType&gt;사용 되는 인스턴스 비교에 &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;같음 <ph id="ph1">`true`</ph>,이 메서드는 반환 하는 특별 한 알 수 없는 모드 <ph id="ph2">`true`</ph> 경우 두 &lt;xref:System.Xaml.XamlType&gt;인스턴스가 동일 합니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the CLR &lt;xref:System.Type&gt; from &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt; and the input &lt;xref:System.Xaml.XamlType&gt;, and calls &lt;xref:System.Type.IsAssignableFrom%2A&gt;.</source>
          <target state="translated">CLR을 사용 하 여 기본 구현은 &lt;xref:System.Type&gt;에서 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;이 &lt;xref:System.Xaml.XamlType&gt;입력 &lt;xref:System.Xaml.XamlType&gt;, 및 호출 &lt;xref:System.Type.IsAssignableFrom%2A&gt;.&lt;/xref:System.Type.IsAssignableFrom%2A&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">서로 다른 할당 가능한 형식 확인 하려는 경우이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Null을 전달 <ph id="ph1">`xamlType`</ph> 예외를 throw 하지 않으며 항상 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  CanAssignTo is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; CanAssignTo는 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) XAML 형식의 않든 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 캐스팅 동작 하도록 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type to check against the current <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> .</source>
          <target state="translated">형식에 대해 현재 확인할 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType</ph><ept id="p2">&lt;/code&gt;</ept> is in the assignable types list; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType</ph> <ept id="p2">&lt;/code&gt;</ept> 할당 가능한 형식 목록에는 이렇게 하지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인수가 있어야 합니다 (제네릭 제약 조건을 통해 <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 초기화 텍스트 또는 기타 XAML 기술을) 형식의 올바른 인스턴스를 구성 하려면.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>인스턴스를 생성; 일부 인수 값이 필요한 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이의 content 속성에 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; to the type definition.</source>
          <target state="translated">때 바인딩을 사용 하 여 또는 CLR 형식 시스템의 백업, XAML 콘텐츠 속성인 지정할 수 있습니다 형식에 적용 하 여 &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;형식 정의에.&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[content property]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 콘텐츠 속성에 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no content property exists.</source>
          <target state="translated">되었을 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 콘텐츠 속성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">강력한 형식의 문자열 같은 엄격한 형식 일치 항목이 없을 때 콘텐츠 속성에 대 한 콘텐츠를 래핑하는 데 사용 되는 형식을 가져옵니다 <bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 속성은 형식 일치 완화 시키는 래퍼가 없으면 인 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of ContentWrappers.</source>
          <target state="translated">형식으로 평가 하는 &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;를 특정 콘텐츠 형식에 대 한 여러 유형의 용도로 ContentWrappers 고려 되지 않습니다.&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the CLR binding for &lt;xref:System.Xaml&gt; and &lt;xref:System.Xaml.XamlType&gt;, the XAML content wrapper type can be specified on a type as a &lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml&gt; &lt;xref:System.Xaml.XamlType&gt;XAML 콘텐츠 래퍼 형식에 &lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;.&lt;/xref:System.Windows.Markup.ContentWrapperAttribute&gt; 로 형식에 지정할 수 있습니다, 그리고&lt;/xref:System.Xaml.XamlType&gt; 및&lt;/xref:System.Xaml&gt; 에 대 한 CLR 바인딩에</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content wrapper types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가능한 콘텐츠 래퍼; 형식의 읽기 전용 컬렉션 그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">가져옵니다는 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 나타내는 지연 된 로드이 형식에 대 한 변환 동작 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">WPF의 XAML 템플릿 동작은 지연 된 로드 동작의 예시입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 형식에 대 한 지연 된 로드 동작을 나타내는 제약 조건입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>현재 개체가 같은지를 하는 경우는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">obj</ph> <ept id="p2">&lt;/code&gt;</ept> 매개 변수, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>현재 개체가 같은지를 하는 경우는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">other</ph> <ept id="p2">&lt;/code&gt;</ept> 매개 변수, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 XAML 지시문에 별칭을 있는 XAML 멤버를 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 메서드를 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">찾을 별칭이 지정 된 멤버에 대 한 지시문입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">별칭이 지정 된 멤버 경우 반환 합니다. 그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 노출 되는 모든 연결 가능한 속성이 포함 된 컬렉션을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each &lt;xref:System.Xaml.XamlMember&gt; in the returned collection should contain values that support the concept that the &lt;xref:System.Xaml.XamlMember&gt; is an attachable member.</source>
          <target state="translated">각 &lt;xref:System.Xaml.XamlMember&gt;반환된 된 컬렉션의 개념을 지 원하는 값을 포함 해야 하는 &lt;xref:System.Xaml.XamlMember&gt;멤버에 연결할 수 있습니다.&lt;/xref:System.Xaml.XamlMember&gt; &lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, members should return <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;, a type for &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;, and so on.</source>
          <target state="translated">예를 들어 멤버를 반환할지 <ph id="ph1">`true`</ph> 에 대 한 &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;에 대 한 유형을 &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;등.&lt;/xref:System.Xaml.XamlMember.TargetType%2A&gt; &lt;/xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 메서드를 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 또는 그 이상 포함 하는 컬렉션 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 노출 되는 모든 멤버가 포함 된 컬렉션을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 또는 그 이상 포함 하는 컬렉션 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing a specific named attachable member of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 연결 가능한 소속 라는 특정 나타내는 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;는 가상 함수 이며 따라서 재정의할 수 있습니다.&lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> 기본 CLR 형식에 대 한 정보.&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">가져올에 연결할 수 있는 멤버의 이름 <ph id="ph1">`ownerTypeName.MemberName`</ph> 폼입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요청 된 연결 가능한 멤버;에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>해당 이름으로 연결할 수 있는 멤버가 있는 경우.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
          <target state="translated">이 개체에 대 한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
          <target state="translated">정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 멤버에서 명명 된 특정 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">에 대 한 값 <ph id="ph1">`name`</ph> 정규화 되지 않은 것으로 예상 됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type-qualified names that indicate an attached member should be submitted to &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt; instead.</source>
          <target state="translated">연결 된 멤버를 나타내는 정규화 된 형식 이름에 제출 해야 &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;대신.&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">접두사가 붙은 이름을 사용할 수 없습니다; 멤버 접두사는 상황에서 사용량에 따라 및 XAML 형식 시스템은 이러한 사용의 컨텍스트 및 접두사 매핑되는 방법을 알 수 없습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;는 가상 함수 이며 따라서 재정의할 수 있습니다.&lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> 기본 CLR 형식에 대 한 정보.&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">(String)로 가져올 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if such a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이러한 구성원이 없으면 되었으면 멤버에 대 한 정보 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">태그 확장 형식에이 대 한 특정 태그 확장 사용에서 지원 되는 위치 매개 변수의 형식을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">이 API는 경우이 해당만 &lt;xref:System.Xaml.XamlType&gt;태그 확장을 나타내는 (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; 은 <ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">입력 <ph id="ph1">`parameterCount`</ph> 요청 특정 위치 매개 변수 형식에 대 한 않습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">태그 확장 사용의 인자 수 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">태그 확장 사용은 종종 여러 "서명" 하 고 구분 하기 위해 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">특정 인자 (개수)에 대 한 매개 변수 위치와 형식 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the positional type of a specific arity's markup extension usage, you first call GetPositionalParameters specifying the arity count.</source>
          <target state="translated">위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 GetPositionalParameters 인자 개수로 호출 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">에 대 한 정보를 원하는 특정 구문 또는 생성자 모드의 수 (숫자)입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, where each <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">목록이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값, 여기서 각 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구문에서 해당 위치에 대 한 형식입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">태그 확장에 대 한 태그 입력을 제공할 경우 동일한 순서로 종류를 지정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">형식에 포함 된 XAML 네임 스페이스에 대 한 문자열 식별자의 목록을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">일반적인 XAML 네임 스페이스 식별자는 URI 형식의 문자열입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">기본 구현에서는 다음을 순서 대로 검사: 구문에서 제공 되는 XAML 네임 스페이스 (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; 서명만 수행); 및 스키마 컨텍스트를 사용할 수 있는 네임 스페이스.&lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">각각 <ph id="ph1">`null`</ph>, 단일 빈 문자열을 포함 하는 새 목록이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">조회 방법을 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">각 문자열은 XAML 네임 스페이스에 대 한 URI 식별자의 문자열 값의 목록.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 과 관련 구현 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calling Invoker can invoke either &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; or a specific override of that method.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;, 호출자를 호출 하거나 호출할 수 &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;또는 해당 메서드의 특정 재정의.&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; override returns <ph id="ph1">`null`</ph>, or if the default implementation returns <ph id="ph2">`null`</ph> because of lack of &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt;, then Invoker returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">경우는 &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;반환 재정의 <ph id="ph1">`null`</ph>, 기본 구현은 반환 하는 경우 또는 <ph id="ph2">`null`</ph> &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;이 &lt;xref:System.Xaml.XamlType&gt;호출자 &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; 를 반환 하는 다음&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; 의 부족으로 인해&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 과 관련 구현 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 하는 앰비언트 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 앰비언트 유형을 나타내며, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an array.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 배열을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an array; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 배열을 나타냅니다, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a collection.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 컬렉션을 나타냅니다; 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 하는 생성 가능 유형을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is default constructible]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 생성 가능 형식을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 사전을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is dictionary]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 사전을 나타냅니다, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic type.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제네릭 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is a helper property that checks for a null value of &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.</source>
          <target state="translated">이 속성은 &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;안내 하십시오.&lt;/xref:System.Xaml.XamlType.TypeArguments%2A&gt; null 값을 확인 하는 도우미 속성</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to IsGeneric.</source>
          <target state="translated">관련 없는 <ph id="ph1">`Lookup`</ph> IsGeneric 관련 된 메서드.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a generic type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 제네릭 형식을 나타내면, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 태그 확장을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for IsMarkupExtension.</source>
          <target state="translated">XAML 사양 측면에서이 형식에 할당할 수 있어야 <ph id="ph1">`x:MarkupExtension`</ph> 반환 하기 위해 <ph id="ph2">`true`</ph> IsMarkupExtension에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 태그 확장을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 XAML 이름 범위를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 <ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>If IsNameScope is <ph id="ph1">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">IsNameScope 이면 <ph id="ph1">`true`</ph>, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">그런 다음 XAML 이름 범위 다른 XAML 이름 범위 소유 하는 형식이 발견 될 때까지 형식 내용으로 확장 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is name scope]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 이름 범위를 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> string as its &lt;xref:System.Xaml.XamlType.Name*&gt;.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 유효한를 사용 하 여 초기화 <bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 해당 &lt;xref:System.Xaml.XamlType.Name*&gt;.&lt;/xref:System.Xaml.XamlType.Name*&gt; 문자열</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> string; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 유효한를 사용 하 여 초기화 <bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 문자열; 그렇지 않으면 <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 null 허용 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is nullable]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are not using the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsNullable%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> nullable 형식을 나타내는지, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관련 형식 시스템에서 공용 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;는 가상 함수 이며 따라서 재정의할 수 있습니다.&lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 및 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> public 형식을 나타내는지, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 형식 시스템에서 확인할 수 없는 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt;derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, a &lt;xref:System.Xaml.XamlType&gt; that has <ph id="ph1">`true`</ph> for IsUnknown cannot be written into an object graph.</source>
          <target state="translated">과 관련 된 로드 경로 대 한 &lt;xref:System.Xaml.XamlObjectWriter&gt;, &lt;xref:System.Xaml.XamlType&gt;올려진 <ph id="ph1">`true`</ph> 에 IsUnknown 개체 그래프에 쓸 수 없습니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under the default implementations in &lt;xref:System.Xaml&gt; , the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant &lt;xref:System.Xaml.XamlType&gt; reports <ph id="ph1">`true`</ph> for IsUnknown.</source>
          <target state="translated">기본 구현에서 &lt;xref:System.Xaml&gt;, &lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt;throw 호출는 &lt;xref:System.Xaml.XamlObjectWriterException&gt;때 관련 &lt;xref:System.Xaml.XamlType&gt;보고서 <ph id="ph1">`true`</ph> IsUnknown에 대 한.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlObjectWriterException&gt; &lt;/xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass a &lt;xref:System.Xaml.XamlType&gt; that has IsUnknown as <ph id="ph1">`true`</ph> unless you are prepared to handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">전달 해서는 안는 &lt;xref:System.Xaml.XamlType&gt;IsUnknown으로 올려진 <ph id="ph1">`true`</ph> 에서 예외를 처리할 준비가 있지 않은 경우 &lt;xref:System.Xaml.XamlObjectWriter&gt;, 또는 다른 방법으로 조정할 수 있는 &lt;xref:System.Xaml.XamlObjectWriter&gt;동작 또는 개체 그래프를 쓰기 전에 XAML 노드 스트림을.&lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an unresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 확인할 수 없는 유형을 나타내며, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 상-XAML 초기화 하는 동안 만들어집니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">위에서 아래로 작성할 때 형식이 인스턴스화되고 부모에 연결 된 다음 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 고, 그렇지 않으면 XAML 초기화 하는 동안 하향식 빌드될 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 정의 기준으로 공백 의미 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a whitespace significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 는 공백 의미 컬렉션을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 나타냅니다 <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, XAML 정의 기준으로 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is xdata]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 형식 정보를 제공 하는 값을 가져옵니다는 <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a collection (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">이 속성은이 경우 관련만 &lt;xref:System.Xaml.XamlType&gt;컬렉션을 나타냅니다 (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt; 은 <ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph> 속성은 해당 유형의 컬렉션 또는 배열 항목을 보유 한 모든 속성.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션에 항목의 형식에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>,이 경우 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 컬렉션을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">이 키 속성에 대 한 형식 정보를 제공 하는 값을 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>경우는 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 사전을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a dictionary (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">이 속성은이 경우 관련만 &lt;xref:System.Xaml.XamlType&gt;사전을 나타냅니다 (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt; 은 <ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsDictionary%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 그렇지 사전 사용에 대 한 키의 형식에 대 한 개체 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>,이 경우 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 사전을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 XAML 지시문에 별칭을 있는 XAML 멤버를 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">기본 구현은 다음 XAML 지시문에 대 한 결과 반환할 수 있습니다: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">값은 기본 리플렉션 달라 지 며 여전히를 반환할 수 있습니다 이러한 <ph id="ph1">`null`</ph> 별칭이 지정 된 속성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">XAML 형식 시스템의 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">찾을 별칭이 지정 된 멤버에 대 한 지시문입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">별칭이 지정 된 멤버 경우 반환 합니다. 그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 노출 되는 모든 연결 가능한 속성을 포함 하는 열거 가능한 집합을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">하지만 &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;제네릭 컬렉션을 반환이 <ph id="ph1">`Lookup`</ph> 메서드 제네릭 열거 가능한 집합을 반환 합니다.&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">때 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>, 기본 구현은 צ ְ ײ &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;사용할 수 있으면.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior calls LookupAllAttachableMembers recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">올바른 기본 형식을 찾으려고 시도에 LookupAllAttachableMembers 재귀적으로 호출 하 고 반환 하는이 동작 <ph id="ph1">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">빈 형식이 유효한 및 리플렉션 또는 기타 기술을 사용할 수 있는 이지만 형식에 연결할 수 있는 멤버가 없을 경우 대신 반환 해야 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;설정.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">0 또는 그 이상 포함 하는 열거 가능한 집합 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 노출 되는 모든 멤버가 포함 된 열거 가능한 집합을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">하지만 &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;제네릭 컬렉션을 반환이 <ph id="ph1">`Lookup`</ph> 메서드 제네릭 열거 가능한 집합을 반환 합니다.&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">사례에 대 한 위치 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>, 기본 구현은 צ ְ ײ &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;사용할 수 있으면.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior calls LookupAllMembers recursively to attempt to find a valid base type, and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">올바른 기본 형식을 찾으려고 시도에 LookupAllMembers 재귀적으로 호출 하 고 반환 하는이 동작 <ph id="ph1">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">리플렉션 또는 기타 기술을 형식이 유효한 경우을 사용할 수 있습니다. 형식에 멤버가 없을 경우 대신 빈을 반환 해야 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;설정.&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return values for LookupAllMembers and &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; should be mutually exclusive.</source>
          <target state="translated">LookupAllMembers에 대 한 값을 반환 하 고 &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;상호 배타적인 이어야 합니다.&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different &lt;xref:System.Xaml.XamlMember&gt; values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">지원 형식 시스템 속성이 연결 가능한 사용 뿐만 아니라 표준 인스턴스 사용을 지원할 수 있는 상황을 설정한 경우 해당 멤버 서로 다른 두 성공으로 보고 됩니다 &lt;xref:System.Xaml.XamlMember&gt;연결할 수 있는 목록 및 다른 표준 멤버 목록에서에 표시 되는 하나의 값과 값.&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 또는 그 이상 포함 하는 열거 가능한 집합 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns a list of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 형식으로 사용할 수 있는 목록이 &lt;xref:System.Xaml.XamlType.ContentProperty*&gt;값이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;특정 콘텐츠 형식에 대 한는 아닙니다 &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt; 의 목적을 위해 여러 형식으로&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt; 평가 하는 형식</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can use other properties of &lt;xref:System.Xaml.XamlType&gt; (&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;, &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;, or &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) to obtain a result.</source>
          <target state="translated">기본 구현은의 다른 속성을 사용할 수 &lt;xref:System.Xaml.XamlType&gt;(&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;, &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;, 또는 &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) 결과를 얻기.&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt; &lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt; &lt;/xref:System.Xaml.XamlType.ContentWrappers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph> 이전 속성 목록이이 결정에서 호출 될 수도 있습니다을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A list of possible content types.</source>
          <target state="translated">목록 가능한 콘텐츠 형식입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named attachable from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 특정이를 통해 연결할 수 있는 명명 된 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">때 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>, 기본 구현은 צ ְ ײ &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;사용할 수 있으면.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior calls LookupAttachableMember recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">올바른 기본 형식을 찾으려고 시도에 LookupAttachableMember 재귀적으로 호출 하 고 반환 하는이 동작 <ph id="ph1">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupAttachableMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupAttachableMember는 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> 기본 CLR 형식에 대 한 정보.&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">가져올에 연결할 수 있는 멤버의 이름 <ph id="ph1">`ownerTypeName.MemberName`</ph> 폼입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요청 된 연결 가능한 멤버;에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>해당 이름으로 연결할 수 있는 멤버가 있는 경우.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">이 값의 결정이 내부 형식에 기반 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation might return an internal constant that represents the &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현은 나타내는 내부 상수를 반환할 수 있습니다는 &lt;xref:System.Object&gt;경우 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupBaseType is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupBaseType는 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 직접적인이 XAML 형식의 기본 형식에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Returns a value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that declares which specific collection type this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> uses.</source>
          <target state="translated">값을 반환 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 는 특정 컬렉션을 선언 하는 열거형에 다음과 같이 입력 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on &lt;xref:System.Xaml.XamlType&gt;).</source>
          <target state="translated">이 메서드는 내부 전용 메서드를 호출한 (public <ph id="ph1">`CollectionKind`</ph> 또는 <ph id="ph2">`GetCollectionKind`</ph> api &lt;xref:System.Xaml.XamlType&gt;).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">사례에 대 한 위치 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;은 <ph id="ph1">`null`</ph>, 기본 구현은 צ ְ ײ &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;사용할 수 있으면.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior indirectly calls LookupCollectionKind recursively to attempt to find a valid base type; it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; if no valid base type exists.</source>
          <target state="translated">이 동작을 올바른 기본 유형이; 찾습니다 LookupCollectionKind 재귀적으로 직접 호출 반환 &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;올바른 기본 형식이 있는 경우.&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">기본 구현은 찾으려고 시도 하는 일반적으로 <ph id="ph1">`Add`</ph> 리플렉션에 의해 기본 형식의 메서드.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>If found, the &lt;xref:System.Reflection.MethodInfo&gt; of the <ph id="ph1">`Add`</ph> method is enough information to determine which &lt;xref:System.Xaml.Schema.XamlCollectionKind&gt; value should be returned.</source>
          <target state="translated">경우 발견 된 &lt;xref:System.Reflection.MethodInfo&gt;의 <ph id="ph1">`Add`</ph> 메서드 충분 한 정보를 확인 하는 &lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;값이 반환 됩니다.&lt;/xref:System.Xaml.Schema.XamlCollectionKind&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;.</source>
          <target state="translated">그러지 않으면 &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; 반환</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
          <target state="translated">값은 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 열거 합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인수가 있어야 합니다 (제네릭 제약 조건을 통해 <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 초기화 텍스트 또는 기타 XAML 기술을) 형식의 올바른 인스턴스를 구성 하려면.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`false`</ph> CLR에서 값 형식으로 간주 되는 형식에 대 한 형식 시스템.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>For other than value types, CLR reflection &lt;xref:System.Reflection.ConstructorInfo&gt; is used to determine whether a default constructor exists.</source>
          <target state="translated">값 형식, CLR 리플렉션이 아닌 &lt;xref:System.Reflection.ConstructorInfo&gt;기본 생성자가 있는지 여부를 확인 하는 데 사용 됩니다.&lt;/xref:System.Reflection.ConstructorInfo&gt;</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>인스턴스를 생성; 일부 인수 값이 필요한 경우 그렇지 않으면 false입니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이의 content 속성에 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;.&lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation checks for &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; on the type definition.</source>
          <target state="translated">기본 구현에 대 한 확인 &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;형식 정의에.&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현에서 반환 하는 경우 이러한 검사에는 콘텐츠 형식을 검색 하지 않으면, <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 콘텐츠 속성에 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Gets a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">목록을 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 대 한 콘텐츠 래퍼를 표시 하는 값 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">콘텐츠 래퍼는 해당 컬렉션에 사용 되는 형식이 형식 시스템에 연속 되지 않을 때 컬렉션 콘텐츠 형식을 나타내는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond &lt;xref:System.Object&gt; or a neutral object equivalent.</source>
          <target state="translated">콘텐츠 래퍼에 대 한 컬렉션 항목의 형식은 이외의 다른 방법으로 제한 될 것으로 예상 되 &lt;xref:System.Object&gt;또는 이와 동등한 중립 개체.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">그러나이 제한 사항은 형식 시스템 아니라에 의해 디자인 또는 해당 형식을 사용 하는 속성의 목적에만 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">둘 이상의 콘텐츠 래퍼 형식에 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example class and scenario from the WPF XAML implementation, see &lt;xref:System.Windows.Documents.InlineCollection&gt;.</source>
          <target state="translated">예제 클래스 및 WPF XAML 구현과에서 시나리오에 대 한 참조 &lt;xref:System.Windows.Documents.InlineCollection&gt;.&lt;/xref:System.Windows.Documents.InlineCollection&gt;</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">목록이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 대 한 콘텐츠 래퍼를 표시 하는 값 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">파생된 클래스에서 구현 하는 경우 반환 된 <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">재정의가 없는 경우, 내부 반영자는 일반적인 CLR 리플렉션 논리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated">반환 된 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> XAML 선언 된 개체의 지연 된 로드에 사용 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;.</source>
          <target state="translated">호출자가 &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;.&lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt; 값을 가져올 때이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt; to return a different value than is enabled by default internal reflection and are also providing custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; information.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;반환 다른 값은 기본적으로 활성화 내부 리플렉션 및 제공 하는 사용자 지정 &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;정보.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt; &lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns an object on the basis of reading &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlDeferLoadAttribute&gt; 읽는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also  check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 메서드는 반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 올려진는 <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제네릭에 대 한 제약 조건입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이와 연결 된 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.Invoker%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;.&lt;/xref:System.Xaml.XamlType.Invoker%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation does not require that a &lt;xref:System.Xaml.XamlType&gt; be constructed by using one of the constructors that pass an initial &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">기본 구현은 것을 요구 하지 않는 &lt;xref:System.Xaml.XamlType&gt;초기 &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt; 를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, an &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; value must exist for the &lt;xref:System.Xaml.XamlType&gt;; otherwise, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">그러나는 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;값에 대 한 있어야는 &lt;xref:System.Xaml.XamlType&gt;, 그렇지 않으면 기본 구현에서는 반환 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you also create a derived class from &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; and intend to return the derived class.</source>
          <target state="translated">파생된 클래스에서 &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;파생 된 클래스를 반환 하 고&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt; 도 만들려는 경우이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you return <ph id="ph1">`null`</ph>, &lt;xref:System.Xaml.XamlType.Invoker%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; to callers.</source>
          <target state="translated">반환 하는 경우 <ph id="ph1">`null`</ph>, &lt;xref:System.Xaml.XamlType.Invoker%2A&gt;반환 &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;호출자에 게.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.Invoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 하는 앰비언트 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; and can check the base types.</source>
          <target state="translated">에 CLR 리플렉션을 사용 하는 기본 구현에서 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;기본 형식을 확인할 수 있습니다.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation checks for the &lt;xref:System.Windows.Markup.AmbientAttribute&gt; that is applied to the relevant type's definition at the class level and returns <ph id="ph1">`true`</ph> in this case.</source>
          <target state="translated">이 구현에 대 한 검사는 &lt;xref:System.Windows.Markup.AmbientAttribute&gt;를 반환 하는 클래스 수준에는 관련 형식의 정의에 적용 되는 <ph id="ph1">`true`</ph> 이 예제의.&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">다른 모든 경우에 반환할 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt;</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 앰비언트 유형을 나타내며, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 하는 생성 가능 유형을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">기본 구현에 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;했습니다.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; CLR 리플렉션을 사용합니다</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">형식은 구체적인, 비중첩 및 닫힌 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation checks whether the type is a value type and the return of &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">기본 구현에서는 값 형식 및 &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt; 의 반환 형식이 인지 확인</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, this method returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null에 대 한 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;,이 메서드가 반환 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt;</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 생성 가능 형식을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 태그 확장을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation consists only of this call:       <ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph>       Override this method if you want &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; to use different logic.</source>
          <target state="translated">기본 구현은이 호출은 구성 되어: <ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph> 하려는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">XAML 사양 측면에서이 형식에 할당할 수 있어야 <ph id="ph1">`x:MarkupExtension`</ph> 반환 하기 위해 <ph id="ph2">`true`</ph> &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 태그 확장을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 XAML 이름 범위를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">기본 구현에서는 &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; &lt;xref:System.Windows.Markup.INameScope&gt;.&lt;/xref:System.Windows.Markup.INameScope&gt; 유형에 대해 간접적으로 호출 합니다.&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Markup.INameScope&gt; is an interface that is defined in the assembly WindowsBase.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.INameScope&gt;WindowsBase 어셈블리에 정의 된 인터페이스가입니다.&lt;/xref:System.Windows.Markup.INameScope&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique for XAML namescope identification is used both by WPF and <ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph> implementations of XAML.</source>
          <target state="translated">XAML 이름 범위 id에 대 한이 방법을 사용 되는 WPF에서 모두 및 <ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph> XAML의 구현입니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 <ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; is <ph id="ph1">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">경우 &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;은 <ph id="ph1">`true`</ph>, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다.&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">그런 다음 XAML 이름 범위 XAML 이름 범위 소유 다른 형식이 발견 될 때까지 형식 내용으로 확장 합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 이름 범위를 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 정의 기준으로 null 허용 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">기본 구현에서는 개념에 따라 CLR 핵심 라이브러리 nullable, &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; 여부를 검사 하는 결정</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null에 대 한 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, 반환 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> nullable 형식을 나타내는지, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관련 형식 시스템에서 공용 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses CLR reflection against a non-null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">기본 구현은 null이 아닌 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; 에 대해 CLR 리플렉션을 사용 하 여</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null에 대 한 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, 반환 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupIsPublic is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupIsPublic는 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 또는 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> public 형식을 나타내는지, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 형식 시스템에서 확인할 수 없는 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">기본 구현은 CLR 리플렉션을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null에 대 한 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, 반환 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nonresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> nonresolvable 형식을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 정의 기준으로 공백 의미 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;.&lt;/xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check the &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">또한 확인할 수는 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a white-space significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 는 공백 의미 컬렉션을 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 나타냅니다 <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, XAML 정의 기준으로 합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsXData%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">기본 구현에서는 &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt; 유형에 대해 간접적으로 호출 합니다.&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsXData%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsXData%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 형식 정보를 제공 하는 값을 반환 합니다.는 <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; checking &lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">기본 구현에 대 한 확인 하는 등의 CLR 리플렉션 개념을 사용할 수는 <ph id="ph1">`Add`</ph> 메서드를 &lt;xref:System.Reflection.MethodInfo&gt;를 사용 하 고는 &lt;xref:System.Reflection.ParameterInfo&gt;검사; &lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; 및 검사 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;하 고 그 동일한 논리를 시도 합니다.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.IsArray%2A&gt; &lt;/xref:System.Reflection.ParameterInfo&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ItemType%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">인 사례 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;반환 &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;반환할지 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션에 항목의 형식에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 이 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 컬렉션을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">이 키 속성에 대 한 형식 정보를 제공 하는 값을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>경우는 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 사전을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.KeyType%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;.&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">기본 구현은 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 <ph id="ph1">`Add`</ph> 메서드를 &lt;xref:System.Reflection.MethodInfo&gt;를 사용 하 고는 &lt;xref:System.Reflection.ParameterInfo&gt;; 및 검사 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;하 고 그 동일한 논리를 시도 합니다.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Reflection.ParameterInfo&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.KeyType%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.KeyType%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; does not return &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">인 사례 &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;반환 하지 않는 &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;반환할지 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary,</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사전 사용에 대 한 키의 형식에 대 한 개체 또는 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 이 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 사전을 나타내지 않습니다</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">반환 된 작업에 대 한 형식 정보를 제공 하는 값을 반환 <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>태그 확장을 나타내는 경우, 합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;.&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; on the basis of reading &lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;.</source>
          <target state="translated">기본 구현에서는 한 &lt;xref:System.Xaml.XamlType&gt; &lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;.&lt;/xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt; 읽기를 기반으로&lt;/xref:System.Xaml.XamlType&gt; 반환</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ; 태그 확장 사용에 대 한 반환 형식에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>,이 경우 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 태그 확장을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 멤버에서 명명 된 특정 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetMember%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">기본 구현은 반환 하는 &lt;xref:System.Xaml.XamlType&gt;내부 CLR 리플렉션 및 스키마 컨텍스트는 평가에 따라.&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetMember%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.GetMember%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupMember는 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> 기본 CLR 형식에 대 한 정보.&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">(String)로 가져올 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to return a member even if that member has a <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value for <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to not return a <ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph> member.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>해당 멤버의 경우에 멤버를 반환 하는 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 값 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 반환 되지 않도록 한 <ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구성원이 검색 되지 않으면 멤버에 대 한 정보 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">태그 확장 형식에이 대 한 특정 태그 확장 사용에서 지원 되는 위치 매개 변수의 형식을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">기본 구현에서는 생성자를 찾아서 인자 수를 확인 하는 중에 따라 내부 리플렉션 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">이 API는 경우이 해당만 &lt;xref:System.Xaml.XamlType&gt;태그 확장을 나타내는 (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; 은 <ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">입력 <ph id="ph1">`parameterCount`</ph> 요청 특정 위치 매개 변수 형식에 대 한 않습니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">태그 확장 사용의 인자 수 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">태그 확장 사용에 여러 개의 시그니처가 간격과 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 하 여 구분 합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">특정 인자 개수에 대 한 매개 변수 위치와 형식 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the positional type of a specific arity's markup extension usage, you first call &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; with the arity count.</source>
          <target state="translated">위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;인자 수가.&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">에 대 한 정보를 원하는 특정 구문 또는 생성자 모드의 수 (숫자)입니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values where each such <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">목록이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 값 이러한 각 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구문에서 해당 위치에 대 한 형식입니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">태그 확장에 대 한 태그 입력을 제공할 때 동일한 순서로 해당 종류를 지정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">태그 확장의 집합 작업에 사용할 수 있는 처리기 콜백을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">태그 확장의 집합 작업에 사용 하는 처리기 콜백.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">사용할 형식 변환기의 경우 설정에 대 한 처리기를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">형식 변환기의 경우 설정에 사용 하는 처리기.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 주변 공백을 삭제 하는 모드를 사용 하 여 serialize 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;.&lt;/xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;.&lt;/xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should be serialized in a mode that trims surrounding whitespace; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 주변 공백을 삭제 하는 모드에서 serialize 된 건너뛸 필요가 없으면, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint, which represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 있는 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제약 조건 값이에 대 한 형식 변환 동작을 나타내는 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;.&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.ComponentModel.TypeConverterAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.ComponentModel.TypeConverterAttribute&gt;.&lt;/xref:System.ComponentModel.TypeConverterAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">기본 구현은 확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">열거형, 공용 값 형식 및 제네릭 기본 변환 위한 특수 논리가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt;</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 값에 대 한 형식 변환 동작을 나타내는 제약 조건 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Returns the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR 반환 &lt;xref:System.Type&gt;이 기반이 되 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">기본 구현은 내부 필드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">해당 필드는 일반적으로 생성 하는 동안 초기화 하 고 해당 값은 어떤 생성자를 호출 하 고 사용자가 제공한 정보에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR &lt;xref:System.Type&gt;이 기반이 되 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">나타내는 값을 반환 하는지 여부를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 상-XAML 초기화 하는 동안 만들어집니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">위에서 아래로 작성할 때 형식, 부모에 연결 된 인스턴스화되고 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;.&lt;/xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 고, 그렇지 않으면 XAML 초기화 하는 동안 하향식 빌드될 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint, which represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 있는 &lt;xref:System.Windows.Markup.ValueSerializer&gt;제약 조건 값이에 대 한 serialization 동작 값을 나타내는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;.&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.</source>
          <target state="translated">기본 구현은 &lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.&lt;/xref:System.Windows.Markup.ValueSerializerAttribute&gt; 읽기에 따라 값을 반환</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;내부 형식에 특성이 있으면 특성에 대 한.&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">열거형, 공통 값 형식 또는 제네릭의 기본 직렬화를 위한 특수 논리가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt; to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;다른 논리를 사용 하도록 합니다.&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 &lt;xref:System.Windows.Markup.ValueSerializer&gt;이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">반환 된 작업에 대 한 형식 정보를 제공 하는 값을 가져옵니다 <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>태그 확장을 나타내는 경우, 합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (<ph id="ph1">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">이 속성은이 경우 관련만 &lt;xref:System.Xaml.XamlType&gt;태그 확장을 나타내는 (<ph id="ph1">`x:MarkupExtension`</ph> 할당 가능한 형식 목록에).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ; 태그 확장 사용에 대 한 반환 형식에 대 한 개체, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>,이 경우 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 태그 확장을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Gets the string name of the type that this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents.</source>
          <target state="translated">형식의 문자열 이름을 가져옵니다이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 나타냅니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property typically gets the schema-constructed name (per the &lt;xref:System.Xaml.XamlType.%23ctor%2A&gt; signature), or the name of the &lt;xref:System.Type&gt;, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">이 속성은 일반적으로 스키마 생성 이름을 가져옵니다 (당는 &lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;서명), 또는 이름으로는 &lt;xref:System.Type&gt;CLR 형식 시스템의 적절 한 생성자를 사용 하 여 생성 된 경우,.&lt;/xref:System.Type&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The string name of this XAML type.</source>
          <target state="translated">이 XAML 형식의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have the same value.</source>
          <target state="translated">지정 된 두 확인 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 동일한 값을 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is the same as the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>하는 경우의 값 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept> 의 값과 같습니다 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>, 그렇지 않으면 <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have different values.</source>
          <target state="translated">지정 된 두 확인 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 다른 값을 가질 개체입니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is different from the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>하는 경우의 값 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept> 의 값과에서 다른 지 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>, 그렇지 않으면 <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">단일 XAML 네임 스페이스는이 대 한 기본 XAML 네임 스페이스를 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation provides the same value as calling &lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt; and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">이 구현을 호출할 때와 동일한 값을 제공 &lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;한 다음 반환 된 열거 가능한 집합에서 첫 번째 값 문자열을 가져와.&lt;/xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">이 XAML 형식에 대 한 기본 XAML 네임 스페이스를 문자열로 식별자입니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Gets the active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">활성 가져옵니다 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 처리를 위한 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlSchemaContext&gt; is a required parameter entry when constructing a &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlSchemaContext&gt;필수 매개 변수 항목은 &lt;xref:System.Xaml.XamlType&gt;.&lt;/xref:System.Xaml.XamlType&gt; 를 만들 때&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">활성 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 처리를 위한 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 문자열 표현을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.XamlType&gt; implementation of &lt;xref:System.Object.ToString%2A&gt; returns the &lt;xref:System.Xaml.XamlType.Name%2A&gt; property of the &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt; &lt;xref:System.Object.ToString%2A&gt; &lt;xref:System.Xaml.XamlType.Name%2A&gt; &lt;xref:System.Xaml.XamlType&gt;.&lt;/xref:System.Xaml.XamlType&gt; 의 속성&lt;/xref:System.Xaml.XamlType.Name%2A&gt; 을 반환&lt;/xref:System.Object.ToString%2A&gt; 하는의 구현&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>A string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 항목의 문자열 표현을 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 공백 콘텐츠에서 주변 공백을 삭제 합니다. serialization에 대 한 동작을 처리 했습니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a type that uses whitespace trimming; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 공백을 사용 하는 형식을 나타내는 고, 그렇지 않으면 트림 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Gets a list of type arguments for cases where this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic.</source>
          <target state="translated">사례에 대 한 형식 인수 목록을 가져옵니다 여기서이 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제네릭을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are certain scenarios for a &lt;xref:System.Xaml.XamlType&gt; where calling the TypeArguments parameter returns a list where the types are still open.</source>
          <target state="translated">에 대 한 특정 시나리오는 &lt;xref:System.Xaml.XamlType&gt;여기서 호출 TypeArguments 매개 변수 목록을 반환 유형은 아직 열려 있습니다.&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, one or more of the returned &lt;xref:System.Xaml.XamlType&gt; values will have placeholder values for &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;, such as <ph id="ph1">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">반환 된이 경우, 하나 이상의 &lt;xref:System.Xaml.XamlType&gt;값에 대 한 자리 표시자 값을 갖게 됩니다 &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;와 같은 <ph id="ph1">`T`</ph>제네릭이 계속 열려 있다고 나타내기 위해.&lt;/xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>This scenario can occur if you get a &lt;xref:System.Xaml.XamlType&gt; from a call to &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;, instead of from a XAML reader implementation.</source>
          <target state="translated">이 시나리오는 발생 하는 경우에 발생할 수 있습니다는 &lt;xref:System.Xaml.XamlType&gt;호출에서 &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;, 대신 XAML 판독기 구현과에서.&lt;/xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>A list of type argument types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> does not represent a generic.</source>
          <target state="translated">형식 인수; 형식의 목록 그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>,이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 제네릭을 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져옵니다는 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식을 나타내는 변환 동작의 값에는 제약 조건 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식을 나타내는 변환 동작의 값에는 제약 조건 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Gets the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR 가져옵니다 &lt;xref:System.Type&gt;이 기반이 되 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR &lt;xref:System.Type&gt;이 기반이 되 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져옵니다는 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 &lt;xref:System.Windows.Markup.ValueSerializer&gt;이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 &lt;xref:System.Xaml.XamlType&gt;,이 속성에 대 한 호출을 호출할 수 &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;에 재정의 &lt;xref:System.Xaml.XamlType&gt;파생 클래스입니다.&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;이 형식에 대해.&lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 와 &lt;xref:System.Windows.Markup.ValueSerializer&gt;이 값에 대 한 serialization 동작 값을 나타내는 제약 조건 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>