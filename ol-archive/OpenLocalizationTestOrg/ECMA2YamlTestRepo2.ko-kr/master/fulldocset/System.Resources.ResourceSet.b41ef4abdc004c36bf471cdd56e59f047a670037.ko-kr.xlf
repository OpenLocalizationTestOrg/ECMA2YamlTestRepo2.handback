<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee7b82ab6d06ea7f3254b69165291fd808bada41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Resources.ResourceSet.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfec2e20821a3fe3cefcc5a5ea2ec6863636bb75</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d8cd80e2a14aa448b20d7775167c3e0131a75dd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</source>
          <target state="translated">대체 규칙과 함께 다른 모든 문화권을 무시 하 고 하나의 특정 문화권에 대 한 지역화 된 모든 리소스를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>보안 정보<ept id="p1">**</ept>: 신뢰할 수 없는 데이터를 사용 하 여이 클래스의 메서드를 호출 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만 클래스에서 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>신뢰할 수 없는 데이터 보안 위험<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ResourceSet class enumerates over an &lt;xref:System.Resources.IResourceReader&gt;, loading every name and value, and storing them in a &lt;xref:System.Collections.Hashtable&gt;.</source>
          <target state="translated">&lt;xref:System.Resources.IResourceReader&gt;모든 이름 및 값을 로드 하 고에 &lt;xref:System.Collections.Hashtable&gt;.&lt;/xref:System.Collections.Hashtable&gt; 에 저장 하 여&lt;/xref:System.Resources.IResourceReader&gt; ResourceSet 클래스 열거</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom &lt;xref:System.Resources.IResourceReader&gt; can be used.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Resources.IResourceReader&gt;사용할 수 있습니다.&lt;/xref:System.Resources.IResourceReader&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate a ResourceSet object that represents the resources of a specific culture by calling the &lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">호출 하 여 특정 문화권의 리소스를 나타내는 ResourceSet 개체를 인스턴스화할 수 있습니다는 &lt;xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName&gt;메서드.&lt;/xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;이 형식이 구현 하는 &lt;xref:System.IDisposable&gt;인터페이스.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 삭제 하려면 해당 &lt;xref:System.IDisposable.Dispose%2A&gt;에서 메서드는 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> 블록.&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 &lt;xref:System.IDisposable&gt;인터페이스 항목.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with default properties.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 기본 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the system default <bpt id="p2">&lt;xref href="System.Resources.ResourceReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that reads resources from the given stream.</source>
          <target state="translated">새 인스턴스를 만듭니다는 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 시스템 기본값을 사용 하 여 클래스 <bpt id="p2">&lt;xref href="System.Resources.ResourceReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 지정 된 스트림에서 리소스를 읽는 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.Stream&gt; of resources to be read.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;리소스를 읽을 수 있습니다.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The stream should refer to an existing resources file.</source>
          <target state="translated">스트림은 기존 리소스 파일을 참조 해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> is not readable.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">stream</ph> <ept id="p1">&lt;/code&gt;</ept> 를 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified resource reader.</source>
          <target state="translated">새 인스턴스를 만듭니다는 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 지정된 된 리소스 판독기를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this constructor to support custom resource formats using a user-provided &lt;xref:System.Resources.IResourceReader&gt;.</source>
          <target state="translated">이 생성자를 사용 하는 사용자가 제공한 &lt;xref:System.Resources.IResourceReader&gt;.&lt;/xref:System.Resources.IResourceReader&gt; 를 사용 하 여 사용자 지정 리소스 형식 지원</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The reader that will be used.</source>
          <target state="translated">사용 되는 판독기입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">reader</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">reader</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the system default <bpt id="p2">&lt;xref href="System.Resources.ResourceReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that opens and reads resources from the given file.</source>
          <target state="translated">새 인스턴스를 만듭니다는 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 시스템 기본값을 사용 하 여 클래스 <bpt id="p2">&lt;xref href="System.Resources.ResourceReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 를 열고 지정된 된 파일에서 리소스를 읽습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Resource file to read.</source>
          <target state="translated">읽을 리소스 파일입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Closes and releases any resources used by this <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">사용 하는 모든 리소스를 해제를 닫고 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>All calls to methods on the &lt;xref:System.Resources.ResourceSet&gt; after a call to this method might fail.</source>
          <target state="translated">모든 호출에 대 한 메서드는 &lt;xref:System.Resources.ResourceSet&gt;후이 메서드에 대 한 호출에 실패할 수 있습니다.&lt;/xref:System.Resources.ResourceSet&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Close can be safely called multiple times.</source>
          <target state="translated">Close 여러 번 안전 하 게 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The current implementation of Close calls &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; (<ph id="ph2">`true`</ph>).</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 닫기를 호출의 현재 구현에서 &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;(<ph id="ph2">`true`</ph>).&lt;/xref:System.Resources.ResourceSet.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Disposes of the resources (other than memory) used by the current instance of <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">현재 인스턴스에서 사용 하는 리소스 (메모리 제외)를 삭제 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; when you are finished using the &lt;xref:System.Resources.ResourceSet&gt;.</source>
          <target state="translated">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; &lt;xref:System.Resources.ResourceSet&gt;.&lt;/xref:System.Resources.ResourceSet&gt; 를 사용 하 여 작업을 마쳤으면&lt;/xref:System.Resources.ResourceSet.Dispose%2A&gt; 호출</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; method leaves the &lt;xref:System.Resources.ResourceSet&gt; in an unusable state.</source>
          <target state="translated">&lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;메서드는 &lt;xref:System.Resources.ResourceSet&gt;불안정 한 상태가.&lt;/xref:System.Resources.ResourceSet&gt; &lt;/xref:System.Resources.ResourceSet.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;, you must release all references to the &lt;xref:System.Resources.ResourceSet&gt; so the memory it was occupying can be reclaimed by garbage collection.</source>
          <target state="translated">호출한 후 &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;에 대 한 모든 참조를 해제 해야는 &lt;xref:System.Resources.ResourceSet&gt;차지 했던 메모리를 가비지 수집에 의해 회수 될 수 있도록 합니다.&lt;/xref:System.Resources.ResourceSet&gt; &lt;/xref:System.Resources.ResourceSet.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The current method is the implementation of &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 현재 메서드는 &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;안내 하십시오.&lt;/xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; 구현</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation calls &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt; (<ph id="ph1">`true`</ph>).</source>
          <target state="translated">이 구현에서는 호출 &lt;xref:System.Resources.ResourceSet.Dispose%2A&gt;(<ph id="ph1">`true`</ph>).&lt;/xref:System.Resources.ResourceSet.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.</source>
          <target state="translated">를 요청 하는 경우 내부 관리 되는 개체를 닫고 현재 인스턴스와 연관 된 (메모리 제외) 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`dispose`</ph> parameter is <ph id="ph2">`true`</ph>, the current method frees all the resources associated with it as well as with all objects associated with it.</source>
          <target state="translated">경우는 <ph id="ph1">`dispose`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 현재 메서드 뿐 아니라 관련 된 모든 개체와 연결 된 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`dispose`</ph> is <ph id="ph2">`false`</ph>, the current method frees only the resources allocated to it, and ignores any objects associated with it.</source>
          <target state="translated">경우 <ph id="ph1">`dispose`</ph> 은 <ph id="ph2">`false`</ph>, 현재 메서드가, 할당 된 리소스를 해제 하 고 연결 된 모든 개체를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Indicates whether the objects contained in the current instance should be explicitly closed.</source>
          <target state="translated">현재 인스턴스에 포함 된 개체를 명시적으로 닫아야 합니다 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns the preferred resource reader class for this kind of <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 종류의 기본 설정된 리소스 판독기 클래스를 반환 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the &lt;xref:System.Type&gt; for the preferred resource reader for this kind of <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 &lt;xref:System.Type&gt;이러한 종류에 대 한 기본 설정된 리소스 판독기의 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns the preferred resource writer class for this kind of <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 종류의 기본 설정된 리소스 작성기 클래스를 반환 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the &lt;xref:System.Type&gt; for the preferred resource writer for this kind of <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 &lt;xref:System.Type&gt;이러한 종류에 대 한 기본 설정된 리소스 작성기의 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; that can iterate through the <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 &lt;xref:System.Collections.IDictionaryEnumerator&gt;반복할 수 있는 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IDictionaryEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators only allow reading the data in the collection.</source>
          <target state="translated">열거자는 컬렉션의 데이터 읽기를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators cannot be used to modify the underlying collection.</source>
          <target state="translated">내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;또한이 위치로 복원 열거자를 가져옵니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.</source>
          <target state="translated">이 위치에서, 호출 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;예외를 throw 합니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">따라서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">컬렉션의 끝이 전달 된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치 하 고 호출 되 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>호출, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;예외를 throw 합니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;그 뒤 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 설정 하려면</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">열거자는 무효화 및 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; throw&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; 또는&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 을 다음에 호출할 추가, 수정 또는 삭제 요소와 같은 컬렉션에 변경 내용이 있는 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; will return the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;및 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;열거자가 이미 무효로 되 었 하는 경우에로 설정 하는 요소를 반환 합니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName&gt; property to access the value stored in the current element.</source>
          <target state="translated">사용할 수는 &lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName&gt;현재 요소에 저장 된 값에 액세스 하는 속성입니다.&lt;/xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt; property to access the key of the current element.</source>
          <target state="translated">사용 하 여는 &lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;속성을 현재 요소의 키에 액세스 합니다.&lt;/xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt; property to access the value of the current element.</source>
          <target state="translated">사용 하 여는 &lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;현재 요소의 값에 액세스 하는 속성입니다.&lt;/xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 또는 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for this <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for this <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IDictionaryEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The resource set has been closed or disposed.</source>
          <target state="translated">리소스 집합을 닫히거나 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Searches for a resource object with the specified name.</source>
          <target state="translated">지정 된 이름의 리소스 개체를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the resource object is case sensitive.</source>
          <target state="translated">리소스 개체의 이름은 대/소문자 구분입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a case-insensitive search, use &lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;.</source>
          <target state="translated">대/소문자 구분 검색을 위한 &lt;xref:System.Resources.ResourceSet.GetObject%2A&gt;.&lt;/xref:System.Resources.ResourceSet.GetObject%2A&gt; 사용</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Case-sensitive name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 대/소문자 구분 이름입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The requested resource.</source>
          <target state="translated">요청 된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체를 닫히거나 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">요청 된 경우 지정 된 이름의 리소스 개체에 대 한 대/소문자 구분 방식으로 검색 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">`ignoreCase`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 이름 "Resource"를 사용 하 여 리소스 이름 "resource"를 사용 하 여 리소스와 같습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note, however, that this method always performs case-insensitive string comparisons using &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">단,이 메서드가 항상 &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.&lt;/xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt; 를 사용 하 여 대/소문자 구분 문자열 비교를 수행</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 "TR-TR" (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">`GetObject`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">사용 하는 <ph id="ph1">`GetObject`</ph> 메서드 <ph id="ph2">`ignoreCase`</ph> 로 설정 <ph id="ph3">`true`</ph>,이 비교가 성공 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates whether the case of the specified name should be ignored.</source>
          <target state="translated">지정 된 이름의 대/소문자를 무시할지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The requested resource.</source>
          <target state="translated">요청 된 리소스입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체를 닫히거나 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;xref:System.String&gt; resource with the specified name.</source>
          <target state="translated">검색 한 &lt;xref:System.String&gt;지정 된 이름의 리소스.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value of a resource, if the value is a &lt;xref:System.String&gt;.</source>
          <target state="translated">값에 &lt;xref:System.String&gt;.&lt;/xref:System.String&gt; 이 리소스의 값</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The resource specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> is not a &lt;xref:System.String&gt;.</source>
          <target state="translated">지정 하는 리소스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept> &lt;xref:System.String&gt;.&lt;/xref:System.String&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체를 닫히거나 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Searches for a &lt;xref:System.String&gt; resource with the specified name in a case-insensitive manner, if requested.</source>
          <target state="translated">검색 한 &lt;xref:System.String&gt;소문자를 요청 하는 경우 지정한 이름의 리소스.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">`ignoreCase`</ph> parameter is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">`ignoreCase`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 이름 "Resource"를 사용 하 여 리소스 이름 "resource"를 사용 하 여 리소스와 같습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note, however, that this method always performs case-insensitive string comparisons using &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">단,이 메서드가 항상 &lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;.&lt;/xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt; 를 사용 하 여 대/소문자 구분 문자열 비교를 수행</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The advantage is that results of case-insensitive string comparisons performed by this method are the same on all computers regardless of culture.</source>
          <target state="translated">장점은이 메서드에 의해 수행 되는 대/소문자 구분 문자열 비교의 결과가 문화권에 관계 없이 모든 컴퓨터에서 동일한 지입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">단점은 결과 모든 문화권의 대/소문자 규칙와 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">예를 들어, 터키어 알파벳에 점을 사용 하 여 i: 문자의 두 가지 버전 및 점이 없는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">터키어 문자 I (유니코드 0049)으로 간주 됩니다에 다른 문자 (유니코드 0131) ı의 대문자 버전.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">문자 (유니코드 0069) i 또 다른 문자 İ (유니코드 0130)의 소문자 버전을 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">이 대/소문자 규칙을 대/소문자 구분 문자열 비교에 따라 "TR-TR" (터키어-터키에서) 문화권에 대 한 장치 (유니코드 0049) 및 i (0069 유니코드) 문자의 실패 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">`GetString`</ph> method with <ph id="ph2">`ignoreCase`</ph> set to <ph id="ph3">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">사용 하는 <ph id="ph1">`GetString`</ph> 메서드 <ph id="ph2">`ignoreCase`</ph> 로 설정 <ph id="ph3">`true`</ph>,이 비교가 성공 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Name of the resource to search for.</source>
          <target state="translated">검색할 리소스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Indicates whether the case of the case of the specified name should be ignored.</source>
          <target state="translated">지정 된 이름의 대/소문자의 대/소문자를 무시할지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The value of a resource, if the value is a &lt;xref:System.String&gt;.</source>
          <target state="translated">값에 &lt;xref:System.String&gt;.&lt;/xref:System.String&gt; 이 리소스의 값</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The resource specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> is not a &lt;xref:System.String&gt;.</source>
          <target state="translated">지정 하는 리소스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept> &lt;xref:System.String&gt;.&lt;/xref:System.String&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The object has been closed or disposed.</source>
          <target state="translated">개체를 닫히거나 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Indicates the <bpt id="p1">&lt;xref href="System.Resources.IResourceReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the resources.</source>
          <target state="translated">나타냅니다는 <bpt id="p1">&lt;xref href="System.Resources.IResourceReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 리소스를 읽는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Reads all the resources and stores them in a <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> indicated in the <bpt id="p2">&lt;xref href="System.Resources.ResourceSet.Table"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> property.</source>
          <target state="translated">모든 리소스를 읽고에 저장 한 <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 표시 된는 <bpt id="p2">&lt;xref href="System.Resources.ResourceSet.Table"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 속성입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IEnumerator&gt; object to avoid a race condition with <bpt id="p1">&lt;xref uid="langword_csharp_Dispose" name="Dispose" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 &lt;xref:System.Collections.IEnumerator&gt;와 경합 상태를 방지 하기 위해 개체 <bpt id="p1">&lt;xref uid="langword_csharp_Dispose" name="Dispose" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This member is not intended to be used directly from your code.</source>
          <target state="translated">이 멤버는 사용자 코드에서 직접 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An enumerator for the current <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">현재에 대 한 열거자 <bpt id="p1">&lt;xref href="System.Resources.ResourceSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in which the resources are stored.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Hashtable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 리소스가 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>