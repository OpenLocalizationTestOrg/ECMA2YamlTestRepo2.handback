<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74cb8ecc9e88b99a6f6547ece54a482a0fc03456</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.PresentationSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67544af8787949219bf1e93a47de70af31e6a32c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cd9caf8a80d2810b16dbb747d9443ef39c11c1e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an abstract base for classes that present content from another technology as part of an interoperation scenario.</source>
          <target state="translated">상호 운용 시나리오의 일부로 다른 기술의 콘텐츠를에서 표시 하는 클래스는 추상 기본를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture.</source>
          <target state="translated">또한이 클래스는 기본 시각적 계층 표시 아키텍처 뿐만 아니라 이러한 소스를 사용 하기 위한 정적 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides initialization for base class values when called by the constructor of a derived class.</source>
          <target state="translated">파생된 클래스의 생성자에서 호출 될 때 기본 클래스 값의 초기화를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds a <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class instance to the list of known presentation sources.</source>
          <target state="translated">추가 <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 알려진된 표시 소스 목록에 클래스 인스턴스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be called by derived classes to indicate that they need to be tracked.</source>
          <target state="translated">이 메서드를 나타내는 추적 해야 하는 파생된 클래스에서 호출 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Adds a handler for the <bpt id="p1">&lt;xref uid="langword_csharp_SourceChanged" name="SourceChanged" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event to the provided element.</source>
          <target state="translated">에 대 한 처리기는 <bpt id="p1">&lt;xref uid="langword_csharp_SourceChanged" name="SourceChanged" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 요소에는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Despite what the syntax block for this event states, there is no legitimate <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> attached property usage.</source>
          <target state="translated">이 이벤트에 대 한 구문 블록의 상태, 불구 하 고는 허용 되지 않습니다 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> 연결 된 속성의 사용 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not attempt to add handlers in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>, and handlers in code should only be placed on objects that serve as hosts for presentation (&lt;xref:System.Windows.PresentationSource&gt; ) content.</source>
          <target state="translated">에 대 한 처리기를 추가 하려고 해서는 안 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>, 처리기 코드에만 역할을 표시 하는 데 호스트 하는 개체에 배치 해야 하 고 (&lt;xref:System.Windows.PresentationSource&gt; ) 콘텐츠.&lt;/xref:System.Windows.PresentationSource&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such handlers should only be attached during object initialization, and should be explicitly removed in a Dispose method or equivalent object cleanup.</source>
          <target state="translated">이러한 처리기 개체를 초기화 하는 동안에 연결 해야 하 고 Dispose 메서드 또는 해당 개체를 정리에서 명시적으로 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though this is a routed event, there are special restrictions placed on this event that differ from normal routed event behavior, due to the relatively small number of elements in a typical application scenario that would concern themselves with handling this event.</source>
          <target state="translated">라우트된 이벤트 인 경우에 다른 것을 염려이 이벤트를 처리 하는 일반적인 응용 프로그램 시나리오에서 요소의 상대적으로 적은 수로 인해 일반 라우트된 이벤트 동작을이 이벤트에 특별 한 제한 사항이 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   You cannot use the &lt;xref:System.Windows.UIElement&gt; or &lt;xref:System.Windows.ContentElement&gt; &lt;xref:System.Windows.UIElement.AddHandler%2A&gt; methods to add handlers.</source>
          <target state="translated">-사용할 수 없습니다는 &lt;xref:System.Windows.UIElement&gt;또는 &lt;xref:System.Windows.ContentElement&gt; &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;처리기를 추가 하는 방법.&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt; &lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use AddSourceChangedHandler.</source>
          <target state="translated">AddSourceChangedHandler 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> and <ph id="ph3">`-=`</ph> event handler syntaxes, and related language specific handler syntaxes, are not supported, because the event itself is not exposed as public.</source>
          <target state="translated">- <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> 및 <ph id="ph3">`-=`</ph> 이벤트 처리기 구문과 관련된 특정 처리기 구문은 지원 되지 않으며, 이벤트 자체 public로 노출 되지 않으므로 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the &lt;xref:System.Windows.PresentationSource&gt; utility methods for adding and removing the handlers directly are supported.</source>
          <target state="translated">만 &lt;xref:System.Windows.PresentationSource&gt;유틸리티 메서드를 직접 추가 및 제거는 처리기 지원 됩니다.&lt;/xref:System.Windows.PresentationSource&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Class handlers are not allowed.</source>
          <target state="translated">클래스 처리기 허용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, you cannot call &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; against this event in a class constructor because although an identifier field exists for SourceChanged, the identifier is not public.</source>
          <target state="translated">특히, 호출할 수 없습니다 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;클래스 생성자에서이 이벤트에 대 한 식별자가 공용 식별자 필드에 SourceChanged 대 한 존재 하지만 하므로.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   All registered handlers will receive the SourceChanged event even if one of the handlers attempts to mark the arguments as handled.</source>
          <target state="translated">-모든 등록 된 처리기 처리기 중 하나는 처리 된 것으로 인수를 표시 하려고 하는 경우에 SourceChanged 이벤트를 받게 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The element to add the handler to.</source>
          <target state="translated">처리기를 추가할 요소입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The hander implementation to add.</source>
          <target state="translated">추가할 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Sets the list of listeners for the <bpt id="p1">&lt;xref href="System.Windows.PresentationSource.ContentRendered"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event to <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 수신기 목록을 설정 하는 <bpt id="p1">&lt;xref href="System.Windows.PresentationSource.ContentRendered"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트를 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the visual target for the visuals being presented in the source.</source>
          <target state="translated">원본에서 제공 되는 표시에 대 한 시각적 대상을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return of this property relies on an implementation of &lt;xref:System.Windows.PresentationSource.GetCompositionTargetCore%2A&gt;.</source>
          <target state="translated">이 속성의 반환 &lt;xref:System.Windows.PresentationSource.GetCompositionTargetCore%2A&gt;.&lt;/xref:System.Windows.PresentationSource.GetCompositionTargetCore%2A&gt; 의 구현이 필요로</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A visual target (instance of a <bpt id="p1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class).</source>
          <target state="translated">시각적 대상 (의 인스턴스는 <bpt id="p1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 파생 클래스).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Occurs when content is rendered and ready for user interaction.</source>
          <target state="translated">콘텐츠가 렌더링 되 고 상호 작용할 준비가 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns a list of sources.</source>
          <target state="translated">소스의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned list supports an enumerator over a read-only, thread-safe copy of the list of sources as added with &lt;xref:System.Windows.PresentationSource.AddSource%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.PresentationSource.AddSource%2A&gt;.&lt;/xref:System.Windows.PresentationSource.AddSource%2A&gt; 와 함께 추가 된 원본 목록의 읽기 전용, 스레드로부터 안전한 복사본을 통해 열거자를 반환된 된 목록 지원</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator skips any dead weak references in the list.</source>
          <target state="translated">열거자는 목록에는 작동 하지 않는 약한 참조를 건너뜁니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A list of weak references.</source>
          <target state="translated">약한 참조의 목록입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the source in which a provided <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is presented.</source>
          <target state="translated">소스를 반환 합니다. 제공 된 <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to find the source for.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 원본을 찾을 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in which the dependency object is being presented.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 종속성 개체가 제공 되는 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the source in which a provided <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is presented.</source>
          <target state="translated">소스를 반환 합니다. 제공 된 <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to find the source for.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 원본을 찾을 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in which the visual is being presented, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph1">visual</ph><ept id="p3">&lt;/code&gt;</ept> is disposed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 시각적 개체는 제공 되는, 또는 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 경우 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph1">visual</ph> <ept id="p3">&lt;/code&gt;</ept> 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;visual&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;visual&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns a visual target for the given source.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 지정 된 소스에 대 한 표시 대상을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is target for rendering the visual.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Windows.Media.CompositionTarget"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 표시를 렌더링 하는 것에 대 한 대상입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value that declares whether the object is disposed.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 개체가 삭제 되는지 여부를 선언 하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>개체가 삭제 됩니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Removes a <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class instance from the list of known presentation sources.</source>
          <target state="translated">제거는 <bpt id="p1">&lt;xref href="System.Windows.PresentationSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 알려진된 표시 원본 목록에서 파생 되는 클래스 인스턴스.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Removes a handler for the <bpt id="p1">&lt;xref uid="langword_csharp_SourceChanged" name="SourceChanged" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event from the provided element.</source>
          <target state="translated">에 대 한 처리기를 제거는 <bpt id="p1">&lt;xref uid="langword_csharp_SourceChanged" name="SourceChanged" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공된 된 요소에서 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though this is a routed event, there are special restrictions placed on this event that differ from normal routed event behavior, due to the relatively small number of elements in a typical application scenario that would concern themselves with handling this event.</source>
          <target state="translated">라우트된 이벤트 인 경우에 다른 것을 염려이 이벤트를 처리 하는 일반적인 응용 프로그램 시나리오에서 요소의 상대적으로 적은 수로 인해 일반 라우트된 이벤트 동작을이 이벤트에 특별 한 제한 사항이 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   You cannot use the &lt;xref:System.Windows.UIElement&gt; or &lt;xref:System.Windows.ContentElement&gt; &lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt; methods to remove handlers.</source>
          <target state="translated">-사용할 수 없습니다는 &lt;xref:System.Windows.UIElement&gt;또는 &lt;xref:System.Windows.ContentElement&gt; &lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;처리기를 제거 하는 메서드.&lt;/xref:System.Windows.UIElement.RemoveHandler%2A&gt; &lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use RemoveSourceChangedHandler.</source>
          <target state="translated">RemoveSourceChangedHandler 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> and <ph id="ph3">`-=`</ph> event handler syntaxes, and other language specific handler syntaxes, are not supported, because the event itself is not exposed as public.</source>
          <target state="translated">- <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]</ph> <ph id="ph2">`+=`</ph> 및 <ph id="ph3">`-=`</ph> 이벤트 처리기 구문과 다른 특정 처리기 구문은 지원 되지 않으며, 이벤트 자체 public로 노출 되지 않으므로 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the &lt;xref:System.Windows.PresentationSource&gt; utility methods for adding and removing the handlers directly are supported.</source>
          <target state="translated">만 &lt;xref:System.Windows.PresentationSource&gt;유틸리티 메서드를 직접 추가 및 제거는 처리기 지원 됩니다.&lt;/xref:System.Windows.PresentationSource&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The element to remove the handler from.</source>
          <target state="translated">처리기를 제거 하는 요소입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The handler implementation to remove.</source>
          <target state="translated">제거할 처리기 구현입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Provides notification that the root <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has changed.</source>
          <target state="translated">알림을 제공 하는 루트 <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변경 되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes should call this method to indicate that their root &lt;xref:System.Windows.Media.Visual&gt; has changed.</source>
          <target state="translated">파생된 클래스 나타내기 위해이 메서드는 루트를 호출 해야 &lt;xref:System.Windows.Media.Visual&gt;변경 되었습니다.&lt;/xref:System.Windows.Media.Visual&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method causes two object lifetime events to be raised on the specified root visuals, if and only if those root visuals are &lt;xref:System.Windows.FrameworkElement&gt; derived classes.</source>
          <target state="translated">지정한 루트 시각적 개체에서 발생 하는 두 개의 개체 수명 이벤트를 이러한 루트 표시는 하는 경우에이 메서드를 호출 하면 &lt;xref:System.Windows.FrameworkElement&gt;파생 클래스입니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The old root visual will raise the &lt;xref:System.Windows.FrameworkElement.Unloaded&gt; event, and will process its tree of elements downward, broadcasting this event to each child element.</source>
          <target state="translated">-이전 루트 visual를 발생 시킵니다는 &lt;xref:System.Windows.FrameworkElement.Unloaded&gt;이벤트 및 해당 요소 트리를 아래쪽으로 각 자식 요소에이 이벤트를 처리 합니다.&lt;/xref:System.Windows.FrameworkElement.Unloaded&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The new root visual will raise the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event, and will process its tree of elements downward, broadcasting this event to each child element.</source>
          <target state="translated">-새 루트 표시를 발생 시킵니다는 &lt;xref:System.Windows.FrameworkElement.Loaded&gt;이벤트 및 해당 요소 트리를 아래쪽으로 각 자식 요소에이 이벤트를 처리 합니다.&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The old root <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이전 루트 <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The new root <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 루트 <bpt id="p1">&lt;xref href="System.Windows.Media.Visual"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets or sets the root visual being presented in the source.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 루트 소스에 제공 되 고 visual을 설정 하거나 가져옵니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The root visual.</source>
          <target state="translated">루트 표시 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>