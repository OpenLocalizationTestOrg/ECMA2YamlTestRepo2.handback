<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">655ffbffba4695505f8ca982cc23dfc732582cbb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.IPersistComponentSettings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f15b1cc3c72cfeb09c434019c400a4f52b62f32c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3110686e11c84e8129aa29efc4ba41c6713a3c3d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines standard functionality for controls or libraries that store and retrieve application settings.</source>
          <target state="translated">컨트롤 또는 저장 하 고 응용 프로그램 설정을 검색 하는 라이브러리를 위한 표준 기능을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, and then add special properties to this class.</source>
          <target state="translated">파생 되는 설정 래퍼 클래스를 만들어 응용 프로그램에 응용 프로그램 설정 지원을 추가할 수는 일반적으로 &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, 다음 특수 속성이이 클래스에 추가&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</source>
          <target state="translated">그러나이 방법은 충분히 캡슐화 하지 못합니다 컨트롤에 대 한 응용 프로그램 설정 세부 정보에서 해당 컨테이너 실드 되어 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</source>
          <target state="translated">IPersistComponentSettings 인터페이스 컨트롤, 구성 요소, 또는 라이브러리 모듈에 응용 프로그램 설정 상태 변경 요청을 통신 하기 위한 표준 인터페이스와 응용 프로그램을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Design-time tools also depend on this interface to properly manage controls and components.</source>
          <target state="translated">또한 디자인 타임 도구 컨트롤 및 구성 요소를 제대로 관리 하려면이 인터페이스에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reads the control's application settings into their corresponding properties and updates the control's state.</source>
          <target state="translated">해당 속성으로 컨트롤의 응용 프로그램 설정을 읽고 컨트롤의 상태를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.</source>
          <target state="translated">LoadComponentSettings 메서드 두 가지 필수 작업을 수행 하는 일반적으로:-를 호출 하 여 해당 응용 프로그램 설정 속성의 값을 일반적으로 새로 고치려면 컨트롤에 포함 된 각 응용 프로그램 설정 인스턴스를 수행 하는 &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;메서드.&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   As required, it updates those general properties that depend on these reloaded settings properties.</source>
          <target state="translated">-을 필요한 대로 속성을 이러한 메서드는 다시 로드 설정에 종속 되는 일반 속성을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the settings class contained a <ph id="ph1">`location`</ph> settings property, LoadComponentSettings should ensure that the control's &lt;xref:System.Windows.Forms.Control.Location%2A&gt; property is updated to reflect this reloaded setting.</source>
          <target state="translated">예를 들어 설정 클래스에 포함 된 경우는 <ph id="ph1">`location`</ph> LoadComponentSettings 설정 속성을 확인 해야 하는 컨트롤의 &lt;xref:System.Windows.Forms.Control.Location%2A&gt;속성이이 다시 로드 된 설정을 반영 하도록 업데이트 됩니다.&lt;/xref:System.Windows.Forms.Control.Location%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Resets the control's application settings properties to their default values.</source>
          <target state="translated">컨트롤의 응용 프로그램 설정 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the ResetComponentSettings method typically calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; method on each instance of an application settings class it contains.</source>
          <target state="translated">ResetComponentSettings 메서드의 구현도 일반적으로 필요는 &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;메서드가 포함 된 응용 프로그램 설정 클래스의 각 인스턴스에서.&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Persists the control's application settings properties.</source>
          <target state="translated">컨트롤의 응용 프로그램 설정 속성을 유지합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store.</source>
          <target state="translated">SaveComponentSettings 메서드는 연결 된 데이터 저장소를 컨트롤의 응용 프로그램 설정 속성의 값을 씁니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">메서드에서 사용 하는 데이터 저장소와 serialization 방법 &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.&lt;/xref:System.Configuration.SettingsProviderAttribute&gt; 를 통해 각 설정 클래스와 관련 된 설정 공급자에 의해 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the choice of the settings provider by using the &lt;xref:System.Configuration.ISettingsProviderService&gt; interface.</source>
          <target state="translated">다양 한 설정 공급자를 사용 하 여 재정의할 수 있습니다는 &lt;xref:System.Configuration.ISettingsProviderService&gt;인터페이스.&lt;/xref:System.Configuration.ISettingsProviderService&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the &lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt; property is <ph id="ph2">`true`</ph>, the control should call SaveComponentSettings in its own &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method so that the control's configuration data is stored automatically before the application ends.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 경우는 &lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;속성은 <ph id="ph2">`true`</ph>, 컨트롤에서 호출 해야 SaveComponentSettings 자체 &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;메서드는 응용 프로그램 종료 되기 전에 컨트롤의 구성 데이터를 자동으로 저장 되도록 합니다.&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt; &lt;/xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</source>
          <target state="translated">컨트롤 응용 프로그램 설정 속성을 자동으로 유지할지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control contains configuration data, it will typically persist this data in response to an explicit call to the &lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt; method or sometimes implicitly when the control's &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method is invoked.</source>
          <target state="translated">컨트롤 구성 데이터를 포함 하는 경우 일반적으로 계속 유지 되며 명시적으로 호출에 대 한 응답에서이 데이터는 &lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;메서드 또는 경우에 따라 암시적으로 때 컨트롤의 &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;메서드가 호출 됩니다.&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt; &lt;/xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.</source>
          <target state="translated">SaveSettings 속성 컨트롤 삭제 될 때 자동으로 구성 데이터를 유지 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of SaveSettings depends on the implementation of the control.</source>
          <target state="translated">SaveSettings의 기본값은 컨트롤의 구현에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.</source>
          <target state="translated">컨트롤에 대 한 설명서는 응용 프로그램 설정을 사용 하 여 여부, 유지 되는 데이터 및 SaveSettings 속성의 기본값 란를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the control should automatically persist its state; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>컨트롤을 자동으로 해당 상태를 유지 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the application settings key for the current instance of the control.</source>
          <target state="translated">컨트롤의 현재 인스턴스에 대 한 응용 프로그램 설정 키의 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</source>
          <target state="translated">동일한 래퍼 클래스의 여러 인스턴스가 있을 경우 응용 프로그램 설정 속성의 그룹을 SettingsKey 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</source>
          <target state="translated">예를 들어 컨트롤에는 일반적으로 동일한 응용 프로그램에서 동일한 컨트롤의 여러 인스턴스를 배치 하는 다음 연결 된 래퍼 클래스를 포함 하는 경우 래퍼 클래스의 인스턴스가 여러 개에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</source>
          <target state="translated">설정 키가 구성 데이터 인스턴스 단위로;에서 서로 다른 경우에 필요 예를 들어 동적으로 위치로 지정 된 컨트롤의 위치입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">다음과 같은 일반적인 규칙이 SettingsKey의 사용에 적용:-모든 클래스와 비슷한 컨트롤에는&amp;0; 개 이상의 응용 프로그램 설정 클래스 포함 될 수 있습니다 &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt; 에서 파생 된</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each settings class contains its own &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property, which helps disambiguate multiple instances of that class.</source>
          <target state="translated">각 설정을 클래스 &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;속성을 해당 클래스의 여러 인스턴스를 구분 하는 도움이 되&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; 는 자체 포함</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   A control should separate its per-instance data and its shared data into different settings classes.</source>
          <target state="translated">-를 다른 설정 클래스로 인스턴스 당 데이터와 공유 데이터 컨트롤이 두십시오.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For a control with any per-instance configuration data, the <ph id="ph1">`get`</ph> accessor of the SettingsKey property should default to the &lt;xref:System.Windows.Forms.Control.Name%2A&gt; of the control.</source>
          <target state="translated">-모든 인스턴스별 구성 데이터와 컨트롤에 대 한는 <ph id="ph1">`get`</ph> SettingsKey 속성의 접근자의 기본값은 &lt;xref:System.Windows.Forms.Control.Name%2A&gt;컨트롤의.&lt;/xref:System.Windows.Forms.Control.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases the name of the control will be unique within an application.</source>
          <target state="translated">대부분의 경우에서 컨트롤의 이름을 응용 프로그램 내에서 고유 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control contains only shared configuration data, <ph id="ph1">`get`</ph> should default to <ph id="ph2">`null`</ph>.</source>
          <target state="translated">컨트롤에 구성 데이터를 공유만 있으면 <ph id="ph1">`get`</ph> 의 기본값은 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The <ph id="ph1">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</source>
          <target state="translated">- <ph id="ph1">`set`</ph> -인스턴스 및 공유 구성 데이터를 포함 하는 설정 클래스를 구분 하려면이 속성에 대 한 접근자를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each settings class containing per-instance data, <ph id="ph1">`set`</ph> should just pass-through to the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property of the settings class.</source>
          <target state="translated">인스턴스 데이터를 포함 하는 각 설정 클래스에 대 한 <ph id="ph1">`set`</ph> &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;설정 클래스의 속성&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; 을 단순히 통과 해야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For settings classes containing shared data, <ph id="ph1">`set`</ph> should perform no action for that settings class.</source>
          <target state="translated">공유 데이터를 포함 하는 설정 클래스에 대 한 <ph id="ph1">`set`</ph> 해당 설정 클래스에 대 한 작업을 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the settings key for the current instance of the control.</source>
          <target state="translated">A &lt;xref:System.String&gt;컨트롤의 현재 인스턴스에 대 한 설정 키가 포함 된.&lt;/xref:System.String&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>