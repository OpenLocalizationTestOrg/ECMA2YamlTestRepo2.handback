<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be8b7a32520721d64686d6e64f9970d0f8d4c91e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeDeclaration.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76eb47ca6a10dbc7010a4bcb74f5bd9faddcd05c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d786514f2af33e30490273c0179d256f113228d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">클래스, 구조체, 인터페이스 또는 열거형에 대 한 형식 선언을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated">CodeTypeDeclaration은 클래스, 구조체, 인터페이스 또는 열거형을 선언 하는 코드를 나타내는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to declare a type that is nested within another type.</source>
          <target state="translated">다른 형식 내에 중첩 된 형식을 선언 하 CodeTypeDeclaration은 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt; property specifies the base type or base types of the type being declared.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;기본 형식 또는 선언 되는 형식의 기본 형식 속성을 지정 합니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt; property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;속성 메서드, 필드, 속성, 설명 및 기타 형식을 포함할 수 있는 형식 멤버를 포함 합니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt; property indicates the &lt;xref:System.Reflection.TypeAttributes&gt; values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;속성 나타냅니다는 &lt;xref:System.Reflection.TypeAttributes&gt;형식 선언에 대 한 종류의 형식 범주를 나타내는 값입니다.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, and &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, 및 &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;메서드 형식이 인지 클래스, 구조체, 열거형 또는 인터페이스 형식으로 각각 나타냅니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 일부 프로그래밍 언어에만 참조 형식 또는 클래스의 선언을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method to test for the appropriate &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags.</source>
          <target state="translated">인터페이스, 열거형 또는 값 형식 선언에 대 한 지원에 대 한 언어별 CodeDOM 코드 생성기를 확인 하려면 호출는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;테스트 하기 위해 적절 한 메서드 &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;플래그.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for interfaces, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for enumerations, and &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for value types such as structures.</source>
          <target state="translated">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;인터페이스에 대 한 지원을 나타냅니다 &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;열거형에 대 한 지원을 나타냅니다 및 &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;구조와 같은 값 형식에 대 한 지원을 나타냅니다.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">클래스 또는 구조체 하나의 완전 한 선언, 구현을 작성 하거나 여러 선언으로 분할할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt; property indicates whether the type declaration is complete or partial.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;속성 형식 선언은 전부 또는 일부 인지를 나타냅니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">일부 코드 생성기 &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; 플래그로 메서드&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; 를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원합니다</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified name.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 이름의 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The name for the new type.</source>
          <target state="translated">새 형식에 대 한 이름입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the base types of the type.</source>
          <target state="translated">형식의 기본 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include &lt;xref:System.Object&gt; as the first item in the BaseTypes collection.</source>
          <target state="translated">기본 형식에서 상속 되지 않는 하나 이상의 인터페이스를 구현 하지만 Visual basic에서 클래스를 생성 하려면 포함 해야 &lt;xref:System.Object&gt;BaseTypes 컬렉션의 첫 번째 항목으로.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0 you do not need the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Object&gt; if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;.NET Framework 버전 2.0 필요 하지 않습니다는 &lt;xref:System.CodeDom.CodeTypeReference&gt;에 대 한 &lt;xref:System.Object&gt;이미 구현 하는 인터페이스 존재 하 고 형식에서 참조 하는 경우.&lt;/xref:System.Object&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are implementing the &lt;xref:System.Collections.ICollection&gt; interface and add it to the collection with this statement, <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">예를 들어, 구현 하는 경우는 &lt;xref:System.Collections.ICollection&gt;인터페이스 및이 문 사용 하 여 컬렉션에 추가 <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, 불필요 이전 <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> 문.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code illustrates the addition of a &lt;xref:System.CodeDom.CodeTypeReference&gt; to the collection that refers to &lt;xref:System.Object&gt;.</source>
          <target state="translated">다음 코드에서는 &lt;xref:System.CodeDom.CodeTypeReference&gt; &lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt; 를 참조 하는 컬렉션에&lt;/xref:System.CodeDom.CodeTypeReference&gt; 추가</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph>       [C#]      <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph>       The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph> [C#] <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph> 위의 코드에서는 다음 Visual Basic 코드를 해당 하는 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>       However, the Visual Basic code actually generated is the following.</source>
          <target state="translated"><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>그러나 실제로 생성 되는 Visual Basic 코드는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the base types of the type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식의 기본 형식을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">형식이 클래스 또는 참조 형식 인지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a class or reference type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>형식이 클래스 또는 참조 형식입니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">형식이 열거형 인지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an enumeration; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>형식이 열거형입니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">형식이 인터페이스 인지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an interface; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>형식이 인터페이스입니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">형식 선언은 전부 또는 일부 인지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">작성 한 완전 한 선언, 클래스 또는 구조체 구현 하거나 여러 선언으로 분할할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">구현이 하나의 완전 한 형식 선언에 일반적으로 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, set the type declaration IsPartial property to <ph id="ph1">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">이 경우 형식 선언 IsPartial 속성을 설정 <ph id="ph1">`false`</ph>, 형식 선언의 클래스 또는 구조체 구현에 대 한 모든 세부 정보를 나타낸다는 것을 의미입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">부분 형식 선언 쉽게 응용 프로그램의 서로 다른 모듈에는 클래스 또는 구조체 구현의 서로 다른 부분을 빌드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">부분 형식 선언은 한 소스 파일에 저장 또는 결국 함께로 컴파일되는 조합된 형식의 구현을 구성 하는 여러 소스 파일에 분산 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# 언어 클래스의 부분 형식 선언을 지원 및 통해 구조는 <ph id="ph1">`partial`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic 클래스의 부분 형식 선언을 지원 및와 구조는 <ph id="ph1">`Partial`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">일부 코드 생성기 &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; 플래그로 메서드&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; 를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원합니다</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Partial type declarations are supported for classes and structures.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 부분 형식 선언을 클래스와 구조체에 대해 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">열거형 또는 인터페이스에 대 한 부분 형식 선언을 지정 하면 생성된 된 코드는 컴파일러 오류를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When supplying a class or structure implementation across multiple declarations, set the IsPartial property to <ph id="ph1">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">여러 선언에서 클래스 또는 구조체 구현을 제공할 때 IsPartial 속성을 설정 <ph id="ph1">`true`</ph> 초기 선언 및 모든 추가 선언에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">초기 선언 형식을 완전히 지정 해야 액세스 한정자를 포함 하 여 서명 형식, 상속 및 인터페이스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">추가 선언 형식 시그니처를 다시 지정할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">추가 선언에 형식 시그니처를 재정의 하는 경우에 일반적으로 컴파일러 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 부분 형식을 사용 하 여 디자이너 코드에서 사용자에서 생성 된 코드를 구분 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic Windows 응용 프로그램 프로젝트에 사용자 코드에서 정규화 되지 않은 partial 클래스에 배치 되는 <ph id="ph1">`Partial`</ph> 키워드; 디자이너에서 제공 된 partial 클래스에 코드가 표시는 <ph id="ph2">`Partial`</ph> 키워드 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C#에서 사용자 코드와 디자이너 코드에에서 표시로 식별 되는 partial 클래스는 <ph id="ph1">`partial`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the class or structure declaration is a partial representation of the implementation; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>클래스 또는 구조체 선언이 구현; 부분 표현인 경우 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 선언이 클래스 또는 구조체의 완전 한 구현 하는 경우.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">형식이 값 형식 (구조체) 인지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>형식이 값 형식입니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">표시 된 형식에 대 한 클래스 멤버의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the class members.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 멤버를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt; collection is accessed for the first time.</source>
          <target state="translated">발생 경우는 &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;컬렉션에 처음으로 액세스 합니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt; collection is accessed for the first time.</source>
          <target state="translated">발생 경우는 &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;컬렉션에 처음으로 액세스 합니다.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">형식의 특성을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Reflection.TypeAttributes&gt; property contains the same type of values used by &lt;xref:System.Reflection&gt; when investigating a type at run time.</source>
          <target state="translated">&lt;xref:System.Reflection.TypeAttributes&gt;동일한 유형의 사용 하는 값을 포함 하는 속성 &lt;xref:System.Reflection&gt;런타임 시 형식 조사할 때.&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">이러한 플래그의 대부분 일부 언어에 대 한 형식 선언 구문에 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, only the following flags are significant to &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; : &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, and &lt;xref:System.Reflection.TypeAttributes&gt;.</source>
          <target state="translated">결과적으로, 다음 플래그만을 주는지 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;: &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, 및 &lt;xref:System.Reflection.TypeAttributes&gt;.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some of the flags such as &lt;xref:System.Reflection.TypeAttributes&gt; overlap with the meaning of flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property of &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; that is inherited from &lt;xref:System.CodeDom.CodeTypeMember&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 일부 &lt;xref:System.Reflection.TypeAttributes&gt; &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;xref:System.CodeDom.CodeTypeMember&gt;.&lt;/xref:System.CodeDom.CodeTypeMember&gt; 에서 상속 된&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; 속성&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; 의 플래그의 의미와 중복 되 면&lt;/xref:System.Reflection.TypeAttributes&gt; 같은 플래그</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property is a side effect of the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; class inheriting from &lt;xref:System.CodeDom.CodeTypeMember&gt; so that classes can be nested.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;속성의 부작용은는 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;클래스에서 상속 &lt;xref:System.CodeDom.CodeTypeMember&gt;클래스에 중첩 될 수 있도록 합니다.&lt;/xref:System.CodeDom.CodeTypeMember&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The flags in the TypeAttributes property should be used instead of the flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.</source>
          <target state="translated">플래그에 대신 TypeAttributes 속성의 플래그를 사용 해야는 &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;속성.&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The pattern for setting the visibility flags (flags containing the words <ph id="ph2">`Public`</ph> or <ph id="ph3">`Nested`</ph>) is to mask out all visibility flags using the &lt;xref:System.Reflection.TypeAttributes&gt; and then set the desired visibility flag.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 표시 범위 플래그를 설정 하기 위한 패턴 (단어를 포함 하는 플래그 <ph id="ph2">`Public`</ph> 또는 <ph id="ph3">`Nested`</ph>)를 마스킹 모든 표시 범위 플래그를 사용 하 여는 &lt;xref:System.Reflection.TypeAttributes&gt;원하는 표시 범위 플래그를 설정 합니다.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the C# code statement to identify the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; (named <ph id="ph1">`cd`</ph>) as an internal class is <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">예를 들어 C# 코드 문을 식별 하는 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;(라는 <ph id="ph1">`cd`</ph>)는 내부 클래스는 있는 그대로 <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Visual Basic에서는 동일한 값을 설정 하는 코드는 <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the TypeAttributes property directly to a visibility flag (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">표시 범위 플래그에 직접 TypeAttributes 속성 설정 (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) 설정 되었을 수 있는 다른 모든 플래그를 지웁니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.TypeAttributes&gt; object that indicates the attributes of the type.</source>
          <target state="translated">A &lt;xref:System.Reflection.TypeAttributes&gt;는 형식의 특성을 나타내는 개체입니다.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">형식 선언의 형식 매개 변수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">제네릭 형식 선언에 하나 이상의 형식 매개 변수 라는 형식이 지정 되지 않은 또는 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">형식 매개 변수 이름은 제네릭 선언의 본문 안에 있는 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the generic declaration for the &lt;xref:System.Collections.Generic.List%601&gt; class contains the type parameter <ph id="ph1">`T`</ph>.</source>
          <target state="translated">예를 들어 제네릭 선언에는 &lt;xref:System.Collections.Generic.List%601&gt;클래스 형식 매개 변수를 포함 합니다. <ph id="ph1">`T`</ph>.&lt;/xref:System.Collections.Generic.List%601&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">제네릭에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>.NET Framework 클래스 라이브러리의 제네릭<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the type parameters for the type declaration.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식 선언의 형식 매개 변수를 포함 하는 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>