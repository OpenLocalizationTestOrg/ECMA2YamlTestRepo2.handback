<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab88a4badc7d65529132b91581280c15f8f00c28</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Serialization.XsdDataContractImporter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f739caa4cd00dbe894c3cc2b12fc01cfe874002</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f250172b1cc0a8ea0f9df420abe79cb27f9dd7d6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</source>
          <target state="translated">런타임 (CLR) 형식은 공용 언어에 XML 스키마 파일 (.xsd) 집합의 변환을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the XsdDataContractImporter if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</source>
          <target state="translated">XML 스키마에서 데이터 계약 형식을 만드는 또는 기존 웹 서비스와 상호 운용 해야 하는 웹 서비스를 만드는 경우는 XsdDataContractImporter를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>XsdDataContractImporter will transform a set of XML schemas and create the <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> types that represent the data contract in a selected programming language.</source>
          <target state="translated">XsdDataContractImporter에서는 XML 스키마 집합을 변환 하 고 만듭니다는 <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> 선택한 프로그래밍 언어로 데이터를 나타내는 형식이 계약입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create the code, use the classes in the &lt;xref:System.CodeDom&gt; namespace.</source>
          <target state="translated">코드를 만들려면 사용의 클래스는 &lt;xref:System.CodeDom&gt;네임 스페이스.&lt;/xref:System.CodeDom&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conversely, use the &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt; class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</source>
          <target state="translated">반대로 사용 하 여는 &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;클래스 CLR 형식으로 표시 되는 데이터를 통합 하 고 다른 웹 서비스에서 사용할 수 있도록 각 데이터 형식에 대 한 XML 스키마를 내보내야 할 때 웹 서비스를 만들었습니다.&lt;/xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt; transforms a set of CLR types into a set of XML schemas.</source>
          <target state="translated">즉, &lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;CLR 형식 집합을 XML 스키마 집합으로 변환 합니다.&lt;/xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To generate CLR types from XML schemas at design time, use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 디자인 타임에 XML 스키마에서 CLR 형식을 생성, 사용 된 <bpt id="p1">[</bpt>ServiceModel Metadata 유틸리티 도구 (Svcutil.exe)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To generated code from XSD files, use the <ph id="ph1">`/dataContractOnly`</ph> switch of the tool.</source>
          <target state="translated">XSD 파일에서 코드 생성을 사용 하 여는 <ph id="ph1">`/dataContractOnly`</ph> 도구의 스위치입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the XsdDataContractImporter if you need more control over the process or need to do it programmatically.</source>
          <target state="translated">또한 더 프로세스를 제어 하거나 프로그래밍 방식으로 수행 해야 하는 XsdDataContractImporter를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Serialization.XsdDataContractImporter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.XsdDataContractImporter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Serialization.XsdDataContractImporter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that will be used to generate CLR code.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.XsdDataContractImporter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스와 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> CLR 코드를 생성 하는 데 사용 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor to add more code into a &lt;xref:System.CodeDom.CodeCompileUnit&gt; that has already been generated.</source>
          <target state="translated">에 더 많은 코드를 추가 하려면이 생성자를 사용 하 여 한 &lt;xref:System.CodeDom.CodeCompileUnit&gt;이미 생성 된입니다.&lt;/xref:System.CodeDom.CodeCompileUnit&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that will be used to store the code.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 코드를 저장 하는 데 사용 될 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the schemas contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can be transformed into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">스키마에 포함 되는지 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 로 변환할 수는 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schemas to transform.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변환할 스키마를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the schemas can be transformed to data contract types; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>스키마를 데이터 계약 형식으로 변환할 수 있으면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">가져오기와 관련 된 데이터 계약 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the specified set of types contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can be transformed into CLR types generated into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정한 형식 집합에 포함 되는지 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 로 생성 된 CLR 형식으로 변환할 수는 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schemas to transform.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변환할 스키마를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id="ph2">&amp;gt;</ph> of &lt;xref:System.Xml.XmlQualifiedName&gt; that represents the set of schema types to import.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id="ph2">&amp;gt;</ph> 의 &lt;xref:System.Xml.XmlQualifiedName&gt;가져올 스키마 형식 집합을 나타내는입니다.&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the schemas can be transformed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>스키마를 변형할 수 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeNames</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeNames</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">가져오기와 관련 된 데이터 계약 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a specific schema element contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can be imported.</source>
          <target state="translated">특정 스키마 요소에 포함 되는지 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method checks the type and all schema types referenced from it.</source>
          <target state="translated">이 메서드 형식과에서 참조 하는 모든 스키마 형식을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to import.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가져오려는 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A specific <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to check in the set of schemas.</source>
          <target state="translated">특정 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 체크 인할 스키마 집합.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element can be imported; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>요소; 가져올 수 있습니다 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">element</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">element</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">가져오기와 관련 된 데이터 계약 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the schemas contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can be transformed into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">스키마에 포함 되는지 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 로 변환할 수는 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about types that can be imported, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">가져올 수 있는 형식에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 계약 Serializer에서 지 원하는 유형<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schema representations.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 표현을 포함 하는 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IList&gt; of &lt;xref:System.Xml.XmlQualifiedName&gt; that specifies the names of the schema types that need to be imported from the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;의 &lt;xref:System.Xml.XmlQualifiedName&gt;에서 가져와야 할 스키마 형식의 이름을 지정 하는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Xml.XmlQualifiedName&gt; &lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the schemas can be transformed to data contract types; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>스키마를 데이터 계약 형식으로 변환할 수 있으면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeName</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeName</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">가져오기와 관련 된 데이터 계약 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used for storing the CLR types generated.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 생성 된 CLR 형식을 저장 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this property after importing schemas using the &lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt; to access the &lt;xref:System.CodeDom.CodeCompileUnit&gt; in which all the generated code is stored.</source>
          <target state="translated">이 속성을 사용 하 여 스키마를 가져온 후 호출는 &lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;액세스로는 &lt;xref:System.CodeDom.CodeCompileUnit&gt;모든 생성 된 코드를 저장 합니다.&lt;/xref:System.CodeDom.CodeCompileUnit&gt; &lt;/xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to store the CLR types generated.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 생성 된 CLR 형식을 저장 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to the CLR type generated for the schema type with the specified &lt;xref:System.Xml.XmlQualifiedName&gt;.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 &lt;xref:System.Xml.XmlQualifiedName&gt;.&lt;/xref:System.Xml.XmlQualifiedName&gt; 갖는 스키마 형식에 대해 생성 된 CLR 형식</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to look up the reference to a generated CLR type after calling the &lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt; method.</source>
          <target state="translated">이 메서드를 사용 하 여 호출한 후 생성된 된 CLR 형식에 대 한 참조를 조회 하는 &lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;메서드.&lt;/xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeReference&gt; contains the name of the generated type and can be used to look up the corresponding &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; in the &lt;xref:System.CodeDom.CodeCompileUnit&gt;.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeTypeReference&gt;생성 된 형식의 이름을 포함 하 고는 해당 &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;xref:System.CodeDom.CodeCompileUnit&gt;.&lt;/xref:System.CodeDom.CodeCompileUnit&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; 를 조회 하는 데 사용 될&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlQualifiedName&gt; that specifies the schema type to look up.</source>
          <target state="translated">&lt;xref:System.Xml.XmlQualifiedName&gt;조회할 스키마 형식을 지정합니다 하&lt;/xref:System.Xml.XmlQualifiedName&gt; 는</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> reference to the CLR type generated for the schema type with the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> specified.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 갖는 스키마 형식에 대해 생성 된 CLR 형식에 대 한 참조는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept> 지정 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified XML qualified element and schema element.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 XML 정규화 요소 및 스키마 요소입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema element is needed for data about the type that is specified at the element scope.</source>
          <target state="translated">스키마 요소는 요소 범위에서 지정 된 형식에 대 한 데이터에 대 한 필요 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main example of this is the XSD attribute <ph id="ph1">`nillable`</ph>.</source>
          <target state="translated">대표적인 예로 XSD 특성은 <ph id="ph1">`nillable`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>In schema, setting <ph id="ph1">`nillable`</ph> to <ph id="ph2">`true`</ph> is specified on the containing schema element whereas the concept of null is expressed in the CLR type &lt;xref:System.Nullable%601&gt;.</source>
          <target state="translated">스키마에서 설정 <ph id="ph1">`nillable`</ph> 를 <ph id="ph2">`true`</ph> null의 개념은 &lt;xref:System.Nullable%601&gt;.&lt;/xref:System.Nullable%601&gt; CLR 형식으로 표현 됩니다. 반면 포함 하는 스키마 요소에 지정 되어</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</source>
          <target state="translated">이 가져오기 요소-수준 정보를 조회 하 고 그에 따라 정확한 형식 참조를 반환할 수 있도록 요소에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</source>
          <target state="translated">WSDL을 가져올 때 각 매개 변수에 개별적으로 가져오고 매개 변수 요소 따라서 개별적으로 전달 해야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.XmlQualifiedName&gt; that specifies the XML qualified name of the schema type to look up.</source>
          <target state="translated">&lt;xref:System.Xml.XmlQualifiedName&gt;조회할 스키마 형식의 XML 정규화 된 이름을 지정합니다 하&lt;/xref:System.Xml.XmlQualifiedName&gt; 는</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies an element in an XML schema.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 스키마의 요소를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the type that was generated for the specified schema type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 스키마 형식에 대해 생성 된 형식을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns a list of <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that represents the known types generated when generating code for the specified schema type.</source>
          <target state="translated">목록을 반환 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 스키마 형식에 대 한 코드를 생성할 때 생성 된 알려진된 형식을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</source>
          <target state="translated">스키마 형식에 대 한 CLR 형식을 생성 하는 경우 스키마에 있는 모든 파생된 형식에 대 한 알려진된 형식도 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>In many cases, these known types are added using attributes to the generated code.</source>
          <target state="translated">대부분의 경우에서 이러한 알려진된 형식은 생성 된 코드에 특성을 사용 하 여 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, see the &lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt; class.</source>
          <target state="translated">(참조 예를 들어 &lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;클래스&lt;/xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>) However, for the top-level type, there needs to be a way to return the set of known types generated.</source>
          <target state="translated">그러나) 최상위 형식에 대 한 필요를 생성 하는 알려진 형식의 집합을 반환 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the &lt;xref:System.CodeDom.CodeTypeReference&gt; for known types that were generated for a specific schema type.</source>
          <target state="translated">이 메서드는 반환 된 &lt;xref:System.CodeDom.CodeTypeReference&gt;특정 스키마 형식에 대해 생성 된 알려진된 형식에 대 한.&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 계약 알려진 형식을<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.XmlQualifiedName&gt; that represents the schema type to look up known types for.</source>
          <target state="translated">&lt;xref:System.Xml.XmlQualifiedName&gt;알려진된 형식 &gt;for 검색할 스키마 형식을 나타내는합니다&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.IList%601<ph id="ph2">&amp;gt;</ph> of type <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.IList%601<ph id="ph2">&amp;gt;</ph> 형식의 <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Transforms the specified set of XML schemas contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 집합에 포함 된 XML 스키마를 변형 한 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schema representations to generate CLR types for.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> CLR 형식을 생성할 스키마 표현을 포함 하 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Transforms the specified set of schema types contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into CLR types generated into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정한 스키마 형식 집합을 변형 한 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 로 생성 된 CLR 형식에는 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schema representations.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 표현을 포함 하는 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id="ph2">&amp;gt;</ph> (of &lt;xref:System.Xml.XmlQualifiedName&gt;) that represents the set of schema types to import.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Collections.Generic.ICollection%601<ph id="ph2">&amp;gt;</ph> (의 &lt;xref:System.Xml.XmlQualifiedName&gt;) 가져올 스키마 형식 집합을 나타내는입니다.&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Transforms the specified schema element in the set of specified XML schemas into a <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and returns an &lt;xref:System.Xml.XmlQualifiedName&gt; that represents the data contract name for the specified element.</source>
          <target state="translated">에 지정 된 XML 스키마 집합에서 지정한 스키마 요소를 변형 한 <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 반환는 &lt;xref:System.Xml.XmlQualifiedName&gt;지정된 된 요소에 대 한 데이터 계약 이름을 나타내는.&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schemas to transform.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변환할 스키마를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the specific schema element to transform.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 변환할 특정 스키마 요소를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.XmlQualifiedName&gt; that represents the specified element.</source>
          <target state="translated">&lt;xref:System.Xml.XmlQualifiedName&gt;지정된 된 요소를 나타내는입니다.&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">element</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">element</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Transforms the specified XML schema type contained in an <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> into a <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 포함 된 지정 된 XML 스키마 형식을 변형는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the schema representations.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 표현을 포함 하는 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xml.XmlQualifiedName&gt; that represents a specific schema type to import.</source>
          <target state="translated">A &lt;xref:System.Xml.XmlQualifiedName&gt;가져올 특정 스키마 형식을 나타내는.&lt;/xref:System.Xml.XmlQualifiedName&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeName</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeName</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets or sets an <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ImportOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains settable options for the import operation.</source>
          <target state="translated">가져오거나는 <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ImportOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가져오기 작업에 대해 설정할 수 있는 옵션이 포함 된 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Runtime.Serialization.ImportOptions&gt; class to customize how the CLR types are generated during schema import.</source>
          <target state="translated">사용 된 &lt;xref:System.Runtime.Serialization.ImportOptions&gt;스키마 가져오기 중 CLR 형식이 생성 되는 방식을 사용자 지정 하는 클래스입니다.&lt;/xref:System.Runtime.Serialization.ImportOptions&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ImportOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains settable options.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.ImportOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 설정할 수 있는 옵션이 포함 된 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>