<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">097cd7321faac8cfa95104f9921f78e112607e48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ServiceModel.Dispatcher.IDispatchMessageInspector.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">686949b337aa3f2ff1fa35a76110ed0a9825053d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95d22f93135e82422ad1b50c6e2cfd9d255cb044</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</source>
          <target state="translated">Definisce i metodi che consentono di controllare personalizzato o modificare messaggi dell'applicazione in ingresso e in uscita nelle applicazioni di servizio.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement IDispatchMessageInspector to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</source>
          <target state="translated">Implementare IDispatchMessageInspector per controllare o modificare i messaggi in ingresso o in uscita dell'applicazione prima dell'invio di un messaggio di richiesta a un'operazione o prima di restituire un messaggio di risposta al chiamante.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</source>
          <target state="translated">Esistono un numero elevato di scenari che richiedono un'intercettazione dei messaggi prima di richiamare l'operazione per cui è destinato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can log incoming application messages or perform some feature based on a message header.</source>
          <target state="translated">Ad esempio, è possibile registrare i messaggi in ingresso dell'applicazione o eseguire alcune funzionalità in base a un'intestazione di messaggio.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, message inspectors are inserted by a service behavior (&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;), an endpoint behavior (&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;), or a contract behavior (&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;).</source>
          <target state="translated">In genere, i controlli messaggi vengono inseriti da un comportamento del servizio (&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;), un comportamento dell'endpoint (&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;), o un comportamento del contratto (&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;).&lt;/xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt; &lt;/xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt; &lt;/xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior then adds the message inspector to the &lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt; collection.</source>
          <target state="translated">Il comportamento aggiunge quindi il controllo messaggi per il &lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt;insieme.&lt;/xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about extending the runtime using behaviors, see <bpt id="p1">[</bpt>Extending ServiceHost and the Service Model Layer<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'estensione del runtime usando i comportamenti, vedere <bpt id="p1">[</bpt>estensione ServiceHost e il livello del modello di servizio<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt; method enables custom behavior after receiving the message but before dispatching it to the intended operation.</source>
          <target state="translated">-La &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;metodo abilita il comportamento personalizzato dopo aver ricevuto il messaggio ma prima di distribuirlo all'operazione desiderata.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt; method enables custom behavior after the operation returns but before the reply is sent.</source>
          <target state="translated">-La &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;metodo abilita il comportamento personalizzato dopo l'operazione restituisce ma prima che l'invio della risposta.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  IDispatchMessageInspector objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Oggetti IDispatchMessageInspector sono chiamati sempre allo stesso punto durante l'invio dei messaggi indipendentemente dal fatto che un'operazione è unidirezionale o richiesta-risposta.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Called after an inbound message has been received but before the message is dispatched to the intended operation.</source>
          <target state="translated">Chiamato dopo la ricezione di un messaggio in ingresso ma prima che il messaggio viene inviato all'operazione desiderata.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the AfterReceiveRequest method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</source>
          <target state="translated">Utilizzare il metodo AfterReceiveRequest per controllare o modificare il messaggio in arrivo, il canale client che specificato e l'istanza del servizio corrente.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id="ph1">`correlationState`</ph> parameter in the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt; method.</source>
          <target state="translated">Il valore restituito può essere qualsiasi oggetto che si desidera utilizzare per scopi di correlazione. viene restituito come il <ph id="ph1">`correlationState`</ph> parametro il &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;metodo.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  You cannot use the body of the message unless you buffer the entire message and make a copy.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; A meno che non nel buffer l'intero messaggio e creare una copia non è possibile utilizzare il corpo del messaggio.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id="ph1">`request`</ph> parameter.</source>
          <target state="translated">In questo caso, è necessario fare due copie del messaggio: una da controllare e l'altra per sovrascrivere il <ph id="ph1">`request`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The request message.</source>
          <target state="translated">Il messaggio di richiesta.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The incoming channel.</source>
          <target state="translated">Il canale in ingresso.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The current service instance.</source>
          <target state="translated">L'istanza del servizio corrente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object used to correlate state.</source>
          <target state="translated">Oggetto utilizzato per correlare lo stato.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This object is passed back in the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt; method.</source>
          <target state="translated">Questo oggetto viene passato nuovamente il &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt;metodo.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Called after the operation has returned but before the reply message is sent.</source>
          <target state="translated">Chiamata eseguita dopo l'operazione restituisce, ma prima la risposta del messaggio viene inviato.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the BeforeSendReply method to perform custom behavior prior to sending the return message.</source>
          <target state="translated">Utilizzare il metodo BeforeSendReply per eseguire un comportamento personalizzato prima di inviare il messaggio restituito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned from the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt; method that you can use to perform correlation between inbound and outbound calls to support your behavior.</source>
          <target state="translated">Il <ph id="ph1">`correlationState`</ph> è l'oggetto restituito dal &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;metodo che è possibile utilizzare per eseguire la correlazione tra le chiamate in ingresso e in uscita per supportare il comportamento.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The reply message.</source>
          <target state="translated">Il messaggio di risposta.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This value is null if the operation is one way.</source>
          <target state="translated">Questo valore è null se l'operazione è unidirezionale.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The correlation object returned from the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt; method.</source>
          <target state="translated">L'oggetto di correlazione restituito dal &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt;metodo.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>