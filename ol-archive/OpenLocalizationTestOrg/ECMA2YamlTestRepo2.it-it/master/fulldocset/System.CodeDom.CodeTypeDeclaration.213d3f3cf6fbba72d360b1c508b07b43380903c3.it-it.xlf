<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be8b7a32520721d64686d6e64f9970d0f8d4c91e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeDeclaration.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76eb47ca6a10dbc7010a4bcb74f5bd9faddcd05c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d786514f2af33e30490273c0179d256f113228d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">Rappresenta una dichiarazione di tipo per una classe, struttura, interfaccia o enumerazione.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated">CodeTypeDeclaration può essere utilizzato per rappresentare il codice che dichiara una classe, struttura, interfaccia o enumerazione.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to declare a type that is nested within another type.</source>
          <target state="translated">CodeTypeDeclaration può essere utilizzato per dichiarare un tipo annidato in un altro tipo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt; property specifies the base type or base types of the type being declared.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;proprietà specifica il tipo di base o tipi di base del tipo dichiarato.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt; property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;proprietà contiene i membri del tipo che possono includere metodi, campi, proprietà, i commenti e altri tipi.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt; property indicates the &lt;xref:System.Reflection.TypeAttributes&gt; values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;proprietà indica il &lt;xref:System.Reflection.TypeAttributes&gt;i valori per la dichiarazione del tipo, che indicano la categoria del tipo.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, and &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, e &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;indicano se il tipo è una classe, struttura, enumerazione o tipo di interfaccia, rispettivamente.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Alcuni linguaggi di programmazione supportano solo la dichiarazione di tipi di riferimento o classi.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method to test for the appropriate &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags.</source>
          <target state="translated">Per controllare un generatore di codice specifico del linguaggio CodeDOM per il supporto per la dichiarazione di interfacce, enumerazioni o tipi di valore, chiamare il &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;metodo da testare per appropriata &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;flag.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for interfaces, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for enumerations, and &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for value types such as structures.</source>
          <target state="translated">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;indica il supporto per le interfacce, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;indica il supporto per le enumerazioni, e &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;indica il supporto per i tipi di valore, ad esempio strutture.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">È possibile compilare una classe o un'implementazione di struttura in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt; property indicates whether the type declaration is complete or partial.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;proprietà indica se la dichiarazione del tipo è completo o parziale.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;metodo con il flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Inizializza una nuova istanza di <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified name.</source>
          <target state="translated">Inizializza una nuova istanza di <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe con il nome specificato.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The name for the new type.</source>
          <target state="translated">Il nome per il nuovo tipo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the base types of the type.</source>
          <target state="translated">Ottiene i tipi di base del tipo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include &lt;xref:System.Object&gt; as the first item in the BaseTypes collection.</source>
          <target state="translated">Per generare una classe in Visual Basic che non eredita da un tipo di base, ma che implementa una o più interfacce, è necessario includere &lt;xref:System.Object&gt;come primo elemento nella raccolta BaseTypes.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0 you do not need the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Object&gt; if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; In .NET Framework versione 2.0 non è necessario il &lt;xref:System.CodeDom.CodeTypeReference&gt;per &lt;xref:System.Object&gt;Se l'interfaccia si implementa già esiste e si fa riferimento a esso dal tipo.&lt;/xref:System.Object&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are implementing the &lt;xref:System.Collections.ICollection&gt; interface and add it to the collection with this statement, <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">Ad esempio, se si implementa il &lt;xref:System.Collections.ICollection&gt;l'interfaccia e aggiungerlo alla raccolta con questa istruzione, <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, non è necessario che la precede <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> istruzione.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code illustrates the addition of a &lt;xref:System.CodeDom.CodeTypeReference&gt; to the collection that refers to &lt;xref:System.Object&gt;.</source>
          <target state="translated">Il codice seguente viene illustrata l'aggiunta di un &lt;xref:System.CodeDom.CodeTypeReference&gt;insieme che fa riferimento a &lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph>       [C#]      <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph>       The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph> [C#] <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph> il codice precedente produce l'equivalente del codice Visual Basic seguente.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>       However, the Visual Basic code actually generated is the following.</source>
          <target state="translated"><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>Tuttavia, il codice di Visual Basic effettivamente generato è il seguente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the base types of the type.</source>
          <target state="translated">Oggetto <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> che indica i tipi di base del tipo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">Ottiene o imposta un valore che indica se il tipo è un classe o tipo di riferimento.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a class or reference type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il tipo è un tipo di classe o riferimento. in caso contrario, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">Ottiene o imposta un valore che indica se il tipo è un'enumerazione.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an enumeration; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il tipo è un'enumerazione. in caso contrario, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">Ottiene o imposta un valore che indica se il tipo è un'interfaccia.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an interface; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il tipo è un'interfaccia. in caso contrario, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">Ottiene o imposta un valore che indica se la dichiarazione del tipo completo o parziale.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">È possibile creare una classe o struttura di implementazione in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">Le implementazioni in genere vengono fornite nella dichiarazione di un tipo completo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, set the type declaration IsPartial property to <ph id="ph1">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">In questo caso, impostare la proprietà di tipo di dichiarazione IsPartial <ph id="ph1">`false`</ph>, che indica che la dichiarazione del tipo rappresenta tutti i dettagli per l'implementazione della classe o struttura.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">Una dichiarazione di tipo parziale rende più semplice creare le diverse parti di un'implementazione di classe o struttura in moduli diversi dell'applicazione.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">Le dichiarazioni di tipo parziale possono essere archiviate in un file di origine o distribuite tra più file di origine da compilare insieme per formare l'implementazione del tipo combinato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">Linguaggio c# supporta le dichiarazioni di tipo parziale delle classi e le strutture attraverso il <ph id="ph1">`partial`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic supporta le dichiarazioni di tipo parziale delle classi e le strutture con il <ph id="ph1">`Partial`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;metodo con il flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Partial type declarations are supported for classes and structures.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Dichiarazioni di tipi parziali sono supportate per le classi e strutture.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">Se si specifica una dichiarazione di tipo parziale per un'interfaccia o enumerazione, il codice generato produce gli errori del compilatore.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When supplying a class or structure implementation across multiple declarations, set the IsPartial property to <ph id="ph1">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">Quando si fornisce un'implementazione di classe o struttura tra più dichiarazioni, impostare la proprietà IsPartial <ph id="ph1">`true`</ph> per la dichiarazione iniziale e tutte le dichiarazioni supplementari.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">La dichiarazione iniziale deve specificare completamente il tipo di firma, tra cui i modificatori di accesso, i tipi ereditati e le interfacce implementate.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">Le dichiarazioni supplementari non è necessario specificare di nuovo la firma di tipo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">Un errore del compilatore comporta in genere se si ridefinisce la firma di tipo in una dichiarazione supplementare.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 utilizza tipi parziali per separare il codice utente generato dal codice della finestra di progettazione.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">Nei progetti di applicazione Windows di Visual Basic, il codice utente viene inserito in una classe parziale che non è qualificata tramite il <ph id="ph1">`Partial`</ph> (parola chiave); progettazione fornito dal codice viene visualizzato nella classe parziale che dispone di <ph id="ph2">`Partial`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">In c#, il codice utente e codice di progettazione vengono visualizzati in classi parziali identificate dal <ph id="ph1">`partial`</ph> (parola chiave).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the class or structure declaration is a partial representation of the implementation; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se la dichiarazione di classe o struttura è una rappresentazione parziale dell'implementazione. <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> se la dichiarazione è un'implementazione completa della classe o struttura.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il valore predefinito è <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">Ottiene o imposta un valore che indica se il tipo è un tipo di valore (struct).</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il tipo è un tipo di valore. in caso contrario, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">Ottiene la raccolta dei membri della classe per il tipo rappresentato.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the class members.</source>
          <target state="translated">Oggetto <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> che indica i membri della classe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt; collection is accessed for the first time.</source>
          <target state="translated">Si verifica quando il &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;raccolta è accessibile per la prima volta.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt; collection is accessed for the first time.</source>
          <target state="translated">Si verifica quando il &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;raccolta è accessibile per la prima volta.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">Ottiene o imposta gli attributi del tipo.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Reflection.TypeAttributes&gt; property contains the same type of values used by &lt;xref:System.Reflection&gt; when investigating a type at run time.</source>
          <target state="translated">Il &lt;xref:System.Reflection.TypeAttributes&gt;proprietà contiene lo stesso tipo di valori utilizzati da &lt;xref:System.Reflection&gt;durante l'analisi di un tipo in fase di esecuzione.&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">Molti di questi flag non corrispondono per la sintassi di dichiarazione di tipo per alcune lingue.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, only the following flags are significant to &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; : &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, and &lt;xref:System.Reflection.TypeAttributes&gt;.</source>
          <target state="translated">Di conseguenza, solo i flag seguenti sono significativi per &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;: &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;e &lt;xref:System.Reflection.TypeAttributes&gt;.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some of the flags such as &lt;xref:System.Reflection.TypeAttributes&gt; overlap with the meaning of flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property of &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; that is inherited from &lt;xref:System.CodeDom.CodeTypeMember&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Alcuni flag, ad esempio &lt;xref:System.Reflection.TypeAttributes&gt;si sovrappongono al significato dei flag nella &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;proprietà &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;ereditata da &lt;xref:System.CodeDom.CodeTypeMember&gt;.&lt;/xref:System.CodeDom.CodeTypeMember&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; &lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property is a side effect of the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; class inheriting from &lt;xref:System.CodeDom.CodeTypeMember&gt; so that classes can be nested.</source>
          <target state="translated">Il &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;proprietà è un effetto collaterale del &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;classe che eredita da &lt;xref:System.CodeDom.CodeTypeMember&gt;in modo che le classi possono essere annidate.&lt;/xref:System.CodeDom.CodeTypeMember&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The flags in the TypeAttributes property should be used instead of the flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.</source>
          <target state="translated">I flag nella proprietà TypeAttributes devono essere utilizzati invece i flag di &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;proprietà.&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The pattern for setting the visibility flags (flags containing the words <ph id="ph2">`Public`</ph> or <ph id="ph3">`Nested`</ph>) is to mask out all visibility flags using the &lt;xref:System.Reflection.TypeAttributes&gt; and then set the desired visibility flag.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Per impostare i flag di visibilità (flag che contengono le parole <ph id="ph2">`Public`</ph> o <ph id="ph3">`Nested`</ph>) consiste nel nascondere la visibilità di tutti i flag di utilizzo di &lt;xref:System.Reflection.TypeAttributes&gt;e quindi impostare il flag di visibilità desiderato.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the C# code statement to identify the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; (named <ph id="ph1">`cd`</ph>) as an internal class is <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">Ad esempio, il codice istruzione c# per identificare il &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;(denominato <ph id="ph1">`cd`</ph>) come classe interna è <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Il codice per impostare lo stesso valore in Visual Basic è <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the TypeAttributes property directly to a visibility flag (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">Imposta la proprietà TypeAttributes direttamente un flag di visibilità (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) Cancella tutti gli altri flag che possono essere impostati.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.TypeAttributes&gt; object that indicates the attributes of the type.</source>
          <target state="translated">Oggetto &lt;xref:System.Reflection.TypeAttributes&gt;che indica gli attributi del tipo.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">Ottiene i parametri di tipo per la dichiarazione del tipo.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">Una dichiarazione di tipo generico contiene uno o più tipi noti come parametri di tipo non specificati.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">Il nome di un parametro di tipo rappresenta il tipo all'interno del corpo della dichiarazione generica.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the generic declaration for the &lt;xref:System.Collections.Generic.List%601&gt; class contains the type parameter <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Ad esempio, la dichiarazione generica per la &lt;xref:System.Collections.Generic.List%601&gt;classe contiene il parametro di tipo <ph id="ph1">`T`</ph>.&lt;/xref:System.Collections.Generic.List%601&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sui generics, vedere <bpt id="p1">[</bpt>Generics nella libreria di classi .NET Framework<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the type parameters for the type declaration.</source>
          <target state="translated">Oggetto <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> che contiene i parametri di tipo per la dichiarazione del tipo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>