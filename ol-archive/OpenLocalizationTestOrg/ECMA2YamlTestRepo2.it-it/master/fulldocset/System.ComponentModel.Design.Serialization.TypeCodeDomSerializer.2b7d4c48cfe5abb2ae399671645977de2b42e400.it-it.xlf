<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51a0d5ce91f2a5965601d5393328e3271f62cda2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0178b1f2a3c59ca8bd08cf7f0849f6e5924d039</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6316eb7a14139e3850c25c65a9b2cfcf556f0720</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes an object to a new type.</source>
          <target state="translated">Serializza un oggetto in un nuovo tipo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TypeCodeDomSerializer class performs the same tasks as a &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, but serializing an object through this class defines a new type.</source>
          <target state="translated">La classe TypeCodeDomSerializer esegue le stesse attività un &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, ma la serializzazione di un oggetto tramite questa classe definisce un nuovo tipo.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Inizializza una nuova istanza di <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Deserializes the given type declaration.</source>
          <target state="translated">Deserializza la dichiarazione del tipo specificato.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Deserialize method deserializes a previously serialized code type declaration.</source>
          <target state="translated">Il metodo Deserialize deserializza una dichiarazione del tipo di codice precedentemente serializzata.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the tasks default implementation performs.</source>
          <target state="translated">La tabella seguente illustra che l'implementazione predefinita di attività esegue.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Task|Description|   |----------|-----------------|   |Case Sensitivity Checks|The implementation searches for a &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; service to decide if it should treat members as case sensitive or case insensitive.|   |Statement Sorting|All member variables and local variables from init methods are stored in a table.</source>
          <target state="translated">| Attività | Descrizione |   |----------|-----------------|   | Caso di controlli di sensibilità | L'implementazione cerca un servizio &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;per determinare se i membri devono essere considerati con distinzione tra maiuscole e minuscole o maiuscole e minuscole. |   | Ordinamento delle istruzioni | Tutte le variabili membro e le variabili locali di metodi di inizializzazione vengono archiviate in una tabella.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</source>
          <target state="translated">Ogni istruzione in un metodo init viene quindi aggiunto a un insieme di istruzioni raggruppato in base al relativo lato sinistro, in modo da tutte le istruzioni di assegnazione o operano su una determinata variabile sono raggruppate sotto tale variabile.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Variables that have no statements are discarded.|   |Deserialization|The statement collections for each variable are deserialized according to the variable.|       The following table shows the services the Deserialize method requires.</source>
          <target state="translated">Le variabili che non presentano istruzioni vengono eliminate. |   | La deserializzazione | Le raccolte di istruzione per ogni variabile vengono deserializzate in base alla variabile. |       La tabella seguente illustra i servizi che richiesti dal metodo deserializzare.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Service|Description|   |-------------|-----------------|   |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.|   |&lt;xref:System.ComponentModel.IContainer&gt;|If an object does not exist in the name table during deserialization, a query for &lt;xref:System.ComponentModel.IContainer&gt; is made.</source>
          <target state="translated">| Servizio | Descrizione |   |-------------|-----------------|   | &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;| Benché non sia strettamente necessario, il servizio, se disponibile, viene utilizzato per determinare se la serializzazione deve essere tra maiuscole e minuscole o maiuscole e minuscole. |   | &lt;xref:System.ComponentModel.IContainer&gt;| Se un oggetto non esiste nella tabella dei nomi durante la deserializzazione, una query per &lt;xref:System.ComponentModel.IContainer&gt;viene effettuata.&lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this query succeeds, the container is checked for the object.</source>
          <target state="translated">Se la query ha esito positivo, il contenitore viene verificato per l'oggetto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The container is also used as a stand-in for any container argument needed by components.|</source>
          <target state="translated">Il contenitore viene usato anche come un sostituto per qualsiasi argomento contenitore richiesti dai componenti. |</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">Gestore della serializzazione da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type declaration to use for serialization.</source>
          <target state="translated">Dichiarazione del tipo da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The root object.</source>
          <target state="translated">L'oggetto radice.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the method where statements used to serialize a member are stored.</source>
          <target state="translated">Restituisce il metodo in cui sono archiviate istruzioni utilizzate per serializzare un membro.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetInitializeMethod method returns the method to emit all of the initialization code for the given member.</source>
          <target state="translated">Il metodo GetInitializeMethod restituisce il metodo per la creazione di tutto il codice di inizializzazione per il membro specificato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns an empty constructor.</source>
          <target state="translated">L'implementazione predefinita restituisce un costruttore vuoto.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the same method is to be returned for multiple values, the same instance of the method should be returned.</source>
          <target state="translated">Se lo stesso metodo deve essere restituito per più valori, la stessa istanza del metodo deve essere restituita.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt; dictionary to remember methods you have created.</source>
          <target state="translated">È possibile utilizzare il &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;dizionario per memorizzare i metodi che è stato creato.&lt;/xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`typeDecl`</ph> parameter can also be used to add infrastructure methods.</source>
          <target state="translated">Il <ph id="ph1">`typeDecl`</ph> parametro può essere utilizzato anche per aggiungere metodi di infrastruttura.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</source>
          <target state="translated">Ad esempio, se si desidera creare un metodo separato per ogni oggetto, è necessario un unico metodo che chiama a sua volta tutti questi metodi.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be added to the code type declaration as needed.</source>
          <target state="translated">Questo metodo può essere aggiunto alla dichiarazione del tipo di codice in base alle esigenze.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">Gestore della serializzazione da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">La dichiarazione del tipo da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value to use for serialization.</source>
          <target state="translated">Valore da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method used to emit all of the initialization code for the given member.</source>
          <target state="translated">Il metodo utilizzato per la creazione di tutto il codice di inizializzazione per il membro specificato.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an array of methods to be interpreted during deserialization.</source>
          <target state="translated">Restituisce una matrice di metodi da interpretare durante la deserializzazione.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a single-element array with the constructor in it.</source>
          <target state="translated">L'implementazione predefinita restituisce una matrice a elemento singolo con il costruttore in essa contenuti.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">Gestore della serializzazione da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">La dichiarazione del tipo da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array of methods to be interpreted during deserialization.</source>
          <target state="translated">Oggetto <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> matrice di metodi da interpretare durante la deserializzazione.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Serializes the object root by creating a new type declaration that defines root.</source>
          <target state="translated">Serializza la radice dell'oggetto tramite la creazione di una nuova dichiarazione tipo che definisce una radice.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Serialize method serializes the given root object and optional collection of members to create a new type definition.</source>
          <target state="translated">Il metodo Serialize serializza l'oggetto radice specificato e raccolta facoltativa di membri per creare una nuova definizione di tipo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`members`</ph> collection contains values, these values are serialized.</source>
          <target state="translated">Se il <ph id="ph1">`members`</ph> insieme contiene i valori, questi valori vengono serializzati.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values themselves may serialize as either member variables or local variables.</source>
          <target state="translated">Ai valori stessi possono serializzare come variabili membro o variabili locali.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This determination is done by searching for an extender property on the object called <ph id="ph1">`GenerateMember`</ph>.</source>
          <target state="translated">Questa operazione viene effettuata eseguendo una ricerca di una proprietà di estensione per l'oggetto chiamato <ph id="ph1">`GenerateMember`</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, a member is generated.</source>
          <target state="translated">Se <ph id="ph1">`true`</ph>, verrà generato un membro.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, a local variable is generated.</source>
          <target state="translated">In caso contrario, viene generata una variabile locale.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For convenience, the <ph id="ph1">`members`</ph> collection can contain the root object.</source>
          <target state="translated">Per praticità, la <ph id="ph1">`members`</ph> raccolta può contenere l'oggetto radice.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the root object is not also added as a member or local variable.</source>
          <target state="translated">In questo caso, l'oggetto radice non viene inoltre aggiunto come un membro o una variabile locale.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the returned type is taken from the root object’s name, if it was a named object.</source>
          <target state="translated">Il nome del tipo restituito viene ottenuto dal nome dell'oggetto radice, se si trattasse di un oggetto denominato.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, a name is fabricated from the simple type name of the root class.</source>
          <target state="translated">In caso contrario, viene creato un nome dal nome del tipo semplice della classe radice.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the tasks performed by the default implementation of the Serialize method.</source>
          <target state="translated">La tabella seguente illustra le attività eseguite dall'implementazione predefinita del metodo di serializzazione.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Task|Description|   |----------|-----------------|   |Context Seeding|The serialization context is initialized with data including the &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt; and &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   |Member Serialization|Next, Serialize walks all of the members and calls &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.</source>
          <target state="translated">| Attività | Descrizione |   |----------|-----------------|   | Contesto Seeding | Il contesto di serializzazione viene inizializzato con dati, inclusi il &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;e &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   | Serializzazione dei membri | Il metodo Serialize scorre tutti i membri e chiamate &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because serialization is done opportunistically in &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, this ensures that serialization is not done twice.|   |Root Serialization|Next, the root object is serialized and its statements are added to the statement collection.|   |Statement Integration|After all objects are serialized, the Serialize method orders the statements and adds them to a method returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.</source>
          <target state="translated">Poiché la serializzazione viene eseguita in base alle esigenze in &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, questo assicura che non venga eseguita due volte. |   | Radice serializzazione | Successivamente, viene serializzato l'oggetto radice e le relative istruzioni vengono aggiunte all'insieme di istruzioni. |   | Integrazione di istruzione | Dopo che tutti gli oggetti vengono serializzati, al metodo Serialize Ordina le istruzioni e li aggiunge a un metodo restituito da &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt; &lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Finally, a constructor is fabricated that calls all of the methods returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.|      -       The following table shows the objects the Serialize method places on the context stack.</source>
          <target state="translated">Infine, viene creato un costruttore che chiama tutti i metodi restituiti da &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;. |      -La tabella seguente mostra gli oggetti il metodo di serializzazione inserisce nello stack di contesto.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Instance|Description|   |--------------|-----------------|   |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|This serializer.</source>
          <target state="translated">| Istanza | Descrizione |   |--------------|-----------------|   | &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;| Da questo serializzatore.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Deriving classes may find it useful to add public properties to this class.|   |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|The type being created.</source>
          <target state="translated">Derivazione di classi può risultare utile per aggiungere le proprietà pubbliche per questa classe. |   | &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;| Il tipo da creare.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most objects do not need direct access to this.|</source>
          <target state="translated">La maggior parte degli oggetti non richiedono l'accesso diretto a questo. |</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">Gestore della serializzazione da utilizzare per la serializzazione.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">Oggetto da serializzare.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optional collection of members.</source>
          <target state="translated">Raccolta facoltativa di membri.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or empty.</source>
          <target state="translated">Può essere <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> o vuoto.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that defines the root object.</source>
          <target state="translated">Oggetto <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> che definisce l'oggetto radice.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>