<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad45d5350d7ce0512a3ddb042ebe116819840d05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.DependencyProperty.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e25ae22b2d251a31c5b2f3a8b8c9809a6c5c95b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e77660bde0953d13f802b828789b2dd37b1699e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</source>
          <target state="translated">Представляет свойство, которое можно задать с помощью методов таких как, стили, привязки данных, анимации и наследование.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A DependencyProperty supports the following capabilities in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:      -   The property can be set in a style.</source>
          <target state="translated">DependencyProperty поддерживает следующие возможности в <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:-это свойство можно задать в style.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Стилизация и использование шаблонов<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be set through data binding.</source>
          <target state="translated">-Свойства можно задать с помощью привязки данных.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about data binding dependency properties, see <bpt id="p1">[</bpt>How to: Bind the Properties of Two Controls<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о привязке данных свойств зависимостей см. в разделе <bpt id="p1">[</bpt>как: привязки свойства из двух элементов управления<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be set with a dynamic resource reference.</source>
          <target state="translated">-Свойство можно задать со ссылкой на динамический ресурс.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>ресурсов XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can inherit its value automatically from a parent element in the element tree.</source>
          <target state="translated">-Свойство может наследовать его значение автоматически от родительского элемента в дереве элементов.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>наследование значения свойства<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be animated.</source>
          <target state="translated">-Свойства могут быть анимированы.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Обзор анимации<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can report when the previous value of the property has been changed and the property value can be coerced.</source>
          <target state="translated">-Свойство может сообщать, когда предыдущее значение свойства было изменено и можно выполнить приведение значения свойства.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>обратных вызовах свойства зависимости и проверки<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property reports information to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, such as whether changing a property value should require the layout system to recompose the visuals for an element.</source>
          <target state="translated">-Свойство сообщает информацию для <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, такие как ли изменение значения свойства требуется системе макета, чтобы представлять визуализации элемента.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property receives support in the <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>.</source>
          <target state="translated">-Свойство получает поддержку в <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the property can be edited in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
          <target state="translated">Например, можно изменить свойство в <bpt id="p1">**</bpt>свойства<ept id="p1">**</ept> окна.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn more about dependency properties, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о свойствах зависимостей см. в разделе <bpt id="p1">[</bpt>Общие сведения о свойствах зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</source>
          <target state="translated">Если требуется свойства на пользовательских типов для поддержки возможностей в предыдущем списке, следует создать свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn how to create custom dependency properties, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Описание способов создания пользовательских свойств зависимостей, в разделе <bpt id="p1">[</bpt>пользовательских свойств зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a property that enables any object to report information to the type that defines the attached property.</source>
          <target state="translated">Вложенное свойство является свойством, позволяющий любого объекта, для передачи сведений типа, который определяет вложенное свойство.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, any type that inherits from &lt;xref:System.Windows.DependencyObject&gt; can use an attached property regardless of whether the type inherits from the type that defines the property.</source>
          <target state="translated">В <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, любой тип, наследующий от &lt;xref:System.Windows.DependencyObject&gt;можно использовать вложенное свойство независимо от того, является ли тип наследует от типа, определяющего свойство.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> language.</source>
          <target state="translated">Вложенное свойство — это функция <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> языка.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set an attached property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, use the <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> syntax.</source>
          <target state="translated">Чтобы задать присоединенное свойство в <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, используйте <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt> propertyName<ept id="p2">*</ept> синтаксиса.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of an attached property is the &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">Является примером вложенное свойство &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;свойство.&lt;/xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to create a property that can be used on all &lt;xref:System.Windows.DependencyObject&gt; types, then you should create an attached property.</source>
          <target state="translated">Если вы хотите создать свойство, которое может использоваться для всех &lt;xref:System.Windows.DependencyObject&gt;типов, следует создать вложенное свойство.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn more about attached properties, including how to create them, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о вложенных свойств, включая создание, в разделе <bpt id="p1">[</bpt>зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`dependencyPropertyName`</ph>    A string that specifies the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt; of the desired dependency property.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## Использование атрибута XAML <ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## значений XAML <ph id="ph2">`dependencyPropertyName`</ph> строка, указывающая &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;Свойства требуемой зависимостей.&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;      </target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.)       <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></source>
          <target state="translated">Это может предшествовать префикс пространства имен XML, если свойство не существует в пространстве имен XML по умолчанию (Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>пространства имен XAML и сопоставление пространства имен WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.)       <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string that specifies an owner type of a dependency property, a dot (.), then the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">Строка, указывающая тип владельца свойства зависимостей, точки (.), а затем &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ownerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`ownerType`</ph>Можно также предшествовать префикс пространства имен XML.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the <ph id="ph1">`TargetType`</ph> is not yet known.</source>
          <target state="translated">Для позднего связывания стили и шаблоны, где необходимо указать владельца свойства зависимостей для синтаксического анализа контекста, так как такое использование <ph id="ph1">`TargetType`</ph> еще не известна.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>Стилизация и использование шаблонов<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyName`</ph>    A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyName`</ph>Строка, задающая владельца вложенного свойства, точка (.), а затем имя вложенного свойства.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph>Можно также предшествовать префикс пространства имен XML.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered.</source>
          <target state="translated">Добавляет другой тип в качестве владельца свойства зависимостей, который уже был зарегистрирован.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">Этот метод позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это конкретное свойство зависимостей в системе свойств.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, AddOwner is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</source>
          <target state="translated">Как правило, AddOwner используется для добавления свойств зависимостей к классам, которые еще не предоставляют это свойство зависимостей через наследование управляемого класса (наследование класса вызовет свойства программы-оболочки, чтобы он наследуется производным классом и таким образом обеспечится доступ общей таблицы элементов к свойству зависимостей уже).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>AddOwner enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</source>
          <target state="translated">AddOwner позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это свойство зависимостей в системе свойств.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature does not allow for specifying metadata.</source>
          <target state="translated">Эта подпись не позволяет указывать метаданные.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this method, the metadata is automatically generated for the new &lt;xref:System.Windows.DependencyProperty&gt; and its owner type.</source>
          <target state="translated">При использовании этого метода метаданные автоматически создается для нового &lt;xref:System.Windows.DependencyProperty&gt;и ее типа владельца.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</source>
          <target state="translated">Метаданные автоматически созданный является результатом объединения метаданных из всех базовых типов, для которых определено это свойство.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no merged metadata is available, then the default metadata for the property is used.</source>
          <target state="translated">Если нет объединенных метаданных нет, то используется метаданных по умолчанию для свойства.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is registered by using the &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; method, then the default metadata is the same as the metadata that is created when &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; was called.</source>
          <target state="translated">Если оно регистрируется с помощью &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;метод, то метаданные по умолчанию является таким же, как метаданные, создаваемой при &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;был вызван.&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the &lt;xref:System.Windows.PropertyMetadata&gt; object is created with the &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; property set to the property type's default and all other properties of the &lt;xref:System.Windows.PropertyMetadata&gt; is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">В противном случае &lt;xref:System.Windows.PropertyMetadata&gt;создан объект с &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;Свойства, значение по умолчанию тип свойства, а все остальные свойства &lt;xref:System.Windows.PropertyMetadata&gt;равно <ph id="ph1">`null`</ph>.&lt;/xref:System.Windows.PropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; signature if you want to provide metadata for the version of the dependency property as added to the provided type.</source>
          <target state="translated">Используйте &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;подпись, чтобы предоставлять метаданные для версии свойства зависимостей, по мере добавления к предоставленному типу.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</source>
          <target state="translated">Возвращаемое значение этого метода обычно используется для объявления и предоставления свойства зависимостей, сохраняя идентификатор свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identifier provides access to the dependency property if you want to call property system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> against the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">Идентификатор предоставляет доступ к свойству зависимостей, если вы хотите вызвать системы свойств <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> к свойству зависимостей, особенно, когда существует на добавляемом классе владельца.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">Одно и то же имя свойства для первоначального владельца и добавленного владельцев следует использовать, чтобы указать на схожую функциональность.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the &lt;xref:System.Windows.DependencyProperty&gt; return value of the AddOwner method to define the dependency property identifier, and also to declare <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner.</source>
          <target state="translated">Следует использовать &lt;xref:System.Windows.DependencyProperty&gt;возвращаемое значение метода AddOwner для определения идентификатора свойства зависимости, а также для объявления <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> оболочки свойства для свойства зависимостей, которые добавляются типов с помощью AddOwner.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AddOwner methodology recommended above is used when creating the dependency properties that are declared within <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">Рекомендуется выше методологии AddOwner используется при создании свойств зависимостей, которые объявлены в <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">Например, оба &lt;xref:System.Windows.Controls.Border&gt;и &lt;xref:System.Windows.Controls.Control&gt;определяют <ph id="ph1">`BorderBrush`</ph> свойства зависимостей, имеющих аналогичные функциональные возможности.&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Border&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling AddOwner based on the original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;определяет его <ph id="ph1">`BorderBrush`</ph> свойства в системе свойств путем вызова AddOwner зависимости от первоначального владельца &lt;xref:System.Windows.Controls.Border&gt;и его зарегистрированные &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;идентификатор свойства зависимостей.&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt; &lt;/xref:System.Windows.Controls.Border&gt;&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AddOwner return value is then used to establish a new static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">AddOwner возвращают значение затем используется для установления новый статический &lt;xref:System.Windows.DependencyProperty&gt;поля (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) для этого свойства для добавленного владельцев и <ph id="ph1">`BorderBrush`</ph> также объявляется свойство программы-оболочки.&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type to add as an owner of this dependency property.</source>
          <target state="translated">Тип для добавления в качестве владельца данного свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">Ссылка на исходный <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> идентификатор, который идентифицирует свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">Этот идентификатор должен быть открыт путем добавления класса в качестве <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> поля.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</source>
          <target state="translated">Добавляет другой тип в качестве владельца свойства зависимостей, который уже был зарегистрирован, предоставляя метаданные свойства зависимости для свойства зависимостей, как оно будет существовать в предоставленном типе владельца.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">Этот метод позволяет распознавать свойства зависимостей для типа, который изначально не зарегистрировала это конкретное свойство зависимостей в системе свойств.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">Возвращаемое значение этого метода используется для объявления и предоставления свойству зависимостей, особенно в том случае, как оно существует в добавляемом классе владельца.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">Как правило то же имя свойства для первоначального владельца и добавленного владельцев следует использовать для указания на схожую функциональность.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is good practice to expose the identifiers, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.</source>
          <target state="translated">Рекомендуется предоставлять идентификаторы, а также новые <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> оболочки свойства для свойства зависимостей, которые добавляются с помощью &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; типы</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; methodology recommended above is used when creating <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> declared within <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;Методологии рекомендуется выше используется при создании <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> объявленная внутри <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">Например, оба &lt;xref:System.Windows.Controls.Border&gt;и &lt;xref:System.Windows.Controls.Control&gt;определяют <ph id="ph1">`BorderBrush`</ph> свойства зависимостей, имеющих аналогичные функциональные возможности.&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Border&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; on original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;определяет его <ph id="ph1">`BorderBrush`</ph> свойства в системе свойств путем вызова &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;на исходный владелец &lt;xref:System.Windows.Controls.Border&gt;и его зарегистрированные &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;идентификатор свойства зависимостей.&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt; &lt;/xref:System.Windows.Controls.Border&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; return value is then used to establish a static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;)for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;Возвращают значение затем используется для установления статический &lt;xref:System.Windows.DependencyProperty&gt;поля (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) для этого свойства для добавленного владельцев и <ph id="ph1">`BorderBrush`</ph> также объявляется свойство программы-оболочки.&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The added owner's dependency property identifier should be used for operations such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;.</source>
          <target state="translated">Идентификатор для свойства зависимостей добавленного владельцев следует использовать для операций, например &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;.&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.</source>
          <target state="translated">Однако конкретного типа операций, включающих типов или экземпляров класса, который был добавлен как владелец с различные метаданные будут по-прежнему возвращать даже если ожидаемые результаты исходного (не добавлены владельца) указан идентификатор свойства зависимостей в вызовах методов, например &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;или &lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.GetMetadata%2A&gt; &lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The metadata for the added owner is perpetuated by the AddOwner call itself, not necessarily referenced exclusively by the adding owner class identifier field.</source>
          <target state="translated">Метаданные для добавленного владельцев сохраняются по AddOwner вызывает самого ссылается не обязательно исключительно поле идентификатора класса Добавление владельца.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nevertheless, it is good practice to expose the  identifier, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner, because failing to do so creates disparity between the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> representations of your properties.</source>
          <target state="translated">Тем не менее, рекомендуется для предоставления идентификатора, а также новые <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> оболочки свойства для свойства зависимостей, которые добавляются типов с помощью AddOwner, поскольку Несоблюдение этого создает различие между <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> и <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> представления свойств.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist.</source>
          <target state="translated">Характеристики, которые были указаны в исходных базовых метаданных, сохранятся.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">Только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics, such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, are replaced if they are specified in the new metadata.</source>
          <target state="translated">Некоторые характеристики, такие как &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, заменяются в случае, если они указаны в новых метаданных.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">Другие, такие как &lt;xref:System.Windows.PropertyChangedCallback&gt;, объединяются.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">В конечном счете, поведение при объединении зависит от типа метаданных свойства используется для переопределения, поэтому для существующих классов метаданных свойств, используемых поведения, описанного здесь <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> свойств зависимостей.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>метаданные свойства зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> и <bpt id="p2">[</bpt>метаданных свойств среды<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The type to add as owner of this dependency property.</source>
          <target state="translated">Тип для добавления в качестве владельца данного свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The metadata that qualifies the dependency property as it exists on the provided type.</source>
          <target state="translated">Метаданные, квалифицирующие свойство зависимостей, которое существовало в указанном типе.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">Ссылка на исходный <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> идентификатор, который идентифицирует свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">Этот идентификатор должен быть открыт путем добавления класса в качестве <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> поля.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets the default metadata of the dependency property.</source>
          <target state="translated">Возвращает метаданные свойства зависимостей по умолчанию.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; call.</source>
          <target state="translated">По умолчанию метаданные, метаданные свойства, доступные для конкретного объекта или объекта производного типа, где альтернативные метаданные не был предоставлен явный &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;или &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;вызовите.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the original owner applied metadata to the first &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call that established the dependency property, then that metadata is returned as DefaultMetadata.</source>
          <target state="translated">Если владелец исходного метаданных применяется к первому &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;вызов, установить свойству зависимостей, а затем эти метаданные возвращаются в виде DefaultMetadata.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no metadata was applied in the original &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, then default metadata is generated from within the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call and this value is returned as the DefaultMetadata.</source>
          <target state="translated">Если метаданные не было применено в исходной коллекции &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;вызвать, формируется с помощью метаданных по умолчанию &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;вызова и это значение возвращается в виде DefaultMetadata.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main purpose of having default metadata associated with a &lt;xref:System.Windows.DependencyProperty&gt; is to supply a default value for this property on any &lt;xref:System.Windows.DependencyObject&gt; or a derived type.</source>
          <target state="translated">Основным назначением которых по умолчанию метаданные, связанные с &lt;xref:System.Windows.DependencyProperty&gt;— предоставить значение по умолчанию для этого свойства для какого-либо &lt;xref:System.Windows.DependencyObject&gt;или производный тип.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For nonattached properties, the metadata type returned by this property cannot be cast to derived types of &lt;xref:System.Windows.PropertyMetadata&gt; type, even if the property was originally registered with a derived metadata type.</source>
          <target state="translated">Для невложенных свойств тип метаданных, возвращенный этим свойством нельзя привести к производные типы &lt;xref:System.Windows.PropertyMetadata&gt;тип, даже если свойство было изначально зарегистрировано с производным типом метаданных.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want the originally registered metadata including its original possibly derived metadata type, call &lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt; instead, passing the original registering type as a parameter.</source>
          <target state="translated">Изначально зарегистрированных метаданных, включая его исходным типом возможно производные метаданные вызвать &lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;вместо этого, передача исходной регистрации типу как параметр.&lt;/xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For attached properties, the type of the metadata returned by this property will match the type given in the original &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; registration method.</source>
          <target state="translated">Для вложенных свойств тип метаданных, возвращенный этим свойством будет соответствовать типу, заданному в исходной &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;метод регистрации.&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default metadata of the dependency property.</source>
          <target state="translated">По умолчанию метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Возвращает хэш-код для данного <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system uses its own unique identifier &lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;, and the value of that property is returned by GetHashCode.</source>
          <target state="translated">В системе свойств использует свой собственный уникальный идентификатор &lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;, и значение этого свойства, возвращенный GetHashCode.&lt;/xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Хэш-код для данного <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified existing type.</source>
          <target state="translated">Возвращает метаданные для этого свойства зависимостей, которое существует в указанном существующем типе.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that alter the metadata of the dependency property as it exists on a type.</source>
          <target state="translated">Указание типа или ссылкой на объект для использования в качестве типа является обязательным, поскольку метаданные могут отличаться от исходной регистрации ввиду &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;или &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;вызовы, изменять метаданные свойства зависимостей, как оно существует в типе.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The specific type from which to retrieve the dependency property metadata.</source>
          <target state="translated">Конкретный тип, из которого требуется извлечь метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">Объект метаданных свойств.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on the specified object instance.</source>
          <target state="translated">Возвращает метаданные для этого свойства зависимостей, которое существует в указанном экземпляре объекта.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">Указание типа или ссылкой на объект является необходимым, поскольку метаданные любое заданное свойство зависимостей может изменяться от исходной регистрации ввиду &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;или &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;вызовы, которые можно уточнить метаданные свойства, как оно существует в типе.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</source>
          <target state="translated">При запросе метаданных свойства на основе экземпляра это просто передачи экземпляра, его тип может вычисляться внутренним образом.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</source>
          <target state="translated">Метаданные свойства зависимостей не зависит от конкретного экземпляра. всегда является согласованным для любой комбинации типа и свойства.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</source>
          <target state="translated">Объект зависимости, проверяемый на наличие типа, чтобы определить, какие версии конкретного типа свойства зависимостей необходимо получать метаданные из.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">Объект метаданных свойств.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified type.</source>
          <target state="translated">Возвращает метаданные для этого свойства зависимостей, которое существовало в указанном типе.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">Указание типа или ссылкой на объект является необходимым, поскольку метаданные любое заданное свойство зависимостей может изменяться от исходной регистрации ввиду &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;или &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;вызовы, которые можно уточнить метаданные свойства, как оно существует в типе.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A specific object that records the dependency object type from which the dependency property metadata is desired.</source>
          <target state="translated">Конкретный объект, тип объекта зависимостей, из которого запрашиваются метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">Объект метаданных свойств.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets an internally generated value that uniquely identifies the dependency property.</source>
          <target state="translated">Возвращает внутри созданного значения, которое однозначно идентифицирует свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is an integer, not a <ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">Это значение не является целым числом, <ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</source>
          <target state="translated">Как правило это значение индекса не требуется и нет индекса доступа к таблицам всех свойств зависимостей.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency properties should instead be referenced by their identifier fields.</source>
          <target state="translated">Свойства зависимостей вместо этого следует ссылаться их идентификатор поля.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>GlobalIndex is used internally for faster access to data structures that use the GlobalIndex as a zero-based array index.</source>
          <target state="translated">GlobalIndex используется внутренне для более быстрого доступа к структурам данных, использующих GlobalIndex как массив, начинающийся с нуля индекс.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>A similar usage might have applications for designers or tools.</source>
          <target state="translated">Подобное использование может применяться для конструкторов или инструментов.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A unique numeric identifier.</source>
          <target state="translated">Уникальный числовой идентификатор.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</source>
          <target state="translated">Определяет, является ли указанное значение допустимым для типа этого свойства зависимостей, проверяются согласно типу свойства, указанного в исходной регистрации свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">`null`</ph> is a valid type for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph2">`true`</ph> for these cases.</source>
          <target state="translated">Значение <ph id="ph1">`null`</ph> является допустимым типом для свойств зависимостей ссылочного типа или &lt;xref:System.Nullable%601&gt;свойства зависимостей и будет возвращать <ph id="ph2">`true`</ph> для таких случаев.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, IsValidType will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">В случаях, когда свойство зависимостей ни ссылку и не является &lt;xref:System.Nullable%601&gt;типа, вернет IsValidType <ph id="ph1">`false`</ph> значение null, а не создавать исключение.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">Проверяемое значение.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified value is the registered property type or an acceptable derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Если указанное значение является типом зарегистрированного свойства или приемлемому производному типу; в противном случае <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</source>
          <target state="translated">Определяет, принимается ли указанное значение для типа свойства с помощью базовой проверки типа и, возможно также, если он находится в пределах диапазона допустимых значений для данного типа.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a dependency property, an allowed range of values for that type can be specified through a &lt;xref:System.Windows.ValidateValueCallback&gt; that is provided in the dependency property registration.</source>
          <target state="translated">Для свойства зависимостей, можно указать разрешенный диапазон значений для этого типа с помощью &lt;xref:System.Windows.ValidateValueCallback&gt;, предоставляется при регистрации свойства зависимостей.&lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; internally.</source>
          <target state="translated">Этот метод вызывает метод &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;внутренне.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dependency property in question has no &lt;xref:System.Windows.ValidateValueCallback&gt;,then calling this method is effectively equivalent to calling &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;.</source>
          <target state="translated">Если свойство зависимостей в вопросе нет &lt;xref:System.Windows.ValidateValueCallback&gt;вызов этого метода эквивалентен фактически вызов &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; &lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dependency property does have a &lt;xref:System.Windows.ValidateValueCallback&gt;, and if &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; would have returned <ph id="ph1">`true`</ph>, then the value returned will be as implemented in the callback.</source>
          <target state="translated">Если свойство зависимости имеет &lt;xref:System.Windows.ValidateValueCallback&gt;и если &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;возвращала бы <ph id="ph1">`true`</ph>, то возвращаемое значение будет иметь реализации обратного вызова.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; &lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null value is a valid value for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph1">`true`</ph> for these cases.</source>
          <target state="translated">Значение null является допустимым значением для свойства зависимостей типа ссылки или &lt;xref:System.Nullable%601&gt;свойства зависимостей и будет возвращать <ph id="ph1">`true`</ph> для таких случаев.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">В случаях, когда свойство зависимостей ни ссылку и не является &lt;xref:System.Nullable%601&gt;типа, &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;вернет <ph id="ph1">`false`</ph> значение null, а не создавать исключение.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; &lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">Проверяемое значение.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value is acceptable and is of the correct type or a derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Если значение является допустимым и имеет неправильный тип или производному типу; в противном случае <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets the name of the dependency property.</source>
          <target state="translated">Возвращает имя свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property gets the name provided as the <ph id="ph1">`name`</ph> parameter during dependency property registration.</source>
          <target state="translated">Это свойство получает имя, указанное как <ph id="ph1">`name`</ph> параметр во время регистрации свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name is immutable, and cannot be <ph id="ph1">`null`</ph> or an empty string.</source>
          <target state="translated">Это имя является постоянным и не может быть <ph id="ph1">`null`</ph> или является пустой строкой.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</source>
          <target state="translated">Повторяющееся имя регистрации на том же типе владельца не разрешены и возникает исключение при попытке зарегистрировать дубликат.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The Name of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</source>
          <target state="translated">Настроек <ph id="ph1">[!IMPORTANT]</ph> настроек имя свойства зависимостей, должны соответствовать соглашению совпадающих имя его идентификатор для свойства зависимостей минус суффикс «Свойство».</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>свойств зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The name of the property.</source>
          <target state="translated">Имя свойства.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</source>
          <target state="translated">Задает альтернативные метаданные для этого свойства зависимостей, когда оно присутствует в экземплярах указанного типа, переопределяя метаданные, которые существовали для свойства зависимостей, как оно было унаследовано от базовых типов.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">В системе свойств использует свойства зависимостей, следует переопределить метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This equates to the time that specific instances are created using the class that registers the dependency property.</source>
          <target state="translated">Это соответствует времени, определенные экземпляры создаются с помощью класса, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">Вызовы OverrideMetadata следует выполнять только в статическом конструкторе типа, предоставляющего себя в качестве <ph id="ph1">`forType`</ph> параметр этого метода, или с помощью аналогичные при создании экземпляра.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">Попытка изменить метаданные после экземпляров типа-владельца не возникнет исключения, но приведет к несогласованному поведению в системе свойств.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">После установки с помощью этого метода метаданные для определенного производного класса переопределения последующие попытки переопределения метаданных на этом же производном классе вызывает исключение.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">Характеристики, которые были указаны в исходных базовых метаданных будет сохранено; только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">Некоторые характеристики, такие как &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;заменяются, если он указан в новые метаданные.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">Другие, такие как &lt;xref:System.Windows.PropertyChangedCallback&gt;, объединяются.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">В конечном счете, поведение при объединении зависит от типа метаданных свойства используется для переопределения, поэтому для существующих классов метаданных свойств, используемых поведения, описанного здесь <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> свойств зависимостей.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>метаданные свойства зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> и <bpt id="p2">[</bpt>метаданных свойств среды<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">Тип, где это свойство зависимостей наследуется и где будут применены указанные альтернативные метаданные.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">Метаданные для применения к свойству зависимостей в переопределяемом типе.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</source>
          <target state="translated">Была предпринята попытка переопределения метаданных для свойства зависимостей только для чтения (операция не может быть выполнена с помощью данной сигнатуры).</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Metadata was already established for the dependency property as it exists on the provided type.</source>
          <target state="translated">Метаданные уже были установлены для свойства зависимостей, которое существовало в указанном типе.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</source>
          <target state="translated">Предоставляет альтернативные метаданные для свойства зависимостей только для чтения, когда оно присутствует в экземплярах указанного типа, переопределяя метаданные, указанные при первоначальной регистрации свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You must pass the <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the read-only dependency property to avoid raising an exception.</source>
          <target state="translated">Необходимо передать <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> для свойства зависимостей только для чтения избежать возникновения исключения.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature provides underlying implementation for a read-only dependency property identifier (&lt;xref:System.Windows.DependencyPropertyKey&gt;) method.</source>
          <target state="translated">Эта подпись предоставляет базовую реализацию для идентификатора свойства зависимости только для чтения (&lt;xref:System.Windows.DependencyPropertyKey&gt;) метод.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If overriding metadata for a read-write dependency property, use &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">Для переопределения метаданных для свойства зависимостей для чтения и записи, используйте &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">В системе свойств использует свойства зависимостей, следует переопределить метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This equates to the time that specific objects are created for the class that registers the dependency property.</source>
          <target state="translated">Это равно времени создания конкретных объектов для класса, который регистрирует свойство зависимости.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">Вызовы &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;следует выполнять только в статическом конструкторе типа, предоставляющего себя в качестве <ph id="ph1">`forType`</ph> параметр этого метода, или с помощью аналогичные при создании экземпляра.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">Попытка изменить метаданные после экземпляров типа-владельца не возникнет исключения, но приведет к несогласованному поведению в системе свойств.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">После установки с помощью этого метода метаданные для определенного производного класса переопределения последующие попытки переопределения метаданных на этом же производном классе вызывает исключение.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">Предоставленных метаданных объединяется с метаданными для свойства зависимостей, которое существует в базовом владельце.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">Характеристики, которые были указаны в исходных базовых метаданных будет сохранено; только характеристики, специально измененные в новых метаданных, переопределят характеристики базовых метаданных.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">Некоторые характеристики, такие как &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;заменяются, если он указан в новые метаданные.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">Другие, такие как &lt;xref:System.Windows.PropertyChangedCallback&gt;, объединяются.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The merge behavior depends on the property metadata type being used for the override.</source>
          <target state="translated">Поведение при объединении зависит от используемого для переопределения типа метаданных свойства.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>метаданные свойства зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> и <bpt id="p2">[</bpt>метаданных свойств среды<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">Тип, где это свойство зависимостей наследуется и где будут применены указанные альтернативные метаданные.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">Метаданные для применения к свойству зависимостей в переопределяемом типе.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The access key for a read-only dependency property.</source>
          <target state="translated">Ключ доступа для свойства зависимостей только для чтения.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</source>
          <target state="translated">Возвращает тип объекта, зарегистрировавшего свойство зависимостей в системе свойств или добавившего себя в качестве владельца свойства.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value was provided during property registration.</source>
          <target state="translated">Данное значение было указано во время регистрации свойства.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owner will be either the original registering type in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from a &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, or the type that added itself as owner in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from an &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; call.</source>
          <target state="translated">Владельцем будет либо исходного регистрации типа в случае использования &lt;xref:System.Windows.DependencyProperty&gt;идентификатор, созданный из &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;вызова или тип, добавившего себя в качестве владельца, в случае использования &lt;xref:System.Windows.DependencyProperty&gt;идентификатор, созданный из &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;вызовите.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OwnerType on any given &lt;xref:System.Windows.DependencyProperty&gt; is immutable, and cannot be <ph id="ph1">`null`</ph> in a valid &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">OwnerType с заданным &lt;xref:System.Windows.DependencyProperty&gt;является постоянным и не может быть <ph id="ph1">`null`</ph> в допустимый &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The type of the object that registered the property or added itself as owner of the property.</source>
          <target state="translated">Тип объекта, зарегистрировавшего свойство или добавившего себя в качестве владельца свойства.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the type that the dependency property uses for its value.</source>
          <target state="translated">Возвращает тип, который использует свойства зависимостей для его значения.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property reports the type of the property's value as declared by the original property registration, through the <ph id="ph1">`propertyType`</ph> parameter.</source>
          <target state="translated">Это свойство сообщает тип значения свойства, объявленные в исходной регистрации свойства через <ph id="ph1">`propertyType`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar to the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;, the property type of a dependency property is immutable after registration.</source>
          <target state="translated">Аналогично &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;, тип свойства для свойства зависимостей нельзя изменить после регистрации.&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the property value.</source>
          <target state="translated">&lt;xref:System.Type&gt;Значения свойства.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the dependency property identified by this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance is a read-only dependency property.</source>
          <target state="translated">Возвращает значение, указывающее, является ли свойство зависимостей, соответствующая <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> экземпляр — это свойство зависимостей только для чтения.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are registered within the property system by calling the &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; method as opposed to the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; method.</source>
          <target state="translated">Свойства зависимости только для чтения зарегистрированного в системе свойств путем вызова метода &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;метода, в отличие от &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;метод.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attached properties can also be registered as read-only; see &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.</source>
          <target state="translated">Вложенные свойства также можно зарегистрировать только для чтения; в разделе &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties require a &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier rather than a &lt;xref:System.Windows.DependencyProperty&gt; identifier to perform metadata operations such as overriding the metadata or setting the value.</source>
          <target state="translated">Свойства зависимости только для чтения требуют &lt;xref:System.Windows.DependencyPropertyKey&gt;идентификатор, а не &lt;xref:System.Windows.DependencyProperty&gt;идентификатор для выполнения операций с метаданными, например переопределения метаданных или установка значения.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you obtained a collection of &lt;xref:System.Windows.DependencyProperty&gt; identifiers through a call to &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; or another <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> that exposes identifiers, check the ReadOnly value before attempting to call &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</source>
          <target state="translated">Если вы приобрели коллекцию &lt;xref:System.Windows.DependencyProperty&gt;идентификаторы посредством вызова &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;или другой <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> , предоставляющий идентификаторов, проверьте значение только для чтения, прежде чем пытаться вызвать &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;или &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;используют идентификатор для свойства зависимостей в качестве входного параметра, убедитесь, что свойством зависимостей, которое представляет идентификатор не только для чтения.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyObject.SetValue%2A&gt; &lt;/xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of ReadOnly is <ph id="ph1">`true`</ph> on a dependency property, there is no programmatic way to obtain a reference to the &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier of that dependency property, from the metadata or from the &lt;xref:System.Windows.DependencyProperty&gt; identifier; the identifier must be available as a static field in order to call &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; against a read-only dependency property.</source>
          <target state="translated">Если имеет значение только для чтения <ph id="ph1">`true`</ph> для свойства зависимостей, нет возможности для получения ссылки на программный &lt;xref:System.Windows.DependencyPropertyKey&gt;идентификатора этого свойства зависимостей, из метаданных или &lt;xref:System.Windows.DependencyProperty&gt;идентификатор; идентификатор должен быть доступен как статическое поле для вызова &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;для свойства зависимостей только для чтения.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> wrapper property.</source>
          <target state="translated">При создании пользовательского свойства зависимостей и зарегистрируйте его только для чтения, следует определить только метод доступа get для <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> свойство программы-оболочки.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</source>
          <target state="translated">В противном случае ваш класс будет иметь несогласованную объектную модель для обертки свойства, по сравнению с доступом к базовому свойству зависимостей.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Read-Only Dependency Properties<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>свойств зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> или <bpt id="p2">[</bpt>свойства зависимости только для чтения<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property is read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Если свойство зависимостей только для чтения. в противном случае <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, and owner type.</source>
          <target state="translated">Регистрирует свойство зависимостей с указанным именем, типом свойства и типа владельца.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The name must be unique within the registration namespace of the owner type.</source>
          <target state="translated">Имя должно быть уникальным в пределах пространства имен регистрации для типа владельца.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">Регистрирует свойство зависимостей с указанное имя свойства, тип свойства, типом владельца и метаданными свойства.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</source>
          <target state="translated">Регистрирует свойство зависимостей с указанное имя свойства, типом свойства, типом владельца, метаданными свойства и обратным вызовом проверки значения для свойства.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">Ссылка на обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, and owner type.</source>
          <target state="translated">Регистрирует присоединенное свойство с указанным именем, типом свойства и типа владельца.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a property concept defined by <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Вложенное свойство является свойством понятием <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> implements attached properties as dependency properties.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>реализует вложенные свойства как свойства зависимости.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</source>
          <target state="translated">Поскольку <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> вложенные свойства являются свойствами зависимости, они могут быть применены метаданные, который может использоваться для операции, такие как сообщение о характеристиках структуры системой общих свойств.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>зависимостей<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">Регистрирует присоединенное свойство с указанное имя свойства, тип свойства, типом владельца и метаданными свойства.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">Это может включать значение по умолчанию, а также другие характеристики.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</source>
          <target state="translated">Регистрирует присоединенное свойство с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом проверки значения свойства.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">Это может включать значение по умолчанию, а также другие характеристики.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">Ссылка на обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">Идентификатор для свойства зависимостей, который должен использоваться для задания значения <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> в классе.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">Затем этот идентификатор используется для ссылки на свойство зависимостей, для операций, таких как Программная установка значения или получение метаданных.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">Регистрирует доступное только для чтения присоединенное свойство с указанным типом свойства, типом владельца и метаданными свойства.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">Ключ свойства зависимостей, который должен использоваться для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">Регистрирует доступное только для чтения присоединенное свойство с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом для проверки.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">Ссылка на созданные пользователем обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">Ключ свойства зависимостей, который должен использоваться для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">Регистрирует свойство зависимости только для чтения, с указанным типом свойства, типом владельца и метаданными свойства.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Этот метод возвращает тип &lt;xref:System.Windows.DependencyPropertyKey&gt;, а &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;возвращает тип &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">Как правило ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого &lt;xref:System.Windows.DependencyPropertyKey&gt;для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;как <ph id="ph1">`public static readonly`</ph> на ваш класс.&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are a fairly typical scenario both in the existing <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> and for customization scenarios, because other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> features might require a dependency property even if that property is not intended to be settable by callers.</source>
          <target state="translated">Свойства зависимости только для чтения, это весьма распространенный сценарий как в существующем <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> и сценарии настройки, так как другие <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> функциям может требоваться свойство зависимостей, даже если этого не планируется сделать доступным для установки вызывающими объектами.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">Значение свойства зависимости только для чтения можно использовать как основу для других операций системы свойств, принимающих свойство зависимостей, например основан &lt;xref:System.Windows.Trigger&gt;для свойства зависимостей в стиле.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">Ключ свойства зависимостей, который должен использоваться для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">Регистрирует свойство зависимостей только для чтения, с указанным типом свойства, типом владельца, метаданными свойства и обратным вызовом для проверки.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Этот метод возвращает тип &lt;xref:System.Windows.DependencyPropertyKey&gt;, а &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;возвращает тип &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">Как правило ключи, представляющие свойства только для чтения не становятся открытым, поскольку ключи можно использовать для задания значения свойства зависимостей, вызвав &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">Структура класса повлияет вашим требованиям, но обычно рекомендуется ограничить доступ и видимость любого &lt;xref:System.Windows.DependencyPropertyKey&gt;для только те части кода, которые необходимы для установки этого свойства зависимостей как часть логики класса или приложения.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">Кроме того, рекомендуется предоставить идентификатор свойства зависимостей для свойства зависимостей только для чтения, обеспечивая значение &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;как <ph id="ph1">`public static readonly`</ph> на ваш класс.&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are a fairly typical scenario.</source>
          <target state="translated">Свойства зависимости только для чтения — это весьма распространенный сценарий.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">Значение свойства зависимости только для чтения можно использовать как основу для других операций системы свойств, принимающих свойство зависимостей, например основан &lt;xref:System.Windows.Trigger&gt;для свойства зависимостей в стиле.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">Дополнительные сведения о регистрации свойств зависимостей см. в разделе &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validation on a read-only dependency property might be less important.</source>
          <target state="translated">Проверка на доступное только для чтения свойство зависимостей может быть менее важна.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</source>
          <target state="translated">Уровень доступа к закрытым, заданный для ключа снижает вероятность произвольного недопустимого ввода.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">Имя регистрируемого свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">Тип свойства.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">Тип владельца, регистрирующего свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">Метаданные свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">Ссылка на созданные пользователем обратный вызов, который должен выполнить пользовательскую проверку значения свойства зависимостей после обычной проверки типа.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">Ключ свойства зависимостей, который должен использоваться для задания значения статического доступного только для чтения поля в вашем классе, которое затем используется для ссылки на свойство зависимостей.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the dependency property.</source>
          <target state="translated">Возвращает строковое представление свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation returns the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt; property value.</source>
          <target state="translated">Эта реализация возвращает &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;значение свойства.&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The string representation of the dependency property.</source>
          <target state="translated">Строковое представление свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Specifies a static value that is used by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system rather than <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the property exists, but does not have its value set by the property system.</source>
          <target state="translated">Указывает статическое значение, которое используется <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> системы свойств вместо <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> для указания, что свойство существует, но не имеет его значение, установленное в системе свойств.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is a sentinel value that is used for scenarios where the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system is unable to determine a requested &lt;xref:System.Windows.DependencyProperty&gt; value.</source>
          <target state="translated">UnsetValue является контрольного значения, который используется для сценариев, где <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> системы свойств не может определить запрошенный &lt;xref:System.Windows.DependencyProperty&gt;значение.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is used rather than <ph id="ph1">`null`</ph>, because <ph id="ph2">`null`</ph> could be a valid property value, as well as a valid (and frequently used) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.</source>
          <target state="translated">Используется UnsetValue вместо <ph id="ph1">`null`</ph>, так как <ph id="ph2">`null`</ph> может быть является допустимым значением свойства, а также является допустимым (и часто используемые) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is never returned out of &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">UnsetValue никогда не возвращается из &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt; on a dependency property on a &lt;xref:System.Windows.DependencyObject&gt; instance, one of the following applies:      -   A dependency property has a default value established in metadata and that value is returned.</source>
          <target state="translated">При вызове &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;для свойства зависимостей на &lt;xref:System.Windows.DependencyObject&gt;применяется экземпляр, одно из следующих: - свойство зависимости имеет значение по умолчанию, установленное в метаданных, и возвращается это значение.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value might come from &lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;.</source>
          <target state="translated">Это значение может быть получено из &lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Some other value was established by the property system, and the default value is no longer relevant.</source>
          <target state="translated">-Любое другое значение было установлено в системе свойств и значение по умолчанию больше не нужны.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>приоритет значения свойства зависимости<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; of UnsetValue is specifically disallowed.</source>
          <target state="translated">Параметр &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;из UnsetValue специально запрещено.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt; returns UnsetValue when the requested property has not been locally set.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;Возвращает UnsetValue, если запрошенное свойство локально не задано.&lt;/xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue has a special meaning when used as the return value of a &lt;xref:System.Windows.CoerceValueCallback&gt;.</source>
          <target state="translated">UnsetValue имеет особое значение при использовании в качестве возвращаемого значения &lt;xref:System.Windows.CoerceValueCallback&gt;.&lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>обратных вызовах свойства зависимости и проверки<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are binding to a database, note that UnsetValue is not equivalent to &lt;xref:System.DBNull.Value&gt;, in a similar way to how &lt;xref:System.DBNull.Value&gt; is not equivalent to a true null.</source>
          <target state="translated">При привязке к базе данных, обратите внимание, что UnsetValue не эквивалентен &lt;xref:System.DBNull.Value&gt;, аналогично тому, как &lt;xref:System.DBNull.Value&gt;не равно значению true null.&lt;/xref:System.DBNull.Value&gt; &lt;/xref:System.DBNull.Value&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Для добавления.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Gets the value validation callback for the dependency property.</source>
          <target state="translated">Возвращает значение обратный вызов проверки для свойства зависимостей.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property will contain <ph id="ph1">`null`</ph> for any dependency property with no registered validation callback.</source>
          <target state="translated">Это свойство будет содержать <ph id="ph1">`null`</ph> для любого свойства зависимостей без зарегистрированного обратного вызова проверки.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validate value callbacks must act in a static sense: validation applied through the &lt;xref:System.Windows.ValidateValueCallback&gt; cannot determine whether the provided value is valid for any particular instance.</source>
          <target state="translated">Проверить значение обратные вызовы должны действовать статически: проверка, применяемая через &lt;xref:System.Windows.ValidateValueCallback&gt;не может определить, является ли указанное значение допустимым для какой-либо экземпляр.&lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</source>
          <target state="translated">Обратный вызов может только определить, следует ли все объекты, которые обладают свойством зависимостей, или не должен принимать указанное значение как допустимое.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a &lt;xref:System.Windows.CoerceValueCallback&gt; instead.</source>
          <target state="translated">Если необходимо выполнять проверку, полагаясь на знание значений других свойств зависимостей в определенном экземпляре, используйте &lt;xref:System.Windows.CoerceValueCallback&gt;вместо.&lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.CoerceValueCallback&gt; is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</source>
          <target state="translated">&lt;xref:System.Windows.CoerceValueCallback&gt;Зарегистрирован как часть метаданных свойства зависимостей, а не непосредственно в идентификатор свойства зависимостей.&lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>обратных вызовах свойства зависимости и проверки<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The value validation callback for this dependency property, as provided for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">validateValueCallback</ph><ept id="p1">&lt;/code&gt;</ept> parameter in the original dependency property registration.</source>
          <target state="translated">Обратный вызов проверки значение для этого свойства зависимостей, как указано для <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">validateValueCallback</ph> <ept id="p1">&lt;/code&gt;</ept> параметр в исходной регистрации свойства зависимостей.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>