<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="hu-hu">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be8b7a32520721d64686d6e64f9970d0f8d4c91e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeDeclaration.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76eb47ca6a10dbc7010a4bcb74f5bd9faddcd05c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d786514f2af33e30490273c0179d256f113228d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">Olyan osztály, struktúra, illesztőfelület vagy számbavételi típus szerepel jelöli.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated">CodeTypeDeclaration határoz meg, amely egy osztály, struktúra, illesztőfelület vagy számbavételi deklarál kód használható.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>CodeTypeDeclaration can be used to declare a type that is nested within another type.</source>
          <target state="translated">A típust be más típusba beágyazott CodeTypeDeclaration használható.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt; property specifies the base type or base types of the type being declared.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;tulajdonság határozza meg az alaptípus vagy alaptípusában alatt deklarált típus.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt; property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;tulajdonsága tartalmazza a típusú tagok, amelyek magukban foglalhatják módszerek, mezők, tulajdonságok, megjegyzések és egyéb.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt; property indicates the &lt;xref:System.Reflection.TypeAttributes&gt; values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;tulajdonság a &lt;xref:System.Reflection.TypeAttributes&gt;a deklaráció, amely jelzi a típusa és kategóriája típusú értékeket.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, and &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;, &lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;, és &lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;módszerek jelzi, hogy a típus egy osztály, struktúra, enumerálás vagy illesztőfelület-típus, illetve.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Egyes programozási nyelvek csak referencia típusok vagy osztályok deklarációjában támogatja.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method to test for the appropriate &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; flags.</source>
          <target state="translated">Ellenőrizze a nyelvspecifikus CodeDOM kódgenerátor felületek, enumerálások és értéktípusok deklaráló támogatása, hívja meg a &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;teszteléséhez a megfelelő módszer &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;jelzők.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for interfaces, &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for enumerations, and &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt; indicates support for value types such as structures.</source>
          <target state="translated">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;felületek, támogatását jelzi &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;számbavételek, támogatását jelzi és &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;értéktípusok például struktúrák támogatását jelzi.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; &lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Egy osztály vagy egy struktúra végrehajtása egy teljes deklarációjában, vagy több deklarációk között ossza szét végrehajtására.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt; property indicates whether the type declaration is complete or partial.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;tulajdonság azt jelzi, hogy a deklaráció teljes vagy részleges.&lt;/xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">Nem minden kód generátorokat támogatja a részleges típusdeklaráció gyökérnévterének, így a &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; jelzővel metódus&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; meghívásával kell tesztelni a támogatási</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Egy új példányát inicializálja a <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified name.</source>
          <target state="translated">Egy új példányát inicializálja a <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály a megadott névvel.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The name for the new type.</source>
          <target state="translated">Az új típus neve.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the base types of the type.</source>
          <target state="translated">Lekérdezi a alaptípusában típusú.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include &lt;xref:System.Object&gt; as the first item in the BaseTypes collection.</source>
          <target state="translated">Egy osztály, amely nem örököl a alaptípusa, de egy vagy több felületek, amelyek valósítja meg a Visual Basic létrehozásához meg kell adni &lt;xref:System.Object&gt;BaseTypes gyűjtemény első elemeként.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework version 2.0 you do not need the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Object&gt; if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; A a .NET-keretrendszer 2.0-s nincs szükség a &lt;xref:System.CodeDom.CodeTypeReference&gt;a &lt;xref:System.Object&gt;Ha a felület végrehajtási már létezik, és típus szerint hivatkozik rá.&lt;/xref:System.Object&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are implementing the &lt;xref:System.Collections.ICollection&gt; interface and add it to the collection with this statement, <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">Ha valósít meg, például a &lt;xref:System.Collections.ICollection&gt;felületet, és adja hozzá a gyűjteményhez, a jelen nyilatkozatban <ph id="ph1">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, nincs szükség az előző <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> utasítást.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code illustrates the addition of a &lt;xref:System.CodeDom.CodeTypeReference&gt; to the collection that refers to &lt;xref:System.Object&gt;.</source>
          <target state="translated">Az alábbi kód bemutatja a &lt;xref:System.CodeDom.CodeTypeReference&gt; &lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt; hivatkozik, amely a gyűjtemény&lt;/xref:System.CodeDom.CodeTypeReference&gt; hozzáadása</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph>       [C#]      <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph>       The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">[A Visual Basic]      <ph id="ph1">```   Dim ctd As New CodeTypeDeclaration("Class1")   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))   ```</ph> [C#] <ph id="ph2">```   CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));   ```</ph> a fenti kódot állít elő, a Visual Basicben egyenértékű.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>       However, the Visual Basic code actually generated is the following.</source>
          <target state="translated"><ph id="ph1">```   Public Class Class1   Implements Interface1   ```</ph>A Visual Basic kódot ténylegesen jönnek létre azonban a következő.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the base types of the type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> , amely jelzi a alaptípusában típusú objektum.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">Lekérdezi vagy beállítja, hogy a típus szerepel-e egy osztály vagy referencia típusú jelző érték.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a class or reference type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha a típus egy osztály vagy referencia típusú; Ellenkező esetben <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">Lekérdezi vagy beállítja egy érték, amely jelzi, hogy a típus szerepel-e az enumerálás.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an enumeration; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha a típus egy számbavételi; Ellenkező esetben <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">Lekérdezi vagy beállítja a voltát jelző érték típusa illesztőfelület.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is an interface; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha a típusa illesztőfelület; Ellenkező esetben <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">Lekérdezi vagy beállítja a deklaráció a teljes vagy részleges voltát jelző érték.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Egy osztály vagy struktúra végrehajtása egy teljes deklaráció létrehozása, vagy több deklarációk között ossza szét végrehajtására.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">Egy teljes típusdeklarációt gyakran megadott hitelesítés megvalósításához.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, set the type declaration IsPartial property to <ph id="ph1">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">Ebben az esetben a tulajdonsága típus deklarációja IsPartial <ph id="ph1">`false`</ph>, ami azt jelenti, hogy a deklaráció jelenti-e az összes részletes osztály vagy struktúra végrehajtásához.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">A részleges típusdeklarációt megkönnyíti a hozhat létre egy osztály vagy struktúra végrehajtásának különböző modulokban az alkalmazás különböző részeit.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">A részleges típusdeklarációkban egy forrás-fájlban tárolja, vagy idővel együtt fordításának kombinált típus megvalósítása kialakításához több forrásfájlt elosztva.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">A C# nyelv támogatja a részleges típusdeklarációkban osztályok és keresztül szerkezet a <ph id="ph1">`partial`</ph> kulcsszó.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic részleges típusdeklarációkban osztályok támogatja, és a szerkezet a <ph id="ph1">`Partial`</ph> kulcsszó.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.</source>
          <target state="translated">Nem minden kód generátorokat támogatja a részleges típusdeklaráció gyökérnévterének, így a &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.&lt;/xref:System.CodeDom.Compiler.GeneratorSupport&gt; jelzővel metódus&lt;/xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; meghívásával kell tesztelni a támogatási</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Partial type declarations are supported for classes and structures.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Részleges típusdeklaráció gyökérnévterének osztályok és struktúrák vannak támogatva.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">Ha megad egy részleges típusdeklarációt számbavételi vagy felületet, a létrehozott kód fordítási hibákat hoz létre.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When supplying a class or structure implementation across multiple declarations, set the IsPartial property to <ph id="ph1">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">Amikor megadja egy osztály vagy struktúra végrehajtása több deklarációk között, a tulajdonsága IsPartial <ph id="ph1">`true`</ph> a kezdeti nyilatkozat és minden kiegészítő nyilatkozatok.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">A kezdeti deklaráció teljesen a típust kell megadnia elérésmódosítókkal, beleértve az aláírás örökölt típusú, és a felületek megvalósítva.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">A kiegészítő nyilatkozatok nem kell újra meg kell határozni a metódustípus aláírása.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">Egy fordítási hiba történt általában eredménye, ha a típus aláírás kiegészítő nyilatkozatban definiálja újra.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 résztípusában használja a felhasználó által generált kód külön Tervező kódból.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">A Visual Basic Windows-alkalmazás projektet, a felhasználói kód kerül egy részleges osztály, amely nem minősíti a <ph id="ph1">`Partial`</ph> kulcsszó; a tervező által biztosított kód jelenik meg a részleges osztály, amely rendelkezik a <ph id="ph2">`Partial`</ph> kulcsszó.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">A C#, a felhasználói kód és a Tervező kód részleges osztályok által azonosított megjelennek a <ph id="ph1">`partial`</ph> kulcsszó.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the class or structure declaration is a partial representation of the implementation; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha az osztály vagy struktúra deklarációjában végrehajtása; részleges ábrázolása <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> a nyilatkozat egy teljes végrehajtása az osztály vagy struktúra esetén.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Az alapértelmezett érték <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">Lekérdezi vagy beállítja, hogy a típus szerepel-e egy értéktípus (struct) jelző érték.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha a típusa nem értéktípus; Ellenkező esetben <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">Lekérdezi a osztálytagok gyűjteménye a képviselt típushoz.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the class members.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeMemberCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> objektum, amely jelzi a osztály tagjai.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt; collection is accessed for the first time.</source>
          <target state="translated">Akkor következik be, amikor a &lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;gyűjtemény érhető el az első alkalommal.&lt;/xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Fel kell venni a párbeszédpanelre.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt; collection is accessed for the first time.</source>
          <target state="translated">Akkor következik be, amikor a &lt;xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;gyűjtemény érhető el az első alkalommal.&lt;/xref:System.CodeDom.CodeTypeDeclaration.Members*&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Fel kell venni a párbeszédpanelre.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">Lekérdezi vagy beállítja a típusú attribútumok.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Reflection.TypeAttributes&gt; property contains the same type of values used by &lt;xref:System.Reflection&gt; when investigating a type at run time.</source>
          <target state="translated">A &lt;xref:System.Reflection.TypeAttributes&gt;tulajdonsága tartalmazza ugyanazt a típusú által használt értékek &lt;xref:System.Reflection&gt;típus futási időben vizsgálatakor.&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">Ezeknek a jelzőknek számos nem felelnek meg a típus deklaráció szintaxisa néhány nyelv esetében.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, only the following flags are significant to &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; : &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, and &lt;xref:System.Reflection.TypeAttributes&gt;.</source>
          <target state="translated">Ennek eredményeképpen a következő jelzőket csak szükség &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;: &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, &lt;xref:System.Reflection.TypeAttributes&gt;, és &lt;xref:System.Reflection.TypeAttributes&gt;.&lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.Reflection.TypeAttributes&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some of the flags such as &lt;xref:System.Reflection.TypeAttributes&gt; overlap with the meaning of flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property of &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; that is inherited from &lt;xref:System.CodeDom.CodeTypeMember&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Például &lt;xref:System.Reflection.TypeAttributes&gt;átfedésben vannak a jelzők &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;tulajdonsága &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;, amely &lt;xref:System.CodeDom.CodeTypeMember&gt;.&lt;/xref:System.CodeDom.CodeTypeMember&gt; öröklődik&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; szerinti&lt;/xref:System.Reflection.TypeAttributes&gt; jelzők</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property is a side effect of the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; class inheriting from &lt;xref:System.CodeDom.CodeTypeMember&gt; so that classes can be nested.</source>
          <target state="translated">A &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;tulajdonság egyik mellékhatása a &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;öröklő osztály &lt;xref:System.CodeDom.CodeTypeMember&gt;, hogy osztályok egymásba ágyazható.&lt;/xref:System.CodeDom.CodeTypeMember&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The flags in the TypeAttributes property should be used instead of the flags in the &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt; property.</source>
          <target state="translated">A TypeAttributes tulajdonságában kell használható a jelzők a helyett a &lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;tulajdonság.&lt;/xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The pattern for setting the visibility flags (flags containing the words <ph id="ph2">`Public`</ph> or <ph id="ph3">`Nested`</ph>) is to mask out all visibility flags using the &lt;xref:System.Reflection.TypeAttributes&gt; and then set the desired visibility flag.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Beállítása a láthatósági jelzőket minta (jelzők szavakat tartalmazó <ph id="ph2">`Public`</ph> vagy <ph id="ph3">`Nested`</ph>) való maszk ki minden látható jelzők használata a &lt;xref:System.Reflection.TypeAttributes&gt;, majd állítsa be a kívánt láthatósági jelző.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the C# code statement to identify the &lt;xref:System.CodeDom.CodeTypeDeclaration&gt; (named <ph id="ph1">`cd`</ph>) as an internal class is <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">Például a C# kóddal utasítás azonosítására a &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;(nevű <ph id="ph1">`cd`</ph>) belső osztály, <ph id="ph2">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">A kód ugyanarra az értékre beállítani a Visual Basic <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the TypeAttributes property directly to a visibility flag (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">A TypeAttributes tulajdonság közvetlenül egy láthatósági jelző beállítást (<ph id="ph1">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) törli az összes többi jelző is be lehet állítani.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.TypeAttributes&gt; object that indicates the attributes of the type.</source>
          <target state="translated">A &lt;xref:System.Reflection.TypeAttributes&gt;objektum, amely azt jelzi, az a típusú attribútumok.&lt;/xref:System.Reflection.TypeAttributes&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">Lekéri a helytípus-paraméterekkel a deklaráció.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">Egy általános típus deklarációja tartalmaz egy vagy több tetszőleges Típusparaméterek néven ismert típusok.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">A típusparaméter neve általános nyilatkozat törzsében típusát jelöli.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the generic declaration for the &lt;xref:System.Collections.Generic.List%601&gt; class contains the type parameter <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Például az általános deklaráció található a &lt;xref:System.Collections.Generic.List%601&gt;osztály tartalmazza a típusparaméter <ph id="ph1">`T`</ph>.&lt;/xref:System.Collections.Generic.List%601&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Az általános osztályokat és metódusokat további információkért lásd: <bpt id="p1">[</bpt>a .NET-keretrendszer Class Library a általánosítási<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the type parameters for the type declaration.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameterCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> , amely tartalmazza a deklaráció a helytípus-paraméterekkel.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>