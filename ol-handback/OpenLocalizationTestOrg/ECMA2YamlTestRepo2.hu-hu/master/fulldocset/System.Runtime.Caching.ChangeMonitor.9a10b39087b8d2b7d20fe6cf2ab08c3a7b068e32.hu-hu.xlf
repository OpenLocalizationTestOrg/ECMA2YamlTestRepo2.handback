<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="hu-hu">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94cfc43b061383f99108538f95cf073a12ce7bd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">Egy olyan alaposztályból biztosít, amely figyeli az adatokat, a gyorsítótár elemét környezetétől állapotának változása származtatott egyéni típus.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">A ChangeMonitor osztály származtatott figyelő osztályok, amelyek kifejezetten adott gyorsítótár-megvalósítások esetében az alaposztály van használva.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">A ChangeMonitor példánya adat, amely a gyorsítótár elemét függ állapotának változása figyeli.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">Az elem lehet például a fájlok vagy entitás, amelyek tartalma gyorsítótárba kerüljenek-e.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">Ha a fájlok vagy entitás frissül, a társított gyorsítótár-bejegyzés is módosítani kell.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">Közös figyelhető elemek adatok entitások (például adatbázismezőknek, értékek, sort vagy táblák), a másik gyorsítótári bejegyzést, és a fájlok és a fájl attribútumainak.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">A függőség módosítása a függőség állapot.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">Egy tipikus gyorsítótár-megvalósításban a ChangeMonitor példánya értesíti a gyorsítótár, amely a függőség megváltozott, a gyorsítótár hajtja végre a szükséges műveletek, például a beszúrt gyorsítótári bejegyzés érvénytelenítése.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">ChangeMonitor származtatott osztályok testre szabható a figyelheti az adott különböző adattárolókhoz függőségi módosítását.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">Például nincsenek gyorsítótár megvalósítások, a fájlrendszer, a fizikai memória vagy az adatbázis.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">A ChangeMonitor osztály megvizsgálja-e a gyorsítótár kívül elvégzett módosításokat, és majd riasztást küld a gyorsítótár, amely a változtatások történtek.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated">A <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> tartalmazza a következő osztályok, amelyek a ChangeMonitor osztály:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;Ezen osztályok mindegyikének függőségek különböző típusú együttműködik.&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">Például a származtatott &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;osztály figyeli a módosításokat a rendszer fájladatok (fájlok és mappák) függ, a gyorsítótár elemét gyorsítótárhoz.&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Egy új példányát inicializálja a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">Ez a konstruktor meghívott konstruktorok inicializálni az alaposztály származtatott osztályokat.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">A &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;osztály rendelkezik alapértelmezett konstruktorral.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">Azonban osztályok, amely örökli az alap &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;osztályhoz, és adja meg az egyéni módosítás-figyelési viselkedés inicializálási kell végrehajtania a konstruktorban.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">További információkért lásd: a Megjegyzések az öröklőknek szakasz.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Feloldja a jelenlegi példány által használt összes erőforrást a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">A Dispose metódus meghívja a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;származtatott osztályok csak egyszer, az első alkalommal a hívott metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">A Dispose metódus későbbi hívásainak hatástalan.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">A metódus meghívása után a &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;tulajdonsága <ph id="ph1">`true`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">A &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;túlterhelési rendelkezési kell meghívni egy &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példány.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Az alábbiakban a dispose metódus meghívása szabályait:-elem bekerülnek a gyorsítótár, mielőtt feladata a hívó arra, hogy egy &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példány.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">-Egyszer gyorsítótárelem és a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példányok, amely hozzá van rendelve a gyorsítótár, a gyorsítótár végrehajtója, győződjön meg arról, hogy átadott &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;nevezik, még akkor is, ha a Beszúrás sikertelen.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">-Után egy elemet, és hozzá van rendelve &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példányok kerülnek átadásra a gyorsítótár, a hívó nem kell eldobásakor a függőséget, mert amikor a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódus lehívásra kerül, a hívást a rendszer, mintha a függőség megváltozott.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">Ennek eredményeképpen a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus automatikusan megnyílik.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-Ezek a szabályok figyelembe véve, a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódust kell hívni a következő módszerek valamelyikével:-felhasználók kell a Dispose metódus túlterhelést hívni, ha úgy döntenek, hogy nem a származtatott változás-figyelő példány beilleszteni a gyorsítótárba.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">– A gyorsítótár-megvalósítással felelős a Dispose túlterhelési hívja, ha a megvalósítás próbál beszúrni a változás-példányhoz az objektum-gyorsítótár, de a Beszúrás sikertelen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">A beszúrási kísérletek kivételt okoz, ha a gyorsítótár-megvalósítással társított függőségek kell rendelkeznie.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">– Ha a rendszer eltávolította a gyorsítótári bejegyzést, a gyorsítótár-megvalósítással is kell rendelkeznie a függőséget.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">A belső végrehajtásának a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus automatikusan meghívja a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódus meghívja a visszahívás, amely után van regisztrálva a &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Ez az esemény indítási során automatikus dispose csak akkor fordul elő, ha a inicializálása a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példány korábban szerzett.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">Ha a származtatott módosítás figyelő konstruktor meghívja a &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metódust, ha a módosítás figyelő állapota már megváltozott (Ez azt jelenti, hogy állapota, amelyek felügyelet alatt már megváltozott, amikor a konstruktor háttérfeladat még aktív volt) majd &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metódus lesz automatikusan eldobásakor a módosítás figyelő.&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Felhasználóknak nem kell a Dispose metódus meghívására.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">Azonban meg nem akadályozza meg a metódus hívása.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Ezért, ha így tesznek, a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus meghívja.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">Ebben az esetben a gyorsítótári bejegyzés értesítést kap, mintha a függőség megváltozott.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">Származtatott osztályok Dispose metódus felülírása elkerülése érdekében a metódus nem egy explicit felhasználói felület megvalósításához.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">Az alap Dispose metódus hívása osztályból származtatott változás-figyelő inicializálási hiányosak.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">Összes kezelt és nem kezelt erőforrások és mutató hivatkozásokat kiadja a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> példány.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">Ez a túlterhelés származtatott változás-figyelő osztályok kell végrehajtania.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">Ha a értékének <ph id="ph1">`disposing`</ph> értéke <ph id="ph2">`true`</ph>, minden kezelt és nem kezelt erőforrások vannak távolítva, és ez az objektum mutató hivatkozásokat, hogy a származtatott változás-figyelő példány lehet a szemétgyűjtő kiadásakor.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">Válik biztossá, amely a következő &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódus által aktivált a megvalósított Dispose metódus csak egyszer kell.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>mutató hivatkozásokat és a kezelt és nem kezelt erőforrások kijelölése a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> példány; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> csak a nem felügyelt erőforrások kijelölése.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">Ha <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> átadása, metódust a Dispose egy <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> szál és felügyelt külső hivatkozásokat valószínűleg már nem érvényes, mert azok már megtörtént a szemétgyűjtő.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">Egy érték, amely azt jelzi, hogy lekérdezi az állapotot, amelyet a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály megváltozott.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">Ellenőrizheti, hogy a tulajdonság a származtatott &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;osztály megtekintéséhez, hogy változott-e egy függőséget.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">A változó értéke <ph id="ph1">`true`</ph> függőségi változás esetén (vagyis amikor a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;módszer neve).&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Után a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódust hívja a származtatott osztály, a HasChanged tulajdonság lesz <ph id="ph1">`true`</ph>, függetlenül attól, hogy egy &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;példány hívásával értesítést kapott arról a &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Hívóknak ellenőrizheti a HasChanged tulajdonság függőség módosulásának.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">Többszálú környezetben egy egyszerűbb, és további fenntarthatóvá megközelítés azonban adatok beszúrása egy gyorsítótár-megvalósítással HasChanged tulajdonság nélkül.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">Gyorsítótár-megvalósítások kell a HasChanged tulajdonság tekintse meg és nem egy INSERT utasítás végrehajtása és beállítási művelet, ha egy vagy több társított függőségek már módosult.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha az állapotot, amelyet a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> példány megváltozott; ellenkező esetben <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">Származtatott osztályok annak jelzésére, hogy az inicializálás befejezése konstruktor hívása.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Változásakor függőség inicializálásának egy származtatott osztályban befejezése előtt, a származtatott osztály konstruktorának kell meghívni a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">Ha a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus hivatkoznak, a &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;automatikusan tulajdonsága <ph id="ph1">`true`</ph> a módosítás felügyelő.&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">Ennek eredményeképpen, amikor a módosítás figyelő konstruktor meghívja az InitializationComplete metódust, az alaposztály automatikusan hívni fogja a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">Ha inicializálásának befejezése, a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus automatikusan megválik a származtatott változás-példányhoz.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">Egy érték, amely azt jelzi, hogy a származtatott példányának lekérdezi egy <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály eldobása.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">A tulajdonság értéke <ph id="ph1">`true`</ph> után a következő &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódushívások a &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metódus a származtatott osztály példányának eldobásakor.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Ha a példány eldobása; Ellenkező esetben <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">Gyorsítótár-végrehajtók regisztrálni egy visszahívást, és értesítést kap arról által meghívott egy <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> keresztül példány a <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> delegálása függőség lapindexének változása után.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">Gyorsítótár implementers Ez a módszer segítségével maguk módosítás figyelő legfeljebb kábelezést.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">Ha hozzárendel egy vagy több módosíthatja a gyorsítótár elemét a figyelőket, adja meg a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;példány a gyorsítótár elem ki van töltve módosítás figyelők tulajdonsággal.&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">A gyorsítótár végrehajtó támogatja, hogy módosítsa a figyelők felelős keresztül Léptetés a &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;tulajdonság, és regisztrálja a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegáltak, minden módosítása figyelő talált.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">Mivel a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegált tartalmaz egy nem kötelező state paraméter, akkor egy konkrét módosítás figyelő végrehajtása eltelhet választható állapotadatait.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">A gyorsítótár végrehajtója határozza meg, hogy egy explicit függőség, amelyet egy egyéni módosítás figyelő továbbküld a visszahívás részeként típusú is lehet képernyőfelvételt készíteni.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Az alap gyorsítótár bővítési API állapot típusa rendelkezik explicit függőséget nem kötelező.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">NotifyOnChanged metódus megvalósítása határozza meg automatikusan, hogy a figyelő állapota már változott NotifyOnChanged metódus lehívásra kerül időben.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Ha a &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;tulajdonság <ph id="ph1">`true`</ph>, majd a módszer automatikusan meghívja a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;eseménykezelő, regisztrált, a a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">Ez akkor fordul elő, mert lehetséges, hogy a gyorsítótár-megvalósítással létrehoz egy módosítás figyelőt, a gyorsítótár-megvalósítással lekérdezi a figyelő és kábeleket magát, akár óta a mögöttes figyelt állapota megváltozott.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Ha az állapota már megváltozott, majd az objektum, amely számára a &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metódus <ph id="ph1">`null`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">A NotifyOnChanged metódus csak egyszer hívható, és ezt a rendszer kivételt jelez.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">Egy hivatkozást a módszerre függőség megváltozott hív meg.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">A visszahívási metódus már meg lett hívva.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">Hívja meg az eseményt, amikor a függőség módosítások indíthat származtatott osztályok.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">Általában a OnChanged módszer neve függőségi változása esetén.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">A OnChanged metódust is nyílik meg, ha a változás-figyelő példánya eldobása, de az értékesítési következik be, csak akkor, ha a visszahívást nem már meg lett hívva.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">Ha a OnChanged metódus lehívásra kerül, mielőtt a &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metódust, az állapotadatok a OnChanged metódus hívása a menti a gyorsítótár-megvalósítással.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Emellett a visszahívást a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;azonnal meghívott metódus amikor a &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metódus meghívja.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">A változási eseményt adatai.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Az érték lehet <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">Jelző érték beolvasása a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> osztály példányt.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">A UniqueId tulajdonság értéke jellemzően áll függőségi kombinált nevek karakterláncadatokat, amely egyedi azonosítók figyeli az adatokat egy &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példány.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">A UniqueId tulajdonság értéke: karakterlánc.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">A karakterlánc értéke egyedi azonosítója körnek a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;példány.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">A változás-figyelő példány azonosítója.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>