<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15fcc10a38d11e8cf4f78a212ce2c850111af79e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlSchemaContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">210705d4a3755eeb2881ddc5d3501ce5109583b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a62bdab0182a10917c82ce00ad3bd46758325ad3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.</source>
          <target state="translated">해석 하거나 매핑하기 XAML 형식과 기반이 되는 어셈블리의 형식에 대 한 다시 사용할 수 있는 컨텍스트를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A XAML schema context provides a layer of abstraction between a schema or vocabulary for XAML, and a specific parser implementation.</source>
          <target state="translated">XAML 스키마 컨텍스트는 스키마 또는 XAML에 대 한 어휘와 특정 파서 구현 간의 추상화 계층을 제공합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>By inserting the concept of a schema context, the schema can be used with different XAML parsers, and the schema context fills in the details that are needed to interact with a specific XAML parser.</source>
          <target state="translated">스키마 컨텍스트와의 개념을 삽입 하 여 다른 XAML 파서가 함께 스키마를 사용할 수 있습니다 하 고 스키마 컨텍스트가 특정 XAML 파서가와 상호 작용 하는 데 필요한 세부 정보가 채워집니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the XAML schema context provides query APIs that relate to XAML concepts or to the CLR binding to the XAML type system.</source>
          <target state="translated">예를 들어 XAML 스키마 컨텍스트는 쿼리 또는 XAML 형식 시스템에 CLR 바인딩 XAML 개념에 관련 된 Api를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML schema context is also responsible for maintaining the assembly list of loaded assemblies, which defines where a XAML parser looks for backing types.</source>
          <target state="translated">또한 XAML 스키마 컨텍스트는 지원 형식에 대 한 XAML 파서를 찾는 위치를 정의 하는 로드 된 어셈블리의 어셈블리 목록을 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on a set of reference assemblies.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 참조 어셈블리 집합에 기반 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An enumerable set of assembly information items.</source>
          <target state="translated">어셈블리 정보 항목의 열거 가능한 집합입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each assembly information item is specified by an &lt;xref:System.Reflection.Assembly&gt; value.</source>
          <target state="translated">각 어셈블리 정보 항목은 지정 된 &lt;xref:System.Reflection.Assembly&gt;값.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on a settings object.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 설정 개체에 기반 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The settings object stores information about text converter and markup extension specifics for the schema context.</source>
          <target state="translated">설정 개체가 텍스트 변환기 및 태그 확장 세부 스키마 컨텍스트에 대 한 정보를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContextSettings&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Xaml.XamlSchemaContextSettings&gt;.&lt;/xref:System.Xaml.XamlSchemaContextSettings&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The settings object to use to construct the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">설정 개체를 생성 하는 데는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on a set of reference assemblies and a settings object.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 참조 어셈블리 및 설정 개체의 집합에 기반 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An enumerable set of assembly information.</source>
          <target state="translated">열거 가능한 어셈블리 정보 집합입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each assembly information item is specified by an &lt;xref:System.Reflection.Assembly&gt; value.</source>
          <target state="translated">각 어셈블리 정보 항목은 지정 된 &lt;xref:System.Reflection.Assembly&gt;값.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The settings object to use to construct the <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">설정 개체를 생성 하는 데는 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provides a nonstandard <bpt id="p1">&lt;xref uid="langword_csharp_Finalize" name="Finalize" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that does not invoke <bpt id="p2">&lt;xref uid="langword_csharp_Dispose" name="Dispose" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">비표준 제공 <bpt id="p1">&lt;xref uid="langword_csharp_Finalize" name="Finalize" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구현을 호출 하지 않는 <bpt id="p2">&lt;xref uid="langword_csharp_Dispose" name="Dispose" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML schema contexts should not be disposed by automatic garbage collection or by manual operations.</source>
          <target state="translated">XAML 스키마 컨텍스트 자동 가비지 수집에 의해 또는 수동 작업에는 삭제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although XAML schema contexts  have no unmanaged resources, &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt; properties might still be active, and disposing a XAML schema context can interfere with the related defer-load operation.</source>
          <target state="translated">XAML 스키마 컨텍스트는 관리 되지 않는 리소스가 없는 &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;속성 활성화 수 및 관련된 지연 로드 작업을 방해할 수 XAML 스키마 컨텍스트를 삭제 합니다.&lt;/xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.AppDomain.AssemblyLoad&gt; event handlers, which are hooked internally as weak references, are cleaned up by this implementation.</source>
          <target state="translated">&lt;xref:System.AppDomain.AssemblyLoad&gt;이 구현에서 내부적으로 약한 참조로 연결, 이벤트 처리기를 정리 됩니다.&lt;/xref:System.AppDomain.AssemblyLoad&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</source>
          <target state="translated">XAML 스키마와 해당 컨텍스트 조회 API에 의해 반환 되는 값에 정규화 된 어셈블리 이름을 사용 하는지 여부를 지정 하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns the &lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt; value that is established in the settings for the &lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt; constructor signature.</source>
          <target state="translated">이 속성은 반환 된 &lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt;값에 대 한 설정에서 설정 된는 &lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;있는 생성자 시그니처의.&lt;/xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt; &lt;/xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If other signatures were used for construction or if &lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt; is not specifically set to <ph id="ph1">`true`</ph>, the value of this property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">다른 서명 생성에 사용 하거나 &lt;xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt;으로 특별히 설정 되지 않은 <ph id="ph1">`true`</ph>,이 속성의 값은 <ph id="ph2">`false`</ph>.&lt;/xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property influences the strings that are returned by &lt;xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A&gt;.</source>
          <target state="translated">이 속성의 값에는 &lt;xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A&gt;.&lt;/xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A&gt; 반환 되는 문자열을 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If FullyQualifyAssemblyNamesInClrNamespaces is <ph id="ph1">`true`</ph>, the assembly portion of the string reports the equivalent of &lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">FullyQualifyAssemblyNamesInClrNamespaces 이면 <ph id="ph1">`true`</ph>, 문자열의 어셈블리 부분 &lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;.&lt;/xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt; 을 해당 하는 보고</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>XAML 스키마와 해당 컨텍스트 조회 Api;에 의해 반환 되는 값에서 정규화 된 어셈블리 이름을 사용 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Searches the assemblies that are held by this <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and returns a set of namespaces.</source>
          <target state="translated">이 보유 하 고 있는 어셈블리 검색 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 네임 스페이스의 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method only searches the reference assemblies if they are passed in through construction or property setting.</source>
          <target state="translated">이 메서드는 구문 또는 속성 설정을 통해에 전달 될 경우만 참조 어셈블리를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no assemblies are established as reference assemblies, the logic of this method examines all loaded assemblies where this &lt;xref:System.Xaml.XamlSchemaContext&gt; is active.</source>
          <target state="translated">이 메서드의 논리 로드 된 모든 어셈블리를 검사 하 여 참조 어셈블리로 설정 된 어셈블리가 없는 경우 여기서이 &lt;xref:System.Xaml.XamlSchemaContext&gt;활성화 되어.&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An enumerable set of namespace identifiers.</source>
          <target state="translated">열거 가능한 집합 네임 스페이스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These identifiers are provided as strings.</source>
          <target state="translated">이러한 식별자는 문자열로 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Searches the assemblies that are held by this <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and returns a set of types from the specified XAML namespace.</source>
          <target state="translated">이 보유 하 고 있는 어셈블리 검색 <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 XAML 네임 스페이스의 형식 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The XAML namespace to return types for.</source>
          <target state="translated">반환 형식에 대 한 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An enumerable set of XAML types.</source>
          <target state="translated">열거 가능한 집합 XAML 형식입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each XAML type in the set is represented by a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">집합의 각 XAML 형식으로 표시 됩니다는 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.</source>
          <target state="translated">지정된 된 XAML 네임 스페이스를 매핑할 때 사용 하는 소비자에 대 한 기본 접두사로 보고 되는 문자열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most immediate consumer of the information is typically a XAML writer.</source>
          <target state="translated">가장 시급한 소비자 정보는 일반적으로 XAML 작성기입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other indirect consumers include design tools.</source>
          <target state="translated">간접 다른 소비자는 디자인 도구를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of the XAML binding for the common language runtime (CLR), you can specify this information by applying &lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt; at the assembly level.</source>
          <target state="translated">공용 언어 런타임 (CLR)에 대 한 XAML 바인딩이의 일환으로, 적용 하 여이 정보를 지정할 수 있습니다 &lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;어셈블리 수준에서.&lt;/xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The XAML namespace to get the preferred prefix for.</source>
          <target state="translated">에 대 한 기본 접두사를 가져오려는 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A string that consumers should use when they map the specified XAML namespace for markup use.</source>
          <target state="translated">소비자가 태그에 대 한 지정된 된 XAML 네임 스페이스를 매핑할 때 사용 해야 하는 문자열을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlns&lt;/code&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xmlns&lt;/code&gt;</ph>null입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value that represents a directive, either for the XAML language or for a particular implementation.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 언어 또는 특정 구현에 대 한 지시문을 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you create a derived class from &lt;xref:System.Xaml.XamlDirective&gt; as part of a XAML type system extension scenario.</source>
          <target state="translated">파생된 된 클래스를 만드는 경우이 메서드를 재정의 &lt;xref:System.Xaml.XamlDirective&gt;XAML 형식 시스템의 확장 시나리오의 일부로.&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains the named directive.</source>
          <target state="translated">명명 된 지시문이 포함 된 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The name of the directive to obtain.</source>
          <target state="translated">가져올 지시문의 이름입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the requested directive.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요청된 된 지시문을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlNamespace&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xamlNamespace&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is based on a CLR type identifier.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> CLR 유형 식별자를 기반으로 하는 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload assumes that you are using the CLR for the backing type system.</source>
          <target state="translated">이 오버 로드 지원 형식 시스템에 대 한 CLR을 사용 하는 것으로 가정 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are not using the CLR type system, use &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29&gt;.</source>
          <target state="translated">CLR 형식 시스템을 사용 하지 않는 경우 사용 &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29&gt;.&lt;/xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type to get a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">가져올 형식의 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that matches the input <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 입력과 일치 하는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">type</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is based on a XAML system type name.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 시스템 형식 이름을 기반으로 하는 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The XAML type name to get a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">가져오려는 XAML 형식 이름은 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that matches the input <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlTypeName</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 입력과 일치 하는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlTypeName</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A component of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xamlTypeName</ph><ept id="p1">&lt;/code&gt;</ept> (&lt;xref:System.Xaml.Schema.XamlTypeName.Name<bpt id="p2">*</bpt>&gt; or &lt;xref:System.Xaml.Schema.XamlTypeName.Namespace<ept id="p2">*</ept>&gt;) is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A component of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xamlTypeName</ph><ept id="p1">&lt;/code&gt;</ept> (&lt;&gt;<bpt id="p2">*</bpt>&gt; or &lt;&gt;<ept id="p2">*</ept>&gt;) is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlTypeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xamlTypeName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is based on a XAML namespace and a string for the type name.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 네임 스페이스 및 형식 이름에 대 한 문자열 기반으로 하는 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This signature can specify the type arguments for cases where the desired type is a generic type.</source>
          <target state="translated">이 서명은 되는 경우 원하는 형식을 제네릭 형식에 대 한 형식 인수를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains the desired type.</source>
          <target state="translated">원하는 형식을 포함 하는 XAML 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The string name of the desired type.</source>
          <target state="translated">원하는 종류의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The initialization type arguments for a generic type.</source>
          <target state="translated">제네릭 형식의 초기화 형식 인수입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that matches the input criteria.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 입력된 기준과 일치 하는 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.</source>
          <target state="translated">이 스키마 컨텍스트 포함 된 XAML 네임 스페이스를 확인 하기 위해 필요한 어셈블리를 사용 하는 작업 하는 경우 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying assembly resolution technique, which is an internal API, has built-in tolerances for different string forms of an assembly name as based on the &lt;xref:System.Reflection.AssemblyName&gt; construction behavior.</source>
          <target state="translated">내부 API는 기본 어셈블리 해결 방법을 기반으로 하는 어셈블리 이름의 다른 문자열 형식에 대 한 기본 제공 허용 값에는 &lt;xref:System.Reflection.AssemblyName&gt;생성 동작.&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this API is to enable first-opportunity resolution against known sets of assemblies, such as against reference assemblies instead of against a global assembly cache.</source>
          <target state="translated">이 API의 목적은 대신 전역 어셈블리 캐시에 대 한 참조 어셈블리에 대해 같은 알려진된 어셈블리를 집합에 대해 첫째 확인을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the list of reference assemblies is populated, the default implementation can access the known reference assemblies.</source>
          <target state="translated">참조 어셈블리 목록이 채워진 경우 기본 구현에서는 알려진된 참조 어셈블리를 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The name of the assembly to load.</source>
          <target state="translated">로드할 어셈블리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The resolved assembly.</source>
          <target state="translated">확인 된 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets an enumerable set of reference assemblies for the XAML schema context.</source>
          <target state="translated">열거 가능한 XAML 스키마 컨텍스트에 대 한 참조 어셈블리 집합을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An enumerable set of reference assemblies for the schema context.</source>
          <target state="translated">열거 가능한 스키마 컨텍스트에 대 한 참조 어셈블리 집합.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Each assembly information item is specified by an &lt;xref:System.Reflection.Assembly&gt; value.</source>
          <target state="translated">각 어셈블리 정보 항목은 지정 된 &lt;xref:System.Reflection.Assembly&gt;값.&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).</source>
          <target state="translated">XAML 스키마와 해당 컨텍스트 (입력된 매개 변수 개수) 같은 인자 수와 두 명의 생성자가 있는 태그 확장을 지원 하는지 여부를 지정 하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns the &lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt; value that is established in the settings for the &lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt; constructor signature.</source>
          <target state="translated">이 속성은 반환 된 &lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt;값에 대 한 설정에서 설정 된는 &lt;xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt;있는 생성자 시그니처의.&lt;/xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29&gt; &lt;/xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If other signatures are used for construction or if &lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt; is not specifically set to <ph id="ph1">`true`</ph>, the value of this property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">다른 서명이 생성에 사용 하거나 &lt;xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt;으로 특별히 설정 되지 않은 <ph id="ph1">`true`</ph>,이 속성의 값은 <ph id="ph2">`false`</ph>.&lt;/xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Duplicate arity of markup extensions is not specifically addressed by the XAML specification [MS-XAML], section 6.6.7.2.</source>
          <target state="translated">XAML 사양 [MS-XAML] 섹션 6.6.7.2 태그 확장의 중복 인자 수는 구체적으로 다루지 않습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because formation of the XAML information item for a markup extension is identical regardless of duplicate arity that might exist in the markup extension implementation.</source>
          <target state="translated">즉, 태그 확장 구현에 존재할 수 있는 중복 된 숫자에 관계 없이 태그 확장에 대 한 XAML 정보 항목의 형성 같습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the actual invocation of the markup extension and its <ph id="ph1">`ProvideValue`</ph> exposes any issues associated with duplicate arity.</source>
          <target state="translated">태그 확장이 실제로 호출만 및 해당 <ph id="ph1">`ProvideValue`</ph> 중복 인자 수와 관련 된 문제를 노출 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Behavior for handling duplicate arity is thus undefined and is left up to each implementing XAML schema context and its XAML writer integration.</source>
          <target state="translated">중복 인자 라는 처리 동작은 정의 되어 있지 않고 및 각 구현 XAML 스키마 컨텍스트 및 XAML 작성자가 통합 몫입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default XAML schema context as implemented for .NET Framework XAML Services operations does not support duplicate arity; various .NET Framework XAML Services APIs will throw exceptions when processing markup extension usage with underlying duplicate arity.</source>
          <target state="translated">.NET Framework XAML 서비스 작업에 대 한 구현 된 대로 기본 XAML 스키마 컨텍스트는 중복 인자 라는;를 지원 하지 않습니다. 다양 한.NET Framework XAML 서비스 Api는 기본 중복 인자가 있는 태그 확장명 사용을 처리할 때 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about defining markup extensions, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">태그 확장을 정의 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 개요에 대 한 태그 확장<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the schema context permits markup extensions that have duplicate arity; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>스키마 컨텍스트; 중복 인자가 있는 태그 확장을 허용 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns the success or failure of a request for a compatible XAML namespace.</source>
          <target state="translated">호환 되는 XAML 네임 스페이스에 대 한 요청의 성공 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A successful request reports that XAML namespace as an out parameter.</source>
          <target state="translated">Out 매개 변수로 해당 XAML 네임 스페이스를 보고 하는 요청이 성공 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Internally, this method uses the following lookup order:      1.</source>
          <target state="translated">이 메서드는 다음과 같은 조회 순서를 사용 하는 내부적으로: 1입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>An internally implemented compatibility dictionary, which may have been populated by an earlier lookup.</source>
          <target state="translated">내부적으로 구현 된 호환성 사전에 이전 조회 하 여 구성 되었습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt; parameter evaluation.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;매개 변수를 평가 합니다.&lt;/xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no other compatible namespace is discovered and this method returns <ph id="ph1">`false`</ph>, the <ph id="ph2">`compatibleNamespace`</ph> parameter output might have the same value as the <ph id="ph3">`xamlNamespace`</ph> input.</source>
          <target state="translated">다른 호환 네임 스페이스가 검색 되 고이 메서드가 반환 하는 경우 <ph id="ph1">`false`</ph>, <ph id="ph2">`compatibleNamespace`</ph> 출력 매개 변수는 동일한 값으로 할 수는 <ph id="ph3">`xamlNamespace`</ph> 입력 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_xmlns" name="xmlns" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> string for the XAML namespace to be checked for a compatible result.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_xmlns" name="xmlns" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호환 되는 결과 대해 확인할 XAML 네임 스페이스에 대 한 문자열입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When this method returns, the <bpt id="p1">&lt;xref uid="langword_csharp_xmlns" name="xmlns" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> string for a compatible XAML namespace request.</source>
          <target state="translated">이 메서드가 반환 될 때는 <bpt id="p1">&lt;xref uid="langword_csharp_xmlns" name="xmlns" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호환 되는 XAML 네임 스페이스 요청에 대 한 문자열입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This might be identical to <ph id="ph1">`xamlNamespace`</ph> if the method returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">동일 때문일 <ph id="ph1">`xamlNamespace`</ph> 메서드에서 반환 되 면 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">compatibleNamespace</ph><ept id="p2">&lt;/code&gt;</ept> contains a usable result; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">compatibleNamespace</ph> <ept id="p2">&lt;/code&gt;</ept> 사용 가능한 결과가 포함, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlNamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xamlNamespace&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>