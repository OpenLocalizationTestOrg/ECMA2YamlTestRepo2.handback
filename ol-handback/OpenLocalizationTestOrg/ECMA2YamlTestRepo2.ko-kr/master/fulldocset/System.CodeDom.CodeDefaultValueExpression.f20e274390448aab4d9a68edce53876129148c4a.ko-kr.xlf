<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeb5e78e2d5756b53923c98956ccf244e4a73cc3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeDefaultValueExpression.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06dcd9f578affe40b5c39cdddba478f0c77f06bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49a639bea98c633dedbfc0dbcd31aee6baf6f176</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reference to a default value.</source>
          <target state="translated">기본 값에 대 한 참조를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A CodeDefaultValueExpression can be used to represent a reference to a default value.</source>
          <target state="translated">CodeDefaultValueExpression 기본 값에 대 한 참조를 나타내는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt; property specifies the reference to the value type.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt;속성 값 형식에 대 한 참조를 지정 합니다.&lt;/xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CodeDefaultValueExpression class is used in the generation of generics-based code.</source>
          <target state="translated">CodeDefaultValueExpression 클래스는 제네릭 기반 코드의 생성에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">제네릭에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>.NET Framework 클래스 라이브러리의 제네릭<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code steps are provided in this section to further describe the use of the CodeDefaultValueExpression class to add a new default value to a code graph.</source>
          <target state="translated">다음 코드 단계는 새 기본값 코드 그래프에 추가할 CodeDefaultValueExpression 클래스의 용도 더 세밀 하 게이 섹션에 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code in part 1 is part of a larger example provided for the &lt;xref:System.CodeDom.CodeTypeParameter&gt; class.</source>
          <target state="translated">1 단계에서 코드는 &lt;xref:System.CodeDom.CodeTypeParameter&gt;클래스&lt;/xref:System.CodeDom.CodeTypeParameter&gt; 에 대해 제공 된 큰 예제의 일부</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This code, when run through the C# code generator, results in the C# code that appears in part 2.</source>
          <target state="translated">2 부에 표시 되는 C# 코드에서이 코드에서는 C# 코드 생성기를 통해 실행 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this code is called in the statement in part 3, the result is the output shown in part 4.</source>
          <target state="translated">이 코드는 파트 3 문에서 호출 되 면 4 단계에 나와 있는 출력 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   // Part 1: Code to create a generic Print method.               CodeMemberMethod printMethod = new CodeMemberMethod();               CodeTypeParameter sType = new CodeTypeParameter("S");               sType.HasConstructorConstraint = true;               CodeTypeParameter tType = new CodeTypeParameter("T");               sType.HasConstructorConstraint = true;                  printMethod.Name = "Print";               printMethod.TypeParameters.Add(sType);               printMethod.TypeParameters.Add(tType);               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("T"))));               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("S"))));   ```</ph>      <ph id="ph2">```   // Part 2: Code generated by code in part 1.   public virtual void Print&lt;S, T&gt;()               where S : new()            {               Console.WriteLine(default(T));               Console.WriteLine(default(S));           }   ```</ph>      <ph id="ph3">```   // Part 3: Call to the generated method.   dict.Print&lt;System.Decimal, int&gt;();   ```</ph>      <ph id="ph4">```   // Part 4: Output of the generated method.   0   0      ```</ph></source>
          <target state="translated"><ph id="ph1">```   // Part 1: Code to create a generic Print method.               CodeMemberMethod printMethod = new CodeMemberMethod();               CodeTypeParameter sType = new CodeTypeParameter("S");               sType.HasConstructorConstraint = true;               CodeTypeParameter tType = new CodeTypeParameter("T");               sType.HasConstructorConstraint = true;                  printMethod.Name = "Print";               printMethod.TypeParameters.Add(sType);               printMethod.TypeParameters.Add(tType);               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("T"))));               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("S"))));   ```</ph>      <ph id="ph2">```   // Part 2: Code generated by code in part 1.   public virtual void Print&lt;S, T&gt;()               where S : new()            {               Console.WriteLine(default(T));               Console.WriteLine(default(S));           }   ```</ph>      <ph id="ph3">```   // Part 3: Call to the generated method.   dict.Print&lt;System.Decimal, int&gt;();   ```</ph>      <ph id="ph4">```   // Part 4: Output of the generated method.   0   0      ```</ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified code type reference.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 지정 된 코드 형식 참조를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies the reference to a value type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값 형식에 대 한 참조를 지정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets or sets the data type reference for a default value.</source>
          <target state="translated">기본 값에 대 한 데이터 형식 참조를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing a data type that has a default value.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 값 데이터 형식을 나타내는 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>