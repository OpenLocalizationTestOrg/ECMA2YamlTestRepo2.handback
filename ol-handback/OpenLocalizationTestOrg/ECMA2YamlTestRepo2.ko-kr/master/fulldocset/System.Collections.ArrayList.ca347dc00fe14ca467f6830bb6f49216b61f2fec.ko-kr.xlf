<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2de9fc820be99c670d7619152777dcdaaee6876a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.ArrayList.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcb4fd43493c7a7cd56b49098b811c29b8a9d010</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">764825ee98e69f44c09e869abcec65ccab26e908</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements the &lt;xref:System.Collections.IList&gt; interface using an array whose size is dynamically increased as required.</source>
          <target state="translated">구현 된 &lt;xref:System.Collections.IList&gt;인터페이스 필요에 따라 크기가 동적으로 증가 하는 배열을 사용 하 여 필요에 따라.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)</ept>.</source>
          <target state="translated">이 형식에 대 한.NET Framework 소스 코드를 찾아보려면 참조는 <bpt id="p1">[</bpt>참조 소스<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)</ept>.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;이 형식에 대 한.NET Framework 소스 코드를 보려면를 참조 하십시오.는 <bpt id="p1">[</bpt>참조 소스<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
          <target state="translated">소스 코드를 온라인, 오프 라인에서 살펴보고에 대 한 참조를 다운로드 및; 디버그 시 소스 (패치 및 업데이트 포함)를 단계별로 실행 참조 <bpt id="p1">[</bpt>지침<ept id="p1">](http://referencesource.microsoft.com/)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ArrayList class is designed to hold heterogeneous collections of objects.</source>
          <target state="translated">ArrayList 클래스 개체의 유형이 다른 컬렉션을 보유 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it does not always offer the best performance.</source>
          <target state="translated">그러나 항상를 제공 하지 않습니다 최상의 성능을 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, we recommend the following:      -   For a heterogeneous collection of objects, use the <ph id="ph1">`List&lt;Object&gt;`</ph> (in C#) or <ph id="ph2">`List(Of Object)`</ph> (in Visual Basic) type.</source>
          <target state="translated">대신 다음 좋습니다:-다른 유형의 개체를 사용 하 여 컬렉션에는 <ph id="ph1">`List&lt;Object&gt;`</ph> (C#에서) 또는 <ph id="ph2">`List(Of Object)`</ph> (Visual Basic)에서는 입력 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For a homogeneous collection of objects, use the &lt;xref:System.Collections.Generic.List%601&gt; class.</source>
          <target state="translated">-유형이 같은 개체의 컬렉션을 사용 하 여 &lt;xref:System.Collections.Generic.List%601&gt;클래스&lt;/xref:System.Collections.Generic.List%601&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the "Performance Considerations" section in the &lt;xref:System.Collections.Generic.List%601&gt; reference topic for a discussion of the relative performance of these classes.</source>
          <target state="translated">"성능 고려 사항" 섹션을 참조는 &lt;xref:System.Collections.Generic.List%601&gt;참조 항목에 대 한 이러한 클래스의 상대 성능 설명은.&lt;/xref:System.Collections.Generic.List%601&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ArrayList is not guaranteed to be sorted.</source>
          <target state="translated">ArrayList 정렬할 보장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must sort the ArrayList by calling its &lt;xref:System.Collections.ArrayList.Sort%2A&gt; method prior to performing operations (such as &lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;) that require the ArrayList to be sorted.</source>
          <target state="translated">호출 하 여 ArrayList를 정렬 해야 해당 &lt;xref:System.Collections.ArrayList.Sort%2A&gt;메서드 작업을 수행 하기 전에 (예: &lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;) 정렬할 목록의 해야 하는.&lt;/xref:System.Collections.ArrayList.BinarySearch%2A&gt; &lt;/xref:System.Collections.ArrayList.Sort%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain a collection that is automatically sorted as new elements are added, you can use the &lt;xref:System.Collections.Generic.SortedSet%601&gt; class.</source>
          <target state="translated">새 요소를 추가할 때 자동으로 정렬 된 컬렉션을 유지 하려면 &lt;xref:System.Collections.Generic.SortedSet%601&gt;클래스&lt;/xref:System.Collections.Generic.SortedSet%601&gt; 를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of an ArrayList is the number of elements the ArrayList can hold.</source>
          <target state="translated">ArrayList 용량이 ArrayList 저장할 수 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to an ArrayList, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">ArrayList에 요소가 추가 되 면 용량이 자동으로 증가 하면 재할당을 통해 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt; or by setting the &lt;xref:System.Collections.ArrayList.Capacity%2A&gt; property explicitly.</source>
          <target state="translated">호출 하 여 용량을 줄일 수 있습니다 &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;하거나 설정 하는 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;속성이 명시적으로.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.TrimToSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For very large ArrayList objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph1">`enabled`</ph> attribute of the  configuration element to <ph id="ph2">`true`</ph> in the run-time environment.</source>
          <target state="translated">매우 큰 ArrayList 개체에 대 한 설정 하 여 64 비트 시스템의 2 십억 요소에 최대 용량을 늘릴 수는 <ph id="ph1">`enabled`</ph> 에 구성 요소의 특성 <ph id="ph2">`true`</ph> 런타임 환경에서 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">이 컬렉션의 인덱스는&amp;0;부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ArrayList collection accepts <ph id="ph1">`null`</ph> as a valid value.</source>
          <target state="translated">ArrayList 컬렉션에는 <ph id="ph1">`null`</ph> 을 유효한 값으로.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also allows duplicate elements.</source>
          <target state="translated">또한 중복 되는 요소가 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using multidimensional arrays as elements in an ArrayList collection is not supported.</source>
          <target state="translated">다차원 배열 ArrayList 컬렉션에서 요소로 사용 하 여 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the default initial capacity.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비어 있는 상태에서 기본 초기 용량을 가지는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of an &lt;xref:System.Collections.ArrayList&gt; is the number of elements that the &lt;xref:System.Collections.ArrayList&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.ArrayList&gt;요소의 수가 하는 &lt;xref:System.Collections.ArrayList&gt;보유할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to an &lt;xref:System.Collections.ArrayList&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.ArrayList&gt;, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 에 요소를 추가 하는 동안 여러 번 수행</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 컬렉션에서 복사 된 요소를 포함 하 고 복사 된 요소의 수와 같은 초기 용량을 가지는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of an &lt;xref:System.Collections.ArrayList&gt; is the number of elements that the &lt;xref:System.Collections.ArrayList&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.ArrayList&gt;요소의 수가 하는 &lt;xref:System.Collections.ArrayList&gt;보유할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to an &lt;xref:System.Collections.ArrayList&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.ArrayList&gt;, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 에 요소를 추가 하는 동안 여러 번 수행</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied onto the &lt;xref:System.Collections.ArrayList&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;순서는 &lt;xref:System.Collections.IEnumerator&gt; &lt;xref:System.Collections.ICollection&gt;.&lt;/xref:System.Collections.ICollection&gt; &lt;/xref:System.Collections.IEnumerator&gt; 가 읽을&lt;/xref:System.Collections.ArrayList&gt; 에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`c`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 에 있는 요소의 수는 <ph id="ph3">`c`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; whose elements are copied to the new list.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;해당 요소가 새 목록에 복사 됩니다.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the specified initial capacity.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비어 하며 지정된 된 초기 용량을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of an &lt;xref:System.Collections.ArrayList&gt; is the number of elements that the &lt;xref:System.Collections.ArrayList&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.ArrayList&gt;요소의 수가 하는 &lt;xref:System.Collections.ArrayList&gt;보유할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to an &lt;xref:System.Collections.ArrayList&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.ArrayList&gt;, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 에 요소를 추가 하는 동안 여러 번 수행</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`capacity`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The number of elements that the new list can initially store.</source>
          <target state="translated">새 목록에 처음 저장할 수 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper for a specific &lt;xref:System.Collections.IList&gt;.</source>
          <target state="translated">만듭니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Collections.IList&gt;.&lt;/xref:System.Collections.IList&gt; 특정에 대 한 래퍼</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adapter does not copy the contents of &lt;xref:System.Collections.IList&gt;.</source>
          <target state="translated">어댑터는 &lt;xref:System.Collections.IList&gt;.&lt;/xref:System.Collections.IList&gt; 의 내용을 복사 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it only creates an &lt;xref:System.Collections.ArrayList&gt; wrapper around &lt;xref:System.Collections.IList&gt;; therefore, changes to the &lt;xref:System.Collections.IList&gt; also affect the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">대신, 한 &lt;xref:System.Collections.ArrayList&gt; &lt;xref:System.Collections.IList&gt;; &lt;xref:System.Collections.IList&gt; &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 에 영향을 줄&lt;/xref:System.Collections.IList&gt; 을 따라서 변경 내용은&lt;/xref:System.Collections.IList&gt; 래퍼&lt;/xref:System.Collections.ArrayList&gt; 만 생성</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; class provides generic &lt;xref:System.Collections.ArrayList.Reverse%2A&gt;, &lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt; and &lt;xref:System.Collections.ArrayList.Sort%2A&gt; methods.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;클래스는 제네릭 제공 &lt;xref:System.Collections.ArrayList.Reverse%2A&gt;, &lt;xref:System.Collections.ArrayList.BinarySearch%2A&gt;및 &lt;xref:System.Collections.ArrayList.Sort%2A&gt;메서드.&lt;/xref:System.Collections.ArrayList.Sort%2A&gt; &lt;/xref:System.Collections.ArrayList.BinarySearch%2A&gt; &lt;/xref:System.Collections.ArrayList.Reverse%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This wrapper can be a means to use those methods on &lt;xref:System.Collections.IList&gt;; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the &lt;xref:System.Collections.IList&gt;.</source>
          <target state="translated">하지만이 래퍼 &lt;xref:System.Collections.IList&gt;는 래퍼를 통해 이러한 일반 작업을 수행할 수 있습니다. 수 &lt;xref:System.Collections.IList&gt;.&lt;/xref:System.Collections.IList&gt; 에 직접 적용 되는 작업 보다는&lt;/xref:System.Collections.IList&gt; 를 사용 하는 수단을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Compatibility    In the .NET Framework version 1.0 and 1.1, calling the &lt;xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt; method overload on the &lt;xref:System.Collections.ArrayList&gt; wrapper returned an enumerator that treated the second argument as an upper bound rather than as a count.</source>
          <target state="translated">버전 호환성.NET Framework 버전 1.0 및 1.1에서는 호출는 &lt;xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt;메서드 오버 로드에는 &lt;xref:System.Collections.ArrayList&gt;래퍼 아닌 수로 상한을으로 두 번째 인수를 처리 하는 열거자를 반환 합니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> 두 번째 인수 수로 올바르게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IList&gt; to wrap.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;래핑할.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper around the &lt;xref:System.Collections.IList&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Collections.IList&gt;.&lt;/xref:System.Collections.IList&gt; 래퍼</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Adds an object to the end of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">개체의 끝에 추가 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.ArrayList.Count%2A&gt; already equals &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, the capacity of the &lt;xref:System.Collections.ArrayList&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">경우 &lt;xref:System.Collections.ArrayList.Count%2A&gt;이미 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;의 용량이 &lt;xref:System.Collections.ArrayList&gt;자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.ArrayList.Count%2A&gt; is less than &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, this method is an O(1) operation.</source>
          <target state="translated">경우 &lt;xref:System.Collections.ArrayList.Count%2A&gt;는 보다 작은 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;,이 메서드는 o (1) 작업.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O 됩니다 용량을 새 요소로 적용로 늘려야 하는 경우 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to be added to the end of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;의 끝에 추가할 수는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> index at which the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> has been added.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 하는 인덱스는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept> 추가 되었습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Adds the elements of an &lt;xref:System.Collections.ICollection&gt; to the end of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">요소에 추가 &lt;xref:System.Collections.ICollection&gt;의 끝에는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the elements in the &lt;xref:System.Collections.ICollection&gt; is preserved in the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt; &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 유지&lt;/xref:System.Collections.ICollection&gt; 에 있는 요소의 순서</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new &lt;xref:System.Collections.ArrayList.Count%2A&gt; (the current &lt;xref:System.Collections.ArrayList.Count%2A&gt; plus the size of the collection) will be greater than &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, the capacity of the &lt;xref:System.Collections.ArrayList&gt; is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">하는 경우 새 &lt;xref:System.Collections.ArrayList.Count%2A&gt;(현재 &lt;xref:System.Collections.ArrayList.Count%2A&gt;컬렉션의 크기를 더한) 보다 커야 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;의 용량이 &lt;xref:System.Collections.ArrayList&gt;자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; can accommodate the new elements without increasing the &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements to be added.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;을 늘리지 않고도 새 요소를 수용할 수는 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;,이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 추가할 요소의 수입니다.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) operation, where <ph id="ph4">`n`</ph> is the number of elements to be added and <ph id="ph5">`m`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">용량을 새 요소를 수용 하기 위해 증가 하는 경우이 메서드는 O는 됩니다 (<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) 작업을 여기서 <ph id="ph4">`n`</ph> 요소를 추가할 수의 수 및 <ph id="ph5">`m`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; whose elements should be added to the end of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;의 끝에 있는 요소를 추가할는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The collection itself cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, but it can contain elements that are <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">컬렉션 자체가 일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 요소를 포함할 수는 있습니다 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Searches the entire sorted <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for an element using the default comparer and returns the zero-based index of the element.</source>
          <target state="translated">정렬 된 전체 검색 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소에 대 한 기본 비교자를 사용 하 고 요소의&amp;0;부터 시작 하는 인덱스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter and each element of the &lt;xref:System.Collections.ArrayList&gt; must implement the &lt;xref:System.IComparable&gt; interface, which is used for comparisons.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 매개 변수 및의 각 요소는 &lt;xref:System.Collections.ArrayList&gt;구현 해야 합니다는 &lt;xref:System.IComparable&gt;비교에 사용 되는 인터페이스입니다.&lt;/xref:System.IComparable&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the &lt;xref:System.Collections.ArrayList&gt; must already be sorted in increasing value according to the sort order defined by the &lt;xref:System.IComparable&gt; implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 &lt;xref:System.IComparable&gt;구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.&lt;/xref:System.IComparable&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using &lt;xref:System.IComparable&gt;.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 &lt;xref:System.IComparable&gt;.&lt;/xref:System.IComparable&gt; 를 사용 하는 경우 예외가 생성 되지 않습니다</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inserting the value into the &lt;xref:System.Collections.ArrayList&gt;, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">값을 삽입할 때는 &lt;xref:System.Collections.ArrayList&gt;, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate.</source>
          <target state="translated">&lt;xref:System.Object&gt;찾으려고 합니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The zero-based index of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> in the sorted <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p3">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p4">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count*&gt;.</source>
          <target state="translated">부터 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 정렬 된 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>경우 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">value</ph> <ept id="p3">&lt;/code&gt;</ept> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <bpt id="p4">&lt;code&gt;</bpt> <ph id="ph3">value</ph> <ept id="p4">&lt;/code&gt;</ept> 또는 &lt;xref:System.Collections.ArrayList.Count*&gt;.&lt;/xref:System.Collections.ArrayList.Count*&gt; 의 비트 보수 더 큰 요소가 없는 경우</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Neither <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> nor the elements of <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implement the &lt;xref:System.IComparable&gt; interface.</source>
          <target state="translated">모두 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 나 요소의 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구현는 &lt;xref:System.IComparable&gt;인터페이스.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>요소와 동일한 형식의 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Searches the entire sorted <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">정렬 된 전체 검색 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소에 대 한 지정된 된 비교자를 사용 하 고 요소의&amp;0;부터 시작 하는 인덱스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use a &lt;xref:System.Collections.CaseInsensitiveComparer&gt; instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">예를 들어, 사용할 수는 &lt;xref:System.Collections.CaseInsensitiveComparer&gt;대/소문자 구분 문자열 검색을 수행 하는 비교자로 인스턴스.&lt;/xref:System.Collections.CaseInsensitiveComparer&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the &lt;xref:System.Collections.ArrayList&gt; are compared to the specified value using the specified &lt;xref:System.Collections.IComparer&gt; implementation.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 제공의 요소는 &lt;xref:System.Collections.ArrayList&gt;사용 하 여 지정된 된 값과 비교할 &lt;xref:System.Collections.IComparer&gt;구현.&lt;/xref:System.Collections.IComparer&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the &lt;xref:System.Collections.ArrayList&gt; must already be sorted in increasing value according to the sort order defined by <ph id="ph1">`comparer`</ph>; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 <ph id="ph1">`comparer`</ph>, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the comparison is done using the &lt;xref:System.IComparable&gt; implementation provided by the element itself or by the specified value.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 은 <ph id="ph2">`null`</ph>, 비교를 수행를 사용 하는 &lt;xref:System.IComparable&gt;또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the &lt;xref:System.Collections.ArrayList&gt; must already be sorted in increasing value according to the sort order defined by the &lt;xref:System.IComparable&gt; implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 &lt;xref:System.IComparable&gt;구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.&lt;/xref:System.IComparable&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using &lt;xref:System.IComparable&gt;.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 &lt;xref:System.IComparable&gt;.&lt;/xref:System.IComparable&gt; 를 사용 하는 경우 예외가 생성 되지 않습니다</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inserting the value into the &lt;xref:System.Collections.ArrayList&gt;, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">값을 삽입할 때는 &lt;xref:System.Collections.ArrayList&gt;, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate.</source>
          <target state="translated">&lt;xref:System.Object&gt;찾으려고 합니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;요소를 비교할 때 사용할 구현입니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer that is the &lt;xref:System.IComparable&gt; implementation of each element.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 되는 기본 비교자를 사용 하는 &lt;xref:System.IComparable&gt;각 요소의 구현.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The zero-based index of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> in the sorted <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p3">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p4">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count*&gt;.</source>
          <target state="translated">부터 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 정렬 된 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>경우 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">value</ph> <ept id="p3">&lt;/code&gt;</ept> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <bpt id="p4">&lt;code&gt;</bpt> <ph id="ph3">value</ph> <ept id="p4">&lt;/code&gt;</ept> 또는 &lt;xref:System.Collections.ArrayList.Count*&gt;.&lt;/xref:System.Collections.ArrayList.Count*&gt; 의 비트 보수 더 큰 요소가 없는 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and neither <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> nor the elements of <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implement the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 않으며 <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> 의 요소 또는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구현는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> 의 요소와 동일한 형식의 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Searches a range of elements in the sorted <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">정렬 된 범위에서 요소를 검색 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소에 대 한 지정된 된 비교자를 사용 하 고 요소의&amp;0;부터 시작 하는 인덱스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">비교자는 요소를 비교 하는 방법을 사용자 지정 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use a &lt;xref:System.Collections.CaseInsensitiveComparer&gt; instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">예를 들어, 사용할 수는 &lt;xref:System.Collections.CaseInsensitiveComparer&gt;대/소문자 구분 문자열 검색을 수행 하는 비교자로 인스턴스.&lt;/xref:System.Collections.CaseInsensitiveComparer&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the &lt;xref:System.Collections.ArrayList&gt; are compared to the specified value using the specified &lt;xref:System.Collections.IComparer&gt; implementation.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 제공의 요소는 &lt;xref:System.Collections.ArrayList&gt;사용 하 여 지정된 된 값과 비교할 &lt;xref:System.Collections.IComparer&gt;구현.&lt;/xref:System.Collections.IComparer&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the &lt;xref:System.Collections.ArrayList&gt; must already be sorted in increasing value according to the sort order defined by <ph id="ph1">`comparer`</ph>; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야 <ph id="ph1">`comparer`</ph>, 그렇지 않으면 결과가 올바르지 않을 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the comparison is done using the &lt;xref:System.IComparable&gt; implementation provided by the element itself or by the specified value.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 은 <ph id="ph2">`null`</ph>, 비교를 수행를 사용 하는 &lt;xref:System.IComparable&gt;또는 지정 된 값은 요소 자체에서 제공 되는 구현 합니다.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements of the &lt;xref:System.Collections.ArrayList&gt; must already be sorted in increasing value according to the sort order defined by the &lt;xref:System.IComparable&gt; implementation; otherwise, the result might be incorrect.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.ArrayList&gt;값으로 정의 된 정렬 순서에 따라 증가 하도록 정렬 되어 있어야는 &lt;xref:System.IComparable&gt;구현을 제공 합니다; 그렇지 않으면 결과 잘못 되었을 수 있습니다.&lt;/xref:System.IComparable&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing <ph id="ph1">`null`</ph> with any type is allowed and does not generate an exception when using &lt;xref:System.IComparable&gt;.</source>
          <target state="translated">비교 <ph id="ph1">`null`</ph> 종류와 허용 되 고 &lt;xref:System.IComparable&gt;.&lt;/xref:System.IComparable&gt; 를 사용 하는 경우 예외가 생성 되지 않습니다</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">정렬할 때 <ph id="ph1">`null`</ph> 다른 개체 보다 작은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;포함 둘 이상의 요소가 동일한 값을 가진 메서드가 반환, 각 항목 중 하 나와 반드시 첫 번째 항목 중 하나를 반환할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;지정 된 값이 포함 되지 않는 메서드가 음의 정수를 반환 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">검색 값 보다 큰 첫 번째 요소의 인덱스를 가져올이 음의 정수 비트 보수 연산을 (~)를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inserting the value into the &lt;xref:System.Collections.ArrayList&gt;, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">값을 삽입할 때는 &lt;xref:System.Collections.ArrayList&gt;, 정렬 순서를 유지 하기 위해이 인덱스를 삽입 지점으로 사용 해야 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(log <ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는는 O (로그 <ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the range to search.</source>
          <target state="translated">검색할 범위의 시작 인덱스&amp;0;부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The length of the range to search.</source>
          <target state="translated">검색할 범위의 길이입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate.</source>
          <target state="translated">&lt;xref:System.Object&gt;찾으려고 합니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;요소를 비교할 때 사용할 구현입니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the default comparer that is the &lt;xref:System.IComparable&gt; implementation of each element.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 되는 기본 비교자를 사용 하는 &lt;xref:System.IComparable&gt;각 요소의 구현.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The zero-based index of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> in the sorted <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p3">&lt;/code&gt;</ept> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p4">&lt;/code&gt;</ept> or, if there is no larger element, the bitwise complement of &lt;xref:System.Collections.ArrayList.Count*&gt;.</source>
          <target state="translated">부터 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 정렬 된 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>경우 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">value</ph> <ept id="p3">&lt;/code&gt;</ept> 이 고, 그렇지 않으면 음수 번호 보다 큰 다음 요소의 인덱스의 비트 보수인 <bpt id="p4">&lt;code&gt;</bpt> <ph id="ph3">value</ph> <ept id="p4">&lt;/code&gt;</ept> 또는 &lt;xref:System.Collections.ArrayList.Count*&gt;.&lt;/xref:System.Collections.ArrayList.Count*&gt; 의 비트 보수 더 큰 요소가 없는 경우</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 의 올바른 범위를 나타내지 않습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and neither <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> nor the elements of <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implement the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph> 은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 않으며 <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> 의 요소 또는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 구현는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> is not of the same type as the elements of the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;comparer&lt;/code&gt;</ph><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> 의 요소와 동일한 형식의 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of elements that the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">요소의 수를 가져오거나는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Capacity is the number of elements that the &lt;xref:System.Collections.ArrayList&gt; can store.</source>
          <target state="translated">용량에는 요소의 수가 하는 &lt;xref:System.Collections.ArrayList&gt;저장할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList.Count%2A&gt; is the number of elements that are actually in the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList.Count%2A&gt;에서 요소를 실제로 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 의 수&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Capacity is always greater than or equal to &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">용량은 항상 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt; 보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.ArrayList.Count%2A&gt; exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">경우 &lt;xref:System.Collections.ArrayList.Count%2A&gt;요소를 추가 하는 동안 용량을 초과 하면, 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 용량을 증가 시켜 자동으로.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt; or by setting the Capacity property explicitly.</source>
          <target state="translated">호출 하 여 용량을 줄일 수 있습니다 &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;또는 용량 속성을 명시적으로 설정 하 여.&lt;/xref:System.Collections.ArrayList.TrimToSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</source>
          <target state="translated">용량 값을 명시적으로 설정 하는 경우 내부 배열에서 지정 된 용량에 맞게도 다시 할당 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the new capacity.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. 속성을 설정 하는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 새 용량입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The number of elements that the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">요소의 수는는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Capacity is set to a value that is less than &lt;xref:System.Collections.ArrayList.Count*&gt;.</source>
          <target state="translated">용량이 &lt;xref:System.Collections.ArrayList.Count*&gt;.&lt;/xref:System.Collections.ArrayList.Count*&gt; 보다 작은 값으로 설정 되어</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">시스템에서 사용할 수 있는 메모리가 부족 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Removes all elements from the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">모든 요소를 제거는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList.Count%2A&gt;가&amp;0;으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList.Capacity%2A&gt; remains unchanged.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;변경 되지 않습니다.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset the capacity of the &lt;xref:System.Collections.ArrayList&gt;, call &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt; or set the &lt;xref:System.Collections.ArrayList.Capacity%2A&gt; property directly.</source>
          <target state="translated">용량을 다시 설정 하는 &lt;xref:System.Collections.ArrayList&gt;, 호출 &lt;xref:System.Collections.ArrayList.TrimToSize%2A&gt;설정 또는 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;속성을 직접.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.TrimToSize%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty &lt;xref:System.Collections.ArrayList&gt; sets the capacity of the &lt;xref:System.Collections.ArrayList&gt; to the default capacity.</source>
          <target state="translated">빈 트리밍 &lt;xref:System.Collections.ArrayList&gt;의 용량 설정는 &lt;xref:System.Collections.ArrayList&gt;기본 용량을.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">단순 복사본을 만듭니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">컬렉션의 단순 복사본은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다 여부는 컬렉션의 요소에만 복사 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">단순 복사는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 요소가 있는지 여부를 결정은 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Copies the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the beginning of the target array.</source>
          <target state="translated">전체 복사 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호환 되는&amp;1; 차원 &lt;xref:System.Array&gt;대상 배열의 처음부터 시작 하는 위치입니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;요소를 복사해올.&lt;/xref:System.Array.Copy%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;열거자 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 을 반복 하는 같은 순서로&lt;/xref:System.Array&gt; 요소가 복사 되</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 차원 &lt;xref:System.Array&gt;에서 복사한 요소의 대상인 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0부터 시작 하는 인덱스가 있어야 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the number of elements that the destination <ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> can contain.</source>
          <target state="translated">-또는-소스에 있는 요소의 수 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소 수보다 크면 하는 대상 <ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">소스의 형식을 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 대상의 형식으로 자동 캐스팅할 수 없는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Copies the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</source>
          <target state="translated">전체 복사 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호환 되는&amp;1; 차원 &lt;xref:System.Array&gt;대상 배열의 지정된 된 인덱스부터 시작 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;요소를 복사해올.&lt;/xref:System.Array.Copy%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;열거자 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 을 반복 하는 같은 순서로&lt;/xref:System.Array&gt; 요소가 복사 되</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 차원 &lt;xref:System.Array&gt;에서 복사한 요소의 대상인 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0부터 시작 하는 인덱스가 있어야 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">인덱스는&amp;0;부터 시작 <ph id="ph1">`array`</ph> 복사가 시작 되는 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">-또는-소스에 있는 요소의 수 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에서 사용 가능한 공간 보다 큰 <ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> 대상의 끝에 <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">소스의 형식을 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 대상의 형식으로 자동 캐스팅할 수 없는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Copies a range of elements from the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a compatible one-dimensional &lt;xref:System.Array&gt;, starting at the specified index of the target array.</source>
          <target state="translated">요소의 범위를 복사는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호환 되는&amp;1; 차원 &lt;xref:System.Array&gt;대상 배열의 지정된 된 인덱스부터 시작 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">지정된 된 배열의 호환 되는 형식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt; to copy the elements.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;요소를 복사해올.&lt;/xref:System.Array.Copy%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;열거자 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 을 반복 하는 같은 순서로&lt;/xref:System.Array&gt; 요소가 복사 되</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The zero-based index in the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> at which copying begins.</source>
          <target state="translated">원본 인덱스는&amp;0;부터 시작 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 복사가 시작 되는 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 차원 &lt;xref:System.Array&gt;에서 복사한 요소의 대상인 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0부터 시작 하는 인덱스가 있어야 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">인덱스는&amp;0;부터 시작 <ph id="ph1">`array`</ph> 복사가 시작 되는 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The number of elements to copy.</source>
          <target state="translated">복사할 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph> of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크거나 같으면는 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph> 소스의 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements from <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph2">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> to the end of the destination <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">-또는-에서 요소 수가 <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 소스 끝에 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에서 사용 가능한 공간 보다 큰 <ph id="ph2">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> 대상의 끝에 <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">소스의 형식을 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 대상의 형식으로 자동 캐스팅할 수 없는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Gets the number of elements actually contained in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 실제로 포함 된 요소의 수를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList.Capacity%2A&gt; is the number of elements that the &lt;xref:System.Collections.ArrayList&gt; can store.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;요소의 수가 하는 &lt;xref:System.Collections.ArrayList&gt;저장할 수 있습니다.&lt;/xref:System.Collections.ArrayList&gt;&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt;</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Count is the number of elements that are actually in the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">Count가 실제로 있는 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 에 있는 요소 수</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList.Capacity%2A&gt; is always greater than or equal to Count.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList.Capacity%2A&gt;개수 보다 크거나 같은 경우 항상입니다.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Count exceeds &lt;xref:System.Collections.ArrayList.Capacity%2A&gt; while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">개수를 초과 하는 경우 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;요소를 추가 하는 동안 용량이 자동으로 증가 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여.&lt;/xref:System.Collections.ArrayList.Capacity%2A&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하는 것은 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The number of elements actually contained in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 실제로 포함 된 요소의 수는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper with a fixed size.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 고정된 크기입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>This wrapper can be used to prevent additions to and deletions from the original &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">이 래퍼를 추가 및 원래 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 삭제를 방지 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements can still be modified or replaced.</source>
          <target state="translated">여전히 요소를 수정 하거나 바꿀 수 있습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to wrap.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래핑할 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper with a fixed size.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 고정된 크기입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IList&gt; wrapper with a fixed size.</source>
          <target state="translated">반환 된 &lt;xref:System.Collections.IList&gt;고정된 크기.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>This wrapper can be used to prevent additions to and deletions from the original &lt;xref:System.Collections.IList&gt;.</source>
          <target state="translated">이 래퍼를 추가 및 원래 &lt;xref:System.Collections.IList&gt;.&lt;/xref:System.Collections.IList&gt; 삭제를 방지 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements can still be modified or replaced.</source>
          <target state="translated">여전히 요소를 수정 하거나 바꿀 수 있습니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IList&gt; to wrap.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;래핑할.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IList&gt; wrapper with a fixed size.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;고정된 크기.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">전체에 대 한 열거자를 반환 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`for each`</ph> Visual basic에서)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">따라서 사용 하 여 <ph id="ph1">`foreach`</ph> 열거자를 직접 조작 하는 대신이 좋습니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;또한이 위치로 복원 열거자를 가져옵니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">이 위치에서 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">따라서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환할 수도 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;그 뒤 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 설정 하려면</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator&gt;전체 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for a range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">요소 범위에 대 한 열거자를 반환 합니다.는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual C++, <ph id="ph3">`For Each`</ph> Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`for each`</ph> Visual c + +에서 <ph id="ph3">`For Each`</ph> Visual Basic)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">따라서 사용 하 여 <ph id="ph1">`foreach`</ph> 열거자를 직접 조작 하는 대신이 좋습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;또한이 위치로 복원 열거자를 가져옵니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">이 위치에서 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">따라서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환할 수도 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;그 뒤 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 설정 하려면</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Compatibility    In the .NET Framework versions 1.0 and 1.1, the enumerator for an &lt;xref:System.Collections.ArrayList&gt; wrapper returned by the &lt;xref:System.Collections.ArrayList.Adapter%2A&gt; method treated the second argument as an upper bound rather than as a count.</source>
          <target state="translated">버전 호환성.NET Framework 버전 1.0 및 1.1에서는 열거자에 대 한 프로그램 &lt;xref:System.Collections.ArrayList&gt;반환한 래퍼는 &lt;xref:System.Collections.ArrayList.Adapter%2A&gt;메서드 아닌 수로 상한을으로 두 번째 인수를 처리 합니다.&lt;/xref:System.Collections.ArrayList.Adapter%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> the second argument is correctly treated as a count.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</ph> 두 번째 인수 수로 올바르게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> section that the enumerator should refer to.</source>
          <target state="translated">0부터 시작 인덱스는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 열거자를 참조 해야 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The number of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> section that the enumerator should refer to.</source>
          <target state="translated">에 있는 요소의 수는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 열거자를 참조 해야 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the specified range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator&gt;의 요소는 지정 된 범위는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid range in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 의 올바른 범위를 지정 하지 않으면는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> which represents a subset of the elements in the source <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 소스에 있는 요소의 하위 집합을 나타내는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create copies of the elements.</source>
          <target state="translated">이 메서드는 요소의 복사본을 만들지 않습니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new &lt;xref:System.Collections.ArrayList&gt; is only a view window into the source &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">새 &lt;xref:System.Collections.ArrayList&gt;원본 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 보기 창이&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, all subsequent changes to the source &lt;xref:System.Collections.ArrayList&gt; must be done through this view window &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">그러나 모든 후속 변경 내용은 원본 &lt;xref:System.Collections.ArrayList&gt;보기 창 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 이 통해 수행 되어야 합니다&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made directly to the source &lt;xref:System.Collections.ArrayList&gt;, the view window &lt;xref:System.Collections.ArrayList&gt; is invalidated and any operations on it will return an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">소스에 직접 변경 되 면 &lt;xref:System.Collections.ArrayList&gt;를 보기 창 &lt;xref:System.Collections.ArrayList&gt;무효화 될 것에 대 한 모든 작업 &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; 을 반환 합니다&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The zero-based <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> index at which the range starts.</source>
          <target state="translated">0부터 시작 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 범위 시작 되는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The number of elements in the range.</source>
          <target state="translated">범위에 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> which represents a subset of the elements in the source <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 소스에 있는 요소의 하위 집합을 나타내는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;전체에서 처음 나타나는&amp;0;부터 시작 하는 인덱스를 반환 하 고 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;검색은 앞으로 첫 번째 요소부터 마지막 요소에서.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the entire <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if found; otherwise, -1.</source>
          <target state="translated">첫 번째로 나타나는 항목의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 전체 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>이거나, 없는 경우, 그렇지 않으면-1입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that extends from the specified index to the last element.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;의 요소 범위 내에서 처음 나타나는&amp;0;부터 시작 인덱스를 반환 하 고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 인덱스에서 마지막 요소로 확장 하는.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched forward starting at <ph id="ph1">`startIndex`</ph> and ending at the last element.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;까지 검색은 <ph id="ph1">`startIndex`</ph> 마지막 요소의 끝.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements from <ph id="ph3">`startIndex`</ph> to the end of the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 의 요소 수 <ph id="ph3">`startIndex`</ph> &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 의 끝에</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">검색의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (영) 빈 목록에서 유효합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the range of elements in the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that extends from <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">startIndex</ph><ept id="p3">&lt;/code&gt;</ept> to the last element, if found; otherwise, -1.</source>
          <target state="translated">첫 번째로 나타나는 항목의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 의 요소 범위 내에서 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 에서 확장 하는 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">startIndex</ph> <ept id="p3">&lt;/code&gt;</ept> 검색 되지 않으면, 마지막 요소까지-1입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph>유효한 인덱스 범위를 벗어났습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the first occurrence within the range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;의 요소 범위 내에서 처음 나타나는&amp;0;부터 시작 인덱스를 반환 하 고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 인덱스에서 시작 하는 지정 된 개수의 요소를 포함 하.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched forward starting at <ph id="ph1">`startIndex`</ph> and ending at <ph id="ph2">`startIndex`</ph> plus <ph id="ph3">`count`</ph> minus 1, if <ph id="ph4">`count`</ph> is greater than 0.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;까지 검색은 <ph id="ph1">`startIndex`</ph> 에서 끝나는 <ph id="ph2">`startIndex`</ph> 플러스 <ph id="ph3">`count`</ph> 에서 1을 뺀 경우 <ph id="ph4">`count`</ph> 가 0 보다 크면.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">검색의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">0 (영) 빈 목록에서 유효합니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The number of elements in the section to search.</source>
          <target state="translated">검색할 섹션에 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the range of elements in the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that starts at <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">startIndex</ph><ept id="p3">&lt;/code&gt;</ept> and contains <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p4">&lt;/code&gt;</ept> number of elements, if found; otherwise, -1.</source>
          <target state="translated">첫 번째로 나타나는 항목의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 의 요소 범위 내에서 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 에서 시작 하 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">startIndex</ph> <ept id="p3">&lt;/code&gt;</ept> 포함 <bpt id="p4">&lt;code&gt;</bpt> <ph id="ph3">count</ph> <ept id="p4">&lt;/code&gt;</ept> 개의 요소를 검색 되지 않으면-1입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph>유효한 인덱스 범위를 벗어났습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> 및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 의 올바른 섹션을 지정 하지 않으면는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Inserts an element into the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> at the specified index.</source>
          <target state="translated">요소를 삽입는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.ArrayList.Count%2A&gt; already equals &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, the capacity of the &lt;xref:System.Collections.ArrayList&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">경우 &lt;xref:System.Collections.ArrayList.Count%2A&gt;이미 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;의 용량이 &lt;xref:System.Collections.ArrayList&gt;자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`index`</ph> is equal to &lt;xref:System.Collections.ArrayList.Count%2A&gt;, <ph id="ph2">`value`</ph> is added to the end of &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 같으면 &lt;xref:System.Collections.ArrayList.Count%2A&gt;, <ph id="ph2">`value`</ph> &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 의 끝에 추가&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">연속 요소를 컬렉션의 목록, 삽입 지점 다음에 오는 요소를 아래로 이동 처럼 새 요소를 적용 합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The zero-based index at which <ph id="ph1">`value`</ph> should be inserted.</source>
          <target state="translated">인덱스&amp;0;부터 시작 <ph id="ph1">`value`</ph> 삽입 해야 합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to insert.</source>
          <target state="translated">&lt;xref:System.Object&gt;삽입할.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Inserts the elements of a collection into the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> at the specified index.</source>
          <target state="translated">컬렉션의 요소를 삽입 하는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new &lt;xref:System.Collections.ArrayList.Count%2A&gt; (the current &lt;xref:System.Collections.ArrayList.Count%2A&gt; plus the size of the collection) will be greater than &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;, the capacity of the &lt;xref:System.Collections.ArrayList&gt; is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">하는 경우 새 &lt;xref:System.Collections.ArrayList.Count%2A&gt;(현재 &lt;xref:System.Collections.ArrayList.Count%2A&gt;컬렉션의 크기를 더한) 보다 커야 &lt;xref:System.Collections.ArrayList.Capacity%2A&gt;의 용량이 &lt;xref:System.Collections.ArrayList&gt;자동으로 새 요소를 수용 하기 위해 내부 배열을 다시 할당 하 여 증가 새 요소를 추가 하기 전에 기존 요소를 새 배열에 복사 됩니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList.Capacity%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt; &lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`index`</ph> is equal to &lt;xref:System.Collections.ArrayList.Count%2A&gt;, the elements are added to the end of &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 같은지 &lt;xref:System.Collections.ArrayList.Count%2A&gt;, 요소 &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 의 끝에 추가 되며&lt;/xref:System.Collections.ArrayList.Count%2A&gt; 를</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the elements in the &lt;xref:System.Collections.ICollection&gt; is preserved in the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt; &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 유지&lt;/xref:System.Collections.ICollection&gt; 에 있는 요소의 순서</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">연속 요소를 컬렉션의 목록, 삽입 지점 다음에 오는 요소를 아래로 이동 처럼 새 요소를 적용 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) operation, where <ph id="ph4">`n`</ph> is the number of elements to be added and <ph id="ph5">`m`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph><ph id="ph2"> + </ph><ph id="ph3">`m`</ph>) 작업, 여기서 <ph id="ph4">`n`</ph> 요소를 추가할 수의 수 및 <ph id="ph5">`m`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The zero-based index at which the new elements should be inserted.</source>
          <target state="translated">새 요소를 삽입 해야 하는&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; whose elements should be inserted into the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;에 요소를 삽입 해야는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The collection itself cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, but it can contain elements that are <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">컬렉션 자체가 일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 요소를 포함할 수는 있습니다 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">컬렉션 크기가 고정된 된 컬렉션을 만든 후 기존 요소를 수정할 수 있습니다에 추가 하거나 제거할 요소의 수 없습니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">크기가 고정된 된 컬렉션은 지정 된 추가 및 요소를 제거 하지 못하도록 하는 래퍼 컬렉션 따라서를 추가 하거나 제거할 요소를 포함 하 여 내부 컬렉션을 변경 하는 경우 고정 크기 컬렉션에 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하는 것은 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has a fixed size; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 고정 되어 고, 그렇지 않으면 크기가 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated">나타내는 값을 가져옵니다 여부는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">읽기 전용 컬렉션에서는 컬렉션을 만든 후에 추가, 제거 또는 요소를 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하는 것은 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is read-only; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 읽기 전용, 되지 않았으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 동기화 되었으면 (스레드로부터 안전 하 게 보호).</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.ArrayList&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.ArrayList.Synchronized%2A&gt; method.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 &lt;xref:System.Collections.ArrayList&gt;에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 &lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;메서드.&lt;/xref:System.Collections.ArrayList.Synchronized%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if access to the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우에 대 한 액세스는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 은 동기화 (스레드로부터 안전함); 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">지정된 된 인덱스에 요소를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Item returns an &lt;xref:System.Object&gt;, so you may need to cast the returned value to the original type in order to manipulate it.</source>
          <target state="translated">항목을 반환 된 &lt;xref:System.Object&gt;이므로 합니다. 조작 하기 위해 원래 형식으로 반환된 된 값을 캐스팅 해야 할 수 있습니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important to note that &lt;xref:System.Collections.ArrayList&gt; is not a strongly-typed collection.</source>
          <target state="translated">사항에 유의 해야 &lt;xref:System.Collections.ArrayList&gt;는 강력한 형식의 컬렉션이 아닙니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a strongly-typed alternative, see &lt;xref:System.Collections.Generic.List%601&gt;.</source>
          <target state="translated">강력한 형식의 좋은 &lt;xref:System.Collections.Generic.List%601&gt;.&lt;/xref:System.Collections.Generic.List%601&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소를 액세스 하는 기능 제공: <ph id="ph1">`myCollection[index]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the Item property.</source>
          <target state="translated">C# 언어는 키워드를 사용 하 여 항목 속성을 구현 하는 대신 인덱서를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic implements Item as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 기본 속성으로 항목을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">가져오거나 설정할 요소의&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The element at the specified index.</source>
          <target state="translated">지정된 된 인덱스에 요소입니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크거나 같으면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;전체에서 마지막 요소의&amp;0;부터 시작 하는 인덱스를 반환 하 고 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;뒤로 마지막 요소에서 시작 하 고 첫 번째 요소의 끝에 검색 됩니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The zero-based index of the last occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the entire the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if found; otherwise, -1.</source>
          <target state="translated">마지막으로 나타나는 항목의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 전체는 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>이거나, 없는 경우, 그렇지 않으면-1입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that extends from the first element to the specified index.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;의 요소 범위에서 마지막으로 검색의&amp;0;부터 시작 하는 인덱스를 반환 하 고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 첫 번째 요소에서 지정 된 인덱스로 확장 하는.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched backward starting at <ph id="ph1">`startIndex`</ph> and ending at the first element.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;뒤로 검색 됩니다에 <ph id="ph1">`startIndex`</ph> 첫 번째 요소에서 끝나는.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements from the beginning of the &lt;xref:System.Collections.ArrayList&gt; to <ph id="ph3">`startIndex`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 의 시작 부분에서 요소 수는 &lt;xref:System.Collections.ArrayList&gt;를 <ph id="ph3">`startIndex`</ph>.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">역방향 검색의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The zero-based index of the last occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the range of elements in the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that extends from the first element to <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">startIndex</ph><ept id="p3">&lt;/code&gt;</ept>, if found; otherwise, -1.</source>
          <target state="translated">마지막으로 나타나는 항목의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 의 요소 범위 내에서 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 에서 첫 번째 요소를 확장 하는 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">startIndex</ph> <ept id="p3">&lt;/code&gt;</ept>이거나, 없는 경우, 그렇지 않으면-1입니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph>유효한 인덱스 범위를 벗어났습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Searches for the specified &lt;xref:System.Object&gt; and returns the zero-based index of the last occurrence within the range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated">지정된 된 검색 &lt;xref:System.Object&gt;의 요소 범위에서 마지막으로 검색의&amp;0;부터 시작 하는 인덱스를 반환 하 고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 수의 지정된 된 인덱스에서 끝나고 요소를 포함 하는.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.ArrayList&gt; is searched backward starting at <ph id="ph1">`startIndex`</ph> and ending at <ph id="ph2">`startIndex`</ph> minus <ph id="ph3">`count`</ph> plus 1, if <ph id="ph4">`count`</ph> is greater than 0.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;뒤로 검색 됩니다에 <ph id="ph1">`startIndex`</ph> 에서 끝나는 <ph id="ph2">`startIndex`</ph> 뺀 <ph id="ph3">`count`</ph> + 1, 경우 <ph id="ph4">`count`</ph> 가 0 보다 크면.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`item`</ph> to determine whether item exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`item`</ph> 항목이 있는지 여부를 확인 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`item`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">역방향 검색의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The number of elements in the section to search.</source>
          <target state="translated">검색할 섹션에 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The zero-based index of the last occurrence of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> within the range of elements in the <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> that contains <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p3">&lt;/code&gt;</ept> number of elements and ends at <bpt id="p4">&lt;code&gt;</bpt><ph id="ph3">startIndex</ph><ept id="p4">&lt;/code&gt;</ept>, if found; otherwise, -1.</source>
          <target state="translated">중 마지막 요소의&amp;0;부터 시작 인덱스 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept> 의 요소 범위 내에서 <bpt id="p2">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 포함 된 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p3">&lt;/code&gt;</ept> 에서 끝나고 요소 수 <bpt id="p4">&lt;code&gt;</bpt> <ph id="ph3">startIndex</ph> <ept id="p4">&lt;/code&gt;</ept>이거나, 없는 경우, 그렇지 않으면-1입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph>유효한 인덱스 범위를 벗어났습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> 및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 의 올바른 섹션을 지정 하지 않으면는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Returns a read-only <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper.</source>
          <target state="translated">읽기 전용 반환 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래퍼입니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent any modifications to <ph id="ph1">`list`</ph>, expose <ph id="ph2">`list`</ph> only through this wrapper.</source>
          <target state="translated">수정 하지 못하게 하려면 <ph id="ph1">`list`</ph>, 노출 <ph id="ph2">`list`</ph> 이 래퍼를 사용할 때만 합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to wrap.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래핑할 합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>A read-only <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper around <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">list</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">읽기 전용 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래퍼 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">list</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Returns a read-only &lt;xref:System.Collections.IList&gt; wrapper.</source>
          <target state="translated">읽기 전용 반환 &lt;xref:System.Collections.IList&gt;래퍼.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent any modifications to <ph id="ph1">`list`</ph>, expose <ph id="ph2">`list`</ph> only through this wrapper.</source>
          <target state="translated">수정 하지 못하게 하려면 <ph id="ph1">`list`</ph>, 노출 <ph id="ph2">`list`</ph> 이 래퍼를 사용할 때만 합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection.</source>
          <target state="translated">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">기본 컬렉션이 변경 될 경우 읽기 전용 컬렉션 해당 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IList&gt; to wrap.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;래핑할.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>A read-only &lt;xref:System.Collections.IList&gt; wrapper around <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">list</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">읽기 전용 &lt;xref:System.Collections.IList&gt;래퍼 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">list</ph> <ept id="p1">&lt;/code&gt;</ept>.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Removes the first occurrence of a specific object from the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">첫 번째는 특정 개체에서 제거 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Collections.ArrayList&gt; does not contain the specified object, the &lt;xref:System.Collections.ArrayList&gt; remains unchanged.</source>
          <target state="translated">경우는 &lt;xref:System.Collections.ArrayList&gt;지정 된 개체가 들어 있지 않은 여 &lt;xref:System.Collections.ArrayList&gt;변경 되지 않습니다.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
          <target state="translated">예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to remove from the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 제거 하 고 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Removes the element at the specified index of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정된 된 인덱스에 요소를 제거는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the element is removed, the size of the collection is adjusted and the value of the &lt;xref:System.Collections.ArrayList.Count%2A&gt; property is decreased by one.</source>
          <target state="translated">컬렉션의 크기 조정 되는 요소를 제거한 후의 값은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;속성은&amp;1; 씩 감소 합니다.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">제거할 요소의&amp;0;부터 시작 하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 보다 크거나 같으면 <ph id="ph2">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Removes a range of elements from the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">요소 범위를 제거는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">목록 처럼 연속 된 요소 컬렉션에서 제거 된 요소 다음에 오는 요소는 빈된 자리를 차지 하도록 위로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">컬렉션은 지정 된 경우 이동 되는 요소의 인덱스도 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">요소가 해시 테이블 같은 버킷으로 개념적으로 그룹화 되어 있는 컬렉션에는 이러한 동작이 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the range of elements to remove.</source>
          <target state="translated">제거할 요소 범위의 시작 인덱스&amp;0;부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The number of elements to remove.</source>
          <target state="translated">제거할 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose elements are copies of the specified value.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소가 지정된 된 값의 복사본 인 합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to copy multiple times in the new <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에 여러 번 새 복사할 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The number of times <ph id="ph1">`value`</ph> should be copied.</source>
          <target state="translated">횟수 <ph id="ph1">`value`</ph> 복사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">count</ph><ept id="p2">&lt;/code&gt;</ept> number of elements, all of which are copies of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 와 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">count</ph> <ept id="p2">&lt;/code&gt;</ept> 의 요소는 모두의 복사본 수 <bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">value</ph> <ept id="p3">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Reverses the order of the elements in the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">전체에 있는 요소의 순서를 반대로 바꿉니다 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt; to reverse the order of the elements, such that the element at &lt;xref:System.Collections.ArrayList&gt; [i], where i is any index within the range, moves to &lt;xref:System.Collections.ArrayList&gt; [j], where j equals <ph id="ph1">`index`</ph><ph id="ph2"> + </ph><ph id="ph3">`index`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> - i - 1.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 &lt;xref:System.Collections.ArrayList&gt;[i] 여기서 i 범위 내에 있는 인덱스는 이동 &lt;xref:System.Collections.ArrayList&gt;[j] 여기서 j는 <ph id="ph1">`index`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`index`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`count`</ph> -i-1.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Reverses the order of the elements in the specified range.</source>
          <target state="translated">지정 된 범위의 요소 순서를 반대로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt; to reverse the order of the elements, such that the element at &lt;xref:System.Collections.ArrayList&gt; [i], where i is any index within the range, moves to &lt;xref:System.Collections.ArrayList&gt; [j], where j equals <ph id="ph1">`index`</ph><ph id="ph2"> + </ph><ph id="ph3">`index`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> - i - 1.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;는 요소의 순서를 반대로 바꾸려면 되도록에 있는 요소 &lt;xref:System.Collections.ArrayList&gt;[i] 여기서 i 범위 내에 있는 인덱스는 이동 &lt;xref:System.Collections.ArrayList&gt;[j] 여기서 j는 <ph id="ph1">`index`</ph> <ph id="ph2"> + </ph> <ph id="ph3">`index`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`count`</ph> -i-1.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`count`</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`count`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the range to reverse.</source>
          <target state="translated">순서를 반대로 바꿀 범위의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The number of elements in the range to reverse.</source>
          <target state="translated">순서를 반대로 바꿀 범위의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 에 있는 요소의 유효한 범위를 나타내지 않습니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Copies the elements of a collection over a range of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">요소 범위에 대해 컬렉션의 요소를 복사는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.ArrayList&gt; accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">&lt;xref:System.Collections.ArrayList&gt;허용 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the elements in the &lt;xref:System.Collections.ICollection&gt; is preserved in the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt; &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 유지&lt;/xref:System.Collections.ICollection&gt; 에 있는 요소의 순서</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph> + 1) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph> + 1) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The zero-based <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> index at which to start copying the elements of <ph id="ph1">`c`</ph>.</source>
          <target state="translated">0부터 시작 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인덱스의 요소를 복사를 시작할 <ph id="ph1">`c`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; whose elements to copy to the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;요소를 복사할는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The collection itself cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, but it can contain elements that are <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">컬렉션 자체가 일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 요소를 포함할 수는 있습니다 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> plus the number of elements in <ph id="ph2">&lt;code&gt;c&lt;/code&gt;</ph> is greater than <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 에 있는 요소의 수를 더한 값 <ph id="ph2">&lt;code&gt;c&lt;/code&gt;</ph> 보다 크면 <ph id="ph3">&lt;xref:System.Collections.ArrayList.Count*&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;c&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Sorts the elements in the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">전체에 요소를 정렬 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses &lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;, which uses the QuickSort algorithm.</source>
          <target state="translated">이 방법은 사용 하 여 &lt;xref:System.Array.Sort%2A?displayProperty=fullName&gt;, QuickSort 알고리즘을 사용 하 여.&lt;/xref:System.Array.Sort%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a "less than or equal to" comparison operation determines which of two elements should occur first in the final sorted list.</source>
          <target state="translated">QuickSort 알고리즘은 비교 하는 "작음 보다 크거나 같음" 의미 정렬 (불안정 한 정렬을 라고도 함)은 최종 정렬 된 목록에서 먼저 발생 되어야 두 요소 중 비교 연산을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if two elements are equal, their original order might not be preserved.</source>
          <target state="translated">그러나 두 요소가 같은 경우 원래 순서 유지 되지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform a stable sort, you must implement a custom &lt;xref:System.Collections.IComparer&gt; interface to use with the other overloads of this method.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 &lt;xref:System.Collections.IComparer&gt;이 메서드의 다른 오버 로드와 함께 사용 하는 인터페이스입니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;; in the worst case it is an O(<ph id="ph4">`n`</ph>^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;최악의 경우에는 o (<ph id="ph4">`n`</ph>^2) 작업.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Sorts the elements in the entire <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified comparer.</source>
          <target state="translated">전체에 요소를 정렬 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 비교자를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the Sort method to  sort a list of objects with a custom comparer that implements the &lt;xref:System.Collections.IComparer&gt; interface.</source>
          <target state="translated">Sort 메서드를 사용 하 여 구현 하는 사용자 지정 비교자로 개체의 목록을 정렬 하는 &lt;xref:System.Collections.IComparer&gt;인터페이스.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you pass <ph id="ph1">`null`</ph> for <ph id="ph2">`comparer`</ph>, this method uses the &lt;xref:System.IComparable&gt; implementation of each element.</source>
          <target state="translated">전달 하는 경우 <ph id="ph1">`null`</ph> 에 대 한 <ph id="ph2">`comparer`</ph>, 사용 하 여이 메서드는 &lt;xref:System.IComparable&gt;각 요소의 구현.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you must make sure that the objects contained in the list implement the &lt;xref:System.Collections.IComparer&gt; interface or an exception will occur.</source>
          <target state="translated">이 경우 목록에 포함 된 개체를 구현 하는지 확인 해야는 &lt;xref:System.Collections.IComparer&gt;인터페이스 또는 예외가 발생 합니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, using the &lt;xref:System.IComparable&gt; implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">또한를 사용 하 여 &lt;xref:System.IComparable&gt;구현 목록 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 의미 이므로, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform a stable sort, you must implement a custom &lt;xref:System.Collections.IComparer&gt; interface.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 &lt;xref:System.Collections.IComparer&gt;인터페이스.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;; in the worst case it is an O(<ph id="ph4">`n`</ph>^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;최악의 경우에는 o (<ph id="ph4">`n`</ph>^2) 작업.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;요소를 비교할 때 사용할 구현입니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>-or-       A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic) to use the &lt;xref:System.IComparable&gt; implementation of each element.</source>
          <target state="translated">-또는-null 참조 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual basic에서) 사용 하는 &lt;xref:System.IComparable&gt;각 요소의 구현.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>An error occurred while comparing two elements.</source>
          <target state="translated">두 요소를 비교 하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">comparer</ph><ept id="p2">&lt;/code&gt;</ept>, and the elements in the list do not implement &lt;xref:System.IComparable&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>에 대 한 전달 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">comparer</ph> <ept id="p2">&lt;/code&gt;</ept>, 목록에서 요소 &lt;xref:System.IComparable&gt;.&lt;/xref:System.IComparable&gt; 를 구현 하지 않습니다</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Sorts the elements in a range of elements in <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified comparer.</source>
          <target state="translated">요소 범위에 요소를 정렬 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 비교자를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is set to <ph id="ph2">`null`</ph>, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">경우 <ph id="ph1">`comparer`</ph> 로 설정 된 <ph id="ph2">`null`</ph>, 즉, 두 개의 요소가 동일한 경우 해당 순서 수 유지 되지 않으면이 메서드 (불안정 한 정렬을 라고도 함) 비교 정렬을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">반면, 안정적인 정렬 같은 요소의 순서를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform a stable sort, you must implement a custom &lt;xref:System.Collections.IComparer&gt; interface.</source>
          <target state="translated">안정적인 정렬을 수행 하려면 사용자 지정을 구현 해야 &lt;xref:System.Collections.IComparer&gt;인터페이스.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>On average, this method is an O(<ph id="ph1">`n`</ph> log <ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">`count`</ph>; in the worst case it is an O(n^2) operation.</source>
          <target state="translated">평균적으로이 메서드는는 O (<ph id="ph1">`n`</ph> 로그 <ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">`count`</ph>최악의 경우에는 O(n^2) 연산입니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">정렬할 범위의의&amp;0;부터 시작 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The length of the range to sort.</source>
          <target state="translated">정렬할 범위의 길이입니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IComparer&gt; implementation to use when comparing elements.</source>
          <target state="translated">&lt;xref:System.Collections.IComparer&gt;요소를 비교할 때 사용할 구현입니다.&lt;/xref:System.Collections.IComparer&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>-or-       A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic) to use the &lt;xref:System.IComparable&gt; implementation of each element.</source>
          <target state="translated">-또는-null 참조 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Visual basic에서) 사용 하는 &lt;xref:System.IComparable&gt;각 요소의 구현.&lt;/xref:System.IComparable&gt;</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> 가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid range in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>및 <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> 의 올바른 범위를 지정 하지 않으면는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>An error occurred while comparing two elements.</source>
          <target state="translated">두 요소를 비교 하는 동안 오류가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper that is synchronized (thread safe).</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래퍼를 동기화 (스레드로부터 안전함).</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.ArrayList&gt;, all operations must be done through this wrapper.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 &lt;xref:System.Collections.ArrayList&gt;,이 래퍼를 통해 모든 작업을 완료 해야 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 동기화 합니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper that is synchronized (thread safe).</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래퍼를 동기화 (스레드로부터 안전함).</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IList&gt; wrapper that is synchronized (thread safe).</source>
          <target state="translated">반환 된 &lt;xref:System.Collections.IList&gt;래퍼를 동기화 (스레드로부터 안전함).&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.ArrayList&gt;, all operations must be done through this wrapper.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 &lt;xref:System.Collections.ArrayList&gt;,이 래퍼를 통해 모든 작업을 완료 해야 합니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.IList&gt; to synchronize.</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;동기화.&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IList&gt; wrapper that is synchronized (thread safe).</source>
          <target state="translated">&lt;xref:System.Collections.IList&gt;래퍼를 동기화 (스레드로부터 안전함).&lt;/xref:System.Collections.IList&gt;</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;list&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a synchronized version of the &lt;xref:System.Collections.ArrayList&gt;, use the &lt;xref:System.Collections.ArrayList.Synchronized%2A&gt; method.</source>
          <target state="translated">동기화 된 버전을 만들려면는 &lt;xref:System.Collections.ArrayList&gt;를 사용 하 여는 &lt;xref:System.Collections.ArrayList.Synchronized%2A&gt;메서드.&lt;/xref:System.Collections.ArrayList.Synchronized%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.ArrayList&gt; using the SyncRoot property.</source>
          <target state="translated">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 &lt;xref:System.Collections.ArrayList&gt;SyncRoot 속성을 사용 하 여.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.ArrayList&gt;, not directly on the &lt;xref:System.Collections.ArrayList&gt;.</source>
          <target state="translated">동기화 하는 코드의 SyncRoot에 대 한 작업을 수행 해야는 &lt;xref:System.Collections.ArrayList&gt;, &lt;xref:System.Collections.ArrayList&gt;.&lt;/xref:System.Collections.ArrayList&gt; 으로 만들어지므로&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.ArrayList&gt; object.</source>
          <target state="translated">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 &lt;xref:System.Collections.ArrayList&gt;개체입니다.&lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Copies the elements of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a new &lt;xref:System.Object&gt; array.</source>
          <target state="translated">요소에 복사는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 새 &lt;xref:System.Object&gt;배열.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied using &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;, which is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">사용 하 여 요소가 복사 되 &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;는 O 변수인 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt; &lt;/xref:System.Array.Copy%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; array containing copies of the elements of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;배열 요소의 복사본을 포함 하는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Copies the elements of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a new array of the specified element type.</source>
          <target state="translated">요소에 복사는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 요소 형식의 새 배열입니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>All of the objects in the &lt;xref:System.Collections.ArrayList&gt; object will be cast to the &lt;xref:System.Type&gt; specified in the <ph id="ph1">`type`</ph> parameter.</source>
          <target state="translated">개체는 &lt;xref:System.Collections.ArrayList&gt;개체 캐스팅는 &lt;xref:System.Type&gt;에 지정 된는 <ph id="ph1">`type`</ph> 매개 변수.&lt;/xref:System.Type&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied using &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;, which is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">사용 하 여 요소가 복사 되 &lt;xref:System.Array.Copy%2A?displayProperty=fullName&gt;는 O 변수인 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt; &lt;/xref:System.Array.Copy%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The element &lt;xref:System.Type&gt; of the destination array to create and copy elements to.</source>
          <target state="translated">요소 &lt;xref:System.Type&gt;를 만들고 요소를 복사할 대상 배열입니다.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>An array of the specified element type containing copies of the elements of the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">요소 복사본을 포함 하는 지정 된 요소 형식의 배열에서 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the specified type.</source>
          <target state="translated">소스의 형식을 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 형식으로 자동 캐스팅할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Sets the capacity to the actual number of elements in the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">용량을 실제로 수의 요소는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset a &lt;xref:System.Collections.ArrayList&gt; to its initial state, call the &lt;xref:System.Collections.ArrayList.Clear%2A&gt; method before calling TrimToSize.</source>
          <target state="translated">다시 설정 하는 &lt;xref:System.Collections.ArrayList&gt;를 초기 상태로 호출는 &lt;xref:System.Collections.ArrayList.Clear%2A&gt;메서드 TrimToSize를 호출 하기 전에.&lt;/xref:System.Collections.ArrayList.Clear%2A&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty &lt;xref:System.Collections.ArrayList&gt; sets the capacity of the &lt;xref:System.Collections.ArrayList&gt; to the default capacity.</source>
          <target state="translated">빈 트리밍 &lt;xref:System.Collections.ArrayList&gt;의 용량 설정는 &lt;xref:System.Collections.ArrayList&gt;기본 용량을.&lt;/xref:System.Collections.ArrayList&gt; &lt;/xref:System.Collections.ArrayList&gt;</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.ArrayList.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.ArrayList.Count%2A&gt;.&lt;/xref:System.Collections.ArrayList.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has a fixed size.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 크기가 고정된 되어 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>