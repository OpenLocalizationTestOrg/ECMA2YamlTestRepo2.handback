<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0a1ffadd71d493352c3b31cbd18cbdfad9b5f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Versioning.ComponentGuaranteesAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d7e42f82f691d9a53995eac5b22e520eea2b8ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b024fdb8038671b172ae0c7d52704808105644f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.</source>
          <target state="translated">구성 요소, 형식 또는 여러 버전에 걸쳐 있을 수 있는 형식 멤버의 호환성 보장을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ComponentGuaranteesAttribute is used by developers of components and class libraries to indicate the level of compatibility that consumers of their libraries can expect across multiple versions.</source>
          <target state="translated">ComponentGuaranteesAttribute 라이브러리의 소비자가 여러 버전에서 기대할 수 있는 호환성 수준을 지정 하려면 구성 요소 및 클래스 라이브러리의 개발자가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It indicates the level of guarantee that a future version of the library or component will not break an existing client.</source>
          <target state="translated">이후 버전의 라이브러리 또는 구성 요소는 기존 클라이언트를 중단 하지 않는다는 보증 수준을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients can then use the ComponentGuaranteesAttribute as an aid in designing their own interfaces to ensure stability across versions.</source>
          <target state="translated">클라이언트 버전에서 안정성을 유지 하기 위해 자신의 인터페이스를 설계에 보조 도구로 ComponentGuaranteesAttribute를 유도할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The common language runtime (CLR) does not use this attribute in any way.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 공용 언어 런타임 (CLR) 어떤 식으로든에서이 특성을 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value lies in formally documenting the intent of the component author.</source>
          <target state="translated">해당 값은 구성 요소 작성자의 의도 공식적으로 문서화에 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compile-time tools can also use these declarations to detect compile-time errors that would otherwise break the declared guarantee.</source>
          <target state="translated">컴파일 타임 도구 선언 된 보증을 위반 하는 컴파일 타임 오류를 감지 하 이러한 선언을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Levels of Compatibility    The ComponentGuaranteesAttribute supports the following levels of compatibility, which are represented by members of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; enumeration:      -   No version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).</source>
          <target state="translated">호환성 ComponentGuaranteesAttribute 수준의 지원의 구성원으로 표시 되는 다음과 같은 호환성 수준의 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;열거형:-버전 간 호환성 (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client can expect that future versions will break the existing client.</source>
          <target state="translated">클라이언트는 이후 버전은 기존 클라이언트를 중단 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>No Compatibility<ept id="p1">](#None)</ept> section later in this topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>아니요 호환성<ept id="p1">](#None)</ept> 이 항목의 뒷부분에 나오는 섹션.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Side-by-side version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).</source>
          <target state="translated">---나란히 버전 간 호환성 (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component has been tested to work when more than one version of the assembly is loaded in the same application domain.</source>
          <target state="translated">구성 요소는 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 될 때 실행 되도록 테스트 되었습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, future versions can break compatibility.</source>
          <target state="translated">일반적으로 이후 버전 호환성을 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when breaking changes are made, the old version is not modified but exists alongside the new version.</source>
          <target state="translated">그러나 발생할 경우 주요 변경 사항이, 이전 버전은 수정 되지 않습니다 새 버전과 함께 존재 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Side-by-side execution is the expected way to make existing clients work when breaking changes are made.</source>
          <target state="translated">병렬 실행은 기존 클라이언트에 주요 변경 내용이 있을 때 사용할 수 있는 방법의입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Side-by-Side Compatibility<ept id="p1">](#SideBySide)</ept> section later in this topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>-병렬 호환성<ept id="p1">](#SideBySide)</ept> 이 항목의 뒷부분에 나오는 섹션.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Stable version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).</source>
          <target state="translated">-버전 간 호환성 안정적인 (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Future versions should not break the client, and side-by-side execution should not be needed.</source>
          <target state="translated">이후 버전의 클라이언트를 해제 하지 말아야 하 고-병렬 실행 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the client is inadvertently broken, it may be possible to use side-by-side execution to fix the problem.</source>
          <target state="translated">그러나 클라이언트 갑자기 중단 되는 경우 문제를 해결 하려면-병렬 실행을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Stable Compatibility<ept id="p1">](#Standard)</ept> section.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>안정적인 호환성<ept id="p1">](#Standard)</ept> 섹션.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Exchange version-to-version compatibility (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).</source>
          <target state="translated">-버전 간 호환성 교환 (&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;).&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extraordinary care is taken to ensure that future versions will not break the client.</source>
          <target state="translated">이후 버전의 클라이언트를 중단 되지 것입니다 보장 하는 특별 한 주의 필요 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client should use only these types in the signature of interfaces that are used for communication with other assemblies that are deployed independently of one another.</source>
          <target state="translated">클라이언트는 서로 독립적으로 배포 되는 다른 어셈블리와의 통신에 사용 되는 인터페이스의 서명에 있는 이러한 형식을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one version of these types is expected to be in a given application domain, which means that if a client breaks, side-by-side execution cannot fix the compatibility problem.</source>
          <target state="translated">클라이언트가 차단 되는 경우-병렬 실행 수 없는 호환성 문제가 해결는 특정된 응용 프로그램 도메인에 포함 되도록 이러한 형식의 버전을 하나만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Exchange Type Compatibility<ept id="p1">](#Exchange)</ept> section.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>교환 형식 호환성<ept id="p1">](#Exchange)</ept> 섹션.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections discuss each level of guarantee in greater detail.</source>
          <target state="translated">다음 섹션에서는 각 보다 자세히 설명에서 하는 보증 수준에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="None"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ### No Compatibility    Marking a component as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the provider makes no guarantees about compatibility.</source>
          <target state="translated"><bpt id="p1">&lt;a name="None"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # # 없는 호환성 구성 요소가 표시 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;에서 됨을 나타냅니다 공급자 호환성을 보장 하지 않습니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients should avoid taking any dependencies on the exposed interfaces.</source>
          <target state="translated">클라이언트는 노출 된 인터페이스에 대 한 모든 종속 관계를 수행 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This level of compatibility is useful for types that are experimental or that are publicly exposed but are intended only for components that are always updated at the same time.</source>
          <target state="translated">이 호환성 수준은 실험적 되거나은 공개적으로 노출 하는 있지만을 위한 동시에 항상 업데이트는 구성 요소 형식에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; explicitly indicates that this component should not be used by external components.</source>
          <target state="translated">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;명시적으로 외부 구성 요소에서이 구성 요소를 사용 하지 해야 함을 나타냅니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="SideBySide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ### Side-by-Side Compatibility    Marking a component as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain.</source>
          <target state="translated"><bpt id="p1">&lt;a name="SideBySide"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # #-Side-by-side 구성으로 표시 된 호환성 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;구성 요소는 테스트 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 되 면 작업을 나타냅니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Breaking changes are allowed as long as they are made to the assembly that has the greater version number.</source>
          <target state="translated">주요 변경 내용은 더 큰 버전 번호를 가진 어셈블리에 적용 되 긴 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Components that are bound to an old version of the assembly are expected to continue to bind to the old version, and other components can bind to the new version.</source>
          <target state="translated">이전 버전의 어셈블리에 바인딩되는 구성 요소는 이전 버전에 바인딩할 것으로 예상 되 고 다른 구성 요소는 새 버전으로 바인딩할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also possible to update a component that is declared to be &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; by destructively modifying the old version.</source>
          <target state="translated">으로 선언 하는 구성 요소를 업데이트할 수 이기도 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;데이터 손실 없이 이전 버전을 수정 하 여.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="Standard"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ### Stable Compatibility    Marking a type as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; indicates that the type should remain stable across versions.</source>
          <target state="translated"><bpt id="p1">&lt;a name="Standard"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # #으로 형식을 표시 하는 호환성 안정적인 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;버전에서 형식을 안정적인 계속 해야 나타냅니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it may also be possible for side-by-side versions of a stable type to exist in the same application domain.</source>
          <target state="translated">그러나 동일한 응용 프로그램 도메인에 존재 하는 안정적인 종류의 병렬-버전에 대 한 수 있습니다 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stable types maintain a high binary compatibility bar.</source>
          <target state="translated">안정적인 형식은 이진 호환성 높은 막대를 유지 관리합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, providers should avoid making breaking changes to stable types.</source>
          <target state="translated">이 때문에 공급자 안정적인 형식을 주요 변경 내용 작업을 하지 말아야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following kinds of changes are acceptable:      -   Adding private instance fields to, or removing fields from, a type, as long as this does not break the serialization format.</source>
          <target state="translated">허용 되는 다음과 같은 종류의 변경이:-전용 인스턴스 필드를 추가 하거나으로 serialization 형식을 나누지 않습니다이 형식에서 필드를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Changing a non-serializable type to a serializable type.</source>
          <target state="translated">-는 순차 불가능 형식을 직렬화 가능 형식으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>(However, a serializable type cannot be changed to a non-serializable type.)      -   Throwing new, more derived exceptions from a method.</source>
          <target state="translated">그러나 (직렬화 가능 형식이 변경할 수 없습니다 순차 불가능 형식으로.)      메서드에서 예외를 더 파생 새로 만들기, 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Improving the performance of a method.</source>
          <target state="translated">-메서드는 성능을 향상 시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Changing the range of return values, as long as the change does not adversely affect the majority of clients.</source>
          <target state="translated">-변경 저하 대부분의 클라이언트 상태로 반환 값의 범위를 변경 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Fixing serious bugs, if the business justification is high and the number of adversely affected clients is low.</source>
          <target state="translated">-비즈니스 양쪽 높은 이며 부정적인 영향을 받는 클라이언트 수는 낮은 경우 심각한 버그를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because new versions of stable components are not expected to break existing clients, generally only one version of a stable component is needed in an application domain.</source>
          <target state="translated">새 버전의 안정적인 구성 해도 기존 클라이언트가 중지 되지 않을, 때문에 일반적으로 안정 된 구성 요소의 버전을 하나만 필요 응용 프로그램 도메인에서 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this is not a requirement, because stable types are not used as well-known exchange types that all components agree upon.</source>
          <target state="translated">그러나 하지 요구 사항 때문에 이것이 안정적인 형식은 모든 구성 요소에 동의 하는 잘 알려진 교환 형식으로 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if a new version of a stable component does inadvertently break some component, and if other components need the new version, it may be possible to fix the problem by loading both the old and new component.</source>
          <target state="translated">따라서 새 버전의 안정적인 구성 일부 구성 요소를 실수로 손상지 않습니다 및 다른 구성 요소 버전은 새 버전이 필요 하는 경우 모두 이전 및 새 구성 요소를 로드 하 여 문제를 해결 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; provides a stronger version compatibility guarantee than &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; 보다 강력한 버전 호환성 보장을 제공합니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a common default for multi-version components.</source>
          <target state="translated">다중 버전 구성 요소에 대 한 공통 기본 것합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; can be combined with &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain.</source>
          <target state="translated">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;함께 사용할 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, 구성 요소의 호환성을 중단 하지 것입니다 하지만 여러 개의 버전이 지정 된 응용 프로그램 도메인에 로드 될 때 제대로 작동 하는지 테스트는 적용 가능한 상태입니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a type or method is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, it can be upgraded to &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated">형식 또는 메서드의 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; 로 업그레이드할 수 있습니다&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; , 표시 된 후</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it cannot be downgraded to &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated">그러나이 다운 그레이드할 수 없습니다 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="Exchange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ### Exchange Type Compatibility    Marking a type as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt; provides a stronger version compatibility guarantee than &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, and should be applied to the most stable of all types.</source>
          <target state="translated"><bpt id="p1">&lt;a name="Exchange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # #는 형식으로 형식 호환성 표시 Exchange &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;보다 더 강력한 버전 호환성 보장 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;, 가장 안정적인 모든 형식에 적용 해야 합니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>These types are intended to be used for interchange between independently built components across all component boundaries in both time (any version of the CLR or any version of a component or application) and space (cross-process, cross-CLR in one process, cross-application domain in one CLR).</source>
          <target state="translated">이러한 형식은 모두 시간 (CLR의 모든 버전) 또는 구성 요소 또는 응용 프로그램의 모든 버전에서에서 모든 구성 요소 경계를 넘어 독립적으로 작성 된 구성 요소와 공간 (하나의 CLR에서 응용 프로그램 간 도메인 단일 프로세스에서 프로세스 간 크로스-CLR) 교환에 대해 사용 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a breaking change is made to an exchange type, it is impossible to fix the issue by loading multiple versions of the type.</source>
          <target state="translated">Exchange 형식에 대 한 주요 변경 내용 이루어지면 경우 유형의 여러 버전을 로드 하 여 문제를 해결 하는 것이 불가능 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange types should be changed only when a problem is very serious (such as a severe security issue) or the probability of breakage is very low (that is, if the behavior was already broken in a random way that code could not have conceivably taken a dependency on).</source>
          <target state="translated">교환 형식은 문제는 매우 심각 (예: 심각한 보안 문제) 또는 손상을 확률이 (즉, 하는 경우 코드 없습니다 소요 되었을 수 있으므로 종속성에 있는 임의의 방식으로 동작 이미 끊었습니다) 매우 낮은 경우에 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can make the following kinds of changes to an exchange type:      -   Add inheritance of new interface definitions.</source>
          <target state="translated">교환 형식에 다음과 같은 모든 종류의 변경 가능:-새 인터페이스 정의의 상속을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add new private methods that implement the methods of newly inherited interface definitions.</source>
          <target state="translated">-새로 상속 된 인터페이스 정의의 메서드를 구현 하는 새 개인 메서드를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add new static fields.</source>
          <target state="translated">-새 정적 필드를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add new static methods.</source>
          <target state="translated">-새 정적 메서드를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add new non-virtual instance methods.</source>
          <target state="translated">-새 가상이 아닌 인스턴스 메서드를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are considered breaking changes and are not allowed for primitive types:      -   Changing serialization formats.</source>
          <target state="translated">다음 주요 변경 내용 간주 되 고 기본 형식에 사용할 수 없습니다.-직렬화 형식을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version-tolerant serialization is required.</source>
          <target state="translated">버전 독립적 serialization가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Adding or removing private instance fields.</source>
          <target state="translated">-추가 또는 전용 인스턴스 필드를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This risks changing the serialization format of the type and breaking client code that uses reflection.</source>
          <target state="translated">이 형식의 serialization 형식을 변경 하 고 리플렉션을 사용 하 여 클라이언트 코드를 깰 위험 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Changing the serializability of a type.</source>
          <target state="translated">형식의 순차성을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>A non-serializable type may not be made serializable, and vice versa.</source>
          <target state="translated">순차 불가능 형식 하지 만들 수 있습니다, 직렬화 가능 하며 그 반대 과정도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Throwing different exceptions from a method.</source>
          <target state="translated">메서드에서 서로 다른 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Changing the range of a method's return values, unless the member definition raises this possibility and clearly indicates how clients should handle unknown values.</source>
          <target state="translated">-멤버 정의 이러한 가능성 하 고 클라이언트에서 알 수 없는 값을 처리 하는 방법을 분명 하 게 표시 하지 않는 한 메서드의 반환 값의 범위를 변경 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Fixing most bugs.</source>
          <target state="translated">대부분의 버그를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of the type will rely on the existing behavior.</source>
          <target state="translated">해당 형식의 소비자는 기존 동작에 의존 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a component, type, or member is marked with the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; guarantee, it cannot be changed to either &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; or &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated">구성 요소, 형식 또는 멤버는 기본적으로 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;보장 중 하나 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;나 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; 으로 변경할 수 없습니다&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, exchange types are the basic types (such as &lt;xref:System.Int32&gt; and &lt;xref:System.String&gt; in the .NET Framework) and interfaces (such as &lt;xref:System.Collections.Generic.IList%601&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, and &lt;xref:System.IComparable%601&gt;) that are commonly used in public interfaces.</source>
          <target state="translated">Exchange 유형은 기본 유형, 일반적으로 (같은 &lt;xref:System.Int32&gt;및 &lt;xref:System.String&gt;.NET framework에서) 및 인터페이스 (같은 &lt;xref:System.Collections.Generic.IList%601&gt;, &lt;xref:System.Collections.Generic.IEnumerable%601&gt;, 및 &lt;xref:System.IComparable%601&gt;) 공용 인터페이스에서 일반적으로 사용 되.&lt;/xref:System.IComparable%601&gt; &lt;/xref:System.Collections.Generic.IEnumerable%601&gt; &lt;/xref:System.Collections.Generic.IList%601&gt; &lt;/xref:System.String&gt; &lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange types may publicly expose only other types that are also marked with &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; compatibility.</source>
          <target state="translated">Exchange 형식을 다른 형식으로 표시 된를 공개적으로 노출 될 수 있습니다 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;호환성.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, exchange types cannot depend on the behavior of Windows APIs that are prone to change.</source>
          <target state="translated">또한 exchange 유형을 변경 되기 쉬운 하는 Windows Api의 동작에 종속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Component Guarantees: A Summary    The following table indicates how a component's characteristics and usage affect its compatibility guarantee.</source>
          <target state="translated">구성 요소 보장: 요약 다음 표에서 구성 요소의 특성 및 사용 해당 호환성 보장에 영향을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Component characteristics|Exchange|Stable|Side-by-Side|None|   |-------------------------------|--------------|------------|--------------------|----------|   |Can be used in interfaces between components that version independently.|Y|N|N|N|   |Can be used (privately) by an assembly that versions independently.|Y|Y|Y|N|   |Can have multiple versions in a single application domain.|N|Y|Y|Y|   |Can make breaking changes|N|N|Y|Y|   |Tested to make certain multiple versions of the assembly can be loaded together.|N|N|Y|N|   |Can make breaking changes in place.|N|N|N|Y|   |Can make very safe non-breaking servicing changes in place.|Y|Y|Y|Y|      ## Applying the Attribute    You can apply the ComponentGuaranteesAttribute to an assembly, a type, or a type member.</source>
          <target state="translated">| 구성 요소 특성 | Exchange | 안정적인 | 나란히 | None |   |-------------------------------|--------------|------------|--------------------|----------|   | 가능 구성 요소 간 인터페이스에 해당 버전을 독립적으로 사용할. | Y | N | N | N |   | 일 수 있습니다 (개인적으로) 어셈블리에서 해당 버전을 독립적으로 사용할. | Y | Y | Y | N |   | 단일 응용 프로그램 도메인의 여러 버전이 있을 수 있습니다. | N | Y | Y | Y |   | 주요 변경 내용 정확해 | N | N | Y | Y |   | 테스트 어셈블리의 여러 버전 확인을 로드할 수 함께. | N | N | Y | N |   | 현재 위치에 주요 변경 내용에 만들 수 있습니다. | N | N | N | Y |   | 수 매우 안전 하 게 사소한 변경 사항이 서비스를 제공 합니다. | Y | Y | Y | Y |      # # 특성 있습니다 적용 어셈블리, 형식 또는 형식 멤버에는 ComponentGuaranteesAttribute를 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its application is hierarchical.</source>
          <target state="translated">해당 응용 프로그램은 계층적입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, by default, the guarantee defined by the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types.</source>
          <target state="translated">즉, 기본적으로 정의 된 보장 하 여는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;어셈블리 및 해당 형식의 모든 멤버에 모든 종류의 보증을 정의 하는 어셈블리 수준에서 특성의 속성입니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if the guarantee is applied to the type, by default it also applies to each member of the type.</source>
          <target state="translated">마찬가지로, 형식에 적용 하는 보증은 기본적으로도 적용 형식의 각 멤버에.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This inherited guarantee can be overridden by applying the ComponentGuaranteesAttribute to individual types and type members.</source>
          <target state="translated">이 상속 된 보장 된 ComponentGuaranteesAttribute 개별 형식에 적용 하 여 재정의할 수 있습니다 및 형식 멤버입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, guarantees that override the default can only weaken the guarantee; they cannot strengthen it.</source>
          <target state="translated">그러나 기본값을 재정의 하는 보증만 약화 되어 수 있게 보증은; 높일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an assembly is marked with the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored.</source>
          <target state="translated">예를 들어, 어셈블리 표시 되는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;보장 해당 형식과 멤버 호환성 보장 되지 있고 어셈블리에서 형식 또는 멤버에 적용 되는 다른 모든 보장은 무시 됩니다.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Testing the Guarantee    The &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property returns a member of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; enumeration, which is marked with the &lt;xref:System.FlagsAttribute&gt; attribute.</source>
          <target state="translated">보증은 테스트는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;속성의 멤버를 반환 합니다.는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;로 표시 되는 열거형은 &lt;xref:System.FlagsAttribute&gt;특성.&lt;/xref:System.FlagsAttribute&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that you should test for the flag that you are interested in by masking away potentially unknown flags.</source>
          <target state="translated">즉, 플래그 트래버스하여 잠재적으로 알 수 없는 플래그를 가장 하 여 관심 있는 테스트 해야 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following example tests whether a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated">다음 예제에서는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; 형식이 표시 되어 있는지 여부를 테스트 하는 예를 들어</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)</ept><ept id="p3">]</ept>       The following example tests whether a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; or &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb)</ept> <ept id="p3">]</ept> 형식이 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;나 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; 로 표시 되어 있는지 여부를 테스트 하는 다음 예제  </target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)</ept><ept id="p3">]</ept>       The following example tests wither a type is marked as &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; (that is, neither &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; nor &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;).</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb)</ept> <ept id="p3">]</ept> 다음 형식이 되는지 여부를 테스트 하는 예제로 표시 되어 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;(즉, 둘 다 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;나 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;).&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;  </target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)</ept><ept id="p3">]</ept></source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id="p2">](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3  <ept id="p4">](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)</ept><ept id="p3">]</ept></target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Versioning.ComponentGuaranteesAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Runtime.Versioning.ComponentGuaranteesAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 라이브러리, 형식 또는 멤버를 나타내는 값을 사용 하 여 클래스는 여러 버전에서 호환성 수준을 보장 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt; class is instantiated, the value of the <ph id="ph1">`guarantees`</ph> parameter is assigned to the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; property.</source>
          <target state="translated">때는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;클래스가 인스턴스화되면의 값은 <ph id="ph1">`guarantees`</ph> 에 할당 된 매개 변수는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;속성.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt; &lt;/xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</source>
          <target state="translated">여러 버전에서 보장 되는 호환성 수준을 지정 하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.</source>
          <target state="translated">보장 된 수준의 라이브러리, 형식 또는 여러 버전에 걸쳐 있는 형식 멤버의 호환성을 표시 하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the Guarantees property corresponds to the <ph id="ph1">`guarantees`</ph> parameter of the &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A&gt; constructor.</source>
          <target state="translated">보증 속성의 값에 해당 하는 <ph id="ph1">`guarantees`</ph> 의 매개 변수는 &lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A&gt;생성자.&lt;/xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</source>
          <target state="translated">여러 버전에서 보장 되는 호환성 수준을 지정 하는 열거형 값 중 하나입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>