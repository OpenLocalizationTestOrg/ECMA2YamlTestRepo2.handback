<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad45d5350d7ce0512a3ddb042ebe116819840d05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.DependencyProperty.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e25ae22b2d251a31c5b2f3a8b8c9809a6c5c95b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e77660bde0953d13f802b828789b2dd37b1699e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</source>
          <target state="translated">와 같은 메서드를 통해 설정할 수 있는 속성, 스타일, 데이터 바인딩, 애니메이션 및 상속을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A DependencyProperty supports the following capabilities in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:      -   The property can be set in a style.</source>
          <target state="translated">DependencyProperty에 다음과 같은 기능을 지원 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>:-스타일의 속성을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스타일 및 템플릿<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be set through data binding.</source>
          <target state="translated">-데이터 바인딩을 통해의 속성을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about data binding dependency properties, see <bpt id="p1">[</bpt>How to: Bind the Properties of Two Controls<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">데이터 바인딩 종속성 속성에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 두 컨트롤 속성을 바인딩할<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be set with a dynamic resource reference.</source>
          <target state="translated">-동적 리소스 참조와의 속성을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 리소스<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can inherit its value automatically from a parent element in the element tree.</source>
          <target state="translated">-속성 요소 트리의 부모 요소 로부터 자동으로 해당 값을 상속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>속성 값 상속<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can be animated.</source>
          <target state="translated">-속성에 애니메이션을 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>애니메이션 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property can report when the previous value of the property has been changed and the property value can be coerced.</source>
          <target state="translated">-속성은 속성의 이전 값을 변경 했으며 새로 속성 값을 강제 변환할 수 있는 경우 보고할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성의 콜백 및 유효성 검사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property reports information to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, such as whether changing a property value should require the layout system to recompose the visuals for an element.</source>
          <target state="translated">-속성에 대 한 정보를 보고 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>여부 속성 값을 변경 해야 요소에 대 한 시각적 개체를 다시 구성 하기 위해이 레이아웃 시스템 등입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The property receives support in the <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>.</source>
          <target state="translated">-속성에서 지원을 받습니다는 <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the property can be edited in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
          <target state="translated">속성에서 편집할 수는 예를 들어는 <bpt id="p1">**</bpt>속성<ept id="p1">**</ept> 창.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn more about dependency properties, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">종속성 속성에 대 한 자세한 참조 <bpt id="p1">[</bpt>종속성 속성 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</source>
          <target state="translated">앞의 목록에 기능을 지원 하도록 사용자 지정 형식에서 속성을 원하는 경우에 종속성 속성을 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn how to create custom dependency properties, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">사용자 지정 종속성 속성을 만드는 방법을 알아보려면 참조 <bpt id="p1">[</bpt>종속성 속성을 사용자 지정<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a property that enables any object to report information to the type that defines the attached property.</source>
          <target state="translated">연결된 된 속성은 모든 개체에 연결 된 속성을 정의 하는 형식 정보를 보고할 수 있도록 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, any type that inherits from &lt;xref:System.Windows.DependencyObject&gt; can use an attached property regardless of whether the type inherits from the type that defines the property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>에서 상속 된 모든 형식을 &lt;xref:System.Windows.DependencyObject&gt;속성을 정의 하는 형식에서 상속 하는지 여부에 관계 없이 연결된 된 속성을 사용할 수 있습니다.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> language.</source>
          <target state="translated">연결된 된 속성의 기능은 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 언어입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set an attached property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, use the <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept> syntax.</source>
          <target state="translated">연결된 된 속성을 설정 하려면 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>를 사용 하 여는 <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt> propertyName<ept id="p2">*</ept> 구문입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of an attached property is the &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">연결된 된 속성의 예로 &lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;속성.&lt;/xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to create a property that can be used on all &lt;xref:System.Windows.DependencyObject&gt; types, then you should create an attached property.</source>
          <target state="translated">모든에서 사용할 수 있는 속성을 만들려면 원하는 &lt;xref:System.Windows.DependencyObject&gt;형식, 연결된 된 속성을 만들어야 합니다.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To learn more about attached properties, including how to create them, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">참조를 만드는 방법을 비롯 하 여 연결 된 속성에 대 한 자세한 내용을 보려면 <bpt id="p1">[</bpt>연결 된 속성 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`dependencyPropertyName`</ph>    A string that specifies the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt; of the desired dependency property.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_DependencyProperty"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object property="dependencyPropertyName"/&gt;   - or -   &lt;object property="ownerType.dependencyPropertyName"/&gt;   - or -   &lt;object property="attachedPropertyOwnerType.attachedPropertyName"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_DependencyProperty"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <ph id="ph2">`dependencyPropertyName`</ph> 지정 하는 문자열은 &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;원하는 종속성 속성의.&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;      </target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.)       <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></source>
          <target state="translated">이 앞에 나와야 XML 네임 스페이스 접두사 속성 기본 XML 네임 스페이스에 없는 경우 (자세한 내용은 참조 <bpt id="p1">[</bpt>XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.)       <ph id="ph1">`ownerType`</ph>.<ph id="ph2">`dependencyPropertyName`</ph></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string that specifies an owner type of a dependency property, a dot (.), then the &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">종속성 속성을 점 (.), 다음 &lt;xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName&gt; 의 소유자 형식을 지정 하는 문자열</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ownerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`ownerType`</ph>XML 네임 스페이스 접두사가 올 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the <ph id="ph1">`TargetType`</ph> is not yet known.</source>
          <target state="translated">이 사용은 런타임에 바인딩된 스타일 및 템플릿, 때문에 컨텍스트를 구문 분석에 대 한 종속성 속성의 소유자를 지정 해야 합니다는 <ph id="ph1">`TargetType`</ph> 아직 알려지지 않은 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>스타일 및 템플릿<ept id="p1">](../Topic/Styling%20and%20Templating.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph> <bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyName`</ph>    A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyName`</ph>연결된 된 속성 이름, 점 (.), 연결된 된 속성의 소유자를 지정 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`attachedPropertyOwnerType`</ph> can also be preceded by an XML namespace prefix.</source>
          <target state="translated"><ph id="ph1">`attachedPropertyOwnerType`</ph>XML 네임 스페이스 접두사가 올 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered.</source>
          <target state="translated">이미 등록 된 종속성 속성의 소유자로 다른 형식을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">이 메서드는 해당 특정 종속성 속성을 초기에 등록 되지 않은 형식에서 종속성 속성을 인식 하도록 속성 시스템을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, AddOwner is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</source>
          <target state="translated">종속성 속성을 이미 관리 되는 클래스 상속을 통해 해당 종속성 속성을 노출 하지 않는 클래스 추가 AddOwner 일반적으로 사용 됩니다 (클래스 상속 속성 파생된 클래스에서 상속할 수로 인해 및 따라서 이미 종속성 속성에 대 한 일반 멤버 테이블 액세스를 제공 합니다.).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>AddOwner enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</source>
          <target state="translated">AddOwner 속성 시스템이을 해당 종속성 속성을 처음 등록 하지 않은 형식에 종속성 속성을 인식할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature does not allow for specifying metadata.</source>
          <target state="translated">이 서명을 메타 데이터를 지정 하는 데 허용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this method, the metadata is automatically generated for the new &lt;xref:System.Windows.DependencyProperty&gt; and its owner type.</source>
          <target state="translated">이 방법을 사용 하면 메타 데이터는 자동으로 생성 새 &lt;xref:System.Windows.DependencyProperty&gt;와 소유자 형식입니다.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</source>
          <target state="translated">자동 생성 된 메타 데이터에는이 속성이 정의 된 기본 형식의 모든 병합된 메타 데이터의 결과입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no merged metadata is available, then the default metadata for the property is used.</source>
          <target state="translated">병합 된 메타 데이터를 사용할 수 있는 속성에 대 한 기본 메타 데이터 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is registered by using the &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; method, then the default metadata is the same as the metadata that is created when &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; was called.</source>
          <target state="translated">속성이 사용 하 여 등록 하는 경우는 &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;메서드를 기본 메타 데이터는 때 생성 되는 메타 데이터와 동일 하 게 &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;호출 되었습니다.&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the &lt;xref:System.Windows.PropertyMetadata&gt; object is created with the &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; property set to the property type's default and all other properties of the &lt;xref:System.Windows.PropertyMetadata&gt; is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">그렇지 않은 경우는 &lt;xref:System.Windows.PropertyMetadata&gt;개체를 만든는 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;속성 형식의 기본값 및 다른 모든 속성을 설정 하는 속성은 &lt;xref:System.Windows.PropertyMetadata&gt;로 설정 되어 <ph id="ph1">`null`</ph>.&lt;/xref:System.Windows.PropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; signature if you want to provide metadata for the version of the dependency property as added to the provided type.</source>
          <target state="translated">사용 하 여는 &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;서명이 제공 된 형식에 추가 되는 종속성 속성의 버전에 대 한 메타 데이터를 제공 하려는 경우.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</source>
          <target state="translated">이 메서드의 반환 값은 일반적으로 선언 하 고는 종속성 속성 식별자를 저장 하 여 종속성 속성을 노출 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identifier provides access to the dependency property if you want to call property system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> against the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">식별자 속성 시스템 호출 하려는 경우 종속성 속성에 대 한 액세스를 제공 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> 종속성 속성에 대해 특히 속성이 있을 때 추가 소유자 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">원래 소유자와 추가 된 소유자에 대 한 속성 이름이 동일한 유사한 기능을 나타내는 데 사용할 해야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the &lt;xref:System.Windows.DependencyProperty&gt; return value of the AddOwner method to define the dependency property identifier, and also to declare <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner.</source>
          <target state="translated">사용 해야는 &lt;xref:System.Windows.DependencyProperty&gt;AddOwner 메서드 종속성 속성의 식별자를 정의 하 고 선언 하는 값을 반환 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> AddOwner를 사용 하 여 형식에 추가 하는 종속성 속성에 대 한 속성 래퍼.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AddOwner methodology recommended above is used when creating the dependency properties that are declared within <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">내에 선언 된 종속성 속성을 만들 때 위에서 권장 AddOwner 방법론을 사용 하는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">예를 들어, 둘 다 &lt;xref:System.Windows.Controls.Border&gt;및 &lt;xref:System.Windows.Controls.Control&gt;정의 <ph id="ph1">`BorderBrush`</ph> 유사한 기능을 포함 하는 종속성 속성입니다.&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Border&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling AddOwner based on the original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;정의 <ph id="ph1">`BorderBrush`</ph> 원래 소유자를 기준으로 속성을 AddOwner를 호출 하 여 속성 시스템 &lt;xref:System.Windows.Controls.Border&gt;및 등록 된 &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;종속성 속성 식별자입니다.&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt; &lt;/xref:System.Windows.Controls.Border&gt;&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AddOwner return value is then used to establish a new static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">AddOwner 반환 값을 설정 하는 새 정적 사용 다음 &lt;xref:System.Windows.DependencyProperty&gt;필드 (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;) 해당 속성에 추가 된 소유자에 대 한 및 <ph id="ph1">`BorderBrush`</ph> 속성 래퍼를 선언 합니다.&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type to add as an owner of this dependency property.</source>
          <target state="translated">이 종속성 속성의 소유자로 추가할 형식입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">원본에 대 한 참조 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 종속성 속성을 식별 하는 식별자입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">이 식별자로 추가 하는 클래스에서 노출 되어야 합니다는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 필드입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</source>
          <target state="translated">이미 등록 된 종속성 속성의 소유자로 다른 형식을 추가, 제공 된 소유자 형식에 존재 하는 종속성 속성에 대 한 종속성 속성 메타 데이터를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</source>
          <target state="translated">이 메서드는 해당 특정 종속성 속성을 초기에 등록 되지 않은 형식에서 종속성 속성을 인식 하도록 속성 시스템을 활성화 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</source>
          <target state="translated">추가 소유자 클래스에 있는 것 처럼에 특히 선언 하 고 종속성 속성을 노출 합니다.이 메서드의 반환 값 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</source>
          <target state="translated">일반적으로 원래 소유자와 추가 된 소유자에 대 한 속성 이름이 동일한 유사한 기능을 나타내는 데 사용할 해야 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is good practice to expose the identifiers, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.</source>
          <target state="translated">것이 좋습니다도 새 식별자를 노출 하도록 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; 를 사용 하 여 형식에 추가 하는 종속성 속성에 대 한 속성 래퍼</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; methodology recommended above is used when creating <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> declared within <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;위에서 권장 방법론은 만들 때 사용 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> 내에 선언 된 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, both &lt;xref:System.Windows.Controls.Border&gt; and &lt;xref:System.Windows.Controls.Control&gt; define a <ph id="ph1">`BorderBrush`</ph> dependency property, which have similar functionality.</source>
          <target state="translated">예를 들어, 둘 다 &lt;xref:System.Windows.Controls.Border&gt;및 &lt;xref:System.Windows.Controls.Control&gt;정의 <ph id="ph1">`BorderBrush`</ph> 유사한 기능을 포함 하는 종속성 속성입니다.&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Border&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Controls.Control&gt; defines its <ph id="ph1">`BorderBrush`</ph> property to the property system by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; on original owner &lt;xref:System.Windows.Controls.Border&gt; and its registered &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt; dependency property identifer.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Control&gt;정의 <ph id="ph1">`BorderBrush`</ph> 속성을 호출 하 여 속성 시스템 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;에 원래 소유자 &lt;xref:System.Windows.Controls.Border&gt;및 등록 된 &lt;xref:System.Windows.Controls.Border.BorderBrushProperty&gt;종속성 속성 식별자입니다.&lt;/xref:System.Windows.Controls.Border.BorderBrushProperty&gt; &lt;/xref:System.Windows.Controls.Border&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;&lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; return value is then used to establish a static &lt;xref:System.Windows.DependencyProperty&gt; field (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;)for that property on the added owner, and a <ph id="ph1">`BorderBrush`</ph> property wrapper is also declared.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;반환 값을 설정 하는 정적 사용 다음 &lt;xref:System.Windows.DependencyProperty&gt;필드 (&lt;xref:System.Windows.Controls.Control.BorderBrushProperty&gt;)의 해당 속성에 추가 된 소유자에 대 한 및 <ph id="ph1">`BorderBrush`</ph> 속성 래퍼를 선언 합니다.&lt;/xref:System.Windows.Controls.Control.BorderBrushProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The added owner's dependency property identifier should be used for operations such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;.&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt; 등의 작업에 사용할 추가 된 소유자의 종속성 속성 식별자</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.</source>
          <target state="translated">그러나 특정 형식의 작업 모두 관련 된 다른 메타 데이터와 소유자를 계속 추가 된 클래스의 인스턴스 반환할 경우에도 해당 예상된 결과 원래 (하지는 추가 된 소유자의) &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;나 &lt;xref:System.Windows.DependencyProperty.GetMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.GetMetadata%2A&gt; &lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt; 형식별에 종속성 속성 식별자 지정</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The metadata for the added owner is perpetuated by the AddOwner call itself, not necessarily referenced exclusively by the adding owner class identifier field.</source>
          <target state="translated">메타 데이터는 AddOwner 추가 된 소유자가 적용 됩니다에 대 한 호출 자체를 반드시 추가 소유자 클래스 식별자 필드에서 명시적으로 참조 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nevertheless, it is good practice to expose the  identifier, as well as new <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> property wrappers, for dependency properties that are added to types using AddOwner, because failing to do so creates disparity between the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> representations of your properties.</source>
          <target state="translated">그럼에도 불구 하 고 것이 좋습니다도 새 식별자를 노출 하도록 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> 이렇게 정의 하면 간의 차이 만들기 때문에 AddOwner를 사용 하 여 형식에 추가 하는 종속성 속성에 대 한 속성 래퍼는 <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> 및 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 의 속성이 표현 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">제공 된 메타 데이터는 기본 소유자에 있는 종속성 속성에 대 한 속성 메타 데이터와 병합 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist.</source>
          <target state="translated">원래 기본 메타 데이터에 지정 된 특성을 계속 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">새 메타 데이터에서 특별히 변경 된 특성에만 기본 메타 데이터의 특성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics, such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, are replaced if they are specified in the new metadata.</source>
          <target state="translated">일부 특징와 같은 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;, 새 메타 데이터에서 지정 된 대체 됩니다.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">다른 사용자와 같은 &lt;xref:System.Windows.PropertyChangedCallback&gt;, 결합 됩니다.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">병합 동작을 사용 하는 override, 여기에 설명 된 동작이 사용 되는 기존 속성 메타 데이터 클래스에 대 한 속성 메타 데이터 형식에 따라 다르며 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성 메타 데이터<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 및 <bpt id="p2">[</bpt>프레임 워크 속성 메타 데이터<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The type to add as owner of this dependency property.</source>
          <target state="translated">이 종속성 속성의 소유자로 추가할 형식입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The metadata that qualifies the dependency property as it exists on the provided type.</source>
          <target state="translated">제공된 된 형식에 있는 종속성 속성을 정규화 하는 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A reference to the original <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> identifier that identifies the dependency property.</source>
          <target state="translated">원본에 대 한 참조 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 종속성 속성을 식별 하는 식별자입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This identifier should be exposed by the adding class as a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field.</source>
          <target state="translated">이 식별자로 추가 하는 클래스에서 노출 되어야 합니다는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 필드입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets the default metadata of the dependency property.</source>
          <target state="translated">종속성 속성의 기본 메타 데이터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; call.</source>
          <target state="translated">기본 메타 데이터는 사용할 수 있는 특정 개체 또는 파생 형식인 개체에 명시적에서 대체 메타 데이터가 제공 된 이름에 속성 메타 데이터 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;호출.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the original owner applied metadata to the first &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call that established the dependency property, then that metadata is returned as DefaultMetadata.</source>
          <target state="translated">원래 소유자 첫 번째에 메타 데이터를 적용 하는 경우 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;DefaultMetadata로 반환 되 고 해당 메타 데이터 종속성 속성을 설정 하는 호출.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no metadata was applied in the original &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, then default metadata is generated from within the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call and this value is returned as the DefaultMetadata.</source>
          <target state="translated">메타 데이터가 원래 적용 된 경우 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;호출, 기본 메타 데이터 내에서 생성 되는 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;호출 하 고이 값은 DefaultMetadata로 반환 됩니다.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main purpose of having default metadata associated with a &lt;xref:System.Windows.DependencyProperty&gt; is to supply a default value for this property on any &lt;xref:System.Windows.DependencyObject&gt; or a derived type.</source>
          <target state="translated">기본 메타 데이터와 연결 된의 주요 목적은 &lt;xref:System.Windows.DependencyProperty&gt;에서이 속성에 대 한 기본값을 제공 하 여 &lt;xref:System.Windows.DependencyObject&gt;또는 파생된 형식인.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For nonattached properties, the metadata type returned by this property cannot be cast to derived types of &lt;xref:System.Windows.PropertyMetadata&gt; type, even if the property was originally registered with a derived metadata type.</source>
          <target state="translated">연결 되지 않은 속성에 대 한이 속성에서 반환 되는 메타 데이터 형식으로 캐스팅할 수 없습니다 파생된 유형의 &lt;xref:System.Windows.PropertyMetadata&gt;최초 속성 된 파생 된 메타 데이터 형식으로 등록 된 경우에 입력 합니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want the originally registered metadata including its original possibly derived metadata type, call &lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt; instead, passing the original registering type as a parameter.</source>
          <target state="translated">원래 등록 된 메타 데이터는 원래 수 있는 파생 된 메타 데이터 유형과 같은 호출 &lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;형식을 매개 변수로 대신 원래 등록을 전달 합니다.&lt;/xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For attached properties, the type of the metadata returned by this property will match the type given in the original &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; registration method.</source>
          <target state="translated">연결 된 속성에 대 한이 속성에서 반환 된 메타 데이터 형식에는 원래에 지정 된 형식과 일치 합니다 &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;등록 방법을.&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default metadata of the dependency property.</source>
          <target state="translated">종속성 속성의 기본 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 대 한 해시 코드를 반환 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system uses its own unique identifier &lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;, and the value of that property is returned by GetHashCode.</source>
          <target state="translated">속성 시스템 자체 고유 식별자를 사용 하 여 &lt;xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;, 해당 속성의 값은 GetHashCode에 의해 반환 됩니다.&lt;/xref:System.Windows.DependencyProperty.GlobalIndex%2A&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The hash code for this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 대 한 해시 코드 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified existing type.</source>
          <target state="translated">지정된 된 기존 형식에 있는이 종속성 속성에 대 한 메타 데이터를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that alter the metadata of the dependency property as it exists on a type.</source>
          <target state="translated">형식 또는 개체 참조 메타 데이터를 원래 등록 시와에서 다를 수 있으므로 형식을 키가 필요한 데 지정 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;형식에 있는 종속성 속성의 메타 데이터를 변경 하는 호출.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The specific type from which to retrieve the dependency property metadata.</source>
          <target state="translated">종속성 속성 메타 데이터를 검색할 특정 형식입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">속성 메타 데이터 개체입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on the specified object instance.</source>
          <target state="translated">지정 된 개체 인스턴스에 있을 때이 종속성 속성에 대 한 메타 데이터를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">지정 하는 유형 또는 개체 참조가 필요한 특정된 종속성 속성의 메타 데이터를 원래 등록 시와에서 다를 수 있으므로 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;형식에 있는 것 처럼 속성 메타 데이터를 구체화할 수 있는 호출.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</source>
          <target state="translated">인스턴스에 따라 속성 메타 데이터를 요청할 때만 전달 하는 인스턴스가 해당 형식을 내부적으로 계산 될 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</source>
          <target state="translated">종속성 속성 메타 데이터 인스턴스; 별로 달라 지지 않습니다. 지정 된 type 속성 조합에 대해 일관성은 항상 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</source>
          <target state="translated">종속성 속성의 형식별 버전 메타 데이터에서 가져와야 결정 하기 위해 형식이 검사 된 종속성 개체입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">속성 메타 데이터 개체입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns the metadata for this dependency property as it exists on a specified type.</source>
          <target state="translated">지정된 된 형식에 있는 것 처럼이 종속성 속성에 대 한 메타 데이터를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; calls that can refine the property metadata as it exists on a type.</source>
          <target state="translated">지정 하는 유형 또는 개체 참조가 필요한 특정된 종속성 속성의 메타 데이터를 원래 등록 시와에서 다를 수 있으므로 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;형식에 있는 것 처럼 속성 메타 데이터를 구체화할 수 있는 호출.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A specific object that records the dependency object type from which the dependency property metadata is desired.</source>
          <target state="translated">종속성 속성 메타 데이터가 필요한 종속성 개체 형식을 기록 하는 특정 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A property metadata object.</source>
          <target state="translated">속성 메타 데이터 개체입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets an internally generated value that uniquely identifies the dependency property.</source>
          <target state="translated">종속성 속성을 고유 하 게 식별 하는 내부적으로 생성 된 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is an integer, not a <ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">이 값이 정수는 <ph id="ph1">[!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</source>
          <target state="translated">일반적으로이 인덱스 값을 사용 하 여은 필요 하지 않으며 모든 종속성 속성의 테이블에 인덱스 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency properties should instead be referenced by their identifier fields.</source>
          <target state="translated">종속성 속성 식별자 필드에서 대신 참조 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>GlobalIndex is used internally for faster access to data structures that use the GlobalIndex as a zero-based array index.</source>
          <target state="translated">GlobalIndex에&amp;0;부터 시작 배열 인덱스는 GlobalIndex를 사용 하는 데이터 구조에 대 한 빠른 액세스를 위해 내부적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>A similar usage might have applications for designers or tools.</source>
          <target state="translated">비슷한 사용 응용 프로그램 디자이너 또는 도구 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A unique numeric identifier.</source>
          <target state="translated">고유 숫자 식별자입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</source>
          <target state="translated">원래 종속성 속성 등록에 입력 한 속성 유형을 기준으로 지정된 된 값이 종속성 속성의이 형식에 대해 허용 가능한 지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of <ph id="ph1">`null`</ph> is a valid type for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph2">`true`</ph> for these cases.</source>
          <target state="translated">값이 <ph id="ph1">`null`</ph> 올바른 형식이 또는 참조 형식 종속성 속성에 대 한는 &lt;xref:System.Nullable%601&gt;종속성 속성을가 반환 <ph id="ph2">`true`</ph> 이러한 경우에 대 한.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, IsValidType will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">종속성 속성의 두 참조 되는 경우에 또는 &lt;xref:System.Nullable%601&gt;형식 IsValidType 돌아갑니다 <ph id="ph1">`false`</ph> 예외가 발생 하지 않고 null 값에 대 한.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">확인할 값입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified value is the registered property type or an acceptable derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>지정 된 값이 등록 된 속성 형식 또는 파생된 형식이 적합 합니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</source>
          <target state="translated">제공 된 값은 기본 형식 검사를 통해 속성의 형식에 대 한 허용 여부를 결정 하 고 잠재적으로 해당 형식에 대 한 값의 허용 되는 범위 내에 있는 경우.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a dependency property, an allowed range of values for that type can be specified through a &lt;xref:System.Windows.ValidateValueCallback&gt; that is provided in the dependency property registration.</source>
          <target state="translated">종속성 속성을 해당 형식에 대 한 값의 허용 되는 범위를 통해 지정할 수 있습니다는 &lt;xref:System.Windows.ValidateValueCallback&gt;종속성 속성 등록에 제공 하는.&lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; internally.</source>
          <target state="translated">이 메서드를 호출 &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;내부적으로.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dependency property in question has no &lt;xref:System.Windows.ValidateValueCallback&gt;,then calling this method is effectively equivalent to calling &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;.</source>
          <target state="translated">해당 종속성 속성에 없고 &lt;xref:System.Windows.ValidateValueCallback&gt;이 메서드를 호출 하는 것은 효과적으로 &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; 호출에 해당 하는&lt;/xref:System.Windows.ValidateValueCallback&gt; 경우</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dependency property does have a &lt;xref:System.Windows.ValidateValueCallback&gt;, and if &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; would have returned <ph id="ph1">`true`</ph>, then the value returned will be as implemented in the callback.</source>
          <target state="translated">종속성 속성이 없는 경우는 &lt;xref:System.Windows.ValidateValueCallback&gt;, 경우에 한 &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;반환는 <ph id="ph1">`true`</ph>를 값으로 반환 되는 콜백을 구현 됩니다.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; &lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null value is a valid value for reference type dependency properties, or for a &lt;xref:System.Nullable%601&gt; dependency property, and would return <ph id="ph1">`true`</ph> for these cases.</source>
          <target state="translated">Null 값 또는 참조 형식 종속성 속성에 대 한 유효한 값은는 &lt;xref:System.Nullable%601&gt;종속성 속성을 반환 하 고 <ph id="ph1">`true`</ph> 이러한 경우에 대 한.&lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>In cases where the dependency property is neither a reference nor a &lt;xref:System.Nullable%601&gt; type, &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt; will return <ph id="ph1">`false`</ph> for a null value rather than raise an exception.</source>
          <target state="translated">종속성 속성의 두 참조 되는 경우에는 나 &lt;xref:System.Nullable%601&gt;형식 &lt;xref:System.Windows.DependencyProperty.IsValidType%2A&gt;반환 됩니다 <ph id="ph1">`false`</ph> 예외가 발생 하지 않고 null 값에 대 한.&lt;/xref:System.Windows.DependencyProperty.IsValidType%2A&gt; &lt;/xref:System.Nullable%601&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The value to check.</source>
          <target state="translated">확인할 값입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value is acceptable and is of the correct type or a derived type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>값을 사용할 수 있고 올바른 형식 또는 파생된 형식이 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets the name of the dependency property.</source>
          <target state="translated">종속성 속성의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property gets the name provided as the <ph id="ph1">`name`</ph> parameter during dependency property registration.</source>
          <target state="translated">이 속성으로 제공 된 이름을 가져옵니다는 <ph id="ph1">`name`</ph> 종속성 속성 등록 하는 동안 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name is immutable, and cannot be <ph id="ph1">`null`</ph> or an empty string.</source>
          <target state="translated">이 이름은 변경할 수 및 커야 <ph id="ph1">`null`</ph> 또는 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</source>
          <target state="translated">중복 이름 등록과 같은 소유자 형식에 허용 되지 않습니다 및 중복 등록 하려고 할 때 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The Name of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 종속성 속성의 Name의 "Property" 접미사-해당 종속성 속성 식별자의 이름과 일치 하는 규칙을 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>사용자 지정 종속성 속성<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The name of the property.</source>
          <target state="translated">속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</source>
          <target state="translated">기본 형식에서 상속 된 종속성 속성에 있는 메타 데이터를 재정의 하 여 지정 된 형식의 인스턴스에 있을 때이 종속성 속성에 대 한 대체 메타 데이터를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">종속성 속성 메타 데이터 속성 시스템 종속성 속성을 사용 하기 전에 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This equates to the time that specific instances are created using the class that registers the dependency property.</source>
          <target state="translated">이 종속성 속성을 등록 하는 클래스를 사용 하 여 특정 인스턴스를 만들 때마다 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">OverrideMetadata에 대 한 호출으로 자신을 제공 하는 형식의 정적 생성자 내에서 수행 해야는 <ph id="ph1">`forType`</ph> 비슷한 인스턴스화를 통해 또는이 메서드의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">소유자 형식의 인스턴스가 후 메타 데이터를 변경 하는 예외를 발생 시 키 지 않습니다 이지만 속성 시스템에 일관성 없는 동작이 발생 됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">특정 파생된 클래스 재정의 대 한 메타 데이터는이 방법으로 설정 되 면이 같은 파생된 클래스에서 메타 데이터 재정의 이후에 하려고 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">제공 된 메타 데이터는 기본 소유자에 있는 종속성 속성에 대 한 속성 메타 데이터와 병합 됩니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">원래 기본 메타 데이터에 지정 된 특성에 계속 유지 됩니다. 새 메타 데이터에서 특별히 변경 된 특성에만 기본 메타 데이터의 특성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">와 같은 일부 특징 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;새 메타 데이터에 지정 된 경우 대체 됩니다.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">다른 사용자와 같은 &lt;xref:System.Windows.PropertyChangedCallback&gt;, 결합 됩니다.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> dependency properties.</source>
          <target state="translated">병합 동작을 사용 하는 override, 여기에 설명 된 동작이 사용 되는 기존 속성 메타 데이터 클래스에 대 한 속성 메타 데이터 형식에 따라 다르며 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성 메타 데이터<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 및 <bpt id="p2">[</bpt>프레임 워크 속성 메타 데이터<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">이 종속성 속성은 상속 여기서 형식이 고 제공 된 대체 메타 데이터를 적용 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">재정의 하는 형식에서 종속성 속성에 적용할 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</source>
          <target state="translated">읽기 전용 종속성 속성에 대 한 메타 데이터를 재정의 하려고 했습니다 (작업을 수행할 수이 서명을 사용 하 여).</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Metadata was already established for the dependency property as it exists on the provided type.</source>
          <target state="translated">제공 된 형식에 있는 종속성 속성에 대 한 메타 데이터가 이미 설정 된 경우</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</source>
          <target state="translated">초기 종속성 속성 등록에 제공 된 메타 데이터 재정의 지정 된 형식의 인스턴스에 있을 때 대체 읽기 전용 종속성 속성에 대 한 메타 데이터를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You must pass the <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the read-only dependency property to avoid raising an exception.</source>
          <target state="translated">전달 해야 합니다는 <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 예외가 발생 하지 않도록 하려면 읽기 전용 종속성 속성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature provides underlying implementation for a read-only dependency property identifier (&lt;xref:System.Windows.DependencyPropertyKey&gt;) method.</source>
          <target state="translated">이 서명을 읽기 전용 종속성 속성 식별자에 대 한 기본 구현을 제공 (&lt;xref:System.Windows.DependencyPropertyKey&gt;) 메서드.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If overriding metadata for a read-write dependency property, use &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">읽기 / 쓰기 종속성 속성에 대 한 메타 데이터를 재정의 하는 경우 사용 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency property metadata should be overridden before the property system uses the dependency property.</source>
          <target state="translated">종속성 속성 메타 데이터 속성 시스템 종속성 속성을 사용 하기 전에 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This equates to the time that specific objects are created for the class that registers the dependency property.</source>
          <target state="translated">이 종속성 속성을 등록 하는 클래스에 대 한 시간을 특정 개체 생성 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or through similar instantiation.</source>
          <target state="translated">에 대 한 호출이 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;로 자신을 제공 하는 형식의 정적 생성자 내에서 수행할 수만 <ph id="ph1">`forType`</ph> 비슷한 인스턴스화를 통해 또는이 메서드의 매개 변수.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</source>
          <target state="translated">소유자 형식의 인스턴스가 후 메타 데이터를 변경 하는 예외를 발생 시 키 지 않습니다 이지만 속성 시스템에 일관성 없는 동작이 발생 됩니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</source>
          <target state="translated">특정 파생된 클래스 재정의 대 한 메타 데이터는이 방법으로 설정 되 면이 같은 파생된 클래스에서 메타 데이터 재정의 이후에 하려고 하면 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</source>
          <target state="translated">제공 된 메타 데이터는 기본 소유자에 있는 종속성 속성에 대 한 속성 메타 데이터와 병합 됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</source>
          <target state="translated">원래 기본 메타 데이터에 지정 된 특성에 계속 유지 됩니다. 새 메타 데이터에서 특별히 변경 된 특성에만 기본 메타 데이터의 특성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characteristics such as &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; are replaced if specified in the new metadata.</source>
          <target state="translated">와 같은 일부 특징 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;새 메타 데이터에 지정 된 경우 대체 됩니다.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Others, such as &lt;xref:System.Windows.PropertyChangedCallback&gt;, are combined.</source>
          <target state="translated">다른 사용자와 같은 &lt;xref:System.Windows.PropertyChangedCallback&gt;, 결합 됩니다.&lt;/xref:System.Windows.PropertyChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The merge behavior depends on the property metadata type being used for the override.</source>
          <target state="translated">병합 동작 재정의에 사용 되 고 속성 메타 데이터 형식에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Framework Property Metadata<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성 메타 데이터<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 및 <bpt id="p2">[</bpt>프레임 워크 속성 메타 데이터<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The type where this dependency property is inherited and where the provided alternate metadata will be applied.</source>
          <target state="translated">이 종속성 속성은 상속 여기서 형식이 고 제공 된 대체 메타 데이터를 적용 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The metadata to apply to the dependency property on the overriding type.</source>
          <target state="translated">재정의 하는 형식에서 종속성 속성에 적용할 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The access key for a read-only dependency property.</source>
          <target state="translated">읽기 전용 종속성 속성에 대 한 선택 키입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</source>
          <target state="translated">속성 시스템에 종속성 속성을 등록 하거나 자체적으로 속성 소유자로 추가한 개체의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value was provided during property registration.</source>
          <target state="translated">속성을 등록할 때이 값이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owner will be either the original registering type in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from a &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; call, or the type that added itself as owner in the case of a &lt;xref:System.Windows.DependencyProperty&gt; identifier generated from an &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt; call.</source>
          <target state="translated">소유자 중 하나는 원래 등록 형식이의 경우 됩니다는 &lt;xref:System.Windows.DependencyProperty&gt;에서 생성 된 식별자는 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;통화 또는 형식 자체의 경우 소유자로 추가 &lt;xref:System.Windows.DependencyProperty&gt;에서 생성 된 식별자는 &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;호출.&lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OwnerType on any given &lt;xref:System.Windows.DependencyProperty&gt; is immutable, and cannot be <ph id="ph1">`null`</ph> in a valid &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">에 지정 된 모든 OwnerType &lt;xref:System.Windows.DependencyProperty&gt;는 변경할 수 및 커야 <ph id="ph1">`null`</ph> 유효한 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The type of the object that registered the property or added itself as owner of the property.</source>
          <target state="translated">속성을 등록 하거나 자체적으로 속성 소유자로 추가한 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the type that the dependency property uses for its value.</source>
          <target state="translated">종속성 속성의 값에 대 한 사용 유형을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property reports the type of the property's value as declared by the original property registration, through the <ph id="ph1">`propertyType`</ph> parameter.</source>
          <target state="translated">이 속성을 통해 원래 속성 등록 선언 된 속성의 값의 형식을 보고는 <ph id="ph1">`propertyType`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar to the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;, the property type of a dependency property is immutable after registration.</source>
          <target state="translated">비슷합니다는 &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;, 등록 후 종속성 속성의 속성 형식을 변경할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the property value.</source>
          <target state="translated">&lt;xref:System.Type&gt;속성 값의.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the dependency property identified by this <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance is a read-only dependency property.</source>
          <target state="translated">이 종속성 속성을 식별할지 여부를 나타내는 값을 가져옵니다 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인스턴스가 읽기 전용 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are registered within the property system by calling the &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; method as opposed to the &lt;xref:System.Windows.DependencyProperty.Register%2A&gt; method.</source>
          <target state="translated">읽기 전용 종속성 속성을 호출 하 여 속성 시스템 내에서 등록 된 &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;메서드가 아닌는 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;메서드.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attached properties can also be registered as read-only; see &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.</source>
          <target state="translated">연결 된 속성 읽기 전용으로 등록할 수 있습니다. &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt; 를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties require a &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier rather than a &lt;xref:System.Windows.DependencyProperty&gt; identifier to perform metadata operations such as overriding the metadata or setting the value.</source>
          <target state="translated">읽기 전용 종속성 속성에는 필요는 &lt;xref:System.Windows.DependencyPropertyKey&gt;식별자 대신 &lt;xref:System.Windows.DependencyProperty&gt;식별자 값을 설정 또는 메타 데이터 재정의 같은 메타 데이터 작업을 수행 합니다.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you obtained a collection of &lt;xref:System.Windows.DependencyProperty&gt; identifiers through a call to &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; or another <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> that exposes identifiers, check the ReadOnly value before attempting to call &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt; or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</source>
          <target state="translated">컬렉션을 구입한 경우 &lt;xref:System.Windows.DependencyProperty&gt;식별자에 대 한 호출을 통해 &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;또는 다른 <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> 호출 하기 전에 읽기 전용 값을 확인, 식별자를 노출 하는 &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;입력된 매개 변수로 해당 종속성 속성 식별자를 사용 하 여 종속성 속성의 식별자를 나타내는 읽기 전용이 아닌지 확인 하십시오.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyObject.SetValue%2A&gt; &lt;/xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of ReadOnly is <ph id="ph1">`true`</ph> on a dependency property, there is no programmatic way to obtain a reference to the &lt;xref:System.Windows.DependencyPropertyKey&gt; identifier of that dependency property, from the metadata or from the &lt;xref:System.Windows.DependencyProperty&gt; identifier; the identifier must be available as a static field in order to call &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; against a read-only dependency property.</source>
          <target state="translated">읽기 전용 값이 <ph id="ph1">`true`</ph> 에서 종속성 속성을 프로그래밍 방식으로 방법이 있으면에 대 한 참조를 가져올 수는 &lt;xref:System.Windows.DependencyPropertyKey&gt;또는 메타 데이터에서 해당 종속성 속성의 식별자는 &lt;xref:System.Windows.DependencyProperty&gt;식별자에 식별자가 호출 하기 위해 정적 필드로 사용할 수 있어야 &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;읽기 전용 종속성 속성에 대해.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; &lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> wrapper property.</source>
          <target state="translated">에 대 한 get 접근자만 정의 해야 읽기 전용으로 등록 하는 사용자 지정 종속성 속성을 만들는 <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> 래퍼 속성입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</source>
          <target state="translated">그렇지 않은 경우 클래스 속성에 대 한 래퍼 보조 종속성 속성에 대 한 액세스에 대 한 혼란을 줄 개체 모델을 갖습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Read-Only Dependency Properties<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>사용자 지정 종속성 속성<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 또는 <bpt id="p2">[</bpt>읽기 전용 종속성 속성<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property is read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>종속성 속성은 읽기 전용 이면 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, and owner type.</source>
          <target state="translated">지정 된 속성 이름, 속성 형식 및 소유자 유형을 사용 종속성 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The name must be unique within the registration namespace of the owner type.</source>
          <target state="translated">이름은 소유자 형식의 등록 네임 스페이스 내에서 고유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">지정 된 속성 이름, 속성 형식, 소유자 유형 및 속성 메타 데이터와 종속성 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</source>
          <target state="translated">종속성 속성으로 지정된 된 속성 이름, 속성 형식, 소유자 유형, 속성 메타 데이터 및 속성에 대 한 값 유효성 검사 콜백을 등록합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행 해야 하는 콜백에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, and owner type.</source>
          <target state="translated">지정 된 속성 이름, 속성 형식 및 소유자 유형을와 연결된 된 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attached property is a property concept defined by <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">연결된 된 속성에 정의 된 속성 개념은 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> implements attached properties as dependency properties.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>종속성 속성으로 연결 된 속성을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</source>
          <target state="translated">때문에 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 연결 된 속성은 종속성 속성, 레이아웃 특성을 보고 등의 작업에 대 한 일반 속성 시스템에서 사용할 수 있는 메타 데이터가 적용을 유지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>연결 된 속성 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property name, property type, owner type, and property metadata.</source>
          <target state="translated">지정 된 속성 이름, 속성 형식, 소유자 유형 및 속성 메타 데이터와 연결된 된 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">여기에 기본값 뿐만 아니라 다른 특성도 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</source>
          <target state="translated">연결된 된 속성으로 지정 된 속성 형식, 소유자 유형, 속성 메타 데이터 및 속성에 대 한 값 유효성 검사 콜백을 등록합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This can include the default value as well as other characteristics.</source>
          <target state="translated">여기에 기본값 뿐만 아니라 다른 특성도 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행 해야 하는 콜백에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A dependency property identifier that should be used to set the value of a <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> field in your class.</source>
          <target state="translated">값을 설정 하는 데 사용 해야 하는 종속성 속성 식별자는 <bpt id="p1">&lt;xref uid="langword_csharp_public static readonly" name="public static readonly" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 필드입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</source>
          <target state="translated">종속성 속성을 나중 프로그래밍 방식으로 해당 값을 설정 하거나 메타 데이터를 가져오는 등의 작업에 대 한 참조를 해당 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">지정 된 속성 형식, 소유자 유형 및 속성 메타 데이터와 읽기 전용 연결 된 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">그런 다음 나중에 종속성 속성을 참조 하는 데 사용 되는 클래스의 정적 읽기 전용 필드의 값을 설정 하는 데 사용 해야 하는 종속성 속성 키입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">읽기 전용 연결 된 속성을 지정한 속성 형식, 소유자 유형, 속성 메타 데이터 및 유효성 검사 콜백을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행 해야 하는 사용자가 만든 콜백에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">종속성 속성을 참조 하는을 사용 하 여 클래스의 정적 읽기 전용 필드의 값을 설정 하는 데 사용 해야 하는 종속성 속성 키입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</source>
          <target state="translated">지정 된 속성 형식, 소유자 유형 및 속성 메타 데이터 사용 되는 읽기 전용 종속성 속성을 등록합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">이 메서드는 형식을 반환 &lt;xref:System.Windows.DependencyPropertyKey&gt;반면, &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;형식을 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 반환&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">일반적으로 읽기 전용 속성을 나타내는 키 적용 되지 않습니다. public &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; 를 호출 하 여 종속성 속성 값을 설정 하는 키를 사용할 수 있으므로</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">클래스 디자인 요구 사항에 영향을 줍니다 없지만의 표시 여부 및 액세스 제한 하는 것이 좋습니다 일반적으로 &lt;xref:System.Windows.DependencyPropertyKey&gt;클래스 또는 응용 프로그램 논리의 일부로 해당 종속성 속성을 설정 하는 데 필요한 코드의 부분에.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">값을 노출 하 여 읽기 전용 종속성 속성에 대 한 종속성 속성 식별자를 노출 하는 것이 좋습니다 &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;로 <ph id="ph1">`public static readonly`</ph> 필드 프로그램 클래스에&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are a fairly typical scenario both in the existing <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> and for customization scenarios, because other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> features might require a dependency property even if that property is not intended to be settable by callers.</source>
          <target state="translated">읽기 전용 종속성 속성은 매우 일반적인 시나리오 둘 다의 기존 <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> 및 사용자 지정 시나리오 때문에 다른 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 해당 속성을 호출자가 설정할 수 없는 경우에 기능 종속성 속성을 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">예를 종속성 속성을 사용 하는 다른 속성 시스템 작업에 대 한 기반으로 읽기 전용 종속성 속성의 값을 사용할 수는 &lt;xref:System.Windows.Trigger&gt;스타일에서 종속성 속성에.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</source>
          <target state="translated">종속성 속성을 참조 하는을 사용 하 여 클래스의 정적 읽기 전용 필드의 값을 설정 하는 데 사용 해야 하는 종속성 속성 키입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</source>
          <target state="translated">읽기 전용 종속성 속성을 지정한 속성 형식, 소유자 유형, 속성 메타 데이터 및 유효성 검사 콜백을 등록 합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the type &lt;xref:System.Windows.DependencyPropertyKey&gt;, whereas &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; returns the type &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">이 메서드는 형식을 반환 &lt;xref:System.Windows.DependencyPropertyKey&gt;반면, &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;형식을 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 반환&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; &lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.</source>
          <target state="translated">일반적으로 읽기 전용 속성을 나타내는 키 적용 되지 않습니다. public &lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;.&lt;/xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt; 를 호출 하 여 종속성 속성 값을 설정 하는 키를 사용할 수 있으므로</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any &lt;xref:System.Windows.DependencyPropertyKey&gt; to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</source>
          <target state="translated">클래스 디자인 요구 사항에 영향을 줍니다 없지만의 표시 여부 및 액세스 제한 하는 것이 좋습니다 일반적으로 &lt;xref:System.Windows.DependencyPropertyKey&gt;클래스 또는 응용 프로그램 논리의 일부로 해당 종속성 속성을 설정 하는 데 필요한 코드의 부분에.&lt;/xref:System.Windows.DependencyPropertyKey&gt;</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt; as a <ph id="ph1">`public static readonly`</ph> field on your class.</source>
          <target state="translated">값을 노출 하 여 읽기 전용 종속성 속성에 대 한 종속성 속성 식별자를 노출 하는 것이 좋습니다 &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;로 <ph id="ph1">`public static readonly`</ph> 필드 프로그램 클래스에&lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties are a fairly typical scenario.</source>
          <target state="translated">읽기 전용 종속성 속성은 매우 일반적인 시나리오입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a &lt;xref:System.Windows.Trigger&gt; on the dependency property in a style.</source>
          <target state="translated">예를 종속성 속성을 사용 하는 다른 속성 시스템 작업에 대 한 기반으로 읽기 전용 종속성 속성의 값을 사용할 수는 &lt;xref:System.Windows.Trigger&gt;스타일에서 종속성 속성에.&lt;/xref:System.Windows.Trigger&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on dependency property registration, see &lt;xref:System.Windows.DependencyProperty&gt;.</source>
          <target state="translated">종속성 속성 등록에 대 한 자세한 내용은 &lt;xref:System.Windows.DependencyProperty&gt;.&lt;/xref:System.Windows.DependencyProperty&gt; 을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validation on a read-only dependency property might be less important.</source>
          <target state="translated">읽기 전용 종속성 속성의 유효성 검사에 덜 중요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</source>
          <target state="translated">키에 대해 지정 하는 public이 아닌 액세스 수준을 임의의 잘못 된 입력에 대 한 위험을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The name of the dependency property to register.</source>
          <target state="translated">등록할 종속성 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The type of the property.</source>
          <target state="translated">속성의 형식입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The owner type that is registering the dependency property.</source>
          <target state="translated">종속성 속성을 등록 하는 소유자 유형입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Property metadata for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 속성 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</source>
          <target state="translated">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행 해야 하는 사용자가 만든 콜백에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</source>
          <target state="translated">그런 다음 나중에 종속성 속성을 참조 하는 데 사용 되는 클래스의 정적 읽기 전용 필드의 값을 설정 하는 데 사용 해야 하는 종속성 속성 키입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the dependency property.</source>
          <target state="translated">종속성 속성의 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation returns the &lt;xref:System.Windows.DependencyProperty.Name%2A&gt; property value.</source>
          <target state="translated">이 구현은 &lt;xref:System.Windows.DependencyProperty.Name%2A&gt;속성 값.&lt;/xref:System.Windows.DependencyProperty.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The string representation of the dependency property.</source>
          <target state="translated">종속성 속성의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Specifies a static value that is used by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system rather than <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the property exists, but does not have its value set by the property system.</source>
          <target state="translated">사용 되는 정적 값 지정는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 속성 시스템 보다는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 속성이 존재 하지만 속성 시스템에서 설정한 해당 값이 없는 나타냅니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is a sentinel value that is used for scenarios where the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system is unable to determine a requested &lt;xref:System.Windows.DependencyProperty&gt; value.</source>
          <target state="translated">UnsetValue 시나리오에 사용 되는 데 센티널 값은 여기서는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 속성 시스템에서 요청 된 확인할 수 없으면 &lt;xref:System.Windows.DependencyProperty&gt;값.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is used rather than <ph id="ph1">`null`</ph>, because <ph id="ph2">`null`</ph> could be a valid property value, as well as a valid (and frequently used) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.</source>
          <target state="translated">UnsetValue 사용 되는 대신 <ph id="ph1">`null`</ph>때문에, <ph id="ph2">`null`</ph> 유효한 속성 값으로 올바른 수 (및 자주 사용 되는) &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue is never returned out of &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt; 부족 UnsetValue는 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt; on a dependency property on a &lt;xref:System.Windows.DependencyObject&gt; instance, one of the following applies:      -   A dependency property has a default value established in metadata and that value is returned.</source>
          <target state="translated">호출 하는 경우 &lt;xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;에서 종속성 속성에는 &lt;xref:System.Windows.DependencyObject&gt;인스턴스를 다음 중 하나라도 충족 되:-종속성 속성의 기본값이 메타 데이터에서 설정 하 고 해당 값이 반환 됩니다.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value might come from &lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;.</source>
          <target state="translated">이 값은 &lt;xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.DefaultMetadata%2A&gt; 에서 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Some other value was established by the property system, and the default value is no longer relevant.</source>
          <target state="translated">-일부 다른 값 속성 시스템에 의해 구성 된 및 기본 값은 더 이상 해당 됩니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성 값 우선 순위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; of UnsetValue is specifically disallowed.</source>
          <target state="translated">설정 된 &lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;UnsetValue의 수는 없습니다.&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt; returns UnsetValue when the requested property has not been locally set.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;요청된 된 속성이 로컬로 설정 하지 않은 경우 UnsetValue를 반환 합니다.&lt;/xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>UnsetValue has a special meaning when used as the return value of a &lt;xref:System.Windows.CoerceValueCallback&gt;.</source>
          <target state="translated">UnsetValue 특별 한 의미가 &lt;xref:System.Windows.CoerceValueCallback&gt;.&lt;/xref:System.Windows.CoerceValueCallback&gt; 의 반환 값으로 사용 될 경우</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성의 콜백 및 유효성 검사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are binding to a database, note that UnsetValue is not equivalent to &lt;xref:System.DBNull.Value&gt;, in a similar way to how &lt;xref:System.DBNull.Value&gt; is not equivalent to a true null.</source>
          <target state="translated">데이터베이스에 바인딩하는 경우 유의 UnsetValue 동일 하지 않습니다 &lt;xref:System.DBNull.Value&gt;, 하는 방법 유사한 방식에서 &lt;xref:System.DBNull.Value&gt;는 동일 하지 않습니다.&lt;/xref:System.DBNull.Value&gt; &lt;/xref:System.DBNull.Value&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Gets the value validation callback for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 값 유효성 검사 콜백을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property will contain <ph id="ph1">`null`</ph> for any dependency property with no registered validation callback.</source>
          <target state="translated">이 속성에 포함 됩니다 <ph id="ph1">`null`</ph> 종속성 속성에 등록 된 유효성 검사 콜백 없습니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validate value callbacks must act in a static sense: validation applied through the &lt;xref:System.Windows.ValidateValueCallback&gt; cannot determine whether the provided value is valid for any particular instance.</source>
          <target state="translated">정적 방식으로 작동 해야 하는 값 유효성 검사: 유효성 검사를 통해 적용 되는 &lt;xref:System.Windows.ValidateValueCallback&gt;제공 된 값에 특정 인스턴스가 올바른지 여부를 확인할 수 없습니다.&lt;/xref:System.Windows.ValidateValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</source>
          <target state="translated">콜백은 종속성 속성을 소유 하는 모든 개체 해야 유효한 것으로 제공 된 값을 허용 하지 않아야 하는지 여부를 확인만 수 있습니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a &lt;xref:System.Windows.CoerceValueCallback&gt; instead.</source>
          <target state="translated">특정 인스턴스를 사용 하 여 다른 종속성 속성의 값을 사용 하는 유효성 검사를 수행 해야 할 경우는 &lt;xref:System.Windows.CoerceValueCallback&gt;대신.&lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.CoerceValueCallback&gt; is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</source>
          <target state="translated">&lt;xref:System.Windows.CoerceValueCallback&gt;아닌 종속성 속성 식별자 바로 아래에 종속성 속성 메타 데이터의 일부로 등록 됩니다.&lt;/xref:System.Windows.CoerceValueCallback&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>종속성 속성의 콜백 및 유효성 검사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The value validation callback for this dependency property, as provided for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">validateValueCallback</ph><ept id="p1">&lt;/code&gt;</ept> parameter in the original dependency property registration.</source>
          <target state="translated">이 종속성 속성에 제공 된 값 유효성 검사 콜백을 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">validateValueCallback</ph> <ept id="p1">&lt;/code&gt;</ept> 원래 종속성 속성 등록에서 매개 변수입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>