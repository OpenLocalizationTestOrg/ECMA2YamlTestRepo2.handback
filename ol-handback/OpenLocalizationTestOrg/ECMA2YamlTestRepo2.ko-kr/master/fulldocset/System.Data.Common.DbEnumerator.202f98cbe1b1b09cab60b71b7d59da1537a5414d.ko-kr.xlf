<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79c9715e211632f6a3de70423bb065f18cd30014</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.Common.DbEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b06561fffd3a33a98c247f84311ed52b6e5c8150</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ecd93b3ea908d9c73d4d7808b00ca420fc20ae0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes the &lt;xref:System.Collections.IEnumerable.GetEnumerator*&gt; method, which supports a simple iteration over a collection by a .NET Framework data provider.</source>
          <target state="translated">노출 된 &lt;xref:System.Collections.IEnumerable.GetEnumerator*&gt;메서드는.NET Framework 데이터 공급자별으로 컬렉션에 대해 간단한 반복을 지원 합니다.&lt;/xref:System.Collections.IEnumerable.GetEnumerator*&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DbEnumerator class is implemented by a .NET Framework data provider to provide data binding support.</source>
          <target state="translated">DbEnumerator 클래스는 데이터 바인딩 지원을 제공 하기 위해.NET Framework 데이터 공급자에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>By design, the DbEnumerator object is intended for use with only one resultset.</source>
          <target state="translated">기본적으로 DbEnumerator 개체 하나의 결과 집합 에서만 사용이 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema.</source>
          <target state="translated">예를 들어 서로 다른 스키마를 반환 하는 두 개의 SQL SELECT 문이 포함 된 일괄 처리 문을 실행 하는 경우 두 번째 문은 전체 스키마를 반환을 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid this situation, obtain a DbEnumerator for each resultset, and then call the <ph id="ph1">`NextResult`</ph> method of a .NET Framework data provider DataReader object.</source>
          <target state="translated">이러한 상황을 방지 하려면 가져올 각 결과 집합에 대 한 DbEnumerator 한 다음 호출에서 <ph id="ph1">`NextResult`</ph> .NET Framework 데이터 공급자 DataReader 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the give n data reader.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 데이터 판독기를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The DataReader through which to iterate.</source>
          <target state="translated">반복할 DataReader입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 하 여 지정 된 클래스 <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> through which to iterate.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 반복입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified reader and indicates whether to automatically close the reader after iterating through its data.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 지정된 된 판독기를 사용 하 고 자동으로 해당 데이터를 반복한 후 판독기를 닫을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The DataReader through which to iterate.</source>
          <target state="translated">반복할 DataReader입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to automatically close the DataReader after iterating through its data; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>해당 데이터를 반복한 후 DataReader를 자동으로 종결 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, and indicates whether to automatically close the <bpt id="p3">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> after iterating through its data.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Data.Common.DbEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 하 여 지정 된 클래스 <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 자동으로 닫을지 여부를 나타냅니다는 <bpt id="p3">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 해당 데이터를 반복한 후입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> through which to iterate.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 반복입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to automatically close the <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> after iterating through its data; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>자동으로 종결 하는 <bpt id="p2">&lt;xref uid="langword_csharp_DataReader" name="DataReader" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 해당 데이터를 반복한 후 그렇지 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;, &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; must be called to advance the enumerator to the first element of the collection before reading the value of Current; otherwise, Current is undefined.</source>
          <target state="translated">열거자를 만들거나는 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;, &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;호출 하 여 열거자의 현재; 값을 읽기 전에 컬렉션의 첫 번째 요소를 현재 그렇지 않으면 정의 되지 않습니다.&lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; &lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current also throws an exception if the last call to &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; returned false, which indicates the end of the collection.</source>
          <target state="translated">현재 예외를 throw 마지막으로 호출 하는 경우 &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;컬렉션의 끝을 나타내는 false를 반환 합니다.&lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current does not move the position of the enumerator and consecutive calls to Current return the same object until either &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; or &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">현재가 열거자의 위치를 이동 하지 않으며 현재 연속 해 서 호출 될 때까지 동일한 개체를 반환 &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt; &lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; or &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; generates an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">열거자는 무효화 및 &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;하거나 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; 생성&lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt; &lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; 을 다음에 호출할 추가, 수정 또는 삭제 요소와 같은 컬렉션에 변경 내용이 있는 경우</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is modified between &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; and Current, Current returns the element to which it is set, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;현재, 현재 열거자가 이미 무효로 되 었 하는 경우에, 설정 되어 있는 요소를 반환 합니다.&lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current element in the collection.</source>
          <target state="translated">컬렉션의 현재 요소입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The enumerator is positioned before the first element of the collection or after the last element.</source>
          <target state="translated">열거자는 컬렉션의 또는 마지막 요소 뒤의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next element of the collection.</source>
          <target state="translated">열거자는 컬렉션의 다음 요소로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an enumerator is created or after a call to &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;, an enumerator is positioned before the first element of the collection, and the first call to MoveNext moves the enumerator over the first element of the collection.</source>
          <target state="translated">열거자를 만든 후 또는를 호출한 후 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;, 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다 및 movenext 첫 번째 호출 열거자를 컬렉션의 첫 번째 요소로 이동 합니다.&lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the end of the collection is passed, subsequent calls to MoveNext return false until &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">컬렉션의 끝이 전달 된 후 이후에 MoveNext 호출 될 때까지 false를 반환 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to MoveNext or &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">열거자는 무효화 및 MoveNext 또는 &lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt; &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; throw&lt;/xref:System.Data.Common.DbEnumerator.Reset%2A&gt; 을 다음에 호출할 추가, 수정 또는 삭제 요소와 같은 컬렉션에 변경 내용이 있는 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>열거자를 다음 요소로 이동 성공 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 열거자가 컬렉션의 끝을 통과 하는 경우.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">컬렉션은 열거자를 만든 후 수정 되었습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets the enumerator to its initial position, which is before the first element in the collection.</source>
          <target state="translated">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; or Reset throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">컬렉션 변경 되 면, 추가 하는 등 요소, 수정 또는 삭제 열거자는 무효화 하 고 &lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;재설정 &lt;xref:System.InvalidOperationException&gt;.&lt;/xref:System.InvalidOperationException&gt; throw 또는&lt;/xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt; 을 다음에 호출</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">컬렉션은 열거자를 만든 후 수정 되었습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>