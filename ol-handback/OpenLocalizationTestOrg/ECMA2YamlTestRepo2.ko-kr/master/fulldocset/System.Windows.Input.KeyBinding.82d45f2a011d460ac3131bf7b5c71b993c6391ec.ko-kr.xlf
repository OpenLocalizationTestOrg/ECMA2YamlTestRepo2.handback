<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e12b67e3363bc166f85cfceac6136b54a050a732</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Input.KeyBinding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcdc73baf76907911680eff964ec00c975ee1b39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274aa9ef36f74383e012c9a0e35d9a2d33eae109</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Binds a <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a <bpt id="p2">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> (or another  &lt;xref:System.Windows.Input.ICommand&gt; implementation).</source>
          <target state="translated">바인딩하는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에 <bpt id="p2">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> (또는 다른 &lt;xref:System.Windows.Input.ICommand&gt;구현).&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A KeyBinding associates a &lt;xref:System.Windows.Input.KeyGesture&gt; with a &lt;xref:System.Windows.Input.ICommand&gt;, such as a &lt;xref:System.Windows.Input.RoutedCommand&gt;.</source>
          <target state="translated">KeyBinding 연결는 &lt;xref:System.Windows.Input.KeyGesture&gt;와 &lt;xref:System.Windows.Input.ICommand&gt;에 &lt;xref:System.Windows.Input.RoutedCommand&gt;.&lt;/xref:System.Windows.Input.RoutedCommand&gt; 같은&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Input.RoutedCommand&gt; is the primary implementation of the &lt;xref:System.Windows.Input.ICommand&gt; interface for the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commanding system .</source>
          <target state="translated">&lt;xref:System.Windows.Input.RoutedCommand&gt;기본 구현에서 &lt;xref:System.Windows.Input.ICommand&gt;에 대 한 인터페이스는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 명령 시스템.&lt;/xref:System.Windows.Input.ICommand&gt;&lt;/xref:System.Windows.Input.RoutedCommand&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, when the &lt;xref:System.Windows.Input.KeyGesture&gt; is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt; value.</source>
          <target state="translated">일반적으로 &lt;xref:System.Windows.Input.KeyGesture&gt;실행 되는 명령을 호출 하지만 명령 동작은 영향을 받기 명령 별 요소와 같은 &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;값.&lt;/xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on commanding, see the <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">명령에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>명령 실행 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the exception of the function keys and the numeric keypad keys, a valid &lt;xref:System.Windows.Input.KeyGesture&gt; must contain exactly one &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.</source>
          <target state="translated">기능 키와 올바른 숫자 키패드의 키를 제외한 &lt;xref:System.Windows.Input.KeyGesture&gt;하나만 있어야 &lt;xref:System.Windows.Input.Key&gt;하나의 나 더 많은 &lt;xref:System.Windows.Input.ModifierKeys&gt;.&lt;/xref:System.Windows.Input.ModifierKeys&gt; &lt;/xref:System.Windows.Input.Key&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Function keys and numeric keypad keys do not require a modifier key in order to be a valid &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">기능 키 및 숫자 키패드 키가 필요 없습니다 보조키에 유효한 &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; 되려면</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible to specify an invalid &lt;xref:System.Windows.Input.KeyGesture&gt; and a KeyBinding with an invalid associated gesture, either through <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> or code.</source>
          <target state="translated">잘못 된 지정할 수는 &lt;xref:System.Windows.Input.KeyGesture&gt;및 통해는 잘못 된 관련된 제스처와 KeyBinding <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 또는 코드.&lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, there is no validation that prevents creating and binding a &lt;xref:System.Windows.Input.KeyGesture&gt; that contains only a nonfunction key, or only modifiers but no key.</source>
          <target state="translated">예를 들어,는 만들고 바인딩할 수 없는 없는 유효성 검사는 &lt;xref:System.Windows.Input.KeyGesture&gt;비 키만 또는 한정자 하지만 키를 포함 하.&lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such a KeyBinding will never attempt to invoke its associated command.</source>
          <target state="translated">이러한 KeyBinding 연결 된 명령이 호출 하려고 시도 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When defining a KeyBinding in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">KeyBinding을 정의할 때 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; 를 지정 하는 방법은 두 가지가</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first way to establish a KeyBinding in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">KeyBinding을 설정 하는 첫 번째 방법은 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;예를 들어 "CTRL + P" 단일 문자열로 키와 한정자를 지정 하는 구문을 사용 하면 키 바인딩 요소의 특성.&lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second way is to define the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; attribute and the &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; attributes of the KeyBinding element.</source>
          <target state="translated">두 번째 방법은 정의 하는 것은 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;특성 및 &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;KeyBinding 요소의 특성.&lt;/xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; &lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 &lt;xref:System.Windows.Input.KeyGesture&gt;동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.&lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case when the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">경우에는 경우는 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;의 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;특성이 설정 되어 모든, 정의 된 특성 마지막에 사용할 &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; &lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; 및&lt;/xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; &lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can potentially have situations where for example a &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">예를 들어 상황을 잠재적으로 점이 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.&lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;에서 특성 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.&lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A KeyBinding can be defined on a specific object or at the class level by registering a &lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt; on the &lt;xref:System.Windows.Input.CommandManager&gt; class.</source>
          <target state="translated">KeyBinding 정의할 수 있습니다 또는 클래스 수준에서 특정 개체에 대 한 &lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt; &lt;xref:System.Windows.Input.CommandManager&gt;클래스&lt;/xref:System.Windows.Input.CommandManager&gt; 에&lt;/xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt; 등록 하 여</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most typical way to define a KeyBinding is within the control template, setting the &lt;xref:System.Windows.UIElement.InputBindings%2A&gt; property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> by declaring one or more &lt;xref:System.Windows.Input.MouseBinding&gt; or KeyBinding elements.</source>
          <target state="translated">KeyBinding을 정의 하는 가장 일반적인 방법은 설정 하는 컨트롤 템플릿을 내인지는 &lt;xref:System.Windows.UIElement.InputBindings%2A&gt;속성 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 하나 이상의 선언 하 여 &lt;xref:System.Windows.Input.MouseBinding&gt;또는 키 바인딩 요소.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.UIElement.InputBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 하 여 지정 된 클래스 &lt;xref:System.Windows.Input.ICommand&gt;및 <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The command to associate with <ph id="ph1">`gesture`</ph>.</source>
          <target state="translated">와 연결할 명령을 <ph id="ph1">`gesture`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The key combination to associate with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">와 연결할 키 조합을 <ph id="ph1">`command`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.Windows.Input.ICommand&gt; and the specified <bpt id="p2">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> and <bpt id="p3">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> which will be converted into a <bpt id="p4">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 사용 하 여 지정 된 클래스 &lt;xref:System.Windows.Input.ICommand&gt;와 지정 된 <bpt id="p2">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 및 <bpt id="p3">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 으로 변환 됩니다는 <bpt id="p4">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The command to invoke.</source>
          <target state="translated">호출 하는 명령입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The key to be associated with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">와 연결할 키 <ph id="ph1">`command`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The modifiers to be associated with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">와 연결할 한정자 <ph id="ph1">`command`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates an instance of a <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">인스턴스를 만듭니다는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The new object.</source>
          <target state="translated">새 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets the gesture associated with this <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">연결 된이 제스처를 가져오거나 설정 합니다. <bpt id="p1">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 &lt;xref:System.Windows.Input.KeyGesture&gt;포함 해야 합니다는 &lt;xref:System.Windows.Input.Key&gt;하나의 나 더 많은 &lt;xref:System.Windows.Input.ModifierKeys&gt;.&lt;/xref:System.Windows.Input.ModifierKeys&gt; &lt;/xref:System.Windows.Input.Key&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The key sequence.</source>
          <target state="translated">키 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>the value <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">gesture</ph><ept id="p1">&lt;/code&gt;</ept> is being set to is not a <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">gesture</ph> <ept id="p1">&lt;/code&gt;</ept> 은지 않습니다으로 설정 하는 <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> associated with this <bpt id="p3">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져오거나는 <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의 <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 이 연관 <bpt id="p3">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 &lt;xref:System.Windows.Input.KeyGesture&gt;포함 해야 합니다는 &lt;xref:System.Windows.Input.Key&gt;하나의 나 더 많은 &lt;xref:System.Windows.Input.ModifierKeys&gt;.&lt;/xref:System.Windows.Input.ModifierKeys&gt; &lt;/xref:System.Windows.Input.Key&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>When defining a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">정의 하는 경우는 &lt;xref:System.Windows.Input.KeyBinding&gt;에 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; 를 지정 하는 방법은 두 가지가&lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first way to establish a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the &lt;xref:System.Windows.Input.KeyBinding&gt; element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">설정 하는 첫 번째 방법은 &lt;xref:System.Windows.Input.KeyBinding&gt;에 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;특성은 &lt;xref:System.Windows.Input.KeyBinding&gt;예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를.&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second way is to define the Key attribute and the &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; attributes of the &lt;xref:System.Windows.Input.KeyBinding&gt; element.</source>
          <target state="translated">두 번째 방법은 키 특성을 정의 하 고 &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;의 특성은 &lt;xref:System.Windows.Input.KeyBinding&gt;요소.&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 &lt;xref:System.Windows.Input.KeyGesture&gt;동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.&lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case when the Key, &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">경우에는 경우 키를 &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;의 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;특성이 설정 되어 모든, 정의 된 특성 마지막에 사용할 &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; &lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; 및&lt;/xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">잠재적으로 있고 있는 경우 예를 들어 키 집합 마지막 됩니다 이전 제스처의 키 구성 요소 바로 덮어쓰게 제스처의 한정자를 그대로 둡니다 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;에서 특성 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.&lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The key part of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">핵심 부분은 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.KeyBinding.Key*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.Input.KeyBinding.Key*&gt;종속성 속성입니다.&lt;/xref:System.Windows.Input.KeyBinding.Key*&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> associated with this <bpt id="p3">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">가져오거나는 <bpt id="p1">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의 <bpt id="p2">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 이 연관 <bpt id="p3">&lt;xref href="System.Windows.Input.KeyBinding"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the exception of the function keys and the numeric keypad keys, a &lt;xref:System.Windows.Input.KeyGesture&gt; must contain a &lt;xref:System.Windows.Input.Key&gt; and one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 &lt;xref:System.Windows.Input.KeyGesture&gt;포함 해야 합니다는 &lt;xref:System.Windows.Input.Key&gt;하나의 나 더 많은 &lt;xref:System.Windows.Input.ModifierKeys&gt;.&lt;/xref:System.Windows.Input.ModifierKeys&gt; &lt;/xref:System.Windows.Input.Key&gt; &lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When defining a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">정의 하는 경우는 &lt;xref:System.Windows.Input.KeyBinding&gt;에 <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; 를 지정 하는 방법은 두 가지가&lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first way to establish a &lt;xref:System.Windows.Input.KeyBinding&gt; in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is to define the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute of the &lt;xref:System.Windows.Input.KeyBinding&gt; element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">설정 하는 첫 번째 방법은 &lt;xref:System.Windows.Input.KeyBinding&gt;에 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;특성은 &lt;xref:System.Windows.Input.KeyBinding&gt;예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를.&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second way is to define the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; attribute and the Modifiers attributes of the &lt;xref:System.Windows.Input.KeyBinding&gt; element.</source>
          <target state="translated">두 번째 방법은 정의 하는 것은 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;특성 및 특성 한정자는 &lt;xref:System.Windows.Input.KeyBinding&gt;요소.&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both ways of setting the &lt;xref:System.Windows.Input.KeyGesture&gt; are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 &lt;xref:System.Windows.Input.KeyGesture&gt;동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.&lt;/xref:System.Windows.Input.KeyGesture&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case when the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, Modifiers, and the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attributes are all set, the attribute which is defined last will be used for the &lt;xref:System.Windows.Input.KeyGesture&gt;.</source>
          <target state="translated">경우에는 경우는 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;, 한정자 및의 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;특성이 모두 설정 되어, &lt;xref:System.Windows.Input.KeyGesture&gt;.&lt;/xref:System.Windows.Input.KeyGesture&gt; 에 사용할 마지막 정의 된 특성&lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; &lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can potentially have situations where for example a &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">예를 들어 상황을 잠재적으로 점이 &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.&lt;/xref:System.Windows.Input.KeyBinding.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it is recommended that you use only the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; attribute from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;에서 특성 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.&lt;/xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Modifiers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Modifiers="oneOrMoreModifierKeys"/&gt;      ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Modifiers"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreModifierKeys<ept id="p3">*</ept>    One or more modifier keys, defined by the &lt;xref:System.Windows.Input.ModifierKeys&gt; enumeration, delimited with a "+" character.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Modifiers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 특성 사용 <ph id="ph1">```   &lt;object Modifiers="oneOrMoreModifierKeys"/&gt;      ```</ph> <bpt id="p2">&lt;a name="xamlValues_Modifiers"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 값 <bpt id="p3">*</bpt>oneOrMoreModifierKeys<ept id="p3">*</ept> 에 정의 된 하나 이상의 보조 키의 &lt;xref:System.Windows.Input.ModifierKeys&gt;"+" 문자로 구분 열거형.&lt;/xref:System.Windows.Input.ModifierKeys&gt;      </target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The modifier keys of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">보조 키의 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref href="System.Windows.Input.ModifierKeys"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.KeyBinding.Modifiers*&gt; dependency property.</source>
          <target state="translated">식별 된 &lt;xref:System.Windows.Input.KeyBinding.Modifiers*&gt;종속성 속성입니다.&lt;/xref:System.Windows.Input.KeyBinding.Modifiers*&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>