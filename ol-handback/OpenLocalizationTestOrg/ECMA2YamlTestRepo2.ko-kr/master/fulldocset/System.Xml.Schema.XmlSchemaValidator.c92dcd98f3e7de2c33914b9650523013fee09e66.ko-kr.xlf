<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4ac62558c0577e175a60eeabe38e09f46fe8d3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.Schema.XmlSchemaValidator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11af83dfc8798ddd6445853c9687a2ac8d1dbeb0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad40590bbde8a13fd8908f8bb1630a604da696f1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an XML Schema Definition Language (XSD) Schema validation engine.</source>
          <target state="translated">XML 스키마 정의 언어 (XSD) 스키마 유효성 검사 엔진을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The XmlSchemaValidator class cannot be inherited.</source>
          <target state="translated">XmlSchemaValidator 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  -   Do not use schemas from unknown or untrusted sources or locations.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt;-위치 또는 알 수 없거나 신뢰할 수 없는 원본에서 스키마를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so will compromise the security of your code.</source>
          <target state="translated">이렇게 하면 코드의 보안을 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; -   XML schemas (including inline schemas) are inherently vulnerable to denial of service attacks; do not accept them in untrusted scenarios.</source>
          <target state="translated">&gt;-(인라인 스키마 포함)는 XML 스키마는 기본적으로 서비스 거부 공격;에 취약 신뢰할 수 없는 경우에는 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; -   Schema validation error messages and exceptions may expose sensitive information about the content model or URI paths to the schema file.</source>
          <target state="translated">&gt;-스키마 유효성 검사 오류 메시지와 예외에는 정적 콘텐츠 모델이 나 스키마 파일에 대 한 URI 경로 대 한 중요 한 정보가 노출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be careful not to expose this information to untrusted callers.</source>
          <target state="translated">신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 하십시오.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XmlSchemaValidator class provides an efficient, high-performance mechanism to validate XML data against XML schemas in a push-based manner.</source>
          <target state="translated">XmlSchemaValidator 클래스에에서 유효성을 검사할 XML 스키마에 대해 XML 데이터 밀어넣기 기반 방식으로 있는 효과적인 고성능 메커니즘을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the XmlSchemaValidator class allows you to validate an XML infoset in-place without having to serialize it as an XML document and then reparse the document using a validating XML reader.</source>
          <target state="translated">예를 들어 XmlSchemaValidator 클래스를 사용 하는 내부 XML infoset에서 XML 문서로 serialize 한 다음 유효성 검사 XML 판독기를 사용 하 여 문서를 재분석 하지 않고 유효성을 검사 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XmlSchemaValidator class can also be used to build validation engines over custom XML data sources or as a way to build a validating XML writer.</source>
          <target state="translated">XmlSchemaValidator 클래스 사용자 지정 XML 데이터 소스를 통해 또는 유효성 검사 XML 작성기를 작성 하는 방법으로 유효성 검사 엔진을 빌드하는 데 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the XmlSchemaValidator class, see the <bpt id="p1">[</bpt>XmlSchemaValidator Push-Based Validation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> topic.</source>
          <target state="translated">XmlSchemaValidator 클래스에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>XmlSchemaValidator 밀어넣기 기반 유효성 검사<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; and &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; validation flags of an XmlSchemaValidator object are not set be default.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;및 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;XmlSchemaValidator 개체의 플래그 설정 되지 않은 유효성 검사 기본값 이어야 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt; property of an XmlSchemaValidator object is <ph id="ph1">`null`</ph> by default.</source>
          <target state="translated">또한는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;XmlSchemaValidator 개체의 속성은 <ph id="ph1">`null`</ph> 기본적으로.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.</source>
          <target state="translated">결과적으로 외부 스키마에서 참조 되는 가져오기 또는 redefine 요소 해결 되지 않은 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the XmlSchemaValidator constructor.</source>
          <target state="translated">다음은 XmlSchemaValidator 생성자를 사용 하는 경우를 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The contents of the &lt;xref:System.Xml.Schema.XmlSchemaSet&gt; parameter are copied into an internal &lt;xref:System.Xml.Schema.XmlSchemaSet&gt; object when the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; or the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; validation options are set.</source>
          <target state="translated">-의 콘텐츠는 &lt;xref:System.Xml.Schema.XmlSchemaSet&gt;매개 변수는 내부에 복사 됩니다 &lt;xref:System.Xml.Schema.XmlSchemaSet&gt;개체 때는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;또는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;유효성 검사 옵션을 설정 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaSet&gt; &lt;/xref:System.Xml.Schema.XmlSchemaSet&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, changes to the input &lt;xref:System.Xml.Schema.XmlSchemaSet&gt; object during validation do not affect the outcome of validation.</source>
          <target state="translated">결과적으로, 입력에 변경 &lt;xref:System.Xml.Schema.XmlSchemaSet&gt;유효성 검사 중에 개체를 유효성 검사의 결과 영향을 주지 않습니다.&lt;/xref:System.Xml.Schema.XmlSchemaSet&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the &lt;xref:System.Xml.Schema.XmlSchemaSet&gt; parameter specified is not compiled, its &lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt; method is called.</source>
          <target state="translated">If는 &lt;xref:System.Xml.Schema.XmlSchemaSet&gt;지정 된 매개 변수는 컴파일되지 해당 &lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt;메서드를 호출 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaSet&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Xml.IXmlNamespaceResolver&gt; parameter is especially important for validating <ph id="ph1">`xs:QName`</ph> types.</source>
          <target state="translated">- &lt;xref:System.Xml.IXmlNamespaceResolver&gt;매개 변수는 유효성 검사를 위해 특히 중요 <ph id="ph1">`xs:QName`</ph> 형식.&lt;/xref:System.Xml.IXmlNamespaceResolver&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; class does not copy the in-scope namespaces from the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object but instead holds a reference to it.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;클래스는 &lt;xref:System.Xml.IXmlNamespaceResolver&gt;개체 대신.를 대 한 참조를 보유 하지만&lt;/xref:System.Xml.IXmlNamespaceResolver&gt; 범위 내의 네임 스페이스를 복사 하지 않습니다&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows new namespaces to be added to the &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object during the validation process.</source>
          <target state="translated">이렇게 하면 새 네임 스페이스에 추가할 수 있습니다.는 &lt;xref:System.Xml.IXmlNamespaceResolver&gt;유효성 검사 프로세스 중에 개체를.&lt;/xref:System.Xml.IXmlNamespaceResolver&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; and &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; validation flags of an &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object are not set be default.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;및 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;의 유효성 검사 플래그는 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;없는 개체 집합에는 기본값이 될.&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt; property of an &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object is <ph id="ph1">`null`</ph> by default.</source>
          <target state="translated">또한는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;속성은 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;개체가 <ph id="ph1">`null`</ph> 기본적으로.&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.</source>
          <target state="translated">결과적으로 외부 스키마에서 참조 되는 가져오기 또는 redefine 요소 해결 되지 않은 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.XmlNameTable&gt; object containing element and attribute names as atomized strings.</source>
          <target state="translated">&lt;xref:System.Xml.XmlNameTable&gt;원자화 된 문자열 형식의 요소 및 특성 이름을 포함 하는 개체입니다.&lt;/xref:System.Xml.XmlNameTable&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the XML Schema Definition Language (XSD) schemas used for validation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 유효성 검사에 사용 되는 XML 스키마 정의 언어 (XSD)를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.IXmlNamespaceResolver&gt; object used for resolving namespaces encountered during validation.</source>
          <target state="translated">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;유효성 검사 중 발견 된 네임 스페이스를 확인 하는 데 사용 되는 개체입니다.&lt;/xref:System.Xml.IXmlNamespaceResolver&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidationFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value specifying schema validation options.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidationFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 유효성 검사 옵션을 지정 하는 값입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>One or more of the parameters specified are <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 매개 변수 중 하나 이상이 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An error occurred while compiling schemas in the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter.</source>
          <target state="translated">스키마를 컴파일하는 동안 오류가 발생 했습니다.는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.</source>
          <target state="translated">XML 스키마 정의 언어 (XSD) 스키마 유효성 검사에 사용 되는 스키마 집합에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the AddSchema method.</source>
          <target state="translated">다음은 AddSchema 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The AddSchema method can be used to simulate the effect of encountering an inline XML schema in the XML document being validated.</source>
          <target state="translated">유효성을 검사 중인 XML 문서에 인라인 XML 스키마의 효과 시뮬레이션 하-AddSchema 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The target namespace of the &lt;xref:System.Xml.Schema.XmlSchema&gt; parameter cannot match that of any element or attribute already encountered by the &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object.</source>
          <target state="translated">-대상의 네임 스페이스는 &lt;xref:System.Xml.Schema.XmlSchema&gt;매개 변수는 임의의 요소 또는 특성에서 이미 발생의 일치할 수 없습니다는 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;개체입니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt; &lt;/xref:System.Xml.Schema.XmlSchema&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; validation option is not set, the AddSchema method does nothing.</source>
          <target state="translated">If는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;유효성 검사 옵션 설정 하지 않으면, AddSchema 메서드는 아무 작업도 수행 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.Schema.XmlSchema&gt; object to add to the set of schemas used for validation.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XmlSchema&gt;유효성 검사에 사용 되는 스키마 집합에 추가할 개체입니다.&lt;/xref:System.Xml.Schema.XmlSchema&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchema&gt; parameter specified is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XmlSchema&gt;지정 된 매개 변수는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Xml.Schema.XmlSchema&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The target namespace of the &lt;xref:System.Xml.Schema.XmlSchema&gt; parameter matches that of any element or attribute already encountered by the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">대상 네임 스페이스는 &lt;xref:System.Xml.Schema.XmlSchema&gt;매개 변수와 일치 한 요소 또는 특성에서 이미 발생 하는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.&lt;/xref:System.Xml.Schema.XmlSchema&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchema&gt; parameter is invalid.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XmlSchema&gt;매개 변수가 올바르지 않습니다.&lt;/xref:System.Xml.Schema.XmlSchema&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Ends validation and checks identity constraints for the entire XML document.</source>
          <target state="translated">유효성 검사를 끝내 고 전체 XML 문서에 대 한 identity 제약 조건을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The EndValidation method ends validation and checks identity constraints for the entire XML document if the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; validation option is set.</source>
          <target state="translated">에 EndValidation 유효성 검사를 종료 메서드와 경우 전체 XML 문서에 대 한 identity 제약 조건을 검사는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;유효성 검사 옵션을 설정 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An identity constraint error was found in the XML document.</source>
          <target state="translated">XML 문서에서 identity 제약 조건 오류가 발견 되었습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the expected attributes for the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에 나타날된 수 있는 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the GetExpectedAttributes method.</source>
          <target state="translated">다음은 GetExpectedAttributes 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the GetExpectedAttributes method is called immediately after the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt; method, all the attributes that could appear in the XML document are returned.</source>
          <target state="translated">-GetExpectedAttributes 메서드 후 즉시 호출 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;메서드를 XML 문서에 나타날 수 있는 모든 특성이 반환 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the GetExpectedAttributes method is called after one or more calls to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; method, the attributes that haven't yet been validated for the current element are returned.</source>
          <target state="translated">-하나 이상의 호출을 GetExpectedAttributes 메서드를 호출 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;메서드, 현재 요소에 대 한 유효성 검사 아직 하지 않은 특성이 반환 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects or an empty array if there are no expected attributes.</source>
          <target state="translated">배열을 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 또는 예상 된 특성이 없는 경우 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the expected particles in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 필요한 파티클을 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid particles that can be returned by the GetExpectedParticles method are instances of the &lt;xref:System.Xml.Schema.XmlSchemaElement&gt; and &lt;xref:System.Xml.Schema.XmlSchemaAny&gt; classes.</source>
          <target state="translated">GetExpectedParticles 메서드에 의해 반환 될 수 있는 유효한 파티클은의 인스턴스는 &lt;xref:System.Xml.Schema.XmlSchemaElement&gt;및 &lt;xref:System.Xml.Schema.XmlSchemaAny&gt;클래스.&lt;/xref:System.Xml.Schema.XmlSchemaAny&gt; &lt;/xref:System.Xml.Schema.XmlSchemaElement&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the compositor for the content model is an <ph id="ph1">`xs:sequence`</ph>, only the next particle in the sequence is returned.</source>
          <target state="translated">콘텐츠 모델의 compositor 다음과 같은 경우는 <ph id="ph1">`xs:sequence`</ph>, 시퀀스에서 다음 파티클만 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the compositor for the content model is an <ph id="ph1">`xs:all`</ph> or an <ph id="ph2">`xs:choice`</ph>, then all valid particles that could follow in the current element context are returned.</source>
          <target state="translated">콘텐츠 모델의 compositor가 하는 경우는 <ph id="ph1">`xs:all`</ph> 또는 <ph id="ph2">`xs:choice`</ph>, 현재 요소 컨텍스트에서 따를 수 있는 유효한 파티클이 모두 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the XML Schema Definition Language (XSD) schema and XML document that follow, after validating the <ph id="ph1">`book`</ph> element, the <ph id="ph2">`book`</ph> element is the current element context.</source>
          <target state="translated">예를 들어, XML 스키마 정의 언어 (XSD)에서 스키마 및 XML 문서를 확인 한 후 따르는 <ph id="ph1">`book`</ph> 요소는 <ph id="ph2">`book`</ph> 요소는 현재 요소 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetExpectedParticles method returns an array containing a single &lt;xref:System.Xml.Schema.XmlSchemaElement&gt; object representing the <ph id="ph1">`title`</ph> element.</source>
          <target state="translated">GetExpectedParticles 메서드 하나만 포함 된 배열을 반환 &lt;xref:System.Xml.Schema.XmlSchemaElement&gt;나타내는 개체는 <ph id="ph1">`title`</ph> 요소.&lt;/xref:System.Xml.Schema.XmlSchemaElement&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the validation context is the <ph id="ph1">`title`</ph> element, the GetExpectedParticles method returns an empty array.</source>
          <target state="translated">유효성 검사 컨텍스트가 때는 <ph id="ph1">`title`</ph> 요소인 GetExpectedParticles 메서드는 빈 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the GetExpectedParticles method is called after the <ph id="ph1">`title`</ph> element has been validated but before the <ph id="ph2">`description`</ph> element has been validated, it returns an array containing a single &lt;xref:System.Xml.Schema.XmlSchemaElement&gt; object representing the <ph id="ph3">`description`</ph> element.</source>
          <target state="translated">GetExpectedParticles 메서드를 호출 하는 경우는 <ph id="ph1">`title`</ph> 요소의 유효성을 검사 하기 전에 <ph id="ph2">`description`</ph> 요소 검증 된, 하나만 포함 된 배열을 반환 &lt;xref:System.Xml.Schema.XmlSchemaElement&gt;나타내는 개체는 <ph id="ph3">`description`</ph> 요소.&lt;/xref:System.Xml.Schema.XmlSchemaElement&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the GetExpectedParticles method is called after the <ph id="ph1">`description`</ph> element has been validated then it returns an array containing a single &lt;xref:System.Xml.Schema.XmlSchemaAny&gt; object representing the wildcard.</source>
          <target state="translated">GetExpectedParticles 메서드를 호출 하는 경우는 <ph id="ph1">`description`</ph> 요소 검증 된 하나만 포함 된 배열을 반환 합니다. &lt;xref:System.Xml.Schema.XmlSchemaAny&gt;와일드 카드를 나타내는 개체입니다.&lt;/xref:System.Xml.Schema.XmlSchemaAny&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```vb#   Dim reader As XmlReader =  XmlReader.Create("input.xml")       Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()    schemaSet.Add(Nothing, "schema.xsd")   Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)       Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)   validator.Initialize()      validator.ValidateElement("book", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement("title", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next   validator.ValidateEndElement(Nothing)      For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement("description", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()       Console.WriteLine(particle.GetType())   Next      validator.ValidateElement("namespace", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      validator.ValidateEndElement(Nothing)   ```</ph>      <ph id="ph2">```c#   XmlReader reader = XmlReader.Create("input.xml");      XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(null, "schema.xsd");   XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);      XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);   validator.Initialize();      validator.ValidateElement("book", "", null);      validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement("title", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }   validator.ValidateEndElement(null);      foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement("description", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())   {       Console.WriteLine(particle.GetType());   }      validator.ValidateElement("namespace", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      validator.ValidateEndElement(null);   ```</ph>       The example takes the following XML as input.</source>
          <target state="translated"><ph id="ph1">```vb#   Dim reader As XmlReader =  XmlReader.Create("input.xml")       Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()    schemaSet.Add(Nothing, "schema.xsd")   Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)       Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)   validator.Initialize()      validator.ValidateElement("book", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement("title", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next   validator.ValidateEndElement(Nothing)      For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement("description", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()       Console.WriteLine(particle.GetType())   Next      validator.ValidateElement("namespace", "", Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      validator.ValidateEndElement(Nothing)   ```</ph>      <ph id="ph2">```c#   XmlReader reader = XmlReader.Create("input.xml");      XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(null, "schema.xsd");   XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);      XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);   validator.Initialize();      validator.ValidateElement("book", "", null);      validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement("title", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }   validator.ValidateEndElement(null);      foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement("description", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())   {       Console.WriteLine(particle.GetType());   }      validator.ValidateElement("namespace", "", null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      validator.ValidateEndElement(null);   ```</ph>이 예제에서는 다음 XML을 입력으로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;`</ph>       <ph id="ph2">`&lt;xs:element name="book"&gt;`</ph>       <ph id="ph3">`&lt;xs:complexType&gt;`</ph>       <ph id="ph4">`&lt;xs:sequence&gt;`</ph>       <ph id="ph5">`&lt;xs:element name="title" type="xs:string" /&gt;`</ph>       <ph id="ph6">`&lt;xs:element name="description" type="xs:string" /&gt;`</ph>       <ph id="ph7">`&lt;xs:any processContents ="lax"/&gt;`</ph>       <ph id="ph8">`&lt;/xs:sequence&gt;`</ph>       <ph id="ph9">`&lt;/xs:complexType&gt;`</ph>       <ph id="ph10">`&lt;/xs:element&gt;`</ph>       <ph id="ph11">`&lt;/xs:schema&gt;`</ph>       The example takes the following XSD schema as input.</source>
          <target state="translated"><ph id="ph1">`&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;`</ph>       <ph id="ph2">`&lt;xs:element name="book"&gt;`</ph>       <ph id="ph3">`&lt;xs:complexType&gt;`</ph>       <ph id="ph4">`&lt;xs:sequence&gt;`</ph>       <ph id="ph5">`&lt;xs:element name="title" type="xs:string" /&gt;`</ph>       <ph id="ph6">`&lt;xs:element name="description" type="xs:string" /&gt;`</ph>       <ph id="ph7">`&lt;xs:any processContents ="lax"/&gt;`</ph>       <ph id="ph8">`&lt;/xs:sequence&gt;`</ph>       <ph id="ph9">`&lt;/xs:complexType&gt;`</ph>       <ph id="ph10">`&lt;/xs:element&gt;`</ph>       <ph id="ph11">`&lt;/xs:schema&gt;`</ph>이 예제에서는 입력으로 다음 XSD 스키마를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;book&gt;`</ph>       <ph id="ph2">`&lt;title&gt;My Book&lt;/title&gt;`</ph>       <ph id="ph3">`&lt;description&gt;My Book's Description&lt;/description&gt;`</ph>       <ph id="ph4">`&lt;namespace&gt;System.Xml.Schema&lt;/namespace&gt;`</ph>       <ph id="ph5">`&lt;/book&gt;`</ph></source>
          <target state="translated"><ph id="ph1">`&lt;book&gt;`</ph>       <ph id="ph2">`&lt;title&gt;My Book&lt;/title&gt;`</ph>       <ph id="ph3">`&lt;description&gt;My Book's Description&lt;/description&gt;`</ph>       <ph id="ph4">`&lt;namespace&gt;System.Xml.Schema&lt;/namespace&gt;`</ph>       <ph id="ph5">`&lt;/book&gt;`</ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaParticle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects or an empty array if there are no expected particles.</source>
          <target state="translated">배열을 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaParticle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체나 필요한 파티클 없는 경우 빈 배열입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Validates identity constraints on the default attributes and populates the <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specified with <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects for any attributes with default values that have not been previously validated using the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; method in the element context.</source>
          <target state="translated">기본 특성에 identity 제약 조건을 유효성을 검사 하 고 채웁니다는 <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 으로 지정 된 <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 가 이전에 유효성을 검사 하지를 사용 하 여 기본 값을 갖는 모든 특성에 대 한 개체는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;요소 컨텍스트의 메서드.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetUnspecifiedDefaultAttributes method must be called after validating all the attributes for the current element with the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; method.</source>
          <target state="translated">현재 요소에 대 한 모든 특성을 확인 한 후 GetUnspecifiedDefaultAttributes 메서드를 호출 해야는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;메서드.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GetUnspecifiedDefaultAttributes method should be used to determine what default attributes are to be inserted into the XML document being validated.</source>
          <target state="translated">유효성을 검사 중인 XML 문서에 삽입할 기본 특성 결정을 사용할지 GetUnspecifiedDefaultAttributes 메서드.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to populate with <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects for any attributes not yet encountered during validation in the element context.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.ArrayList"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 채워질 <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 요소 컨텍스트의 유효성 검사 중 발생 하지 않은 모든 특성에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes the state of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">상태를 초기화는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Initialize method is only valid if called immediately after the construction of an &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object or after a call to &lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;.</source>
          <target state="translated">Initialize 메서드는 생성 후 즉시 호출 하는 경우에 유효만 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;개체 또는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A&gt; 를 호출한 후&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Calling the &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize<bpt id="p1">*</bpt>&gt; method is valid immediately after the construction of an <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object or after a call to &lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation<ept id="p1">*</ept>&gt; only.</source>
          <target state="translated">호출의 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 메서드는 생성 후 즉시 유효는 <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체 또는를 호출한 후 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;만 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes the state of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object using the <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> specified for partial validation.</source>
          <target state="translated">상태를 초기화는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 를 사용 하 여 개체는 <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 부분 유효성 검사에 대해 지정 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Initialize method that takes an &lt;xref:System.Xml.Schema.XmlSchemaObject&gt; as a parameter initializes an &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object to its starting state for partial validation.</source>
          <target state="translated">Initialize 메서드를 사용 하는 &lt;xref:System.Xml.Schema.XmlSchemaObject&gt;매개 변수를 초기화 한 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;개체 부분 유효성 검사에 대 한 시작 상태로.&lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt; &lt;/xref:System.Xml.Schema.XmlSchemaObject&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, or <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> object used to initialize the validation context of the <bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> object for partial validation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>, 또는 <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 의 유효성 검사 컨텍스트를 초기화 하는 데 사용 되는 개체는 <bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept> 부분 유효성 검사에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Calling the &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize<bpt id="p1">*</bpt>&gt; method is valid immediately after the construction of an <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object or after a call to &lt;xref:System.Xml.Schema.XmlSchemaValidator.EndValidation<ept id="p1">*</ept>&gt; only.</source>
          <target state="translated">호출의 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 메서드는 생성 후 즉시 유효는 <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체 또는를 호출한 후 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;만 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter is not an <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, or <bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaType"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">The <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter is not an <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, or <bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaType"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter cannot be <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 매개 변수 여야 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets or sets the line number information for the XML node being validated.</source>
          <target state="translated">유효성을 검사할 XML 노드의 줄 번호 정보를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Line information is reported by any &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt; thrown during the validation process.</source>
          <target state="translated">모든 줄 정보를 보고 &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;유효성 검사 프로세스 중에 throw 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationException&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The default &lt;xref:System.Xml.IXmlLineInfo&gt; object returned by the LineInfoProvider property returns 0 for the &lt;xref:System.Xml.IXmlLineInfo.LineNumber%2A&gt; and &lt;xref:System.Xml.IXmlLineInfo.LinePosition%2A&gt; properties.</source>
          <target state="translated">-기본 &lt;xref:System.Xml.IXmlLineInfo&gt;속성에 대 한 0을 반환 합니다. LineInfoProvider에서 반환 된 개체는 &lt;xref:System.Xml.IXmlLineInfo.LineNumber%2A&gt;및 &lt;xref:System.Xml.IXmlLineInfo.LinePosition%2A&gt;속성.&lt;/xref:System.Xml.IXmlLineInfo.LinePosition%2A&gt; &lt;/xref:System.Xml.IXmlLineInfo.LineNumber%2A&gt; &lt;/xref:System.Xml.IXmlLineInfo&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Xml.IXmlLineInfo&gt; object.</source>
          <target state="translated">&lt;xref:System.Xml.IXmlLineInfo&gt;개체입니다.&lt;/xref:System.Xml.IXmlLineInfo&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Skips validation of the current element content and prepares the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to validate content in the parent element's context.</source>
          <target state="translated">현재 요소 내용의 유효성 검사를 생략 하 고 준비는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체는 부모 요소의 컨텍스트에서 내용의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the SkipToEndElement method.</source>
          <target state="translated">다음은 SkipToEndElement 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The SkipToEndElement method skips validation of the current element content and prepares the &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object to validate content in the parent element's context; it is equivalent to skipping validation for all the children of the current element and then calling the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method.</source>
          <target state="translated">-SkipToEndElement 메서드는 현재 요소 내용의 유효성 검사를 생략 하 고 준비는 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;개체는 부모 요소의 컨텍스트에서 내용의 유효성을 검사 하는 현재 요소의 모든 자식에 대 한 유효성 검사를 생략 한 다음 호출 하는 것과 같습니다는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the current element content is successfully skipped, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.</source>
          <target state="translated">-현재 요소 콘텐츠를 성공적으로 건너뛰면 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성이 &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; 로 설정 되어&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  No validation errors are reported on skipped content.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 건너뛴된 콘텐츠에 유효성 검사 오류가 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set if the current element content is successfully skipped.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 현재 요소 콘텐츠를 성공적으로 건너뛰면 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The SkipToEndElement method was not called in the correct sequence.</source>
          <target state="translated">올바른 순서로 SkipToEndElement 메서드가 호출 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, calling SkipToEndElement after calling SkipToEndElement.</source>
          <target state="translated">예를 들어 SkipToEndElement를 호출한 후 SkipToEndElement를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets the source URI for the XML node being validated.</source>
          <target state="translated">유효성을 검사할 XML 노드의 소스 URI를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The source URI is reported by any &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt; thrown during the validation process.</source>
          <target state="translated">URI에서 보고 되는 소스 &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;유효성 검사 프로세스 중에 throw 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidationException&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the SourceUri property is not set, the file name for the XML document is &lt;xref:System.String.Empty&gt; in validation error messages.</source>
          <target state="translated">-SourceUri 속성을 설정 하지 않으면 XML 문서에 대 한 파일 이름 인지 &lt;xref:System.String.Empty&gt;유효성 검사 오류 메시지에.&lt;/xref:System.String.Empty&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Uri&gt; object representing the source URI for the XML node being validated; the default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A &lt;xref:System.Uri&gt;유효성을 검사할 XML 노드의 소스 URI를 나타내는 개체입니다; 기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Validates the attribute name, namespace URI, and value in the current element context.</source>
          <target state="translated">특성 이름, 네임 스페이스 URI 및 현재 요소 컨텍스트에서 값의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateAttribute method.</source>
          <target state="translated">다음은 ValidateAttribute 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt; method must be called after validating all the attributes for the current element with the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; method.</source>
          <target state="translated">- &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;메서드를 호출 하 여 현재 요소에 대 한 모든 특성을 확인 한 후 해야는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;메서드.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt; object was passed to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt; method, the ValidateAttribute method validates the attribute against the &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt; object.</source>
          <target state="translated">If는 &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;에 전달 된 개체는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;메서드, ValidateAttribute 메서드 특성에 대해 유효성을 검사는 &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;개체입니다.&lt;/xref:System.Xml.Schema.XmlSchemaAttribute&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaAttribute&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the attribute is successfully validated in the current element context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-현재 요소 컨텍스트에서 특성 확인 되는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The local name of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute to validate.</source>
          <target state="translated">네임 스페이스 URI 특성의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The value of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the attribute.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 특성의 유효성을 검사에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The validated attribute's value.</source>
          <target state="translated">유효성이 검사 된 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The attribute is not valid in the current element context.</source>
          <target state="translated">특성의 현재 요소 컨텍스트에서 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute<ept id="p1">*</ept>&gt; after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어 호출 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt; 를 호출한 후</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>One or more of the parameters specified are <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 매개 변수 중 하나 이상이 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Validates the attribute name, namespace URI, and value in the current element context.</source>
          <target state="translated">특성 이름, 네임 스페이스 URI 및 현재 요소 컨텍스트에서 값의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateAttribute method.</source>
          <target state="translated">다음은 ValidateAttribute 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt; method must be called after validating all the attributes for the current element with the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; method.</source>
          <target state="translated">- &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;메서드를 호출 하 여 현재 요소에 대 한 모든 특성을 확인 한 후 해야는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt;메서드.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If an &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt; object was passed to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt; method, the ValidateAttribute method validates the attribute against the &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt; object.</source>
          <target state="translated">If는 &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;에 전달 된 개체는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt;메서드, ValidateAttribute 메서드 특성에 대해 유효성을 검사는 &lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;개체입니다.&lt;/xref:System.Xml.Schema.XmlSchemaAttribute&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaAttribute&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the attribute is successfully validated in the current element context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-현재 요소 컨텍스트에서 특성 확인 되는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The local name of the attribute to validate.</source>
          <target state="translated">유효성을 검사할 특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute to validate.</source>
          <target state="translated">네임 스페이스 URI 특성의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept><bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> <bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 특성의 값을 특성의 XML 스키마 정의 언어 (XSD) 형식과 호환 되는 공용 언어 런타임 (CLR) 형식으로 전달 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the attribute.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 특성의 유효성을 검사에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This parameter and can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 및 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The validated attribute's value.</source>
          <target state="translated">유효성이 검사 된 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The attribute is not valid in the current element context.</source>
          <target state="translated">특성의 현재 요소 컨텍스트에서 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute<ept id="p1">*</ept>&gt; after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어 호출 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*&gt; 를 호출한 후</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One or more of the parameters specified are <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 매개 변수 중 하나 이상이 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Validates the element in the current context.</source>
          <target state="translated">현재 컨텍스트에서 요소의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateElement method.</source>
          <target state="translated">다음은 ValidateElement 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element name is successfully validated in the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element name or any of its attributes are invalid the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;; otherwise the &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.</source>
          <target state="translated">-특성 중 하나 나 요소 이름이 유효 하지 않은 경우 현재 컨텍스트는 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성이 &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;고, 그렇지 않으면 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; 속성이&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The local name of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element to validate.</source>
          <target state="translated">네임 스페이스 URI는 요소의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the element's name.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 요소의 이름의 유효성을 검사에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The element's name is not valid in the current context.</source>
          <target state="translated">요소의 이름을 현재 컨텍스트에서 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Validates the element in the current context with the <ph id="ph1">`xsi:Type`</ph>, <ph id="ph2">`xsi:Nil`</ph>, <ph id="ph3">`xsi:SchemaLocation`</ph>, and <ph id="ph4">`xsi:NoNamespaceSchemaLocation`</ph> attribute values specified.</source>
          <target state="translated">와 현재 컨텍스트에서 요소의 유효성을 검사는 <ph id="ph1">`xsi:Type`</ph>, <ph id="ph2">`xsi:Nil`</ph>, <ph id="ph3">`xsi:SchemaLocation`</ph>, 및 <ph id="ph4">`xsi:NoNamespaceSchemaLocation`</ph> 특성 값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateElement method.</source>
          <target state="translated">다음은 ValidateElement 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element name is successfully validated in the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element name or any of its attributes are invalid in the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;; otherwise the &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.</source>
          <target state="translated">-요소 이름이 나 특성 중 하나는 현재 컨텍스트에서 유효 하지 않은 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성이 &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;고, 그렇지 않으면 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; 속성이&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; value was not passed as a parameter to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt; constructor, <ph id="ph1">`xsi:SchemaLocation`</ph> and <ph id="ph2">`xsi:NoNamespaceSchemaLocation`</ph> attribute values are ignored.</source>
          <target state="translated">If는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;값에 대 한 매개 변수로 전달 되지 않았습니다는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt;생성자 <ph id="ph1">`xsi:SchemaLocation`</ph> 및 <ph id="ph2">`xsi:NoNamespaceSchemaLocation`</ph> 특성 값은 무시 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The local name of the element to validate.</source>
          <target state="translated">유효성을 검사할 요소의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element to validate.</source>
          <target state="translated">네임 스페이스 URI는 요소의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the element's name.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 요소의 이름의 유효성을 검사에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xsi:Type`</ph> attribute value of the element.</source>
          <target state="translated"><ph id="ph1">`xsi:Type`</ph> 특성 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xsi:Nil`</ph> attribute value of the element.</source>
          <target state="translated"><ph id="ph1">`xsi:Nil`</ph> 특성 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xsi:SchemaLocation`</ph> attribute value of the element.</source>
          <target state="translated"><ph id="ph1">`xsi:SchemaLocation`</ph> 특성 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xsi:NoNamespaceSchemaLocation`</ph> attribute value of the element.</source>
          <target state="translated"><ph id="ph1">`xsi:NoNamespaceSchemaLocation`</ph> 특성 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The element's name is not valid in the current context.</source>
          <target state="translated">요소의 이름을 현재 컨텍스트에서 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</source>
          <target state="translated">요소의 텍스트 콘텐츠 단순 콘텐츠가 있는 요소에 대 한 데이터 형식 잘못 확인 하 고 현재 요소 내용의 복합 콘텐츠가 있는 요소에 대 한 완전 한지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateEndElement method.</source>
          <target state="translated">다음은 ValidateEndElement 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For elements with simple content, the ValidateEndElement method verifies that the text content of the element is valid according to its data type and returns the parsed typed value.</source>
          <target state="translated">-단순 콘텐츠 요소에 대 한 메서드는 요소의 텍스트 내용이 데이터 형식이 올바른지와 구문 분석 된 반환 확인 ValidateEndElement 형식화 된 값.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text content of the element is obtained from the results of previous calls to &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;.</source>
          <target state="translated">요소의 텍스트 콘텐츠 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt; 에 대 한 이전 호출의 결과에서 가져온</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For elements with complex content, the ValidateEndElement method verifies if the content of the current element is complete.</source>
          <target state="translated">-복합 콘텐츠가 있는 요소에 대 한 ValidateEndElement 메서드 현재 요소의 콘텐츠가 완전 한지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has a default value, the value returned from the ValidateEndElement method is the default value for the element.</source>
          <target state="translated">-요소에 있는 경우 기본 값, ValidateEndElement 메서드에서 반환 되는 값은 요소에 대 한 기본값입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object was constructed with the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; value as a parameter, the ValidateEndElement method checks the identity constraint rules (if any) that apply to the element.</source>
          <target state="translated">-If는 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;으로 생성 된 개체는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;identity 제약 조건 규칙 (있는 경우) 요소에 적용 되는 ValidateEndElement 메서드 검사를 매개 변수로 값.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element is successfully validated in the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-현재 컨텍스트에서 요소는 유효성을 검사 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the element.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 속성을 가진 요소의 유효성이 성공적으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The parsed, typed text value of the element if the element has simple content.</source>
          <target state="translated">구문 분석 되 고 요소의 텍스트 값 요소에 단순 콘텐츠가 있는 경우 입력 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The element's content is not valid.</source>
          <target state="translated">요소의 콘텐츠가 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, if the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어 경우는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Verifies if the text content of the element specified is valid according to its data type.</source>
          <target state="translated">지정 된 요소의 텍스트 콘텐츠의 데이터 형식이 올바른지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  If you are validating against the <ph id="ph2">`xs:key`</ph>, <ph id="ph3">`xs:keyref`</ph>, or <ph id="ph4">`xs:unique`</ph> identity constraints, do not use the ValidateEndElement method overload.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt;에 대해 유효성을 검사할 경우는 <ph id="ph2">`xs:key`</ph>, <ph id="ph3">`xs:keyref`</ph>, 또는 <ph id="ph4">`xs:unique`</ph> identity 제약 조건, ValidateEndElement 메서드 오버 로드를 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, call the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt; method and pass it the value of the element.</source>
          <target state="translated">대신, 호출의 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;메서드는 요소의 값을 전달 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then call the  &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method overload, which takes &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; as an argument, to verify that the text content of the element is valid according to its data type.</source>
          <target state="translated">그런 다음 호출에서 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드 오버 로드를 사용 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;요소의 텍스트 콘텐츠의 데이터 형식이 올바른지 확인 하려면를 인수로.&lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateEndElement method.</source>
          <target state="translated">다음은 ValidateEndElement 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For elements with simple content, the ValidateEndElement method verifies that the text content of the element is valid according to its data type and returns the parsed typed value.</source>
          <target state="translated">-단순 콘텐츠 요소에 대 한 메서드는 요소의 텍스트 내용이 데이터 형식이 올바른지와 구문 분석 된 반환 확인 ValidateEndElement 형식화 된 값.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text content of the element is obtained from the typed content passed as a parameter.</source>
          <target state="translated">요소의 텍스트 콘텐츠를 매개 변수로 전달 된 입력 된 콘텐츠를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If calls to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt; method have been previously made, an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">If에 대 한 호출이 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;메서드 이전에 적용 되는 &lt;xref:System.InvalidOperationException&gt;throw 됩니다.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has complex content an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">-요소의 내용이 복잡 한 경우는 &lt;xref:System.InvalidOperationException&gt;throw 됩니다.&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt; object was constructed with the &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; value as a parameter, the ValidateEndElement method checks the identity constraint rules (if any) that apply to the element.</source>
          <target state="translated">-If는 &lt;xref:System.Xml.Schema.XmlSchemaValidator&gt;으로 생성 된 개체는 &lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;identity 제약 조건 규칙 (있는 경우) 요소에 적용 되는 ValidateEndElement 메서드 검사를 매개 변수로 값.&lt;/xref:System.Xml.Schema.XmlSchemaValidationFlags&gt; &lt;/xref:System.Xml.Schema.XmlSchemaValidator&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element is successfully validated in the current context, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, and &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; properties are set with the results of the validation.</source>
          <target state="translated">-현재 컨텍스트에서 요소는 유효성을 검사 하는 경우는 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt;, &lt;xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt;, 및 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성 유효성 검사의 결과가 설정 됩니다.&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful validation of the text content of the element.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 요소의 텍스트 콘텐츠의 유효성을 검사에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The typed text content of the element.</source>
          <target state="translated">입력된 한 텍스트 콘텐츠 요소입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The parsed, typed simple content of the element.</source>
          <target state="translated">구문 분석 되 고 형식화 된 단순 콘텐츠 요소입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The element's text content is not valid.</source>
          <target state="translated">요소의 텍스트 콘텐츠가 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence (for example, if the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement<bpt id="p2">*</bpt>&gt;), calls to the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText<ept id="p2">*</ept>&gt; method have been previously made, or the element has complex content.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다 (경우에 예를 들어는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 호출한 후 메서드는 &lt;&gt; &lt;/&gt; <bpt id="p2">*</bpt>&gt;)에 대 한 호출이 &lt;&gt; &lt;/&gt; <ept id="p2">*</ept>&gt; 메서드 이전에 수행한 또는 요소에 복잡 한 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The typed text content parameter cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">입력된 한 텍스트 콘텐츠 매개 변수 여야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Verifies whether all the required attributes in the element context are present and prepares the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to validate the child content of the element.</source>
          <target state="translated">요소 컨텍스트에 필수 특성이 모두 있는지 확인 하 고 준비는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 요소의 자식 내용의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateEndOfAttributes method.</source>
          <target state="translated">다음은 ValidateEndOfAttributes 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt; method should always be called before ValidateEndOfAttributes.</source>
          <target state="translated">- &lt;xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;메서드 ValidateEndOfAttributes 하기 전에 항상 호출 해야 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The ValidateEndOfAttributes method must be called before proceeding with validation of an element's content.</source>
          <target state="translated">-ValidateEndOfAttributes 메서드는 요소 내용의 유효성 검사를 진행 하기 전에 호출 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If all the required attributes in the element context are present, the &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt; object's (if specified) &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; property is set to &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.</source>
          <target state="translated">-요소 컨텍스트에 필수 특성이 모두 있는 경우에 &lt;xref:System.Xml.Schema.XmlSchemaInfo&gt;지정 하는 경우 개체의 &lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;속성이 &lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidity&gt; 로 설정 되어&lt;/xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt; &lt;/xref:System.Xml.Schema.XmlSchemaInfo&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object whose properties are set on successful verification that all the required attributes in the element context are present.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체 요소 컨텍스트에 필수 특성이 모두 있는지 확인에 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 매개 변수 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>One or more of the required attributes in the current element context were not found.</source>
          <target state="translated">현재 요소 컨텍스트에 필수 특성이 하나 이상의 요소가 없습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The ValidateEndOfAttributes method was not called in the correct sequence.</source>
          <target state="translated">올바른 순서로 ValidateEndOfAttributes 메서드가 호출 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For example, calling ValidateEndOfAttributes after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt;.</source>
          <target state="translated">예를 들어 ValidateEndOfAttributes &lt;xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*&gt; 를 호출한 다음 호출</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>One or more of the parameters specified are <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">지정 된 매개 변수 중 하나 이상이 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Validates whether the text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</source>
          <target state="translated">유효성을 검사 하는지 여부를 텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 요소 컨텍스트에서 사용할 수를 지정 하 고 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사에 대 한 텍스트를 누적 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateText method.</source>
          <target state="translated">다음은 ValidateText 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has simple content, the text <ph id="ph1">`string`</ph> specified is concatenated on each call to the ValidateText method until the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method is called.</source>
          <target state="translated">-요소에 있는 경우 단순 콘텐츠를 텍스트 <ph id="ph1">`string`</ph> 지정 된 때까지 ValidateText 메서드를 호출할 때마다 연결 되는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드를 호출 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method is called, all the text is validated.</source>
          <target state="translated">경우는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has complex content, no text concatenation occurs.</source>
          <target state="translated">-요소에 있는 경우 복잡 한 내용을 텍스트가 연결 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to validate in the current element context.</source>
          <target state="translated">텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 유효성을 검사할 현재 요소 컨텍스트에서 합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specified is not allowed in the current element context.</source>
          <target state="translated">텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정는 현재 요소 컨텍스트에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter cannot be <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 매개 변수 여야 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Validates whether the text returned by the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</source>
          <target state="translated">반환 된 텍스트가 있는지 확인 하는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 개체가 현재 요소 컨텍스트에서 허용 하 고 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사에 대 한 텍스트를 누적 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are important notes to consider when using the ValidateText method.</source>
          <target state="translated">다음은 ValidateText 메서드를 사용할 때 고려해 야 할 중요 한 참고 사항입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has simple content, the text <ph id="ph1">`string`</ph> specified is concatenated on each call to the ValidateText method until the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method is called.</source>
          <target state="translated">-요소에 있는 경우 단순 콘텐츠를 텍스트 <ph id="ph1">`string`</ph> 지정 된 때까지 ValidateText 메서드를 호출할 때마다 연결 되는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드를 호출 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt; method is called, all the text is validated.</source>
          <target state="translated">경우는 &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A&gt;</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the element has complex content, no text concatenation occurs.</source>
          <target state="translated">-요소에 있는 경우 복잡 한 내용을 텍스트가 연결 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept><bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> <bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 텍스트 값을 특성의 XML 스키마 정의 언어 (XSD) 형식과 호환 되는 공용 언어 런타임 (CLR) 형식으로 전달 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specified is not allowed in the current element context.</source>
          <target state="translated">텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정는 현재 요소 컨텍스트에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateText<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The text <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> parameter cannot be <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">텍스트 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 매개 변수 여야 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Validates whether the white space in the <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</source>
          <target state="translated">유효성을 검사에 있는 공백을 여부는 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 요소 컨텍스트에서 사용할 수를 지정 하 고 현재 요소에 단순 내용이 있는지 유효성 검사를 위해 공백을 누적 시킵니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A white space <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to validate in the current element context.</source>
          <target state="translated">공백 <bpt id="p1">&lt;xref uid="langword_csharp_string" name="string" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 유효성을 검사할 현재 요소 컨텍스트에서 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>White space is not allowed in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 공백이 ´ ù.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, if the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어 경우는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Validates whether the white space returned by the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</source>
          <target state="translated">공백을 반환 되는지 확인 하는 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 개체가 현재 요소 컨텍스트에서 허용 하 고 현재 요소에 단순 내용이 있는지 유효성 검사를 위해 공백을 누적 시킵니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept><bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlValueGetter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> <bpt id="p2">&lt;xref uid="langword_csharp_delegate" name="delegate" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 공백 값을 특성의 XML 스키마 정의 언어 (XSD) 형식과 호환 되는 공용 언어 런타임 (CLR) 형식으로 전달 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>White space is not allowed in the current element context.</source>
          <target state="translated">현재 요소 컨텍스트에서 공백이 ´ ù.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace<bpt id="p1">*</bpt>&gt; method was not called in the correct sequence. For example, if the &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace<ept id="p1">*</ept>&gt; method is called after calling &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.</source>
          <target state="translated">&lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 올바른 순서로 메서드를 호출 하지 않았습니다. 예를 들어 경우는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; &lt;xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*&gt; 를 호출한 후 메서드는</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xml.Schema.ValidationEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that receives schema validation warnings and errors encountered during schema validation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.ValidationEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 스키마 유효성 검사 경고 및 스키마 유효성 검사 중 발생 한 오류를 받는입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no &lt;xref:System.Xml.Schema.ValidationEventHandler&gt; is specified, an &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt; is thrown for all schema validation errors with an &lt;xref:System.Xml.Schema.XmlSeverityType&gt; value of &lt;xref:System.Xml.Schema.XmlSeverityType&gt;.</source>
          <target state="translated">없는 경우 &lt;xref:System.Xml.Schema.ValidationEventHandler&gt;지정 &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;는 &lt;xref:System.Xml.Schema.XmlSeverityType&gt; &lt;xref:System.Xml.Schema.XmlSeverityType&gt;.&lt;/xref:System.Xml.Schema.XmlSeverityType&gt; 의 값&lt;/xref:System.Xml.Schema.XmlSeverityType&gt; 을 사용 하는 모든 스키마 유효성 검사 오류에 대해 throw 되&lt;/xref:System.Xml.Schema.XmlSchemaValidationException&gt; 는&lt;/xref:System.Xml.Schema.ValidationEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>An &lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt; is not thrown for validation warnings with an &lt;xref:System.Xml.Schema.XmlSeverityType&gt; value of &lt;xref:System.Xml.Schema.XmlSeverityType&gt;.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt; &lt;xref:System.Xml.Schema.XmlSeverityType&gt; &lt;xref:System.Xml.Schema.XmlSeverityType&gt;안내 하십시오.&lt;/xref:System.Xml.Schema.XmlSeverityType&gt; 값&lt;/xref:System.Xml.Schema.XmlSeverityType&gt; 유효성 검사 경고에 대 한 throw 되지 않습니다&lt;/xref:System.Xml.Schema.XmlSchemaValidationException&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Gets or sets the object sent as the sender object of a validation event.</source>
          <target state="translated">유효성 검사 이벤트의 sender 개체로 보낼 개체를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt;; the default is this <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">&lt;xref:System.Object&gt;; 기본값은이 <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaValidator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Sets the <bpt id="p1">&lt;xref href="System.Xml.XmlResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object used to resolve <ph id="ph1">`xs:import`</ph> and <ph id="ph2">`xs:include`</ph> elements as well as <ph id="ph3">`xsi:schemaLocation`</ph> and <ph id="ph4">`xsi:noNamespaceSchemaLocation`</ph> attributes.</source>
          <target state="translated">설정의 <bpt id="p1">&lt;xref href="System.Xml.XmlResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 해결 하는 데 사용 되는 개체 <ph id="ph1">`xs:import`</ph> 및 <ph id="ph2">`xs:include`</ph> 요소와 <ph id="ph3">`xsi:schemaLocation`</ph> 및 <ph id="ph4">`xsi:noNamespaceSchemaLocation`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Xml.XmlResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object; the default is an <bpt id="p2">&lt;xref href="System.Xml.XmlUrlResolver"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.XmlResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체; 기본값은는 <bpt id="p2">&lt;xref href="System.Xml.XmlUrlResolver"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>