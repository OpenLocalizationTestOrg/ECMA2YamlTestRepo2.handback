<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e956dad0abdc3e2bdfb9649199ef8b2da325e89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.LogicalTreeHelper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">209b3d2bd2df7f4114df6e968f404942f09644b9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7a060b5836d0c4e39a02d0e9f64095e72e019ab</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides static helper methods for querying objects in the logical tree.</source>
          <target state="translated">논리적 트리에서 개체를 쿼리 하기 위한 정적 도우미 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The LogicalTreeHelper class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.</source>
          <target state="translated">사실 클래스 개체 또는 하위 노드가 논리 트리 내에서 특정 개체의 자식 컬렉션을 반환 하는 데 사용할 수 있는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on &lt;xref:System.Windows.FrameworkElement&gt; or &lt;xref:System.Windows.FrameworkContentElement&gt;.</source>
          <target state="translated">그러나 대부분의 일반적으로 수행 하는 개체 트리 작업은도 유사한 메서드나 &lt;xref:System.Windows.FrameworkElement&gt;또는 &lt;xref:System.Windows.FrameworkContentElement&gt;.&lt;/xref:System.Windows.FrameworkContentElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt; 속성에 의해 표시</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, try the following:      -   Instead of calling the static &lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt; method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.</source>
          <target state="translated">예를 들어, 다음 시도:-정적을 호출 하는 대신 &lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;논리 자식에 대 한 열거자 개체를 반환 하는 메서드를 해당 개체에 대 한 콘텐츠 모델에는 표시 전용된 컬렉션을 사용 합니다.&lt;/xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.</source>
          <target state="translated">콘텐츠 모델을 지 원하는 거의 모든 개체는 자식 개체의 컬렉션을 포함 하 고 해당 컬렉션에서 컬렉션 인터페이스를 직접 지원 제공 하는 일부 속성을 노출 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Instead of calling the static &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt; method to obtain a child object by specifying its name, call the &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; or &lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt; method on specific objects.</source>
          <target state="translated">-대신 호출의 정적 &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;메서드 호출의 이름을 지정 하 여 자식 개체를 가져오려면는 &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;또는 &lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt;특정 개체에 메서드.&lt;/xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>LogicalTreeHelper is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.</source>
          <target state="translated">사실 여러 수준에서 재귀적으로 논리 트리를 위아래로 이동 하 고 다양 한 부모 또는 자식 개체를 검사 하기 위한 일관 된 접근 방식을 사용 하려면 분석 시나리오에 가장 유용 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.</source>
          <target state="translated">이 경우 있습니다, 정적 콘텐츠 모델의 혼합을에 액세스할 수 있는 하 고 더 많은 콘텐츠 모델을 사용 하 여 특정 Api는 너무 복잡 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Attempts to bring the requested UI element into view and raises the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event on the target in order to report the results.</source>
          <target state="translated">요청된 된 UI 요소 뷰를 표시 하려고 하 고 시킵니다는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 결과 보고 하기 위해 대상에는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is typically more convenient to call the instance methods &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName&gt; or &lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName&gt; rather than this static utility method.</source>
          <target state="translated">인스턴스 메서드를 호출 하는 편리한 일반적으로 &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName&gt;또는 &lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName&gt;이 정적 유틸리티 메서드가 아니라.&lt;/xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of the instance methods is equivalent to the behavior of the static method.</source>
          <target state="translated">인스턴스 메서드의 동작은 정적 메서드의 동작 하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if the <ph id="ph1">`current`</ph> UI element provided was a &lt;xref:System.Windows.FrameworkContentElement&gt;, the resulting event is still the same &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt; event, with the originating &lt;xref:System.Windows.FrameworkContentElement&gt; identifiable by checking the event data of the event.</source>
          <target state="translated">경우에는 <ph id="ph1">`current`</ph> 제공 되는 UI 요소를 한 &lt;xref:System.Windows.FrameworkContentElement&gt;, 결과 이벤트는 여전히 동일 &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt;이벤트 발생 하 &lt;xref:System.Windows.FrameworkContentElement&gt;이벤트의 이벤트 데이터를 확인 하 여 식별할 수 있는.&lt;/xref:System.Windows.FrameworkContentElement&gt; &lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The UI element to bring into view.</source>
          <target state="translated">UI 요소 뷰로 가져올입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Attempts to find and return an object that has the specified name.</source>
          <target state="translated">찾아 지정된 된 이름을 가진 개체를 반환 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The search starts from the specified object and continues into subnodes of the logical tree.</source>
          <target state="translated">검색이 지정된 된 개체에서 시작한 논리 트리 노드로 계속 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The methods &lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt; and &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; are superficially similar to FindLogicalNode, but operate by different logic:      -   The search direction for FindLogicalNode is toward child objects (down the tree); the search direction for the <ph id="ph1">`FindName`</ph> methods is towards parent objects (up the tree).</source>
          <target state="translated">메서드 &lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt;및 &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;FindLogicalNode, 외견상으로 유사 하지만 서로 다른 논리에 의해 작동:-FindLogicalNode에 대 한 검색 방향을 자식 개체를 (트리); 방향으로 대 한 검색 방향을 <ph id="ph1">`FindName`</ph> 메서드 (트리)를 부모 개체입니다.&lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The <ph id="ph1">`FindName`</ph> methods are governed by the concept of a XAML namescope.</source>
          <target state="translated">- <ph id="ph1">`FindName`</ph> 메서드는 XAML 네임 스페이스의 개념에 의해 제어 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">`FindName`</ph> you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`FindName`</ph> 하나만 보장이 고유성을 적용 하는 XAML 이름 범위 이기 때문에 해당 이름의 개체가 존재 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, FindLogicalNode ignores XAML namescope and might cross XAML namescope boundaries during the search.</source>
          <target state="translated">반면, FindLogicalNode XAML 이름 범위를 무시 하 고 검색 하는 동안 XAML 이름 범위 경계를 넘을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>As such, there is no guarantee of uniqueness of the <ph id="ph1">`elementName`</ph> name once boundaries are crossed.</source>
          <target state="translated">따라서 보장이 없습니다의 고유성는 <ph id="ph1">`elementName`</ph> 경계에 도달한 후 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about XAML namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">XAML 이름 범위에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF XAML 이름 범위<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The object to start searching from.</source>
          <target state="translated">검색을 시작할 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This object must be either a <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or a <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 개체 중 하나 여야 합니다는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the object to find.</source>
          <target state="translated">찾을 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The object with the matching name, if one is found; returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no matching name was found in the logical tree.</source>
          <target state="translated">그렇지 않은 경우 일치 하는 이름 가진 개체 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 경우 논리적 트리에 일치 하는 이름을 찾지 못했습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the collection of immediate child objects of the specified object, by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리 하 여 지정된 된 개체의 직계 자식 개체의 컬렉션을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this signature and helper method primarily when you are unsure whether <ph id="ph1">`current`</ph> is a &lt;xref:System.Windows.FrameworkElement&gt; or &lt;xref:System.Windows.FrameworkContentElement&gt; and are also unsure whether that object's class supports its own content model collection.</source>
          <target state="translated">확실 하지 않은 경우에 주로이 서명 및 도우미 메서드를 사용 하 여 여부 <ph id="ph1">`current`</ph> 는 &lt;xref:System.Windows.FrameworkElement&gt;또는 &lt;xref:System.Windows.FrameworkContentElement&gt;확실 하지 않은 해당 개체의 클래스 자체의 정적 콘텐츠 모델이 컬렉션을 지원 하는지 여부 및.&lt;/xref:System.Windows.FrameworkContentElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.</source>
          <target state="translated">쿼리 중인 개체의 형식을 결정할 수 있습니다 하는 경우 해당 형식에 있는 사용자가 알고 있는 특정 콘텐츠 속성을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you know that the object you are querying is an &lt;xref:System.Windows.Controls.ItemsControl&gt;, check the &lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt; property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.</source>
          <target state="translated">쿼리 하려는 개체를 알고 있는 경우는 예를 들어는 &lt;xref:System.Windows.Controls.ItemsControl&gt;, 확인 된 &lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;속성은 컬렉션 인터페이스를 지원 하며 보다는 열거자 유용할 수 있는 강력한 형식의 컬렉션을 가져옵니다.&lt;/xref:System.Windows.Controls.ItemsControl.Items%2A&gt; &lt;/xref:System.Windows.Controls.ItemsControl&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is expected to be either a <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">중 하나 이어야 하는데이 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The enumerable collection of immediate child objects from the logical tree of the specified object.</source>
          <target state="translated">지정된 된 개체의 논리적 트리에서 직계 자식 개체의 열거 가능한 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the collection of immediate child objects of the specified <bpt id="p1">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> by processing the logical tree.</source>
          <target state="translated">지정 된 직계 자식 개체의 컬렉션을 반환 <bpt id="p1">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 논리적 트리를 처리 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The enumerable collection of immediate child objects starting from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">current</ph><ept id="p1">&lt;/code&gt;</ept> in the logical tree.</source>
          <target state="translated">시작 하는 직계 자식 개체의 열거 가능한 컬렉션 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">current</ph> <ept id="p1">&lt;/code&gt;</ept> 논리적 트리에서 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the collection of immediate child objects of the specified <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> by processing the logical tree.</source>
          <target state="translated">지정 된 직계 자식 개체의 컬렉션을 반환 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 논리적 트리를 처리 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object from which to start processing the logical tree.</source>
          <target state="translated">논리적 트리의 처리를 시작 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The enumerable collection of immediate child objects starting from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">current</ph><ept id="p1">&lt;/code&gt;</ept> in the logical tree.</source>
          <target state="translated">시작 하는 직계 자식 개체의 열거 가능한 컬렉션 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">current</ph> <ept id="p1">&lt;/code&gt;</ept> 논리적 트리에서 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the parent object of the specified object by processing the logical tree.</source>
          <target state="translated">논리적 트리를 처리 하 여 지정된 된 개체의 부모 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is merely a wrapper that gets the appropriate type version (&lt;xref:System.Windows.FrameworkElement&gt; or &lt;xref:System.Windows.FrameworkContentElement&gt;) of the &lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName&gt; or &lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName&gt; property; so unless you are unable to determine the <ph id="ph1">`current`</ph> type, you might want to check the respective instance properties instead.</source>
          <target state="translated">이 메서드는 적절 한 형식 버전을 가져옵니다 되는 래퍼를 단순히 (&lt;xref:System.Windows.FrameworkElement&gt; 또는 &lt;xref:System.Windows.FrameworkContentElement&gt;)의 &lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName&gt;또는 &lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName&gt;속성; 하므로 알 수 없는 경우가 아니면는 <ph id="ph1">`current`</ph> 형식 하려는 경우 대신 개별 인스턴스 속성을 확인 하십시오.&lt;/xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The object to find the parent object for.</source>
          <target state="translated">에 대 한 부모 개체를 찾을 개체입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is expected to be either a <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or a <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">중 하나 이어야 하는데이 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 <bpt id="p2">&lt;xref href="System.Windows.FrameworkContentElement"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The requested parent object.</source>
          <target state="translated">요청 된 부모 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>