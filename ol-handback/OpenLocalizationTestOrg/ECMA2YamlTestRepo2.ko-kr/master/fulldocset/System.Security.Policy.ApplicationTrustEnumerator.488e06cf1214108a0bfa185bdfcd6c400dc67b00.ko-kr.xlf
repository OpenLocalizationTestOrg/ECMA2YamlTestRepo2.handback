<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39d33a1f0c1c3b797a07c7d6c366bd1099784263</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Policy.ApplicationTrustEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">285df83b32d5e7eb6a19d801e468abbe7af60394</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">764fa3c4ac9096cf18255ed0a5d3ecf543040456</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the enumerator for <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects in the <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">에 대 한 열거자를 나타냅니다 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체에 <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators only allow reading the data in the collection.</source>
          <target state="translated">열거자는 컬렉션의 데이터 읽기를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators cannot be used to modify the underlying collection.</source>
          <target state="translated">내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; method also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;메서드도 실행 하면 열거자가이 위치로 복원 합니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, calling the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; property throws an exception.</source>
          <target state="translated">이 위치에서, 호출 된 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;속성 예외를 throw 합니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; method to advance the enumerator to the first element of the collection before reading the value of the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; property.</source>
          <target state="translated">따라서 호출 해야 합니다는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;하는 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 메서드는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;속성.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">컬렉션의 끝이 전달 된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치 하 고 호출 되 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, calling &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; throws an exception.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>호출, &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;예외를 throw 합니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; to the first element of the collection, call &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; followed by a call to &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;컬렉션의 첫 번째 요소에 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;다음 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; 호출을&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; 호출&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; 하는 다시 설정 하려면</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt; exception.</source>
          <target state="translated">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;throw는 &lt;xref:System.InvalidOperationException&gt;예외.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is modified between calling &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; and &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;, &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; returns the element to which it is currently set, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;및 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;, &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;열거자가 이미 무효로 되 었 하는 경우에 있는 현재 설정 되어, 요소를 반환 합니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the current <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object in the <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">현재 가져옵니다 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체는 <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is created, it does not point to an object, so the Current property is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">열거자를 만들 때이를 가리키지 않습니다 되는 개체로, 하므로 현재 속성이 유효 하지 하 고 액세스 하는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must first call the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; method to position the cursor at the first object in the collection.</source>
          <target state="translated">먼저 호출 해야 합니다는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;메서드를 컬렉션의 첫 번째 개체에 커서를 놓습니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple calls to Current with no intervening calls to &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; will return the same &lt;xref:System.Security.Policy.ApplicationTrust&gt; object.</source>
          <target state="translated">에 대 한 중간 호출 된 현재를 여러 번 호출 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;는 동일한 반환 &lt;xref:System.Security.Policy.ApplicationTrust&gt;개체입니다.&lt;/xref:System.Security.Policy.ApplicationTrust&gt; &lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The current <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the <bpt id="p2">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Moves to the next element in the <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">다음 요소로 이동는 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The MoveNext method immediately returns <ph id="ph1">`false`</ph> if there are no objects in the collection.</source>
          <target state="translated">MoveNext 메서드가 즉시 반환 <ph id="ph1">`false`</ph> 컬렉션에 개체가 없는 경우.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>MoveNext will return <ph id="ph1">`true`</ph> until it has reached the end of the collection.</source>
          <target state="translated">MoveNext 돌아갑니다 <ph id="ph1">`true`</ph> 컬렉션의 끝에 도달 하면 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>It will then return <ph id="ph1">`false`</ph> for each successive call.</source>
          <target state="translated">그런 다음 반환 합니다 <ph id="ph1">`false`</ph> 각 연속 호출에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after MoveNext has returned <ph id="ph1">`false`</ph>, accessing the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; property will throw an exception.</source>
          <target state="translated">그러나 MoveNext를 반환 했습니다. 후 <ph id="ph1">`false`</ph>, 액세스 하는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;속성 예외가 throw 됩니다.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Upon creation, an enumerator is positioned before the first &lt;xref:System.Security.Policy.ApplicationTrust&gt; object in the collection, and the first call to MoveNext positions the enumerator at the first object in the collection.</source>
          <target state="translated">만들어지면는 열거자가 첫 번째 &lt;xref:System.Security.Policy.ApplicationTrust&gt;컬렉션과 movenext 첫 번째 호출에서 개체 컬렉션의 첫 번째 개체에 배치 합니다.&lt;/xref:System.Security.Policy.ApplicationTrust&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>열거자를 다음 요소로 이동 성공 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 열거자가 컬렉션의 끝을 통과 하는 경우.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Resets the enumerator to the beginning of the <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">열거자의 시작 부분으로 다시 설정 된 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator moves in a forward-only direction.</source>
          <target state="translated">열거자 앞 으로만 이동 가능한 방향으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to return the enumerator to the beginning of the collection of &lt;xref:System.Security.Policy.ApplicationTrust&gt; objects.</source>
          <target state="translated">이 메서드를 사용 하 여 컬렉션의 시작 부분에 열거자를 반환 하려면 &lt;xref:System.Security.Policy.ApplicationTrust&gt;개체입니다.&lt;/xref:System.Security.Policy.ApplicationTrust&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Reset method positions the cursor at the first object in the collection.</source>
          <target state="translated">Reset 메서드는 컬렉션의 첫 번째 개체에 커서를 놓습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling Reset, you do not need to call the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt; method to move the cursor forward to the first object.</source>
          <target state="translated">재설정을 호출한 후 않아도 호출 하 여 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;첫 번째 개체는 커서를 앞으로 이동 하는 메서드.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the current &lt;xref:System.Object&gt; in the <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">현재 가져옵니다 &lt;xref:System.Object&gt;에 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컬렉션.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call this method; use the &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt; property instead.</source>
          <target state="translated">이 메서드를 호출 하지 마십시오 사용 하 여는 &lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;속성 대신.&lt;/xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The current &lt;xref:System.Object&gt; in the <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">현재 &lt;xref:System.Object&gt;에 <bpt id="p1">&lt;xref href="System.Security.Policy.ApplicationTrustCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>