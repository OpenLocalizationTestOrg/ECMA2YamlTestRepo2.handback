<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09a32cf05909536a9016c9613e848634f520d8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.FrameworkPropertyMetadata.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ce04c5a688c1da3dcf0b9a592994f41fa7022c5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3d94579fab6a7da9eb09e2f1fbaa83afdfae263</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</source>
          <target state="translated">보고서 또는 프레임 워크별 속성 시스템 특성을 명시적으로 추가 되는 종속성 속성에 대 한 메타 데이터에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class derives from &lt;xref:System.Windows.PropertyMetadata&gt; (through &lt;xref:System.Windows.UIPropertyMetadata&gt;) .</source>
          <target state="translated">이 클래스에서 파생 &lt;xref:System.Windows.PropertyMetadata&gt;(통해 &lt;xref:System.Windows.UIPropertyMetadata&gt;).&lt;/xref:System.Windows.UIPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types &lt;xref:System.Windows.PropertyMetadata&gt; or &lt;xref:System.Windows.UIPropertyMetadata&gt;.</source>
          <target state="translated">대부분의 WPF 프레임 워크 수준 응용 프로그램 개발 목적에 FrameworkPropertyMetadata는 종속성 속성 메타 데이터 보다는 기본 메타 데이터 형식이 &lt;xref:System.Windows.PropertyMetadata&gt;나 &lt;xref:System.Windows.UIPropertyMetadata&gt;.&lt;/xref:System.Windows.UIPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt; 에 사용 되는 형식</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true both for existing dependency properties and for most custom dependency property scenarios.</source>
          <target state="translated">이 대부분의 사용자 지정 종속성 속성이 시나리오와 기존 종속성 속성에 적용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members declared by this class that supplement the &lt;xref:System.Windows.PropertyMetadata&gt; base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</source>
          <target state="translated">이 선언 된 멤버 보완 하는 클래스는 &lt;xref:System.Windows.PropertyMetadata&gt;지정 하거나 속성 상속, 데이터 바인딩 및 레이아웃 WPF 프레임 워크 수준 속성 시스템 문제를 보고 하는 다양 한 부울 속성을 포함 하는 기본 클래스입니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several constructor signatures for creating a FrameworkPropertyMetadata instance take a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; parameter.</source>
          <target state="translated">FrameworkPropertyMetadata 인스턴스를 만들기 위한 몇 가지 생성자 시그니처 걸릴는 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;매개 변수.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;열거형 생성자에 초기 동작을 지정 하는 데에 사용 되 고 노출 되지 않습니다. 그렇지 않으면 FrameworkPropertyMetadata를 생성 한 후.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</source>
          <target state="translated">생성 된 인스턴스에서 있습니다 수 가져오거나 생성자 호출에 사용 되는 열거형 값의 이름을 공유 하는 다양 한 속성을 통해 해당 정보를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    This class is not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스에 사용 되는 것은 일반적으로 XAML 텍스트 사용 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature initializes all values of FrameworkPropertyMetadata to their property defaults.</source>
          <target state="translated">이 서명을 속성 기본값으로 FrameworkPropertyMetadata의 모든 값을 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt; will be <ph id="ph1">`null`</ph>, and the various &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; Boolean properties will be <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;됩니다 <ph id="ph1">`null`</ph>, 및 다양 한 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;부울 속성이 됩니다 <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;&lt;/xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified default value.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 기본값을 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 콜백 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework-level metadata options.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 기본값 및 프레임 워크 수준 메타 데이터 옵션을 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">값에 플래그를 설정으로 표시는 <ph id="ph1">`flags`</ph> 매개 변수는 부울 값을 설정 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;일치 하는 속성 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;플래그의 이름을 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">특정 속성 시스템 작업에 적용 된 이후에 메타 데이터에서 속성의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">메타 데이터 옵션 플래그 (의 조합을 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 된 제공 된 기본 값 및 지정 된 <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 콜백 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified callbacks.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 콜백 클래스.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation calls a base initializer and then adds the <ph id="ph1">`coerceValueCallback`</ph> by setting the property on the base instance.</source>
          <target state="translated">이 구현은 기본 이니셜라이저를 호출 하 고 다음 추가 <ph id="ph1">`coerceValueCallback`</ph> 기본 인스턴스에서 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">처리기 구현에 대 한 참조 속성 시스템에서 때마다 호출 &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;이 종속성 속성에 대 한.&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> callback.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 된 제공 된 기본 값, 프레임 워크 메타 데이터 옵션 및 지정 된 <bpt id="p2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 콜백 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">값에 플래그를 설정으로 표시는 <ph id="ph1">`flags`</ph> 매개 변수는 부울 값을 설정 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;일치 하는 속성 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;플래그의 이름을 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
          <target state="translated">일반적으로 특정 형식의 값으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">메타 데이터 옵션 플래그 (의 조합을 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and specified callbacks.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 기본 값 및 지정 된 콜백 클래스.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; for this dependency property.</source>
          <target state="translated">속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;이 종속성 속성에 대 한.&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, and specified callbacks.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 기본값 및 프레임 워크 메타 데이터 옵션 및 지정 된 콜백 클래스.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">값에 플래그를 설정으로 표시는 <ph id="ph1">`flags`</ph> 매개 변수는 부울 값을 설정 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;일치 하는 속성 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;플래그의 이름을 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">메타 데이터 옵션 플래그 (의 조합을 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;이 속성에 대해.&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 기본 값, 프레임 워크 메타 데이터 옵션, 지정 된 콜백 및 Boolean 애니메이션 속성을 사용할 수 있는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph> &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;직접 기본 &lt;xref:System.Windows.UIPropertyMetadata&gt;클래스&lt;/xref:System.Windows.UIPropertyMetadata&gt; 에서 선언 된 속성&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; 의 초기 값을 설정 하는 매개 변수</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">값에 플래그를 설정으로 표시는 <ph id="ph1">`flags`</ph> 매개 변수는 부울 값을 설정 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;일치 하는 속성 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;플래그의 이름을 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">메타 데이터 옵션 플래그 (의 조합을 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; on this dependency property.</source>
          <target state="translated">속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;이 종속성 속성의.&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성 시스템에이 메타 데이터가 적용 되는 속성에 애니메이션 하지 못하도록 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">이러한 속성에 대해 애니메이션을 적용 하려고 하는 경우 속성 시스템에서 시작 된 런타임 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to permit animating the property.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성에 애니메이션을 허용 하 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제공 된 기본 값과 프레임 워크 메타 데이터를 사용 하 여 클래스 옵션을 지정 된 콜백, 애니메이션, 속성 및 데이터 바인딩 업데이트 트리거 기본값을 사용할 수 있는 부울입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
          <target state="translated">제공 된 값 형식의 <ph id="ph1">`defaultValue`</ph> 일치 하거나이 메타 데이터가 적용 하는 종속성 속성의 원본 등록에 지정 된 형식과 연관 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
          <target state="translated">메타 데이터의 기본 값 형식과 메타 데이터에 적용 되는 종속성 속성의 형식이 일치 하지 않습니다 컴파일하는 동안 불일치를 감지할 수 없기 때문에 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
          <target state="translated">속성 시스템의 기본 값 형식/속성 형식이 일치 하지 않기 런타임 오류 때문에 속성의 유효 값 런타임까지 평가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt; has special meaning in the property system, and cannot be used as a dependency property default value.</source>
          <target state="translated">값 &lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;속성 시스템에 특별 한 의미가 있으며는 종속성 속성의 기본 값으로 사용할 수 없습니다.&lt;/xref:System.Windows.DependencyProperty.UnsetValue&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; property declared by the immediate base &lt;xref:System.Windows.UIPropertyMetadata&gt; class.</source>
          <target state="translated"><ph id="ph1">`isAnimationProhibited`</ph> &lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;직접 기본 &lt;xref:System.Windows.UIPropertyMetadata&gt;클래스&lt;/xref:System.Windows.UIPropertyMetadata&gt; 에서 선언 된 속성&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; 의 초기 값을 설정 하는 매개 변수</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the update source behavior for bindings, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">바인딩 소스 업데이트 동작에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 바인딩 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; properties that match that &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; flag's name to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">값에 플래그를 설정으로 표시는 <ph id="ph1">`flags`</ph> 매개 변수는 부울 값을 설정 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;일치 하는 속성 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;플래그의 이름을 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
          <target state="translated">특정 속성 시스템 작업에 적용 된 상태로 계속 메타 데이터에서 속성의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
          <target state="translated">일반적으로 특정 형식으로 제공 하는 종속성 속성의 기본값입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values).</source>
          <target state="translated">메타 데이터 옵션 플래그 (의 조합을 <bpt id="p1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 값).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
          <target state="translated">이러한 옵션 레이아웃 등 데이터 바인딩 시스템과 상호 작용 하는 종속성 속성의 특성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
          <target state="translated">속성 시스템은 속성의 유효 값이 변경 될 때마다 호출 되는 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt; against this property.</source>
          <target state="translated">속성 시스템 호출할 때마다 호출 되는 처리기 구현에 대 한 참조 &lt;xref:System.Windows.DependencyObject.CoerceValue*&gt;이 속성에 대해.&lt;/xref:System.Windows.DependencyObject.CoerceValue*&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to prevent the property system from animating the property that this metadata is applied to.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성 시스템에이 메타 데이터가 적용 되는 속성에 애니메이션 하지 못하도록 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
          <target state="translated">이러한 속성에 대해 애니메이션을 적용 하려고 하는 경우 속성 시스템에서 시작 된 런타임 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for this property are applied that have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 있는이 속성에 대 한 바인딩이 적용 될 때 사용할 해당 <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 로 설정 <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph>로 설정 되어 <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</source>
          <target state="translated">종속성 속성 잠재적으로 영향을 주는지를 나타내는 정렬 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;및 &lt;xref:System.Windows.FrameworkContentElement&gt;의 구현이 포함 &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element (a call to &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).</source>
          <target state="translated">이 논리의 일부로 유효 값을 변경 하 고 AffectsArrange와 메타 데이터가 있어야 하는 종속성 속성으로 설정 <ph id="ph1">`true`</ph> 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다 (에 대 한 호출 &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;).&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsArrange 사용 하 여 종속성 속성을 찾도록 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsArrange 하도록 선택할 수도 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are either not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버는 대개 사용 되지에서 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 정렬 단계; 영향을 주는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</source>
          <target state="translated">종속성 속성 잠재적으로 영향을 주는지를 나타내는 측정 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;및 &lt;xref:System.Windows.FrameworkContentElement&gt;의 구현이 포함 &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">이 논리의 일부로 유효 값을 변경 하 고 AffectsMeasure와 메타 데이터가 있어야 하는 종속성 속성으로 설정 <ph id="ph1">`true`</ph> 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsMeasure 사용 하 여 종속성 속성을 찾도록 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsMeasure 하도록 선택할 수도 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 측정 단계 영향을 주는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">종속성 속성 잠재적으로 영향을 주는지를 나타내는 부모 요소 레이아웃의 정렬 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;및 &lt;xref:System.Windows.FrameworkContentElement&gt;의 구현이 포함 &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">이 논리의 일부로 유효 값을 변경 하 고 AffectsParentArrange와 메타 데이터가 있어야 하는 종속성 속성으로 설정 <ph id="ph1">`true`</ph> 부모 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentArrange because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">일반적으로 불필요의 &lt;xref:System.Windows.FrameworkElement&gt;이미 있기 때문에 요소 자체는 자체 AffectsParentArrange를 사용 하 여 부모 요소에 속성 &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;으로 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</source>
          <target state="translated">일반적으로 즉, 부모 적절 한 경우 정렬 된 자식 요소에 대 한 변경 내용을 일반적으로 시작 하므로 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>AffectsParentArrange is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkContentElement&gt;파생 클래스&lt;/xref:System.Windows.FrameworkContentElement&gt; 에 대 한 AffectsParentArrange은 때때로 사용</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">이 경우, 자식 요소 집합 속성을 제외 하 고 &lt;xref:System.Windows.FrameworkContentElement&gt;파생된 클래스는 자체 렌더링을 제어 하지 않습니다.&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">렌더링 하 여 처리 되는 &lt;xref:System.Windows.FrameworkElement&gt;콘텐츠 호스트 역할을 하는 부모 요소입니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</source>
          <target state="translated">예를 들어,의 값을 변경은 &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;자식 요소에서 연결 된 속성을 무효화 부모에서는 자식 요소의 위치를 변경 해야 하기 때문에 부모를 정렬 합니다.&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property has metadata where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">따라서는 &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;AffectsParentArrange 인 연결 된 속성에 메타 데이터 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another example is &lt;xref:System.Windows.Controls.Control.Padding%2A&gt;; when this property changes, the parent might change the positioning of the child, depending on available space.</source>
          <target state="translated">또 다른 예로 &lt;xref:System.Windows.Controls.Control.Padding%2A&gt;때가이 속성 변경 내용을 상위 변경 될 수 있습니다 사용 가능한 공간에 따라 자식 위치를 지정 합니다.&lt;/xref:System.Windows.Controls.Control.Padding%2A&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsParentArrange 사용 하 여 종속성 속성을 찾도록 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsParentArrange 하도록 선택할 수도 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">에 대 한 속성의 파생 클래스 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentArrange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 정렬 단계에 부모 요소의 영향을 주는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</source>
          <target state="translated">종속성 속성 잠재적으로 영향을 주는지를 나타내는 부모 요소 레이아웃의 측정 단계 레이아웃 엔진 작업 중 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;및 &lt;xref:System.Windows.FrameworkContentElement&gt;의 구현이 포함 &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
          <target state="translated">이 논리의 일부로 유효 값을 변경 하 고 AffectsParentMeasure와 메타 데이터가 있어야 하는 종속성 속성으로 설정 <ph id="ph1">`true`</ph> 부모 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsParentMeasure 사용 하 여 종속성 속성을 찾도록 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, you do not need to report changes of a &lt;xref:System.Windows.FrameworkElement&gt; property to a parent element using AffectsParentMeasure because the element itself would already have its own &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">일반적으로 불필요의 &lt;xref:System.Windows.FrameworkElement&gt;이미 있기 때문에 요소 자체는 자체 AffectsParentMeasure를 사용 하 여 부모 요소에 속성 &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;으로 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</source>
          <target state="translated">적절 한 경우 부모 측정 단계를 일반적으로 시작 하는 자식 요소가 변경 때문 충분입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>AffectsParentMeasure is sometimes used for a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkContentElement&gt;파생 클래스&lt;/xref:System.Windows.FrameworkContentElement&gt; 에 대 한 AffectsParentMeasure은 때때로 사용</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the child element sets a property, but a &lt;xref:System.Windows.FrameworkContentElement&gt; derived class does not control its own rendering.</source>
          <target state="translated">이 경우, 자식 요소 집합 속성을 제외 하 고 &lt;xref:System.Windows.FrameworkContentElement&gt;파생된 클래스는 자체 렌더링을 제어 하지 않습니다.&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rendering is handled by a &lt;xref:System.Windows.FrameworkElement&gt; parent element that serves as the content host.</source>
          <target state="translated">렌더링 하 여 처리 되는 &lt;xref:System.Windows.FrameworkElement&gt;콘텐츠 호스트 역할을 하는 부모 요소입니다.&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a change to the value of the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</source>
          <target state="translated">예를 들어,의 값을 변경은 &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;단락 상대 간격이 될 수 있습니다 변경 및 수를 늘리거나 콘텐츠 호스트 크기 때문에 자식 요소에서 속성 부모의 측정을 무효화 합니다.&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt; property has metadata where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">따라서는 &lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;AffectsParentMeasure 인 속성에 메타 데이터 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is <ph id="ph1">`true`</ph>, as part of content host rendering logic.</source>
          <target state="translated">콘텐츠 호스트 요소 자주 확인 종속성 속성의 변경 내용에 대 한 여기서는 AffectsParentMeasure <ph id="ph1">`true`</ph>, 콘텐츠 호스트 렌더링 논리의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the &lt;xref:System.Windows.Controls.TextBox&gt; element must respond to certain changes within text that might require that the bounding box of the &lt;xref:System.Windows.Controls.TextBox&gt; itself be changed.</source>
          <target state="translated">예를 들어,는 &lt;xref:System.Windows.Controls.TextBox&gt;의 경계 상자 요소는 필요할 수 있는 텍스트 내에서 특정 변경 내용에 응답 해야는 &lt;xref:System.Windows.Controls.TextBox&gt;자체를 변경할 수 있습니다.&lt;/xref:System.Windows.Controls.TextBox&gt; &lt;/xref:System.Windows.Controls.TextBox&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;구현 비슷한 동작을 종속성 속성이 변경에 대 한 여기서는 AffectsParentMeasure 수도 있습니다. <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">에 대 한 속성의 파생 클래스 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsParentMeasure"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.The default is <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 잠재적으로 종속성 속성이 부모 요소의 측정 단계 영향을 주는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다. 기본값은 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</source>
          <target state="translated">종속성 속성에는 다시 그리기를 필요로 하는 상황은 정렬 이나 측정에 특별히 영향을 주지 않는 어떤 방식으로 일반 레이아웃 잠재적으로 영향을 주는지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; and &lt;xref:System.Windows.FrameworkContentElement&gt; include an implementation of &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; that monitors effective value changes to all dependency properties that exist on an element.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;및 &lt;xref:System.Windows.FrameworkContentElement&gt;의 구현이 포함 &lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;요소에 존재 하는 모든 종속성 속성의 유효 값 변경 내용을 모니터링 하는.&lt;/xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to <ph id="ph1">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
          <target state="translated">이 논리의 일부로 유효 값을 변경 하 고 AffectsRender와 메타 데이터가 있어야 하는 종속성 속성으로 설정 <ph id="ph1">`true`</ph> 해당 요소에 대 한 시각적 개체를 무효화 하는 지연 된 요청이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
          <target state="translated">WPF 프레임 워크 수준 구현에이 위치에 이미 이기 때문에 일반적으로 필요가 없습니다 대체로 교체 또는 WPF 프레임 워크 수준 레이아웃 동작을 수정 하는 경우가 아니면 AffectsRender 사용 하 여 종속성 속성을 찾도록 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt; implementations might choose to have similar behavior for dependency property changes where AffectsRender is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">사용자 지정 &lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;구현 동작이 서로 유사 종속성 속성이 변경에 대 한 여기서는 AffectsRender 하도록 선택할 수도 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">에 대 한 속성의 파생 클래스 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_AffectsRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists affects rendering; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 종속성 속성이 렌더링 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property binds two-way by default.</source>
          <target state="translated">속성이 양방향 기본적으로 바인드 되는지를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>In absence of this property being <ph id="ph1">`true`</ph>, binding updates are one-way by default, based on the default behavior of the &lt;xref:System.Windows.Data.Binding&gt; constructors or equivalent <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
          <target state="translated">없는 경우이 속성의 <ph id="ph1">`true`</ph>, 바인딩 업데이트는 기본적으로의 기본 동작에 따라 단방향는 &lt;xref:System.Windows.Data.Binding&gt;생성자 또는 이와 동등한 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 구문.&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>In existing elements, you will usually find this property set to <ph id="ph1">`true`</ph> in metadata for dependency properties that both report state and are modifiable by user action, for example &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">기존 요소를 찾을 수 있습니다 일반적으로이 속성을 설정 <ph id="ph1">`true`</ph> 상태를 보고 하는 예를 들어 &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt; 사용자 작업을 통해 수정할 수는 종속성 속성에 대 한 메타 데이터에</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property only reports the default binding update characteristics of the dependency property in general.</source>
          <target state="translated">이 속성만 종속성 속성의 기본 바인딩 업데이트 특성은 일반적 보고 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any binding set to this property on an instance can locally set the &lt;xref:System.Windows.Data.Binding.Mode%2A&gt; property of the binding and change this default.</source>
          <target state="translated">인스턴스에서이 속성으로 설정 하는 바인딩 로컬로 설정 수는 &lt;xref:System.Windows.Data.Binding.Mode%2A&gt;바인딩의 속성을이 기본값을 변경 하 고.&lt;/xref:System.Windows.Data.Binding.Mode%2A&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">에 대 한 속성의 파생 클래스 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_BindsTwoWayByDefault"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dependency property on which this metadata exists binds two-way by default; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 존재 하는 종속성 속성이 기본적으로 양방향 바인딩할 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Gets or sets the default for <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use when bindings for the property with this metadata are applied, which have their <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> set to <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 기본값을 가져오거나 설정 합니다. <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 충족 하는이 메타 데이터를 사용 하 여 속성에 대 한 바인딩이 적용 되는 경우를 사용 하려면 해당 <bpt id="p2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 로 설정 <bpt id="p3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_DefaultUpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, other than <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값이 아닌 다른 열거형 <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This property is set to <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; the value you set is supposed to become the default when requested by bindings.</source>
          <target state="translated">이 속성이 <bpt id="p1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 바인딩에서 요청할 때 기본 값을 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the value of the dependency property is inheritable.</source>
          <target state="translated">종속성 속성의 값이 상속 될 수 있는지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property value inheritance is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</source>
          <target state="translated">속성 값 상속의 기능은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 그에 따라 특정 종속성 속성이 로컬로에 설정 될 수는 요소 또는 그 직전의 루트에 WPF 프레임 워크 수준 속성 시스템은 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 요소 트리 및 다음 해당 값이 해당 속성을 공유 하는 자식 요소의 논리적 트리 내에서 모든 요소에서 상속 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property value inheritance is not enabled by default, and enabling it does have some performance implications.</source>
          <target state="translated">속성 값 상속 기본적으로 사용 되지 않습니다 있고 설정 되어 있으므로 일부 성능 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>속성 값 상속<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 속성 값 상속 나타날 수 있지만 연결 되지 않은 종속성 속성에 대해 작동 하도록를 통해 특정 개체 간 구역 런타임 트리의 연결 되지 않은 속성에 대 한 상속 동작이 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always use &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt; to register properties where you specify Inherits in the metadata.</source>
          <target state="translated">항상 사용 하 여 &lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;메타 데이터에서 Inherits를 지정 하는 속성을 등록 합니다.&lt;/xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Inherits"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value is inheritable; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성 값이 상속 될 수 있습니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether data binding is supported for the dependency property.</source>
          <target state="translated">종속성 속성에 대 한 데이터 바인딩을 지원 되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property reports <ph id="ph1">`false`</ph> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;, is set to <ph id="ph2">`true`</ph> in this metadata.</source>
          <target state="translated">이 속성은 보고 <ph id="ph1">`false`</ph> 가능한 두 조건 중 하나에 대 한: 종속성 속성에 데이터 바인딩 중 하나은 종속성 속성은 읽기 전용 (as, 보고 된 종속성 속성 식별자로 메타 데이터가 아니라) 때문에 사용할 수 없습니다 또는 다른 메타 데이터 속성의 값 &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;로 설정 된 <ph id="ph2">`true`</ph> 이 메타 데이터에.&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is exposed as a convenience so that callers do not have to check both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;.</source>
          <target state="translated">이 속성은 편의 위해 확인 하려면 두 &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;및 &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;.&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt; &lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; 호출자가 보유 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; (note the slight naming convention difference versus &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).</source>
          <target state="translated">플래그를 지정 하는 경우는 그렇지 않으면 읽기/쓰기 속성이 데이터 바인딩을 지원 하지 않도록 지정 하는 메타 데이터를 만들려면, &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;(참고는 약간의 가능 &lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;).&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsDataBindingAllowed"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if data binding is supported on the dependency property to which this metadata applies; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가 적용 되는; 종속성 속성에 데이터 바인딩이 지원 되는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the dependency property supports data binding.</source>
          <target state="translated">종속성 속성이 데이터 바인딩을 지원 하는지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this metadata property is set to <ph id="ph1">`true`</ph> specifically for properties that should not support data binding, despite being read-write properties.</source>
          <target state="translated">참고로이 메타 데이터 속성이 설정 되어 있는지 <ph id="ph1">`true`</ph> 특히 속성에는 데이터 바인딩, 읽기 / 쓰기 가능 속성을 지원 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</source>
          <target state="translated">예상이는 대부분의 경우 종속성 속성 선언 된 데이터 바인딩, 데이터 바인딩이 종속성 속성은 유용한 주요 시나리오 중 하나 이므로 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;, this does not merely change a default that can later be changed on a specific binding.</source>
          <target state="translated">와 달리 &lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;,이 단순히 특정 바인딩에서 이후에 변경 될 수 있는 기본값을 변경 하지 않습니다.&lt;/xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property <ph id="ph1">`true`</ph> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</source>
          <target state="translated">이 속성을 설정할 <ph id="ph1">`true`</ph> 메타 데이터 종속성 속성에 대 한 메타 데이터에서 해당 종속성 속성에 식을 통해 값을 적용 하는의 모든 바인딩 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <ph id="ph1">`false`</ph> for IsNotDataBindable.</source>
          <target state="translated">읽기 전용 종속성 속성 데이터 바인딩 (했기 때문에 변경 된 값을 적용할 수 있는 setter) 지원 하지 않지만 여전히 보고서 <ph id="ph1">`false`</ph> IsNotDataBindable에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because properties that correspond to a &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt; values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</source>
          <target state="translated">에 해당 하는 속성 때문에 이것이 &lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;값 메타 데이터를 실제로 설정 방법, 항상 의미 하는 속성의 이름을 지정 하는 최종 결과 동작을 보고 하는 대신를 통한 패리티를 보고 합니다.&lt;/xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether a given dependency property permits data binding, you should usually check &lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; instead.</source>
          <target state="translated">지정된 된 종속성 속성에 데이터 바인딩에서 허용 되는지 여부를 확인 하려면 일반적으로 확인해 &lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;대신.&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt; is a convenience for checking both &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt; and IsNotDataBindable as a single operation, yielding the expected result.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;둘 다 검사에 대 한 편리한 &lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;및 예상된 결과 생성 하는 단일 작업으로 IsNotDataBindable.&lt;/xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_IsNotDataBindable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property does not support data binding; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성이 데이터 바인딩을 지원 하지 않는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</source>
          <target state="translated">이 속성에 응용 프로그램 수 있거나 저널링 구현의 일환으로 저장 해야 하는 저널링 정보 포함 되는지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_Journal"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 메타 데이터가;에 적용 되는 종속성 속성에 저널링을 수행 해야 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Enables a merge of the source metadata with base metadata.</source>
          <target state="translated">기본 메타 데이터와 원본 메타 데이터를 병합 수 있습니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used internally when metadata is being overridden.</source>
          <target state="translated">이 메서드는 메타 데이터 재정의 될 때 내부적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The base metadata to merge.</source>
          <target state="translated">병합할 기본 메타 데이터입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The dependency property this metadata is being applied to.</source>
          <target state="translated">이 메타 데이터에 적용 되는 종속성 속성입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
          <target state="translated">이 메타 데이터는 메타 데이터는 봉인 여부를 나타내는 속성에 적용 된 경우 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any mutability of the data structure of a &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; instance should be marked as immutable when this method is invoked.</source>
          <target state="translated">어떠한 방법으로의 데이터 구조는 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;인스턴스 표시 해야 변경할 수 없는 것이 메서드가 호출 되 면.&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The dependency property to which the metadata has been applied.</source>
          <target state="translated">종속성 속성 메타 데이터에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
          <target state="translated">이 특정 형식의 메타 데이터는 경우이 메타 데이터와 연결 된 형식입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If this is default metadata, this value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본 메타 데이터 인 경우이 값 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</source>
          <target state="translated">속성 값 상속 평가가 요소의 논리적 트리에서 특정 콘텐츠 경계와 넘을 지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</source>
          <target state="translated">이 메타 데이터는 특정 부모 요소의 자식 요소 경계를 넘어 수정 된 속성 값 상속 동작을 보고합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The canonical example of such a boundary is the contents of a &lt;xref:System.Windows.Controls.Frame&gt;, where the &lt;xref:System.Windows.Controls.Frame&gt; content might get reloaded independently of the existence of the &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">이러한 경계는 정규 예제는의 내용을 &lt;xref:System.Windows.Controls.Frame&gt;여기서 &lt;xref:System.Windows.Controls.Frame&gt; &lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; 의 존재 여부와 독립적으로 콘텐츠를 다시 로드 얻을 수 있습니다&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Controls.Frame&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>The desired property system behavior is that property value inheritance should not traverse into the contents of the &lt;xref:System.Windows.Controls.Frame&gt;, because these contents might be elements that the application hosting the frame does not own or control.</source>
          <target state="translated">원하는 속성 시스템 동작은의 내용에 속성 값 상속을 통과 해야 하지는 &lt;xref:System.Windows.Controls.Frame&gt;이므로 이러한 콘텐츠 요소일 수도 프레임을 호스팅하는 응용 프로그램을 소유 하거나 제어 하지 않습니다.&lt;/xref:System.Windows.Controls.Frame&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying metadata with OverridesInheritanceBehavior set to <ph id="ph1">`true`</ph>, as well as specifying &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; as <ph id="ph2">`true`</ph>, will cause the property on which the metadata is applied to be inheritable even across the &lt;xref:System.Windows.Controls.Frame&gt; boundary or similar boundaries.</source>
          <target state="translated">로 설정 OverridesInheritanceBehavior를 사용 하 여 메타 데이터를 지정 <ph id="ph1">`true`</ph>지정, &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;으로 <ph id="ph2">`true`</ph>, 걸쳐 상속할 수 있도록 메타 데이터 적용 되는 속성은 &lt;xref:System.Windows.Controls.Frame&gt;경계 또는 이와 유사한 경계.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 후 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_OverridesInheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value inheritance should span across certain content boundaries; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>속성 값 상속이 특정 콘텐츠 경계에 걸쳐 있는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</source>
          <target state="translated">종속성 속성의 하위 속성 포함 하는 개체의 렌더링에 영향을 주지 않습니다 있는지 여부를 나타내는 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</source>
          <target state="translated">이 메타 데이터 옵션은 종속성 속성에는 참조 형식이 해당 형식 자체의 속성 값에 대해 관련 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</source>
          <target state="translated">일반적으로 레이아웃 시스템 논리는 종속성 속성 하위 속성에는 영향을 받을 레이아웃, 다른 렌더링 패스 변경에 대 한 모든 하위 속성을 확인 하는 것은 실제로 실행 중인 보다 더 많은 시간이 소요 되므로 생각 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this option to <ph id="ph1">`true`</ph> is useful for optimizing performance of the WPF framework level layout system implementation.</source>
          <target state="translated">이 옵션을 설정 <ph id="ph1">`true`</ph> WPF 프레임 워크 수준 레이아웃 시스템 구현의 성능을 최적화 하는 데 유용 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of &lt;xref:System.Windows.PropertyMetadata&gt; are typically defined in the object model as read-write.</source>
          <target state="translated">속성의 파생된 클래스에서 &lt;xref:System.Windows.PropertyMetadata&gt;는 일반적으로 읽기 / 쓰기 가능으로 개체 모델에서 정의 됩니다.&lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
          <target state="translated">이므로 인스턴스의 초기화 된 후 조정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, once the metadata is consumed as part of a call to &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, or &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
          <target state="translated">그러나 메타 데이터에 대 한 호출의 일부로 사용 된 경우 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, &lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;, 또는 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;, 속성 시스템은 해당 메타 데이터 인스턴스 및 봉인 속성 메타 데이터의 고유 정보를 제공 하는 현재 변경할 수 없는 것으로 간주 됩니다.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; &lt;/xref:System.Windows.DependencyProperty.AddOwner%2A&gt; &lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt; is <ph id="ph1">`true`</ph> on this metadata instance will raise an exception.</source>
          <target state="translated">후이 속성을 설정 하는 &lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;은 <ph id="ph1">`true`</ph> 이 메타 데이터 인스턴스 예외를 발생 시킵니다.&lt;/xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_SubPropertiesDoNotAffectRender"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># #이 클래스의 XAML 텍스트 사용 멤버에 일반적으로 사용 되지 않는 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if changes to sub-property values do not affect rendering if changed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>하위 속성 값이 변경 되어도; 렌더링 영향을 주지 않고 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
          <target state="translated">메타 데이터를 메타 데이터가 봉인 되어 메타 데이터의 속성을 설정할 수 없습니다 이미 종속성 속성 작업에 적용 되었습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>