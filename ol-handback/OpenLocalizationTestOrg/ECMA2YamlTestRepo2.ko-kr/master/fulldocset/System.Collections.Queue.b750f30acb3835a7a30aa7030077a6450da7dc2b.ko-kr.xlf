<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5e9049497ca56421ea2723b714ac9c1710dab36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Queue.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">067d26302932f48818c003ff5b7739fe616161e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4acdbe5d650715916f9905dc27527c0f8fedc57f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a first-in, first-out collection of objects.</source>
          <target state="translated">개체의 선입 선출 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements a queue as a circular array.</source>
          <target state="translated">이 클래스는 순환 배열로 큐를 구현합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects stored in a Queue are inserted at one end and removed from the other.</source>
          <target state="translated">큐에 저장 된 개체는 한쪽 끝에 삽입 되 고 다른에서 제거 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">큐 및 스택은 유용 정보에 대 한 임시 저장소를 사용 해야 하는 경우 즉 때 하려는 경우도 요소 값을 검색 한 후 취소 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use Queue if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">에 컬렉션에 저장 된 동일한 순서로 정보에에서 액세스 해야 하는 경우 큐를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Collections.Stack&gt; if you need to access the information in reverse order.</source>
          <target state="translated">사용 하 여 &lt;xref:System.Collections.Stack&gt;반대 순서로 정보에 액세스 해야 합니다.&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt; or &lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt; if you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">사용 하 여 &lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;또는 &lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;경우 동시에 여러 스레드에서 컬렉션에 액세스 해야 합니다.&lt;/xref:System.Collections.Concurrent.ConcurrentStack%601&gt; &lt;/xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Three main operations can be performed on a Queue and its elements:      -   &lt;xref:System.Collections.Queue.Enqueue%2A&gt; adds an element to the end of the Queue.</source>
          <target state="translated">큐와 요소에 세 가지 주요 작업을 수행할 수 있습니다.- &lt;xref:System.Collections.Queue.Enqueue%2A&gt;큐의 끝에 요소를 추가 합니다.&lt;/xref:System.Collections.Queue.Enqueue%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Collections.Queue.Dequeue%2A&gt; removes the oldest element from the start of the Queue.</source>
          <target state="translated">- &lt;xref:System.Collections.Queue.Dequeue%2A&gt;큐의 시작 부분부터 가장 오래 된 요소를 제거 합니다.&lt;/xref:System.Collections.Queue.Dequeue%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Collections.Queue.Peek%2A&gt; returns the oldest element that is at the start of the Queue but does not remove it from the Queue.</source>
          <target state="translated">- &lt;xref:System.Collections.Queue.Peek%2A&gt;큐의 시작 부분에 없지만 큐에서 제거 되지 않고 가장 오래 된 요소를 반환 합니다.&lt;/xref:System.Collections.Queue.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a Queue is the number of elements the Queue can hold.</source>
          <target state="translated">큐의 용량은는 큐에 저장할 수 있는 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a Queue, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소는 큐에 추가 되 면 자동으로 용량 증가 하면 재할당을 통해 필요에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the Queue is constructed.</source>
          <target state="translated">증가 비율은 큐 생성 될 때 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default growth factor is 2.0.</source>
          <target state="translated">기본 증가 비율은 2.0입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the Queue will always increase by at least a minimum of four, regardless of the growth factor.</source>
          <target state="translated">큐의 용량 증가 비율에 관계 없이&amp;4;의 최소 이상 증가 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a Queue with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</source>
          <target state="translated">예를 들어 큐 증가 비율 1.0 항상 늘어납니다 용량에 네 개의 큰 용량이 필요할 때.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Queue accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">큐에 받아들일지 <ph id="ph1">`null`</ph> 을 유효한 값으로 중복 요소를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the generic version of this collection, see &lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</source>
          <target state="translated">이 컬렉션의 제네릭 버전은를 참조 하세요.&lt;xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;&lt;/xref:System.Collections.Generic.Queue%601?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the default initial capacity, and uses the default growth factor.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스는 비어 있는 기본 초기 용량을 갖고 있고 기본 증가 비율을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.Queue&gt;요소의 수가 고 &lt;xref:System.Collections.Queue&gt;보유할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.Queue&gt;, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">증가 비율은 결정 됩니다 때는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 복사 된 요소 수와 같은 초기 용량을 가지와 기본 증가 비율을 사용 하 여 지정된 된 컬렉션에서 복사한 요소가 들어 클래스입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.Queue&gt;요소의 수가 고 &lt;xref:System.Collections.Queue&gt;보유할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.Queue&gt;, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">증가 비율은 결정 됩니다 때는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied onto the &lt;xref:System.Collections.Queue&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">요소는 &lt;xref:System.Collections.Queue&gt;순서는 &lt;xref:System.Collections.IEnumerator&gt; &lt;xref:System.Collections.ICollection&gt;.&lt;/xref:System.Collections.ICollection&gt; &lt;/xref:System.Collections.IEnumerator&gt; 가 읽을&lt;/xref:System.Collections.Queue&gt; 에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 에 있는 요소의 수는 <ph id="ph3">`col`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; to copy elements from.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;요소를 복사할 원본.&lt;/xref:System.Collections.ICollection&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the default growth factor.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스는 비어 있는 지정 된 초기 용량을 갖고 있고 기본 증가 비율을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.Queue&gt;요소의 수가 고 &lt;xref:System.Collections.Queue&gt;보유할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.Queue&gt;, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">증가 비율은 결정 됩니다 때는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 에 요소를 추가 하는 동안 여러 번 수행</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`capacity`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">초기 요소 수는는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty, has the specified initial capacity, and uses the specified growth factor.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스는 비어 있는 지정 된 초기 용량을 갖고 및 지정한 증가 비율을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.Queue&gt;요소의 수가 고 &lt;xref:System.Collections.Queue&gt;보유할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.Queue&gt;, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">증가 비율은 결정 됩니다 때는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">용량에서 &lt;xref:System.Collections.Queue&gt;증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 &lt;xref:System.Collections.Queue&gt;의 크기가 증가 합니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">컬렉션의 크기를 예상할 수 있는 경우 초기 용량을 지정 하지 않아도 크기 조정 작업 &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 에 요소를 추가 하는 동안 여러 번 수행</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">이 생성자는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">`capacity`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">초기 요소 수는는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The factor by which the capacity of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is expanded.</source>
          <target state="translated">인수입니다 용량의 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 확장 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;capacity&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;growFactor&lt;/code&gt;</ph> is less than 1.0 or greater than 10.0.</source>
          <target state="translated">-또는- <ph id="ph1">&lt;code&gt;growFactor&lt;/code&gt;</ph> 가 1.0 보다 작은 10.0 보다 큽니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">개체를 모두 제거 된 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.Queue.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.Count%2A&gt;가&amp;0;으로 설정 하 고 컬렉션의 요소에 다른 개체에 대 한 참조도 해제 됩니다.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity remains unchanged.</source>
          <target state="translated">용량 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset the capacity of the &lt;xref:System.Collections.Queue&gt;, call &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue&gt; &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 호출,&lt;/xref:System.Collections.Queue&gt; 용량을 다시 설정 하려면</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.</source>
          <target state="translated">빈 트리밍 &lt;xref:System.Collections.Queue&gt;의 용량 설정는 &lt;xref:System.Collections.Queue&gt;기본 용량을.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">단순 복사본을 만듭니다는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">컬렉션의 단순 복사본은 참조 형식 또는 값 형식 참조에서 참조 하는 개체를 복사 하지 않습니다 여부는 컬렉션의 요소에만 복사 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">새 컬렉션에 대 한 참조는 원본 컬렉션에 대 한 참조를 가리키는 동일한 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">반면, 요소를 복사 하는 컬렉션의 전체 복사본 및 뿐만 아니라 해당 요소에서 직접 또는 간접적으로 참조 하는 모든 항목입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">단순 복사는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 요소가 있는지 여부를 결정은 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines equality by calling &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt; 를 호출 하 여 같은지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 선형 검색; 수행 따라서이 메서드는는 O (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id="ph1">`obj`</ph> to determine whether <ph id="ph2">`item`</ph> exists.</source>
          <target state="translated">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0 부터는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;에 대 한 메서드 <ph id="ph1">`obj`</ph> 확인 하려면 여부 <ph id="ph2">`item`</ph> 존재 합니다.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id="ph1">`obj`</ph> parameter on the objects in the collection.</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 확인 작업을 수행를 사용 하 여는 &lt;xref:System.Object.Equals%2A&gt;및 &lt;xref:System.IComparable.CompareTo%2A&gt;의 메서드는 <ph id="ph1">`obj`</ph> 컬렉션의 개체에 대 한 매개 변수.&lt;/xref:System.IComparable.CompareTo%2A&gt; &lt;/xref:System.Object.Equals%2A&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to locate in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;에서 찾으려고는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> elements to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.</source>
          <target state="translated">복사본의 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소를 사용 하는 기존&amp;1; 차원 &lt;xref:System.Array&gt;지정한 배열 인덱스부터 시작 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">&lt;xref:System.Array&gt;열거자 &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 을 반복 하는 같은 순서로&lt;/xref:System.Array&gt; 요소가 복사 되</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 차원 &lt;xref:System.Array&gt;에서 복사한 요소의 대상인 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0부터 시작 하는 인덱스가 있어야 합니다.&lt;/xref:System.Array&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">인덱스는&amp;0;부터 시작 <ph id="ph1">`array`</ph> 복사가 시작 되는 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>가&amp;0; 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>가 다차원 배열인 경우</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">-또는-소스에 있는 요소의 수 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 에서 사용 가능한 공간 보다 큰 <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> 대상의 끝에 <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">소스의 형식을 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 대상의 형식으로 자동 캐스팅할 수 없는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph> <ept id="p2">&lt;/code&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 포함 된 요소의 수를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements that the &lt;xref:System.Collections.Queue&gt; can store.</source>
          <target state="translated">용량을 &lt;xref:System.Collections.Queue&gt;요소의 수가 하는 &lt;xref:System.Collections.Queue&gt;저장할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Count is the number of elements that are actually in the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">Count가 실제로 있는 &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 에 있는 요소 수</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is always greater than or equal to Count.</source>
          <target state="translated">용량을 &lt;xref:System.Collections.Queue&gt;개수 보다 크거나 같은 경우는 항상.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Count는 용량을 초과 하면 요소를 추가 하는 동안 용량 자동으로 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 다시 할당 하 여 증가 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">새 용량 증가 비율을은 현재 용량을 곱하여 결정 됩니다 때 결정는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">용량에서 &lt;xref:System.Collections.Queue&gt;증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 &lt;xref:System.Collections.Queue&gt;의 크기가 증가 합니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하는 것은 o (1) 작업입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 포함 된 요소의 수는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Removes and returns the object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">제거 하 고 맨 앞에 개체를 반환 합니다.는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to the &lt;xref:System.Collections.Queue.Peek%2A&gt; method, but &lt;xref:System.Collections.Queue.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">이 메서드는 &lt;xref:System.Collections.Queue.Peek%2A&gt;메서드를 &lt;xref:System.Collections.Queue.Peek%2A&gt; &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 를 수정 하지 않은&lt;/xref:System.Collections.Queue.Peek%2A&gt; 채&lt;/xref:System.Collections.Queue.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.</source>
          <target state="translated"><ph id="ph1">`null`</ph>에 추가할 수는 &lt;xref:System.Collections.Queue&gt;값으로.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.</source>
          <target state="translated">끝과 null 값을 구분 하기 위해는 &lt;xref:System.Collections.Queue&gt;, 확인 된 &lt;xref:System.Collections.Queue.Count%2A&gt;속성 또는 catch는 &lt;xref:System.InvalidOperationException&gt;때 throw 되는 &lt;xref:System.Collections.Queue&gt;비어.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Collections.Queue.Count%2A&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The object that is removed from the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">시작 부분에서 제거 된 개체는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Adds an object to the end of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">개체의 끝에 추가 된 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of a &lt;xref:System.Collections.Queue&gt; is the number of elements the &lt;xref:System.Collections.Queue&gt; can hold.</source>
          <target state="translated">용량은 &lt;xref:System.Collections.Queue&gt;요소의 수가 고 &lt;xref:System.Collections.Queue&gt;보유할 수 있습니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>As elements are added to a &lt;xref:System.Collections.Queue&gt;, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">요소에 추가 되는 &lt;xref:System.Collections.Queue&gt;, 용량 자동으로 증가 하면 재할당을 통해 필요에 따라.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity can be decreased by calling &lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.Queue.TrimToSize%2A&gt;.&lt;/xref:System.Collections.Queue.TrimToSize%2A&gt; 를 호출 하 여 용량을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</source>
          <target state="translated">증가 비율은 현재 용량이 더 큰 용량이 필요할 때 기준이 곱한 숫자입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The growth factor is determined when the &lt;xref:System.Collections.Queue&gt; is constructed.</source>
          <target state="translated">증가 비율은 결정 됩니다 때는 &lt;xref:System.Collections.Queue&gt;생성 됩니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The capacity of the &lt;xref:System.Collections.Queue&gt; will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the &lt;xref:System.Collections.Queue&gt; from increasing in size.</source>
          <target state="translated">용량에서 &lt;xref:System.Collections.Queue&gt;증가 비율에 관계 없이 최소 값은 증가 합니다. 1.0 증가 비율을 주지 않는 것은 &lt;xref:System.Collections.Queue&gt;의 크기가 증가 합니다.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.Queue.Count%2A&gt; is less than the capacity of the internal array, this method is an O(1) operation.</source>
          <target state="translated">경우 &lt;xref:System.Collections.Queue.Count%2A&gt;작으면이 메서드는 o (1) 작업 내부 배열의 용량 보다.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">내부 배열을 재할당 하 여 새 요소로 적용 하는 경우이 메서드는 O는 됩니다 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object to add to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 추가할 개체는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">값일 수 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반복 하는 열거자를 반환 된 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 언어의 (<ph id="ph2">`for each`</ph> Visual basic에서)은 열거자의 복잡성을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">따라서 사용 하 여 <ph id="ph1">`foreach`</ph> 열거자를 직접 조작 하는 대신이 좋습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">열거자는 컬렉션의에서 데이터를 읽는 데 사용할 수 있지만 기본 컬렉션을 수정 하는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치 됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;또한이 위치로 복원 열거자를 가져옵니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">이 위치에서 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">따라서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 의 값을 읽기 전에 컬렉션의 첫 번째 요소로 열거자를&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;될 때까지 동일한 개체를 반환 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;또는 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;호출 됩니다.&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;설정 &lt;xref:System.Collections.IEnumerator.Current%2A&gt;를 다음 요소로.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;전달 컬렉션의 마지막 요소 뒤에 열거자는 컬렉션의 끝에 배치 되 고 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">열거자가 있는 경우이 위치에 대 한 후속 호출에서 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환할 수도 <ph id="ph1">`false`</ph>.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">마지막으로 호출 하는 경우 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;반환 <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt;정의 되지 않습니다.&lt;/xref:System.Collections.IEnumerator.Current%2A&gt; &lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;다시, 컬렉션의 첫 번째 요소를 호출할 수 있습니다 &lt;xref:System.Collections.IEnumerator.Reset%2A&gt;그 뒤 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;/xref:System.Collections.IEnumerator.Reset%2A&gt; &lt;/xref:System.Collections.IEnumerator.Current%2A&gt; 설정 하려면</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경 되지으로 유효한 상태를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">컬렉션 변경 되 면 추가, 수정 또는 요소를 삭제와 같은 열거자는 무효화 하 고 해당 동작은 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스가 없습니다. 따라서 컬렉션을 열거 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 전체 열거 동안 컬렉션을 잠글 수 있습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">컬렉션에 여러 스레드에서 읽기 및 쓰기에 대 한 액세스를 허용 하려면 사용자 지정 동기화를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 동기화 되었으면 (스레드로부터 안전 하 게 보호).</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 &lt;xref:System.Collections.Queue&gt;에서 반환 되는 래퍼를 통해 모든 작업을 완료 해야 합니다는 &lt;xref:System.Collections.Queue.Synchronized%2A&gt;메서드.&lt;/xref:System.Collections.Queue.Synchronized%2A&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if access to the <bpt id="p2">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우에 대 한 액세스는 <bpt id="p2">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 은 동기화 (스레드로부터 안전함); 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns the object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> without removing it.</source>
          <target state="translated">시작 부분에서 개체를 반환 된 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제거 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to the &lt;xref:System.Collections.Queue.Dequeue%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">이 메서드는 유사 &lt;xref:System.Collections.Queue.Dequeue%2A&gt;메서드이지만 Peek &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 수정 하지 않습니다&lt;/xref:System.Collections.Queue.Dequeue%2A&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`null`</ph> can be added to the &lt;xref:System.Collections.Queue&gt; as a value.</source>
          <target state="translated"><ph id="ph1">`null`</ph>에 추가할 수는 &lt;xref:System.Collections.Queue&gt;값으로.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>To distinguish between a null value and the end of the &lt;xref:System.Collections.Queue&gt;, check the &lt;xref:System.Collections.Queue.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Queue&gt; is empty.</source>
          <target state="translated">끝과 null 값을 구분 하기 위해는 &lt;xref:System.Collections.Queue&gt;, 확인 된 &lt;xref:System.Collections.Queue.Count%2A&gt;속성 또는 catch는 &lt;xref:System.InvalidOperationException&gt;때 throw 되는 &lt;xref:System.Collections.Queue&gt;비어.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Collections.Queue.Count%2A&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The object at the beginning of the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">시작 부분에 있는 개체는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비어 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a new <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that wraps the original queue, and is thread safe.</source>
          <target state="translated">새 반환 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 원본 큐를 래핑하고 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</source>
          <target state="translated">이 메서드에 의해 반환 되는 래퍼를 스레드로부터 안전한 방식으로 수행 되는 작업을 수행 하기 전에 큐를 잠급니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Queue&gt;, all operations must be done through this wrapper only.</source>
          <target state="translated">스레드로부터 안전을 보장 하려면는 &lt;xref:System.Collections.Queue&gt;만이 래퍼를 통해 모든 작업을 완료 해야 합니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 동기화 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> wrapper that is synchronized (thread safe).</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 래퍼를 동기화 (스레드로부터 안전함).</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;queue&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;queue&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a synchronized version of the &lt;xref:System.Collections.Queue&gt;, use the &lt;xref:System.Collections.Queue.Synchronized%2A&gt; method.</source>
          <target state="translated">동기화 된 버전을 만들려면는 &lt;xref:System.Collections.Queue&gt;를 사용 하 여는 &lt;xref:System.Collections.Queue.Synchronized%2A&gt;메서드.&lt;/xref:System.Collections.Queue.Synchronized%2A&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Queue&gt; using the SyncRoot property.</source>
          <target state="translated">하지만 파생된 클래스의 동기화 된 버전을 제공할 수 있습니다는 &lt;xref:System.Collections.Queue&gt;SyncRoot 속성을 사용 하 여.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Queue&gt;, not directly on the &lt;xref:System.Collections.Queue&gt;.</source>
          <target state="translated">동기화 하는 코드의 SyncRoot에 대 한 작업을 수행 해야는 &lt;xref:System.Collections.Queue&gt;, &lt;xref:System.Collections.Queue&gt;.&lt;/xref:System.Collections.Queue&gt; 으로 만들어지므로&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">이렇게 하면 다른 개체에서 파생 된 컬렉션의 적절 한 작업입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Queue&gt; object.</source>
          <target state="translated">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 &lt;xref:System.Collections.Queue&gt;개체입니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화 되어 있을 때 다른 스레드에서 수 수정할 열거자에서 예외가 발생 하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거 동안 스레드 보안을 보장 하려면 전체 열거 동안 컬렉션을 잠글 하거나 다른 스레드에서 변경 된 내용으로 인해 발생 한 예외를 catch 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> elements to a new array.</source>
          <target state="translated">복사본의 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 요소를 새 배열입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Collections.Queue&gt; is not modified.</source>
          <target state="translated">&lt;xref:System.Collections.Queue&gt;수정 되지 않습니다.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the elements in the new array is the same as the order of the elements from the beginning of the &lt;xref:System.Collections.Queue&gt; to its end.</source>
          <target state="translated">새 배열의 요소 순서의 시작 부분에서 요소의 순서와 같습니다는 &lt;xref:System.Collections.Queue&gt;끝.&lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A new array containing elements copied from the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 배열에서 복사 된 요소를 포함 하는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Sets the capacity to the actual number of elements in the <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">용량을 실제로 수의 요소는 <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</source>
          <target state="translated">새 요소가 더 이상 큐에 추가 될 경우 큐의 메모리 오버 헤드를 최소화할이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>To reset a &lt;xref:System.Collections.Queue&gt; to its initial state, call the &lt;xref:System.Collections.Queue.Clear%2A&gt; method before calling TrimToSize.</source>
          <target state="translated">다시 설정 하는 &lt;xref:System.Collections.Queue&gt;를 초기 상태로 호출는 &lt;xref:System.Collections.Queue.Clear%2A&gt;메서드 TrimToSize를 호출 하기 전에.&lt;/xref:System.Collections.Queue.Clear%2A&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trimming an empty &lt;xref:System.Collections.Queue&gt; sets the capacity of the &lt;xref:System.Collections.Queue&gt; to the default capacity.</source>
          <target state="translated">빈 트리밍 &lt;xref:System.Collections.Queue&gt;의 용량 설정는 &lt;xref:System.Collections.Queue&gt;기본 용량을.&lt;/xref:System.Collections.Queue&gt; &lt;/xref:System.Collections.Queue&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Queue.Count%2A&gt;.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 &lt;xref:System.Collections.Queue.Count%2A&gt;.&lt;/xref:System.Collections.Queue.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is read-only.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Queue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 읽기 전용입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>