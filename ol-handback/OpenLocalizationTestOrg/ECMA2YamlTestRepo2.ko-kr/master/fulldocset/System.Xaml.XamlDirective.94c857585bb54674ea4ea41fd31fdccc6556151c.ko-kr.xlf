<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c43abccd07fb39eb71ee689bccaf54771aad16b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlDirective.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">468a87911bb2398cdf7ff9628c241553904831ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">918320d99a28c136bca19996d90ab674d6d3227c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the XAML type system identifier for a member if the member is also a XAML directive.</source>
          <target state="translated">XAML 지시문의 멤버 이기도 한 경우에 멤버에 대 한 XAML 형식 시스템 식별자를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML readers and XAML writers use the XamlDirective identifier during processing of member nodes.</source>
          <target state="translated">XAML 판독기 및 XAML 작성기 멤버 노드를 처리 하는 동안 XamlDirective 식별자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The identifier is used when the XAML reader is positioned on a <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and &lt;xref:System.Xaml.XamlMember.IsDirective*&gt; is <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XAML 판독기가 때 식별자를 사용는 <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 &lt;xref:System.Xaml.XamlMember.IsDirective*&gt;은 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Xaml.XamlMember.IsDirective*&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlDirective provides expected values for the XAML type system when the member is a XAML directive.</source>
          <target state="translated">XamlDirective 멤버인 XAML 지시문 때 XAML 형식 시스템에 대 한 예상 값을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>By definition, a XAML directive has characteristics that always return the same results for a subset of the &lt;xref:System.Xaml.XamlMember&gt; properties, and the same XAML type system information is reported for all possible XAML directives.</source>
          <target state="translated">정의 XAML 지시문의 하위 집합에 대 한 동일한 결과 반환 하는 특성에는 &lt;xref:System.Xaml.XamlMember&gt;모든 가능한 XAML 지시문에 대 한 속성과 동일한 XAML 형식 시스템 정보가 보고 됩니다.&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reporting of XAML type system characteristics that are specific to directives is accomplished by internal behavior or through overrides of &lt;xref:System.Xaml.XamlMember&gt; <ph id="ph1">`Lookup*`</ph> virtual members in the XamlDirective class.</source>
          <target state="translated">내부 동작을 통해 또는의 재정의 통해 수행 됩니다 지시문에만 적용 되는 XAML 형식 시스템 특성의 보고 &lt;xref:System.Xaml.XamlMember&gt; <ph id="ph1">`Lookup*`</ph> XamlDirective 클래스의 가상 멤버&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the returned results of a XAML directive for &lt;xref:System.Xaml.XamlMember&gt; when the member is actually a XamlDirective:      -   &lt;xref:System.Xaml.XamlMember.LookupCustomAttributeProvider%2A&gt; is always <ph id="ph1">`null`</ph>.</source>
          <target state="translated">다음 목록에 대 한 XAML 지시문의 반환 된 결과 보여 줍니다. &lt;xref:System.Xaml.XamlMember&gt;멤버 XamlDirective 실제로가 하는 경우:- &lt;xref:System.Xaml.XamlMember.LookupCustomAttributeProvider%2A&gt;항상 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlMember.LookupCustomAttributeProvider%2A&gt; &lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt; is always <ph id="ph1">`null`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;항상 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt; is always <ph id="ph1">`null`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;항상 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlMember.DependsOn%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt; is always <ph id="ph1">`false`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;항상 <ph id="ph1">`false`</ph>.&lt;/xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt; is always <ph id="ph1">`false`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;항상 <ph id="ph1">`false`</ph>.&lt;/xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt; is always <ph id="ph1">`true`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;항상 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlMember.IsDirective%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt; is always <ph id="ph1">`false`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;항상 <ph id="ph1">`false`</ph>.&lt;/xref:System.Xaml.XamlMember.IsEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt; is always <ph id="ph1">`false`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;항상 <ph id="ph1">`false`</ph>.&lt;/xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt; is always <ph id="ph1">`true`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;항상 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt; is always <ph id="ph1">`true`</ph>.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;항상 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the internal backing for &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt; remains unset and returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">에 대 한 내부 지원은 또한 &lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;설정 되지 않은 상태를 유지 하 고 반환 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  XamlDirective is a &lt;xref:System.Xaml.XamlMember&gt; subclass.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; XamlDirective은는 &lt;xref:System.Xaml.XamlMember&gt;하위 클래스입니다.&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with &lt;xref:System.Xaml.XamlMember&gt;, XamlDirective has security considerations regarding how the XAML type system reports access.</source>
          <target state="translated">와 마찬가지로 &lt;xref:System.Xaml.XamlMember&gt;, XamlDirective가 XAML 형식 시스템 액세스를 보고 하는 방법에 대 한 보안 고려 사항.&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks in &lt;xref:System.Xaml.XamlMember&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember&gt;.&lt;/xref:System.Xaml.XamlMember&gt; 설명 부분을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying values for a name and a single XAML namespace.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이름과 하나의 XAML 네임 스페이스에 대 한 값을 지정 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use this signature only when you want or expect &lt;xref:System.Xaml.XamlMember.IsUnknown*&gt; to report <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the directive.</source>
          <target state="translated">이 서명을 하려는 경우에 사용 하 여 &lt;xref:System.Xaml.XamlMember.IsUnknown*&gt;보고할 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지시문에 대 한.&lt;/xref:System.Xaml.XamlMember.IsUnknown*&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This signature of the constructor always generates an identifier for the directive where &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; reports <ph id="ph2">`true`</ph> for the XAML type system.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; 생성자의이 시그니처에이 지시문에 대 한 식별자는 항상 생성 여기서 &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;보고서 <ph id="ph2">`true`</ph> XAML에 대 한 형식 시스템.&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the necessary information is available (the backing type and a text syntax information item for conversion) and you want an identifier that can apply the directive, use the &lt;xref:System.Xaml.XamlDirective.%23ctor%2A?displayProperty=fullName&gt; constructor signature instead.</source>
          <target state="translated">필요한 정보를 사용할 수 있는 경우 (지원 형식 및 변환에 대 한 텍스트 구문 정보 항목) 지시문을 사용 하 여 적용할 수 있는 식별자 중이 고는 &lt;xref:System.Xaml.XamlDirective.%23ctor%2A?displayProperty=fullName&gt;생성자 서명을 대신.&lt;/xref:System.Xaml.XamlDirective.%23ctor%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this signature, the &lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt; value for the instance is &lt;xref:System.Xaml.Schema.AllowedMemberLocations&gt;; and the &lt;xref:System.Xaml.XamlMember.Type%2A&gt; value and &lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt; value are both <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 서명을 사용 하는 경우는 &lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;값은 인스턴스가 &lt;xref:System.Xaml.Schema.AllowedMemberLocations&gt;; 및 &lt;xref:System.Xaml.XamlMember.Type%2A&gt;값 및 &lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;값은 모두 <ph id="ph1">`null`</ph>.&lt;/xref:System.Xaml.XamlMember.TypeConverter%2A&gt; &lt;/xref:System.Xaml.XamlMember.Type%2A&gt; &lt;/xref:System.Xaml.Schema.AllowedMemberLocations&gt; &lt;/xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The primary XAML namespace where this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">기본 XAML 네임 스페이스를이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 존재할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The identifying name of the <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">식별 하는 이름을 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying values for each per-case value of a <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스의 각 사례 값에 대 한 값을 지정 하는 <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use this constructor to generate a &lt;xref:System.Xaml.XamlDirective&gt; that does not report &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">생성 하려면이 생성자를 사용 해야 합니다는 &lt;xref:System.Xaml.XamlDirective&gt;보고 하지 않는 &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;으로 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A set of XAML namespaces where this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can exist, passed as an enumerable set of the identifier strings.</source>
          <target state="translated">XAML 네임 스페이스 집합을 여기서이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 식별자 문자열의 열거 가능한 집합 변수로 전달 된 존재할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The identifying name of the <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">식별 하는 이름을 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The XAML type that backs the <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">백업 하는 XAML 형식은 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type converter that this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> uses for text syntax conversion.</source>
          <target state="translated">형식 변환기가 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 텍스트 구문 변환에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.AllowedMemberLocations"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
          <target state="translated">값은 <bpt id="p1">&lt;xref href="System.Xaml.Schema.AllowedMemberLocations"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 열거 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xamlType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xamlType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies the XAML node types where the directive can be specified.</source>
          <target state="translated">지시문을 지정할 수 있습니다 XAML 노드 형식을 지정 하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this value in the &lt;xref:System.Xaml.XamlDirective.%23ctor%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%2CSystem.Xaml.XamlType%2CSystem.Xaml.Schema.XamlValueConverter%7BSystem.ComponentModel.TypeConverter%7D%2CSystem.Xaml.Schema.AllowedMemberLocations%29&gt; constructor signature.</source>
          <target state="translated">이 값을 설정할 수는 &lt;xref:System.Xaml.XamlDirective.%23ctor%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%2CSystem.Xaml.XamlType%2CSystem.Xaml.Schema.XamlValueConverter%7BSystem.ComponentModel.TypeConverter%7D%2CSystem.Xaml.Schema.AllowedMemberLocations%29&gt;있는 생성자 시그니처의.&lt;/xref:System.Xaml.XamlDirective.%23ctor%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%2CSystem.Xaml.XamlType%2CSystem.Xaml.Schema.XamlValueConverter%7BSystem.ComponentModel.TypeConverter%7D%2CSystem.Xaml.Schema.AllowedMemberLocations%29&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you construct by using the &lt;xref:System.Xaml.XamlDirective.%23ctor%28System.String%2CSystem.String%29&gt; constructor signature, the AllowedLocation value for the instance is &lt;xref:System.Xaml.Schema.AllowedMemberLocations&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective.%23ctor%28System.String%2CSystem.String%29&gt;생성자 시그니처를 인스턴스에 대 한 AllowedLocation 값은 &lt;xref:System.Xaml.Schema.AllowedMemberLocations&gt;.&lt;/xref:System.Xaml.Schema.AllowedMemberLocations&gt; &lt;/xref:System.Xaml.XamlDirective.%23ctor%28System.String%2CSystem.String%29&gt; 사용 하 여 생성 하는 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the instance always reports &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt; as <ph id="ph1">`true`</ph>.</source>
          <target state="translated">하지만 인스턴스가 보고 항상 &lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;으로 <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior typically affects attempts to write object graphs and also affects other practical uses of a &lt;xref:System.Xaml.XamlMember&gt; value.</source>
          <target state="translated">이 동작은 일반적으로 영향을 주며 개체 그래프를 다른 실제적의 영향을 미칩니다를 작성 하는 &lt;xref:System.Xaml.XamlMember&gt;값.&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically would not construct a XAML directive case where AllowedLocation is &lt;xref:System.Xaml.Schema.AllowedMemberLocations?displayProperty=fullName&gt;.</source>
          <target state="translated">일반적으로 하지 구성 합니다. XAML 지시문 AllowedLocation &lt;xref:System.Xaml.Schema.AllowedMemberLocations?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.AllowedMemberLocations?displayProperty=fullName&gt; 인 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default is the enumeration default, which is <bpt id="p1">&lt;xref href="System.Xaml.Schema.AllowedMemberLocations"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본값은 열거형 기본값 즉 <bpt id="p1">&lt;xref href="System.Xaml.Schema.AllowedMemberLocations"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
          <target state="translated">이 개체에 대 한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
          <target state="translated">정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">이 XAML 멤버가 있을 수 있는 XAML 네임 스페이스 목록을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML namespace identifiers are strings that typically appear in the Uniform Resource Identifier (URI) string form according to the usual conventions for XAML and XML namespaces.</source>
          <target state="translated">XAML 네임 스페이스 식별자는 일반적으로 XAML 및 XML 네임 스페이스에 대 한 일반적인 규칙에 따라 식별자 URI (Uniform Resource) 문자열 형태로 표시 되는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the list contains more than one item, the first item in the set is usually the relevant primary XAML namespace for processing purposes, and the other items are alternates.</source>
          <target state="translated">목록에 둘 이상의 항목이 있으면 첫 번째 항목 집합에는 일반적으로 처리를 위해 관련 기본 XAML 네임 스페이스 및 다른 항목은 대체 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A?displayProperty=fullName&gt; relies on this ordering.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A?displayProperty=fullName&gt;이 순서에 의존합니다.&lt;/xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A list of XAML namespace identifiers, as strings.</source>
          <target state="translated">목록 문자열로 XAML 네임 스페이스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns an <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a XAML directive cannot have custom attributes, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">XAML 지시문에서 사용자 지정 특성을 가질 수 있으므로이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used during deferred loading of XAML-declared objects.</source>
          <target state="translated">반환 된 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> XAML 선언 된 개체의 지연 된 로드 시 사용 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a directive cannot have deferred loading, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">지시문은 지연 된 로드를 가질 수 없는이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">목록을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The list reports the members where dependency relationships for initialization order exist relative to this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">목록 초기화 순서에 대 한 종속성 관계가를 기준으로 존재 하는 위치 하는 멤버를 보고 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a XAML directive cannot have initialization order, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">XAML 지시문 초기화 순서를 가질 수 있으므로이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with a <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 와 연결 된 한 <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method may be invoked by calls to &lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;.&lt;/xref:System.Xaml.XamlMember.Invoker%2A&gt; 를 호출 하 여이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation returns an internal static &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt; value that is specific to directives in the XAML type system.</source>
          <target state="translated">이 구현은 내부 정적 &lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;XAML 형식 시스템에서 지시문에만 적용 되는 값입니다.&lt;/xref:System.Xaml.Schema.XamlMemberInvoker&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 대 한 정보 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is reported as an ambient property.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 앰비언트 속성으로 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a XAML directive cannot be an ambient type, this implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">이 구현은 항상 반환 XAML 지시문은 앰비언트 형식이 될 수 없으므로 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an event.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an intended read-only property.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의도 한 읽기 전용 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>By definition, directives are settable.</source>
          <target state="translated">정의상 지시문을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a property that has a public <bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가진 공용 속성을 나타내는 <bpt id="p2">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 접근자입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식 및 멤버 확인에 사용 되는 지원 시스템에서 확인 될 수 없는 멤버를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.XamlDirective&gt; implementation only calls base and does nothing more.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base implementation returns the results in this order: the results are based on internal reflection; or the results are based on checking for a null value of the &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;.</source>
          <target state="translated">이 순서 대로 결과 반환 하는 기본 구현을: 결과; 내부 리플렉션 기반 또는 결과 &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;.&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt; null 값을 확인 하는 기준으로</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.XamlDirective&gt; implementation seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;구현 하므로이 가상 멤버; 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt; &lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a non-resolvable member; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>이 경우 <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 가 확인할 수 없는 멤버를 나타내는, 그렇지 않으면 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an intended write-only property.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의도 한 쓰기 전용 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a property that has a public <bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> accessor.</source>
          <target state="translated">반환 여부이 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 가진 공용 속성을 나타내는 <bpt id="p2">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 접근자입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type where the <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> can exist.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 형식의 위치는 <bpt id="p2">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 존재할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Target types are not relevant for directives; therefore, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">지시문에 대 한 대상 형식이 관련이 없으므로 따라서이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 멤버에서 사용 되는 형식입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.XamlDirective&gt; implementation only calls base and does nothing more.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base implementation returns results based either on internal reflection, or checking for a null value of &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;, processing in that order.</source>
          <target state="translated">내부 리플렉션 또는 null 값을 확인 하는 중 하나에 결과 반환 하는 기본 구현을 &lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;, 그 순서 대로 처리 합니다.&lt;/xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks in &lt;xref:System.Xaml.XamlMember.LookupType%2A?displayProperty=fullName&gt; for more information about what information &lt;xref:System.Xaml.XamlMember.Type%2A&gt; carries.</source>
          <target state="translated">설명을 참조 &lt;xref:System.Xaml.XamlMember.LookupType%2A?displayProperty=fullName&gt;정보에 대 한 자세한 내용은 &lt;xref:System.Xaml.XamlMember.Type%2A&gt;전달 합니다.&lt;/xref:System.Xaml.XamlMember.Type%2A&gt; &lt;/xref:System.Xaml.XamlMember.LookupType%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of the type that is used by the member.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 멤버에서 사용 되는 형식입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns a type converter implementation that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 연결 되는 형식 변환기 구현이 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Xaml.XamlDirective&gt; implementation only calls base and does nothing more.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.XamlMember.LookupTypeConverter%2A?displayProperty=fullName&gt; 를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> instance that has <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint; or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> 있는 인스턴스에 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ; 제약 조건 또는 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref uid="langword_csharp_get" name="get" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 과 관련 접근자 <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Returns a CLR reflection &lt;xref:System.Reflection.MemberInfo&gt; that is associated with this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR 반사를 반환 &lt;xref:System.Reflection.MemberInfo&gt;이와 연결 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> accessor that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">반환 된 <bpt id="p1">&lt;xref uid="langword_csharp_set" name="set" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 과 관련 접근자 <bpt id="p2">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 구현은 항상 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlDirective&gt; seals this virtual member; therefore, all &lt;xref:System.Xaml.XamlDirective&gt; types and all predefined XAML directives must use this behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlDirective&gt;이 가상 멤버; 봉인 따라서 모든 &lt;xref:System.Xaml.XamlDirective&gt;형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.&lt;/xref:System.Xaml.XamlDirective&gt;&lt;/xref:System.Xaml.XamlDirective&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 문자열 표현을 반환 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If XAML namespace information is available, this implementation returns a string combination of &lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt; and &lt;xref:System.Xaml.XamlMember.Name%2A&gt;.</source>
          <target state="translated">이 구현은 &lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;및 &lt;xref:System.Xaml.XamlMember.Name%2A&gt;.&lt;/xref:System.Xaml.XamlMember.Name%2A&gt; &lt;/xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt; 문자열 조합을 XAML 네임 스페이스 정보를 사용할 수 있는 경우</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If XAML namespace information is unavailable, this implementation returns &lt;xref:System.Xaml.XamlMember.Name%2A&gt;.</source>
          <target state="translated">이 구현은 &lt;xref:System.Xaml.XamlMember.Name%2A&gt;.&lt;/xref:System.Xaml.XamlMember.Name%2A&gt; XAML 네임 스페이스 정보를 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 항목의 문자열 표현을 <bpt id="p1">&lt;xref href="System.Xaml.XamlDirective"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>