<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98a5f21694485805037062331e61c84ab6c7b89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.CoerceValueCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de928fc261daaadfc2ef65128adb603e4dd87ffb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8a15d9a78bddc35a28aedda845459834d8a028d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</source>
          <target state="translated">종속성 속성 값을 다시 계산 되는지 또는 강제 변환 특별히 요청 될 때마다 호출 되는 메서드에 대 한 템플릿을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callbacks based on CoerceValueCallback can be assigned to a dependency property through several different techniques.</source>
          <target state="translated">콜백은 된에 따라 다양 한 기술을 통해 종속성 속성에 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these techniques requires that you first create a new property metadata object (&lt;xref:System.Windows.PropertyMetadata&gt;, or a derived class such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).</source>
          <target state="translated">각이 방법을 하려면 먼저 만들어야 새 속성 메타 데이터 개체 (&lt;xref:System.Windows.PropertyMetadata&gt;, 또는와 같은 파생된 클래스 &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the metadata object using a constructor signature that takes the <ph id="ph1">`coerceValueCallback`</ph> parameter, and assign that parameter to your callback handler.</source>
          <target state="translated">변수 하는 생성자 시그니처를 사용 하 여 메타 데이터 개체 만들기는 <ph id="ph1">`coerceValueCallback`</ph> 매개 변수, 콜백 처리기에 해당 매개 변수를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or construct the metadata by any signature and set the &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; property prior to putting the metadata in use.</source>
          <target state="translated">모든 서명 및 집합에서 메타 데이터를 생성 또는 &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;사용 중인 메타 데이터를 설정 하기 전에 속성.&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have this metadata, you can:      -   Define a new dependency property on a new class, using either signature of  &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, giving the metadata as the <ph id="ph1">`typeMetadata`</ph> value.</source>
          <target state="translated">이 메타 데이터가 있는 경우 다음을 할 수 있습니다:-의 서명을 중 하나를 사용 하 여 새 클래스의 새 종속성 속성을 정의 &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, 메타 데이터를 제공는 <ph id="ph1">`typeMetadata`</ph> 값.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Override the metadata (call &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for an existing dependency property, when you derive from the class that owns the dependency property.</source>
          <target state="translated">-메타 데이터를 재정의 합니다. (호출 &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) 종속성 속성을 소유 하는 클래스에서 파생 되는 경우 기존 종속성 속성에 대 한.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add an existing dependency property to a new &lt;xref:System.Windows.DependencyObject&gt; class, using new metadata, by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">-새 &lt;xref:System.Windows.DependencyObject&gt; &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; 를 호출 하 여 새 메타 데이터를 사용 하 여 클래스&lt;/xref:System.Windows.DependencyObject&gt; 에 기존 종속성 속성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of this callback should check the value in <ph id="ph1">`baseValue`</ph> and determine based on either the value or the type whether this is a value that needs to be further coerced.</source>
          <target state="translated">이 콜백은의 구현 값을 확인 해야 <ph id="ph1">`baseValue`</ph> 결정 하 고 추가 강제 하는 값이 인지 값 또는 형식에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for a dependency property is invoked any time that the property system or any other caller calls &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt; on a &lt;xref:System.Windows.DependencyObject&gt; instance, specifying that property's identifier as the <ph id="ph1">`dp`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;속성은 언제 든 지 속성 시스템 또는 다른 모든 호출자가 호출을 호출 하는 데는 종속성에 대 한 &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;에 &lt;xref:System.Windows.DependencyObject&gt;인스턴스를 해당 속성의 식별자를 지정 하는 <ph id="ph1">`dp`</ph>.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.CoerceValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the property value may have come from any possible participant in the property system.</source>
          <target state="translated">속성 값을 변경 속성 시스템에 가능한 참가자가 발견 했을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</source>
          <target state="translated">스타일, 제네릭 무효화, 트리거, 속성 값 상속 및 설정을 로컬 값이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally you should avoid specifying more than one &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for any given dependency property (overriding or adding with new metadata for a dependency property that already had a &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).</source>
          <target state="translated">개 이상 지정 하지 않아야 일반적으로 &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;지정 된 종속성 속성에 대 한 (재정의 하거나 이미 존재 하는 종속성 속성에 대 한 새 메타 데이터와 추가 한 &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one of the callbacks will be able to act.</source>
          <target state="translated">콜백 중 하나에만 영향을 줄 수 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the &lt;xref:System.Windows.DependencyObject&gt; caller.</source>
          <target state="translated">실행 되며 콜백에 비교할 상속에 가장 많이 파생 된 클래스에 적용 된 언어가 됩니다는 &lt;xref:System.Windows.DependencyObject&gt;호출자.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</source>
          <target state="translated">소유자 계층에서 높은 존재 하 던 종속성 속성에 대 한 메타 데이터에 할당 된 대로 다른 콜백에 메타 데이터를 재정의할 때 대체 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>