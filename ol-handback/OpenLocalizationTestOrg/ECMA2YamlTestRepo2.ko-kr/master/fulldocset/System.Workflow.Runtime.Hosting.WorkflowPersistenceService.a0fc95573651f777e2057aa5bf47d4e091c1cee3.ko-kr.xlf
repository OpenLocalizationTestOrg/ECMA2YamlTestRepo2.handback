<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5df3b73944a7d160edbd44b35970e6bd7f93cf90</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Workflow.Runtime.Hosting.WorkflowPersistenceService.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">029237110e90b09222e7624b0b0d145bb806e6b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f77726f53fd8bc45fbec79dccae467e3296eea89</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The abstract base class from which all persistence services are derived.</source>
          <target state="translated">모든 지 속성 서비스가 파생 되는 추상 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>       When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">[!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]</ph>워크플로가 실행 되는 동안 특정 조건이 발생할 때 워크플로 런타임 엔진이 워크플로 인스턴스에 대 한 상태 정보를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls &lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName&gt; on the workflow instance, or when a workflow instance is terminated or finishes.</source>
          <target state="translated">지 속성 발생할 수 있습니다, 예를 들어 원자성 트랜잭션이 완료 될 때 호스트를 호출할 때 워크플로 인스턴스가 유휴 상태일 때 &lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName&gt;워크플로 인스턴스가 종료 되거나 완료 될 때 또는 워크플로 인스턴스에서.&lt;/xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance.</source>
          <target state="translated">워크플로 런타임 엔진 의미 체계 지 속성이 발생 해야으로 인해, 워크플로 런타임 엔진이 워크플로 인스턴스에 대 한 상태 정보를 저장 하는 지 속성 서비스에서 제공 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information.</source>
          <target state="translated">마찬가지로, 워크플로 런타임 엔진을 이전에 지속형된 워크플로 인스턴스를 복원 해야 하는 경우이 상태 정보를 로드 하기 위해 지 속성 서비스에서 제공한 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine handles all the semantics regarding when to perform persistence.</source>
          <target state="translated">워크플로 런타임 엔진은 지 속성 수행 시기와 관련 된 모든 의미 체계를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The persistence service handles actually saving and loading the workflow state information to or from a data store.</source>
          <target state="translated">지 속성 서비스는 실제로 저장 하 고 데이터 저장소에서 워크플로 상태 정보를 로드를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a persistence service by deriving a class from the WorkflowPersistenceService class.</source>
          <target state="translated">WorkflowPersistenceService 클래스에서 클래스를 파생 시켜 유지 서비스를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add your persistence service to the workflow runtime engine by calling &lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt; or by making an appropriate entry in the application configuration file.</source>
          <target state="translated">지 속성 서비스를 호출 하 여 워크플로 런타임 엔진에 추가할 수 있습니다 &lt;xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;또는 응용 프로그램 구성 파일에 적절 한 항목을 만들어.&lt;/xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt; should only contain one persistence service.</source>
          <target state="translated">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;하나의 지 속성 서비스만 포함 되어야 합니다.&lt;/xref:System.Workflow.Runtime.WorkflowRuntime&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Workflow Foundation provides the &lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt; class, an out-of-box persistence service, which you can use as is or extend.</source>
          <target state="translated">Windows Workflow Foundation 제공는 &lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;또는 확장을 사용할 수 있는 기본적으로 지 속성 서비스 클래스.&lt;/xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store.</source>
          <target state="translated">워크플로 런타임 엔진에 있는 서로 다른 프로세스에서 실행 되는 지 속성 서비스에 액세스 하 게 단일 데이터 저장소 환경에서 사용할 워크플로 상태 정보를 잠그기 위한 의미 체계가 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The WorkflowPersistenceService class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt; that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt; to unlock previously locked workflow state information.</source>
          <target state="translated">매개 변수를 제공 하 여 워크플로 런타임 엔진의이 기능을 지원 하기 위해 기능을 제공 하는 WorkflowPersistenceService 클래스 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;여부는 워크플로 인스턴스 상태 정보 잠금을 해제할 데이터 저장소에서 한 메서드를 제공 하 여 지정 하는 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt;이전에 잠금 해제를 위해 잠긴 워크플로 상태 정보.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt; &lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a persistence service that implements locking, a call to &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt; should lock the state information for a workflow instance.</source>
          <target state="translated">잠금에 대 한 호출을 구현 하는 유지 서비스에서 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;워크플로 인스턴스에 대 한 상태 정보를 잠가야 합니다.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your persistence service should throw a &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt; if it fails to save state information to its data store or load state information from its data store.</source>
          <target state="translated">지 속성 서비스를 throw 해야는 &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;해당 데이터 저장소에 상태 정보를 저장 하거나 데이터 저장소에서 상태 정보를 로드할 수 없는 경우.&lt;/xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine expects this behavior.</source>
          <target state="translated">워크플로 런타임 엔진에는이 문제는 필요합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>A batching mechanism is provided for services that use a durable store to save workflow state information.</source>
          <target state="translated">영 속 저장소를 사용 하 여 워크플로 상태 정보를 저장 하는 서비스에 대 한 일괄 처리 메커니즘이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine.</source>
          <target state="translated">이러한 경우 지 속성 서비스에서 사용 되는 영 속 저장소와 워크플로 런타임 엔진의 내부 상태 간에 일관성을 유지 하는 것이 유용 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add functionality defined by the &lt;xref:System.Workflow.Runtime.IPendingWork&gt; interface to your service, and then participate in workflow transaction batching provided by the &lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt; by adding changes to your data store as work items to the &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;서비스에 인터페이스를 워크플로 트랜잭션 일괄 처리에서 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt;변경 내용을 작업 항목 &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;.&lt;/xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt; 으로 데이터 저장소에 추가 하 여&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService&gt; 제공에 참여 한 다음&lt;/xref:System.Workflow.Runtime.IPendingWork&gt; 에 정의 된 기능을 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The durable store itself should implement the &lt;xref:System.Transactions.IEnlistmentNotification&gt; interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback.</source>
          <target state="translated">영 속 저장소 자체를 구현 해야는 &lt;xref:System.Transactions.IEnlistmentNotification&gt;인터페이스를 하므로 트랜잭션 롤백 시에도 워크플로 정보가 잘못 유지 되지 않습니다.&lt;/xref:System.Transactions.IEnlistmentNotification&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A&gt; or &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;.</source>
          <target state="translated">자세한 내용은 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A&gt;또는 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt; &lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A&gt; 를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, initializes a new instance of the <bpt id="p1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowPersistenceService"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우의 새 인스턴스를 초기화 합니다.는 <bpt id="p1">&lt;xref href="System.Workflow.Runtime.Hosting.WorkflowPersistenceService"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieves the serialized default form of the <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Serialize 된 기본 형식으로 검색 된 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose serialized form is requested.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> serialize 된 형식을 요청 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The serialized default form of the <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Serialize 된 기본 형식으로는 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Indicates whether the given activity is blocked.</source>
          <target state="translated">지정 된 활동이 차단 되는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The root activity of the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 루트 활동입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the given activity is blocked; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>지정 된 활동이 차단 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves the termination or suspend information of the given activity.</source>
          <target state="translated">종료를 검색 하거나 지정된 된 활동의 정보를 일시 중단 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The root activity of the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 루트 활동입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that contains the termination or suspend information.</source>
          <target state="translated">A &lt;xref:System.String&gt;포함 종료 또는 일시 중단 정보입니다.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Retrieves the status of the workflow.</source>
          <target state="translated">워크플로의 상태를 검색합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The root activity of the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 루트 활동입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Workflow.Runtime.WorkflowStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration value that denotes the status of the workflow.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Workflow.Runtime.WorkflowStatus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 워크플로의 상태를 나타내는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, loads the specified completed scope back into memory.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 지정한 완료 된 범위를 다시 메모리에 로드 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine uses LoadCompletedContextActivity to implement compensation.</source>
          <target state="translated">워크플로 런타임 엔진은 보정을 구현 하려면 LoadCompletedContextActivity를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must restore an identical copy of the completed scope.</source>
          <target state="translated">완료 된 범위의 동일한 복사본을 복원 해야 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, you must restore a valid &lt;xref:System.IO.Stream&gt; from your representation of the completed scope in the data store.</source>
          <target state="translated">이 작업을 수행 하려면 유효한 복원 해야 &lt;xref:System.IO.Stream&gt;데이터에서 완료 된 범위의 표현에서 저장 합니다.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then you must pass this &lt;xref:System.IO.Stream&gt; to one of the overloaded methods of &lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt; to perform deserialization of the scope.</source>
          <target state="translated">다음이 전달 해야 &lt;xref:System.IO.Stream&gt;의 오버 로드 된 메서드 중 하나에 &lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt;범위의 deserialization을 수행 합니다.&lt;/xref:System.Workflow.ComponentModel.Activity.Load%2A&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your persistence service cannot load the completed scope from its data store, it should throw a &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt; with an appropriate message.</source>
          <target state="translated">throw 해야 하는 경우 지 속성 서비스가 데이터 저장소에서 완료 된 범위를 로드할 수 없습니다는 &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;적절 한 메시지와 함께.&lt;/xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Guid&gt; of the completed scope.</source>
          <target state="translated">&lt;xref:System.Guid&gt;완료 된 범위의.&lt;/xref:System.Guid&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the activity that encloses the completed scope.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 완료 된 범위를 포함 하는 활동을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the completed scope.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 완료 된 범위를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, loads the specified state of the workflow instance back into memory.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 지정 된 워크플로 인스턴스 상태가 다시 메모리에 로드 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must restore an identical copy of the activity.</source>
          <target state="translated">활동의 동일한 복사본을 복원 해야 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, you must restore a valid &lt;xref:System.IO.Stream&gt; from your representation of the workflow instance in the data store; then you must pass this &lt;xref:System.IO.Stream&gt; to one of the overloaded &lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt; methods to deserialize the workflow instance state.</source>
          <target state="translated">이 작업을 수행 하려면 유효한 복원 해야 &lt;xref:System.IO.Stream&gt;데이터 저장소에서 워크플로 인스턴스 표현에서 전달 해야 합니다.이 &lt;xref:System.IO.Stream&gt;오버 로드 된 중 하나로 &lt;xref:System.Workflow.ComponentModel.Activity.Load%2A&gt;워크플로 deserialize 하는 메서드 인스턴스 상태.&lt;/xref:System.Workflow.ComponentModel.Activity.Load%2A&gt; &lt;/xref:System.IO.Stream&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your persistence service cannot load the workflow instance state from its data store, it should throw a &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt; with an appropriate message.</source>
          <target state="translated">throw 해야 하는 경우 지 속성 서비스가 데이터 저장소에서 워크플로 인스턴스 상태를 로드할 수 없습니다는 &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;적절 한 메시지와 함께.&lt;/xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store.</source>
          <target state="translated">워크플로 런타임 엔진은 데이터 저장소에 저장 되는 워크플로 인스턴스 상태에 대 한 액세스를 제한 하는 잠금 의미 체계를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be accessed by persistence services that run in multiple processes.</source>
          <target state="translated">여러 프로세스에서 실행 되는 지 속성 서비스에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time.</source>
          <target state="translated">잠금 의미 체계는 지 속성 서비스에서 동일한 워크플로 인스턴스를 동시에 메모리에 로드 두 개의 서로 다른 프로세스에서 실행 하는 것을 방지 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality.</source>
          <target state="translated">지 속성 서비스 디자인 된 환경 유형에 따라를 지원 하기 위해 선택할 수 있습니다이 기능을 지 원하는 여부.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a &lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;.</source>
          <target state="translated">런타임 잠금 의미 체계를 지원 하도록 선택 하 고이 워크플로 인스턴스 상태에 이전에 다른 프로세스에 의해 잠긴 &lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;.&lt;/xref:System.Workflow.Runtime.WorkflowOwnershipException&gt; 를 throw 해야</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, you should lock access to the workflow instance state in your data store.</source>
          <target state="translated">그렇지 않으면 데이터 저장소의 워크플로 인스턴스 상태에 대 한 액세스를 잠가야 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow instance state can be unlocked by a call to &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt; or a call to &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt; with the unlock parameter set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">워크플로 인스턴스 상태를 호출 하 여 잠금을 해제할 수 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt;호출이 나 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;로 설정 unlock 매개 변수와 함께 <ph id="ph1">`true`</ph>.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt; &lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Guid&gt; of the root activity of the workflow instance.</source>
          <target state="translated">&lt;xref:System.Guid&gt;워크플로 인스턴스의 루트 활동의.&lt;/xref:System.Guid&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the root activity of the workflow instance.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 워크플로 인스턴스의 루트 활동을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Restores the <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from its serialized form.</source>
          <target state="translated">복원 된 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> serialize 된 형식에서 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The serialized form of <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Serialize 된 형식을 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The outer <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, containing the <bpt id="p2">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to restore.</source>
          <target state="translated">외부 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 포함 하는 <bpt id="p2">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 복원 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The restored <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">복원 된 <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, saves the specified completed scope to a data store.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 지정한 완료 된 범위를 데이터 저장소에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine saves the state of completed scope activities in order to implement compensation.</source>
          <target state="translated">워크플로 런타임 엔진은 보정을 구현 하기 위해 완료 된 범위 활동의 상태를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call one of the overloaded &lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt; methods to serialize <ph id="ph1">`activity`</ph> into a &lt;xref:System.IO.Stream&gt;; you may then choose to additionally process the &lt;xref:System.IO.Stream&gt; before writing it to your data store.</source>
          <target state="translated">오버 로드 된 중 하나를 호출 해야 &lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;serialize 하는 메서드를 <ph id="ph1">`activity`</ph> 에 &lt;xref:System.IO.Stream&gt;;을 추가로 처리 하도록 선택할 수 있습니다는 &lt;xref:System.IO.Stream&gt;데이터 저장소에 쓰기 전에.&lt;/xref:System.IO.Stream&gt; &lt;/xref:System.IO.Stream&gt; &lt;/xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when the workflow runtime engine calls &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;, you must restore an identical copy of the activity.</source>
          <target state="translated">그러나 워크플로 런타임 엔진은 호출 하는 경우 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;, 활동의 동일한 복사본을 복원 해야 합니다.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated.</source>
          <target state="translated">완료 된 범위를 워크플로 인스턴스가 완료 되거나은 때 데이터 저장소에 불필요 한와 범위를 표시 하려면 바깥쪽 워크플로 인스턴스와 연결할 수 있어야 종료 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should also save the &lt;xref:System.Guid&gt; of the workflow instance that is associated with the completed scope; this can be obtained from the &lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt; property of the &lt;xref:System.Workflow.Runtime.WorkflowInstance&gt; associated with <ph id="ph1">`activity`</ph>.</source>
          <target state="translated">도 저장 해야 따라서는 &lt;xref:System.Guid&gt;; 완료 된 범위와 연결 된 워크플로 인스턴스의 얻을 수 있습니다는 &lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;의 속성은 &lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;연관 <ph id="ph1">`activity`</ph>.&lt;/xref:System.Workflow.Runtime.WorkflowInstance&gt; &lt;/xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt; &lt;/xref:System.Guid&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt; takes the &lt;xref:System.Guid&gt; of the completed scope as a parameter.</source>
          <target state="translated">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;사용 된 &lt;xref:System.Guid&gt;매개 변수로 완료 된 범위의.&lt;/xref:System.Guid&gt;&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must also save the &lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A&gt; property associated with <ph id="ph1">`activity`</ph>.</source>
          <target state="translated">따라서 저장 해야는 &lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A&gt;와 연결 된 속성 <ph id="ph1">`activity`</ph>.&lt;/xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be referenced through the &lt;xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty&gt; field of <ph id="ph1">`activity`</ph>.</source>
          <target state="translated">이 속성을 통해 참조할 수는 &lt;xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty&gt;필드 <ph id="ph1">`activity`</ph>.&lt;/xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</source>
          <target state="translated">영 속 저장소를 사용 하는 지 속성 서비스를 구현 하는 경우 워크플로 런타임 엔진의 내부 상태와 일관성을 유지 하려면 워크플로 트랜잭션 영 속 저장소에 대 한 실제 쓰기를 워크플로 커밋 점까지 일괄 처리에 참여 해야 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>To participate in batching, add a work item to the &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt; property that represents the pending changes to the database, and implement the &lt;xref:System.Workflow.Runtime.IPendingWork&gt; interface in your persistence service.</source>
          <target state="translated">일괄 처리에 참여 하는 작업 항목 추가 &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;는 데이터베이스에 보류 중인 변경 내용을 나타내는 하 고 구현 하는 속성의 &lt;xref:System.Workflow.Runtime.IPendingWork&gt;지 속성 서비스에 대 한 인터페이스입니다.&lt;/xref:System.Workflow.Runtime.IPendingWork&gt; &lt;/xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cannot save the completed scope to your data store, you should throw a &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt; with an appropriate error message.</source>
          <target state="translated">완료 된 범위 데이터 저장소에 저장할 수 없으면을 throw 해야는 &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;적절 한 오류 메시지와 함께.&lt;/xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the completed scope.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 완료 된 범위를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, saves the workflow instance state to a data store.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 데이터 저장소에 워크플로 인스턴스 상태를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call one of the overloaded &lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt; methods to serialize <ph id="ph1">`rootActivity`</ph> into a &lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">오버 로드 된 중 하나를 호출 해야 &lt;xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;serialize 하는 메서드를 <ph id="ph1">`rootActivity`</ph> &lt;xref:System.IO.Stream&gt;.&lt;/xref:System.IO.Stream&gt; 에&lt;/xref:System.Workflow.ComponentModel.Activity.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then choose to additionally process the &lt;xref:System.IO.Stream&gt; before writing it to your data store.</source>
          <target state="translated">다음을 추가로 처리 하도록 선택할 수 있습니다는 &lt;xref:System.IO.Stream&gt;데이터 저장소에 쓰기 전에.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when the workflow runtime engine calls &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;, you must restore an identical copy of the root activity.</source>
          <target state="translated">그러나 워크플로 런타임 엔진은 호출 하는 경우 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;을 루트 활동의 동일한 복사본을 복원 해야 합니다.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cannot save the workflow instance state to your data store, you should throw a &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt; with an appropriate error message.</source>
          <target state="translated">throw 해야 데이터 저장소에 워크플로 인스턴스 상태를 저장할 수 없으면는 &lt;xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;적절 한 오류 메시지와 함께.&lt;/xref:System.Workflow.Runtime.Hosting.PersistenceException&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store.</source>
          <target state="translated">워크플로 런타임 엔진은 데이터 저장소에 저장 되는 워크플로 인스턴스 상태에 대 한 액세스를 제한 하는 잠금 의미 체계를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be accessed by the persistence services running in multiple hosts and pointing to the same data store.</source>
          <target state="translated">여러 호스트에서 실행 되 고 동일한 데이터 저장소를 가리키는 지 속성 서비스로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time.</source>
          <target state="translated">잠금 의미 체계는 동일한 워크플로 인스턴스를 동시에 메모리에 로드에서 두 개의 다른 워크플로 런타임에서 실행 되는 지 속성 서비스를 방지 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality.</source>
          <target state="translated">지 속성 서비스가 지원 하도록 설계 된 환경 유형에 따라이 기능을 지원 하기 위해 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a &lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;.</source>
          <target state="translated">런타임 잠금 의미 체계를 지원 하도록 선택 하면 다음 지 속성 서비스에서 다른 지 속성 서비스에서 이전에 잠긴 워크플로 인스턴스 상태를 저장 하려고 하는 경우 throw 해야 &lt;xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;.&lt;/xref:System.Workflow.Runtime.WorkflowOwnershipException&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`unlock`</ph> is <ph id="ph2">`true`</ph>, you should unlock access to the workflow instance state after you save it.</source>
          <target state="translated">경우 <ph id="ph1">`unlock`</ph> 은 <ph id="ph2">`true`</ph>을 저장 한 후에 워크플로 인스턴스 상태에 대 한 액세스를 잠금 해제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt; takes the &lt;xref:System.Guid&gt; of the workflow instance as a parameter.</source>
          <target state="translated">&lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;사용 된 &lt;xref:System.Guid&gt;는 워크플로 인스턴스를 매개 변수로.&lt;/xref:System.Guid&gt;&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you should save this &lt;xref:System.Guid&gt;.</source>
          <target state="translated">따라서이 &lt;xref:System.Guid&gt;.&lt;/xref:System.Guid&gt; 저장할지</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this &lt;xref:System.Guid&gt; to associate the workflow instance with the saved states of its completed scopes.</source>
          <target state="translated">또한 사용할 수 있습니다 &lt;xref:System.Guid&gt;워크플로 인스턴스가 완료 된 범위의 저장 된 상태와 연결할.&lt;/xref:System.Guid&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.</source>
          <target state="translated">이렇게 해야 때 불필요 한 것으로 이러한 완료 된 범위를 표시 하는 수 있어야 하기 때문에 워크플로 인스턴스가 완료 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workflow runtime engine calls SaveWorkflowInstanceState a final time when the workflow instance is completed or terminated.</source>
          <target state="translated">워크플로 런타임 엔진은 워크플로 인스턴스가 완료 되거나 종료를 마지막으로 SaveWorkflowInstanceState를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A&gt; is equal to &lt;xref:System.Workflow.Runtime.WorkflowStatus&gt; or &lt;xref:System.Workflow.Runtime.WorkflowStatus&gt;, you can safely delete the workflow instance and all its associated completed scopes from your data store.</source>
          <target state="translated">따라서 경우 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A&gt;같으면 &lt;xref:System.Workflow.Runtime.WorkflowStatus&gt;또는 &lt;xref:System.Workflow.Runtime.WorkflowStatus&gt;, 데이터 저장소에서 워크플로 인스턴스와 연결 된 모든 완료 된 범위를 안전 하 게 삭제할 수 있습니다.&lt;/xref:System.Workflow.Runtime.WorkflowStatus&gt; &lt;/xref:System.Workflow.Runtime.WorkflowStatus&gt; &lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can subscribe to the &lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted&gt; or &lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt; events to determine when it is safe to delete records associated with the workflow instance.</source>
          <target state="translated">또는 구독할 수 있습니다는 &lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted&gt;또는 &lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt;것이 워크플로 인스턴스와 연결 된 레코드를 삭제 하는 안전한 경우를 확인할 수 있습니다.&lt;/xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt; &lt;/xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you actually delete the records from your data store depends on your implementation.</source>
          <target state="translated">실제로 있는지 여부를 데이터 저장소에서 레코드를 삭제 하는 작업은 구현에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</source>
          <target state="translated">영 속 저장소를 사용 하는 지 속성 서비스를 구현 하는 경우 다음 워크플로 런타임 엔진의 내부 상태와 일관성을 유지 하려면에 참여 하 해야 워크플로 트랜잭션 일괄 처리 영 속 저장소에 대 한 실제 쓰기를 워크플로 커밋 점까지 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>To participate in batching, add a work item that represents the pending changes to your durable store to the &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt; property, and implement the &lt;xref:System.Workflow.Runtime.IPendingWork&gt; interface in your persistence service.</source>
          <target state="translated">일괄 처리에 참여 하려면 영 속 저장소에 보류 중인 변경 내용을 나타내는 작업 항목 추가 &lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;속성과 구현은 &lt;xref:System.Workflow.Runtime.IPendingWork&gt;지 속성 서비스에 대 한 인터페이스입니다.&lt;/xref:System.Workflow.Runtime.IPendingWork&gt; &lt;/xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The root activity of the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 루트 활동입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the workflow instance should not be locked; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the workflow instance should be locked.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>워크플로 인스턴스를 잠그지 않아야; 경우 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 워크플로 인스턴스를 잠가야 하는 경우.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Determines whether a workflow should be unloaded when idle.</source>
          <target state="translated">유휴 상태일 때 워크플로 로드 하지 않을 해야 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the completed scope.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Workflow.ComponentModel.Activity"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 완료 된 범위를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the workflow runtime engine unloads the specified workflow when it becomes idle.</source>
          <target state="translated">경우 <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>, 유휴 상태가 될 때 워크플로 런타임 엔진은 지정된 된 워크플로 언로드합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, unlocks the workflow instance state.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 워크플로 인스턴스 상태를 잠금 해제 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is abstract, so it does not contain a default implementation on locking and unlocking.</source>
          <target state="translated">이 메서드는 추상 잠금 및 잠금 해제에 기본 구현이 포함 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt; method based on the value of the unlock parameter.</source>
          <target state="translated">사용자 지정 지 속성 서비스를 구현 하는 동안 잠금 체계를 구현 하려면 할 경우이 메서드를 재정의 하 고에 잠금-잠금 해제 메커니즘을 제공 하는 &lt;xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;unlock 매개 변수의 값을 기반으로 하는 메서드.&lt;/xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The root activity of the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 루트 활동입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>