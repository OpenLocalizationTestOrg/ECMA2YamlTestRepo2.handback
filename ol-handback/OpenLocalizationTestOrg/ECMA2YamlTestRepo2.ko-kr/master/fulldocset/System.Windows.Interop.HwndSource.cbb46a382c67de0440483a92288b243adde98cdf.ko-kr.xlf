<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a81e40b9009905d8831137a0249b3348431659b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.HwndSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2ded6a8d36ea4aecdb81cf828951d8932e37b90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9705cf6641d5a3355f2b1ae3c51ceba957caae14</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Presents <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> content in a <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> window.</source>
          <target state="translated">표시 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 의 콘텐츠는 <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> 창.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  Many members of this class are unavailable in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; 인터넷 보안 영역에서이 클래스의 많은 멤버는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An HwndSource implements a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window that can contain <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">HwndSource 구현 하는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 포함 될 수 있는 창 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content in the window is arranged, measured, and rendered; and is interactive to input.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠 창에서 측정 및 렌더링 하 고는 입력에 대화형 정렬 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the HwndSource is specifically designed to interoperate with <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>, this class exposes several low-level <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> features.</source>
          <target state="translated">HwndSource와 상호 운용 하도록 설계 된 때문에 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>,이 클래스는 여러 가지 하위 수준의 노출 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 기능입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this class to do the following:      -   Specify window styles, window class styles, and extended window styles.</source>
          <target state="translated">이 클래스를 사용 하 여 다음 작업을 수행 합니다.-창 스타일, 창 클래스 스타일을 지정 하 고 확장 된 창 스타일입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Hook the window procedure.</source>
          <target state="translated">-창 프로시저를 후크입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Provide access to the window handle (HWND).</source>
          <target state="translated">-창 핸들 (HWND)에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Destroy the window.</source>
          <target state="translated">-창을 소멸 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HwndSource class is designed for general interoperability and is not designed as a managed HWND wrapper.</source>
          <target state="translated">HwndSource 클래스 일반 상호 운용성을 위해 설계와 관리 되는 HWND 래퍼로 설계 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it does not provide managed methods for manipulating the window or properties for inspecting its state.</source>
          <target state="translated">일반적으로 창 또는 상태를 검사 하는 것에 대 한 속성을 조작 하기 위한 관리 되는 메서드를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the HwndSource class provides access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window handle (HWND) through the &lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt; property, which can be passed by means of PInvoke techniques to <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in order to manipulate the window.</source>
          <target state="translated">HwndSource 클래스에 대 한 액세스를 제공 하는 대신,는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 창 핸들 (HWND)을 통해는 &lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;PInvoke 기술을 사용 하 여 전달 될 수 있는 속성 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> 창을 조작 하기 위해.&lt;/xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Construction<ept id="p1">**</ept>       Many aspects of the HwndSource can only be specified at construction time.</source>
          <target state="translated"><bpt id="p1">**</bpt>생성<ept id="p1">**</ept> 는 HwndSource의 많은 부분이 생성 시 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an HwndSource, first create an &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure and populate it with the desired parameters.</source>
          <target state="translated">HwndSource를 만들려면 먼저는 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;구조체 지정 하 고 원하는 매개 변수를 채웁니다.&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>These parameters include the following:      -   The class, window, and extended window styles.</source>
          <target state="translated">이러한 매개 변수는 다음과 같습니다.-클래스, 창 및 확장된 창 스타일입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use PInvoke to change the styles after the window is created.</source>
          <target state="translated">창을 만든 후 스타일을 변경 하려면 PInvoke를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all styles can be changed after the window is created.</source>
          <target state="translated">창을 만든 후에 일부 스타일을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> documentation before changing window styles.</source>
          <target state="translated">참조는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 창 스타일을 변경 하기 전에 문서.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The initial position of the window.</source>
          <target state="translated">창-초기 위치입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The initial size of the window, which includes whether the size is specified or should be determined from the determined size of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">-는 지정 된 크기나의 결정된 된 크기에서 결정 해야 하는지 여부를 포함 하는 창의의 초기 크기는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The parent window.</source>
          <target state="translated">-부모 창입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.Windows.Interop.HwndSourceHook&gt; to include in the window procedure chain.</source>
          <target state="translated">- &lt;xref:System.Windows.Interop.HwndSourceHook&gt;창 프로시저 체인에 포함 하려면.&lt;/xref:System.Windows.Interop.HwndSourceHook&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a hook at construction time, it receives all messages for the window.</source>
          <target state="translated">생성 시 후크를 지정 하는 경우 모든 창의 메시지를 받습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; to add a hook after the window is created.</source>
          <target state="translated">사용할 수 있습니다 &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;창을 만든 후 후크를를 추가 합니다.&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The transparency settings.</source>
          <target state="translated">-투명도 설정입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A top-level window can be configured to blend with the other windows on the desktop according to the per-pixel transparency of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">픽셀 별 투명도 따라 바탕 화면에서 다른 창이와 혼합 하는 최상위 창을 구성할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this, set the &lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt; property in the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">이 작업이 가능 하도록 설정 된 &lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;속성에는 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;를 <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can only be specified at construction time, and only through the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor signature, and it imposes several limitations.</source>
          <target state="translated">이 속성을 통해서만 생성 시에 지정할 수는 &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;생성자 시그니처 하며 여러 가지 제한을 적용 합니다.&lt;/xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you populate the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure, pass it to the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor for the HwndSource.</source>
          <target state="translated">채운 후는 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;구조을에 전달 된 &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;는 HwndSource에 대 한 생성자.&lt;/xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Object Lifetime<ept id="p1">**</ept>       An HwndSource is a regular <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, and its lifetime is managed by the garbage collector.</source>
          <target state="translated"><bpt id="p1">**</bpt>개체 수명<ept id="p1">**</ept> An HwndSource는 일반 <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> 가비지 수집기에 의해 관리 되는 개체와 수명이 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the HwndSource represents an unmanaged resource, HwndSource implements &lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">HwndSource &lt;xref:System.IDisposable&gt;.&lt;/xref:System.IDisposable&gt; 구현 된 HwndSource는 관리 되지 않는 리소스를 나타내므로</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronously calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; immediately destroys the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window if called from the owner thread.</source>
          <target state="translated">동기적으로 호출 &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;즉시 소멸는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 창 소유자 스레드에서 호출 하는 경우.&lt;/xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If called from another thread, the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window is destroyed asynchronously.</source>
          <target state="translated">다른 스레드에서 호출 하는 경우는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> 창이 비동기적으로 소멸 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; explicitly from the interoperating code might be necessary for certain interoperation scenarios.</source>
          <target state="translated">호출 &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;명시적으로 운용 코드에서에 필요할 수 있습니다 특정 상호 운용 시나리오.&lt;/xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Window Procedures<ept id="p1">**</ept>       The HwndSource class implements its own window procedure.</source>
          <target state="translated"><bpt id="p1">**</bpt>창 프로시저<ept id="p1">**</ept> The HwndSource 클래스는 자체 창 프로시저를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This window procedure is used to process important window messages, such as those related to layout, rendering, and input.</source>
          <target state="translated">이 창 프로시저 등과 레이아웃, 렌더링, 관련 된 중요 한 창 메시지를 처리 하는 데 사용 하며 입력 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can also hook the window procedure for your own use.</source>
          <target state="translated">그러나 사용자는 용도 대 한 창 프로시저도 후크 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify your own hook during construction by setting the &lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt; property, or you can also use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; and &lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt; to add and remove hooks after the window is created.</source>
          <target state="translated">설정 하 여 사용자 고유의 후크를 생성 하는 동안 지정할 수 있습니다는 &lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt;속성 또는 있습니다 사용할 수도 &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;및 &lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;추가 하 고 창을 만든 후 후크를 제거 합니다.&lt;/xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt; &lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hooks are called by last-in first-out order, which enables your hooks to execute before the built-in processing.</source>
          <target state="translated">후크를 기본 제공 처리 되기 전에 실행할 마지막 순서는 후크를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual hooks are held by a weak reference.</source>
          <target state="translated">실제 후크 약한 참조로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, make sure that you manage the lifetime of your hook delegate.</source>
          <target state="translated">따라서, 후크 대리자의 수명을 관리 하 고 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about HwndSource and other interoperation classes, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">HwndSource 및 기타 상호 운용 클래스에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>WPF 및 Win32 상호 운용<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice how the constructors for HwndSource take parameters that resemble the parameters for <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> functions such as <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>.</source>
          <target state="translated">HwndSource에 대 한 생성자의 매개 변수를 유사한 매개 변수를 사용 하는 방법을 확인 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> 와 같은 함수가 <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transformations should not be applied to the &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt; of an HwndSource.</source>
          <target state="translated">크기 조정 변환을에 적용 해야는 &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;는 HwndSource의.&lt;/xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;.&lt;/xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt; 에 대 한 설명을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by using a structure that contains the initial settings.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 초기 설정을 포함 하는 구조를 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; 인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor signature might be more convenient in certain situations, because the default structure contains some appropriate initial default values.</source>
          <target state="translated">이 생성자 시그니처 기본 구조는 몇 가지 초기 기본 적절 한 값을 포함 하기 때문에 특정 한 상황에서 더 편리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you use this signature, do not use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor to construct the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure for the <ph id="ph2">`parameters`</ph> value.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;이 서명을 사용 하는 경우 기본값을 사용 하지 마십시오 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;생성자를 생성 하는 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;에 대 한 구조는 <ph id="ph2">`parameters`</ph> 값.&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor that enables you to specify an initial window name.</source>
          <target state="translated">사용 해야 합니다는 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;생성자를 초기 창 이름을 지정할 수 있습니다.&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor and create an &lt;xref:System.Windows.Interop.HwndSource&gt; with it, that &lt;xref:System.Windows.Interop.HwndSource&gt; does not display because an initial window name is a construction requirement for the represented HWND.</source>
          <target state="translated">기본값을 사용 하는 경우 &lt;xref:System.Windows.Interop.HwndSourceParameters&gt;생성자 만듭니다는 &lt;xref:System.Windows.Interop.HwndSource&gt;,는 &lt;xref:System.Windows.Interop.HwndSource&gt;이므로 초기 창 이름이 표현된 된 HWND 생성 하는 표시 되지 않습니다.&lt;/xref:System.Windows.Interop.HwndSource&gt; &lt;/xref:System.Windows.Interop.HwndSource&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A structure that contains the parameters that are required to create the window.</source>
          <target state="translated">창을 만들 하는 데 필요한 매개 변수를 포함 하는 구조입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified class style, style, extended style, x-y position, name, and parent window.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 된 지정 된 클래스 스타일을 스타일을 스타일, x, y 위치, 이름 및 부모 창을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; 인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>