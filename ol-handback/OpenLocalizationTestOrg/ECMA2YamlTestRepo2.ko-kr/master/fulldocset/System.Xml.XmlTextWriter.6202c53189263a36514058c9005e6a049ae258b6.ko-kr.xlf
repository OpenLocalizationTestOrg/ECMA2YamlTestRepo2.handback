<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac4162547698a48fe39e08ff26df179b6f737c0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.XmlTextWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42aacef2fea067c0ef9bb42b09693b780c510bc9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a34e831f49b89fd11c3e958e52e11db9d61ef1c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">스트림 또는 W3C Extensible Markup Language (XML) 1.0 및 XML 구성에서 네임 스페이스에 맞는 XML 데이터를 포함 하는 파일을 생성 하는 빠르고 캐시 되지 않은, 앞 으로만 이동 가능한 방법을 제공 하는 작성기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> class instead.</source>
          <target state="translated">사용 하는 권장.NET Framework 2.0 부터는 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> 클래스를 대신 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements the &lt;xref:System.Xml.XmlWriter&gt; class.</source>
          <target state="translated">이 클래스는 &lt;xref:System.Xml.XmlWriter&gt;클래스&lt;/xref:System.Xml.XmlWriter&gt; 구현</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Starting with the .NET Framework 2.0, we recommend that you create &lt;xref:System.Xml.XmlWriter&gt; instances by using the &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; method and the &lt;xref:System.Xml.XmlWriterSettings&gt; class to take advantage of new functionality.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 만드는 권장.NET Framework 2.0 부터는 &lt;xref:System.Xml.XmlWriter&gt;를 사용 하 여 인스턴스는 &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;메서드 및 &lt;xref:System.Xml.XmlWriterSettings&gt;새로운 기능을 활용 하는 클래스입니다.&lt;/xref:System.Xml.XmlWriterSettings&gt; &lt;/xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; &lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>에 현재 요소 스택에서 정의 된 모든 네임 스페이스에 해당 하는 네임 스페이스 스택을 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`XmlTextWriter`</ph> 수동으로 네임 스페이스를 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   w.WriteStartElement("root");   w.WriteAttributeString("xmlns", "x", null, "urn:1");    w.WriteStartElement("item","urn:1");    w.WriteEndElement();    w.WriteStartElement("item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   ```</ph>       The above C# code produces the following output.</source>
          <target state="translated"><ph id="ph1">```   w.WriteStartElement("root");   w.WriteAttributeString("xmlns", "x", null, "urn:1");    w.WriteStartElement("item","urn:1");    w.WriteEndElement();    w.WriteStartElement("item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   ```</ph>위의 C# 코드는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>두 명의 자식 요소에서 중복 되지 않도록 하려면 루트 요소에 네임 스페이스 선언을 수준을 올립니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">자식 요소는 네임 스페이스 선언에서 접두사를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   &lt;root xmlns:x="urn:1"&gt;    &lt;x:item/&gt;    &lt;x:item/&gt;   &lt;/x:root&gt;   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">```   &lt;root xmlns:x="urn:1"&gt;    &lt;x:item/&gt;    &lt;x:item/&gt;   &lt;/x:root&gt;   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph>에서는 현재 네임 스페이스 선언을 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">다음 예제에서는 네임 스페이스 URI "123"을 "abc" XML 요소를 생성 하기 위해로 재정의 <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   w.WriteStartElement("x","node","123");   w.WriteAttributeString("xmlns","x",null,"abc");   ```</ph>       By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated"><ph id="ph1">```   w.WriteStartElement("x","node","123");   w.WriteAttributeString("xmlns","x",null,"abc");   ```</ph>접두사를 인수로 사용 하는 쓰기 메서드를 사용 하 여 사용할 접두사를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">다음 예제에서는 두 개의 서로 다른 접두사는 동일한 네임 스페이스는 XML 텍스트를 생성 하는 URI에 매핑됩니다 <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.WriteStartElement("x","root","urn:1");    w.WriteStartElement("y","item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>       If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph2">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated"><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.WriteStartElement("x","root","urn:1");    w.WriteStartElement("y","item","urn:1");    w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>동일한 네임 스페이스 URI에 다른 접두사를 매핑하는 여러 네임 스페이스 선언이 있을 경우 <ph id="ph2">`XmlTextWriter`</ph> 네임 스페이스 선언의 스택으로 뒤로 검색 하 고 가장 가까운 스택을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.Formatting = Formatting.Indented;   w.WriteStartElement("x","root","urn:1");   w.WriteStartElement("y","item","urn:1");   w.WriteAttributeString("attr","urn:1","123");   w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>       In the above C# example, because the <ph id="ph2">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:      <ph id="ph3">```   &lt;x:root xmlns:x="urn:1"&gt;    &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;   &lt;/x:root&gt;   ```</ph>       If namespace conflicts occur, <ph id="ph4">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated"><ph id="ph1">```   XmlTextWriter w = new XmlTextWriter(Console.Out);   w.Formatting = Formatting.Indented;   w.WriteStartElement("x","root","urn:1");   w.WriteStartElement("y","item","urn:1");   w.WriteAttributeString("attr","urn:1","123");   w.WriteEndElement();   w.WriteEndElement();   w.Close();   ```</ph>위의 C# 예제에서는 때문에 <ph id="ph2">`WriteAttributeString`</ph> 호출 접두사를 지정 하지 않습니다는 작성기 네임 스페이스 스택에 밀어 넣은 마지막 접두사를 사용 하 고 다음과 같은 XML을 생성 합니다: <ph id="ph3">```   &lt;x:root xmlns:x="urn:1"&gt;    &lt;y:item y:attr="123" xmlns:y="urn:1" /&gt;   &lt;/x:root&gt;   ```</ph> 네임 스페이스 충돌이 발생 하면 <ph id="ph4">`XmlTextWriter`</ph> 대체 접두사를 생성 하 여이 확인 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">예를 들어 하지만 서로 다른 네임 스페이스 접두사 같은 특성 및 요소는 <ph id="ph1">`XmlWriter`</ph> 특성에 대 한 다른 접두사를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">생성 된 접두사의 이름은 <ph id="ph1">`n{i}`</ph> 여기서 <ph id="ph2">`i`</ph> 1부터 시작 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">각 요소에 대해 1로 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">네임 스페이스 URI와 관련 된 특성에는 접두사 (기본 네임 스페이스 특성에 적용 되지 않습니다) 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">이 XML 권장 사항에 W3C 네임 스페이스의 5.2 섹션에 따릅니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">특성 네임 스페이스 URI를 참조 하지만, 접두사를 지정 하지 않습니다, 작성기 특성에 대 한 접두사를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">빈 요소를 작성할 때는 추가 사이 공백을 추가 태그 이름 및 닫는 태그 예를 들어 <ph id="ph1">`&lt;item /&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">오래 된 브라우저와 호환성을 제공합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">경우는 <ph id="ph1">`String`</ph> 메서드 매개 변수로 사용 되 <ph id="ph2">`null`</ph> 및 <ph id="ph3">`String.Empty`</ph> 동일 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph>W3C 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write strongly typed data, use the &lt;xref:System.Xml.XmlConvert&gt; class to convert data types to string.</source>
          <target state="translated">사용 하 여 강력한 형식의 데이터를 작성 하려면는 &lt;xref:System.Xml.XmlConvert&gt;데이터 형식을 문자열로 변환 하는 클래스입니다.&lt;/xref:System.Xml.XmlConvert&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">다음 C# 코드에서 데이터를 변환 하는 예를 들어 <ph id="ph1">`Double`</ph> 를 <ph id="ph2">`String`</ph> 요소를 작성 하 고 <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   Double price = 19.95;   writer.WriteElementString("price", XmlConvert.ToString(price));   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph> does not check for the following:      -   Invalid characters in attribute and element names.</source>
          <target state="translated"><ph id="ph1">```   Double price = 19.95;   writer.WriteElementString("price", XmlConvert.ToString(price));   ```</ph>       <ph id="ph2">`XmlTextWriter`</ph>다음을 확인 하지 않습니다:-특성 및 요소 이름에 잘못 된 문자가 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">지정 된 인코딩을 맞지 않는 유니코드 문자입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">지정 된 인코딩을 유니코드 문자가 포함 되지 않을 경우의 <ph id="ph1">`XmlTextWriter`</ph> 문자 엔터티를 유니코드 문자를 이스케이프 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Duplicate attributes.</source>
          <target state="translated">-중복 된 특성입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">-DOCTYPE 공용 식별자 또는 시스템 식별자 문자입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security Considerations    The following items are things to consider when working with the XmlTextWriter class.</source>
          <target state="translated">보안 고려 사항에 다음 항목은 XmlTextWriter 클래스와 함께 사용할 때 고려해 야 할 사항입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Exceptions thrown by the XmlTextWriter can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">-XmlTextWriter에서 발생 한 예외는 응용 프로그램으로 버블링 하지 않는 경로 정보가 노출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">응용 프로그램 예외를 catch 하 고 적절 하 게 처리 해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   When you pass the XmlTextWriter to another application the underlying stream is exposed to that application.</source>
          <target state="translated">-전달 하는 경우 XmlTextWriter 다른 응용 프로그램에 기본 스트림이 해당 응용 프로그램에 노출 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to pass the XmlTextWriter to a semi-trusted application, you should use an &lt;xref:System.Xml.XmlWriter&gt; object created by the &lt;xref:System.Xml.XmlWriter.Create%2A&gt; method instead.</source>
          <target state="translated">XmlTextWriter 부분 신뢰 응용 프로그램에 전달 해야 하는 경우 사용 해야는 &lt;xref:System.Xml.XmlWriter&gt;하 여 만든 개체는 &lt;xref:System.Xml.XmlWriter.Create%2A&gt;메서드 대신.&lt;/xref:System.Xml.XmlWriter.Create%2A&gt; &lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The XmlTextWriter does not validate any data that is passed to the &lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt; or &lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt; methods.</source>
          <target state="translated">-XmlTextWriter에 전달 되는 모든 데이터를 확인 하지 않습니다는 &lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;또는 &lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;메서드.&lt;/xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt; &lt;/xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">임의의 데이터를 이러한 메서드에 전달 해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">-기본 설정을 변경한 경우에 생성 된 출력이 올바른 형식의 XML 데이터는 아닙니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Do not accept supporting components, such as an &lt;xref:System.Text.Encoding&gt; object, from an untrusted source.</source>
          <target state="translated">-와 같은 지원 구성 요소를 받아들이지 않습니다는 &lt;xref:System.Text.Encoding&gt;신뢰할 수 없는 소스에서 개체입니다.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creates an instance of the <bpt id="p1">&lt;xref uid="langword_csharp_XmlTextWriter" name="XmlTextWriter" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.TextWriter&gt;.</source>
          <target state="translated">인스턴스를 만듭니다는 <bpt id="p1">&lt;xref uid="langword_csharp_XmlTextWriter" name="XmlTextWriter" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 지정 된 &lt;xref:System.IO.TextWriter&gt;.&lt;/xref:System.IO.TextWriter&gt; 사용</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  Starting with the .NET Framework 2.0, we recommend that you create &lt;xref:System.Xml.XmlWriter&gt; instances by using the &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; method and the &lt;xref:System.Xml.XmlWriterSettings&gt; class to take advantage of new functionality.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;.NET Framework 2.0 부터는 만드는 것이 좋습니다 &lt;xref:System.Xml.XmlWriter&gt;를 사용 하 여 인스턴스는 &lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;메서드 및 &lt;xref:System.Xml.XmlWriterSettings&gt;새로운 기능을 활용 하는 클래스입니다.&lt;/xref:System.Xml.XmlWriterSettings&gt; &lt;/xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt; &lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>