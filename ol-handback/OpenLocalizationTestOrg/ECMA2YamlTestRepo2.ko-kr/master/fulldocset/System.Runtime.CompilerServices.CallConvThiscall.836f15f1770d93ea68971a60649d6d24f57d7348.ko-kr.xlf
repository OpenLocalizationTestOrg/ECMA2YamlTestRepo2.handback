<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a40ee65525c50ec46473cc26996105f5ef91650a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.CompilerServices.CallConvThiscall.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70074fc51d5a6ef250f298e7df331c6f140bfcdd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5c216fff4206ac176d8dc93fab2b32d6f2d5271</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that a method should use the <bpt id="p1">&lt;xref uid="langword_csharp_ThisCall" name="ThisCall" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> calling convention.</source>
          <target state="translated">메서드 사용 해야 함을 나타냅니다는 <bpt id="p1">&lt;xref uid="langword_csharp_ThisCall" name="ThisCall" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 호출 규칙입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the <ph id="ph1">`ThisCall`</ph> calling convention, the first parameter of a method call is the <ph id="ph2">`this`</ph> pointer, which is stored in register ECX.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">`ThisCall`</ph> 메서드 호출의 첫 번째 매개 변수는 호출 규칙을는 <ph id="ph2">`this`</ph> 포인터가 ECX 레지스터에 저장 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other parameters of a method call are pushed on the stack.</source>
          <target state="translated">메서드 호출의 기타 매개 변수는 스택에서 푸시됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This calling convention is used to call methods on classes exported from an unmanaged DLL.</source>
          <target state="translated">관리 되지 않는 DLL에서 내보낸 클래스의 메서드를 호출 하는이 호출 규칙 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">클래스 &lt;xref:System.Runtime.CompilerServices&gt;는 컴파일러 작성자 용도로 사용 됩니다.&lt;/xref:System.Runtime.CompilerServices&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">컴파일러는 적시에 (JIT) 컴파일러가 기본 동작은 적절 하지 않은 경우 값을 처리 하는 방식을 변경 하려면 메타 데이터 내에서 사용자 지정 한정자를 내보냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">JIT 컴파일러는 사용자 지정 한정자를 발견 하면는 한정자 지정 하는 방식으로 값을 처리 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">컴파일러는 메서드 매개 변수를 사용자 지정 한정자를 적용 하 고 값을 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">JIT 컴파일러는 필수 한정자에 응답 해야 하지만 선택적 한정자를 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</source>
          <target state="translated">C + + 컴파일러는 기본적으로 JIT 컴파일러는 c + +와 호환 되지 않는 방식에서 바이트를 처리 하는 경우에는 바이트에 처리 해야는 방법을 설명 하는 사용자 지정 한정자를 내보낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.</source>
          <target state="translated">다음 방법 중 하나를 사용 하는 메타 데이터를 사용자 지정 한정자를 내보낼 수 있습니다:-에서 메서드를 사용 하는 &lt;xref:System.Reflection.Emit.TypeBuilder&gt;같은 &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, 및 &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.&lt;/xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">--호출을 포함 하는 Microsoft MSIL (intermediate language) 명령 파일을 생성 하는 중 <ph id="ph1">`modopt`</ph> 및 <ph id="ph2">`modreq`</ph>, 하 고 사용 하 여 파일을 어셈블할는 <bpt id="p1">[</bpt>Ilasm.exe (IL 어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Using the unmanaged reflection API.</source>
          <target state="translated">-관리 되지 않는 리플렉션 API를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvThiscall"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvThiscall"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">클래스 &lt;xref:System.Runtime.CompilerServices&gt;는 컴파일러 작성자 용도로 사용 됩니다.&lt;/xref:System.Runtime.CompilerServices&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>