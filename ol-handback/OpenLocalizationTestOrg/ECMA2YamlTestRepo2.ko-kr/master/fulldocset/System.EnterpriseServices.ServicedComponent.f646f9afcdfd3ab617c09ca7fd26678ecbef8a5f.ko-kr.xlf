<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01bf4aec7c861a499b01bf4f9c5747fe341480bb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.EnterpriseServices.ServicedComponent.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64622fbd7ba4bfed41fe9b25fa2ffb116c6dab3d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a7f5066c8d0b6deaee907673ccdac9e5701d590</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the base class of all classes using COM+ services.</source>
          <target state="translated">COM + 서비스를 사용 하 여 모든 클래스의 기본 클래스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under certain conditions, a class that is derived from ServicedComponent that runs in a COM+ application may stop responding.</source>
          <target state="translated">특정 조건에서 COM + 응용 프로그램에서 실행 되는 ServicedComponent에서 파생 된 클래스는 응답 중지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This problem is caused by an Activity deadlock.</source>
          <target state="translated">이 문제는 작업 교착 상태에 의해 발생 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Activities can deadlock on multithreaded applications because of an asynchronous cleanup of component references.</source>
          <target state="translated">활동은 다중 스레드 응용 프로그램에서 비동기 정리 구성 요소 참조로 인해 교착 상태가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To work around this problem, call the &lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt; method when you complete work with objects derived from ServicedComponent.</source>
          <target state="translated">이 문제를 해결 하려면 호출는 &lt;xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;ServicedComponent에서 파생 된 개체와 작업을 완료 하면 메서드가.&lt;/xref:System.EnterpriseServices.ServicedComponent.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspx?scid=kb;en-us;327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspx?scid=kb;en-us;327443<ept id="p1">](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Client code must call <ph id="ph2">`Dispose`</ph> on serviced components to ensure proper operation.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 클라이언트 코드를 호출 해야 <ph id="ph2">`Dispose`</ph> 에서 제대로 작동 하도록 구성 요소 서비스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called by derived class constructors to initialize state in this type.</source>
          <target state="translated">이 생성자는이 형식으로 상태를 초기화 하는 파생된 클래스 생성자에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Called by the infrastructure when the object is created or allocated from a pool.</source>
          <target state="translated">개체 생성 되거나 풀에서 할당 되 면 인프라에서 호출 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Override this method to add custom initialization code to objects.</source>
          <target state="translated">개체에 사용자 지정 초기화 코드를 추가 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This method is called by the infrastructure before the object is put back into the pool.</source>
          <target state="translated">개체 풀에 다시 배치 되기 전에이 메서드는 인프라에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Override this method to vote on whether the object is put back into the pool.</source>
          <target state="translated">이 메서드는 개체는 풀으로 다시 변환 여부에 대해 투표를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the serviced component can be pooled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>서비스 구성 요소를 풀링할 수 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Called by the infrastructure just after the constructor is called, passing in the constructor string.</source>
          <target state="translated">인프라에서 생성자 문자열에 전달 생성자가 호출 후 바로 호출 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Override this method to make use of the construction string value.</source>
          <target state="translated">이 메서드를 재정의 생성 문자열 값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The construction string.</source>
          <target state="translated">생성 문자열입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Called by the infrastructure when the object is about to be deactivated.</source>
          <target state="translated">개체가 비활성화 될 되려고 할 때 인프라에서 호출 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</source>
          <target state="translated">시간 (JIT) 컴파일된 코드 또는 개체 풀링을 사용 하는 경우 개체에 사용자 지정 종료 코드를 추가 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">사용 하는 모든 리소스를 해제는 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Finalizes the object and removes the associated COM+ context.</source>
          <target state="translated">개체를 종료 하 고 연결 된 COM + 컨텍스트를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to explicitly release COM+ objects and external resources before the garbage collector frees the object.</source>
          <target state="translated">가비지 수집기는 개체를 해제 하기 전에 명시적으로 COM + 개체와 외부 리소스를 해제 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is scarce or expensive, better performance can be achieved by explicitly releasing COM+ resources when they are no longer needed.</source>
          <target state="translated">외부 리소스가 부족 하거나 비용이 많이 드는 경우 더 이상 필요할 때 명시적으로 COM + 리소스를 해제 하 여 더 나은 성능을 얻을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Explicit control is provided by the Dispose method.</source>
          <target state="translated">명시적 제어 Dispose 메서드에 의해 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.EnterpriseServices.ServicedComponent&gt; to be reallocated for other purposes.</source>
          <target state="translated">사용 하는 리소스를 사용 하면 Dispose를 호출는 &lt;xref:System.EnterpriseServices.ServicedComponent&gt;다른 용도에 다시 할당 됩니다.&lt;/xref:System.EnterpriseServices.ServicedComponent&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about Dispose, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Dispose에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">사용 하는 관리 되지 않는 리소스를 해제는 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관리 되는 리소스를 선택적으로 해제 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose`</ph> 메서드 및 &lt;xref:System.Object.Finalize%2A&gt;메서드.&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;호출 <ph id="ph1">`Dispose`</ph> 와 <ph id="ph2">`disposing`</ph> 로 설정 <ph id="ph3">`false`</ph>합니다.&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.EnterpriseServices.ServicedComponent&gt; references.</source>
          <target state="translated">경우는 <ph id="ph1">`disposing`</ph> 매개 변수는 <ph id="ph2">`true`</ph>,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 &lt;xref:System.EnterpriseServices.ServicedComponent&gt;참조.&lt;/xref:System.EnterpriseServices.ServicedComponent&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드 호출에서 <ph id="ph1">`Dispose`</ph> 각 참조 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>관리 되는 관리 되지 않는 리소스만 해제 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 만 관리 되지 않는 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Finalizes the object and removes the associated COM+ reference.</source>
          <target state="translated">개체를 종료 하 고 연결된 된 COM + 참조를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is preferable to use the <ph id="ph1">`Dispose`</ph> design pattern rather than DisposeObject.</source>
          <target state="translated">사용 하는 것이 좋습니다는 <ph id="ph1">`Dispose`</ph> DisposeObject 보다는 패턴을 디자인 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The object to dispose.</source>
          <target state="translated">삭제 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Ensures that, in the COM+ context, the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class object's <bpt id="p2">&lt;xref uid="langword_csharp_done" name="done" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> bit is set to <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> after a remote method invocation.</source>
          <target state="translated">되도록 COM + 컨텍스트에서 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 개체의 <bpt id="p2">&lt;xref uid="langword_csharp_done" name="done" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 비트가 <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 원격 메서드 호출 후 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt; method does not belong to the published interface of the &lt;xref:System.EnterpriseServices.ServicedComponent&gt; class and does not need to be implemented elsewhere.</source>
          <target state="translated">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;메서드의 게시 된 인터페이스에 속해 있지 않습니다는 &lt;xref:System.EnterpriseServices.ServicedComponent&gt;클래스 및 다른 곳에서 구현 될 필요가 없습니다.&lt;/xref:System.EnterpriseServices.ServicedComponent&gt; &lt;/xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A string converted from a response object that implements the <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodReturnMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">구현 하는 응답 개체에서 변환 된 문자열의 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodReturnMessage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Does not ensure that, in the COM+ context, the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class object's <bpt id="p2">&lt;xref uid="langword_csharp_done" name="done" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> bit is set to <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> after a remote method invocation.</source>
          <target state="translated">되도록 보장 하지 않습니다, COM + 컨텍스트에서 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 개체의 <bpt id="p2">&lt;xref uid="langword_csharp_done" name="done" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 비트가 <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 원격 메서드 호출 후 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt; method does not belong to the published interface of the &lt;xref:System.EnterpriseServices.ServicedComponent&gt; class and does not need to be implemented elsewhere.</source>
          <target state="translated">&lt;xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;메서드의 게시 된 인터페이스에 속해 있지 않습니다는 &lt;xref:System.EnterpriseServices.ServicedComponent&gt;클래스 및 다른 곳에서 구현 될 필요가 없습니다.&lt;/xref:System.EnterpriseServices.ServicedComponent&gt; &lt;/xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A string to be converted into a request object that implements the <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">구현 하는 요청 개체도 변환 하는 문자열은 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A string converted from a response object that implements the <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodReturnMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">구현 하는 응답 개체에서 변환 된 문자열의 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMethodReturnMessage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Obtains certain information about the <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">에 대 한 특정 정보를 가져옵니다는 <bpt id="p1">&lt;xref href="System.EnterpriseServices.ServicedComponent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 인스턴스.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>IServicedComponentInfo.GetComponentInfo(Int32, String<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)?qualifyHint=False&amp;autoUpgrade=True)</ept> method does not belong to the published interface of the &lt;xref:System.EnterpriseServices.ServicedComponent&gt; class and does not need to be implemented elsewhere.</source>
          <target state="translated"><bpt id="p1">[</bpt>IServicedComponentInfo.GetComponentInfo (Int32, String<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)?qualifyHint=False&amp;autoUpgrade=True)</ept> 메서드의 게시 된 인터페이스에 속해 있지 않습니다는 &lt;xref:System.EnterpriseServices.ServicedComponent&gt;클래스 및 다른 곳에서 구현 될 필요가 없습니다.&lt;/xref:System.EnterpriseServices.ServicedComponent&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</source>
          <target state="translated">여기서 0x00000001 프로세스 ID는 서비스 구성 요소에 대 한 키, 0x00000002 응용 프로그램 도메인 ID에 대 한 키 이며 0x00000004 원격 URI는 서비스 구성 요소에 대 한 키가는 비트 마스크입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>