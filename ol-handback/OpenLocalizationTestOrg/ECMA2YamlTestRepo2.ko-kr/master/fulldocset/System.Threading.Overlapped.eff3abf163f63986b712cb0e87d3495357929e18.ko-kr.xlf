<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47318ef78c00c6b7d9b5ac5cb331571267f6b0cc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.Overlapped.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a5ed76f8339304584b7097bb4fd0f8e8d63c6fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1aa8c5188cc422b014bf1c0bcc83be07b14e3d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a managed representation of a Win32 <ph id="ph1">`OVERLAPPED`</ph> structure, including methods to transfer information from an Overlapped instance to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">관리 되는 Win32 표현을 제공 <ph id="ph1">`OVERLAPPED`</ph> Overlapped 인스턴스에서 정보를 전송 하는 메서드를 포함 한 구조에는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.Overlapped.Pack%2A&gt; and &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; methods transfer information from an Overlapped object to a &lt;xref:System.Threading.NativeOverlapped&gt; structure that can be passed to Win32 API functions for asynchronous file I/O.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;및 &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;Overlapped 개체에서 정보를 전송 하는 메서드는 &lt;xref:System.Threading.NativeOverlapped&gt;비동기에 대 한 Win32 API 함수에 전달할 수 있는 구조 파일 I/O.&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt; &lt;/xref:System.Threading.Overlapped.Pack%2A&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; method transfers information from a &lt;xref:System.Threading.NativeOverlapped&gt; structure to an instance of the Overlapped class.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt; &lt;xref:System.Threading.NativeOverlapped&gt;Overlapped 클래스의 인스턴스로 구조&lt;/xref:System.Threading.NativeOverlapped&gt; 에서 메서드 전송 정보&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the properties of an Overlapped object affect its associated &lt;xref:System.Threading.NativeOverlapped&gt; structure, and vice versa.</source>
          <target state="translated">Overlapped 개체의 속성 변경 관련 &lt;xref:System.Threading.NativeOverlapped&gt;구조, 그 반대의.&lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new, empty instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새로 만든 빈 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the 32-bit integer handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 지정 된 파일 위치, I/O 작업이 완료 될 때 신호를 받는 이벤트와 작업의 결과 반환할 수 있는 인터페이스에 대 한 32 비트 정수 핸들입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; &lt;xref:System.Threading.WaitHandle&gt;클래스&lt;/xref:System.Threading.WaitHandle&gt; 에서 파생 된 모든 관리 되는 동기화 이벤트 핸들을 가져올 속성을&lt;/xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
          <target state="translated">구현 &lt;xref:System.IAsyncResult&gt;I/O 작업에 대 한 상태 정보를 제공 합니다.&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
          <target state="translated">생성자에 전달할는 <ph id="ph1">`ar`</ph> 매개 변수를 사용 하 여 나중에 검색 하 고는 &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;속성.&lt;/xref:System.Threading.Overlapped.AsyncResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
          <target state="translated">에 대 한 콜백 메서드를 지정 하는 경우는 &lt;xref:System.Threading.Overlapped.Pack%2A&gt;또는 &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;메서드를 콜백 검색할 수 있습니다 프로그램 &lt;xref:System.IAsyncResult&gt;압축을 풀어는 &lt;xref:System.Threading.NativeOverlapped&gt;수신한 구조.&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.IAsyncResult&gt; &lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt; &lt;/xref:System.Threading.Overlapped.Pack%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">낮은 번호 전송을 시작 하는 파일 위치 중입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">높은 번호 전송을 시작 하는 파일 위치 중입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 작업이 완료 될 때 신호를 받는 이벤트에 대 한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
          <target state="translated">구현 하는 개체는 &lt;xref:System.IAsyncResult&gt;인터페이스 및 I/O 작업에 대 한 상태 정보를 제공 합니다.&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified file position, the handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 지정 된 파일 위치, I/O 작업이 완료 될 때 신호를 받는 이벤트와 작업의 결과 반환할 수 있는 인터페이스에 대 한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
          <target state="translated">파생 되는 관리 되는 동기화 개체의 핸들을 가져오지는 &lt;xref:System.Threading.WaitHandle&gt;클래스를 사용 하 여는 &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;가져올 속성을 &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;개체를 호출 합니다는 &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;메서드.&lt;/xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; &lt;/xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; &lt;/xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation of &lt;xref:System.IAsyncResult&gt; provides status information on the I/O operation.</source>
          <target state="translated">구현 &lt;xref:System.IAsyncResult&gt;I/O 작업에 대 한 상태 정보를 제공 합니다.&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt; property.</source>
          <target state="translated">생성자에 전달할는 <ph id="ph1">`ar`</ph> 매개 변수를 사용 하 여 나중에 검색 하 고는 &lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;속성.&lt;/xref:System.Threading.Overlapped.AsyncResult%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a callback method is specified for the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; or &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method, the callback can retrieve your &lt;xref:System.IAsyncResult&gt; by unpacking the &lt;xref:System.Threading.NativeOverlapped&gt; structure it receives.</source>
          <target state="translated">에 대 한 콜백 메서드를 지정 하는 경우는 &lt;xref:System.Threading.Overlapped.Pack%2A&gt;또는 &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;메서드를 콜백 검색할 수 있습니다 프로그램 &lt;xref:System.IAsyncResult&gt;압축을 풀어는 &lt;xref:System.Threading.NativeOverlapped&gt;수신한 구조.&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.IAsyncResult&gt; &lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt; &lt;/xref:System.Threading.Overlapped.Pack%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">낮은 번호 전송을 시작 하는 파일 위치 중입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">높은 번호 전송을 시작 하는 파일 위치 중입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 작업이 완료 될 때 신호를 받는 이벤트에 대 한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface and provides status information on the I/O operation.</source>
          <target state="translated">구현 하는 개체는 &lt;xref:System.IAsyncResult&gt;인터페이스 및 I/O 작업에 대 한 상태 정보를 제공 합니다.&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the object that provides status information on the I/O operation.</source>
          <target state="translated">I/O 작업에 대 한 상태 정보를 제공 하는 개체를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object that implements the &lt;xref:System.IAsyncResult&gt; interface.</source>
          <target state="translated">구현 하는 개체는 &lt;xref:System.IAsyncResult&gt;인터페이스.&lt;/xref:System.IAsyncResult&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the 32-bit integer handle to a synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 작업이 완료 될 때 신호를 받는 동기화 이벤트를 32 비트 정수 핸들을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be used on 64-bit platforms.</source>
          <target state="translated">이 속성은 64 비트 플랫폼에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt; property instead.</source>
          <target state="translated">사용 하 여 &lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;속성 대신.&lt;/xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the &lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; property to get the handle of any managed synchronization event that derives from the &lt;xref:System.Threading.WaitHandle&gt; class.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; &lt;xref:System.Threading.WaitHandle&gt;클래스&lt;/xref:System.Threading.WaitHandle&gt; 에서 파생 된 모든 관리 되는 동기화 이벤트 핸들을 가져올 속성을&lt;/xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName&gt; 사용 하 여</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the handle of the synchronization event.</source>
          <target state="translated">&lt;xref:System.Int32&gt;동기화 이벤트 핸들을 나타내는 값입니다.&lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets the handle to the synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">I/O 작업이 완료 될 때 신호를 받는 동기화 이벤트에 대 한 핸들을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the handle of a managed synchronization object that derives from the &lt;xref:System.Threading.WaitHandle&gt; class, use the &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; property to get a &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; object, and then call the &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; method.</source>
          <target state="translated">파생 되는 관리 되는 동기화 개체의 핸들을 가져오지는 &lt;xref:System.Threading.WaitHandle&gt;클래스를 사용 하 여는 &lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;가져올 속성을 &lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;개체를 호출 합니다는 &lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;메서드.&lt;/xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt; &lt;/xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt; &lt;/xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; representing the handle of the event.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;이벤트의 핸들을 나타내는.&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Frees the unmanaged memory associated with a native overlapped structure allocated by the &lt;xref:System.Threading.Overlapped.Pack*&gt; method.</source>
          <target state="translated">에 의해 할당 하는 중첩 된 네이티브 구조체와 연결 된 관리 되지 않는 메모리를 해제는 &lt;xref:System.Threading.Overlapped.Pack*&gt;메서드.&lt;/xref:System.Threading.Overlapped.Pack*&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call the Free method exactly once on every &lt;xref:System.Threading.NativeOverlapped&gt; pointer you receive from the &lt;xref:System.Threading.Overlapped.Pack%2A&gt; method.</source>
          <target state="translated">정확 하 게 사용 가능한 메서드를 호출 해야에서 두 번 마다 &lt;xref:System.Threading.NativeOverlapped&gt;에서 수신 하는 포인터는 &lt;xref:System.Threading.Overlapped.Pack%2A&gt;메서드.&lt;/xref:System.Threading.Overlapped.Pack%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don't call the Free method, you will leak memory.</source>
          <target state="translated">Free 메서드를 호출 하지 않으면, 메모리 누수가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the Free method more than once, memory will be corrupted.</source>
          <target state="translated">Free 메서드를 두 번 이상 호출 하는 경우 메모리 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to be freed.</source>
          <target state="translated">에 대 한 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the high-order word of the file position at which to start the transfer.</source>
          <target state="translated">상위 단어 전송을 시작 하는 파일 위치를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">파일 위치는 파일의 시작 부분에서 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the high word of the file position.</source>
          <target state="translated">&lt;xref:System.Int32&gt;높은 단어의 파일 위치를 나타내는 값입니다.&lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets or sets the low-order word of the file position at which to start the transfer.</source>
          <target state="translated">하위 단어 전송을 시작 하는 파일 위치를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">파일 위치는 파일의 시작 부분에서 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Int32&gt; value representing the low word of the file position.</source>
          <target state="translated">&lt;xref:System.Int32&gt;낮은 단어의 파일 위치를 나타내는 값입니다.&lt;/xref:System.Int32&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to be invoked when the asynchronous I/O operation is complete.</source>
          <target state="translated">팩의 현재 인스턴스는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조, 비동기 I/O 작업이 완료 될 때 호출 될 대리자를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;될 때까지 실제 메모리의 구조는 고정 되어 &lt;xref:System.Threading.Overlapped.Unpack%2A&gt;호출 됩니다.&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The caller is responsible for pinning the buffer.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 호출자는 버퍼를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">그러나 응용 프로그램 도메인이 언로드되면 고정된 된 버퍼에 대 한 핸들 개체가 제거 되 고 버퍼 출시 되 면 해제 된 주소에 쓰려고 I/O 작업을 종료 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
          <target state="translated">이러한 이유로 사용 하 여이 &lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;런타임 버퍼를 고정 하는 메서드 오버 로드.&lt;/xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">에 대 한 관리 되지 않는 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">현재 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이미 대기 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</source>
          <target state="translated">팩의 현재 인스턴스는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조, 비동기 I/O 작업이 완료 될 때 호출 되는 대리자와 버퍼 역할을 하는 관리 되는 개체를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;될 때까지 실제 메모리의 구조는 고정 되어 &lt;xref:System.Threading.Overlapped.Unpack%2A&gt;호출 됩니다.&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">에 지정 된 버퍼가 <ph id="ph1">`userData`</ph> 비동기 I/O를 수행 하는 관리 되지 않는 운영 체제 함수에 전달 된 것과 동일 해야 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The runtime pins the buffer or buffers specified in <ph id="ph2">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 버퍼 또는 버퍼에 지정 된 고정 하는 런타임 <ph id="ph2">`userData`</ph> I/O 작업의 기간에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">응용 프로그램 도메인이 언로드되면 경우 런타임에서 I/O 작업이 완료 될 때까지 고정 된 메모리를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">개체 또는 작업에 대 한 입력 또는 출력 버퍼를 나타내는 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">각 개체에는 예를 들어 바이트 배열을 버퍼를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">에 대 한 관리 되지 않는 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">현재 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이미 대기 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Unpacks the specified unmanaged <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure into a managed <bpt id="p2">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">지정 된 관리 되지 않는 압축을 푼 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조를 관리 되는 <bpt id="p2">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is not freed from physical memory until you call the &lt;xref:System.Threading.Overlapped.Free%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;구조를 호출할 때까지 실제 메모리에서 해제 되지 않습니다는 &lt;xref:System.Threading.Overlapped.Free%2A&gt;메서드.&lt;/xref:System.Threading.Overlapped.Free%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">에 대 한 관리 되지 않는 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object containing the information unpacked from the native structure.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 네이티브 구조체에서 압축을 푼 정보가 포함 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;nativeOverlappedPtr&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure specifying the delegate to invoke when the asynchronous I/O operation is complete.</source>
          <target state="translated">현재 인스턴스를 팩는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 I/O 작업이 완료 될 때 호출할 대리자를 지정 하는 구조입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">호출 스택을 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;될 때까지 실제 메모리의 구조는 고정 되어 &lt;xref:System.Threading.Overlapped.Unpack%2A&gt;호출 됩니다.&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller is responsible for pinning the buffer.</source>
          <target state="translated">호출자는 버퍼를 고정 하는 일을 담당 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">그러나 응용 프로그램 도메인이 언로드되면 고정된 된 버퍼에 대 한 핸들 개체가 제거 되 고 버퍼 출시 되 면 해제 된 주소에 쓰려고 I/O 작업을 종료 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, it is better to use the &lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt; method overload, in which the runtime pins the buffer.</source>
          <target state="translated">이러한 이유로 사용 하 여이 &lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;런타임 버퍼를 고정 하는 메서드 오버 로드.&lt;/xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;를 사용 하 여는 &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;메서드 실수로 보안 문제가 열 수 있습니다.&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt; method does not propagate the calling stack.</source>
          <target state="translated">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;메서드 호출 스택을 전파 하지 않습니다.&lt;/xref:System.Threading.Overlapped.UnsafePack%2A&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 권한 검사를 방지 하기 위해이 취약점을 악용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">에 대 한 관리 되지 않는 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has already been packed.</source>
          <target state="translated">현재 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이미 대기 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Packs the current instance into a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure, specifying the delegate to invoke when the asynchronous I/O operation is complete and the managed object that serves as a buffer.</source>
          <target state="translated">팩의 현재 인스턴스는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조, 비동기 I/O 작업이 완료 되 고 관리 되는 개체를 호출 하는 대리자 버퍼 역할을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">호출 스택을 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">겹쳐진된 I/O 작업의 운영 체제에이 메서드에서 반환 되는 관리 되지 않는 포인터를 전달할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.NativeOverlapped&gt; structure is fixed in physical memory until &lt;xref:System.Threading.Overlapped.Unpack%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Threading.NativeOverlapped&gt;될 때까지 실제 메모리의 구조는 고정 되어 &lt;xref:System.Threading.Overlapped.Unpack%2A&gt;호출 됩니다.&lt;/xref:System.Threading.Overlapped.Unpack%2A&gt; &lt;/xref:System.Threading.NativeOverlapped&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">에 지정 된 버퍼가 <ph id="ph1">`userData`</ph> 비동기 I/O를 수행 하는 관리 되지 않는 운영 체제 함수에 전달 된 것과 동일 해야 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime pins the buffer or buffers specified in<ph id="ph1">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">버퍼 또는 버퍼에 지정 된 고정 하는 런타임<ph id="ph1">`userData`</ph> I/O 작업의 기간에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">응용 프로그램 도메인이 언로드되면 경우 런타임에서 I/O 작업이 완료 될 때까지 고정 된 메모리를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafePack method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;는 UnsafePack를 사용 하 여 메서드를 실수로 열 수 보안 문제가 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">코드 액세스 보안 스택의 모든 호출자의 권한의 해당 권한 확인으로 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnsafePack method does not propagate the calling stack.</source>
          <target state="translated">UnsafePack 메서드 호출 스택을 전파 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">악성 코드가 권한 검사를 방지 하기 위해이 취약점을 악용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.IOCompletionCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 I/O 작업이 완료 될 때 호출할 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">개체 또는 작업에 대 한 입력 또는 출력 버퍼를 나타내는 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">각 개체에는 예를 들어 바이트 배열을 버퍼를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An unmanaged pointer to a <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure.</source>
          <target state="translated">에 대 한 관리 되지 않는 포인터는 <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 구조입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에 게 필요한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is already packed.</source>
          <target state="translated">현재 <bpt id="p1">&lt;xref href="System.Threading.Overlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이미 대기 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>