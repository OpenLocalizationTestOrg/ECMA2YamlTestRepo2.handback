<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7aa8d27c33b1690bab85d6524c8898782b50acf7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.EventManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aa090f2388b29cda736f53d5b983bf040534166</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c372eb8185f7d16d10725df760f61333dce0c8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides event-related utility methods that register routed events for class owners and add class handlers.</source>
          <target state="translated">클래스 소유자에 대 한 라우트된 이벤트를 등록 하 고 클래스 처리기를 추가 하는 이벤트 관련 유틸리티 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is most commonly used to register a new routed event, with &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">이 클래스는 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt; 새 라우트된 이벤트를 등록 하는 데 가장 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second most common <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> usage is &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">두 번째 가장 일반적인 <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> 사용량이 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use this method to enable class handling of a routed event on the class, or an attached event.</source>
          <target state="translated">이 메서드를 사용 하 여 클래스에 대해 라우트된 이벤트 또는 연결된 된 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Returns identifiers for routed events that have been registered to the event system.</source>
          <target state="translated">이벤트 시스템에 등록 된 라우트된 이벤트에 대 한 식별자를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>More &lt;xref:System.Windows.RoutedEvent&gt; objects can be registered later.</source>
          <target state="translated">더 많은 &lt;xref:System.Windows.RoutedEvent&gt;개체를 나중에 등록할 수 있습니다.&lt;/xref:System.Windows.RoutedEvent&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</source>
          <target state="translated">이 메서드는 스냅숏 가져오고 라우트된 이벤트의 컬렉션은 응용 프로그램의 수명 주기 동안 쓰기 가능 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection returned might be quite large.</source>
          <target state="translated">반환 되는 컬렉션은 매우 클 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even just counting the events that are part of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, the collection count is in the high hundreds.</source>
          <target state="translated">이벤트의 일부인 계산 해도 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, 컬렉션 수는 수백 개에 이릅니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the registered objects.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 등록 된 개체가 들어 있는입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Finds all routed event identifiers for events that are registered with the provided owner type.</source>
          <target state="translated">이벤트에 등록 된 소유자 형식에 대 한 모든 라우트된 이벤트 식별자를 찾습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type to start the search with.</source>
          <target state="translated">사용 하 여 검색을 시작 유형입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Base classes are included in the search.</source>
          <target state="translated">기본 클래스 검색에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of matching routed event identifiers if any match is found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">그렇지 않으면 라우트된 이벤트 식별자와 일치 하는 배열 그렇지 않으면 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">특정 라우트된 이벤트에 대 한 클래스 처리기를 등록합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 <ph id="ph1">`sender`</ph> 매개 변수 및/또는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">대부분의 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling RegisterClassHandler in static constructors.</source>
          <target state="translated">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 RegisterClassHandler 정적 생성자에서 호출 하지 않고 처리를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">클래스 처리에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this signature, class handlers will be registered to invoke only in response to unhandled events.</source>
          <target state="translated">이 서명을 사용 하 여, 처리 되지 않은 이벤트에 대 한 응답에만 호출할 클래스 처리기를 등록 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also register class handlers to invoke even if the event arguments are marked handled, by using the &lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt; signature, with <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이벤트 인수를 사용 하 여 처리, 표시 된 경우에 호출 하는 클래스 처리기를 등록할 수도 있습니다는 &lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;서명을와 <ph id="ph1">`handledEventsToo`</ph> 로 설정 <ph id="ph2">`true`</ph>.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">클래스 처리를 선언 하는 클래스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">라우트된 이벤트 식별자를 처리 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">클래스 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</source>
          <target state="translated">이벤트 데이터를 표시 이미 처리 된 이벤트를 처리 하는 옵션으로 특정 라우트된 이벤트에 대 한 클래스 처리기를 등록 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">클래스 처리에 백업 하는 라우트된 이벤트 구현 되는 연결 된 이벤트를 비롯 한 라우트된 이벤트를 사용할 수 있는 기능입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">클래스 처리기 클래스의 모든 인스턴스에 대 한 존재 하는 정적 처리기와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">처리기가 정적, 클래스 처리기를 사용 하 여 직접 인스턴스 속성을 변경할 수 없지만 통해 인스턴스에 액세스할 수 때문에 <ph id="ph1">`sender`</ph> 매개 변수 및/또는 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">인스턴스 처리기 앞 클래스 처리기가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">이벤트 처리로 표시의 동작을 포함 하는 클래스 처리기를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">따라서 처리 된 이벤트에 대해 특별히 인스턴스 처리기 등록 하지 않는 한 클래스 처리 이벤트에 대 한 인스턴스 처리기 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">대부분의 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> 의 이벤트는 가상 메서드를 처리 하는 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; in static constructors.</source>
          <target state="translated">기본 클래스를 상속 하는 클래스에서 이러한 메서드를 재정의 하 여 클래스 호출 하지 않고 처리를 구현할 수 있습니다 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;정적 생성자에서.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">일반적으로 이러한 클래스 처리 메서드는 입력된 이벤트에 대해 존재 하 고 이름이 "On"으로 시작 되 고 클래스에서 처리 되는 이벤트의 이름으로 끝납니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">클래스 처리에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this signature, class handlers can be registered to invoke upon handled events, by setting <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 서명을 사용 하 여, 클래스 처리기 등록할 수를 설정 하 여 이벤트가 처리 시 호출할 <ph id="ph1">`handledEventsToo`</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</source>
          <target state="translated">일반적으로 마우스 또는 키보드 이벤트를 처리 하는 입력된 시스템 등 해결 하려고 하는 알려진된 처리 문제가 있는 경우에이 작업을 수행 해야 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">클래스 처리를 선언 하는 클래스의 형식입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">라우트된 이벤트 식별자를 처리 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">클래스 처리기 구현에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to invoke this class handler even if arguments of the routed event have been marked as handled; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to retain the default behavior of not invoking the handler on any marked-handled event.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>라우트된 이벤트의 인수; 처리 된 것으로 표시 된 경우에이 클래스 처리기를 호출 하려면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 모든 표시 된 처리 이벤트 처리기를 호출 하지의 기본 동작을 유지 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Registers a new routed event with the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> event system.</source>
          <target state="translated">새 라우트된 이벤트를 등록 된 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> 이벤트 시스템입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the return value of this method to create the static declaration for a unique &lt;xref:System.Windows.RoutedEvent&gt; identifier field.</source>
          <target state="translated">이 메서드의 반환 값을 사용 하 여는 고유한에 대 한 정적 선언을 만들려면 &lt;xref:System.Windows.RoutedEvent&gt;식별자 필드입니다.&lt;/xref:System.Windows.RoutedEvent&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field should be stored within the owner type.</source>
          <target state="translated">이 필드는 소유자 형식 내에서 저장 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</source>
          <target state="translated">규칙의 상당한 여러 가지 고 라우트된 이벤트와 관련 된 모범 사례 됩니다 라는, 등록, 클래스에 노출 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The name of the routed event.</source>
          <target state="translated">라우트된 이벤트의 이름입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The name must be unique within the owner type and cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or an empty string.</source>
          <target state="translated">이름은 소유자 형식 내에서 고유 해야 및 커야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 또는 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The routing strategy of the event as a value of the enumeration.</source>
          <target state="translated">열거형의 값이 이벤트는 라우팅 전략입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The type of the event handler.</source>
          <target state="translated">이벤트 처리기의 형식입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This must be a delegate type and cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 대리자 형식 이어야 및 커야 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The owner class type of the routed event.</source>
          <target state="translated">라우트된 이벤트의 소유자 클래스 형식입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">이 될 수 없습니다 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The identifier for the newly registered routed event.</source>
          <target state="translated">새로 등록 된 라우트된 이벤트의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</source>
          <target state="translated">이 식별자 개체는 클래스의 정적 필드로 저장 되며이를 이벤트 처리기를 연결 하는 방법에 대 한 매개 변수로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The routed event identifier is also used for other event system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">라우트된 이벤트 식별자는 다른 이벤트 시스템에도 사용 <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>