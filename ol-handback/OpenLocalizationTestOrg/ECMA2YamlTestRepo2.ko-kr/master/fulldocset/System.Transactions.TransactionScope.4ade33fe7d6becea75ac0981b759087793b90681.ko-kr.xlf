<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5908d5d0edd2c520f9df0e5663e637eb8e199687</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Transactions.TransactionScope.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">780eb8f19bcee5437f98a20277d66953ec266a66</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0efb73e31bab693ae5bcf0057da20fea807e1bf7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Makes a code block transactional.</source>
          <target state="translated">트랜잭션 코드 블록을 만듭니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Transactions&gt; infrastructure provides both an explicit programming model based on the &lt;xref:System.Transactions.Transaction&gt; class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.</source>
          <target state="translated">&lt;xref:System.Transactions&gt;인프라가 모두 명시적 프로그래밍 모델과 기반는 &lt;xref:System.Transactions.Transaction&gt;으로 클래스는 트랜잭션을 자동으로 관리 인프라에 의해 TransactionScope 클래스를 사용 하는 암시적 프로그래밍 모델을.&lt;/xref:System.Transactions.Transaction&gt; &lt;/xref:System.Transactions&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 앰비언트 트랜잭션 컨텍스트에 자동으로 관리 되도록 TransactionScope 클래스를 사용 하 여 암시적 트랜잭션을 만드는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should also use the TransactionScope and &lt;xref:System.Transactions.DependentTransaction&gt; class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">TransactionScope에도 사용 해야 하 고 &lt;xref:System.Transactions.DependentTransaction&gt;여러 함수 호출이 나 여러 스레드 호출에서 동일한 트랜잭션 사용 해야 하는 응용 프로그램에 대 한 클래스입니다.&lt;/xref:System.Transactions.DependentTransaction&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">이 모델에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on writing a transactional application, see <bpt id="p1">[</bpt>Writing A Transactional Application<ept id="p1">](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)</ept>.</source>
          <target state="translated">트랜잭션 응용 프로그램 작성 방법에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>트랜잭션 응용 작성<ept id="p1">](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Upon instantiating a TransactionScope by the <ph id="ph1">`new`</ph> statement, the transaction manager determines which transaction to participate in.</source>
          <target state="translated">하 여 TransactionScope를 인스턴스화할 때는 <ph id="ph1">`new`</ph> 문, 트랜잭션 관리자에 참여 하는 트랜잭션을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once determined, the scope always participates in that transaction.</source>
          <target state="translated">일단 결정 되 면 범위는 항상 해당 트랜잭션에 참여 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The decision is based on two factors: whether an ambient transaction is present and the value of the <ph id="ph1">`TransactionScopeOption`</ph> parameter in the constructor.</source>
          <target state="translated">두 가지 요인에 따라 결정 됩니다: 앰비언트 트랜잭션이 있는지 여부의 값과는 <ph id="ph1">`TransactionScopeOption`</ph> 생성자에서 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ambient transaction is the transaction your code executes in.</source>
          <target state="translated">앰비언트 트랜잭션이 코드에서 실행 되는 트랜잭션입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain a reference to the ambient transaction by calling the static &lt;xref:System.Transactions.Transaction.Current%2A&gt; property of the &lt;xref:System.Transactions.Transaction&gt; class.</source>
          <target state="translated">정적 &lt;xref:System.Transactions.Transaction.Current%2A&gt; &lt;xref:System.Transactions.Transaction&gt;클래스&lt;/xref:System.Transactions.Transaction&gt; 의 속성&lt;/xref:System.Transactions.Transaction.Current%2A&gt; 을 호출 하 여 앰비언트 트랜잭션에 대 한 참조를 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how this parameter is used, please see the "Transaction Flow Management" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 "트랜잭션 흐름 관리" 섹션을 참조 하십시오는 <bpt id="p1">[</bpt>구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; method), then the transaction in which the scope participates is allowed to proceed.</source>
          <target state="translated">예외가 발생 하지 않으면 트랜잭션 범위 내에서 (TransactionScope 초기화 사이의 개체 즉, 호출의 해당 &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;메서드), 범위 참여 하는 트랜잭션은 계속 진행 합니다.&lt;/xref:System.Transactions.TransactionScope.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.</source>
          <target state="translated">트랜잭션 범위 내에서 예외가 발생, 참여 하는 트랜잭션이 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When your application completes all work it wants to perform in a transaction, you should call the &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt; method only once to inform that transaction manager that it is acceptable to commit the transaction.</source>
          <target state="translated">트랜잭션에서 수행 하려는, 호출 해야 모든 작업을 완료 하는 응용 프로그램은 &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;메서드를 한 번만 트랜잭션을 커밋하는 허용 되는지 해당 트랜잭션 관리자에 게 알리기 위해.&lt;/xref:System.Transactions.TransactionScope.Complete%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call this method aborts the transaction.</source>
          <target state="translated">이 메서드를 호출 하지 못하면 트랜잭션을 중단 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to the &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; method marks the end of the transaction scope.</source>
          <target state="translated">에 대 한 호출에서 &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;메서드 트랜잭션 범위의 끝을 표시 합니다.&lt;/xref:System.Transactions.TransactionScope.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">이 메서드를 호출한 후에 발생 하는 예외는 트랜잭션에 영향을 주지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you modify the value of &lt;xref:System.Transactions.Transaction.Current%2A&gt; inside a scope, an exception is thrown when &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; is called.</source>
          <target state="translated">값을 수정 하는 경우 &lt;xref:System.Transactions.Transaction.Current%2A&gt;는 범위 안에 동안 예외가 throw &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;호출 됩니다.&lt;/xref:System.Transactions.TransactionScope.Dispose%2A&gt; &lt;/xref:System.Transactions.Transaction.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, at the end of the scope, the previous value is restored.</source>
          <target state="translated">그러나 범위 끝날 때 이전 값이 복원 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if you call &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; on &lt;xref:System.Transactions.Transaction.Current%2A&gt; inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.</source>
          <target state="translated">또한 호출 하는 경우 &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;에 &lt;xref:System.Transactions.Transaction.Current%2A&gt;트랜잭션을 생성 하는 트랜잭션 범위 안에 범위의 끝에서 트랜잭션이 중단 됩니다.&lt;/xref:System.Transactions.Transaction.Current%2A&gt; &lt;/xref:System.Transactions.TransactionScope.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new transaction scope with the transaction scope option equal to &lt;xref:System.Transactions.TransactionScopeOption&gt;.</source>
          <target state="translated">이 생성자는 새 트랜잭션 범위가 만들어집니다 트랜잭션 범위 옵션으로 &lt;xref:System.Transactions.TransactionScopeOption&gt;.&lt;/xref:System.Transactions.TransactionScopeOption&gt; 같음</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that a transaction is required by the new scope and the ambient transaction is used if one already exists.</source>
          <target state="translated">즉, 새 범위에 트랜잭션이 필요 하 고 앰비언트 트랜잭션이 이미 있는 경우 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, it creates a new transaction before entering the scope.</source>
          <target state="translated">그렇지 않으면 범위를 입력 하기 전에 새 트랜잭션을 만듭니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 및 범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 지정 된 트랜잭션이 앰비언트 트랜잭션으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified asynchronous flow option.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 비동기 흐름 옵션을 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified requirements.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 요구 사항과 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 시간 제한 값을 사용 하 여 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 및 범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 지정 된 트랜잭션이 앰비언트 트랜잭션으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified timeout value and requirements.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 된 지정 된 시간 제한 값 및 요구 사항입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified requirements.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 요구 사항과 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">`transactionOptions`</ph> parameter to specify an &lt;xref:System.Transactions.IsolationLevel&gt;, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">`transactionOptions`</ph> 지정 하려면 매개 변수는 &lt;xref:System.Transactions.IsolationLevel&gt;, 및 범위에는 나중에 트랜잭션을 만들면, 새 트랜잭션이 지정된 된 격리 수준에 연관 된.&lt;/xref:System.Transactions.IsolationLevel&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</source>
          <target state="translated">격리 수준을 트랜잭션에 함께 전달 되, 같아야 하며 수준이, 또는 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified requirements and asynchronous flow option.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 요구 사항 및 비동기 흐름 옵션 클래스입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 시간 제한 값 및 COM + 상호 운용성 요구 사항, 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method uses &lt;xref:System.Security.Permissions.SecurityAction&gt; to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id="ph1">`FullTrust`</ph> permission set.</source>
          <target state="translated"><bpt id="p1">**</bpt>하지만 참고<ept id="p1">**</ept> 이 방법은 사용 하 여 &lt;xref:System.Security.Permissions.SecurityAction&gt;신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 보유 하 고 필요는 <ph id="ph1">`FullTrust`</ph> 사용 권한 집합입니다.&lt;/xref:System.Security.Permissions.SecurityAction&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.EnterpriseServicesInteropOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes how the associated transaction interacts with COM+ transactions.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.EnterpriseServicesInteropOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관련된 트랜잭션 COM + 트랜잭션을 상호 작용 하는 방법을 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 시간 제한 값을 사용 하 여 클래스 범위에서 수행 하는 트랜잭션 작업에는이 트랜잭션이 사용 되도록 지정 된 트랜잭션이 앰비언트 트랜잭션을로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">범위에서 수행 하는 트랜잭션 작업에이 트랜잭션을 사용 하 여 앰비언트 트랜잭션을으로 설정 하도록 트랜잭션.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified timeout value, requirements, and asynchronous flow option.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 시간 제한 값, 요구 사항 및 비동기 흐름 옵션 클래스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;트랜잭션 범위 제한 시간이 초과 되어 트랜잭션이 중단 되는.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified scope and COM+ interoperability requirements, and transaction options.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 범위 및 COM + 상호 운용성 요구 사항 및 트랜잭션 옵션을 사용 하 여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">`transactionOptions`</ph> parameter to specify an &lt;xref:System.Transactions.IsolationLevel&gt;, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">`transactionOptions`</ph> 지정 하려면 매개 변수는 &lt;xref:System.Transactions.IsolationLevel&gt;, 및 범위에는 나중에 트랜잭션을 만들면, 새 트랜잭션이 지정된 된 격리 수준에 연관 된.&lt;/xref:System.Transactions.IsolationLevel&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</source>
          <target state="translated">격리 수준을 트랜잭션에 함께 전달 되, 같아야 하며 수준이, 또는 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method uses &lt;xref:System.Security.Permissions.SecurityAction&gt; to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id="ph1">`FullTrust`</ph> permission set.</source>
          <target state="translated"><bpt id="p1">**</bpt>하지만 참고<ept id="p1">**</ept> 이 방법은 사용 하 여 &lt;xref:System.Security.Permissions.SecurityAction&gt;신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 보유 하 고 필요는 <ph id="ph1">`FullTrust`</ph> 사용 권한 집합입니다.&lt;/xref:System.Security.Permissions.SecurityAction&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.EnterpriseServicesInteropOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes how the associated transaction interacts with COM+ transactions.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.EnterpriseServicesInteropOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관련된 트랜잭션 COM + 트랜잭션을 상호 작용 하는 방법을 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified requirements and asynchronous flow option.</source>
          <target state="translated">[.NET Framework 4.5.1 이상 버전에서 지원 됨]       새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScope"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정 된 요구 사항 및 비동기 흐름 옵션 클래스입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 트랜잭션 범위와 연결 된 트랜잭션 요구 사항에 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 새 트랜잭션이 만들어진 경우 사용할 트랜잭션 옵션을 설명 하는 구조입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">기존 트랜잭션에 사용 되는 경우이 매개 변수에서 제한 시간 값에는 트랜잭션 범위에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">이 시간 범위를 삭제 하기 전에 만료 되 면 트랜잭션이 중단 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">인스턴스는 <bpt id="p1">&lt;xref href="System.Transactions.TransactionScopeAsyncFlowOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 작업 또는 async/await.NET 비동기 프로그래밍 패턴을 사용 하는 경우 스레드 연속에서 트랜잭션 범위와 연결 된 앰비언트 트랜잭션이 됩니다 이동할지 여부를 설명 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Indicates that all operations within the scope are completed successfully.</source>
          <target state="translated">범위 내의 모든 작업은 성공적으로 완료 되었음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed.</source>
          <target state="translated">만족 되 면 범위 내의 모든 작업을 성공적으로 완료, 모든 리소스의 상태가 일관 되 고 트랜잭션을 커밋할 수 있는 해당 트랜잭션 관리자를 알리기 위해이 메서드를 한 번만 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is very good practice to put the call as the last statement in the <ph id="ph1">`using`</ph> block.</source>
          <target state="translated">매우 것이 좋습니다의 마지막 문으로 호출을 배치 하는 <ph id="ph1">`using`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction.</source>
          <target state="translated">이 메서드를 호출 하지 못하면 트랜잭션을 중단 트랜잭션 관리자는이 시스템 오류로 해석 하기 때문에 또는 트랜잭션 범위 내에서 발생 한 예외입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you should also note that calling this method does not guarantee a commit of the transaction.</source>
          <target state="translated">그러나 또한 점에 유의 해야이 메서드를 호출 하는 트랜잭션의 커밋을 보장 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is merely a way of informing the transaction manager of your status.</source>
          <target state="translated">되었기의 트랜잭션 관리자에 게 상태를 알리는 수 단일 뿐입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, you can no longer access the ambient transaction via the &lt;xref:System.Transactions.Transaction.Current%2A&gt; property, and trying to do so results in an exception being thrown.</source>
          <target state="translated">이 메서드를 호출한 후 더 이상 액세스할 수 통해 앰비언트 트랜잭션에 &lt;xref:System.Transactions.Transaction.Current%2A&gt;속성과으로 발생 하면 예외가 throw 됩니다.&lt;/xref:System.Transactions.Transaction.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual work of commit between the resources manager happens at the <ph id="ph1">`End Using`</ph> statement if the &lt;xref:System.Transactions.TransactionScope&gt; object created the transaction.</source>
          <target state="translated">리소스 관리자 간의 커밋의 실제 작업에서 발생 된 <ph id="ph1">`End Using`</ph> 문을 경우는 &lt;xref:System.Transactions.TransactionScope&gt;개체 트랜잭션을 만든.&lt;/xref:System.Transactions.TransactionScope&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it did not create the transaction, the commit occurs whenever &lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt; is called by the owner of the &lt;xref:System.Transactions.CommittableTransaction&gt; object.</source>
          <target state="translated">트랜잭션이 만들지 않은 경우 때마다 커밋이 발생 &lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;의 소유자에 의해 호출 됩니다는 &lt;xref:System.Transactions.CommittableTransaction&gt;개체입니다.&lt;/xref:System.Transactions.CommittableTransaction&gt; &lt;/xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the &lt;xref:System.Transactions.TransactionScope&gt; object.</source>
          <target state="translated">트랜잭션 관리자는 리소스 관리자를 호출 하 고 commit 또는 rollback을이 메서드를 호출한 여부에 따라 중 하나를 알리는 해당 시점에서 &lt;xref:System.Transactions.TransactionScope&gt;개체입니다.&lt;/xref:System.Transactions.TransactionScope&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This method has already been called once.</source>
          <target state="translated">이 메서드가 호출 이미 한 번입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Ends the transaction scope.</source>
          <target state="translated">트랜잭션 범위를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method marks the end of the transaction scope.</source>
          <target state="translated">이 메서드를 호출 하면 트랜잭션 범위의 끝을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Transactions.TransactionScope&gt; object created the transaction and &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt; was called on the scope, the &lt;xref:System.Transactions.TransactionScope&gt; object attempts to commit the transaction when this method is called.</source>
          <target state="translated">경우는 &lt;xref:System.Transactions.TransactionScope&gt;개체 트랜잭션을 만든 및 &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;범위에가 호출 된는 &lt;xref:System.Transactions.TransactionScope&gt;개체가이 메서드는 트랜잭션을 커밋할 하려고 합니다.&lt;/xref:System.Transactions.TransactionScope&gt; &lt;/xref:System.Transactions.TransactionScope.Complete%2A&gt; &lt;/xref:System.Transactions.TransactionScope&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The use of the C# <ph id="ph1">`using`</ph> construction ensures that this method is called even if an exception occurs.</source>
          <target state="translated">C#의 사용 <ph id="ph1">`using`</ph> 생성 하면 예외가 발생 하는 경우에이 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">이 메서드를 호출한 후에 발생 하는 예외는 트랜잭션에 영향을 주지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also restores the ambient transaction to it original state.</source>
          <target state="translated">또한이 메서드 앰비언트 트랜잭션이 원래 상태를 복원합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Transactions.TransactionAbortedException&gt; is thrown if the transaction is not actually committed.</source>
          <target state="translated">A &lt;xref:System.Transactions.TransactionAbortedException&gt;트랜잭션이 실제로 커밋된 경우에 throw 됩니다.&lt;/xref:System.Transactions.TransactionAbortedException&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is synchronous and blocks until the transaction has been committed or aborted.</source>
          <target state="translated">이 메서드는 동기적 이므로 트랜잭션이 커밋 또는 중단 될 때까지 차단 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">이 때문에 Windows Form (WinForm) 응용 프로그램에서는이 메서드를 사용 하는 경우에 매우 주의 해야 하거나 교착 상태가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">(예: 단추 클릭), 하나의 WinForm 컨트롤 이벤트 내에서이 메서드를 호출 하 고 동기를 사용 하는 경우 &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;컨트롤 교착 상태가 발생 하는 트랜잭션을 처리 하는 동안 일부 UI 작업 (예를 들어 변경 색)을 수행 하는 메서드.&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">때문에 이것이 &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;메서드는 동기적 이므로 UI 스레드 작업을 완료 될 때까지 작업자 스레드를 차단 합니다.&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">시나리오에서 UI 스레드 또한 트랜잭션을 커밋하는 작업자 스레드 대기 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">결과를 계속할 수 없는 및 범위는 커밋이 완료에 대 한 무기한 대기입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; rather than &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">사용 해야 &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;대신 &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;비동기적이 고 교착 상태가 발생할 가능성이 적으므로 이기 때문에 가능 합니다.&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt; &lt;/xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">이 메서드를 사용 하는 방법에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> 항목입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>