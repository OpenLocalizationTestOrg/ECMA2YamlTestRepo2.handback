<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc59cbca0c143e021414dfb8d0fc24a348b6aa38</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Diagnostics.StackFrame.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d7e4f41f196270b30c4e96b04543ce7b8ea76e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d6b293aa1e5f6a23ac2121af24938051942dd3b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides information about a StackFrame, which represents a function call on the call stack for the current thread.</source>
          <target state="translated">현재 스레드에 대 한 호출 스택에 있는 함수 호출을 나타내는 StackFrame에 대 한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A StackFrame is created and pushed on the call stack for every function call made during the execution of a thread.</source>
          <target state="translated">StackFrame 만들어지고 스레드가 실행 하는 동안 수행 된 모든 함수 호출에 대 한 호출 스택에 푸시됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The stack frame always includes &lt;xref:System.Reflection.MethodBase&gt; information, and optionally includes file name, line number, and column number information.</source>
          <target state="translated">스택 프레임에 포함 되어 항상 &lt;xref:System.Reflection.MethodBase&gt;내용은 고 선택적으로 파일 이름, 줄 번호 및 열 번호 정보를 포함 합니다.&lt;/xref:System.Reflection.MethodBase&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>StackFrame information will be most informative with Debug build configurations.</source>
          <target state="translated">StackFrame 정보 디버그 빌드 구성을 통해 풍부한 정보를 제공 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, Debug builds include debug symbols, while Release builds do not.</source>
          <target state="translated">기본적으로 디버그 빌드는 디버그 기호를 포함 하지만 릴리스 빌드는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The debug symbols contain most of the file, method name, line number, and column information used in constructing StackFrame objects.</source>
          <target state="translated">디버그 빌드에는 대부분의 파일, 메서드 이름, 줄 번호 및 StackFrame 개체 생성에 사용 되는 열 정보를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, optionally capturing source information.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 필요에 따라 소스 정보를 캡처하여 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to capture the file name, line number, and column number of the stack frame; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>파일 이름, 줄 번호 및 스택 프레임; 열 번호를 캡처합니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that corresponds to a frame above the current stack frame.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 현재 스택 프레임 위의 프레임에 해당 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The number of frames up the stack to skip.</source>
          <target state="translated">건너뛸 스택 프레임 수를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that corresponds to a frame above the current stack frame, optionally capturing source information.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 필요에 따라 소스 정보를 캡처하고 현재 스택 프레임 위의 프레임에 해당 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The number of frames up the stack to skip.</source>
          <target state="translated">건너뛸 스택 프레임 수를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to capture the file name, line number, and column number of the stack frame; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>파일 이름, 줄 번호 및 스택 프레임; 열 번호를 캡처합니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains only the given file name and line number.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 만: 지정 된 파일 이름과 줄 번호를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor when you do not want to use the debugger's line mapping logic.</source>
          <target state="translated">디버거의 줄 매핑을 논리를 사용 하지 않을 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The file name.</source>
          <target state="translated">파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The line number in the specified file.</source>
          <target state="translated">지정된 된 파일의 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains only the given file name, line number, and column number.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Diagnostics.StackFrame"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정한 파일 이름, 줄 번호 및 열 번호를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor when you do not want to use the debugger's line mapping logic.</source>
          <target state="translated">디버거의 줄 매핑을 논리를 사용 하지 않을 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The file name.</source>
          <target state="translated">파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The line number in the specified file.</source>
          <target state="translated">지정된 된 파일의 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The column number in the specified file.</source>
          <target state="translated">지정한 파일에 열 번호입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the column number in the file that contains the code that is executing.</source>
          <target state="translated">실행 중인 코드가 포함 된 파일에서 열 번호를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This information is typically extracted from the debugging symbols for the executable.</source>
          <target state="translated">이 정보는 일반적으로 실행 파일에 대 한 디버깅 기호에서 추출 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The file column number, or 0 (zero) if the file column number cannot be determined.</source>
          <target state="translated">파일 열 번호 또는 0 (영) 파일 열 번호를 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the line number in the file that contains the code that is executing.</source>
          <target state="translated">실행 중인 코드가 포함 된 파일의 줄 번호를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This information is typically extracted from the debugging symbols for the executable.</source>
          <target state="translated">이 정보는 일반적으로 실행 파일에 대 한 디버깅 기호에서 추출 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The file line number, or 0 (zero) if the file line number cannot be determined.</source>
          <target state="translated">파일 줄 번호 또는 0 (영) 파일 줄 번호를 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the file name that contains the code that is executing.</source>
          <target state="translated">실행 중인 코드가 포함 된 파일 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This information is typically extracted from the debugging symbols for the executable.</source>
          <target state="translated">이 정보는 일반적으로 실행 파일에 대 한 디버깅 기호에서 추출 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The file name, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the file name cannot be determined.</source>
          <target state="translated">파일 이름 또는 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 파일 이름을 확인할 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing.</source>
          <target state="translated">실행 되 고 있는 메서드에 대 한 Microsoft MSIL (intermediate language) 코드의 시작 부분부터 오프셋을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code.</source>
          <target state="translated">이 오프셋은 적시에 (JIT) 컴파일러가 디버깅 코드 생성 여부에 따라 근사값이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The generation of this debugging information is controlled by the &lt;xref:System.Diagnostics.DebuggableAttribute&gt;.</source>
          <target state="translated">이 디버깅 정보의 생성에 &lt;xref:System.Diagnostics.DebuggableAttribute&gt;.&lt;/xref:System.Diagnostics.DebuggableAttribute&gt; 제어</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The offset from the start of the MSIL code for the method that is executing.</source>
          <target state="translated">실행 중인 메서드의 MSIL 코드의 시작 부분부터 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets the method in which the frame is executing.</source>
          <target state="translated">프레임이 실행 되는 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method that is currently executing may be inherited from a base class, although it is called in a derived class.</source>
          <target state="translated">파생된 클래스에서 호출 했더라도 기본 클래스에서 현재 실행 중인 메서드는 상속 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the &lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt; property of the &lt;xref:System.Reflection.MethodBase&gt; object that is returned by GetMethod identifies the base class, not the derived class.</source>
          <target state="translated">이 경우 &lt;xref:System.Reflection.MemberInfo.ReflectedType%2A&gt; &lt;xref:System.Reflection.MethodBase&gt;GetMethod에서 반환 하는 개체는 기본 클래스에서 파생 된 클래스 하지 식별&lt;/xref:System.Reflection.MethodBase&gt; 의 속성&lt;/xref:System.Reflection.MemberInfo.ReflectedType%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The method in which the frame is executing.</source>
          <target state="translated">프레임이 실행 되는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed.</source>
          <target state="translated">네이티브-just-in-time (JIT)의 시작 부분부터 오프셋을 가져옵니다.-컴파일된 코드에서 실행 되는 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The generation of this debugging information is controlled by the &lt;xref:System.Diagnostics.DebuggableAttribute&gt; class.</source>
          <target state="translated">이 디버깅 정보의 생성은 &lt;xref:System.Diagnostics.DebuggableAttribute&gt;클래스&lt;/xref:System.Diagnostics.DebuggableAttribute&gt; 에 의해 제어 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The offset from the start of the JIT-compiled code for the method that is being executed.</source>
          <target state="translated">실행 되는 메서드에 대 한 JIT 컴파일된 코드의 시작 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Defines the value that is returned from the &lt;xref:System.Diagnostics.StackFrame.GetNativeOffset<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Diagnostics.StackFrame.GetILOffset<ept id="p1">*</ept>&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown.</source>
          <target state="translated">반환 되는 값을 정의 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; 또는 &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; 메서드는 기본 모드 또는 Microsoft MSIL (intermediate language) 오프셋 알 수 없는 경우.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this constant is -1.</source>
          <target state="translated">이 상수의 값은-1입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Builds a readable representation of the stack trace.</source>
          <target state="translated">읽을 수 있는 스택 추적을 만듭니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A readable representation of the stack trace.</source>
          <target state="translated">스택 추적을 읽을 수 있는 표현입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>