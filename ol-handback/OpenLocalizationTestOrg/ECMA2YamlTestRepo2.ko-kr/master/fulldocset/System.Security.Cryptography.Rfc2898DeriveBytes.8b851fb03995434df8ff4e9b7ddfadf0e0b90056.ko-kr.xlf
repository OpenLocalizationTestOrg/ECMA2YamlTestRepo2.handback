<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c49f0e1be87f960b7dfcf7d811ca0b2f625045e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.Rfc2898DeriveBytes.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6a9f209f8390dfc2a467b0d3d7c3200a0fe6241</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c70f348fc116936174057b69bfe07f4c9d5fd90</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 기반 구현에 따라 의사 (pseudo) 난수 생성기를 사용 하 여 파생 기능인, PBKDF2 키 <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rfc2898DeriveBytes takes a password, a salt, and an iteration count, and then generates keys through calls to the &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt; method.</source>
          <target state="translated">Rfc2898DeriveBytes에서는 암호, 솔트 및 반복 횟수를 한 다음 호출을 통해 키를 생성 된 &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;메서드.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Rfc2898DeriveBytes class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">Rfc2898DeriveBytes 클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password and salt to derive the key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 키를 파생할 암호 및 솔트를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 또는 솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the password and salt size to derive the key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 키를 파생할 암호 및 솔트 크기를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">원하는 클래스에서 생성할 임의의 솔트 크기입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 또는 솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 키를 파생할 암호, 솔트 및 반복 횟수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업에 대 한 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 또는 솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 키를 파생할 암호, 솔트 및 반복 횟수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 키 솔트입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업에 대 한 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 또는 솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt size, and number of iterations to derive the key.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 키를 파생할 암호, 솔트 크기 및 반복 횟수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">솔트 크기는 8 바이트 여야 합니다. 더 큰 또는 반복 횟수는 0 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 암호 및 솔트에서 키 및 초기화 벡터 (IV) 생성 하기 위한 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">키 생성에 거의 무제한 길이의 수 있도록 하는 의사 난수 함수를 사용 하 여 키를 파생 하는 암호 기반 키 파생 함수 PBKDF2를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 기본 키 및 기타 매개 변수에서 파생된 된 키를 생성 하기 위해 사용할 수 있습니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">암호 기반 키 파생 함수에 기본 키가 암호 및 다른 매개 변수는 솔트 값과 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2에 대 한 자세한 내용은 RFC 2898을 참조 하십시오. "PKCS #5: 암호 기반 암호화 사양 버전 2.0에서는"에서 사용할 수는 <bpt id="p1">[</bpt>의견 웹 사이트에 대 한 요청<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">자세한 내용은 5.2 "PBKDF2" 섹션을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 하드 코드 하지 소스 코드에는 암호입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">사용 하 여 어셈블리에서 하드 코드 된 암호를 검색할 수는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>,&amp;16; 진수 편집기를 사용 하 여 또는 Notepad.exe와 같은 텍스트 편집기에서 어셈블리를 열기만 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">키 파생에 사용 되는 암호입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">원하는 클래스에서 생성할 임의의 솔트 크기입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업에 대 한 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작은 또는 반복 횟수는 1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">암호 또는 솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;iterations &lt;/code&gt;</ph>is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;iterations &lt;/code&gt;</ph>범위를 벗어났습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">이 매개 변수는 음수가 아닌 숫자가 필요합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Derives a cryptographic key from the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">암호화 키 파생 되는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</source>
          <target state="translated">이 함수는 CryptDeriveKey(), Crypto API 함수에 대 한 래퍼 이며을 Crypto API를 사용 하 여 응용 프로그램과 상호 운용성을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`keySize`</ph> parameter is set to 0 bits, the default key size for the specified algorithm is used.</source>
          <target state="translated">경우는 <ph id="ph1">`keySize`</ph> 매개 변수 0 비트로 설정 된 경우 지정된 된 알고리즘에 대 한 기본 키 크기가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The algorithm name for which to derive the key.</source>
          <target state="translated">키 파생을 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The hash algorithm name to use to derive the key.</source>
          <target state="translated">키 파생에 사용할 해시 알고리즘 이름입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The size of the key, in bits, to derive.</source>
          <target state="translated">비트를 파생 키의 크기입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The initialization vector (IV) to use to derive the key.</source>
          <target state="translated">초기화 벡터 (IV) 키 파생에 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The derived key.</source>
          <target state="translated">파생된 키입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySize</ph><ept id="p1">&lt;/code&gt;</ept> parameter is incorrect.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">keySize</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수가 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>-or-       The cryptographic service provider (CSP) cannot be acquired.</source>
          <target state="translated">-또는-암호화 서비스 공급자 (CSP) 가져올 수 없습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">algname</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid algorithm name.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">algname</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수는 올바른 알고리즘 이름이 아닙니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">alghashname</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid hash algorithm name.</source>
          <target state="translated">-또는- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">alghashname</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수가 잘못 된 해시 알고리즘 이름 않습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and optionally releases the managed resources.</source>
          <target state="translated">사용 하는 관리 되지 않는 리소스를 해제는 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 및 관리 되는 리소스를 선택적으로 해제 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">`Finalize`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph>호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; references.</source>
          <target state="translated">경우는 <ph id="ph1">`disposing`</ph> 매개 변수는 <ph id="ph2">`true`</ph>,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;참조.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드 호출에서 <ph id="ph1">`Dispose()`</ph> 각 참조 된 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>관리 되는 관리 되지 않는 리소스만 해제 하려면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 만 관리 되지 않는 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-random key for this object.</source>
          <target state="translated">이 개체에 대 한 의사 (pseudo) 난수 키를 반환합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class implements PBKDF2 functionality by using a pseudorandom number generator based on &lt;xref:System.Security.Cryptography.HMACSHA1&gt;.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스는 난수 생성기 &lt;xref:System.Security.Cryptography.HMACSHA1&gt;.&lt;/xref:System.Security.Cryptography.HMACSHA1&gt; 에 따라 사용 하 여 PBKDF2 기능 구현&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class takes a password, a salt, and an iteration count, and then generates keys through calls to the GetBytes method.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;클래스에서는 암호, 솔트 및 반복 횟수를 한 다음 GetBytes 메서드를 호출 하 여 키를 생성 합니다.&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Repeated calls to this method will not generate the same key; instead, appending two calls of the GetBytes method with a <ph id="ph1">`cb`</ph> parameter value of <ph id="ph2">`20`</ph> is the equivalent of calling the GetBytes method once with a <ph id="ph3">`cb`</ph> parameter value of <ph id="ph4">`40`</ph>.</source>
          <target state="translated">이 메서드를 반복된 하 여 호출; 같은 키를 생성 하지 않습니다. GetBytes 메서드를 두 번의 호출을 추가 하는 대신,는 <ph id="ph1">`cb`</ph> 매개 변수 값의 <ph id="ph2">`20`</ph> GetBytes 메서드를 호출 하면 한 번에 해당는 <ph id="ph3">`cb`</ph> 매개 변수 값의 <ph id="ph4">`40`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The number of pseudo-random key bytes to generate.</source>
          <target state="translated">생성할 의사 (pseudo) 난수 키 바이트의 수입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A byte array filled with pseudo-random key bytes.</source>
          <target state="translated">바이트 배열 의사 (pseudo) 난수 키 바이트로 채워진입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cb &lt;/code&gt;</ph>is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;cb &lt;/code&gt;</ph>범위를 벗어났습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">이 매개 변수는 음수가 아닌 숫자가 필요합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of iterations for the operation.</source>
          <target state="translated">작업에 대 한 반복 횟수를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iteration count is the number of times an operation is performed.</source>
          <target state="translated">반복 횟수는 작업을 수행 하는 횟수입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this method, the count should be greater than zero.</source>
          <target state="translated">이 메서드에 대 한 개수가&amp;0; 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">최소 권장된 반복 횟수는 1000입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">작업에 대 한 반복 횟수입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The number of iterations is less than 1.</source>
          <target state="translated">반복 횟수는 1 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Resets the state of the operation.</source>
          <target state="translated">작업의 상태를 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is automatically called if the salt or iteration count is modified.</source>
          <target state="translated">이 메서드는 솔트 나 반복 횟수가 수정 된 경우에 자동으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Gets or sets the key salt value for the operation.</source>
          <target state="translated">작업에 대 한 키 솔트 값을 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</source>
          <target state="translated">솔트, 바이트의 임의 집합 확인 하기가 더 어려워지므로 메시지의 인증 되지 않은 암호를 해독 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</source>
          <target state="translated">사전 공격이 발생할 가능성이 가장 높은 키에 대 한 이전에 계산 된 암호화 된 값이 있는 암호화 된 값을 비교 하 여 암호화 된 메시지를 해독 하는 공격자가 시도 하는 방식의 공격이입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</source>
          <target state="translated">키 파생 하기 전에 암호의 끝에 솔트, 즉 임의 바이트의 도입으로 이러한 공격 하기가 훨씬 더 어려워지므로 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The key salt value for the operation.</source>
          <target state="translated">작업에 대 한 키 솔트 값입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">지정 된 솔트 크기는 8 바이트 보다 작습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">솔트가 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>