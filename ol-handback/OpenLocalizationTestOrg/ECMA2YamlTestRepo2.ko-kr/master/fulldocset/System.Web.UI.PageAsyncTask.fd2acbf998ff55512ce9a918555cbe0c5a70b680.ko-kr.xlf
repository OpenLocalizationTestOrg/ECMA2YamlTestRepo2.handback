<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6be823a18aeb670bec163beced5a5b7bd10194c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Web.UI.PageAsyncTask.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a2964f26b17ed1beaf2f2524c4a791ad619b4b1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef3816ca2a42fd149c3e09beebef528eaf86a728</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains information about an asynchronous task registered to a page.</source>
          <target state="translated">페이지에 등록 하는 비동기 작업에 대 한 정보를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
          <target state="translated">ASP.NET 버전 2.0을 사용 하면 여러 작업을 페이지를 등록 하 고 페이지를 렌더링 하기 전에 비동기식으로 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
          <target state="translated">느리게 처리 하 고 다른 프로세스를 실행 하는 동안 하느라 정체 될 하지 않을 경우 작업을 비동기적으로 실행 되도록 지정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
          <target state="translated">비동기 작업은 순차적으로 또는 병렬로 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A PageAsyncTask object must be registered to the page through the &lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt; method.</source>
          <target state="translated">PageAsyncTask 개체를 통해 페이지에 등록 해야 합니다는 &lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;메서드.&lt;/xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
          <target state="translated">페이지 자체는 비동기 작업을 실행 하도록 비동기적으로 처리 될 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:       <ph id="ph4">`&lt;%@ Page Async="true" %&gt;`</ph>       When the <ph id="ph5">`Async`</ph> attribute is set to <ph id="ph6">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
          <target state="translated">설정할 수 있습니다는 <ph id="ph1">`Async`</ph> 특성을 하나 <ph id="ph2">`true`</ph> (에서처럼 다음 코드 예제) 또는 <ph id="ph3">`false`</ph> 페이지 지시문 및 비동기 작업은 여전히 비동기적으로 처리 될: <ph id="ph4">`&lt;%@ Page Async="true" %&gt;`</ph> 때는 <ph id="ph5">`Async`</ph> 특성이로 설정 된 <ph id="ph6">`false`</ph>, 페이지를 실행 하는 스레드는 비동기 작업이 완료 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any asynchronous tasks registered before the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event will be executed automatically by the page if they have not already been executed.</source>
          <target state="translated">하기 전에 등록 된 모든 비동기 작업의 &lt;xref:System.Web.UI.Page.PreRenderComplete&gt;이벤트에서 실행 될 것 자동으로 페이지 경우 이미 실행 되지 않은 것입니다.&lt;/xref:System.Web.UI.Page.PreRenderComplete&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Those asynchronous tasks registered after the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event must be executed explicitly through the &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method.</source>
          <target state="translated">비동기 작업 후에 등록 된는 &lt;xref:System.Web.UI.Page.PreRenderComplete&gt;이벤트를 통해 명시적으로 실행 해야 합니다는 &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;메서드.&lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; &lt;/xref:System.Web.UI.Page.PreRenderComplete&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method can also be used to start tasks before the &lt;xref:System.Web.UI.Page.PreRenderComplete&gt; event.</source>
          <target state="translated">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;메서드 시작 되기 전에 작업을 사용할 수도 있습니다는 &lt;xref:System.Web.UI.Page.PreRenderComplete&gt;이벤트.&lt;/xref:System.Web.UI.Page.PreRenderComplete&gt; &lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt; method executes all the registered asynchronous tasks on the page that have not been executed.</source>
          <target state="translated">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;메서드가 실행 되지 않은 페이지에서 등록 된 모든 비동기 작업을 실행 합니다.&lt;/xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
          <target state="translated">기본적으로 비동기 작업 45 초 안에 완료 되지 않은 경우 시간 초과 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
          <target state="translated">Web.config 파일 또는 page 지시문에 다른 제한 시간 값을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
          <target state="translated"><ph id="ph1">`&lt;pages&gt;`</ph> Web.config 파일의 섹션에 포함 되어는 <ph id="ph2">`asyncTimeout`</ph> 특성을 다음과 같이 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;system.web&gt;`</ph>       <ph id="ph2">`&lt;pages asyncTimeout="30"&gt;`</ph>       <ph id="ph3">`&lt;/pages&gt;`</ph>       <ph id="ph4">`&lt;/system.web&gt;`</ph>       The page directive contains an <ph id="ph5">`AsyncTimeout`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">`&lt;system.web&gt;`</ph>       <ph id="ph2">`&lt;pages asyncTimeout="30"&gt;`</ph>       <ph id="ph3">`&lt;/pages&gt;`</ph>       <ph id="ph4">`&lt;/system.web&gt;`</ph>Page 지시문을 포함 한 <ph id="ph5">`AsyncTimeout`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using an event handler that enables the task to be canceled.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 작업을 취소할 수 있습니다 하는 이벤트 처리기를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor wraps a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate so that the &lt;xref:System.Web.UI.PageAsyncTask&gt; object can integrate asynchronous code (based on &lt;xref:System.Threading.Tasks.Task&gt; objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
          <target state="translated">이 생성자를 래핑하는 &lt;xref:System.Web.CancellableTaskEventHandler&gt;위임 있도록는 &lt;xref:System.Web.UI.PageAsyncTask&gt;개체 비동기 코드를 통합할 수 있습니다 (에 따라 &lt;xref:System.Threading.Tasks.Task&gt;개체) 기존 ASP.NET Web Forms 비동기 페이지 기능을 사용 합니다.&lt;/xref:System.Threading.Tasks.Task&gt; &lt;/xref:System.Web.UI.PageAsyncTask&gt; &lt;/xref:System.Web.CancellableTaskEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET will signal the &lt;xref:System.Threading.CancellationToken&gt; object that is passed to a &lt;xref:System.Web.CancellableTaskEventHandler&gt; delegate for cancellation based on the &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt; attribute set in the <ph id="ph1">`@ Page`</ph> directive of the Web page.</source>
          <target state="translated">ASP.NET 신호를 보내는 &lt;xref:System.Threading.CancellationToken&gt;에 전달 되는 개체는 &lt;xref:System.Web.CancellableTaskEventHandler&gt;기반으로 취소에 대 한 대리자는 &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;특성에 설정는 <ph id="ph1">`@ Page`</ph> 웹 페이지의 지시문.&lt;/xref:System.Web.UI.Page.AsyncTimeout%2A&gt; &lt;/xref:System.Web.CancellableTaskEventHandler&gt; &lt;/xref:System.Threading.CancellationToken&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt; value has been reached, the &lt;xref:System.Threading.CancellationToken&gt; object will be signaled.</source>
          <target state="translated">경우는 &lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;값에 도달한는 &lt;xref:System.Threading.CancellationToken&gt;개체가 신호를 받는.&lt;/xref:System.Threading.CancellationToken&gt; &lt;/xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the &lt;xref:System.Web.CancellableTaskEventHandler&gt; class.</source>
          <target state="translated"><ph id="ph1">`CancellationToken`</ph> 매개 변수 &lt;xref:System.Web.CancellableTaskEventHandler&gt;클래스&lt;/xref:System.Web.CancellableTaskEventHandler&gt; 의 구현에 의해 호출 되는 비동기 Api에 전달 되어야 합니다</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
          <target state="translated">이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using an event handler that enables the task to be handled.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스에 작업을 처리할 수 있습니다 하는 이벤트 처리기를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
          <target state="translated">이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the default value for executing in parallel.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 병렬로 실행에 대 한 기본값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the constructor sets the &lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt; property to <ph id="ph1">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
          <target state="translated">생성자의이 구현에서 &lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;속성을 <ph id="ph1">`false`</ph> 하므로 비동기 작업이 페이지에 있는 다른 작업을 병렬로 처리 되지 않습니다.&lt;/xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 내에 작업이 성공적으로 완료 되 면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">시간 제한 기간 내에서 작업이 성공적으로 완료 되지 않으면 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">beginHandler</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수 또는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">endHandler</ph> <ept id="p2">&lt;/code&gt;</ept> 매개 변수를 지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified value for executing in parallel.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스 병렬로 실행에 대 한 지정된 된 값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
          <target state="translated">생성자의이 구현에는 페이지에 있는 다른 작업을 병렬로 처리할을 비동기 작업을 쓸지를 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 내에 작업이 성공적으로 완료 되 면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">시간 제한 기간 내에서 작업이 성공적으로 완료 되지 않으면 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">beginHandler</ph> <ept id="p1">&lt;/code&gt;</ept> 매개 변수 또는 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">endHandler</ph> <ept id="p2">&lt;/code&gt;</ept> 매개 변수를 지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets the method to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The BeginHandler delegate is set in the constructor.</source>
          <target state="translated">BeginHandler 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.BeginEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when beginning the asynchronous task.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Web.BeginEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 비동기 작업을 시작할 때 호출할 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료 되 면 호출할 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The EndHandler delegate is set in the constructor.</source>
          <target state="translated">EndHandler 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 시간 제한 기간 내는 작업이 성공적으로 완료 될 때 호출할 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ExecuteInParallel property is set in the constructor.</source>
          <target state="translated">ExecuteInParallel 속성은 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When multiple tasks are registered in a page and the ExecuteInParallel property is set to <ph id="ph1">`true`</ph>, then those tasks are processed concurrently.</source>
          <target state="translated">여러 작업은 페이지에 등록 된 시점과 ExecuteInParallel 속성이로 설정 되어 <ph id="ph1">`true`</ph>, 해당 작업을 동시에 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the ExecuteInParallel property is set to <ph id="ph1">`false`</ph>, then those tasks are processed sequentially.</source>
          <target state="translated">그러나 ExecuteInParallel 속성이로 설정 된 경우 <ph id="ph1">`false`</ph>, 해당 작업은 순차적으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and ExecuteInParallel is set to <ph id="ph1">`true`</ph>, both tasks will complete in 5 seconds.</source>
          <target state="translated">예를 들어 페이지 두 비동기 작업을 포함 하는 경우 각 5 초 동안 완료를 하 ExecuteInParallel로 설정 된 <ph id="ph1">`true`</ph>, 두 작업 모두 5 초 내에 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If ExecuteInParallel is set to <ph id="ph1">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
          <target state="translated">ExecuteInParallel로 설정 되어 있으면 <ph id="ph1">`false`</ph> 같은 두 개의 태스크, 그런 다음 첫 번째 작업은 5 초 동안 완료 되 고 5 초 후 첫 번째 작업의 완료 된 두 번째 작업은 완료 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the task should be processed in parallel with other tasks; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>작업이 다른 작업과; 병렬로 처리 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets an object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The State property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
          <target state="translated">State 속성은 생성자에서 설정 되 고 비동기 작업을 실행 하는 동안 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective State properties.</source>
          <target state="translated">해당 상태 속성을 고유한 문자열 값을 할당 하 여 페이지에서 비동기 작업을 쉽게 구분할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; that represents the state of the task.</source>
          <target state="translated">&lt;xref:System.Object&gt;작업의 상태를 나타내는입니다.&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료 되지 않을 때 호출할 메서드를를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TimeoutHandler delegate is set in the constructor.</source>
          <target state="translated">TimeoutHandler 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Web.EndEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 제한 시간 안에 작업이 성공적으로 완료 되지 않을 때 호출할 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>