<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e9f1ef102dc82b8f8c8af0e12729df0ff0cac26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.CipherMode.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0f088b363a0095e2156b9f6809b8097fffdb5e2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c071a9147e3bbe4359678c7560ee9356b488b55d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the block cipher mode to use for encryption.</source>
          <target state="translated">암호화에 사용할 블록 암호화 모드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Block cipher algorithms encrypt data in block units, rather than a single byte at a time.</source>
          <target state="translated">블록 암호화 알고리즘에는 한 번에 단일 바이트 보다는 데이터를 블록 단위로 암호화합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common block size is 8 bytes.</source>
          <target state="translated">가장 일반적인 블록 크기는 8 바이트입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because each block is heavily processed, block ciphers provide a higher level of security than stream ciphers.</source>
          <target state="translated">각 블록 게 처리 하기 때문에 블록 암호화 스트림 암호화 보다 더 높은 수준의 보안을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, block cipher algorithms tend to execute more slowly than stream ciphers.</source>
          <target state="translated">그러나 블록 암호화 알고리즘은 스트림 암호화 보다 느리게 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Block ciphers use the same encryption algorithm for each block.</source>
          <target state="translated">각 블록에 대 한 동일한 암호화 알고리즘을 사용 하는 블록 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, a block of plain text will always return the same cipher text when encrypted with the same key and algorithm.</source>
          <target state="translated">이 때문에 일반 텍스트 블록을 항상 동일한 암호화 텍스트는 동일한 키 및 알고리즘을 사용 하 여 암호화를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this behavior can be used to crack a cipher, cipher modes are introduced that modify the encryption process based on feedback from earlier block encryptions.</source>
          <target state="translated">이 문제는 암호 해독에 사용할 수 있으므로 이전 블록 암호화에서에서 피드백에 따라 암호화 프로세스를 수정 하는 암호화 모드가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting encryption provides a higher level of security than a simple block encryption.</source>
          <target state="translated">암호화 결과 단순 블록 암호화 보다 더 높은 수준의 보안을 제공합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Cipher Block Chaining (<bpt id="p1">&lt;xref uid="langword_csharp_CBC" name="CBC" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) mode introduces feedback.</source>
          <target state="translated">암호 블록 체인 (<bpt id="p1">&lt;xref uid="langword_csharp_CBC" name="CBC" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 모드 피드백을 소개 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Before each plain text block is encrypted, it is combined with the cipher text of the previous block by a bitwise exclusive OR operation.</source>
          <target state="translated">각 일반 텍스트 블록은 암호화 되기 전에 결합 된 암호화 텍스트는 이전 블록의 비트 배타적 OR 연산 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This ensures that even if the plain text contains many identical blocks, they will each encrypt to a different cipher text block.</source>
          <target state="translated">이렇게 하면는 여러 개의 동일한 블록이 포함 하는 일반 텍스트, 경우에는 각 암호화를 다른 암호화 텍스트 블록입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the block is encrypted.</source>
          <target state="translated">초기화 벡터 블록이 암호화 되기 전에 첫 번째 일반 텍스트 블록과 배타적 비트 OR 연산 하 여 결합 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If a single bit of the cipher text block is mangled, the corresponding plain text block will also be mangled.</source>
          <target state="translated">암호 텍스트 블록의 단일 비트 라도 손상 되 면 해당 하는 일반 텍스트 블록 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In addition, a bit in the subsequent block, in the same position as the original mangled bit, will be mangled.</source>
          <target state="translated">또한 원래 바뀐된 비트와 같은 위치에 있는 다음 블록에 비트 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Cipher Feedback (<bpt id="p1">&lt;xref uid="langword_csharp_CFB" name="CFB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) mode processes small increments of plain text into cipher text, instead of processing an entire block at a time.</source>
          <target state="translated">Cipher Feedback (<bpt id="p1">&lt;xref uid="langword_csharp_CFB" name="CFB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 암호화 텍스트를 한 번에 전체 블록을 처리 하는 대신에 일반 텍스트의 증가 폭이 작을수록를 처리 하는 모드입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This mode uses a shift register that is one block in length and is divided into sections.</source>
          <target state="translated">이 모드에서는 구간으로 분할 한 블록 길이 이며 나누어져 있는 시프트 레지스터를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if the block size is 8 bytes, with one byte processed at a time, the shift register is divided into eight sections.</source>
          <target state="translated">예를 들어 블록 크기 8 바이트 이며, 한 번에 처리 1 바이트씩 시프트 레지스터는 8 개의 단계로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a bit in the cipher text is mangled, one plain text bit is mangled and the shift register is corrupted.</source>
          <target state="translated">비트 암호화에서 텍스트 라도 손상 되 면 하나의 일반 텍스트 비트가 손상 되 고 시프트 레지스터 손상 되었습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This results in the next several plain text increments being mangled until the bad bit is shifted out of the shift register.</source>
          <target state="translated">따라서 다음으로 몇 가지 일반 텍스트 비트는 잘못 된 비트 시프트 레지스터 밖으로 이동 될 때까지 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default feedback size can vary by algorithm, but is typically either 8 bits or the number of bits of the block size.</source>
          <target state="translated">기본 피드백 크기 알고리즘에 따라 달라질 수 있습니다. 있지만 일반적으로 8 비트 또는 블록 크기의 비트 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can alter the number of feedback bits by using the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*&gt; property.</source>
          <target state="translated">사용 하 여 피드백 비트 수를 변경할 수는 &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*&gt;속성.&lt;/xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Algorithms that support CFB use this property to set the feedback.</source>
          <target state="translated">CFB를 지 원하는 알고리즘 피드백을 설정 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Cipher Text Stealing (<bpt id="p1">&lt;xref uid="langword_csharp_CTS" name="CTS" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) mode handles any length of plain text and produces cipher text whose length matches the plain text length.</source>
          <target state="translated">암호 텍스트 가로채기 (<bpt id="p1">&lt;xref uid="langword_csharp_CTS" name="CTS" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 모드는 일반 텍스트의 길이 처리 하 고 암호화 길이가 일반 텍스트 길이 일치 하는 텍스트를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This mode behaves like the <bpt id="p1">&lt;xref uid="langword_csharp_CBC" name="CBC" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> mode for all but the last two blocks of the plain text.</source>
          <target state="translated">처럼 작동 하며이 모드는 <bpt id="p1">&lt;xref uid="langword_csharp_CBC" name="CBC" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 모두에 대 한 모드는 일반 텍스트의 마지막 두 개의 차단 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The Electronic Codebook (<bpt id="p1">&lt;xref uid="langword_csharp_ECB" name="ECB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) mode encrypts each block individually.</source>
          <target state="translated">Electronic Codebook (<bpt id="p1">&lt;xref uid="langword_csharp_ECB" name="ECB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 모드는 각 블록을 개별적으로 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks.</source>
          <target state="translated">모든 블록의 일반 텍스트를 동일 하 고 같은 메시지에 있거나 있는 동일한 키로 암호화 된 다른 메시지에 동일한 암호화 텍스트 블록으로 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>:  This mode is not recommended because it opens the door for multiple security exploits.</source>
          <target state="translated"><bpt id="p1">**</bpt>중요 한<ept id="p1">**</ept>:이 모드는 여러 보안 위험에 노출 될 수 있으므로 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time.</source>
          <target state="translated">암호화할 일반 텍스트 반복 있으면을 한 번에 한 블록씩 분할 되어야 암호화 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It is also possible to use block analysis to determine the encryption key.</source>
          <target state="translated">블록 분석에 암호화 키를 사용 하는 것도 가능 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</source>
          <target state="translated">또한 사용자는 대체 하 고 개별 블록을 블록 저장 하 고 검색 하지 않고 다른 지점에서 스트림에 삽입을 교환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Output Feedback (<bpt id="p1">&lt;xref uid="langword_csharp_OFB" name="OFB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) mode processes small increments of plain text into cipher text instead of processing an entire block at a time.</source>
          <target state="translated">출력 피드백 (<bpt id="p1">&lt;xref uid="langword_csharp_OFB" name="OFB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) 모드를 한 번에 전체 블록을 처리 하는 대신 일반 텍스트의 증가 폭이 작을수록를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This mode is similar to <bpt id="p1">&lt;xref uid="langword_csharp_CFB" name="CFB" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; the only difference between the two modes is the way that the shift register is filled.</source>
          <target state="translated">이 모드는 비슷합니다 <bpt id="p1">&lt;xref uid="langword_csharp_CFB" name="CFB" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 교대조 등록 하는 방법은 두 가지 모드 간의 차이점에만 채워집니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If a bit in the cipher text is mangled, the corresponding bit of plain text will be mangled.</source>
          <target state="translated">비트 암호화의 텍스트 손상, 일반 텍스트의 해당 비트 손상 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, if there are extra or missing bits from the cipher text, the plain text will be mangled from that point on.</source>
          <target state="translated">그러나 암호 텍스트의 비트를 더 있거나 없는 경우 일반 텍스트 손상 됩니다 해당 지점에서에서.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">추가할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>