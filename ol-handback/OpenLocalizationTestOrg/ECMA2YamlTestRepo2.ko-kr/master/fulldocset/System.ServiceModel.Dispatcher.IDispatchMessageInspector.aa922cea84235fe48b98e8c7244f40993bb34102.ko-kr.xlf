<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">097cd7321faac8cfa95104f9921f78e112607e48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ServiceModel.Dispatcher.IDispatchMessageInspector.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">686949b337aa3f2ff1fa35a76110ed0a9825053d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95d22f93135e82422ad1b50c6e2cfd9d255cb044</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</source>
          <target state="translated">사용자 지정 검사 하거나 수정할 서비스 응용 프로그램에서 인바운드 및 아웃 바운드 응용 프로그램 메시지를 사용할 수 있는 메서드를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement IDispatchMessageInspector to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</source>
          <target state="translated">인바운드 또는 아웃 바운드 응용 프로그램 메시지는 요청 메시지를 호출자에 게 응답 메시지를 반환 하기 전에 또는 작업에 디스패치하기 전에 중 하나를 검사 하거나 수정 IDispatchMessageInspector를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</source>
          <target state="translated">지정 하 고 작업을 호출 하기 전에 메시지를 가로채 시나리오의 다 수가 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can log incoming application messages or perform some feature based on a message header.</source>
          <target state="translated">예를 들어, 들어오는 응용 프로그램 메시지를 기록 하거나 메시지 헤더를 기반으로 몇 가지 기능을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, message inspectors are inserted by a service behavior (&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;), an endpoint behavior (&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;), or a contract behavior (&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;).</source>
          <target state="translated">메시지 검사자는 서비스 동작에서 삽입 하는 일반적으로 (&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;), 끝점 동작 (&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;), 또는 계약 동작 (&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;).&lt;/xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt; &lt;/xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt; &lt;/xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior then adds the message inspector to the &lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt; collection.</source>
          <target state="translated">동작에 대 한 메시지 검사자를 추가 하는 다음의 &lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt;컬렉션.&lt;/xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about extending the runtime using behaviors, see <bpt id="p1">[</bpt>Extending ServiceHost and the Service Model Layer<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">동작을 사용 하 여 런타임을 확장 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>확장 ServiceHost 및 서비스 모델 계층<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt; method enables custom behavior after receiving the message but before dispatching it to the intended operation.</source>
          <target state="translated">- &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;메서드 동작을 활성화 사용자 지정 메시지를 받은 후 의도 된 작업에 디스패치하기 전에.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt; method enables custom behavior after the operation returns but before the reply is sent.</source>
          <target state="translated">- &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;메서드 동작을 활성화 사용자 지정 작업이 반환 된 후 회신이 전송 되기 전에.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  IDispatchMessageInspector objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; IDispatchMessageInspector 개체는 항상 또는 요청-회신 작업이 단방향 인지에 관계 없이 메시지를 발송 하는 동안 동일한 지점에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Called after an inbound message has been received but before the message is dispatched to the intended operation.</source>
          <target state="translated">호출 하기 전에 인바운드 메시지가 수신 된 후 메시지가 의도 된 작업에 디스패치 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the AfterReceiveRequest method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</source>
          <target state="translated">검사 하거나 수정 들어오는 메시지 및 현재 서비스 인스턴스를 제공한 클라이언트 채널 AfterReceiveRequest 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id="ph1">`correlationState`</ph> parameter in the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt; method.</source>
          <target state="translated">반환 값은; 상관 관계를 위해 사용 하려는 하는 개체 일 수 있습니다. 기능이 회복 되기까지는 <ph id="ph1">`correlationState`</ph> 에서 매개 변수는 &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;메서드.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  You cannot use the body of the message unless you buffer the entire message and make a copy.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 전체 메시지를 버퍼링 하 고 복사 하지 않으면 메시지의 본문을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id="ph1">`request`</ph> parameter.</source>
          <target state="translated">이 작업을 수행 하는 경우에 메시지의 두 복사본을 확인 해야: 하나를 검사 하 고, 오류 코드 및 기타 덮어쓸 수는 <ph id="ph1">`request`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The request message.</source>
          <target state="translated">요청 메시지입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The incoming channel.</source>
          <target state="translated">들어오는 채널입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The current service instance.</source>
          <target state="translated">현재 서비스 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object used to correlate state.</source>
          <target state="translated">상태를 상호 연결 하는 데 사용 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This object is passed back in the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt; method.</source>
          <target state="translated">이 개체에 다시 전달 되는 &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt;메서드.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Called after the operation has returned but before the reply message is sent.</source>
          <target state="translated">작업이 반환 된 후 메시지를 보낼 회신 하기 전에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the BeforeSendReply method to perform custom behavior prior to sending the return message.</source>
          <target state="translated">반환 메시지를 보내기 전에 사용자 지정 동작을 수행 하려면 BeforeSendReply 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned from the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt; method that you can use to perform correlation between inbound and outbound calls to support your behavior.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph> 에서 반환 되는 개체는 &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;프로그램 동작을 지 원하는 인바운드 및 아웃 바운드 호출 간에 상관 관계를 수행 하는 데 사용할 수 있는 메서드.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The reply message.</source>
          <target state="translated">응답 메시지입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This value is null if the operation is one way.</source>
          <target state="translated">이 값은 작업이 단방향 이면 null입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The correlation object returned from the &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt; method.</source>
          <target state="translated">반환 된 상관 관계 개체는 &lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt;메서드.&lt;/xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>