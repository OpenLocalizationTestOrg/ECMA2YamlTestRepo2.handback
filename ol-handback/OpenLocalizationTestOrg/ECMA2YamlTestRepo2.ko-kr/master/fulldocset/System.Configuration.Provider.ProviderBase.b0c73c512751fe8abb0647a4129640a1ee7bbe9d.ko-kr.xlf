<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a2e66d7e40f7d8d5870e92dedd9e93a02692fff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.Provider.ProviderBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1dd64f3180b4f855f747c7d4427e4885b25e13e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a873359f9eda2af2d96a9b44264d423d2bd93b50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base implementation for the extensible provider model.</source>
          <target state="translated">확장 가능 공급자 모델에 대 한 기본 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The provider model is intended to encapsulate all or part of the functionality of multiple ASP.NET features, such as membership, profiles, and protected configuration.</source>
          <target state="translated">공급자 모델 전체 또는 일부의 여러 ASP.NET 등의 기능을 구성원 자격, 프로필 및 보호 되는 구성 기능을 캡슐화 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It allows the developer to create supporting classes that provide multiple implementations of the encapsulated functionality.</source>
          <target state="translated">개발자를 여러 번 구현 된 경우 캡슐화 된 기능을 제공 하는 지원 클래스를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, developers can write new features using the provider model.</source>
          <target state="translated">또한 개발자는 공급자 모델을 사용 하 여 새 기능을 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be an effective way to support multiple implementations of a feature's functionality without duplicating the feature code or recoding the application layer if the implementation method needs to be changed.</source>
          <target state="translated">이 효과적으로 기능 코드를 복제 하거나 구현 메서드를 변경 해야 하는 경우 응용 프로그램 계층을 다시 코딩 하지 않고 여러 번 구현 기능의 기능을 지원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ProviderBase class is simple, containing only a few basic methods and properties that are common to all providers.</source>
          <target state="translated">ProviderBase 클래스는 단순와 포함 된 몇 가지 기본적인 방법을 모든 공급자에 공통 된 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Feature-specific providers (such as &lt;xref:System.Web.Security.MembershipProvider&gt;) inherit from ProviderBase and establish the necessary methods and properties that the implementation-specific providers for that feature must support.</source>
          <target state="translated">기능 관련 공급자 (예: &lt;xref:System.Web.Security.MembershipProvider&gt;) ProviderBase에서 상속 하 고 필요한 메서드 및 해당 기능의 특정 구현 공급자가 지원 해야 하는 속성을 설정 합니다.&lt;/xref:System.Web.Security.MembershipProvider&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementation-specific providers (such as &lt;xref:System.Web.Security.SqlMembershipProvider&gt;) inherit in turn from a feature-specific provider (in this case, &lt;xref:System.Web.Security.MembershipProvider&gt;).</source>
          <target state="translated">구현 별 공급자 (같은 &lt;xref:System.Web.Security.SqlMembershipProvider&gt;)에서 상속 된 기능 관련 공급자 (이 경우 &lt;xref:System.Web.Security.MembershipProvider&gt;).&lt;/xref:System.Web.Security.MembershipProvider&gt; &lt;/xref:System.Web.Security.SqlMembershipProvider&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most important aspect of the provider model is that the implementation (for example, whether data is persisted as a text file or in a database) is abstracted from the application code.</source>
          <target state="translated">공급자 모델의 가장 중요 한 측면 (예를 들어 여부 데이터가 유지 되는지 또는 데이터베이스를 텍스트 파일로) 구현에서는 응용 프로그램 코드에서 추출 된입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the implementation-specific provider for the given feature is designated in a configuration file.</source>
          <target state="translated">구성 파일에 지정 된 기능에 대 한 구현 관련 공급자의 유형을 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The feature-level provider then reads in the type from the configuration file and acts as a factory to the feature code.</source>
          <target state="translated">기능 수준이 공급자 다음 구성 파일에서 형식의 읽고 기능 코드에 대 한 팩터리 역할을 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application developer can then use the feature classes in the application code.</source>
          <target state="translated">응용 프로그램 개발자는 응용 프로그램 코드에서 기능 클래스를 유도할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation type can be swapped out in the configuration file, eliminating the need to rewrite the code to accommodate the different implementation methodology.</source>
          <target state="translated">구현 형식 수 스왑할 수 구성 파일에서 다른 구현 방법을 수용 하기 위해 코드를 다시 작성할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The providers included with ASP.NET are mostly abstractions of data persistence implementations for features like profiles or membership.</source>
          <target state="translated">ASP.NET에 포함 된 공급자는 대부분 프로필 또는 멤버와 같은 기능에 대 한 데이터 지 속성 구현 추상화 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this model can be applied to any other kind of feature functionality that could be abstracted and implemented in multiple ways.</source>
          <target state="translated">그러나이 모델은 다른 종류의 추상화 하 고 여러 가지 방법으로 구현할 수 있는 기능 기능을 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Configuration.Provider.ProviderBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Configuration.Provider.ProviderBase"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</source>
          <target state="translated">관리 도구 또는 기타 사용자 인터페이스 (Ui)에 표시 하기 위해 적합 한 간략 하 고 친숙 한 설명을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a configured provider does not supply a description, the value of the &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt; property is returned as a default.</source>
          <target state="translated">구성 된 공급자는 설명의 값을 제공 하지 않는 경우는 &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt;속성이 기본값으로 반환 됩니다.&lt;/xref:System.Configuration.Provider.ProviderBase.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A brief, friendly description suitable for display in administrative tools or other UIs.</source>
          <target state="translated">간략 하 고 친숙 한 설명은 관리 도구 또는 다른 Ui에 표시 하기에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes the provider.</source>
          <target state="translated">공급자를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base class implementation internally tracks the number of times the provider's <ph id="ph1">`Initialize`</ph> method has been called.</source>
          <target state="translated">기본 클래스 구현을 내부적으로 추적 노드의 수가 공급자의 <ph id="ph1">`Initialize`</ph> 메서드가 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a provider is initialized more than once, an <ph id="ph1">`InvalidOperationException`</ph> is thrown stating that the provider is already initialized.</source>
          <target state="translated">공급자를 두 번 이상 초기화는 <ph id="ph1">`InvalidOperationException`</ph> 공급자 이미 초기화 되어 있다고 알리는 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because most feature providers call Initialize prior to performing provider-specific initialization, this method is a central location for preventing double initialization.</source>
          <target state="translated">대부분의 기능 공급자 호출 공급자 관련 초기화를 수행 하기 전에 초기화, 때문에이 메서드는 이중 초기화 방지 하기 위한 중앙 위치입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The friendly name of the provider.</source>
          <target state="translated">공급자의 이름입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</source>
          <target state="translated">이 공급자에 대 한 구성에 지정 된 공급자별 특성을 나타내는 이름/값 쌍의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The name of the provider is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">공급자 이름은 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The name of the provider has a length of zero.</source>
          <target state="translated">공급자의 이름에는 길이가&amp;0;에 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An attempt is made to call Initialize on a provider after the provider has already been initialized.</source>
          <target state="translated">공급자가 이미 초기화 된 다음에 공급자 Initialize를 호출 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the friendly name used to refer to the provider during configuration.</source>
          <target state="translated">공급자를 구성 하는 동안 참조 하는 데 사용 되는 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended pattern for this string is: [<bpt id="p1">*</bpt>Provider Creator<ept id="p1">*</ept>][<bpt id="p2">*</bpt>Implementation Type<ept id="p2">*</ept>][<bpt id="p3">*</bpt>Feature<ept id="p3">*</ept>]Provider.</source>
          <target state="translated">이 문자열에 대해 권장 되는 패턴은: [<bpt id="p1">*</bpt>공급자 작성자<ept id="p1">*</ept>] [<bpt id="p2">*</bpt>구현 형식<ept id="p2">*</ept>] [<bpt id="p3">*</bpt>기능<ept id="p3">*</ept>] 공급자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the &lt;xref:System.Configuration.Provider.ProviderBase.Description%2A&gt; property also provides a friendly description, the Name property is used as an identifier for the provider.</source>
          <target state="translated">하지만 &lt;xref:System.Configuration.Provider.ProviderBase.Description%2A&gt;속성에는 또한 간단한 설명을 제공, Name 속성은 공급자에 대 한 식별자로 사용 됩니다.&lt;/xref:System.Configuration.Provider.ProviderBase.Description%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The friendly name used to refer to the provider during configuration.</source>
          <target state="translated">공급자를 구성 하는 동안 참조에 사용 되는 이름입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>