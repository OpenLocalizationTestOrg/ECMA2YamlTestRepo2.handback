<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f55a66b17a0893f709950c5df6dd09df06a0d1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">878667b571c63df00255b56ed0f09c2cac7c108d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a29166a9764d72ef00d0e8acb4275872a44bc25e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides default implementation and base class definitions for a XAML writer.</source>
          <target state="translated">기본 XAML 작성기에 대 한 구현 및 기본 클래스 정의 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is not a working default XAML writer; you must either derive from XamlWriter and implement its abstract members, or use an existing XamlWriter derived class.</source>
          <target state="translated">작업 기본 XAML 작성기; 않습니다. XamlWriter에서 파생 또는 해당 추상 멤버를 구현 해야 합니다 또는 기존 XamlWriter를 사용 하 여 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two most relevant practical derived classes of XamlWriter are the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes, as the following details explain:      -   &lt;xref:System.Xaml.XamlXmlWriter&gt; processes a XAML node set and produces an XML text file.</source>
          <target state="translated">두 개의 가장 관련성이 높은 유용한의 파생된 클래스 XamlWriter 됩니다는 &lt;xref:System.Xaml.XamlXmlWriter&gt;및 &lt;xref:System.Xaml.XamlObjectWriter&gt;클래스를 설명 하는 다음 세부 정보:- &lt;xref:System.Xaml.XamlXmlWriter&gt;XAML 노드 집합을 처리 하 고 XML 텍스트 파일을 생성 합니다.&lt;/xref:System.Xaml.XamlXmlWriter&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlXmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</source>
          <target state="translated">이 클래스는 serialization에 대 한 또는 XAML의 메모리 내 표현으로 작동 하 고 XAML 파일 출력을 생성 하는 도구 작업의 일부로 서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Xaml.XamlObjectWriter&gt; processes a XAML node set and produces an object graph.</source>
          <target state="translated">- &lt;xref:System.Xaml.XamlObjectWriter&gt;XAML 노드 집합을 처리 하 고 개체 그래프를 생성 합니다.&lt;/xref:System.Xaml.XamlObjectWriter&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class might be used as part of a full or partial customization of a technology's XAML parser.</source>
          <target state="translated">이 클래스는 기술 XAML 파서에의 전체 또는 일부 사용자 지정의 일부로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Xaml.XamlWriterSettings&gt; is a class for settings that are used by a XamlWriter; however, by default, the &lt;xref:System.Xaml.XamlWriterSettings&gt; class does not hold any specific settings.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlWriterSettings&gt;XamlWriter;에서 사용 되는 설정에 대 한 클래스 그러나 기본적으로 &lt;xref:System.Xaml.XamlWriterSettings&gt;클래스 특정 설정을 저장 하지 않습니다.&lt;/xref:System.Xaml.XamlWriterSettings&gt;&lt;/xref:System.Xaml.XamlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XamlWriter base constructor does not use this settings class as an argument, nor does any other XamlWriter member.</source>
          <target state="translated">다른 XamlWriter 멤버 없고 XamlWriter 기본 생성자를 인수로이 설정 클래스를 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes include their own settings classes as construction arguments.</source>
          <target state="translated">대신,는 &lt;xref:System.Xaml.XamlXmlWriter&gt;및 &lt;xref:System.Xaml.XamlObjectWriter&gt;클래스 생성 인수로 고유한 설정 클래스를 포함 합니다.&lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlXmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>These settings classes are &lt;xref:System.Xaml.XamlXmlWriterSettings&gt; and &lt;xref:System.Xaml.XamlObjectWriterSettings&gt;.</source>
          <target state="translated">이러한 설정을 클래스는 &lt;xref:System.Xaml.XamlXmlWriterSettings&gt;및 &lt;xref:System.Xaml.XamlObjectWriterSettings&gt;.&lt;/xref:System.Xaml.XamlObjectWriterSettings&gt; &lt;/xref:System.Xaml.XamlXmlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The settings classes define actual settings values and are based on &lt;xref:System.Xaml.XamlWriterSettings&gt;, so that they can use the &lt;xref:System.Xaml.XamlWriterSettings&gt; merge feature.</source>
          <target state="translated">실제 설정 값을 정의 하 고 기반으로 하는 설정 클래스 &lt;xref:System.Xaml.XamlWriterSettings&gt;사용할 수 있도록는 &lt;xref:System.Xaml.XamlWriterSettings&gt;병합 기능.&lt;/xref:System.Xaml.XamlWriterSettings&gt; &lt;/xref:System.Xaml.XamlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Closes the XAML writer object.</source>
          <target state="translated">XAML 작성기 개체를 닫습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the base implementation, calling Close calls the &lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt; method with the <ph id="ph1">`isDisposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">기본 구현에서 호출 닫기를 호출은 &lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt;메서드는 <ph id="ph1">`isDisposing`</ph> 매개 변수로 <ph id="ph2">`true`</ph>.&lt;/xref:System.Xaml.XamlWriter.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">사용 하는 관리 되지 않는 리소스를 해제는 <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 관리 되는 리소스를 선택적으로 해제 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call the base class to get &lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt; = <ph id="ph1">`true`</ph>.</source>
          <target state="translated">가져오려는 기본 클래스를 호출 해야 &lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;= <ph id="ph1">`true`</ph>.&lt;/xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release the managed resources; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>관리 되는 리소스만 해제 하려면 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets whether &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called.</source>
          <target state="translated">가져옵니다 여부 &lt;xref:System.Xaml.XamlWriter.Dispose*&gt;호출한.&lt;/xref:System.Xaml.XamlWriter.Dispose*&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>경우 &lt;xref:System.Xaml.XamlWriter.Dispose*&gt;호출 않았으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.&lt;/xref:System.Xaml.XamlWriter.Dispose*&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, gets the active XAML schema context.</source>
          <target state="translated">파생된 클래스에서 구현 하는 경우 활성 XAML 스키마 컨텍스트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The active XAML schema context.</source>
          <target state="translated">활성 XAML 스키마 컨텍스트와 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.IDisposable.Dispose*&gt;.</source>
          <target state="translated">&lt;xref:System.IDisposable.Dispose*&gt;.&lt;/xref:System.IDisposable.Dispose*&gt; 를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end member node.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 최종 멤버 노드의 표시를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end object node.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우 최종 개체 노드의 표시를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</source>
          <target state="translated">파생된 클래스에서 구현 되는 경우 개체는 기본 또는 입력된 XAML 노드 집합에 개별 개체 값으로 지정 되지 않고 설정 되는 속성의 암시적 값에 대 한 개체를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a XAML namespace declaration node.</source>
          <target state="translated">파생된 클래스에서 구현 하는 경우 XAML 네임 스페이스 선언 노드를 씁니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The namespace declaration to write.</source>
          <target state="translated">작성 하는 네임 스페이스 선언 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Performs switching based on node type from the XAML reader (<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlReader.NodeType%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>) and calls the relevant <bpt id="p1">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method for the writer implementation.</source>
          <target state="translated">XAML 판독기에서 노드 형식을 기반으로 전환을 수행 (<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlReader.NodeType%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>) 하 고 관련 호출 <bpt id="p1">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기록기 구현에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">##</ph> Notes for Inheritors    The WriteNode method is not a virtual method because it has practical implementation for all existing &lt;xref:System.Xaml.XamlNodeType&gt; values.</source>
          <target state="translated"><ph id="ph1">##</ph>모든 기존에 대 한 실제 구현이 있기 때문에 상속자는 WriteNode 메서드에 대 한 정보는 가상 메서드가 아닙니다 &lt;xref:System.Xaml.XamlNodeType&gt;값.&lt;/xref:System.Xaml.XamlNodeType&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Based on &lt;xref:System.Xaml.XamlNodeType&gt;, WriteNode calls into the <ph id="ph1">`Write`</ph> virtual members that are dedicated to particular node types.</source>
          <target state="translated">에 따라 &lt;xref:System.Xaml.XamlNodeType&gt;, WriteNode 호출는 <ph id="ph1">`Write`</ph> 특정 노드 형식에 전용 가상 멤버.&lt;/xref:System.Xaml.XamlNodeType&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use WriteNode calls in your logic.</source>
          <target state="translated">새 노드 형식을 정의 되도록 XAML 형식 시스템과 XAML 노드 스트림 개념을 확장 하는 고급 XAML 쓰기 시나리오를 사용 하도록 설정한 경우 논리에서 WriteNode 호출을 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</source>
          <target state="translated">대신 클래스 또는 virtual 재정의 스위칭 논리 노드 형식에 대 한 사용자 고유의 대안을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The reader to use for node determination.</source>
          <target state="translated">노드 확인에 사용할 판독기입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default implementation encountered a <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is not in the default enumeration.</source>
          <target state="translated">기본 구현 된 <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 기본 열거형에는 없는 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start member node.</source>
          <target state="translated">파생된 클래스에서 구현 하는 경우 시작 멤버 노드에 대 한 표현을 씁니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member node to write.</source>
          <target state="translated">쓰기 구성원 노드입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start object node.</source>
          <target state="translated">파생된 클래스에서 구현 된 경우에 시작 개체 노드의 표현을 씁니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The XAML type of the object to write.</source>
          <target state="translated">쓸 개체의 XAML 형식입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a value node.</source>
          <target state="translated">파생된 클래스에서 구현 하는 경우 값 노드를 씁니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>