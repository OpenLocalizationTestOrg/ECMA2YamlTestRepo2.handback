<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5d0859faa3c5610b80c01a73f81ae4c2752b71a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.Compiler.CodeDomProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b44a1744e5a517e8a89e616debfde5ed79716f55</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1266f9254481fb65fe6dbb278edc959c58293ed3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for CodeDomProvider implementations.</source>
          <target state="translated">CodeDomProvider 구현에 대 한 기본 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is abstract.</source>
          <target state="translated">이 클래스는 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compiles an assembly based on the <bpt id="p1">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> trees contained in the specified array of <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects, using the specified compiler settings.</source>
          <target state="translated">에 따라 어셈블리를 컴파일합니다는 <bpt id="p1">&lt;xref href="System.CodeDom"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 배열에 포함 된 트리 <bpt id="p2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 개체, 지정된 된 컴파일러 설정을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the settings for the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일 설정을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the code to compile.</source>
          <target state="translated">형식의 배열 <bpt id="p1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일할 코드를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일 결과 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">이 메서드 또는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;파생된 클래스에서 메서드를 재정의&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
          <target state="translated">지정된 된 컴파일러 설정을 사용 하 여 지정된 된 파일에 포함 된 소스 코드에서 어셈블리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the settings for the compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일 설정을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An array of the names of the files to compile.</source>
          <target state="translated">배열 컴파일할 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일 결과를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">이 메서드 또는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;파생된 클래스에서 메서드를 재정의&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
          <target state="translated">지정된 된 컴파일러 설정을 사용 하 여 소스 코드를 포함 하는 문자열의 지정된 된 배열에서 어셈블리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the compiler settings for this compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이 컴파일에 대 한 컴파일러 설정을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An array of source code strings to compile.</source>
          <target state="translated">컴파일할 소스 코드 문자열의 배열입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that indicates the results of compilation.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 컴파일 결과를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; method is overridden in a derived class.</source>
          <target state="translated">이 메서드 또는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt;파생된 클래스에서 메서드를 재정의&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler*&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code compiler.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 새 코드 컴파일러를 만듭니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는에서 사용 되지 않는 <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; methods that are directly available in the code provider.</source>
          <target state="translated">호출 하는 메서드 대신은 &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;코드 공급자에서 직접 사용할 수 있는 메서드입니다.&lt;/xref:System.CodeDom.Compiler.ICodeCompiler&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeCompiler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used for compilation of <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeCompiler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 의 컴파일에 사용할 수 있는 <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 소스 코드 표현을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">지정된 된 값에 대 한 이스케이프 된 식별자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>CreateEscapedIdentifier tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated">CreateEscapedIdentifier 테스트 예약 된 식별자 충돌 하는지 여부 또는 언어 키워드 및 그렇다면 언어별 이스케이프 코드 서식을 사용 하 여 동일한 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">이스케이프 된 식별자 라고 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">이스케이프 된 식별자를 포함 하는 동일한 <ph id="ph1">`value`</ph> 되지만 키워드에서 식별자를 구분 하기 위해 추가 이스케이프 코드 서식 지정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">두 가지 구현 예는 앞의 <ph id="ph1">`value`</ph> 으로 "@" 붙이거나는 <ph id="ph2">`value`</ph> 와 "[" 및 "]"입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;.NET Framework 버전 1.0 및 1.1에서는이 메서드는 제공한는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;구현에서 반환 하는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;공급자의.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">코드 공급자 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;기본 클래스 구현을 호출&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; 하는이 메서드를 재정의 하지 않는 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The string for which to create an escaped identifier.</source>
          <target state="translated">문자열을 이스케이프 된 식별자를 만들입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The escaped identifier for the value.</source>
          <target state="translated">값에 대 한 이스케이프 된 식별자입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; method is overridden in a derived class.</source>
          <target state="translated">이 메서드 또는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;파생된 클래스에서 메서드를 재정의&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는에서 사용 되지 않는 <ph id="ph1">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; methods that are directly available in the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; class.</source>
          <target state="translated">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;클래스&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt; 에서 직접 사용할 수 있는 메서드&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; 를 호출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 생성에 사용할 수 있는 <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 소스 코드 표현을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified &lt;xref:System.IO.TextWriter&gt; for output.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 지정 된를 사용 하 여 새 코드 생성기를 만듭니다 &lt;xref:System.IO.TextWriter&gt;출력에 대 한.&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the specified &lt;xref:System.IO.TextWriter&gt; for output.</source>
          <target state="translated">이 메서드를 사용 하 여 지정 된 &lt;xref:System.IO.TextWriter&gt;출력에 대 한.&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
          <target state="translated">이 메서드는 소스 코드를 증분 업데이트 하는 더 많은 최적화 된 코드 생성을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base class implementation calls the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> and results in a &lt;xref:System.NotSupportedException&gt; if an &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; object is not returned.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;는 기본 클래스 구현 호출은 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;에서 사용 되지 않는 메서드는 <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> 남습니다는 &lt;xref:System.NotSupportedException&gt;경우는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;개체 반환 되지 않습니다.&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; &lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.TextWriter&gt; to use to output.</source>
          <target state="translated">A &lt;xref:System.IO.TextWriter&gt;사용할를 출력 합니다.&lt;/xref:System.IO.TextWriter&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 생성에 사용할 수 있는 <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 소스 코드 표현을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 출력에 대 한 지정 된 파일 이름을 사용 하 여 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the specified file name for output.</source>
          <target state="translated">이 메서드는 출력에 대 한 지정 된 파일 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base class implementation calls the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> and results in a &lt;xref:System.NotSupportedException&gt; if an &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; object is not returned.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;는 기본 클래스 구현 호출은 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;에서 사용 되지 않는 메서드는 <ph id="ph2">[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]</ph> 남습니다는 &lt;xref:System.NotSupportedException&gt;경우는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;개체 반환 되지 않습니다.&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; &lt;/xref:System.NotSupportedException&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The file name to output to.</source>
          <target state="translated">출력 하는 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to generate <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> based source code representations.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 생성에 사용할 수 있는 <bpt id="p2">&lt;xref href="System.CodeDom"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 소스 코드 표현을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code parser.</source>
          <target state="translated">파생된 클래스에서 재정의 되 면 새 코드 파서를 만듭니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to parse source code.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.CodeDom.Compiler.ICodeParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 소스 코드의 구문 분석을 사용할 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The base implementation always returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">기본 구현에서는 항상 반환 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance for the specified language.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 언어에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
          <target state="translated">CodeDOM 공급자는 지정 된 언어 이름에 대해 구현입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> does not have a configured provider on this computer.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">language</ph> <ept id="p1">&lt;/code&gt;</ept> 이 컴퓨터에 구성 된 공급자가 없습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에 게 필요한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets a <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance for the specified language and provider options.</source>
          <target state="translated">가져옵니다는 <bpt id="p1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 지정된 된 공급자 및 언어 옵션에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;이 메서드는 여러 공급자 중 하나를 선택적으로 사용할 수 있는 응용 프로그램에서 코드 공급자의 인스턴스를 만드는 데 가장 일반적으로.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>CreateProvider enables you to specify at run time the version of the code provider you want to instantiate.</source>
          <target state="translated">CreateProvider를 사용 하면 런타임 시 코드 공급자를 인스턴스화하 려의 버전을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the CreateProvider method.</source>
          <target state="translated">사용할 수 있는 코드 공급자가 디자인 타임에 알고 있는 경우 CreateProvider 메서드를 사용 하는 대신 해당 코드 공급자의 인스턴스를 만들어야 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use CreateProvider when you want to dynamically find a configured provider implementation for a specific language and options.</source>
          <target state="translated">특정 언어 및 옵션에 대 한 구성된 된 공급자 구현을 동적으로 찾으려고 할 때 CreateProvider를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names are case-insensitive.</source>
          <target state="translated">언어 이름은 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
          <target state="translated">지원 되는 공급자 옵션에 대 한 정보에 대 한 특정 CodeDOM 공급자 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt; method.</source>
          <target state="translated">유효성을 검사 하는 공급자 및 둘 이상의 공급자 구현을 언어 이름에 대해 구성 된 경우 공급자를 호출 하는 방법에 대 한 내용은의 설명 섹션을 참조 하십시오.는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;메서드.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A collection of provider options from the configuration file.</source>
          <target state="translated">구성 파일에서 공급자 옵션의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
          <target state="translated">CodeDOM 공급자는 지정 된 언어 이름 및 옵션에 대해 구현입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">지정된 된 값에 대 한 유효한 식별자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
          <target state="translated">CreateValidIdentifier 예약 된 식별자 충돌 하는지 여부를 테스트 하거나 언어 키워드 경우, 올바른 식별자를 반환 하려고 이름을 지정 하는 충돌 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
          <target state="translated">일반적으로 반환 된 식별자만 조금 수정 되어; 키워드에서 식별자를 구분 합니다. 예를 들어 이름 앞에 밑줄 ("_") 문자 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;.NET Framework 버전 1.0 및 1.1에서는이 메서드는 제공한는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;구현에서 반환 하는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;공급자의.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">코드 공급자 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;기본 클래스 구현을 호출&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; 하는이 메서드를 재정의 하지 않는 경우</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The string for which to generate a valid identifier.</source>
          <target state="translated">에 유효한 식별자를 생성 하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">지정된 된 값에 대 한 유효한 식별자입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Neither this method nor the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; method is overridden in a derived class.</source>
          <target state="translated">이 메서드 또는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt;파생된 클래스에서 메서드를 재정의&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator*&gt; 아닙니다</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
          <target state="translated">현재 언어에서 소스 코드 파일에 사용할 기본 파일 이름 확장명을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
          <target state="translated">이 속성은 코드 생성기 및 코드 컴파일러에서 생성 하거나 사용 하는 파일 확장명을 나타내기 위해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
          <target state="translated">파일 이름 확장명에 해당 하는 현재 언어의 원본 파일의 확장명입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The base implementation always returns &lt;xref:System.String&gt;.</source>
          <target state="translated">기본 구현에서는 항상 &lt;xref:System.String&gt;.&lt;/xref:System.String&gt; 반환</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정 된 코드 문서 개체 모델 (CodeDOM) 컴파일 단위에 대 한 코드를 생성 하 고 지정된 된 옵션을 사용 하 여 지정 된 텍스트 작성기에 보냅니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this method is provided by the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation that is returned by the &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; method of the provider.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt;.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;구현에서 반환 하는 &lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;공급자의.&lt;/xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt; &lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt; implementation is called by the base class.</source>
          <target state="translated">코드 공급자 &lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;기본 클래스 구현을 호출&lt;/xref:System.CodeDom.Compiler.ICodeGenerator&gt; 하는이 메서드를 재정의 하지 않는 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>