<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e512dc5614611cf6a3f1b7c90e46fadd58ce52e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Input.KeyEventArgs.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fab55cdd748130165f58b176b6ef66d2201b93c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44d73315d0c62c58b0d4fa7d100c19b3a32780c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides data for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> routed events, as well as related attached and Preview events.</source>
          <target state="translated">에 대 한 데이터를 제공는 <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 및 <bpt id="p2">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 라우트된 이벤트를와 연결 된 관련으로 미리 보기 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event data class is used with the following attached events:      -   &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;       This event data class is also used with the following routed events on base elements.</source>
          <target state="translated">이 이벤트 데이터 클래스는 다음 연결 된 이벤트와 함께 사용:- &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;- &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;이 이벤트 데이터 클래스는 기본 요소에서 다음과 같은 라우트된 이벤트에 사용할 수도 있습니다.&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>These routed events forward the previously listed attached events to make them more accessible to the general element model in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">일반 요소 모델에 쉽게 액세스할 수 있도록 앞에 나열 된 연결 된 이벤트를 전달 하는 이러한 라우트된 이벤트의 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.UIElement.KeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.UIElement.KeyDown?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName&gt;       The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</source>
          <target state="translated">- &lt;xref:System.Windows.UIElement.KeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.UIElement.KeyDown?displayProperty=fullName&gt;- &lt;xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName&gt;- &lt;xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName&gt;- &lt;xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName&gt;- &lt;xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName&gt;연결 된 이벤트와 기본 요소의 라우트된 이벤트의 이벤트 데이터를 공유 하 고 버블링 터널링 라우트된 이벤트의 버전 및 이벤트 데이터를 공유할 수도 있습니다.&lt;/xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.KeyDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.UIElement.KeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can affect the handled characteristics of the event as it travels the event route.</source>
          <target state="translated">이 경로 따라 이동할 때 이벤트의 처리 된 특성에 영향을 줄 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A key can be in both the up and toggled states or the down and toggled states.</source>
          <target state="translated">키를 시작 하 고 전환 된 상태 또는 눌러진 모두도 가능 및 상태를 설정/해제 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, determining whether a key is up or down is not as simple as checking the &lt;xref:System.Windows.Input.KeyEventArgs.KeyStates%2A&gt; value as a numeric value.</source>
          <target state="translated">이러한 이유로, 키가 놓여 또는 하위 검사로 간단 하지 않습니다. 결정 하는 &lt;xref:System.Windows.Input.KeyEventArgs.KeyStates%2A&gt;값을 숫자 값으로.&lt;/xref:System.Windows.Input.KeyEventArgs.KeyStates%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you should check the value by treating it as a flag enumeration.</source>
          <target state="translated">대신 플래그 열거형을 처리 하 여 값을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use an <ph id="ph1">`AND`</ph> comparison of the first bit.</source>
          <target state="translated">사용 하 여 프로그램 <ph id="ph1">`AND`</ph> 첫 번째 비트의 비교 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, use the helper properties &lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;, &lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;, and &lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt; to determine whether a given key is up, down, or toggled.</source>
          <target state="translated">또는 속성 도우미를 사용 하 여 &lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;, &lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;, 및 &lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt;형식이 확인 하려면 여부 지정된 된 키를, 아래쪽, 또는 고쳐져.&lt;/xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt; &lt;/xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt; &lt;/xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">새 인스턴스를 초기화는 <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The logical keyboard device associated with this event.</source>
          <target state="translated">이 이벤트와 연결 된 논리 키보드 장치입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The input source.</source>
          <target state="translated">입력된 원본입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The time when the input occurred.</source>
          <target state="translated">입력이 발생 한 시간입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The key referenced by the event.</source>
          <target state="translated">이벤트에서 참조 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the key that is part of dead key composition to create a single combined character.</source>
          <target state="translated">키를 조합 된 단일 문자를 만들기 위해 데드 키 컴퍼지션의 일부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</source>
          <target state="translated">데드 키를 누르면 하면 보이지 않는 문자를 생성 합니다. 하지만 다음 문자 키를 누르면 의해 생성 된 문자와 함께 사용 하도록 키 임을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Input.KeyEventArgs.Key%2A&gt; returns &lt;xref:System.Windows.Input.Key?displayProperty=fullName&gt;, you can use this property to get the actual key that was entered.</source>
          <target state="translated">경우 &lt;xref:System.Windows.Input.KeyEventArgs.Key%2A&gt;반환 &lt;xref:System.Windows.Input.Key?displayProperty=fullName&gt;, 입력 한 실제 키를 얻기 위해이 속성을 사용할 수 있습니다.&lt;/xref:System.Windows.Input.Key?displayProperty=fullName&gt; &lt;/xref:System.Windows.Input.KeyEventArgs.Key%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The key that is part of dead key composition to create a single combined character.</source>
          <target state="translated">키 조합 된 단일 문자를 만들기 위해 데드 키 컴퍼지션의 일부입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the keyboard key referenced by the event, if the key will be processed by an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">여는 키를 처리 하는 경우 이벤트에 의해 참조 된 키보드 키를 가져옵니다는 <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> referenced by the event.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트에서 참조 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the input source that provided this input.</source>
          <target state="translated">이 입력을 제공 하는 입력된 소스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The input source.</source>
          <target state="translated">입력된 원본입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Invokes event handlers in a type-specific way, which can increase event system efficiency.</source>
          <target state="translated">이벤트 시스템 효율성을 높일 수 있는 형식별 방법으로 이벤트 처리기를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation casts the generic handler as a &lt;xref:System.Windows.Input.KeyEventHandler&gt; and then invokes it.</source>
          <target state="translated">이 구현와으로 &lt;xref:System.Windows.Input.KeyEventHandler&gt;다음 호출 합니다.&lt;/xref:System.Windows.Input.KeyEventHandler&gt; 제네릭 처리기 캐스팅</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on this implementation pattern and the reasons for it, see &lt;xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A&gt; and <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">이 구현 패턴 및는 이유에 대 한 내용은 참조 하십시오. &lt;xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A&gt;및 <bpt id="p1">[</bpt>라우트된 이벤트 개요<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.&lt;/xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The generic handler to call in a type-specific way.</source>
          <target state="translated">제네릭 처리기 유형별 방식에서으로 호출입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The target to call the handler on.</source>
          <target state="translated">대상 처리기가 호출입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the key referenced by the event is in the down state.</source>
          <target state="translated">이벤트에 의해 참조 되는 키는 다운 상태에서 인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.Keyboard&gt; class also provides information about the state of the keys on the keyboard.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Keyboard&gt;클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.&lt;/xref:System.Windows.Input.Keyboard&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the &lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt; method returns whether a specified key is down.</source>
          <target state="translated">예를 들어,는 &lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;메서드 다운 지정된 된 키가 있는지 여부를 반환 합니다.&lt;/xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the key is down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>키가 중지 하도록 합니다. 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</source>
          <target state="translated">이벤트에서 참조 된 키보드 키 반복 되는 키가 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the key is repeated; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>키; 반복 하는 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There is no default value.</source>
          <target state="translated">기본값을 갖지 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the key referenced by the event is in the toggled state.</source>
          <target state="translated">이벤트에 의해 참조 되는 키 전환 된 상태에서 인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.Keyboard&gt; class also provides information about the state of the keys on the keyboard.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Keyboard&gt;클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.&lt;/xref:System.Windows.Input.Keyboard&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the &lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt; method returns whether a specified key is toggled.</source>
          <target state="translated">예를 들어,는 &lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;메서드가 지정된 된 키 설정/해제 여부를 반환 합니다.&lt;/xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the key is toggled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>키의 설정/해제; 한 경우 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There is no default value.</source>
          <target state="translated">기본값을 갖지 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the key referenced by the event is in the up state.</source>
          <target state="translated">이벤트에 의해 참조 되는 키 최신 상태 인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.Keyboard&gt; class also provides information about the state of the keys on the keyboard.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Keyboard&gt;클래스도 키보드 키의 상태에 대 한 정보를 제공 합니다.&lt;/xref:System.Windows.Input.Keyboard&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the &lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt; method returns whether a specified is up.</source>
          <target state="translated">예를 들어,는 &lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;메서드는 지정 된 되 인지 반환&lt;/xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the key is up; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>키가 그렇지 않으면 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There is no default value.</source>
          <target state="translated">기본값을 갖지 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets the keyboard key associated with the event.</source>
          <target state="translated">이벤트와 연결 된 키보드 키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> referenced by the event.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트에서 참조 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the state of the keyboard key associated with this event.</source>
          <target state="translated">이 이벤트와 연결 된 키보드 키의 상태를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>A key can be in both the up and toggled states or the down and toggled states.</source>
          <target state="translated">키를 시작 하 고 전환 된 상태 또는 눌러진 모두도 가능 및 상태를 설정/해제 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason, determining whether a key is up or down is not as simple as checking the KeyStates value as a numeric value.</source>
          <target state="translated">이러한 이유로 위나 아래로 키가 있는지 여부를 결정 하지 하기만 하면 됩니다 KeyStates 값을 숫자 값을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you should check the value by treating it as a flag enumeration.</source>
          <target state="translated">대신 플래그 열거형을 처리 하 여 값을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use an <ph id="ph1">`AND`</ph> comparison of the first bit.</source>
          <target state="translated">사용 하 여 프로그램 <ph id="ph1">`AND`</ph> 첫 번째 비트의 비교 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, use the helper properties &lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;, &lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;, and &lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt; to determine whether a given key is up, down, or toggled.</source>
          <target state="translated">또는 속성 도우미를 사용 하 여 &lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;, &lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;, 및 &lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt;형식이 확인 하려면 여부 지정된 된 키를, 아래쪽, 또는 고쳐져.&lt;/xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt; &lt;/xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt; &lt;/xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The state of the key.</source>
          <target state="translated">키의 상태입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets the keyboard key referenced by the event, if the key will be processed by the system.</source>
          <target state="translated">시스템에서의 키를 처리 하는 경우 이벤트에 의해 참조 키보드 키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> referenced by the event.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.Key"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 이벤트에서 참조 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>