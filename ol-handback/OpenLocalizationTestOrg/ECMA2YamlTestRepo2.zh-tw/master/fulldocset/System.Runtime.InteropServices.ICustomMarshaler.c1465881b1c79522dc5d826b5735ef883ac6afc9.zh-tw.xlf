<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac9498873469daff17ad3b38bfa9cf967028530a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ICustomMarshaler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3d7a3ab780f03841c56c39fd70df4d6e43792f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d826986e297e5e712358c7a49dc0ecaf8dc024fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom wrappers for handling method calls.</source>
          <target state="translated">提供用於處理方法呼叫的自訂包裝函式。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A marshaler provides a bridge between the functionality of old and new interfaces.</source>
          <target state="translated">封送處理器會提供舊的功能與新的介面之間的橋樑。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom marshaling provides the following benefits:      -   It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</source>
          <target state="translated">自訂封送處理具有下列優點:-它可讓用戶端應用程式，才能使用舊介面也與實作新介面伺服器搭配使用所設計。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   It enables client applications built to work with a new interface to work with servers that implement an old interface.</source>
          <target state="translated">-它可讓用戶端建置的應用程式使用新的介面，以使用實作舊介面的伺服器。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</source>
          <target state="translated">如果您有所導入了不同的封送處理行為，或不同的方式公開元件物件模型 (COM) 的介面，您可以設計自訂的封送處理器，而不是使用 interop 封送處理器。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</source>
          <target state="translated">藉由使用自訂封送處理器，您可以減少新.NET Framework 元件與現有的 COM 元件之間的差異。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, suppose that you are developing a managed interface called <ph id="ph1">`INew`</ph>.</source>
          <target state="translated">例如，假設您正在開發在受管理的介面稱為<ph id="ph1">`INew`</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</source>
          <target state="translated">當此介面會公開至 COM，透過標準 COM 可呼叫包裝函式 (CCW) 時，它會有相同的方法可作為受管理的介面，並使用 interop 封送處理器內建的封送處理規則。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Now suppose that a well-known COM interface called <ph id="ph1">`IOld`</ph> already provides the same functionality as the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">現在，假設是已知的 COM 介面呼叫<ph id="ph1">`IOld`</ph>已經提供的相同功能與<ph id="ph2">`INew`</ph>介面。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By designing a custom marshaler, you can provide an unmanaged implementation of <ph id="ph1">`IOld`</ph> that simply delegates the calls to the managed implementation of the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">您可以藉由設計自訂封送處理器，提供 unmanaged 的實作<ph id="ph1">`IOld`</ph>的委派呼叫的 managed 實作<ph id="ph2">`INew`</ph>介面。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</source>
          <target state="translated">因此，自訂封送處理器會做為 managed 和 unmanaged 介面之間的橋樑。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 自訂封送處理器不會叫用時呼叫，從 managed 程式碼僅分派介面上的 unmanaged 程式碼。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Defining the Marshaling Type    Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</source>
          <target state="translated">定義封送處理類型之前您可以建立自訂封送處理器，您必須定義要封送處理 managed 和 unmanaged 介面。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</source>
          <target state="translated">這些介面通常會執行相同的功能，但是以不同的方式公開給 managed 和 unmanaged 物件。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</source>
          <target state="translated">Managed 的編譯器會產生 managed 的介面從中繼資料，並產生介面看起來像任何其他受管理的介面。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows a typical interface.</source>
          <target state="translated">下列範例示範典型的介面。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept><ept id="p5">]</ept>       You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept> <ept id="p5">]</ept>您介面定義語言 (IDL) 中定義 unmanaged 的類型，並使用 Microsoft 介面定義語言 (MIDL) 編譯器進行編譯。    </target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</source>
          <target state="translated">定義在程式庫陳述式中的介面，並將它指派介面識別碼與通用唯一識別碼 (UUID) 屬性，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>       The MIDL compiler produces several output files.</source>
          <target state="translated"><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>MIDL 編譯器會產生多個輸出檔案。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the interface is defined in Old.idl, the output file Old_i.c defines a <ph id="ph1">`const`</ph> variable with the interface identifier (IID) of the interface, as the following example demonstrates.</source>
          <target state="translated">如果 Old.idl 中定義的介面時，輸出檔 Old_i.c 定義<ph id="ph1">`const`</ph>變數與介面識別項 (IID) 的介面，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>       The Old.h file is also produced by MIDL.</source>
          <target state="translated"><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>Old.h 檔案也會由 MIDL 產生的。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It contains a C++ definition of the interface that can be included in your C++ source code.</source>
          <target state="translated">它包含 c + + 定義可以包含在您的 c + + 程式碼的介面。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implementing the ICustomMarshaler Interface    Your custom marshaler must implement the ICustomMarshaler interface to provide the appropriate wrappers to the runtime.</source>
          <target state="translated">實作 ICustomMarshaler 介面您的自訂封送處理器必須實作 ICustomMarshaler 介面，以提供適當的包裝函式以執行階段。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following C# code displays the base interface that must be implemented by all custom marshalers.</source>
          <target state="translated">下列 C# 程式碼會顯示所有的自訂封送處理器必須實作的基底介面。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept><ept id="p5">]</ept>       The ICustomMarshaler interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept> <ept id="p5">]</ept> ICustomMarshaler 介面包括方法，可提供轉換支援、 清除支援，以及要封送處理資料的相關資訊。    </target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>|Type of operation|ICustomMarshaler method|Description|   |-----------------------|-----------------------------|-----------------|   |Conversion (from native to managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|Marshals a pointer to native data into a managed object.</source>
          <target state="translated">|類型的作業 |ICustomMarshaler 方法 |描述 |  |-----------------------|-----------------------------|-----------------|  |轉換 （從 managed 程式碼的原生） |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|將封送處理成受管理物件的原生資料的指標。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理會傳遞做為引數的 unmanaged 的介面。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom RCW for that type.|   |Conversion (from managed to native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|Marshals a managed object into a pointer to native data.</source>
          <target state="translated">封送處理器應傳回自訂 RCW 該類型的執行個體。 |  |轉換 （從 managed 為原生程式碼） |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|成原生資料的指標將 managed 的物件封送處理。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom CCW for that type.|   |Cleanup (of native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.|   |Cleanup (of managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.|   |Information (about native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|Returns the size of the unmanaged data to be marshaled.|      ### Conversion    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;       Marshals a pointer to native data into a managed object.</source>
          <target state="translated">封送處理器應傳回的自訂 CCW，該型別的執行個體。 |  |清除 （的原生程式碼） |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|可讓清除&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;方法所傳回之原生資料 (CCW) 封送處理器。 |  |清除 （的 managed 程式碼） |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|可讓清除&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;方法所傳回的 managed 資料 (RCW) 封送處理器。 |  |（原生程式碼的資訊） |&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|傳回 unmanaged 封送處理資料的大小。 |     # # # 轉換&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;之間封送處理成 managed 物件的原生資料指標。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理會傳遞做為引數的 unmanaged 的介面。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
          <target state="translated">封送處理器應傳回自訂 RCW 該類型的執行個體。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;       Marshals a managed object into a pointer to native data.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;將 managed 的物件成原生資料的指標。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
          <target state="translated">封送處理器應傳回自訂 CCW，該型別的執行的個體。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Cleanup    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.</source>
          <target state="translated">清除&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;啟用清除的原生資料 (CCW) 傳回的封送處理器&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;方法。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;可讓以清除所傳回的 managed 資料 (RCW) 封送處理器&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;方法。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Size Information    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;       Returns the size of the unmanaged data to be marshaled.</source>
          <target state="translated">調整大小資訊&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;傳回 unmanaged 封送處理資料的大小。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Implementing the GetInstance Method    In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a <ph id="ph1">`static`</ph> method called <ph id="ph2">`GetInstance`</ph> that accepts a &lt;xref:System.String&gt; as a parameter and has a return type of ICustomMarshaler.</source>
          <target state="translated">實作 GetInstance 方法，除了實作 ICustomMarshaler 介面之外，自訂封送處理器必須實作<ph id="ph1">`static`</ph>方法呼叫<ph id="ph2">`GetInstance`</ph>接受&lt;xref:System.String&gt;做為參數和傳回 ICustomMarshaler 的型別。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`static`</ph> method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</source>
          <target state="translated">這<ph id="ph1">`static`</ph>方法由 common language runtime 的 COM interop 層級來具現化的自訂封送處理器執行個體呼叫。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The string that is passed to <ph id="ph1">`GetInstance`</ph> is a cookie that the method can use to customize the returned custom marshaler.</source>
          <target state="translated">傳遞至字串<ph id="ph1">`GetInstance`</ph>cookie，方法可以用來自訂傳回的自訂封送處理器。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>      ## Applying MarshalAsAttribute    To use a custom marshaler, you must apply the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to the parameter or field that is being marshaled.</source>
          <target state="translated"><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph># # 套用 MarshalAsAttribute 若要使用自訂封送處理器，您必須先套用&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;屬性的參數或已封送處理的欄位。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You must also pass the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;constructor.</source>
          <target state="translated">您還必須傳遞&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;列舉值，以&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;建構函式。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In addition, you must specify the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field with one of the following named parameters:      -   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; (required): The assembly-qualified name of the custom marshaler.</source>
          <target state="translated">此外，您必須指定&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;欄位與具名參數的下列其中一種:- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;（必要）︰ 自訂封送處理器的組件限定名稱。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name should include the namespace and class of the custom marshaler.</source>
          <target state="translated">此名稱應該包含的命名空間和類別的自訂封送處理器。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</source>
          <target state="translated">如果自訂封送處理器未定義中使用組件中時，您必須指定定義所在的組件的名稱。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  You can use the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; field instead of the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 您可以使用&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;欄位而非&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;欄位。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; takes a type that is easier to specify.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;會更輕鬆地指定類型。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt; (optional): A cookie that is passed to the custom marshaler.</source>
          <target state="translated">- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;（選擇性）︰ cookie 傳遞至自訂封送處理器。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use the cookie to provide additional information to the marshaler.</source>
          <target state="translated">您可以使用 cookie 來提供其他資訊給封送處理器。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</source>
          <target state="translated">例如，如果相同的封送處理器用來提供的包裝函式的數字，cookie 會識別特定的包裝函式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The cookie is passed to the <ph id="ph1">`GetInstance`</ph> method of the marshaler.</source>
          <target state="translated">Cookie 傳遞至<ph id="ph1">`GetInstance`</ph>方法封送處理器。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute identifies the custom marshaler so it can activate the appropriate wrapper.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;屬性會識別自訂封送處理器，因此它可以啟動適當的包裝函式。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</source>
          <target state="translated">Common language runtime 的 interop 服務然後會檢查屬性和自訂封送處理器第一次會建立要封送處理引數 （參數或欄位） 的需求。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The runtime then calls the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; and &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; methods on the custom marshaler to activate the correct wrapper to handle the call.</source>
          <target state="translated">執行階段接著會呼叫&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;和&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;啟動正確的包裝函式來處理呼叫自訂封送處理器上的方法。&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using a Custom Marshaler    When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</source>
          <target state="translated">使用自訂的封送處理器時自訂封送處理器已完成，使用的自訂包裝函式的特定型別。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example shows the definition of the <ph id="ph1">`IUserData`</ph> managed interface:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept><ept id="p5">]</ept>       In the following example, the <ph id="ph2">`IUserData`</ph> interface uses the <ph id="ph3">`NewOldMarshaler`</ph> custom marshaler to enable unmanaged client applications to pass an <ph id="ph4">`IOld`</ph> interface to the <ph id="ph5">`DoSomeStuff`</ph> method.</source>
          <target state="translated">下列範例顯示定義<ph id="ph1">`IUserData`</ph>managed 的介面︰ <bpt id="p1">[!code-cpp</bpt> <bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept> <ept id="p5">]</ept>在下列範例中，<ph id="ph2">`IUserData`</ph>介面使用<ph id="ph3">`NewOldMarshaler`</ph>自訂封送處理器，讓未受管理的用戶端應用程式傳遞<ph id="ph4">`IOld`</ph>介面<ph id="ph5">`DoSomeStuff`</ph>方法。    </target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The managed description of the <ph id="ph1">`DoSomeStuff`</ph> method takes an <ph id="ph2">`INew`</ph> interface, as shown in the previous example, whereas the unmanaged version of <ph id="ph3">`DoSomeStuff`</ph> takes an <ph id="ph4">`IOld`</ph> interface pointer, as shown in the following example.</source>
          <target state="translated">受管理的描述<ph id="ph1">`DoSomeStuff`</ph>方法會採用<ph id="ph2">`INew`</ph>介面，如先前範例中所示，而未受管理的版本<ph id="ph3">`DoSomeStuff`</ph>採用<ph id="ph4">`IOld`</ph>的介面指標，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>       The type library that is generated by exporting the managed definition of <ph id="ph2">`IUserData`</ph> yields the unmanaged definition shown in this example instead of the standard definition.</source>
          <target state="translated"><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>類型程式庫所匯出的 managed 的定義產生<ph id="ph2">`IUserData`</ph>會產生未受管理的定義，而不是標準定義這個範例所示。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute applied to the <ph id="ph1">`INew`</ph> argument in the managed definition of the <ph id="ph2">`DoSomeStuff`</ph> method indicates that the argument uses a custom marshaler, as the following example shows.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;屬性套用至<ph id="ph1">`INew`</ph>引數中的 managed 定義<ph id="ph2">`DoSomeStuff`</ph>方法表示的引數使用自訂封送處理器，如下列範例所示。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept>       <bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept>  <bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept>  <bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept><ept id="p11">]</ept>       In the previous examples, the first parameter provided to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute is the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept><bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept><bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept> <ept id="p11">]</ept>在前一個範例中，第一個參數提供給&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;屬性是&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;列舉值<ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>。&lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;               </target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second parameter is the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field, which provides the assembly-qualified name of the custom marshaler.</source>
          <target state="translated">第二個參數是&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;欄位，提供自訂封送處理器的組件限定名稱。&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This name consists of the namespace and class of the custom marshaler (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</source>
          <target state="translated">此名稱包含命名空間和類別的自訂封送處理器 (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
          <target state="translated">不再需要時，會執行必要的清除的受管理的資料。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The managed object to be destroyed.</source>
          <target state="translated">要終結 managed 的物件。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
          <target state="translated">不再需要時，會執行必要的清除的未受管理的資料。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be destroyed.</source>
          <target state="translated">未受管理的資料也將被銷毀的指標。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the size of the native data to be marshaled.</source>
          <target state="translated">傳回要封送處理的原生資料的大小。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the native data.</source>
          <target state="translated">以位元組為單位，原生資料的大小。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts the managed data to unmanaged data.</source>
          <target state="translated">將受管理的資料轉換成未受管理的資料。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The managed object to be converted.</source>
          <target state="translated">要轉換的 managed 的物件。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to the COM view of the managed object.</source>
          <target state="translated">COM 檢視受管理物件的指標。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Converts the unmanaged data to managed data.</source>
          <target state="translated">將 unmanaged 的資料轉換成受管理的資料。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be wrapped.</source>
          <target state="translated">要包裝的 unmanaged 資料指標。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that represents the managed view of the COM data.</source>
          <target state="translated">表示 COM 資料的 managed 的檢視的物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>