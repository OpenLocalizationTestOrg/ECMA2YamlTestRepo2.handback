<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7e30c7bffed07c13e208d6728f4d0aa024cc921</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Reflection.TypeDelegator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">642acb21f93ac7261eb95c74fe9eee498f4f12f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f77c6300604b67af47b47e5fa168aa971028c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Wraps a <ph id="ph1">&amp;lt;</ph>xref:System.Type?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object and delegates methods to that <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">包裝<ph id="ph1">&amp;lt;</ph>xref:System.Type?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>物件和委派方法， <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by TypeDelegator.</source>
          <target state="translated">衍生自這個型別，並只有在您必須提供在中，自訂的成員再加上任何成員，您的程式所需而且尚未由 TypeDelegator 覆寫。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>TypeDelegator derives from &lt;xref:System.Type?displayProperty=fullName&gt; and implements most of the properties and methods of &lt;xref:System.Type&gt;.</source>
          <target state="translated">TypeDelegator 衍生自&lt;xref:System.Type?displayProperty=fullName&gt;並實作的屬性和方法的&lt;xref:System.Type&gt;。&lt;/xref:System.Type&gt;大部分&lt;/xref:System.Type?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For each member it implements, TypeDelegator automatically delegates to the corresponding member of an internal &lt;xref:System.Type&gt; object, which is supplied as an argument to the constructor.</source>
          <target state="translated">它會實作每個成員，TypeDelegator 自動委派至內部的對應成員&lt;xref:System.Type&gt;物件，以建構函式的引數的形式提供。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This internal &lt;xref:System.Type&gt; object is exposed to deriving classes by the <ph id="ph1">`protected`</ph>&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt; field.</source>
          <target state="translated">這個內部&lt;xref:System.Type&gt;物件公開給衍生類別<ph id="ph1">`protected`</ph>&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;欄位。&lt;/xref:System.Reflection.TypeDelegator.typeImpl&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some members of TypeDelegator have implementations even though the members themselves are simply inherited from &lt;xref:System.Type&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; TypeDelegator 的某些成員已實作，即使成員本身直接繼承自&lt;xref:System.Type&gt;.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In these cases, the implementation is provided by an overridden <ph id="ph1">`protected`</ph> method that has a name that ends in "Impl".</source>
          <target state="translated">在這些情況下，提供的實作所覆寫<ph id="ph1">`protected`</ph>方法結束於 」 Impl"中的名稱。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the implementation for all overloads of the &lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt; method is supplied by the overridden &lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt; method.</source>
          <target state="translated">例如，針對所有多載的實作&lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;提供方法的覆寫&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;方法。&lt;/xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt; &lt;/xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The implementation for inherited properties such as &lt;xref:System.Type.IsPublic%2A&gt; and &lt;xref:System.Type.IsNestedAssembly%2A&gt; is provided by the overridden &lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt; method.</source>
          <target state="translated">實作繼承屬性例如&lt;xref:System.Type.IsPublic%2A&gt;和&lt;xref:System.Type.IsNestedAssembly%2A&gt;提供的覆寫&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;方法。&lt;/xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt; &lt;/xref:System.Type.IsNestedAssembly%2A&gt; &lt;/xref:System.Type.IsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Deriving classes can provide a public constructor that takes a &lt;xref:System.Type&gt; object as its parameter and simply passes that object to the &lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt; constructor, or can set the internal &lt;xref:System.Type&gt; object in some other way.</source>
          <target state="translated">衍生類別可以提供的公用建構函式採用&lt;xref:System.Type&gt;物件做為其參數，並只將物件加入該&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;建構函式，或者可以設定內部&lt;xref:System.Type&gt;以其他方法的物件。&lt;/xref:System.Type&gt; &lt;/xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a deriving class uses a member that is not implemented by TypeDelegator, it must override that member and provide an implementation.</source>
          <target state="translated">如果衍生的類別使用 TypeDelegator 未實作的成員，它必須覆寫該成員，並提供實作。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The simplest implementation is to call the corresponding member on the internal &lt;xref:System.Type&gt; object exposed by the &lt;xref:System.Reflection.TypeDelegator.typeImpl&gt; field, but you can provide any implementation your application requires.</source>
          <target state="translated">最簡單的實作會呼叫對應的成員上的內部&lt;xref:System.Type&gt;所公開物件&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;欄位，但您可以提供任何應用程式所需的實作。&lt;/xref:System.Reflection.TypeDelegator.typeImpl&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the &lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt; constructor).</source>
          <target state="translated">不需要覆寫這些成員，如果它們不會使用您的應用程式或程式庫函式應用程式呼叫 (例如，藉由&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;建構函式)。&lt;/xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following virtual methods (<ph id="ph1">`Overridable`</ph> methods in Visual Basic) of &lt;xref:System.Type&gt; are not implemented by TypeDelegator: &lt;xref:System.Type.MakeGenericType%2A&gt;, &lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;, &lt;xref:System.Type.GetGenericArguments%2A&gt;, &lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;, &lt;xref:System.Type.MakeArrayType%2A&gt;, &lt;xref:System.Type.MakeByRefType%2A&gt;, &lt;xref:System.Type.MakePointerType%2A&gt;, &lt;xref:System.Type.GetEnumNames%2A&gt;, &lt;xref:System.Type.GetEnumValues%2A&gt;, &lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;, &lt;xref:System.Type.GetTypeCodeImpl%2A&gt;, &lt;xref:System.Type.IsEnumDefined%2A&gt;, &lt;xref:System.Type.IsEquivalentTo%2A&gt;.</source>
          <target state="translated">下列虛擬方法 (<ph id="ph1">`Overridable`</ph>方法，在 Visual Basic 中的) 的&lt;xref:System.Type&gt;未實作的 TypeDelegator: &lt;xref:System.Type.MakeGenericType%2A&gt; &lt;xref:System.Type.GetGenericTypeDefinition%2A&gt; &lt;xref:System.Type.GetGenericArguments%2A&gt; &lt;xref:System.Type.GetGenericParameterConstraints%2A&gt; &lt;xref:System.Type.MakeArrayType%2A&gt; &lt;xref:System.Type.MakeByRefType%2A&gt; &lt;xref:System.Type.MakePointerType%2A&gt; &lt;xref:System.Type.GetEnumNames%2A&gt; &lt;xref:System.Type.GetEnumValues%2A&gt; &lt;xref:System.Type.GetEnumUnderlyingType%2A&gt; &lt;xref:System.Type.GetTypeCodeImpl%2A&gt; &lt;xref:System.Type.IsEnumDefined%2A&gt;、 &lt;xref:System.Type.IsEquivalentTo%2A&gt;.&lt;/xref:System.Type.IsEquivalentTo%2A&gt; &lt;/xref:System.Type.IsEnumDefined%2A&gt; &lt;/xref:System.Type.GetTypeCodeImpl%2A&gt; &lt;/xref:System.Type.GetEnumUnderlyingType%2A&gt; &lt;/xref:System.Type.GetEnumValues%2A&gt; &lt;/xref:System.Type.GetEnumNames%2A&gt; &lt;/xref:System.Type.MakePointerType%2A&gt; &lt;/xref:System.Type.MakeByRefType%2A&gt; &lt;/xref:System.Type.MakeArrayType%2A&gt; &lt;/xref:System.Type.GetGenericParameterConstraints%2A&gt; &lt;/xref:System.Type.GetGenericArguments%2A&gt; &lt;/xref:System.Type.GetGenericTypeDefinition%2A&gt; &lt;/xref:System.Type.MakeGenericType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following virtual properties (<ph id="ph1">`Overridable`</ph> properties in Visual Basic) of &lt;xref:System.Type&gt; are not implemented by TypeDelegator: &lt;xref:System.Type.IsGenericType%2A&gt;, &lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;, &lt;xref:System.Type.IsGenericParameter%2A&gt;, &lt;xref:System.Type.ContainsGenericParameters%2A&gt;, &lt;xref:System.Type.DeclaringMethod%2A&gt;, &lt;xref:System.Type.GenericParameterAttributes%2A&gt;, &lt;xref:System.Type.GenericParameterPosition%2A&gt;, &lt;xref:System.Type.IsSecurityCritical%2A&gt;, &lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;, &lt;xref:System.Type.IsSecurityTransparent%2A&gt;.</source>
          <target state="translated">下列虛擬屬性 (<ph id="ph1">`Overridable`</ph>屬性在 Visual Basic 中的) 的&lt;xref:System.Type&gt;未實作的 TypeDelegator: &lt;xref:System.Type.IsGenericType%2A&gt; &lt;xref:System.Type.IsGenericTypeDefinition%2A&gt; &lt;xref:System.Type.IsGenericParameter%2A&gt; &lt;xref:System.Type.ContainsGenericParameters%2A&gt; &lt;xref:System.Type.DeclaringMethod%2A&gt; &lt;xref:System.Type.GenericParameterAttributes%2A&gt; &lt;xref:System.Type.GenericParameterPosition%2A&gt; &lt;xref:System.Type.IsSecurityCritical%2A&gt; &lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;、 &lt;xref:System.Type.IsSecurityTransparent%2A&gt;.&lt;/xref:System.Type.IsSecurityTransparent%2A&gt; &lt;/xref:System.Type.IsSecuritySafeCritical%2A&gt; &lt;/xref:System.Type.IsSecurityCritical%2A&gt; &lt;/xref:System.Type.GenericParameterPosition%2A&gt; &lt;/xref:System.Type.GenericParameterAttributes%2A&gt; &lt;/xref:System.Type.DeclaringMethod%2A&gt; &lt;/xref:System.Type.ContainsGenericParameters%2A&gt; &lt;/xref:System.Type.IsGenericParameter%2A&gt; &lt;/xref:System.Type.IsGenericTypeDefinition%2A&gt; &lt;/xref:System.Type.IsGenericType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with default properties.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用預設屬性的類別。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class specifying the encapsulating instance.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別指定封裝的執行個體。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This constructor is called from a class to generate a delegate based upon the <ph id="ph1">`Type`</ph> object for the class defining the method.</source>
          <target state="translated">這個建構函式從類別產生為基礎的委派呼叫<ph id="ph1">`Type`</ph>定義方法的類別的物件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The instance of the class &lt;xref:System.Type&gt; that encapsulates the call to the method of an object.</source>
          <target state="translated">類別的執行個體&lt;xref:System.Type&gt;封裝物件的方法呼叫。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;delegatingType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;delegatingType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the assembly of the implemented type.</source>
          <target state="translated">取得實作型別的組件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Assemblies are the deployment units in the common language runtime.</source>
          <target state="translated">組件是在 common language runtime 中的部署單位。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</source>
          <target state="translated">組件建立的命名空間解析要求，並決定哪些資源會公開外部、 哪些是可從組件內存取。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The common language runtime can determine and locate the assembly for any running object.</source>
          <target state="translated">Common language runtime 可以判斷及找出任何執行中物件的組件。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object representing the assembly of the implemented type.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Reflection.Assembly?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>物件，代表實作類型的組件。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the assembly's fully qualified name.</source>
          <target state="translated">取得組件的完整的名稱。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the assembly's fully qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含組件的完整的名稱。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the base type for the current type.</source>
          <target state="translated">取得目前類型的基底類型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The base type is the type from which this type directly inherits.</source>
          <target state="translated">基底類型是此類型直接繼承的型別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Since the &lt;xref:System.Object&gt; class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</source>
          <target state="translated">因為&lt;xref:System.Object&gt;類別類型是所有其他類型的超基底類別，它是唯一沒有基底類型的類型。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`null`</ph> is returned as the base type of the <ph id="ph2">`Object`</ph> type.</source>
          <target state="translated">在此情況下，<ph id="ph1">`null`</ph>傳回基底型別<ph id="ph2">`Object`</ph>型別。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The base type for a type.</source>
          <target state="translated">類型的基底類型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the fully qualified name of the implemented type.</source>
          <target state="translated">取得實作型別的完整的名稱。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A string containing the fully qualified name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">字串，包含目前的完整的名稱<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's fully qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含類型的完整的名稱。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the attributes assigned to the <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得指派給屬性<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method can be used to determine if the <ph id="ph1">`TypeDelegator`</ph> is abstract, public, and so on.</source>
          <target state="translated">這個方法可用來判斷是否<ph id="ph1">`TypeDelegator`</ph>是抽象、 public 等等。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_TypeAttributes" name="TypeAttributes" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the implementation attribute flags.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_TypeAttributes" name="TypeAttributes" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件，代表實作的屬性旗標。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the constructor that implemented the <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得建構函式實作<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated"><ph id="ph1">`callConvention`</ph>參數表示的進入點的呼叫慣例。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If no calling convention is specified, a default &lt;xref:System.Reflection.CallingConventions&gt; value of <ph id="ph1">`Standard`</ph> is used.</source>
          <target state="translated">如果沒有呼叫慣例會指定，預設值&lt;xref:System.Reflection.CallingConventions&gt;值<ph id="ph1">`Standard`</ph>用。&lt;/xref:System.Reflection.CallingConventions&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects using reflection.</source>
          <target state="translated">物件，來啟用繫結、 強制引數類型、 成員的引動過程和擷取<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件，使用反映。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，使用預設繫結器。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
          <target state="translated">呼叫慣例。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing a list of the parameter number, order, and types.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含清單的參數數目、 順序和類型。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Types cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; use an appropriate <bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">類型不可為<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 使用適當<bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>方法或要搜尋的方法，不含參數的空陣列。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> having the same length as the <ph id="ph1">`types`</ph> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>具有相同的長度為<ph id="ph1">`types`</ph>陣列，其項目代表之參數的方法來取得相關聯的屬性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the method that matches the specified criteria, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if a match cannot be found.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件的方法之符合指定的準則，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果找不到相符項目。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.ConstructorInfo&gt; objects representing constructors defined for the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回的陣列&lt;xref:System.Reflection.ConstructorInfo&gt;代表包裝由目前類型所定義的建構函式物件<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.ConstructorInfo&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Class initializers are available only through <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, and <ph id="ph4">`GetConstructors`</ph>.</source>
          <target state="translated">類別初始設定式是只能透過<ph id="ph1">`GetMember`</ph>， <ph id="ph2">`GetMembers`</ph>， <ph id="ph3">`FindMembers`</ph>，和<ph id="ph4">`GetConstructors`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the specified constructors defined for this class.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_ConstructorInfo" name="ConstructorInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含為這個類別所定義的指定建構函式。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">如果未不定義任何建構函式，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</source>
          <target state="translated">根據指定的參數的值，只有公用建構函式或公用和非公用建構函式會傳回。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</source>
          <target state="translated">傳回定義此類型，指定是否要搜尋的型別繼承鏈結的所有自訂屬性。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否要搜尋這個類型的繼承鏈結以尋找屬性。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An array of objects containing all the custom attributes defined for this type.</source>
          <target state="translated">物件包含為這個類型定義的自訂屬性的陣列。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns an array of custom attributes identified by type.</source>
          <target state="translated">傳回類型所識別的自訂屬性的陣列。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">陣列的類型所識別的自訂屬性。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否要搜尋這個類型的繼承鏈結以尋找屬性。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An array of objects containing the custom attributes defined in this type that match the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifying whether to search the type's inheritance chain, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if no custom attributes are defined on this type.</source>
          <target state="translated">包含此類型中定義的比對的自訂屬性的物件陣列<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p1">&lt;/code&gt;</ept>參數，指定是否要搜尋的型別繼承鏈結，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>這個類型上所定義的自訂屬性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the &lt;xref:System.Type&gt; of the object encompassed or referred to by the current array, pointer or ByRef.</source>
          <target state="translated">傳回&lt;xref:System.Type&gt;之物件所內含或參考目前陣列、 指標或 ByRef。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the object encompassed or referred to by the current array, pointer or <bpt id="p1">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the current &lt;xref:System.Type&gt; is not an array, a pointer or a <bpt id="p3">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Type&gt;物件所內含或參考目前的陣列的指標或<bpt id="p1">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果目前&lt;xref:System.Type&gt;不是陣列、 指標或<bpt id="p3">&lt;xref uid="langword_csharp_ByRef" name="ByRef" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the specified event.</source>
          <target state="translated">傳回指定的事件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.<ph id="ph2">`IgnoreCase`</ph>, the case of the <ph id="ph3">`name`</ph> parameter is ignored.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>是&lt;xref:System.Reflection.BindingFlags&gt;。<ph id="ph2">`IgnoreCase`</ph>、 案例的<ph id="ph3">`name`</ph>參數已忽略。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The name of the event to get.</source>
          <target state="translated">若要取得事件的名稱。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.EventInfo&gt; object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">&lt;xref:System.Reflection.EventInfo&gt;物件，表示事件宣告或繼承此型別與指定的名稱。&lt;/xref:System.Reflection.EventInfo&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no such event is found.</source>
          <target state="translated">這個方法會傳回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不找到任何這類事件。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.EventInfo&gt; objects representing all the public events declared or inherited by the current <bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回的陣列&lt;xref:System.Reflection.EventInfo&gt;物件代表的所有公用事件所宣告或繼承目前<bpt id="p1">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.EventInfo&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns an array of type <bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the events declared or inherited by the current type.</source>
          <target state="translated">傳回類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含所有事件所宣告或繼承目前的類型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">如果有任何事件，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns the events specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the current <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回在指定的事件<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept> ，所宣告或繼承目前<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the events specified in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_EventInfo" name="EventInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含中指定的事件<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">如果有任何事件，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns a &lt;xref:System.Reflection.FieldInfo&gt; object representing the field with the specified name.</source>
          <target state="translated">傳回&lt;xref:System.Reflection.FieldInfo&gt;物件，代表具有指定名稱的欄位。&lt;/xref:System.Reflection.FieldInfo&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">使用<ph id="ph1">`bindingAttr`</ph> &lt;xref:System.Reflection.BindingFlags&gt;。傳回所有的公用和非公用欄位 nonPublic。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.</source>
          <target state="translated">使用<ph id="ph1">`BindingFlags.IgnoreCase`</ph>來搜尋不區分大小寫，預設會忽略欄位的大小寫。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The name of the field to find.</source>
          <target state="translated">要尋找的欄位名稱。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the field declared or inherited by this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> with the specified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件，代表欄位宣告或繼承由此<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>具有指定名稱。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no such field is found.</source>
          <target state="translated">傳回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不找到任何這類的欄位。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.FieldInfo&gt; objects representing the data fields defined for the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回的陣列&lt;xref:System.Reflection.FieldInfo&gt;物件包裝由目前類型所代表資料欄位定義<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.FieldInfo&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The GetFields method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated">GetFields 方法不會傳回欄位以特定順序，例如依字母順序排列或按宣告順序。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">您的程式碼必須依賴欄位會傳回的順序，因為該順序可能會有所不同。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">使用<ph id="ph1">`bindingAttr`</ph> &lt;xref:System.Reflection.BindingFlags&gt;。傳回所有的公用和非公用欄位 nonPublic。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the fields declared or inherited by the current <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_FieldInfo" name="FieldInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>其中包含的欄位所宣告或繼承目前<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An empty array is returned if there are no matched fields.</source>
          <target state="translated">如果沒有相符的欄位，會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the specified interface implemented by the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回指定包裝由目前類型所實作的介面<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the interface implemented by the current class.</source>
          <target state="translated">目前類別所實作的介面的完整的名稱。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the case is to be ignored; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果該案例會被忽略;否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件代表由目前類別實作 （直接或間接），以符合指定之名稱的完整限定名稱的介面。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If no interface that matches name is found, null is returned.</source>
          <target state="translated">如果沒有符合名稱的介面找不到 null 會傳回。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns an interface mapping for the specified interface type.</source>
          <target state="translated">傳回指定的介面類型的介面對應。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</source>
          <target state="translated">介面對應代表介面如何對應到實作該介面的類別上的實際方法。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; of the interface to retrieve a mapping of.</source>
          <target state="translated">&lt;xref:System.Type&gt;要擷取的對應的介面。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.InterfaceMapping&gt; object representing the interface mapping for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">interfaceType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Reflection.InterfaceMapping&gt;物件，代表的介面對應<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">interfaceType</ph> <ept id="p1">&lt;/code&gt;</ept>。&lt;/xref:System.Reflection.InterfaceMapping&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">傳回所有目前的類別和其基底類別上實作的介面。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含所有在目前的類別和其基底類別上實作的介面。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">如果未定義，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">type</ph><ept id="p2">&lt;/code&gt;</ept>, and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">bindingAttr</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
          <target state="translated">傳回成員 （屬性、 方法、 建構函式、 欄位、 事件和巢狀型別） 所指定給定<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>， <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">type</ph> <ept id="p2">&lt;/code&gt;</ept>，和<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">bindingAttr</ph> <ept id="p3">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic 所有成員會被都視為。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">如果沒有相符的項目，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The name of the member to get.</source>
          <target state="translated">要取得之成員的名稱。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The type of members to get.</source>
          <target state="translated">若要取得的成員類型。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the members of the current class and its base class meeting the specified criteria.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含目前的類別和其基底類別，符合指定的準則的所有成員。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns members specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">傳回所指定的成員<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is &lt;xref:System.Reflection.BindingFlags&gt;.NonPublic 所有成員會被都視為。&lt;/xref:System.Reflection.BindingFlags&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">如果沒有相符的項目，則會傳回空陣列。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the members of the current class and its base classes that meet the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept> filter.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含目前類別及符合其基底類別的所有成員<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept>篩選器。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</source>
          <target state="translated">搜尋指定的參數符合指定引數類型和修飾詞，使用指定的繫結條件約束和指定的呼叫慣例的方法。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated"><ph id="ph1">`callConvention`</ph>參數表示的進入點的呼叫慣例。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If no &lt;xref:System.Reflection.CallingConventions&gt; is specified, a default <ph id="ph1">`CallingConventions`</ph> value of <ph id="ph2">`Standard`</ph> is used.</source>
          <target state="translated">如果沒有&lt;xref:System.Reflection.CallingConventions&gt;指定，預設值<ph id="ph1">`CallingConventions`</ph>值<ph id="ph2">`Standard`</ph>用。&lt;/xref:System.Reflection.CallingConventions&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The method name.</source>
          <target state="translated">方法名稱。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects using reflection.</source>
          <target state="translated">物件，來啟用繫結、 強制引數類型、 成員的引動過程和擷取<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件，使用反映。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，使用預設繫結器。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
          <target state="translated">呼叫慣例。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing a list of the parameter number, order, and types.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含清單的參數數目、 順序和類型。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Types cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; use an appropriate <bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">類型不可為<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 使用適當<bpt id="p2">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>方法或要搜尋的方法，不含參數的空陣列。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> having the same length as the <ph id="ph1">`types`</ph> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifier" name="ParameterModifier" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>具有相同的長度為<ph id="ph1">`types`</ph>陣列，其項目代表之參數的方法來取得相關聯的屬性。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfoInfo" name="MethodInfoInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the implementation method that matches the specified criteria, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if a match cannot be found.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfoInfo" name="MethodInfoInfo" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件符合指定的準則，實作方法或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果找不到相符項目。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.MethodInfo&gt; objects representing specified methods of the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回的陣列&lt;xref:System.Reflection.MethodInfo&gt;物件，代表指定的類型方法的包裝由目前<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref uid="langword_csharp_MethodInfo" name="MethodInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects representing the methods defined on this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">陣列<bpt id="p1">&lt;xref uid="langword_csharp_MethodInfo" name="MethodInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件代表定義上的方法<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a nested type specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> and in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept> that are declared or inherited by the type represented by the current <bpt id="p3">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回所指定的巢狀的類型<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>和<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">bindingAttr</ph> <ept id="p2">&lt;/code&gt;</ept> ，所宣告或繼承表示由目前類型所<bpt id="p3">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The nested type's name.</source>
          <target state="translated">巢狀型別名稱。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the nested type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>物件，代表巢狀的類型。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Returns the nested types specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the type wrapped by the current <bpt id="p2">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回在指定的巢狀型別<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">bindingAttr</ph> <ept id="p1">&lt;/code&gt;</ept>所宣告或繼承包裝由目前類型所<bpt id="p2">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the nested types.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_Type" name="Type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含巢狀型別。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns an array of &lt;xref:System.Reflection.PropertyInfo&gt; objects representing properties of the type wrapped by the current <bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">傳回的陣列&lt;xref:System.Reflection.PropertyInfo&gt;代表包裝由目前類型的屬性物件<bpt id="p1">&lt;xref href="System.Reflection.TypeDelegator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Reflection.PropertyInfo&gt;</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref uid="langword_csharp_PropertyInfo" name="PropertyInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects representing properties defined on this <bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">陣列<bpt id="p1">&lt;xref uid="langword_csharp_PropertyInfo" name="PropertyInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>物件代表定義這個屬性<bpt id="p2">&lt;xref uid="langword_csharp_TypeDelegator" name="TypeDelegator" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</source>
          <target state="translated">當在衍生類別中覆寫時，搜尋其參數符合指定的引數類型和修飾詞，使用指定的繫結條件約束的指定屬性。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The property to get.</source>
          <target state="translated">要取得的屬性。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">位元遮罩，會影響搜尋的進行的方式。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">值是從零個或更多的位元旗標的組合<bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects via reflection.</source>
          <target state="translated">物件，來啟用繫結、 強制引數類型、 成員的引動過程和擷取<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>透過反映的物件。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，使用預設繫結器。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The return type of the property.</source>
          <target state="translated">屬性的傳回型別。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A list of parameter types.</source>
          <target state="translated">參數型別的清單。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The list represents the number, order, and types of the parameters.</source>
          <target state="translated">清單代表數目、 順序和類型的參數。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Types cannot be null; use an appropriate <bpt id="p1">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method or an empty array to search for a method without parameters.</source>
          <target state="translated">類型不可為 null。使用適當<bpt id="p1">&lt;xref uid="langword_csharp_GetMethod" name="GetMethod" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>方法或要搜尋的方法，不含參數的空陣列。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">為具有項目，代表要取得之方法的參數相關聯的屬性類型的長度相同的陣列。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.PropertyInfo&gt; object for the property that matches the specified criteria, or null if a match cannot be found.</source>
          <target state="translated">A&lt;xref:System.Reflection.PropertyInfo&gt;符合指定的準則，屬性的物件，或如果找不到相符項目，則為 null。&lt;/xref:System.Reflection.PropertyInfo&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the GUID (globally unique identifier) of the implemented type.</source>
          <target state="translated">取得實作類型的 GUID （全域唯一識別項）。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</source>
          <target state="translated">GUID （全域唯一識別項） 是用來識別在類別或介面的 128 位元的唯一識別碼字串。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</source>
          <target state="translated">它是主要適用於 Microsoft.NET Framework 和 COM 之間的互通性</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A GUID.</source>
          <target state="translated">GUID。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current &lt;xref:System.Type&gt; encompasses or refers to another type; that is, whether the current &lt;xref:System.Type&gt; is an array, a pointer or a ByRef.</source>
          <target state="translated">取得值，指出是否目前&lt;xref:System.Type&gt;內含或參考其他類型; 也就是說，是否目前&lt;xref:System.Type&gt;是陣列、 指標或將 ByRef。&lt;/xref:System.Type&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is an array, a pointer or a ByRef; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是陣列、 指標或將 ByRef; 否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Invokes the specified member.</source>
          <target state="translated">叫用指定的成員。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
          <target state="translated">要叫用的方法必須可存取，並提供尋找最符合指定的引數清單中，指定繫結器和引動過程屬性的條件約束。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A method will be invoked if both the following conditions are true:      -   The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</source>
          <target state="translated">如果下列條件成立，會叫用方法:-數字方法宣告中的參數等於指定的引數清單中的引數數目 （除非在成員上定義預設引數）。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>-   The type of each arguments can be converted by the binder to the type of the parameter.</source>
          <target state="translated">-每個引數的類型可以轉換為型別參數的繫結器。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The binder will find all the matching methods.</source>
          <target state="translated">繫結器會尋找所有相符的方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>These methods are found based upon the type of binding requested (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, and so on).</source>
          <target state="translated">這些方法找到要求的繫結的類型為基礎 (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>，<ph id="ph2">`BindingFlags.GetProperties`</ph>等等)。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
          <target state="translated">方法的集合會依名稱、 引數數目和一組繫結器中所定義的搜尋修飾詞進行篩選。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>After the method is selected, it will be invoked.</source>
          <target state="translated">選取方法之後，就會叫用。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Accessibility is checked at that point.</source>
          <target state="translated">協助工具會在該點檢查。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</source>
          <target state="translated">搜尋可能會控制哪一組方法會搜尋根據與方法相關聯的協助工具屬性。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt; method is responsible for selecting the method to be invoked.</source>
          <target state="translated">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;方法負責選取方法被叫用。&lt;/xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The default binder selects the most specific match.</source>
          <target state="translated">預設繫結器選取最適合的相符項目。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 會忽略存取限制為完全信任程式碼。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</source>
          <target state="translated">也就是說，私用建構函式、 方法、 欄位和屬性可以存取，而且只要完全信任程式碼使用反映來叫用。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Currently, <ph id="ph1">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.</source>
          <target state="translated">目前，<ph id="ph1">`InvokeMember`</ph>執行 Microsoft.NET Framework 反映語意的每個類型的物件。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the member specified by name is an array and the <ph id="ph1">`BindingFlags.GetField`</ph> flag is set on <ph id="ph2">`invokeAttr`</ph>, the <ph id="ph3">`args`</ph> array specifies the elements whose values are to be returned.</source>
          <target state="translated">如果依名稱指定的成員為陣列和<ph id="ph1">`BindingFlags.GetField`</ph>上設定旗標<ph id="ph2">`invokeAttr`</ph>、<ph id="ph3">`args`</ph>陣列指定其值要傳回的項目。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For example, the following call through <ph id="ph1">`Type`</ph> object <ph id="ph2">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:       <ph id="ph3">`String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`</ph>       You can use <ph id="ph4">`InvokeMember`</ph> to set one or more elements of a member array.</source>
          <target state="translated">例如，下列呼叫透過<ph id="ph1">`Type`</ph>物件<ph id="ph2">`t`</ph>傳回字串陣列 MyArray，呼叫物件的成員的第一個元素的值︰<ph id="ph3">`String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`</ph>您可以使用<ph id="ph4">`InvokeMember`</ph>以設定成員陣列的一個或多個項目。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>All elements are set to the same value.</source>
          <target state="translated">所有項目會設定為相同的值。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`args`</ph> array must be formatted as follows:      <ph id="ph2">```   {index1,       index2,, value}   ```</ph>       For example, to set the first member of MyArray from the previous example, the syntax is as follows:      <ph id="ph3">```   t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new       Variant[]{0,"Updated"});   ```</ph></source>
          <target state="translated"><ph id="ph1">`args`</ph>陣列必須以下列格式︰<ph id="ph2">```   {index1,       index2,, value}   ```</ph>比方說，若要從先前的範例設定 MyArray 的第一個成員，語法如下所示︰<ph id="ph3">```   t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new       Variant[]{0,"Updated"});   ```</ph></target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The name of the member to invoke.</source>
          <target state="translated">要叫用之成員的名稱。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This may be a constructor, method, property, or field.</source>
          <target state="translated">這可能是建構函式、 方法、 屬性或欄位。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If an empty string ("") is passed, the default member is invoked.</source>
          <target state="translated">如果將空字串 ("") 傳遞時，預設成員叫用。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The invocation attribute.</source>
          <target state="translated">中的引動過程屬性。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This must be one of the following <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> : <bpt id="p2">&lt;xref uid="langword_csharp_InvokeMethod" name="InvokeMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_CreateInstance" name="CreateInstance" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref uid="langword_csharp_GetField" name="GetField" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>, <bpt id="p6">&lt;xref uid="langword_csharp_SetField" name="SetField" href=""&gt;</bpt><ept id="p6">&lt;/xref&gt;</ept>, <bpt id="p7">&lt;xref uid="langword_csharp_GetProperty" name="GetProperty" href=""&gt;</bpt><ept id="p7">&lt;/xref&gt;</ept>, or <bpt id="p8">&lt;xref uid="langword_csharp_SetProperty" name="SetProperty" href=""&gt;</bpt><ept id="p8">&lt;/xref&gt;</ept>.</source>
          <target state="translated">This must be one of the following <bpt id="p1">&lt;xref href="System.Reflection.BindingFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> : <bpt id="p2">&lt;xref uid="langword_csharp_InvokeMethod" name="InvokeMethod" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref uid="langword_csharp_CreateInstance" name="CreateInstance" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref uid="langword_csharp_GetField" name="GetField" href=""&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>, <bpt id="p6">&lt;xref uid="langword_csharp_SetField" name="SetField" href=""&gt;</bpt><ept id="p6">&lt;/xref&gt;</ept>, <bpt id="p7">&lt;xref uid="langword_csharp_GetProperty" name="GetProperty" href=""&gt;</bpt><ept id="p7">&lt;/xref&gt;</ept>, or <bpt id="p8">&lt;xref uid="langword_csharp_SetProperty" name="SetProperty" href=""&gt;</bpt><ept id="p8">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">必須指定適當的引動過程屬性。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If a static member is to be invoked, the <bpt id="p1">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> flag must be set.</source>
          <target state="translated">要叫用靜態成員是否<bpt id="p1">&lt;xref uid="langword_csharp_Static" name="Static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>旗標必須設定。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects via reflection.</source>
          <target state="translated">物件，來啟用繫結、 強制引數類型、 成員的引動過程和擷取<bpt id="p1">&lt;xref uid="langword_csharp_MemberInfo" name="MemberInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>透過反映的物件。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，使用預設繫結器。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">See <bpt id="p1">&lt;xref href="System.Reflection.Binder"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">要叫用指定的成員物件。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，其中包含要叫用數目、 順序和類型成員的參數。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`args`</ph> contains an uninitialized <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</source>
          <target state="translated">如果<ph id="ph1">`args`</ph>包含未初始化<bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，它會被視為空字串，使用預設繫結器，可以擴展為 0、 0.0 或字串。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer" name="ParameterModifer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is the same length as <ph id="ph1">`args`</ph>, with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer" name="ParameterModifer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>也就是相同的長度為<ph id="ph1">`args`</ph>，與項目，代表要叫用之成員的引數與相關聯的屬性。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A parameter has attributes associated with it in the member's signature.</source>
          <target state="translated">參數具有與其相關聯成員的簽章中的屬性。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>For ByRef, use <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer.ByRef" name="ParameterModifer.ByRef" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, and for none, use <bpt id="p2">&lt;xref uid="langword_csharp_ParameterModifer.None" name="ParameterModifer.None" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">用於 ByRef <bpt id="p1">&lt;xref uid="langword_csharp_ParameterModifer.ByRef" name="ParameterModifer.ByRef" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，並為 none、 使用<bpt id="p2">&lt;xref uid="langword_csharp_ParameterModifer.None" name="ParameterModifer.None" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The default binder does exact matching on these.</source>
          <target state="translated">確實比對這些的預設繫結器。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Attributes such as <bpt id="p1">&lt;xref uid="langword_csharp_In" name="In" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref uid="langword_csharp_InOut" name="InOut" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> are not used in binding, and can be viewed using <bpt id="p3">&lt;xref uid="langword_csharp_ParameterInfo" name="ParameterInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">等屬性<bpt id="p1">&lt;xref uid="langword_csharp_In" name="In" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<bpt id="p2">&lt;xref uid="langword_csharp_InOut" name="InOut" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>則不會使用在繫結，而且您可以使用檢視<bpt id="p3">&lt;xref uid="langword_csharp_ParameterInfo" name="ParameterInfo" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An instance of <bpt id="p1">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to govern the coercion of types.</source>
          <target state="translated">執行個體<bpt id="p1">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用於管理類型的強制型轉。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This is necessary, for example, to convert a string that represents 1000 to a <bpt id="p1">&lt;xref uid="langword_csharp_Double" name="Double" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value, since 1000 is represented differently by different cultures.</source>
          <target state="translated">這是必要的比方說，代表到 1000年的 string 轉換成<bpt id="p1">&lt;xref uid="langword_csharp_Double" name="Double" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值，因為 1000年表示方式會因不同文化特性。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread's <bpt id="p3">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、 <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>目前的執行緒<bpt id="p3">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>用。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing parameter names that match up, starting at element zero, with the <ph id="ph1">`args`</ph> array.</source>
          <target state="translated">類型的陣列<bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含參數名稱，符合項目為零，開始與<ph id="ph1">`args`</ph>陣列。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>There must be no holes in the array.</source>
          <target state="translated">陣列中必須沒有安全漏洞。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`args`</ph>.</source>
          <target state="translated">If <ph id="ph1">`args`</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than <ph id="ph1">`namedParameters`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>大於<ph id="ph1">`namedParameters`</ph>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the remaining parameters are filled in order.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Length" name="Length" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>順序會填入其餘的參數。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the return value of the invoked member.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Object" name="Object" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>代表叫用的成員的傳回值。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is an array.</source>
          <target state="translated">傳回值，指出是否&lt;xref:System.Type&gt;是陣列。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is an array; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是陣列，否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified type can be assigned to this type.</source>
          <target state="translated">傳回值，指出指定的型別是否可以指派給這個型別。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The type to check.</source>
          <target state="translated">要檢查的類型。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified type can be assigned to this type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果指定的型別可以指派給這個型別。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is passed by reference.</source>
          <target state="translated">傳回值，指出是否&lt;xref:System.Type&gt;傳址方式傳遞。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is passed by reference; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;傳遞的參考; 否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is a COM object.</source>
          <target state="translated">傳回值，指出是否&lt;xref:System.Type&gt;是 COM 物件。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is a COM object; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是 COM 物件，否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">取得值，指出這個物件是否表示建構的泛型型別。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this object represents a constructed generic type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果這個物件代表建構的泛型型別。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Indicates whether a custom attribute identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> is defined.</source>
          <target state="translated">表示所識別的自訂屬性是否<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p1">&lt;/code&gt;</ept>定義。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">指定是否要搜尋這個類型的繼承鏈結以尋找屬性。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">陣列的類型所識別的自訂屬性。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if a custom attribute identified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p2">&lt;/code&gt;</ept> is defined; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果所識別的自訂屬性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">attributeType</ph> <ept id="p2">&lt;/code&gt;</ept>定義; 否則<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The custom attribute type cannot be loaded.</source>
          <target state="translated">無法載入自訂屬性型別。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is a pointer.</source>
          <target state="translated">傳回值，指出是否&lt;xref:System.Type&gt;的指標。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is a pointer; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是指標，否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the &lt;xref:System.Type&gt; is one of the primitive types.</source>
          <target state="translated">傳回值，指出是否&lt;xref:System.Type&gt;是其中一個基本類型。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Type&gt; is one of the primitive types; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Type&gt;是其中一個基本類型，否則<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</source>
          <target state="translated">傳回值，指出類型是否為實值類型。也就是不是類別或介面。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the type is a value type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果類型是實值類型。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets a value that identifies this entity in metadata.</source>
          <target state="translated">取得值，識別這個中繼資料中的實體。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">使用這個屬性取得的權杖可以傳遞至 unmanaged 反映 API。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Unmanaged 反映 API<ept id="p1">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A value which, in combination with the module, uniquely identifies this entity in metadata.</source>
          <target state="translated">值，與模組，可唯一識別這個中繼資料中的實體。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Gets the module that contains the implemented type.</source>
          <target state="translated">取得包含實作的類型的模組。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A module is a loadable unit that can contain type declarations and implementations.</source>
          <target state="translated">模組已載入的單位可以包含型別宣告和實作。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</source>
          <target state="translated">模組包含足夠的資訊來啟用 common language runtime 在載入模組，請找出所有實作位元。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Reflection.Module&gt; object representing the module of the implemented type.</source>
          <target state="translated">A&lt;xref:System.Reflection.Module&gt;代表模組的實作類型的物件。&lt;/xref:System.Reflection.Module&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Gets the name of the implemented type, with the path removed.</source>
          <target state="translated">取得實作的型別，名稱與移除的路徑。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A string containing the name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">字串，包含目前的名稱<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Only the simple name, not the fully qualified name, is returned.</source>
          <target state="translated">只有簡單名稱，不是完整限定名稱，會傳回。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>To get the name and the path, use &lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;.</source>
          <target state="translated">若要取得的名稱和路徑，請使用  &lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;.&lt;/xref:System.Reflection.TypeDelegator.FullName%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's non-qualified name.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含的型別非限定名稱。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Gets the namespace of the implemented type.</source>
          <target state="translated">取得實作型別的命名空間。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This property gets a string containing the namespace of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">這個屬性會取得字串，包含目前的命名空間<ph id="ph1">`TypeDelegator`</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">`TypeDelegator`</ph> is &lt;xref:System.Reflection.TypeFilter&gt;, the returned namespace is &lt;xref:System.Reflection&gt;.</source>
          <target state="translated">例如，如果<ph id="ph1">`TypeDelegator`</ph>為&lt;xref:System.Reflection.TypeFilter&gt;，傳回的命名空間為&lt;xref:System.Reflection&gt;.&lt;/xref:System.Reflection&gt; &lt;/xref:System.Reflection.TypeFilter&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type's namespace.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含類型的命名空間。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Gets a handle to the internal metadata representation of an implemented type.</source>
          <target state="translated">取得實作的型別之內部中繼資料表示的控制代碼。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A type handle is a unique integer value associated with each type.</source>
          <target state="translated">類型控制代碼是每個型別相關聯的唯一整數值。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The handle is unique during the runtime.</source>
          <target state="translated">在執行階段控制代碼是唯一的。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref uid="langword_csharp_RuntimeTypeHandle" name="RuntimeTypeHandle" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref uid="langword_csharp_RuntimeTypeHandle" name="RuntimeTypeHandle" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>A value indicating type information.</source>
          <target state="translated">值，表示型別資訊。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Gets the underlying &lt;xref:System.Type&gt; that represents the implemented type.</source>
          <target state="translated">取得基礎&lt;xref:System.Type&gt;表示已實作的型別。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The underlying type.</source>
          <target state="translated">基礎類型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>