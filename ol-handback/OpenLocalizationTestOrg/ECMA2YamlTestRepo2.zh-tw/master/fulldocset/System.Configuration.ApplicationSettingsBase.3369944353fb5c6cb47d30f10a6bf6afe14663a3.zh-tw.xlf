<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cca0d4d6132f8fe00c7cce0d6d5c774da5fd893</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.ApplicationSettingsBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f68e5973c7bbb85180ff2d63e9824825f819acec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">158a3b3bc1271ed48a42c7dfd92095a6995a3a84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.</source>
          <target state="translated">做為衍生具體的包裝函式類別的基底類別在 Windows Form 應用程式中實作應用程式設定功能。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ApplicationSettingsBase adds the following functionality to the &lt;xref:System.Configuration.SettingsBase&gt; class, which is used by Web-based applications:      -   The ability to detect attributes on a derived, settings wrapper class.</source>
          <target state="translated">ApplicationSettingsBase 新增下列功能以&lt;xref:System.Configuration.SettingsBase&gt;類別，以 Web 為基礎的應用程式所使用:-偵測衍生，設定包裝函式類別上的屬性的功能&lt;/xref:System.Configuration.SettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ApplicationSettingsBase supports the declarative model used for wrapper class properties, as described later.</source>
          <target state="translated">ApplicationSettingsBase 支援包裝函式的類別屬性，所使用的宣告式模型稍後所述。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Higher-level &lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt; and &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.</source>
          <target state="translated">-較高層級&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;和&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   Additional validation events that you can handle to ensure the correctness of individual settings.</source>
          <target state="translated">-您可以處理以確保個別設定正確的額外的驗證事件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from ApplicationSettingsBase.</source>
          <target state="translated">在應用程式設定架構中，若要存取一組設定屬性的您要從 ApplicationSettingsBase 衍生具體的包裝函式類別。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The wrapper class customizes ApplicationSettingsBase in the following ways:      -   For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class.</source>
          <target state="translated">包裝函式類別以下列方式自訂 ApplicationSettingsBase:-若要存取，對應強型別公開的每個設定屬性的屬性會加入至包裝函式類別。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This property has <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors for read/write application settings, but only a <ph id="ph3">`get`</ph> accessor for read-only settings.</source>
          <target state="translated">此屬性具有<ph id="ph1">`get`</ph>和<ph id="ph2">`set`</ph>存取子讀取/寫入應用程式設定，但僅限於<ph id="ph3">`get`</ph>唯讀設定的存取子。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-   Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on.</source>
          <target state="translated">-Appropriated 屬性必須套用至包裝函式類別的公用屬性是否設定應該支援漫遊設定，在使用，等等的設定提供者的預設值，表示設定屬性，例如設定的範圍 （應用程式或使用者） 的特性。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each property is required to specify its scope, using either &lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt; or &lt;xref:System.Configuration.UserScopedSettingAttribute&gt;.</source>
          <target state="translated">每個屬性都需要指定其範圍中，使用其中一個&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;或&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;.&lt;/xref:System.Configuration.UserScopedSettingAttribute&gt; &lt;/xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Application-scoped settings are read-only if the default &lt;xref:System.Configuration.LocalFileSettingsProvider&gt; is used.</source>
          <target state="translated">應用程式範圍的設定是唯讀如果預設&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;用。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ApplicationSettingsBase class uses reflection to detect these attributes at run time.</source>
          <target state="translated">ApplicationSettingsBase 類別會使用反映來偵測這些屬性在執行階段。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.</source>
          <target state="translated">大部分的這項資訊傳遞至設定提供者層，也就是負責儲存體、 持續性格式等等。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When an application has multiple settings wrapper classes, each class defines a <bpt id="p1">*</bpt>settings group<ept id="p1">*</ept>.</source>
          <target state="translated">當應用程式有多個設定包裝函式類別，每個類別定義<bpt id="p1">*</bpt>設定群組<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each group has the following characteristics:      -   A group can contain any number or type of property settings.</source>
          <target state="translated">每個群組具有下列特性:-群組可包含任何數目或類型的屬性設定。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-   If the group name is not explicitly set by the decorating the wrapper class with a &lt;xref:System.Configuration.SettingsGroupNameAttribute&gt;, then a name is automatically generated.</source>
          <target state="translated">-如果而將包裝函式類別沒有明確設定的群組名稱&lt;xref:System.Configuration.SettingsGroupNameAttribute&gt;，則會自動產生的名稱。&lt;/xref:System.Configuration.SettingsGroupNameAttribute&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, all client-based applications use the &lt;xref:System.Configuration.LocalFileSettingsProvider&gt; to provide storage.</source>
          <target state="translated">根據預設，所有的用戶端應用程式使用&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;提供儲存體。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">如果想要使用的替代設定提供者，然後包裝函式類別或屬性必須以裝飾對應&lt;xref:System.Configuration.SettingsProviderAttribute&gt;.&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about using application settings, see <bpt id="p1">[</bpt>Application Settings for Windows Forms<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需有關如何使用應用程式設定的詳細資訊，請參閱<bpt id="p1">[</bpt>適用於 Windows Form 應用程式設定<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class to its default state.</source>
          <target state="translated">初始化的執行個體<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別為其預設狀態。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">預設建構函式被為了在不沒有目前的設定包裝函式類別，衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;相關聯的任何元件的假設下運作</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When an instance of a wrapper class is created, inherited code will automatically perform the following actions:      1.</source>
          <target state="translated">繼承的程式碼建立包裝函式類別的執行個體時，將會自動執行下列動作︰ 1。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Reflect over the class.</source>
          <target state="translated">反映類別。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For each property on the wrapper marked with either <ph id="ph1">`[UserScopedSettingAttribute]`</ph> or <ph id="ph2">`[ApplicationScopedSettingAttribute]`</ph>, a corresponding &lt;xref:System.Configuration.SettingsProperty&gt; is created.</source>
          <target state="translated">包裝函式上的每一個屬性標示其中一種<ph id="ph1">`[UserScopedSettingAttribute]`</ph>或<ph id="ph2">`[ApplicationScopedSettingAttribute]`</ph>，相對應&lt;xref:System.Configuration.SettingsProperty&gt;建立。&lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Configuration.SettingsProperty&gt; has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.</source>
          <target state="translated">每個&lt;xref:System.Configuration.SettingsProperty&gt;有某些根據 （選擇性） 有包裝函式的屬性，例如 預設值或設定提供者的其他屬性設定其屬性。&lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All other attributes are simply put into an attribute bag, the &lt;xref:System.Configuration.SettingsProperty.Attributes%2A&gt; property of the &lt;xref:System.Configuration.SettingsProperty&gt; class.</source>
          <target state="translated">所有其他屬性會直接放入的屬性包，&lt;xref:System.Configuration.SettingsProperty.Attributes%2A&gt;屬性的&lt;xref:System.Configuration.SettingsProperty&gt;類別。&lt;/xref:System.Configuration.SettingsProperty&gt; &lt;/xref:System.Configuration.SettingsProperty.Attributes%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>5.</source>
          <target state="translated">5.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All &lt;xref:System.Configuration.SettingsProperty&gt; objects are added to a &lt;xref:System.Configuration.SettingsPropertyCollection&gt; represented by the &lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; property of the &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class.</source>
          <target state="translated">所有&lt;xref:System.Configuration.SettingsProperty&gt;物件加入至&lt;xref:System.Configuration.SettingsPropertyCollection&gt;由&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;屬性的&lt;xref:System.Configuration.ApplicationSettingsBase&gt;類別。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; &lt;/xref:System.Configuration.SettingsPropertyCollection&gt; &lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This collection is then passed to the &lt;xref:System.Configuration.SettingsBase.Initialize%2A&gt; method.</source>
          <target state="translated">這個集合會接著傳遞給&lt;xref:System.Configuration.SettingsBase.Initialize%2A&gt;方法。&lt;/xref:System.Configuration.SettingsBase.Initialize%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As implied by step 3 mentioned previously, &lt;xref:System.Configuration.ApplicationSettingsBase&gt; natively works with several property attributes, specifically the following: &lt;xref:System.Configuration.SettingsProviderAttribute&gt;, &lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;, and &lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;.</source>
          <target state="translated">步驟 3 先前所述，為隱含&lt;xref:System.Configuration.ApplicationSettingsBase&gt;原生適用於數個屬性的屬性，特別是以下︰ &lt;xref:System.Configuration.SettingsProviderAttribute&gt;， &lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;，和&lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;。&lt;/xref:System.Configuration.SettingsSerializeAsAttribute&gt; &lt;/xref:System.Configuration.DefaultSettingValueAttribute&gt; &lt;/xref:System.Configuration.SettingsProviderAttribute&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>All other settings attributes are simply passed through to the appropriate underlying provider.</source>
          <target state="translated">所有其他設定屬性會直接傳遞給適當的基礎提供者。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied owner component.</source>
          <target state="translated">初始化的執行個體<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別使用提供的擁有者元件。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This constructor is exactly equivalent to the &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt; constructor using the invocation:       <ph id="ph1">`ApplicationSettingsBase(owner, String.Empty)`</ph>       For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">這個建構函式相當於&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt;使用叫用的建構函式︰<ph id="ph1">`ApplicationSettingsBase(owner, String.Empty)`</ph>包裝函式類別具現化期間如何使用反映的相關資訊，請參閱預設&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;建構函式。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The component that will act as the owner of the application settings object.</source>
          <target state="translated">此元件可做為應用程式設定物件的擁有者。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied settings key.</source>
          <target state="translated">初始化的執行個體<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別使用提供的設定索引鍵。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property to the value of the <ph id="ph1">`settingsKey`</ph> parameter.</source>
          <target state="translated">這個建構函式初始化&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;屬性設為值的<ph id="ph1">`settingsKey`</ph>參數。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.</source>
          <target state="translated">這個屬性是用於釐清設定包裝函式類別相同的應用程式定義域中的不同執行個體。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">包裝函式類別具現化期間如何使用反映的相關資訊，請參閱預設&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;建構函式。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that uniquely identifies separate instances of the wrapper class.</source>
          <target state="translated">&lt;xref:System.String&gt;可唯一識別個別的執行個體的包裝函式類別。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the supplied owner component and settings key.</source>
          <target state="translated">初始化的執行個體<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別使用提供的擁有者的元件和設定索引鍵。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ComponentModel.IComponent&gt; object specified by the <ph id="ph1">`owner`</ph> parameter acts as the owner of the current instance of this applications settings class.</source>
          <target state="translated">&lt;xref:System.ComponentModel.IComponent&gt;所指定物件<ph id="ph1">`owner`</ph>參數做為此應用程式設定類別的目前執行個體的擁有者&lt;/xref:System.ComponentModel.IComponent&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>During the initialization of the settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, the owner's site is queried for a &lt;xref:System.Configuration.ISettingsProviderService&gt;.</source>
          <target state="translated">設定包裝函式類別初始化過程中，衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;、 擁有者的站台針對&lt;xref:System.Configuration.ISettingsProviderService&gt;.&lt;/xref:System.Configuration.ISettingsProviderService&gt;查詢&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">如果有的話，它用於原生的設定提供者的包裝函式類別，如&lt;xref:System.Configuration.SettingsProviderAttribute&gt;.&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;所指定的所有屬性</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This constructor initializes the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property to the value of the <ph id="ph1">`settingsKey`</ph> parameter.</source>
          <target state="translated">這個建構函式初始化&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;屬性設為值的<ph id="ph1">`settingsKey`</ph>參數。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This property is useful in disambiguating different instances of the wrapper class in the same application domain.</source>
          <target state="translated">這個屬性是類別的用於區分不同的執行個體的包裝函式中相同的應用程式定義域時。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For information about how reflection is used during the instantiation of a wrapper class, see the default &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt; constructor.</source>
          <target state="translated">包裝函式類別具現化期間如何使用反映的相關資訊，請參閱預設&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;建構函式。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The component that will act as the owner of the application settings object.</source>
          <target state="translated">此元件可做為應用程式設定物件的擁有者。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that uniquely identifies separate instances of the wrapper class.</source>
          <target state="translated">&lt;xref:System.String&gt;可唯一識別個別的執行個體的包裝函式類別。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;owner&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets the application settings context associated with the settings group.</source>
          <target state="translated">取得與設定群組相關聯的應用程式設定內容。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt; has a context associated with it.</source>
          <target state="translated">每個設定包裝函式類別衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;具有與其相關聯的內容&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The context is passed to the settings provider for each property to identify how the property is used.</source>
          <target state="translated">內容會傳遞給每個屬性的設定提供者來識別如何使用屬性。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.</source>
          <target state="translated">內容因此作為提示，以協助判斷如何保存相關聯的應用程式設定值的設定提供者。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt; property enables the settings provider to disambiguate multiple instances of the same wrapper class.</source>
          <target state="translated">相較之下，&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;屬性可讓設定提供者，以釐清多個執行個體相同的包裝函式類別。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with the settings group.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>設定群組相關聯。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns the value of the named settings property for the previous version of the same application.</source>
          <target state="translated">傳回相同的應用程式的先前版本的具名的設定屬性的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The GetPreviousVersion method is often used in conjunction with the &lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt; method when migrating application settings during the installation of a new version of an application.</source>
          <target state="translated">GetPreviousVersion 方法通常用於搭配&lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;方法在移轉期間新版應用程式安裝的應用程式設定。&lt;/xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the name of the settings property whose value is to be returned.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含要傳回其值設定屬性的名稱。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; containing the value of the specified <bpt id="p1">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;包含指定的值<bpt id="p1">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果找到則為<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The property does not exist.</source>
          <target state="translated">屬性不存在。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The property count is zero or the property cannot be found in the data store.</source>
          <target state="translated">屬性計數為零，或資料存放區中找不到屬性。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the specified application settings property.</source>
          <target state="translated">取得或設定指定的應用程式設定屬性的值。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Item property, also known as the indexer, is routinely used in the settings wrapper class derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">項目屬性，也稱為索引子，而例行性用於衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;設定包裝函式類別</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Item binds the public property of the wrapper class to the corresponding settings property.</source>
          <target state="translated">項目會將包裝函式類別的公用屬性繫結到對應的設定屬性。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Item raises several events depending on the operation being performed:      -   The first time a property is retrieved, the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt; event is raised.</source>
          <target state="translated">項目會引發多個事件，根據正在執行的作業:-擷取屬性時，第一次&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;就會引發事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   When a property is set, the &lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt; event is raised.</source>
          <target state="translated">-當屬性設定，&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;就會引發事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the handler does not cancel the event, then the property value is set and the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event is raised.</source>
          <target state="translated">如果此處理常式並不會取消事件，則會在設定屬性值和&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;就會引發事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the name of the property to access.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含用來存取屬性的名稱。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If found, the value of the named settings property; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">如果找到，具名的設定屬性的值;否則， <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>There are no properties associated with the current wrapper or the specified property could not be found.</source>
          <target state="translated">沒有目前的包裝函式相關聯的屬性，或找不到指定的屬性。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An attempt was made to set a read-only property.</source>
          <target state="translated">嘗試設定唯讀屬性。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The value supplied is of a type incompatible with the settings property, during a set operation.</source>
          <target state="translated">在設定作業期間設定屬性，與不相容的型別是所提供的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">無法剖析組態檔。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.PropertyChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.PropertyChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派事件處理常式叫用。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>NIB︰ 引發事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The OnPropertyChanged method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnPropertyChanged 方法也允許衍生的類別處理事件，而不用附加委派。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">這是處理衍生類別中的事件的慣用的技巧。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件來源。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;包含事件資料。&lt;/xref:System.ComponentModel.PropertyChangedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingChanging"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingChanging"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派事件處理常式叫用。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>NIB︰ 引發事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The OnSettingChanging method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingChanging 方法也允許衍生的類別處理事件，而不用附加委派。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">這是處理衍生類別中的事件的慣用的技巧。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件來源。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingChangingEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingChangingEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件資料。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsLoaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsLoaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派事件處理常式叫用。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>NIB︰ 引發事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The OnSettingsLoaded method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingsLoaded 方法也允許衍生的類別處理事件，而不用附加委派。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">這是處理衍生類別中的事件的慣用的技巧。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件來源。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsLoadedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsLoadedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件資料。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsSaving"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">引發<bpt id="p1">&lt;xref href="System.Configuration.ApplicationSettingsBase.SettingsSaving"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">引發事件會透過委派事件處理常式叫用。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>NIB︰ 引發事件<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The OnSettingsSaving method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">OnSettingsSaving 方法也允許衍生的類別處理事件，而不用附加委派。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">這是處理衍生類別中的事件的慣用的技巧。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The source of the event.</source>
          <target state="translated">事件來源。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.CancelEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.CancelEventArgs&gt;包含事件資料。&lt;/xref:System.ComponentModel.CancelEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Gets the collection of settings properties in the wrapper.</source>
          <target state="translated">取得包裝函式中的設定屬性的集合。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor of the Properties property reflects over the metadata of the settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, to dynamically determine the set of available application settings properties.</source>
          <target state="translated"><ph id="ph1">`get`</ph>內容屬性存取子，會透過設定包裝函式類別，衍生自的中繼資料反映&lt;xref:System.Configuration.ApplicationSettingsBase&gt;，若要以動態方式判斷可用的應用程式設定屬性的集合。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;原生類別可辨識的應用程式設定，例如其名稱、 屬性型別、 設定提供者、 預設值的某些特性閱讀唯一的狀態，並序列化喜好設定。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>These characteristics are mirrored as properties in the &lt;xref:System.Configuration.SettingsProperty&gt; class.</source>
          <target state="translated">這些特性會鏡射做為屬性&lt;xref:System.Configuration.SettingsProperty&gt;類別。&lt;/xref:System.Configuration.SettingsProperty&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>All other attributes of the settings property are just passed through to its associated settings provider.</source>
          <target state="translated">設定屬性的所有其他屬性都只傳遞至其相關聯的設定提供者。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the <bpt id="p2">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects used in the current wrapper.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含所有<bpt id="p2">&lt;xref href="System.Configuration.SettingsProperty"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>目前包裝函式中使用的物件。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The associated settings provider could not be found or its instantiation failed.</source>
          <target state="translated">找不到相關聯的設定提供者，或其具現化失敗。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Occurs after the value of an application settings property is changed.</source>
          <target state="translated">應用程式設定屬性值變更之後發生。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The PropertyChanged event is raised when a settings property is changed through the <ph id="ph1">`set`</ph> accessor of the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method, or for every property that is restored when a call is made to the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; or &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; methods.</source>
          <target state="translated">透過設定屬性變更時，會引發之 PropertyChanged 事件<ph id="ph1">`set`</ph>的存取子&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法，或還原時進行呼叫的每個屬性&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;或&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>There is no corresponding <ph id="ph1">`PropertyChanging`</ph> event for this class; instead, see the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; event.</source>
          <target state="translated">沒有對應的<ph id="ph1">`PropertyChanging`</ph>這個事件類別; 相反地，請參閱 &lt;&lt;c2&gt;事件。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets a collection of property values.</source>
          <target state="translated">取得屬性值的集合。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyValueCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of property values.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsPropertyValueCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>的屬性值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets the collection of application settings providers used by the wrapper.</source>
          <target state="translated">取得包裝函式所使用的應用程式設定提供者的集合。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.SettingsProviderAttribute&gt; determines what setting provider is used by a settings wrapper class or an individual setting property.</source>
          <target state="translated">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;判斷何種設定提供者由設定包裝函式類別或個別設定屬性。&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If this attribute is not specified, a client application will use the &lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.</source>
          <target state="translated">如果未指定此屬性，用戶端應用程式會使用&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Configuration.SettingsProviderCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all the <bpt id="p2">&lt;xref href="System.Configuration.SettingsProvider"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects used by the settings properties of the current settings wrapper.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Configuration.SettingsProviderCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含所有<bpt id="p2">&lt;xref href="System.Configuration.SettingsProvider"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>設定屬性的目前設定包裝函式所使用的物件。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Refreshes the application settings property values from persistent storage.</source>
          <target state="translated">重新整理從永續性儲存體的應用程式設定屬性值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The Reload method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed.</source>
          <target state="translated">重新載入方法清除目前所快取的屬性值，在後續存取時，造成重新載入這些值從永續性儲存體。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This method performs the following actions:      -   It clears the currently cached properties by clearing the collection represented by the &lt;xref:System.Configuration.SettingsBase.PropertyValues%2A&gt; property.</source>
          <target state="translated">這個方法會執行下列動作:-它會藉由清除所表示的集合清除目前所快取的屬性&lt;xref:System.Configuration.SettingsBase.PropertyValues%2A&gt;屬性。&lt;/xref:System.Configuration.SettingsBase.PropertyValues%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>-   It raises the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event for every member of the &lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; collection.</source>
          <target state="translated">-便會產生&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;事件的每個成員&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;集合。&lt;/xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Reload contrasts with &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</source>
          <target state="translated">重新載入另&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;在於前者會載入的最後一個集合的已儲存的應用程式設定值，而後者會載入儲存的預設值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Restores the persisted application settings values to their corresponding default properties.</source>
          <target state="translated">將保存之應用程式設定值還原成其對應的預設屬性。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The Reset method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings.</source>
          <target state="translated">重設方法覆寫使用者範圍的設定屬性，藉由還原目前保存每個應用程式設定的值。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This method performs the following actions:      -   It calls the &lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt; method on every settings provider that supports this optional method.</source>
          <target state="translated">這個方法會執行下列動作:-它會呼叫&lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt;每個設定提供者支援這個選擇性的方法上的方法。&lt;/xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>-   It calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; method to force a refresh of the settings property values.</source>
          <target state="translated">-它會呼叫&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;強制重新整理設定的屬性值的方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; contrasts with Reset in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;相反重設，前者會載入的上一組儲存應用程式設定值，而後者會載入儲存的預設值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">無法剖析組態檔。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Stores the current values of the application settings properties.</source>
          <target state="translated">儲存目前的應用程式設定屬性值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The Save method writes the current value of each settings property to its associated data store.</source>
          <target state="translated">Save 方法會寫入其相關聯的資料存放區中的每個設定屬性的目前值。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For each property, this method calls the &lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt; method on the associated settings provider.</source>
          <target state="translated">每一個屬性，這個方法會呼叫&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;相關聯的設定提供者上的方法。&lt;/xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This method differs from the base class implementation in that it raises the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt; event before the values are written.</source>
          <target state="translated">這個方法與基底類別實作的便會產生&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;前的值會寫入事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If the only settings defined are application-scoped settings, Save will have no effect and return no error if called with the default &lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.</source>
          <target state="translated">如果所定義的唯一設定是由應用程式範圍設定值，將會儲存不會影響，並不傳回任何錯誤，如果使用預設&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;.&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;呼叫</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Configuration.LocalFileSettingsProvider&gt; only saves user-scoped settings.</source>
          <target state="translated">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;只會儲存使用者範圍設定。&lt;/xref:System.Configuration.LocalFileSettingsProvider&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 沒有對應的 Load 方法因為在包裝函式類別初始設定期間自動載入應用程式設定的值。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In contrast, these values are not automatically saved when an application ends.</source>
          <target state="translated">相反地，這些值都不會自動儲存應用程式結束時。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Therefore, you must explicitly call the Save method to persist the current values of the application settings.</source>
          <target state="translated">因此，您必須明確呼叫 Save 方法來保存應用程式設定的目前值。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This is typically performed in the &lt;xref:System.Windows.Forms.Form.Closing&gt; event handler of the primary or containing &lt;xref:System.Windows.Forms.Form&gt;.</source>
          <target state="translated">這通常被執行中&lt;xref:System.Windows.Forms.Form.Closing&gt;的主要事件處理常式，或包含&lt;xref:System.Windows.Forms.Form&gt;.&lt;/xref:System.Windows.Forms.Form&gt; &lt;/xref:System.Windows.Forms.Form.Closing&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Occurs before the value of an application settings property is changed.</source>
          <target state="translated">應用程式設定屬性值變更之前發生。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The SettingChanging event occurs before an application setting value property is changed through the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method.</source>
          <target state="translated">透過變更應用程式設定值屬性之前，就會發生 SettingChanging 事件&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This event is not raised when the &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; or &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; methods are called.</source>
          <target state="translated">此事件就不會引發的時機&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;或&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;呼叫的方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>SettingChanging can be canceled through the &lt;xref:System.Configuration.SettingChangingEventArgs&gt; event data class.</source>
          <target state="translated">您可以取消 SettingChanging 透過&lt;xref:System.Configuration.SettingChangingEventArgs&gt;事件資料類別。&lt;/xref:System.Configuration.SettingChangingEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You typically use the SettingChanging event to handle immediate validation of an individual settings property.</source>
          <target state="translated">您通常會使用 SettingChanging 事件處理 立即驗證個別設定屬性。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information about validation, see <bpt id="p1">[</bpt>How to: Validate Application Settings<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需有關驗證的詳細資訊，請參閱<bpt id="p1">[</bpt>How to︰ 驗證應用程式設定<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>There is no corresponding <ph id="ph1">`SettingChanged`</ph> event for this class; instead, see the &lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt; event.</source>
          <target state="translated">沒有對應的<ph id="ph1">`SettingChanged`</ph>這個事件類別; 相反地，請參閱 &lt;&lt;c2&gt;事件。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets or sets the settings key for the application settings group.</source>
          <target state="translated">取得或設定應用程式設定群組的設定索引鍵。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The SettingsKey property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.</source>
          <target state="translated">SettingsKey 屬性，可讓用戶端程式碼，在特定的設定提供者，釐清具有相同的應用程式設定類別的多個執行個體。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application.</source>
          <target state="translated">除非設定包裝函式類別設計為使用單一子句模式，可以有多個相同的應用程式設定類別中的單一應用程式執行個體。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The value of SettingsKey should be set according to how the property values are intended to be shared.</source>
          <target state="translated">根據屬性值要如何共用應該設定 SettingsKey 的值。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>-   If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then SettingsKey should have the same value in all of the instances.</source>
          <target state="translated">-如果設定內容包裝函式要在相同的應用程式包裝函式的所有執行個體之間共用，SettingsKey 應該在所有執行個體具有相同的值。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This is the default behavior of the &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class.</source>
          <target state="translated">這是類別的預設行為&lt;xref:System.Configuration.ApplicationSettingsBase&gt;類別。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>-   If the settings properties of the wrapper are intended to be per instance, then SettingsKey should have a unique value for every instance.</source>
          <target state="translated">-如果設定內容包裝函式要作為每個執行個體，然後 SettingsKey 應該用於每個執行個體的唯一值。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt; version of the constructor enables you to initialize SettingsKey to a unique string.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt;建構函式版本可讓您的唯一字串初始化 SettingsKey。&lt;/xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt;</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt; property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.</source>
          <target state="translated">相反地，&lt;xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt;屬性會提供提示給設定提供者來啟用它以有效率且以正確順序的方式保存值。&lt;/xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.SettingChangingEventArgs&gt; class contains a similar &lt;xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt; property that helps identify the source of the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; event.</source>
          <target state="translated">&lt;xref:System.Configuration.SettingChangingEventArgs&gt;類別包含類似&lt;xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt;屬性，可協助識別的來源&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;事件。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt; &lt;/xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt; &lt;/xref:System.Configuration.SettingChangingEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the settings key for the current settings group.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含目前的設定群組的設定索引鍵。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Occurs after the application settings are retrieved from storage.</source>
          <target state="translated">從儲存體擷取應用程式設定後，就會發生。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The SettingsLoaded event occurs only after the initial <ph id="ph1">`get`</ph> access of the first configuration property used, typically through the &lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt; method.</source>
          <target state="translated">只在初始之後發生 SettingsLoaded 事件<ph id="ph1">`get`</ph>存取第一個組態屬性使用，通常透過&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Subsequent accesses use values for the settings property that are cached locally.</source>
          <target state="translated">後續存取會使用本機快取的設定屬性的值。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; and &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods will clear all cached values so this event will be raised again upon subsequent property access.</source>
          <target state="translated">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;和&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法將會清除所有快取的值，因此將會再次引發此事件，在後續的屬性存取。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; &lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Occurs before values are saved to the data store.</source>
          <target state="translated">值會儲存到資料存放區之前發生。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The SettingsSaving event is raised by the &lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt; method before it stores the application settings properties to their associated data store.</source>
          <target state="translated">引發 SettingsSaving 事件&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;之前它會儲存至其相關聯的資料存放區的應用程式設定屬性的方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The associated event handler can cancel this event.</source>
          <target state="translated">相關聯的事件處理常式可以取消此事件。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Updates application settings to reflect a more recent installation of the application.</source>
          <target state="translated">更新以反映最近安裝的應用程式的應用程式設定。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The Upgrade method performs two actions to assure smooth transition to a new version of an application:      -   It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their &lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt; method, assuming they have implemented the &lt;xref:System.Configuration.IApplicationSettingsProvider&gt; interface.</source>
          <target state="translated">升級方法會執行兩個動作，以確保平順地轉換至新版的應用程式:-它會通知所有對應的設定提供者包含目的升級的應用程式透過呼叫其&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt;方法，假設它們實作&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;介面。&lt;/xref:System.Configuration.IApplicationSettingsProvider&gt; &lt;/xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This action is not performed if the settings wrapper class is marked with &lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;.</source>
          <target state="translated">如果設定包裝函式類別標記為&lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;.&lt;/xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;不執行此動作</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>-   It reloads the values for all of the application settings.</source>
          <target state="translated">-您重新載入專案的所有應用程式設定的值。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can override the default behavior of Upgrade to implement custom upgrading or merging behavior.</source>
          <target state="translated">您可以覆寫以實作自訂升級或合併行為升級的預設行為。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt; method to retrieve individual values for a setting for the previous version of the application.</source>
          <target state="translated">使用&lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;方法來擷取個別的舊版應用程式的設定值。&lt;/xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Examples of custom upgrade behavior include:      -   Using new policy defaults that override one or more of the previous user-specified values or previous defaults.</source>
          <target state="translated">升級的自訂行為的範例包括:-使用覆寫一個或多個先前的使用者指定值的新原則預設值或先前的預設值。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>-   Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.</source>
          <target state="translated">-特別轉換為較新範圍、 不同的設定屬性群組，以及其他與相容的舊值。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The configuration file could not be parsed.</source>
          <target state="translated">無法剖析組態檔。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>