<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fba5e6929959852d868d0a3334aaf9a93a7acba9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.ContextStack.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9401efd9a112820cb392ac723e238cb96df3cbc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51bb5506215bed4ac62bc2e1619a432f3365b1a4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a stack object that can be used by a serializer to make information available to nested serializers.</source>
          <target state="translated">提供可由序列化程式用來將資訊提供給巢狀的序列化程式的堆疊物件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Some serializers require information about the context of an object to correctly persist their state.</source>
          <target state="translated">某些序列化程式需要內容的相關資訊，以便正確保存其狀態的物件。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ContextStack class enables a serializer to set data about the context of an object that is being serialized to a stack where another serializer can access it.</source>
          <target state="translated">ContextStack 類別可讓您設定另一個序列化程式能夠存取的位置堆疊要序列化的物件內容的相關資料的序列化程式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The value of the &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A&gt; property is provided by an &lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt; to share information of use to some serializers.</source>
          <target state="translated">值&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A&gt;屬性由&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;共用資訊的某些序列化程式的用途。&lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt; &lt;/xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A context stack is useful because the process of serializing a design document can be deeply nested, and objects at each level of nesting may require context information to correctly persist the state of the object.</source>
          <target state="translated">內容堆疊是很有用，因為序列化設計文件的程序可以深度巢狀，而且每個層級的巢狀物件可能需要的內容資訊，以便正確保存物件的狀態。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A serializer can set a context object to the stack before invoking a nested serializer.</source>
          <target state="translated">序列化程式可以叫用巢狀的序列化程式之前，以設定堆疊的內容物件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each object set to the stack should be removed by the serializer that set it after a call to a nested serializer returns.</source>
          <target state="translated">序列化程式，使其巢狀的序列化程式的呼叫傳回之後，應該移除設定至堆疊的每個物件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typically, the objects on the stack contain information about the context of the current object that is being serialized.</source>
          <target state="translated">一般而言，在堆疊上的物件包含目前正在序列化的物件內容的相關資訊。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A parent serializer adds context information to the stack about the next object to be serialized, calls an appropriate serializer and, when the serializer finishes executing on the object, removes the context information from the stack.</source>
          <target state="translated">父序列化程式將內容資訊加入至要序列化的下一個物件相關的堆疊，呼叫適當的序列化程式，物件上執行的序列化程式完成後從堆疊移除的內容資訊。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is up to the implementation of each serializer to determine what objects get pushed on this stack.</source>
          <target state="translated">這是由每個序列化程式來判斷哪些物件取得此堆疊上推入的實作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As an example, an object with a property named <ph id="ph1">`Enabled`</ph> has a data type of &lt;xref:System.Boolean&gt;.</source>
          <target state="translated">例如，具有屬性的物件名為<ph id="ph1">`Enabled`</ph>具有&lt;xref:System.Boolean&gt;.&lt;/xref:System.Boolean&gt;資料類型</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If a serializer writes this value to a data stream, it might need to include the context or type of property it is writing.</source>
          <target state="translated">如果序列化程式會將此值寫入資料流，它可能需要包含的內容或其正寫入的屬性的型別。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serializer does not have this information, however, because it is only instructed to write the &lt;xref:System.Boolean&gt; value.</source>
          <target state="translated">序列化程式並沒有這項資訊，不過，因為它只會指示要寫入&lt;xref:System.Boolean&gt;值。&lt;/xref:System.Boolean&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To provide this information to the serializer, the parent serializer can push a &lt;xref:System.ComponentModel.PropertyDescriptor&gt; that points to the <ph id="ph1">`Enabled`</ph> property on the context stack.</source>
          <target state="translated">若要提供這項資訊給序列化程式，父序列化程式可以推送&lt;xref:System.ComponentModel.PropertyDescriptor&gt;，它會指向<ph id="ph1">`Enabled`</ph>內容堆疊上的屬性。&lt;/xref:System.ComponentModel.PropertyDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.ContextStack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Appends an object to the end of the stack, rather than pushing it onto the top of the stack.</source>
          <target state="translated">將物件附加至結尾堆疊，而不是將它推送至堆疊的頂端。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method allows a serializer to communicate with other serializers by adding contextual data objects that do not have to be removed in order.</source>
          <target state="translated">這個方法可讓通訊與其他序列化程式將不需要在順序中移除的內容資料物件加入序列化程式。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There is no way to remove an object that was appended to the end of the stack without removing all other objects.</source>
          <target state="translated">沒有任何方法來移除已附加至堆疊的結尾，但不會移除所有其他物件的物件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A context object to append to the stack.</source>
          <target state="translated">要附加至堆疊的內容物件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the current object on the stack.</source>
          <target state="translated">取得目前的物件在堆疊上。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The current object is the object at the top of the stack, or the object last added to the stack.</source>
          <target state="translated">目前的物件是在堆疊頂端的物件或物件最後加入至堆疊。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current object on the stack, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no objects were pushed.</source>
          <target state="translated">目前的物件在堆疊上，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果推不入任何物件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the object on the stack at the specified level.</source>
          <target state="translated">在指定層級在堆疊上取得的物件。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The level of the object to retrieve on the stack.</source>
          <target state="translated">要擷取在堆疊上的物件層級。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Level 0 is the top of the stack, level 1 is the next down, and so on.</source>
          <target state="translated">層級 0 是堆疊的頂端，層級 1 是下一步 下，依此類推。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This level must be 0 or greater.</source>
          <target state="translated">此層級必須等於或大於 0。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If level is greater than the number of levels on the stack, it returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">如果層級大於在堆疊上的層級數目，它會傳回<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The object on the stack at the specified level, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no object exists at that level.</source>
          <target state="translated">在指定的層級，在堆疊上的物件或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果該層級的物件不存在。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;level&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;level&lt;/code&gt;</ph>小於 0。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the first object on the stack that inherits from or implements the specified type.</source>
          <target state="translated">取得繼承自或實作指定的型別在堆疊上的第一個物件。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A check is made on each level of the stack, searching for an object that implements or inherits <ph id="ph1">`type`</ph>.</source>
          <target state="translated">在堆疊中搜尋之物件的實作或繼承的每個層級上進行檢查<ph id="ph1">`type`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a match is found, it is returned.</source>
          <target state="translated">如果找到相符項目，它會傳回。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A type to retrieve from the context stack.</source>
          <target state="translated">若要擷取內容堆疊型別。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first object on the stack that inherits from or implements the specified type, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no object on the stack implements the type.</source>
          <target state="translated">繼承自或實作指定的型別，在堆疊上的第一個物件或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果沒有在堆疊上的物件實作的型別。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removes the current object off of the stack, returning its value.</source>
          <target state="translated">移除目前的物件，從堆疊，並傳回其值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object removed from the stack; <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no objects are on the stack.</source>
          <target state="translated">從堆疊; 移除的物件<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>如果沒有任何物件在堆疊上。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Pushes, or places, the specified object onto the stack.</source>
          <target state="translated">推播通知，或放置到堆疊上指定的物件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The context object to push onto the stack.</source>
          <target state="translated">要推送至堆疊的內容物件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>