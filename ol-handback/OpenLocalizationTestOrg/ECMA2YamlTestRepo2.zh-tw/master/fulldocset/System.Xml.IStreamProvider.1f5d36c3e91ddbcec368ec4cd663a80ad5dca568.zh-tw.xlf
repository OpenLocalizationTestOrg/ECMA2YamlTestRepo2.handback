<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a0a2350f797e7004899be2ae99afc26fc6c0ed1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.IStreamProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4da9f11488b0420f2915de8abc7332e995302a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553334242ad2dd9aa062f7f1675ed8528d2843c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an interface that can be implemented by classes providing streams.</source>
          <target state="translated">表示可以由提供資料流的類別所實作的介面。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When writing an outgoing message containing a streamed body to an XML writer, the &lt;xref:System.ServiceModel.Channels.Message&gt; will use a sequence of calls similar to the following in its &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; implementation:      -   Write any necessary information preceding the stream (For example, the opening XML tag).</source>
          <target state="translated">當內含至 XML 寫入器的資料流處理的本文的傳出訊息寫入&lt;xref:System.ServiceModel.Channels.Message&gt;將會使用一連串的呼叫中的下列類似其&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;實作:-前面寫入任何必要資訊的資料流 （例如，開頭 XML 標記）。&lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; &lt;/xref:System.ServiceModel.Channels.Message&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   Write the stream.</source>
          <target state="translated">-寫入資料流。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Write any information following the stream (For example, the closing XML tag).</source>
          <target state="translated">-後面寫入任何資訊的資料流 （例如，結束 XML 標記）。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
          <target state="translated">這很適合的類似文字 XML 編碼方式的編碼方式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</source>
          <target state="translated">不過，以及包含在項目內的資料有一些不會將 XML infoset 資訊 （例如，開始及結束標記 XML 項目） 的編碼方式。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
          <target state="translated">比方說，在 MTOM 編碼中，訊息會分割為多個部分。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One part contains the XML infoset, which may contain references to other parts for actual element contents.</source>
          <target state="translated">其中一個部分會包含 XML infoset，其中可能包含其他部分的實際項目內容的參考。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</source>
          <target state="translated">由於 XML infoset 通常是小相較於資料流處理內容，因此才會緩衝處理 infoset，將它寫出，然後將內容寫入資料流處理方式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This means that by the time the closing element tag is written, we should not have written out the stream yet.</source>
          <target state="translated">這表示，依時間結尾項目標記寫入時，我們應該不還沒有寫出資料流。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For this purpose, the IStreamProvider interface is used.</source>
          <target state="translated">基於此目的，使用 IStreamProvider 介面。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The interface has a &lt;xref:System.Xml.IStreamProvider.GetStream&gt; method that returns the stream to be written.</source>
          <target state="translated">這個介面具有&lt;xref:System.Xml.IStreamProvider.GetStream&gt;方法會傳回要寫入資料流。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The correct way to write out a streamed message body in &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; is as follows:      -   Write any necessary information preceding the stream (For example, the opening XML tag)      -   Call the <ph id="ph1">`WriteValue`</ph> overload on the &lt;xref:System.Xml.XmlDictionaryWriter&gt; that takes an IStreamProvider, with an <ph id="ph2">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
          <target state="translated">寫出經過資料流處理的訊息本文中的正確方式&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;如下所示:-前面寫入任何必要資訊的資料流 （例如，開頭 XML 標記）-呼叫<ph id="ph1">`WriteValue`</ph>上多載&lt;xref:System.Xml.XmlDictionaryWriter&gt;IStreamProvider，採用與<ph id="ph2">`IStreamProvider`</ph>傳回要寫入資料流的實作。&lt;/xref:System.Xml.XmlDictionaryWriter&gt; &lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>-   Write any information following the stream (For example, the closing XML tag)       With this approach, the XML writer has a choice of when to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; and write out the streamed data.</source>
          <target state="translated">-後面寫入任何資訊資料流 （例如，結束 XML 標記），透過這種方式，XML 寫入器就可以選擇要呼叫的&lt;xref:System.Xml.IStreamProvider.GetStream&gt;以及寫出經過資料流處理的資料。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</source>
          <target state="translated">例如，文字及二進位 XML 寫入器將立即呼叫，並寫出經過資料流處理內容開始和結束標記之間。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The MTOM writer may decide to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; later, when it is ready to write the appropriate part of the message.</source>
          <target state="translated">MTOM 寫入器可能會決定呼叫&lt;xref:System.Xml.IStreamProvider.GetStream&gt;更新的版本，準備好要寫入訊息的適當部分時。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a stream.</source>
          <target state="translated">取得資料流。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This method can be used to return the stream to be written.</source>
          <target state="translated">這個方法可以用來傳回要寫入資料流。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object.</source>
          <target state="translated">A&lt;xref:System.IO.Stream&gt;物件。&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases a stream to output.</source>
          <target state="translated">釋出到輸出資料流。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The stream being released.</source>
          <target state="translated">釋放資料流。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>