<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f400be304e155c524c9a909ab36261e230b6edb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Timers.Timer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ccd8619700a09e27185c9c2b8db39956f848146</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f360dddbd4c33f6cfd312fc2e496d00a0ca07d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">產生事件之後設定的間隔，產生週期性事件的選項。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To browse the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>.</source>
          <target state="translated">若要瀏覽此類型的.NET Framework 原始程式碼，請參閱<bpt id="p1">[</bpt>參考來源<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; 這種類型的.NET Framework 原始程式碼，請參閱 &lt;&lt;c2&gt; <bpt id="p1">[</bpt> 參考來源<ept id="p1">](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)</ept>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
          <target state="translated">您可以瀏覽原始碼、 下載的參考，離線檢視，並逐步執行原始程式碼 （包含修補程式和更新），在偵錯;請參閱<bpt id="p1">[</bpt>指示<ept id="p1">](http://referencesource.microsoft.com/)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Timer component is a server-based timer that raises an &lt;xref:System.Timers.Timer.Elapsed&gt; event in your application after the number of milliseconds in the &lt;xref:System.Timers.Timer.Interval%2A&gt; property has elapsed.</source>
          <target state="translated">Timer 元件是伺服器為基礎的計時器引發&lt;xref:System.Timers.Timer.Elapsed&gt;個的毫秒數之後，應用程式中的事件&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性經過。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can configure the Timer object to raise the event just once or repeatedly using the &lt;xref:System.Timers.Timer.AutoReset%2A&gt; property.</source>
          <target state="translated">您可以設定計時器物件，以引發此事件一次或重複使用&lt;xref:System.Timers.Timer.AutoReset%2A&gt;屬性。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Typically, a Timer object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">通常，計時器物件宣告類別層級，因此，只要需要它維持在範圍內。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can then handle its &lt;xref:System.Timers.Timer.Elapsed&gt; event to provide regular processing.</source>
          <target state="translated">然後您可以處理其&lt;xref:System.Timers.Timer.Elapsed&gt;事件以提供正常處理。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">例如，假設您有重要的伺服器，必須保持在 24 小時一天、 一週 7 天。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You could create a service that uses a Timer object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">您可以建立使用計時器物件，以定期檢查伺服器，並確認系統已啟動並執行服務。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">如果系統沒有回應，服務可能嘗試重新啟動伺服器，或通知系統管理員。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The Timer class is available in the .NET Framework only.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 計時器類別是.NET Framework 中可用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform.</source>
          <target state="translated">它不會包含在.NET 的標準程式庫，並不適用於其他平台，例如.NET Core 或通用 Windows 平台。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On these platforms, as well as for portability across all .NET platforms, you should use the &lt;xref:System.Threading.Timer?displayProperty=fullName&gt; class instead.</source>
          <target state="translated">在這些平台，以及所有的.NET 平台的可攜性，您應該使用&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;類別。&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">此類型會實作&lt;xref:System.IDisposable&gt;介面。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其&lt;xref:System.IDisposable.Dispose%2A&gt;方法中的<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>區塊。&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節&lt;xref:System.IDisposable&gt;介面 &gt; 主題。&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The server-based Timer class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">伺服器端 Timer 類別可供使用多執行緒環境中的背景工作執行緒。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Server timers can move among threads to handle the raised &lt;xref:System.Timers.Timer.Elapsed&gt; event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">伺服器計時器可以在執行緒之間移動處理所引發&lt;xref:System.Timers.Timer.Elapsed&gt;事件，導致更多的精確度，比在時間上引發事件的 Windows 計時器。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Timer component raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event, based on the value (in milliseconds) of the &lt;xref:System.Timers.Timer.Interval%2A&gt; property.</source>
          <target state="translated">Timer 元件引發&lt;xref:System.Timers.Timer.Elapsed&gt;事件，根據的值 （以毫秒為單位） 的&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">您可以處理這個事件來執行您所需要的處理。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">例如，假設您有連續張貼至資料庫的銷售訂單的線上銷售應用程式。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">服務傳送的指示進行編譯的訂單，而非個別處理每筆訂單的批次作業。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You could use a Timer to start the batch processing every 30 minutes.</source>
          <target state="translated">您可以使用計時器啟動的批次處理序每隔 30 分鐘。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; System.Timers.Timer 類別具有的系統時鐘為相同的解析度。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This means that the &lt;xref:System.Timers.Timer.Elapsed&gt; event will fire at an interval defined by the resolution of the system clock if the &lt;xref:System.Timers.Timer.Interval%2A&gt; property is less than the resolution of the system clock.</source>
          <target state="translated">這表示&lt;xref:System.Timers.Timer.Elapsed&gt;事件就會引發，如果系統時鐘的解析度所定義的間隔&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性小於系統時鐘的解析度。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Timers.Timer.Interval%2A&gt; property.</source>
          <target state="translated">如需詳細資訊，請參閱&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性。&lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph1">`false`</ph>, a Timer object raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, after the first &lt;xref:System.Timers.Timer.Interval%2A&gt; has elapsed.</source>
          <target state="translated">當&lt;xref:System.Timers.Timer.AutoReset%2A&gt;設<ph id="ph1">`false`</ph>，計時器物件引發&lt;xref:System.Timers.Timer.Elapsed&gt;事件只能出現一次，第一個之後&lt;xref:System.Timers.Timer.Interval%2A&gt;經過。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To keep raising the &lt;xref:System.Timers.Timer.Elapsed&gt; event regularly at the interval defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt;, set &lt;xref:System.Timers.Timer.AutoReset%2A&gt; to <ph id="ph1">`true`</ph>, which is the default value.</source>
          <target state="translated">保留提高&lt;xref:System.Timers.Timer.Elapsed&gt;事件會定期在所定義的間隔&lt;xref:System.Timers.Timer.Interval%2A&gt;，將&lt;xref:System.Timers.Timer.AutoReset%2A&gt;至<ph id="ph1">`true`</ph>，這是預設值。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Timer component catches and suppresses all exceptions thrown by event handlers for the &lt;xref:System.Timers.Timer.Elapsed&gt; event.</source>
          <target state="translated">Timer 元件會攔截，且會抑制所有事件處理常式擲回的例外狀況&lt;xref:System.Timers.Timer.Elapsed&gt;事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行為是未來的.NET Framework 版本中可能會變更。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">不過請注意，這是不一樣的事件處理常式以非同步方式執行，且包含<ph id="ph1">`await`</ph>運算子 （C# 中） 或<ph id="ph2">`Await`</ph>運算子 （在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">這些事件處理常式中擲回的例外狀況傳播回到呼叫的執行緒，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需非同步方法中擲回的例外狀況的詳細資訊，請參閱<bpt id="p1">[</bpt>例外狀況處理<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer#3<ept id="p2">](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb)</ept><ept id="p3">]</ept>       If the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property is <ph id="ph1">`null`</ph>, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer#3<ept id="p2">](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer#3<ept id="p4">](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb)</ept> <ept id="p3">]</ept>如果&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;屬性是<ph id="ph1">`null`</ph>、&lt;xref:System.Timers.Timer.Elapsed&gt;事件會在引發&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;  </target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If processing of the &lt;xref:System.Timers.Timer.Elapsed&gt; event lasts longer than &lt;xref:System.Timers.Timer.Interval%2A&gt;, the event might be raised again on another &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果處理&lt;xref:System.Timers.Timer.Elapsed&gt;事件持續時間超過&lt;xref:System.Timers.Timer.Interval%2A&gt;，可能會再次引發事件，在另一台&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情況下，事件處理常式應該是可重新進入。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The event-handling method might run on one thread at the same time that another thread calls the &lt;xref:System.Timers.Timer.Stop%2A&gt; method or sets the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 的事件處理方法呼叫另一個執行緒的同時，可能會執行一個執行緒上&lt;xref:System.Timers.Timer.Stop%2A&gt;方法或設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the timer is stopped.</source>
          <target state="translated">這可能會導致&lt;xref:System.Timers.Timer.Elapsed&gt;之後停止計時器所引發的事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The example code for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to avoid this race condition.</source>
          <target state="translated">範例程式碼&lt;xref:System.Timers.Timer.Stop%2A&gt;方法顯示如何避免競爭情形。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Even if &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; is not <ph id="ph1">`null`</ph>, &lt;xref:System.Timers.Timer.Elapsed&gt; events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph2">`false`</ph>, because the signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;不<ph id="ph1">`null`</ph>，&lt;xref:System.Timers.Timer.Elapsed&gt;之後就可能發生的事件&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;呼叫方法之後或&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性已設定為<ph id="ph2">`false`</ph>，因為要引發的訊號&lt;xref:System.Timers.Timer.Elapsed&gt;事件一律排入佇列以便在執行緒集區執行緒上執行。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the &lt;xref:System.Timers.Timer.Elapsed&gt; event to ignore subsequent events.</source>
          <target state="translated">其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來&lt;xref:System.Timers.Timer.Elapsed&gt;忽略後續事件的事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you use the Timer class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the Timer to the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">如果您使用計時器類別與使用者介面項目，例如表單或控制項，而不會讓該使用者介面項目，在計時器指派表單或控制項，其中包含計時器&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;屬性，以便將事件封送處理至使用者介面執行緒。&lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a list of default property values for an instance of Timer, see the &lt;xref:System.Timers.Timer.%23ctor%2A&gt; constructor.</source>
          <target state="translated">如需計時器的執行個體的預設屬性值的清單，請參閱&lt;xref:System.Timers.Timer.%23ctor%2A&gt;建構函式。&lt;/xref:System.Timers.Timer.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!TIP]</ph> &gt;  Be aware that the .NET Framework Class Library includes four classes named <ph id="ph2">`Timer`</ph>, each of which offers different functionality:   &gt;    &gt;  -   Timer (this topic): fires an event at regular intervals.</source>
          <target state="translated">&gt; <ph id="ph1">[!TIP]</ph> &gt; 注意，.NET Framework 類別庫包含名為四個類別<ph id="ph2">`Timer`</ph>，每個提供不同功能的: &gt;&gt;-計時器 （本主題）︰ 固定間隔引發事件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">類別僅供做為伺服器為基礎或服務元件，在多執行緒環境中。它沒有使用者介面，並在執行階段看不到。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated">&gt;- &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;︰ 在執行緒集區執行緒上定期執行的單一回呼方法。&lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">計時器會具現化，且無法變更時，會定義回呼方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Like the Timer class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">Timer 類別，例如此類別僅適用於做為伺服器為基礎或服務元件，在多執行緒環境中。它沒有使用者介面，並在執行階段看不到。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;: a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated">&gt;- &lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;︰ 固定間隔引發事件的 Windows Form 元件。&lt;/xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">元件沒有使用者介面，設計在單一執行緒的環境中使用。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&gt; -   &lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated">&gt;- &lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;︰ 以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。&lt;/xref:System.Web.UI.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, and sets all the properties to their initial values.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，並將所有的屬性設定為其初始值。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following table shows initial property values for an instance of &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">下表顯示&lt;xref:System.Timers.Timer&gt;.&lt;/xref:System.Timers.Timer&gt;的執行個體的初始屬性值</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>|Property|Initial value|   |--------------|-------------------|   |&lt;xref:System.Timers.Timer.AutoReset%2A&gt;|<ph id="ph1">`true`</ph>|   |&lt;xref:System.Timers.Timer.Enabled%2A&gt;|<ph id="ph2">`false`</ph>|   |&lt;xref:System.Timers.Timer.Interval%2A&gt;|100 milliseconds|   |&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;|A null reference (<ph id="ph3">`Nothing`</ph> in Visual Basic).|</source>
          <target state="translated">|屬性 |初始值 |  |--------------|-------------------|  |&lt;xref:System.Timers.Timer.AutoReset%2A&gt;|<ph id="ph1">`true`</ph>|  |&lt;xref:System.Timers.Timer.Enabled%2A&gt;|<ph id="ph2">`false`</ph>|  |&lt;xref:System.Timers.Timer.Interval%2A&gt;|&amp;100; 毫秒 |  |&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;|Null 參考 (<ph id="ph3">`Nothing`</ph>在 Visual Basic 中)。 |&lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, and sets the &lt;xref:System.Timers.Timer.Interval*&gt; property to the specified number of milliseconds.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，並設定&lt;xref:System.Timers.Timer.Interval*&gt;屬性，以指定的毫秒數。&lt;/xref:System.Timers.Timer.Interval*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This constructor sets the &lt;xref:System.Timers.Timer.Interval%2A&gt; property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">這個建構函式設定&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性，將新的計時器執行個體，但不會啟用計時器。&lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">時間 （毫秒），事件之間。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">值必須大於零且小於或等於<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">interval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero, or greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated">值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">interval</ph> <ept id="p1">&lt;/code&gt;</ept>參數是小於或等於零，或大於<ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets or sets a Boolean indicating whether the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should raise the <bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event only once (<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>) or repeatedly (<bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>).</source>
          <target state="translated">取得或設定布林值，指出是否<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>應該引發<bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>事件一次 (<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>) 或重複 (<bpt id="p4">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer&gt; is already enabled when the &lt;xref:System.Timers.Timer.Start%2A&gt; method is called, the interval is reset.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer&gt;時已啟用&lt;xref:System.Timers.Timer.Start%2A&gt;呼叫方法時，會重設間隔。&lt;/xref:System.Timers.Timer.Start%2A&gt; &lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If AutoReset is <ph id="ph1">`false`</ph>, the &lt;xref:System.Timers.Timer.Start%2A&gt; method must be called in order to start the count again.</source>
          <target state="translated">如果是 AutoReset <ph id="ph1">`false`</ph>、&lt;xref:System.Timers.Timer.Start%2A&gt;必須呼叫方法，才能再次開始計數。&lt;/xref:System.Timers.Timer.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Resetting the interval affects when the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised.</source>
          <target state="translated">重設間隔會影響當&lt;xref:System.Timers.Timer.Elapsed&gt;就會引發事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性<ph id="ph1">`true`</ph>，計數開始時間&lt;xref:System.Timers.Timer.Enabled%2A&gt;設定。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時此計數是 3 秒，重設間隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次 13 秒之後，就會引發事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性設定為<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should raise the <bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> event each time the interval elapses; <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> if it should raise the <bpt id="p5">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept> event only once, after the first time the interval elapses.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>應該引發<bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>事件每次間隔耗盡。<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>如果應該引發<bpt id="p5">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>事件一次，間隔耗盡後第一次。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Begins the run-time initialization of a <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or by another component.</source>
          <target state="translated">開始執行階段初始化<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表單或另一個元件所使用。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph>設計環境會使用這個方法來開始初始化用於表單或另一個元件所使用的元件。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.EndInit%2A&gt; method ends the initialization.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.EndInit%2A&gt;方法結束初始化。&lt;/xref:System.Timers.Timer.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using the BeginInit and &lt;xref:System.Timers.Timer.EndInit%2A&gt; methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用 BeginInit 和&lt;xref:System.Timers.Timer.EndInit%2A&gt;方法可防止控制項完全初始化之前使用。&lt;/xref:System.Timers.Timer.EndInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Releases the resources used by the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">所使用的資源釋出<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Close method in turn calls the <ph id="ph1">`Dispose`</ph> method.</source>
          <target state="translated">Close 方法接著呼叫<ph id="ph1">`Dispose`</ph>方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">目前所使用的資源全部釋出<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示釋放 managed 和 unmanaged 資源，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>表示只釋放 unmanaged 的資源。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">發生於間隔耗盡時。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Elapsed event is raised if the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property is <ph id="ph1">`true`</ph> and the time interval (in milliseconds) defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt; property elapses.</source>
          <target state="translated">如果引發 Elapsed 事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性是<ph id="ph1">`true`</ph>所定義的時間間隔 （以毫秒為單位） 和&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性超過。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer.AutoReset%2A&gt; property is <ph id="ph1">`true`</ph>, the event is raised repeatedly at an interval defined by the &lt;xref:System.Timers.Timer.Interval%2A&gt; property; otherwise, the event is raised only once, the first time the &lt;xref:System.Timers.Timer.Interval%2A&gt; value elapses.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.AutoReset%2A&gt;屬性是<ph id="ph1">`true`</ph>，在所定義的間隔內重複引發此事件&lt;xref:System.Timers.Timer.Interval%2A&gt;屬性; 否則就會引發此事件一次，第一次&lt;xref:System.Timers.Timer.Interval%2A&gt;值超過。&lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Timers.Timer.Interval%2A&gt; is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.Interval%2A&gt;後會設定&lt;xref:System.Timers.Timer&gt;已啟動，計數重設。&lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;至<ph id="ph1">`true`</ph>，計數開始時間&lt;xref:System.Timers.Timer.Enabled%2A&gt;設定。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the Elapsed event is raised for the first time 13 seconds after &lt;xref:System.Timers.Timer.Enabled%2A&gt; was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">第一次 13 秒後重設為 10 秒時計數為 3 秒的間隔，會引發 Elapsed 事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; property is <ph id="ph1">`null`</ph>,the Elapsed event is raised on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;屬性是<ph id="ph1">`null`</ph>，經過事件會在引發&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the processing of the Elapsed event lasts longer than &lt;xref:System.Timers.Timer.Interval%2A&gt;, the event might be raised again on another &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">如果 Elapsed 事件的處理時間比&lt;xref:System.Timers.Timer.Interval%2A&gt;，可能會再次引發事件，在另一台&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Interval%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情況下，事件處理常式應該是可重新進入。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The event-handling method might run on one thread at the same time that another thread calls the &lt;xref:System.Timers.Timer.Stop%2A&gt; method or sets the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 的事件處理方法呼叫另一個執行緒的同時，可能會執行一個執行緒上&lt;xref:System.Timers.Timer.Stop%2A&gt;方法或設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This might result in the Elapsed event being raised after the timer is stopped.</source>
          <target state="translated">這可能會導致 Elapsed 事件引發之後停止計時器。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The example code for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to avoid this race condition.</source>
          <target state="translated">範例程式碼&lt;xref:System.Timers.Timer.Stop%2A&gt;方法顯示如何避免競爭情形。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Even if &lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt; is not <ph id="ph1">`null`</ph>, Elapsed events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph2">`false`</ph>, because the signal to raise the Elapsed event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;不<ph id="ph1">`null`</ph>之後, 就可能發生 Elapsed 事件&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;呼叫方法之後或&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性已設定為<ph id="ph2">`false`</ph>，因為引發 Elapsed 事件訊號一律排入佇列以便在執行緒集區執行緒上執行。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.SynchronizingObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the Elapsed event to ignore subsequent events.</source>
          <target state="translated">若要解決這種競爭情形的一個方式是將設定的旗標來忽略後續事件的 Elapsed 事件的事件處理常式。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer&gt; component catches and suppresses all exceptions thrown by event handlers for the Elapsed event.</source>
          <target state="translated">&lt;xref:System.Timers.Timer&gt;元件會攔截，且會抑制所有 Elapsed 事件的事件處理常式擲回的例外狀況。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行為是未來的.NET Framework 版本中可能會變更。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should raise the <bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">取得或設定值，指出是否<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>應該引發<bpt id="p2">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Setting Enabled to <ph id="ph1">`true`</ph> is the same as calling &lt;xref:System.Timers.Timer.Start%2A&gt;, while setting Enabled to <ph id="ph2">`false`</ph> is the same as calling &lt;xref:System.Timers.Timer.Stop%2A&gt;.</source>
          <target state="translated">將 Enabled 設定為<ph id="ph1">`true`</ph>等同於呼叫&lt;xref:System.Timers.Timer.Start%2A&gt;，而若要啟用設定<ph id="ph2">`false`</ph>等同於呼叫&lt;xref:System.Timers.Timer.Stop%2A&gt;.&lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a &lt;xref:System.Threading.ThreadPool&gt; thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 來引發訊號&lt;xref:System.Timers.Timer.Elapsed&gt;事件一定在佇列執行&lt;xref:System.Threading.ThreadPool&gt;執行緒。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the Enabled property is set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">這可能會導致&lt;xref:System.Timers.Timer.Elapsed&gt;之後的 Enabled 屬性設定為所引發的事件<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The code example for the &lt;xref:System.Timers.Timer.Stop%2A&gt; method shows one way to work around this race condition.</source>
          <target state="translated">程式碼範例&lt;xref:System.Timers.Timer.Stop%2A&gt;方法顯示其中一種方式解決這種競爭情形。&lt;/xref:System.Timers.Timer.Stop%2A&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If Enabled is set to <ph id="ph1">`true`</ph> and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph2">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果已啟用設<ph id="ph1">`true`</ph>和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;設為<ph id="ph2">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引發&lt;xref:System.Timers.Timer.Elapsed&gt;經過事件一次，第一個時間間隔。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the interval is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果間隔的設定之後&lt;xref:System.Timers.Timer&gt;已啟動，計數重設。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the Enabled property to <ph id="ph1">`true`</ph>, the count starts at the time Enabled is set.</source>
          <target state="translated">例如，如果您將間隔設定為 5 秒，然後將 [啟用] 屬性設定為<ph id="ph1">`true`</ph>，計數開始的時間設定已啟用。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after Enabled was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時計數是 3 秒，重設間隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次之後啟用已設定為 13 秒內就會引發事件<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Some visual designers, such as those in Microsoft Visual Studio, set the Enabled property to <ph id="ph2">`true`</ph> when inserting a new &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 視覺化的設計工具，例如在 Microsoft Visual Studio 中，設定為 Enabled 屬性<ph id="ph2">`true`</ph>插入新的&lt;xref:System.Timers.Timer&gt;。&lt;/xref:System.Timers.Timer&gt;時</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should raise the <bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> event; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>應該引發<bpt id="p3">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>事件，否則<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">無法設定這個屬性，因為計時器已被處置。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.Interval*&gt; property was set to a value greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> before the timer was enabled.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.Interval*&gt;屬性已設定的值大於<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>啟用計時器之前。&lt;/xref:System.Timers.Timer.Interval*&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Ends the run-time initialization of a <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or by another component.</source>
          <target state="translated">結束執行階段初始化<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表單或另一個元件所使用。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph>設計環境會使用這個方法來結束初始化用於表單或另一個元件所使用的元件。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Timers.Timer.BeginInit%2A&gt; method starts the initialization.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;方法會啟動初始化。&lt;/xref:System.Timers.Timer.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Using the &lt;xref:System.Timers.Timer.BeginInit%2A&gt; and EndInit methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用&lt;xref:System.Timers.Timer.BeginInit%2A&gt;和 EndInit 方法可防止控制項完全初始化之前使用。&lt;/xref:System.Timers.Timer.BeginInit%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">取得或設定的間隔，以毫秒為單位，引發<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You use the Interval property to determine the frequency at which the &lt;xref:System.Timers.Timer.Elapsed&gt; event is fired.</source>
          <target state="translated">您使用 [間隔] 屬性來判斷的頻率&lt;xref:System.Timers.Timer.Elapsed&gt;引發事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Timers.Timer&gt; class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated">因為&lt;xref:System.Timers.Timer&gt;類別取決於系統時鐘，其具有的系統時鐘為相同的解析度。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This means that the &lt;xref:System.Timers.Timer.Elapsed&gt; event will fire at an interval defined by the resolution of the system clock if the Interval property is less than the resolution of the system clock.</source>
          <target state="translated">這表示&lt;xref:System.Timers.Timer.Elapsed&gt;事件就會引發，如果 [間隔] 屬性小於系統時鐘的解析度，系統時鐘的解析度所定義的間隔。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example sets the Interval property to 5 milliseconds.</source>
          <target state="translated">下列範例會將 [間隔] 屬性設為 5 毫秒。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">在上執行時<ph id="ph1">[!INCLUDE[win7](~/add/includes/win7-md.md)]</ph>系統的系統時鐘已解析的大約 15 毫秒，事件引發，大約每隔 15 毫秒，而不是每隔 5 毫秒。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer.Interval#1<ept id="p2">](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer.Interval#1<ept id="p4">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb)</ept><ept id="p3">]</ept>       You can use the following code to determine the resolution of the system clock on the current system:       <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.Timers.Timer.Interval#2<ept id="p6">](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)</ept><ept id="p5">]</ept>  <bpt id="p7">[!code-vb</bpt><bpt id="p8">[</bpt>System.Timers.Timer.Interval#2<ept id="p8">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb)</ept><ept id="p7">]</ept>       If your app requires greater resolution than that offered by the &lt;xref:System.Timers.Timer&gt; class or the system clock, use the high-resolution multimedia timers; see <bpt id="p9">[</bpt>How to: Use the High-Resolution Timer<ept id="p9">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated"><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>System.Timers.Timer.Interval#1<ept id="p2">](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)</ept><ept id="p1">]</ept><bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Timers.Timer.Interval#1<ept id="p4">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb)</ept> <ept id="p3">]</ept>您可以使用下列程式碼來判斷目前系統上的系統時鐘的解析度︰ <bpt id="p5">[!code-cs</bpt> <bpt id="p6">[</bpt>System.Timers.Timer.Interval#2<ept id="p6">](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)</ept><ept id="p5">]</ept><bpt id="p7">[!code-vb</bpt><bpt id="p8">[</bpt>System.Timers.Timer.Interval#2<ept id="p8">](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb)</ept> <ept id="p7">]</ept>如果應用程式需要比所提供更高的解析度&lt;xref:System.Timers.Timer&gt;類別或系統時鐘，使用高解析度的多媒體計時器，請參閱 &lt; <bpt id="p9">[</bpt>How to︰ 使用 High-Resolution 計時器<ept id="p9">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>。&lt;/xref:System.Timers.Timer&gt;    </target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the interval is set after the &lt;xref:System.Timers.Timer&gt; has started, the count is reset.</source>
          <target state="translated">如果間隔的設定之後&lt;xref:System.Timers.Timer&gt;已啟動，計數重設。&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, if you set the interval to 5 seconds and then set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, the count starts at the time &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性<ph id="ph1">`true`</ph>，計數開始時間&lt;xref:System.Timers.Timer.Enabled%2A&gt;設定。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the &lt;xref:System.Timers.Timer.Elapsed&gt; event is raised for the first time 13 seconds after &lt;xref:System.Timers.Timer.Enabled%2A&gt; was set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時計數是 3 秒，重設間隔&lt;xref:System.Timers.Timer.Elapsed&gt;第一次 13 秒之後，就會引發事件&lt;xref:System.Timers.Timer.Enabled%2A&gt;設<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Timers.Timer.Enabled%2A&gt; is set to <ph id="ph1">`true`</ph> and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph2">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer.Enabled%2A&gt;設<ph id="ph1">`true`</ph>和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;設<ph id="ph2">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引發&lt;xref:System.Timers.Timer.Elapsed&gt;事件一次，第一次間隔經過。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Timers.Timer.Enabled%2A&gt; is then set to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Timers.Timer.Enabled%2A&gt;然後將設定為<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If &lt;xref:System.Timers.Timer.Enabled%2A&gt; and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; are both set to <ph id="ph2">`false`</ph>, and the timer has previously been enabled, setting the Interval property causes the &lt;xref:System.Timers.Timer.Elapsed&gt; event to be raised once, as if the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property had been set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 如果&lt;xref:System.Timers.Timer.Enabled%2A&gt;和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;都設定為<ph id="ph2">`false`</ph>，以及計時器先前已啟用，設定的間隔屬性原因&lt;xref:System.Timers.Timer.Elapsed&gt;一次，引發的事件，如同&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性已設定為<ph id="ph3">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To set the interval without raising the event, you can temporarily set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property to <ph id="ph1">`true`</ph>, set the Interval property to the desired time interval, and then immediately set the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property back to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">若要設定的間隔，而不會引發事件，您可以暫時設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性<ph id="ph1">`true`</ph>，所需的時間間隔，以設定 [間隔] 屬性，然後立即設定&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性設回<ph id="ph2">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The time, in milliseconds, between <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> events.</source>
          <target state="translated">時間，以毫秒為單位，介於<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">值必須大於零，且小於或等於<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">預設為 100 毫秒。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">時間間隔小於或等於零。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>-or-       The interval is greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">-或-間隔大於<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>，且目前已啟用計時器。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">（目前未啟用計時器，如果沒有擲回例外狀況之前它會變成啟用。）</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets or sets the site that binds the <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its container in design mode.</source>
          <target state="translated">取得或設定繫結的站台<bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>到其在設計模式中的容器。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Sites bind a &lt;xref:System.ComponentModel.Component&gt; to a &lt;xref:System.ComponentModel.Container&gt; and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">站台繫結&lt;xref:System.ComponentModel.Component&gt;至&lt;xref:System.ComponentModel.Container&gt;和啟用它們之間的通訊，以及提供一種方式管理其元件容器。&lt;/xref:System.ComponentModel.Container&gt; &lt;/xref:System.ComponentModel.Component&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface representing the site that binds the <bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object to its container.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>介面代表繫結的站台<bpt id="p2">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>到其容器的物件。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Starts raising the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event by setting &lt;xref:System.Timers.Timer.Enabled*&gt; to <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">開始引發<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>藉由設定事件&lt;xref:System.Timers.Timer.Enabled*&gt;至<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Timers.Timer.Enabled*&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If Start is called and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event only once, the first time the interval elapses.</source>
          <target state="translated">如果在呼叫 Start 和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;設<ph id="ph1">`false`</ph>、&lt;xref:System.Timers.Timer&gt;引發&lt;xref:System.Timers.Timer.Elapsed&gt;經過事件一次，第一個時間間隔。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If Start is called and &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is <ph id="ph1">`true`</ph>, the &lt;xref:System.Timers.Timer&gt; raises the &lt;xref:System.Timers.Timer.Elapsed&gt; event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">如果在呼叫 Start 和&lt;xref:System.Timers.Timer.AutoReset%2A&gt;是<ph id="ph1">`true`</ph>、&lt;xref:System.Timers.Timer&gt;引發&lt;xref:System.Timers.Timer.Elapsed&gt;事件第一個時間間隔經過，而且在指定的時間間隔引發事件會繼續。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can also start timing by setting &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">您也可以藉由設定啟動計時&lt;xref:System.Timers.Timer.Enabled%2A&gt;至<ph id="ph1">`true`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If &lt;xref:System.Timers.Timer.AutoReset%2A&gt; is <ph id="ph2">`false`</ph>, the Start method must be called in order to start the count again.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 如果&lt;xref:System.Timers.Timer.AutoReset%2A&gt;是<ph id="ph2">`false`</ph>，必須呼叫 Start 方法，才能再次開始計數。&lt;/xref:System.Timers.Timer.AutoReset%2A&gt;</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A call to the Start method when the timer is enabled has no effect.</source>
          <target state="translated">當計時器被啟用的 Start 方法的呼叫沒有任何作用。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is created with an interval equal to or greater than <ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Timers.Timer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>等於或大於此數目，而間隔建立<ph id="ph1">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> + 1 或設為小於零的間隔。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Stops raising the <bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event by setting &lt;xref:System.Timers.Timer.Enabled*&gt; to <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">停止引發<bpt id="p1">&lt;xref href="System.Timers.Timer.Elapsed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>藉由設定事件&lt;xref:System.Timers.Timer.Enabled*&gt;至<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Timers.Timer.Enabled*&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can also stop timing by setting &lt;xref:System.Timers.Timer.Enabled%2A&gt; to <ph id="ph1">`false`</ph>.</source>
          <target state="translated">您也可以藉由設定停止時間&lt;xref:System.Timers.Timer.Enabled%2A&gt;至<ph id="ph1">`false`</ph>。&lt;/xref:System.Timers.Timer.Enabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a &lt;xref:System.Threading.ThreadPool&gt; thread, so the event-handling method might run on one thread at the same time that a call to the Stop method runs on another thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 來引發訊號&lt;xref:System.Timers.Timer.Elapsed&gt;事件一定在佇列執行&lt;xref:System.Threading.ThreadPool&gt;執行緒，因此事件處理方法可能會在一個執行緒上同時執行另一個執行緒上執行停止方法的呼叫。&lt;/xref:System.Threading.ThreadPool&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This might result in the &lt;xref:System.Timers.Timer.Elapsed&gt; event being raised after the Stop method is called.</source>
          <target state="translated">這可能會導致&lt;xref:System.Timers.Timer.Elapsed&gt;呼叫停止方法之後所引發事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">下一節的程式碼範例會示範一種方法解決這種競爭情形。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">取得或設定用來封送處理當間隔已經耗盡時所發出的事件處理常式呼叫的物件。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>When SynchronizingObject is <ph id="ph1">`null`</ph>, the method that handles the &lt;xref:System.Timers.Timer.Elapsed&gt; event is called on a thread from the system-thread pool.</source>
          <target state="translated">SynchronizingObject 時<ph id="ph1">`null`</ph>，處理的方法&lt;xref:System.Timers.Timer.Elapsed&gt;系統執行緒集區執行緒上呼叫事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information on system-thread pools, see &lt;xref:System.Threading.ThreadPool&gt;.</source>
          <target state="translated">如需有關系統執行緒集區的詳細資訊，請參閱&lt;xref:System.Threading.ThreadPool&gt;.&lt;/xref:System.Threading.ThreadPool&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Timers.Timer.Elapsed&gt; event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">當&lt;xref:System.Timers.Timer.Elapsed&gt;事件由 visual 的 Windows Form 元件，例如按鈕，存取元件透過系統執行緒集區可能結果的例外狀況，或只是可能會無法運作。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Avoid this effect by setting SynchronizingObject to a Windows Forms component, which causes the method that handles the &lt;xref:System.Timers.Timer.Elapsed&gt; event to be called on the same thread that the component was created on.</source>
          <target state="translated">SynchronizingObject 設為 Windows Form 的元件，這會導致處理的方法來避免這種效果&lt;xref:System.Timers.Timer.Elapsed&gt;事件建立元件的相同執行緒上呼叫。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Even if the SynchronizingObject property is not <ph id="ph2">`null`</ph>, &lt;xref:System.Timers.Timer.Elapsed&gt; events can occur after the &lt;xref:System.Timers.Timer.Dispose%2A&gt; or &lt;xref:System.Timers.Timer.Stop%2A&gt; method has been called or after the &lt;xref:System.Timers.Timer.Enabled%2A&gt; property has been set to <ph id="ph3">`false`</ph>, because the signal to raise the &lt;xref:System.Timers.Timer.Elapsed&gt; event is always queued for execution on a thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 即使 SynchronizingObject 屬性不是<ph id="ph2">`null`</ph>，&lt;xref:System.Timers.Timer.Elapsed&gt;之後就可能發生的事件&lt;xref:System.Timers.Timer.Dispose%2A&gt;或&lt;xref:System.Timers.Timer.Stop%2A&gt;呼叫方法之後或&lt;xref:System.Timers.Timer.Enabled%2A&gt;屬性已設定為<ph id="ph3">`false`</ph>，因為要引發的訊號&lt;xref:System.Timers.Timer.Elapsed&gt;事件一律排入佇列以便在執行緒集區執行緒上執行。&lt;/xref:System.Timers.Timer.Elapsed&gt; &lt;/xref:System.Timers.Timer.Enabled%2A&gt; &lt;/xref:System.Timers.Timer.Stop%2A&gt; &lt;/xref:System.Timers.Timer.Dispose%2A&gt; &lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the &lt;xref:System.Timers.Timer.Elapsed&gt; event to ignore subsequent events.</source>
          <target state="translated">其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來&lt;xref:System.Timers.Timer.Elapsed&gt;忽略後續事件的事件。&lt;/xref:System.Timers.Timer.Elapsed&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Timers.Timer&gt; is used inside Visual Studio in a Windows Forms designer, SynchronizingObject is automatically set to the control that contains the &lt;xref:System.Timers.Timer&gt;.</source>
          <target state="translated">如果&lt;xref:System.Timers.Timer&gt;會在 Windows Form 設計工具中，以使用 Visual Studio 內，SynchronizingObject 會自動設定為包含&lt;xref:System.Timers.Timer&gt;.&lt;/xref:System.Timers.Timer&gt;控制項&lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example, if you place a &lt;xref:System.Timers.Timer&gt; on a designer for <ph id="ph1">`Form1`</ph> (which inherits from &lt;xref:System.Windows.Forms.Form&gt;), the SynchronizingObject property of &lt;xref:System.Timers.Timer&gt; is set to the instance of <ph id="ph2">`Form1`</ph>.</source>
          <target state="translated">例如，如果您將&lt;xref:System.Timers.Timer&gt;的設計工具上<ph id="ph1">`Form1`</ph>(繼承自&lt;xref:System.Windows.Forms.Form&gt;)，SynchronizingObject 屬性&lt;xref:System.Timers.Timer&gt;設為執行個體<ph id="ph2">`Form1`</ph>。&lt;/xref:System.Timers.Timer&gt; &lt;/xref:System.Windows.Forms.Form&gt; &lt;/xref:System.Timers.Timer&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示用來封送處理當間隔已經耗盡時所發出的事件處理常式呼叫的物件。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>