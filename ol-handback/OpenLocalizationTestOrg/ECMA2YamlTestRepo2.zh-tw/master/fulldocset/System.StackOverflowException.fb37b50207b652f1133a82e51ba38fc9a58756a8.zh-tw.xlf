<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">875b4c44898cae512f08f519a38456c5814427a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.StackOverflowException.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72d4a7c67673254490d2f2380c36fc92950871cf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a2a773c3505724e59b782c1b78a9bea12abec17</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when the execution stack overflows because it contains too many nested method calls.</source>
          <target state="translated">執行堆疊溢位，因為它包含太多巢狀的方法呼叫時擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>StackOverflowException is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion.</source>
          <target state="translated">StackOverflowException 會執行堆疊溢位錯誤，通常會發生的非常深或未繫結遞迴函式擲回。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>StackOverflowException uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9.</source>
          <target state="translated">StackOverflowException 會使用 HRESULT COR_E_STACKOVERFLOW，0x800703E9 的值。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Reflection.Emit.OpCodes.Localloc&gt; intermediate language (IL) instruction throws StackOverflowException.</source>
          <target state="translated">&lt;xref:System.Reflection.Emit.OpCodes.Localloc&gt;Intermediate language (IL) 指令會擲回 StackOverflowException。&lt;/xref:System.Reflection.Emit.OpCodes.Localloc&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a list of initial property values for a StackOverflowException object, see the &lt;xref:System.StackOverflowException.%23ctor%2A&gt; constructors.</source>
          <target state="translated">如需 StackOverflowException 物件的初始屬性值的清單，請參閱&lt;xref:System.StackOverflowException.%23ctor%2A&gt;建構函式。&lt;/xref:System.StackOverflowException.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Version Considerations    In the .NET Framework 1.0 and 1.1, you could catch a StackOverflowException object (for example, to recover from unbounded recursion).</source>
          <target state="translated">在.NET Framework 1.0 和 1.1 版考量，您可以攔截 StackOverflowException 物件 （例如，若要從無限遞迴復原）。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, you can’t catch a StackOverflowException object with a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block, and the corresponding process is terminated by default.</source>
          <target state="translated">從.NET Framework 2.0 開始，您不能攔截 StackOverflowException 物件<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>區塊，以及對應的處理序會以預設為結尾。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Consequently, you should write your code to detect and prevent a stack overflow.</source>
          <target state="translated">因此，您應該撰寫程式碼來偵測並防止堆疊溢位。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if your app depends on recursion, use a counter or a state condition to terminate the recursive loop.</source>
          <target state="translated">例如，如果您的應用程式相依於遞迴，使用計數器或狀態條件來終止遞迴迴圈。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example uses a counter to ensure that the number of recursive calls to the <ph id="ph1">`Execute`</ph> method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant.</source>
          <target state="translated">下列範例會使用 計數器來確認遞迴數目呼叫<ph id="ph1">`Execute`</ph>方法不能超過 MAX_RECURSIVE_CALLS 常數所定義的最大值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.StackOverflowException.Class#1<ept id="p2">](~/add/codesnippet/visualbasic/t-system.stackoverflowex_1.vb)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.StackOverflowException.Class#1<ept id="p4">](~/add/codesnippet/csharp/t-system.stackoverflowex_1.cs)</ept><ept id="p3">]</ept><ph id="ph1">      &gt; </ph><ph id="ph2">[!NOTE]</ph> &gt;  Applying the &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt; attribute to a method that throws a StackOverflowException has no effect.</source>
          <target state="translated"><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.StackOverflowException.Class#1<ept id="p2">](~/add/codesnippet/visualbasic/t-system.stackoverflowex_1.vb)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.StackOverflowException.Class#1<ept id="p4">](~/add/codesnippet/csharp/t-system.stackoverflowex_1.cs)</ept> <ept id="p3">]</ept> <ph id="ph1">      &gt; </ph> <ph id="ph2">[!NOTE]</ph> &gt; 套用&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;方法會擲回 StackOverflowException 屬性沒有任何作用。&lt;/xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;  </target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You still cannot handle the exception from user code.</source>
          <target state="translated">您仍然無法處理來自使用者程式碼的例外狀況。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If your app hosts the common language runtime (CLR), it can specify that the CLR should unload the application domain where the stack overflow exception occurs and let the corresponding process continue.</source>
          <target state="translated">如果您的應用程式裝載 common language runtime (CLR)，它可以指定 CLR 應該卸載應用程式定義域堆疊溢位例外狀況，就會發生的位置，並讓對應的程序繼續執行。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ICLRPolicyManager Interface<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>ICLRPolicyManager 介面<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, setting the &lt;xref:System.Exception.Message*&gt; property of the new instance to a system-supplied message that describes the error, such as "The requested operation caused a stack overflow."</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別，設定&lt;xref:System.Exception.Message*&gt;屬性的新執行個體，系統提供的訊息，描述錯誤，例如 「 要求的作業造成堆疊溢位 」。&lt;/xref:System.Exception.Message*&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此訊息會考量目前系統文化特性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.StackOverflowException&gt;.</source>
          <target state="translated">下表顯示&lt;xref:System.StackOverflowException&gt;.&lt;/xref:System.StackOverflowException&gt;的執行個體的初始屬性值</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|<ph id="ph1">`null`</ph>.|   |&lt;xref:System.Exception.Message%2A&gt;|The localized error message string.|</source>
          <target state="translated">|屬性 |值 |  |--------------|-----------|  |&lt;xref:System.Exception.InnerException%2A&gt;|<ph id="ph1">`null`</ph>.|  |&lt;xref:System.Exception.Message%2A&gt;|當地語系化的錯誤訊息字串。 |&lt;/xref:System.Exception.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified error message.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別指定的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.StackOverflowException&gt;.</source>
          <target state="translated">下表顯示&lt;xref:System.StackOverflowException&gt;.&lt;/xref:System.StackOverflowException&gt;的執行個體的初始屬性值</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).|   |&lt;xref:System.Exception.Message%2A&gt;|The error message string.|</source>
          <target state="translated">|屬性 |值 |  |--------------|-----------|  |&lt;xref:System.Exception.InnerException%2A&gt;|Null 參考 (<ph id="ph1">`Nothing`</ph>在 Visual Basic 中)。 |  |&lt;xref:System.Exception.Message%2A&gt;|錯誤訊息字串。 |&lt;/xref:System.Exception.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; that describes the error.</source>
          <target state="translated">A&lt;xref:System.String&gt;描述錯誤。&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The content of message is intended to be understood by humans.</source>
          <target state="translated">訊息的內容被為了能讓人瞭解。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">這個建構函式的呼叫端，才能確保這個字串已經被當地語系化為目前的系統文化特性。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.StackOverflowException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>類別指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the &lt;xref:System.Exception.InnerException%2A&gt; property.</source>
          <target state="translated">如前一個例外狀況直接結果可以包含在前一個例外狀況的參考就會擲回的例外狀況&lt;xref:System.Exception.InnerException%2A&gt;屬性。&lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;屬性會傳回相同的值傳遞到建構函式，則為 null 參考 (<ph id="ph1">`Nothing`</ph>在 Visual Basic 中) 如果&lt;xref:System.Exception.InnerException%2A&gt;屬性沒有提供內部例外值給建構函式。&lt;/xref:System.Exception.InnerException%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following table shows the initial property values for an instance of &lt;xref:System.StackOverflowException&gt;.</source>
          <target state="translated">下表顯示&lt;xref:System.StackOverflowException&gt;.&lt;/xref:System.StackOverflowException&gt;的執行個體的初始屬性值</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>|Property|Value|   |--------------|-----------|   |&lt;xref:System.Exception.InnerException%2A&gt;|The inner exception reference.|   |&lt;xref:System.Exception.Message%2A&gt;|The error message string.|</source>
          <target state="translated">|屬性 |值 |  |--------------|-----------|  |&lt;xref:System.Exception.InnerException%2A&gt;|內部例外狀況參考。 |  |&lt;xref:System.Exception.Message%2A&gt;|錯誤訊息字串。 |&lt;/xref:System.Exception.Message%2A&gt; &lt;/xref:System.Exception.InnerException%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解釋例外狀況的原因的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">造成目前例外狀況的例外狀況。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`innerException`</ph> parameter is not a null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic), the current exception is raised in a <bpt id="p2">&lt;xref uid="langword_csharp_catch" name="catch" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> block that handles the inner exception.</source>
          <target state="translated">如果<ph id="ph1">`innerException`</ph>參數不是 null 參考 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>在 Visual Basic 中)，目前的例外狀況會在引發<bpt id="p2">&lt;xref uid="langword_csharp_catch" name="catch" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>處理內部例外狀況區塊。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>