<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">655ffbffba4695505f8ca982cc23dfc732582cbb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.IPersistComponentSettings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fd5bd04fe114749807726110f0c828e0302f526</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3110686e11c84e8129aa29efc4ba41c6713a3c3d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines standard functionality for controls or libraries that store and retrieve application settings.</source>
          <target state="translated">定義控制項或程式庫的儲存和擷取應用程式設定的標準功能。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, and then add special properties to this class.</source>
          <target state="translated">通常，將應用程式設定的支援加入應用程式所建立的設定包裝函式類別，衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;，然後將特殊屬性加入至這個類別。 和&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</source>
          <target state="translated">不過，這種方法不會完全封裝控制項的應用程式設定值，讓其容器已防護的詳細資料。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</source>
          <target state="translated">IPersistComponentSettings 介面提供標準的介面，來進行通訊的應用程式設定狀態控制項、 元件或程式庫模組的變更要求的應用程式。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Design-time tools also depend on this interface to properly manage controls and components.</source>
          <target state="translated">設計階段工具也會取決於這個介面來適當地管理控制項和元件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reads the control's application settings into their corresponding properties and updates the control's state.</source>
          <target state="translated">讀取控制項的應用程式設定成其對應的屬性和更新控制項的狀態。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.</source>
          <target state="translated">一般情況下，此 LoadComponentSettings 方法會執行兩項基本作業:-它會導致重新整理其應用程式設定屬性值，通常透過呼叫控制項所包含的每個應用程式設定執行個體及其&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   As required, it updates those general properties that depend on these reloaded settings properties.</source>
          <target state="translated">-必要時，它會更新相依於這些重新載入設定屬性的一般屬性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, if the settings class contained a <ph id="ph1">`location`</ph> settings property, LoadComponentSettings should ensure that the control's &lt;xref:System.Windows.Forms.Control.Location%2A&gt; property is updated to reflect this reloaded setting.</source>
          <target state="translated">例如，如果設定類別包含<ph id="ph1">`location`</ph>設定屬性，LoadComponentSettings 應該確保控制項的&lt;xref:System.Windows.Forms.Control.Location%2A&gt;屬性會更新以反映此重新載入的設定。&lt;/xref:System.Windows.Forms.Control.Location%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Resets the control's application settings properties to their default values.</source>
          <target state="translated">重設控制項的應用程式設定屬性，為其預設值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The implementation of the ResetComponentSettings method typically calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; method on each instance of an application settings class it contains.</source>
          <target state="translated">ResetComponentSettings 方法的實作通常會呼叫&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;上每個執行個體，其中包含應用程式設定類別的方法。&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Persists the control's application settings properties.</source>
          <target state="translated">保存控制項的應用程式設定屬性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store.</source>
          <target state="translated">SaveComponentSettings 方法會寫入相關聯的資料存放區中的控制項的應用程式設定屬性的值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">此方法會使用的資料存放區和序列化技術取決於&lt;xref:System.Configuration.SettingsProviderAttribute&gt;.&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;透過每個設定類別相關聯的設定提供者</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can override the choice of the settings provider by using the &lt;xref:System.Configuration.ISettingsProviderService&gt; interface.</source>
          <target state="translated">您可以使用覆寫的設定提供者選擇&lt;xref:System.Configuration.ISettingsProviderService&gt;介面。&lt;/xref:System.Configuration.ISettingsProviderService&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the &lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt; property is <ph id="ph2">`true`</ph>, the control should call SaveComponentSettings in its own &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method so that the control's configuration data is stored automatically before the application ends.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 如果&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;屬性是<ph id="ph2">`true`</ph>，控制項應該呼叫 SaveComponentSettings 中自己&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;方法以便在應用程式結束前自動儲存控制項的設定資料。&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt; &lt;/xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</source>
          <target state="translated">取得或設定值，指出控制項是否應自動保存其應用程式設定屬性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a control contains configuration data, it will typically persist this data in response to an explicit call to the &lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt; method or sometimes implicitly when the control's &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method is invoked.</source>
          <target state="translated">如果控制項包含組態資料，它通常會保存回應的明確呼叫這項資料&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;方法或有時隱含當控制項的&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;叫用方法。&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt; &lt;/xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.</source>
          <target state="translated">SaveSettings 屬性會決定在處置是否控制項會自動保存其組態資料。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The default value of SaveSettings depends on the implementation of the control.</source>
          <target state="translated">SaveSettings 的預設值取決於控制項的實作。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.</source>
          <target state="translated">控制項的文件應該會指出是否要使用應用程式設定、 哪些資料會保留，以及功能 SaveSettings 屬性的預設值。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the control should automatically persist its state; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果控制項應自動保存其檢視狀態。否則， <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the application settings key for the current instance of the control.</source>
          <target state="translated">取得或設定控制項的目前執行個體的應用程式設定索引鍵的值。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</source>
          <target state="translated">若要釐清應用程式設定屬性群組有多個執行個體相同的包裝函式類別時使用 SettingsKey 屬性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</source>
          <target state="translated">例如，如果控制項包含相關聯的包裝函式類別，然後將多個執行個體相同的控制項放置在相同的應用程式通常會包裝函式類別的多個執行個體。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</source>
          <target state="translated">只有在針對每個執行個體; 不同的組態資料時，則需要設定金鑰例如，動態地定位控制項的位置。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">可讓您使用 SettingsKey 套用下列一般規則:-控制項，如同任何類別，可能包含零或多個應用程式設定類別，衍生自&lt;xref:System.Configuration.ApplicationSettingsBase&gt;.&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each settings class contains its own &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property, which helps disambiguate multiple instances of that class.</source>
          <target state="translated">每個設定類別包含它自己的&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;屬性，進而協助釐清多個執行個體的該類別。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-   A control should separate its per-instance data and its shared data into different settings classes.</source>
          <target state="translated">-控制項應該將其每個執行個體資料和共用的資料分成不同的設定類別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-   For a control with any per-instance configuration data, the <ph id="ph1">`get`</ph> accessor of the SettingsKey property should default to the &lt;xref:System.Windows.Forms.Control.Name%2A&gt; of the control.</source>
          <target state="translated">-針對與任何個別執行個體的設定資料，控制項<ph id="ph1">`get`</ph>SettingsKey 屬性存取子應該預設為&lt;xref:System.Windows.Forms.Control.Name%2A&gt;的控制項。&lt;/xref:System.Windows.Forms.Control.Name%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In most cases the name of the control will be unique within an application.</source>
          <target state="translated">在大部分情況下名稱中將是控制項的唯一的應用程式。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the control contains only shared configuration data, <ph id="ph1">`get`</ph> should default to <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果控制項包含共用組態資料<ph id="ph1">`get`</ph>應該預設為<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-   The <ph id="ph1">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</source>
          <target state="translated">-<ph id="ph1">`set`</ph>應該實作這個屬性存取子，以區別包含每個執行個體和共用的設定資料的設定類別。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For each settings class containing per-instance data, <ph id="ph1">`set`</ph> should just pass-through to the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property of the settings class.</source>
          <target state="translated">針對每個包含每個執行個體資料的設定類別<ph id="ph1">`set`</ph>應該只傳遞至&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;屬性的設定類別。&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For settings classes containing shared data, <ph id="ph1">`set`</ph> should perform no action for that settings class.</source>
          <target state="translated">針對包含共用的資料，設定類別<ph id="ph1">`set`</ph>應該對該設定的類別執行任何動作。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the settings key for the current instance of the control.</source>
          <target state="translated">A&lt;xref:System.String&gt;包含控制項的目前執行個體的設定索引鍵。&lt;/xref:System.String&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>