<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0aacd4cb6cd14bbcf5939edbbea7d4a0865948ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Input.InputBinding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">374f4a30fc737ae9d6faef2d97d08660c4dd868e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97904ba366e3b08a5924475b0b4986a3aa2e5ec5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a binding between an <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and a command.</source>
          <target state="translated">表示之間的繫結<bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和命令。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The command is potentially a <bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此命令可能是<bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides base initialization for classes derived from <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">提供初始化基底類別衍生自<bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.InputBinding&gt; is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;不技術上來說是抽象類別，而預設建構函式是刻意保護的存取權。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This has the effect of making &lt;xref:System.Windows.Input.InputBinding&gt; an "abstract" class for <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">這是進行的效果&lt;xref:System.Windows.Input.InputBinding&gt;「 抽象 」 類別<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type &lt;xref:System.Windows.Input.InputBinding&gt;, but you cannot specify an &lt;xref:System.Windows.Input.InputBinding&gt; instance in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">中的現有屬性<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>具有<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>預期類型的物件的使用方式&lt;xref:System.Windows.Input.InputBinding&gt;，不過您不能指定&lt;xref:System.Windows.Input.InputBinding&gt;執行個體中<ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。&lt;/xref:System.Windows.Input.InputBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead, you can specify one of the device-specific &lt;xref:System.Windows.Input.InputBinding&gt; derived classes as values, for instance &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">相反地，您可以指定其中一個裝置特定&lt;xref:System.Windows.Input.InputBinding&gt;衍生類別執行個體&lt;xref:System.Windows.Input.KeyBinding&gt;或&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;的值為&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified command and input gesture.</source>
          <target state="translated">初始化的新執行個體<bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用指定的命令與輸入的動作的類別。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">如果您是軟體開發人員使用現有的輸入繫結類別，您通常不會使用這個建構函式，即使您正在定義的自訂命令。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instead, you will either use constructors of derived classes (&lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">相反地，您會使用衍生的類別建構函式 (&lt;xref:System.Windows.Input.KeyBinding&gt;和&lt;xref:System.Windows.Input.MouseBinding&gt;)，或您將使用這個建構函式做為自訂類別的基底具現化&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although the &lt;xref:System.Windows.Input.InputBinding&gt; class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">雖然&lt;xref:System.Windows.Input.InputBinding&gt;類別支援不同的輸入的裝置原則，實際上您必須選擇將代表輸入繫結的裝置。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You only can set only one &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; value on the input binding, and gestures are device-specific.</source>
          <target state="translated">您只可以設定只有一個&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;是裝置特定的值上輸入的繫結和手勢。&lt;/xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The command to associate with <ph id="ph1">`gesture`</ph>.</source>
          <target state="translated">與命令<ph id="ph1">`gesture`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The input gesture to associate with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">輸入的動作與<ph id="ph1">`command`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">複製指定之物件的屬性的基底 （非動畫） 值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">要複製的物件。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">複製指定之物件的屬性的目前值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">要複製的物件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Windows.Input.ICommand&gt; associated with this input binding.</source>
          <target state="translated">取得或設定&lt;xref:System.Windows.Input.ICommand&gt;此輸入繫結相關聯。&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;類別不支援<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用量因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">不過，衍生的類別可以公開的公用建構函式，因此，可以使用繼承自&lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;屬性</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">兩個現有&lt;xref:System.Windows.Input.InputBinding&gt;衍生類別中執行個體化<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>和可以設定屬性與<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用方式會&lt;xref:System.Windows.Input.KeyBinding&gt;和&lt;xref:System.Windows.Input.MouseBinding&gt;。&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.ICommand&gt; references a type converter that enables certain preexisting &lt;xref:System.Windows.Input.ICommand&gt; implementations to specify values in the form of a string.</source>
          <target state="translated">&lt;xref:System.Windows.Input.ICommand&gt;參考型別轉換子，可讓某些預先存在&lt;xref:System.Windows.Input.ICommand&gt;實作，其指定的字串形式的值。&lt;/xref:System.Windows.Input.ICommand&gt;&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">此類型轉換行為設定這個屬性的屬性值格式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also bind the Command, &lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">您也可以繫結命令&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;，和&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;屬性&lt;xref:System.Windows.Input.ICommand&gt;物件上定義的。&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">這可讓您定義自訂的命令，並將它與使用者輸入關聯。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">如需詳細資訊，請參閱&lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;的第二個範例</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage    &lt;<ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>="&lt;xref:System.Windows.Input.ICommand&gt;"/&gt;      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph4">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 屬性使用方式<ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>="&lt;xref:System.Windows.Input.ICommand&gt;"/ &gt; <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 屬性項目用法<ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 值<ph id="ph4">`inputBindingDerivedClass`</ph>的衍生的類別&lt;xref:System.Windows.Input.InputBinding&gt;可支援物件項目語法，例如&lt;xref:System.Windows.Input.KeyBinding&gt;或&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;       &lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`iCommandImplementation`</ph>    An object implementation of &lt;xref:System.Windows.Input.ICommand&gt; that supports object element syntax (has a public default constructor).</source>
          <target state="translated"><ph id="ph1">`iCommandImplementation`</ph>物件實作&lt;xref:System.Windows.Input.ICommand&gt;支援物件項目語法 （具有公用預設建構函式）。&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The associated command.</source>
          <target state="translated">相關聯的命令。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Command value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">命令值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">取得或設定特定命令的特定命令的資料。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The CommandParameter property is used to pass specific information to the command when it is executed.</source>
          <target state="translated">CommandParameter 屬性用來執行時傳遞給命令的特定資訊。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">命令所定義的資料類型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">許多命令不會預期命令參數。這些命令，將會忽略任何傳遞的命令參數。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the command that an input binding is associated with is a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the CommandParameter of the input binding is passed to the &lt;xref:System.Windows.Input.RoutedCommand&gt; handlers through the &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; and the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; event data when the command is processed.</source>
          <target state="translated">如果輸入的繫結相關聯的命令是&lt;xref:System.Windows.Input.RoutedCommand&gt;，輸入繫結的 CommandParameter 傳遞至&lt;xref:System.Windows.Input.RoutedCommand&gt;處理常式透過&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;和&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;處理命令時，事件資料。&lt;/xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; &lt;/xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">資料類型和用途命令參數的每個命令會以不同的方式定義，而且可以是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can bind the &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;, CommandParameter, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">您可以繫結&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;，CommandParameter，和&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;屬性&lt;xref:System.Windows.Input.ICommand&gt;物件上定義的。&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.Command%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">這可讓您定義自訂的命令，並將它與使用者輸入關聯。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">如需詳細資訊，請參閱&lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;的第二個範例</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;類別不支援<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用量因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">然而，衍生的類別可以公開的公用建構函式，因此，可以設定屬性，都繼承自&lt;xref:System.Windows.Input.InputBinding&gt;與<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用量。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">兩個現有&lt;xref:System.Windows.Input.InputBinding&gt;衍生類別中執行個體化<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>中可設定屬性和<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>和&lt;xref:System.Windows.Input.KeyBinding&gt;&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph3">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 屬性使用方式<ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 屬性項目用法<ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # XAML 值<ph id="ph3">`inputBindingDerivedClass`</ph>&lt;xref:System.Windows.Input.InputBinding&gt;支援物件項目語法，例如&lt;xref:System.Windows.Input.KeyBinding&gt;或&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;&lt;/xref:System.Windows.Input.InputBinding&gt;的衍生的類別            </target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`commandParameterString`</ph>    A string that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterString`</ph>字串處理的特定命令。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">字串是用於命令參數，因為它們可以輕鬆地在中設定的一般型別<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">必須是的字串格式及它的目的，請參閱特定命令的輸入繫結相關聯的文件。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">許多命令不會預期參數。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`commandParameterObject`</ph>    An object that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterObject`</ph>特定的命令處理物件。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">所有現有<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>命令會使用字串。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">因此，此屬性項目語法才相關的自訂命令的案例。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">為了支援此語法，<ph id="ph1">`commandParameterObject`</ph>物件也必須支援物件項目語法 （必須有公用預設建構函式）。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The command-specific data.</source>
          <target state="translated">命令特有的資料。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt;相依性屬性。&lt;/xref:System.Windows.Input.InputBinding.CommandParameter*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.Command*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Input.InputBinding.Command*&gt;相依性屬性。&lt;/xref:System.Windows.Input.InputBinding.Command*&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">取得或設定命令的目標項目。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the CommandTarget property on an &lt;xref:System.Windows.Input.ICommandSource&gt; object is applicable only when the &lt;xref:System.Windows.Input.ICommand&gt; is a &lt;xref:System.Windows.Input.RoutedCommand&gt;.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>指揮上的系統，CommandTarget 屬性&lt;xref:System.Windows.Input.ICommandSource&gt;物件是時才適用&lt;xref:System.Windows.Input.ICommand&gt;為&lt;xref:System.Windows.Input.RoutedCommand&gt;。&lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.ICommandSource&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the CommandTarget is set on an &lt;xref:System.Windows.Input.ICommandSource&gt; and the corresponding command is not a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is ignored.</source>
          <target state="translated">如果上設定 CommandTarget&lt;xref:System.Windows.Input.ICommandSource&gt;和對應的命令不是&lt;xref:System.Windows.Input.RoutedCommand&gt;，會忽略命令目標。&lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.ICommandSource&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When used with a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is the object on which the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events are raised.</source>
          <target state="translated">當搭配&lt;xref:System.Windows.Input.RoutedCommand&gt;，命令目標會在其上的物件&lt;xref:System.Windows.Input.CommandManager.Executed&gt;和&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;引發事件。&lt;/xref:System.Windows.Input.CommandManager.CanExecute&gt; &lt;/xref:System.Windows.Input.CommandManager.Executed&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the CommandTarget property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">如果未設定 CommandTarget 屬性，具有鍵盤焦點的項目會使用做為目標。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class itself does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;類別本身不支援<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用量，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自&lt;xref:System.Windows.Input.InputBinding&gt;與<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用量。&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">兩個現有&lt;xref:System.Windows.Input.InputBinding&gt;衍生類別中執行個體化<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>中可設定屬性和<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>和&lt;xref:System.Windows.Input.KeyBinding&gt;&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 屬性使用方式<ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 值<ph id="ph2">`inputBindingDerivedClass`</ph>&lt;xref:System.Windows.Input.InputBinding&gt;支援物件項目語法，例如&lt;xref:System.Windows.Input.KeyBinding&gt;或&lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt;&lt;/xref:System.Windows.Input.KeyBinding&gt;&lt;/xref:System.Windows.Input.InputBinding&gt;的衍生的類別      </target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bindingToTarget`</ph>    A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated"><ph id="ph1">`bindingToTarget`</ph>字串，會使用一種可傳回的物件參考現有的繫結語法具名項目。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">請參閱 &lt; 備註 &gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The target of the command.</source>
          <target state="translated">命令的目標。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt; dependency property.</source>
          <target state="translated">識別&lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt;相依性屬性。&lt;/xref:System.Windows.Input.InputBinding.CommandTarget*&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">即將加入。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates an instance of an <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">建立的執行個體<bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The new object.</source>
          <target state="translated">新的物件。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with this input binding.</source>
          <target state="translated">取得或設定<bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此輸入繫結相關聯。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The associated gesture.</source>
          <target state="translated">相關聯的筆勢。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">預設值是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> by using base (non-animated) property values.</source>
          <target state="translated">將執行個體設為指定的凍結的複製品<bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用基底 （非動畫） 屬性值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">要複製的物件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">將目前的執行個體設為指定的凍結的複製品<bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">如果物件具有動畫相依性屬性，則會複製其目前的動畫的值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">要複製的物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>