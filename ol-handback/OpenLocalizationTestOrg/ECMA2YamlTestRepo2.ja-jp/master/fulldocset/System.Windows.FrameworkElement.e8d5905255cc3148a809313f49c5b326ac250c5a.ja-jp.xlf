<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">240cb01b67f3abf3da391c82f2d161450765f3a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.FrameworkElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f34c5406c822ebc58926a76c691f68573b60879</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2049bca0cb4e08ccb7c2174b1d632ea6a401253f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a WPF framework-level set of properties, events, and methods for <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> elements.</source>
          <target state="translated">プロパティ、イベント、およびメソッドの WPF フレームワーク レベルのセットを提供<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>要素。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class represents the provided WPF framework-level implementation that is built on the WPF core-level <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> that are defined by <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このクラスは、WPF コア レベルに基づいて構築された指定の WPF フレームワーク レベルの実装を表す<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>で定義されている<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>FrameworkElement is the connecting point between WPF framework-level element classes and the WPF core-level set of &lt;xref:System.Windows.UIElement&gt; presentation services.</source>
          <target state="translated">FrameworkElement が WPF フレームワーク レベルの要素のクラスと、WPF コア レベルのセット間の接続ポイント&lt;xref:System.Windows.UIElement&gt;プレゼンテーション サービス&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information about these concepts, see <bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">これらの概念の詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF アーキテクチャ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>FrameworkElement extends &lt;xref:System.Windows.UIElement&gt; and adds the following capabilities:      -   <bpt id="p1">**</bpt>Layout system definition<ept id="p1">**</ept>: FrameworkElement provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">FrameworkElement 拡張&lt;xref:System.Windows.UIElement&gt;し、次の機能を追加します:-<bpt id="p1">**</bpt>レイアウト システム定義<ept id="p1">**</ept>: FrameworkElement 特定の WPF フレームワーク レベルの実装特定のメソッドを提供&lt;xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.UIElement&gt;仮想メンバーとして定義されている&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most notably, FrameworkElement seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</source>
          <target state="translated">特に、FrameworkElement では、特定の WPF コア レベル レイアウト上書きが封印し、代わりに派生クラスの WPF フレームワーク レベルの同等を代わりにオーバーライドする必要がありますを提供します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, FrameworkElement seals &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; but provides &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.</source>
          <target state="translated">FrameworkElement が封印&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;が、&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;たとえば、</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any FrameworkElement derived class.</source>
          <target state="translated">これらの変更は、派生クラスの WPF フレームワーク レベルでは完全レイアウト システム、FrameworkElement を表示できる場所にファクトを反映します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At the WPF core level, certain members that will structure a general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> based layout solution are in place, but the actual engine of the layout system is not defined.</source>
          <target state="translated">WPF で構造体、一般的なは、特定のレベルのメンバーをコア<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ベース レイアウト ソリューションの場所は、レイアウト システムの実際のエンジンが定義されていません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>レイアウト<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>The logical tree:<ept id="p1">**</ept> The general <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> programming model is often expressed in terms of being a tree of elements.</source>
          <target state="translated">-<bpt id="p1">**</bpt>論理ツリー:<ept id="p1">**</ept>全般的な<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>プログラミング モデルがされている要素のツリーとして表現されて多くの場合。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the FrameworkElement level.</source>
          <target state="translated">論理ツリーとして要素のツリーを表現するをサポートし、FrameworkElement レベルで実装がマークアップでそのツリーを定義するためのサポートに付属しています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Note however that FrameworkElement deliberately does not define a content model, and leaves that responsibility to derived classes.</source>
          <target state="translated">FrameworkElement が意図的に、コンテンツ モデルを一切定義しませんし、派生クラスには、その責任のままにする ただし注意してください。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Object lifetime events:<ept id="p1">**</ept> It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</source>
          <target state="translated">-<bpt id="p1">**</bpt>オブジェクトの有効期間イベント:<ept id="p1">**</ept>要素が初期化される場合を把握すると便利です (コンス トラクターが呼び出されます) または論理ツリーに要素が最初に読み込まれるときにします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>FrameworkElement defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</source>
          <target state="translated">FrameworkElement では、分離コードが関係する操作子要素の追加などの要素の役立ちますフックを提供するオブジェクトの有効期間に関連するいくつかのイベントを定義します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Support for data binding and dynamic resource references:<ept id="p1">**</ept> The property-level support for data binding and resources is implemented by the &lt;xref:System.Windows.DependencyProperty&gt; class and embodied in the property system, but the ability to resolve a member value that is stored as an &lt;xref:System.Windows.Expression&gt; (the programming construct that underlies both data binding and dynamic resources) is implemented by FrameworkElement.</source>
          <target state="translated">-<bpt id="p1">**</bpt>データ バインディング、および動的リソース参照のサポート:<ept id="p1">**</ept>によってデータのバインドとリソースのプロパティ レベルのサポートは実装されて、&lt;xref:System.Windows.DependencyProperty&gt;クラスし、プロパティ システムはできるが、として格納されているメンバー値を解決するのには組み込まれた、 &lt;xref:System.Windows.Expression&gt;(データのバインドと動的なリソースの両方の基礎となるプログラミング構造) は、FrameworkElement によって実装されます&lt;/xref:System.Windows.Expression&gt;&lt;/xref:System.Windows.DependencyProperty&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>XAML リソース<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Styles:<ept id="p1">**</ept> FrameworkElement defines the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property.</source>
          <target state="translated">-<bpt id="p1">**</bpt>スタイル:<ept id="p1">**</ept> FrameworkElement 定義、&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, FrameworkElement does not yet define support for templates, or support decorators.</source>
          <target state="translated">ただし、FrameworkElement が、テンプレートのサポートを定義されていない、またはデコレーターをサポートしません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These features are introduced by control classes such as &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.</source>
          <target state="translated">これらの機能は&lt;xref:System.Windows.Controls.Control&gt;、 &lt;xref:System.Windows.Controls.ContentControl&gt;。&lt;/xref:System.Windows.Controls.ContentControl&gt;&lt;/xref:System.Windows.Controls.Control&gt;などのコントロール クラス</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>More animation support:<ept id="p1">**</ept> Some animation support was already defined at the WPF core level, but FrameworkElement extends this by implementing &lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt; and related members.</source>
          <target state="translated">-<bpt id="p1">**</bpt>アニメーション サポート:<ept id="p1">**</ept>一部アニメーション サポートは、WPF コア レベルで既に定義されてが FrameworkElement では、これを拡張を実装して&lt;xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;関連メンバーとします&lt;/xref:System.Windows.FrameworkElement.BeginStoryboard%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As can be seen from the class hierarchy, many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> classes derive from FrameworkElement, either directly or through intermediate base classes such as &lt;xref:System.Windows.Controls.Panel&gt; or &lt;xref:System.Windows.Controls.Control&gt;.</source>
          <target state="translated">クラスの階層からわかるように多く<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>クラスは、直接または&lt;xref:System.Windows.Controls.Panel&gt;または&lt;xref:System.Windows.Controls.Control&gt;.&lt;/xref:System.Windows.Controls.Control&gt;&lt;/xref:System.Windows.Controls.Panel&gt;などの中間の基本クラスのいずれかに、FrameworkElement から派生</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you intend to use FrameworkElement as a base class, you might want to first examine the existing derived classes.</source>
          <target state="translated">FrameworkElement を基底クラスとして使用する場合は、まず既存の派生クラスを検査することができます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>FrameworkElement provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">FrameworkElement の基本的なシナリオの数は、サポートします、もいくつかの作成に使用する構成要素の意味で"element"ために必要な機能がない<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>で<ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For instance, a FrameworkElement does not define any true content model; FrameworkElement as a base class does not define a property that can create <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> child elements.</source>
          <target state="translated">たとえば、FrameworkElement が、真のコンテンツ モデルを定義しません基底クラスとして FrameworkElement が作成できるプロパティを定義していない<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>子要素です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In particular, you might want to look at &lt;xref:System.Windows.Controls.Control&gt; and &lt;xref:System.Windows.Controls.ContentControl&gt;.</source>
          <target state="translated">具体的には、することができます&lt;xref:System.Windows.Controls.Control&gt;と&lt;xref:System.Windows.Controls.ContentControl&gt;。&lt;/xref:System.Windows.Controls.ContentControl&gt;&lt;/xref:System.Windows.Controls.Control&gt;見る</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the rendered height of this element.</source>
          <target state="translated">この要素の描画時の高さを取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This property is a calculated value based on other height inputs, and the layout system.</source>
          <target state="translated">このプロパティは、その他の高さの入力と、レイアウト システムに基づいて計算される値です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; that are the basis of the input change.</source>
          <target state="translated">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;入力の変更の基礎にある&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because ActualHeight is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">ActualHeight が計算された値であるためには、複数存在する可能性がありますまたは増分変更をさまざまな操作の結果としてシステムにより報告された、レイアウトのことに注意してください。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">レイアウト システムには、子要素の親要素の制約用の領域の必要なメジャーが計算可能性があります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.</source>
          <target state="translated">このプロパティを設定することはできませんが<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>、基にすることができます、&lt;xref:System.Windows.Trigger&gt;スタイルでは、その値にします&lt;/xref:System.Windows.Trigger&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.ActualHeightProperty&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The element's height, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">値としての要素の高さ<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value is 0 (zero).</source>
          <target state="translated">既定値は 0 (ゼロです)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ActualHeight*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.ActualHeight*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.ActualHeight*&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the rendered width of this element.</source>
          <target state="translated">この要素の表示幅を取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This property is a calculated value based on other width inputs, and the layout system.</source>
          <target state="translated">このプロパティは、その他の幅の入力と、レイアウト システムに基づいて計算される値です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; that are the basis of the input change.</source>
          <target state="translated">値、実際のレンダリング パスに基づいて、レイアウト システム自体によって設定されているためとなる若干プロパティの設定された値の背後にあるなど&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;入力の変更の基礎にある&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Because ActualWidth is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
          <target state="translated">ActualWidth が計算された値であるためには、複数存在する可能性がありますまたは増分変更をさまざまな操作の結果としてシステムにより報告された、レイアウトのことに注意してください。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
          <target state="translated">レイアウト システムには、子要素の親要素の制約用の領域の必要なメジャーが計算可能性があります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Although you cannot set this property from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, you can base a &lt;xref:System.Windows.Trigger&gt; upon its value in a style.</source>
          <target state="translated">このプロパティを設定することはできませんが<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>、基にすることができます、&lt;xref:System.Windows.Trigger&gt;スタイルでは、その値にします&lt;/xref:System.Windows.Trigger&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ActualWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.ActualWidthProperty&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The element's width, as a value in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">値としての要素の幅<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default value is 0 (zero).</source>
          <target state="translated">既定値は 0 (ゼロです)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ActualWidth*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.ActualWidth*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.ActualWidth*&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Adds the provided object to the logical tree of this element.</source>
          <target state="translated">この要素の論理ツリーには、指定されたオブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use this method for the implementation of collections on objects that represent logical child elements of an element.</source>
          <target state="translated">要素の論理上の子要素を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</source>
          <target state="translated">プロパティの getter または setter、クラス処理を Changed イベント、コンス トラクター、またはコレクション型自体内では、子要素のコレクションのコレクションのメンテナンスを行う可能性があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</source>
          <target state="translated">使用可能な基本コントロール クラスのコンテンツ モデルの適切なものが、制御のシナリオの場合を除きは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.</source>
          <target state="translated">レベルのサブクラス化を検討してください&lt;xref:System.Windows.Controls.ContentControl&gt;、 &lt;xref:System.Windows.Controls.ItemsControl&gt;、 &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;&lt;/xref:System.Windows.Controls.HeaderedItemsControl&gt; &lt;/xref:System.Windows.Controls.ItemsControl&gt; &lt;/xref:System.Windows.Controls.ContentControl&gt; 。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These classes provide a content model with particular enforcement of logical tree child elements through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">これらのクラスを介して専用の論理ツリーの子要素の特定の強制使用したモデルのコンテンツを提供する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>、その他の機能では通常望ましくのサポートに加えて、<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>テンプレートを介してスタイルなどのコントロールです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information on how to use &lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt; and AddLogicalChild, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">使用する方法の詳細についての&lt;xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt;と AddLogicalChild を参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>&lt;/xref:System.Windows.FrameworkElement.LogicalChildren%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>AddLogicalChild may throw an exception if called at a time when the logical tree is being iterated by another process.</source>
          <target state="translated">別のプロセスによって、論理ツリーが反復処理されているときに呼び出された場合、AddLogicalChild は例外をスロー可能性があります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Child element to be added.</source>
          <target state="translated">追加する子要素です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</source>
          <target state="translated">必要に応じての現在のテンプレートのビジュアル ツリーを構築し、この呼び出しによってビジュアル ツリーが再構築されたかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Applications can call this method to guarantee that the visual tree of an element is complete.</source>
          <target state="translated">アプリケーションでは、要素のビジュアル ツリーが完了したことを保証するには、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This guarantee step might be necessary if code will be checking the child elements in the tree.</source>
          <target state="translated">この保証のステップのコードは、ツリー内の子要素をチェックする場合は、必要があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For typical element logic within applications, calling ApplyTemplate is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</source>
          <target state="translated">アプリケーション内でのロジックを一般的な要素、ApplyTemplate を呼び出す必要はありません、テンプレートは適用されるため、適切な位置にある要素を有効期間内に自動的にします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>ApplyTemplate is called on every Measure pass by the WPF framework-level layout system.</source>
          <target state="translated">ApplyTemplate がすべてのメジャーと呼ばれる WPF フレームワーク レベルのレイアウト システムによって渡します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; derived classes can use the &lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; class handler to be notified of cases where this method was called explicitly, or by the layout system.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;派生クラスで使用できる、&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;通知を受ける場合はこのメソッドが明示的に呼び出された場合のまたはレイアウト システム クラス ハンドラー&lt;/xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; 。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt; is called after the template is completely generated and attached to the logical tree.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;テンプレートが完全に生成され、論理ツリーにアタッチされている後に呼び出されます。&lt;/xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if visuals were added to the tree; returns <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> otherwise.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ビジュアルがツリーに追加された場合返します<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>それ以外の場合。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Implements &lt;xref:System.Windows.UIElement.ArrangeCore*&gt; (defined as virtual in <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) and seals the implementation.</source>
          <target state="translated">実装&lt;xref:System.Windows.UIElement.ArrangeCore*&gt;(で仮想として定義されている<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>) 実装をシールと&lt;/xref:System.Windows.UIElement.ArrangeCore*&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This method is sealed.</source>
          <target state="translated">このメソッドはシールされています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In order to override the logic in your custom element specifically for the arrange pass of element layout, your &lt;xref:System.Windows.FrameworkElement&gt; derived class must override &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;派生クラスが&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;をオーバーライドする必要があります&lt;/xref:System.Windows.FrameworkElement&gt;、要素のレイアウトの配置パスを具体的には、カスタム要素内のロジックをオーバーライドするのには</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">この要素が要素自体とその子を配置に使用する親の末尾の領域。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, positions child elements and determines a size for a <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived class.</source>
          <target state="translated">派生クラスでオーバーライドされると、子要素を配置しのサイズを決定する<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The final area within the parent that this element should use to arrange itself and its children.</source>
          <target state="translated">この要素が要素自体とその子を配置に使用する親の末尾の領域。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The actual size used.</source>
          <target state="translated">使用される実際のサイズ。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Starts the initialization process for this element.</source>
          <target state="translated">この要素の初期化プロセスを開始します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</source>
          <target state="translated">まだ公開または要素ツリーに要素を接続するための方法で調整する場合は、個々 の要素でこのメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For instance, you might have created a new &lt;xref:System.Windows.FrameworkElement&gt;, but have not yet attached it to any logical tree.</source>
          <target state="translated">たとえば、独自に作成した新しい&lt;xref:System.Windows.FrameworkElement&gt;、まだ接続していないことを任意の論理ツリーですが&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</source>
          <target state="translated">または、内の子要素を要素がここでは、論理ツリーは、ウィンドウやアプリケーションのページに接続されていない可能性があります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions that are contained in the provided storyboard.</source>
          <target state="translated">指定したストーリー ボードに含まれているアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">通常、作成、&lt;xref:System.Windows.Media.Animation.Storyboard&gt;または&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;マークアップにある要素を配置として、&lt;xref:System.Windows.EventTrigger&gt;要素のコンテンツ&lt;/xref:System.Windows.EventTrigger&gt;&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt;&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の&lt;xref:System.Windows.Media.Animation.Storyboard&gt;マークアップで公開されているプロパティでアドレス指定できます&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリー ボードです。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</source>
          <target state="translated">プロパティが既にアニメーション化されている場合の動作を指定するオプションで指定したストーリー ボードに含まれているアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">通常、作成、&lt;xref:System.Windows.Media.Animation.Storyboard&gt;または&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;マークアップにある要素を配置として、&lt;xref:System.Windows.EventTrigger&gt;要素のコンテンツ&lt;/xref:System.Windows.EventTrigger&gt;&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt;&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の&lt;xref:System.Windows.Media.Animation.Storyboard&gt;マークアップで公開されているプロパティでアドレス指定できます&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;。&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt;の属性としてハンドオフ動作を指定することができます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">使用して、作成 HandoffBehavior を適用する、 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;、 &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;、または&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;を使用してプロパティを&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;、any&lt;xref:System.Windows.Media.Animation.Clock&gt;以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません&lt;/xref:System.Windows.Media.Animation.Clock&gt;&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;&lt;/xref:System.Windows.Media.Animation.AnimationTimeline&gt;&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.</source>
          <target state="translated">時計を削除するいくつかの方法があります: - から削除するすべてのクロック プロパティを使用して、&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;または&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;アニメーション オブジェクトのメソッド&lt;/xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;&lt;/xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 <ph id="ph1">`null`</ph>&amp;2; つ目として。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">これにより、すべてのアニメーション クロックが、プロパティから削除します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.</source>
          <target state="translated">-特定&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;のクロックの一覧から、使用して&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;&lt;xref:System.Windows.Media.Animation.ClockController&gt;&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;&lt;xref:System.Windows.Media.Animation.ClockController&gt;。&lt;/xref:System.Windows.Media.Animation.ClockController&gt;のメソッド&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;を呼び出して、&lt;/xref:System.Windows.Media.Animation.ClockController&gt;取得する&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;プロパティ&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;を削除するには</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.</source>
          <target state="translated">これは、通常、&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;クロックのイベント ハンドラー&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt; 。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">唯一のルート クロックできますで制御されることに注意してください、 &lt;xref:System.Windows.Media.Animation.ClockController&gt;;&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;子クロックのプロパティを返します<ph id="ph1">`null`</ph>&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;/xref:System.Windows.Media.Animation.ClockController&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">なお、 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;、クロックの有効期間が forever の場合、イベントは発生しません&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.</source>
          <target state="translated">その場合は、ユーザー必要がある場合の判別&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;を呼び出す</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クロック オブジェクトに関する詳細については、次を参照してください。<bpt id="p1">[</bpt>アニメーションおよびタイミング システムの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリー ボードです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">ストーリー ボードで記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙体の値です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</source>
          <target state="translated">アニメーションの開始後のコントロールの状態を指定して、指定されたストーリー ボードに含まれているアクションのシーケンスを開始します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Most typical animation scenarios do not use this method.</source>
          <target state="translated">アニメーションの最も一般的なシナリオでは、このメソッドは使用しないでください。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Typically, you create the &lt;xref:System.Windows.Media.Animation.Storyboard&gt; or &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt; element in markup, and then you place these as the &lt;xref:System.Windows.EventTrigger&gt; content on an element.</source>
          <target state="translated">通常、作成、&lt;xref:System.Windows.Media.Animation.Storyboard&gt;または&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;マークアップにある要素を配置として、&lt;xref:System.Windows.EventTrigger&gt;要素のコンテンツ&lt;/xref:System.Windows.EventTrigger&gt;&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt;&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>When triggered by the event, the animation then runs.</source>
          <target state="translated">イベントによってトリガーされると、アニメーションが実行されます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Most of the control aspects of a &lt;xref:System.Windows.Media.Animation.Storyboard&gt; can be addressed by properties that are exposed in markup.</source>
          <target state="translated">ほとんどのコントロール要素の&lt;xref:System.Windows.Media.Animation.Storyboard&gt;マークアップで公開されているプロパティでアドレス指定できます&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For the signatures that do not use the <ph id="ph1">`isControllable`</ph>, parameter, or when that parameter is specified <ph id="ph2">`false`</ph>, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</source>
          <target state="translated">署名を使用しない、 <ph id="ph1">`isControllable`</ph>、パラメーター、そのパラメーターが指定されている場合または<ph id="ph2">`false`</ph>、「保留」の期間に達するとすぐに、アニメーションに関連付けられているタイムライン クロックは削除されます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Therefore the animation cannot be restarted after running once.</source>
          <target state="translated">そのため、アニメーションは、1 回の実行後に再開できません。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Controlling an animation also requires that the storyboard have an <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or be accessible by reference in code.</source>
          <target state="translated">アニメーションを制御するもある必要があります、ストーリー ボード、 <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>コード内で参照でアクセスできるか。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Handoff behavior can be specified as an attribute of &lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;。&lt;/xref:System.Windows.Media.Animation.BeginStoryboard&gt;の属性としてハンドオフ動作を指定することができます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Using the Compose HandoffBehavior    When you apply a &lt;xref:System.Windows.Media.Animation.Storyboard&gt;, &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;, or &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to a property by using the &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt; &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, any &lt;xref:System.Windows.Media.Animation.Clock&gt; objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</source>
          <target state="translated">使用して、作成 HandoffBehavior を適用する、 &lt;xref:System.Windows.Media.Animation.Storyboard&gt;、 &lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;、または&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;を使用してプロパティを&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;、any&lt;xref:System.Windows.Media.Animation.Clock&gt;以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムは、時計を自動的に削除されません&lt;/xref:System.Windows.Media.Animation.Clock&gt;&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;&lt;/xref:System.Windows.Media.Animation.AnimationTimeline&gt;&lt;/xref:System.Windows.Media.Animation.Storyboard&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>To avoid performance issues when you apply a large number of clocks by using &lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;, you should remove composing clocks from the animated property after they complete.</source>
          <target state="translated">使用して多数の時計を適用するときに、パフォーマンスの問題を回避する&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります&lt;/xref:System.Windows.Media.Animation.HandoffBehavior&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>There are several ways to remove a clock:      -   To remove all clocks from a property, use the &lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt; or &lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt; method of the animated object.</source>
          <target state="translated">時計を削除するいくつかの方法があります: - から削除するすべてのクロック プロパティを使用して、&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;または&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;アニメーション オブジェクトのメソッド&lt;/xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;&lt;/xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specify the property being animated as the first parameter, and <ph id="ph1">`null`</ph> as the second.</source>
          <target state="translated">最初のパラメーターとしてアニメーション化されているプロパティを指定し、 <ph id="ph1">`null`</ph>&amp;2; つ目として。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This removes all animation clocks from the property.</source>
          <target state="translated">これにより、すべてのアニメーション クロックが、プロパティから削除します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-   To remove a specific &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; from a list of clocks, use the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of the &lt;xref:System.Windows.Media.Animation.AnimationClock&gt; to retrieve a &lt;xref:System.Windows.Media.Animation.ClockController&gt;, then call the &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt; method of the &lt;xref:System.Windows.Media.Animation.ClockController&gt;.</source>
          <target state="translated">-特定&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;のクロックの一覧から、使用して&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;&lt;xref:System.Windows.Media.Animation.ClockController&gt;&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;&lt;xref:System.Windows.Media.Animation.ClockController&gt;。&lt;/xref:System.Windows.Media.Animation.ClockController&gt;のメソッド&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;を呼び出して、&lt;/xref:System.Windows.Media.Animation.ClockController&gt;取得する&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;プロパティ&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;/xref:System.Windows.Media.Animation.AnimationClock&gt;を削除するには</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This is typically done in the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event handler for a clock.</source>
          <target state="translated">これは、通常、&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;クロックのイベント ハンドラー&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt; 。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Note that only root clocks can be controlled by a &lt;xref:System.Windows.Media.Animation.ClockController&gt;; the &lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt; property of a child clock returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">唯一のルート クロックできますで制御されることに注意してください、 &lt;xref:System.Windows.Media.Animation.ClockController&gt;;&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;子クロックのプロパティを返します<ph id="ph1">`null`</ph>&lt;/xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;&lt;/xref:System.Windows.Media.Animation.ClockController&gt;。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Note also that the &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt; event is not raised if the effective duration of the clock is forever.</source>
          <target state="translated">なお、 &lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;、クロックの有効期間が forever の場合、イベントは発生しません&lt;/xref:System.Windows.Media.Animation.Clock.Completed&gt;。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In that case, the user must determine when to call &lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.</source>
          <target state="translated">その場合は、ユーザー必要がある場合の判別&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;.&lt;/xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;を呼び出す</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
          <target state="translated">これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When an object is garbage collected, its clocks are also disconnected and garbage collected.</source>
          <target state="translated">オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information about clock objects, see <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クロック オブジェクトに関する詳細については、次を参照してください。<bpt id="p1">[</bpt>アニメーションおよびタイミング システムの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The storyboard to begin.</source>
          <target state="translated">開始するストーリー ボードです。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</source>
          <target state="translated">ストーリー ボードで記述されたプロパティが既にアニメーション化されている場合に使用する動作を表す列挙体の値です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Declares whether the animation is controllable (can be paused) after it is started.</source>
          <target state="translated">アニメーションが制御可能かどうかを宣言 (一時停止できる) の開始後にします。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used for the element.</source>
          <target state="translated">取得または設定、 <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要素に使用されます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Data.BindingGroup&gt; can be used to validate the values of multiple properties of an object.</source>
          <target state="translated">A&lt;xref:System.Windows.Data.BindingGroup&gt;オブジェクトの複数のプロパティの値を検証するために使用できます&lt;/xref:System.Windows.Data.BindingGroup&gt;。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, suppose that an application prompts the user to enter an address and then populates an object of type <ph id="ph1">`Address`</ph>, which has the properties <ph id="ph2">`Street`</ph>, <ph id="ph3">`City`</ph>, <ph id="ph4">`ZipCode`</ph>, and <ph id="ph5">`Country`</ph>, with the values that the user provided.</source>
          <target state="translated">たとえば、アプリケーションがアドレスを入力するように求めるし、その型のオブジェクトが設定されます<ph id="ph1">`Address`</ph>、プロパティを持つ<ph id="ph2">`Street`</ph>、 <ph id="ph3">`City`</ph>、 <ph id="ph4">`ZipCode`</ph>、および<ph id="ph5">`Country`</ph>ユーザーが指定した値を持つ。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The application has a panel that contains four &lt;xref:System.Windows.Controls.TextBox&gt; controls, each of which is bound to one of the object’s properties.</source>
          <target state="translated">アプリケーションが&amp;4; つを含むパネル&lt;xref:System.Windows.Controls.TextBox&gt;オブジェクトのプロパティのいずれかにバインドされているは、コントロール&lt;/xref:System.Windows.Controls.TextBox&gt;。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You can use a &lt;xref:System.Windows.Controls.ValidationRule&gt; in a &lt;xref:System.Windows.Data.BindingGroup&gt; to validate the <ph id="ph1">`Address`</ph> object.</source>
          <target state="translated">使用することができます、&lt;xref:System.Windows.Controls.ValidationRule&gt;で、&lt;xref:System.Windows.Data.BindingGroup&gt;を検証する、<ph id="ph1">`Address`</ph>オブジェクト&lt;/xref:System.Windows.Data.BindingGroup&gt;&lt;/xref:System.Windows.Controls.ValidationRule&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.Windows.Controls.ValidationRule&gt; can ensure that the zip code is valid for the country of the address.</source>
          <target state="translated">たとえば、&lt;xref:System.Windows.Controls.ValidationRule&gt;郵便番号が有効、住所の国であることを確認できます&lt;/xref:System.Windows.Controls.ValidationRule&gt;。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Child elements inherit the &lt;xref:System.Windows.Data.BindingGroup&gt; from their parent elements, just as with any other inheritable property.</source>
          <target state="translated">子要素を継承、&lt;xref:System.Windows.Data.BindingGroup&gt;だけで、他の継承可能なプロパティと同様に、親要素から&lt;/xref:System.Windows.Data.BindingGroup&gt;。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_BindingGroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;|   |Metadata properties set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_BindingGroup"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;|  |メタデータ プロパティに設定<bpt id="p2">**</bpt>true<ept id="p2">**</ept>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.BindingGroupProperty&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used for the element.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要素に使用されます。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.BindingGroup*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.BindingGroup*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.BindingGroup*&gt;。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Attempts to bring this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">含まれているスクロール可能な領域内に、この要素を表示しようとしています。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.</source>
          <target state="translated">このメソッドを呼び出すことにより、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;の現在の要素から発生するイベントです&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.</source>
          <target state="translated">このイベントで処理できるように、 &lt;xref:System.Windows.Controls.ScrollViewer&gt;、または派生されているかのようなクラス&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.</source>
          <target state="translated">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、&lt;xref:System.Windows.Controls.ScrollViewer&gt;コントロール&lt;/xref:System.Windows.Controls.ScrollViewer&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the BringIntoView method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">どちらも、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;イベントも BringIntoView メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク情報を送信します&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">失敗の原因としては、&lt;xref:System.Windows.UIElement.Visibility%2A&gt;ある&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;以外のいくつかの値&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;など、要素の設定を含めることができます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.</source>
          <target state="translated">指定されていない署名を使用する場合、 <ph id="ph1">`targetRectangle`</ph>、全体の要素のサイズし (その&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) が表示される&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.</source>
          <target state="translated">このメソッドを呼び出して、可能性のあるを呼び出す&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;要素を含む親スクロール可能な領域を&lt;/xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">この要素がスクロール可能領域に含まれていない場合、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</source>
          <target state="translated">含まれているスクロール可能な領域内に、この要素の指定された領域のサイズを表示しようとしています。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>By calling this method, you raise a &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event that originates from the current element.</source>
          <target state="translated">このメソッドを呼び出すことにより、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;の現在の要素から発生するイベントです&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This event is raised so that it can be handled by a &lt;xref:System.Windows.Controls.ScrollViewer&gt;, or a derived or similar class.</source>
          <target state="translated">このイベントで処理できるように、 &lt;xref:System.Windows.Controls.ScrollViewer&gt;、または派生されているかのようなクラス&lt;/xref:System.Windows.Controls.ScrollViewer&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the &lt;xref:System.Windows.Controls.ScrollViewer&gt; control.</source>
          <target state="translated">想定される動作は、イベントがイベント データの処理済みとしてマーク、親要素によって処理され、イベントのソースに埋め込まれているロジックにより、ビューに組み込まこと、&lt;xref:System.Windows.Controls.ScrollViewer&gt;コントロール&lt;/xref:System.Windows.Controls.ScrollViewer&gt;。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Neither the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event nor the &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt; method transmit any information about success or failure, other than that the event is typically marked handled on success.</source>
          <target state="translated">どちらも、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;イベントも&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;メソッドについて、成功または失敗したもの以外のイベントは、通常の処理の成功とマーク任意の情報を送信する&lt;/xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Reasons for failure can include the element settings, such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; being some value other than &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">失敗の原因としては、&lt;xref:System.Windows.UIElement.Visibility%2A&gt;ある&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;以外のいくつかの値&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;など、要素の設定を含めることができます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you use the signature that does not specify a <ph id="ph1">`targetRectangle`</ph>, then the entire element size (its &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) will be made visible.</source>
          <target state="translated">指定されていない署名を使用する場合、 <ph id="ph1">`targetRectangle`</ph>、全体の要素のサイズし (その&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;) が表示される&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>By calling this method, you potentially will call &lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt; on any parent scrollable area that contains the element.</source>
          <target state="translated">このメソッドを呼び出して、可能性のあるを呼び出す&lt;xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;要素を含む親スクロール可能な領域を&lt;/xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If this element is not contained in a scrollable area, the &lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt; event is still raised, but there will be no effect because there are no event listeners.</source>
          <target state="translated">この要素がスクロール可能領域に含まれていない場合、&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;も、イベントが発生しますが、なければ効果イベント リスナーが存在しないためです&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoView&gt;。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specified size of the element that should also be brought into view.</source>
          <target state="translated">ビュー内に取り込まれますもする必要がありますを要素のサイズを指定します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Gets or sets the context menu element that should appear whenever the context menu is requested through <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> from within this element.</source>
          <target state="translated">取得または設定を通じて、コンテキスト メニューが要求されたときに表示されるコンテキスト メニュー要素<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>からこの要素内で。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, and it is technically possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a ContextMenu property.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;自体は、&lt;xref:System.Windows.FrameworkElement&gt;クラスを派生しの技術的に可能であれば&lt;xref:System.Windows.Controls.ContextMenu&gt;ContextMenu プロパティを持つ自体&lt;/xref:System.Windows.Controls.ContextMenu&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>However, this creates a confusing context menu experience for the user and this practice is not recommended.</source>
          <target state="translated">ただし、これがユーザーの混乱を招くコンテキスト メニュー エクスペリエンスを作成し、この方法はお勧めできません。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ContextMenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ContextMenu"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.ContextMenuProperty&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The context menu assigned to this element.</source>
          <target state="translated">この要素に割り当てられているコンテキスト メニュー。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Occurs just before any context menu on the element is closed.</source>
          <target state="translated">要素のコンテキスト メニューが閉じられる直前に発生します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To suppress closing context menus, handlers of the event should mark it as handled.</source>
          <target state="translated">閉じないようにするには、コンテキスト メニュー、イベントのハンドラーは、処理済みとしてマークします。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying service's definition of the event:       <bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CorePseudocode#FEContextMenuClosing<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)</ept><ept id="p1">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuClosing identifier such that you can use it as a trigger).</source>
          <target state="translated">としては、このイベントを使用して、&lt;xref:System.Windows.EventTrigger&gt;スタイルでは、イベントの基になるサービスの定義を参照する必要があります: <bpt id="p1">[!code-xml</bpt> <bpt id="p2">[</bpt>CorePseudocode #FEContextMenuClosing<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing)</ept> <ept id="p1">]</ept> (ために、この使用法が必要でイベントの実装&lt;xref:System.Windows.FrameworkElement&gt;、基になるを公開するトリガーとして使用することになるように、サービスのイベントで ContextMenuClosing 識別子がマップされていない).&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but the ContextMenuClosing event will not be raised by a context menu directly.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;自体は、&lt;xref:System.Windows.FrameworkElement&gt;クラスを派生が ContextMenuClosing イベントは発生しませんコンテキスト メニューで直接。&lt;/xref:System.Windows.FrameworkElement&gt; 。&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</source>
          <target state="translated">代わりに、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI にコンテキスト メニューを閉じるしようとしたときにだけ発生する要素からイベントが発生します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>However it is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property (a nested context menu).</source>
          <target state="translated">ただしこれは&lt;xref:System.Windows.Controls.ContextMenu&gt;自体が、&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;プロパティ (入れ子になったコンテキスト メニュー).&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In this case the &lt;xref:System.Windows.Controls.ContextMenu&gt; really does own the nested &lt;xref:System.Windows.Controls.ContextMenu&gt; and might raise the event, with the source of the event being the nested context menu.</source>
          <target state="translated">この場合、 &lt;xref:System.Windows.Controls.ContextMenu&gt;、入れ子になった実際に所有して&lt;xref:System.Windows.Controls.ContextMenu&gt;し、入れ子になったコンテキスト メニューをされているイベントのソースと、イベントを発生させる可能性があります&lt;/xref:System.Windows.Controls.ContextMenu&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;) but the &lt;xref:System.Windows.Controls.ContextMenu.Closed&gt; event does not provide you the opportunity to cancel the user action.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;クラス自体は、類似のイベントもあります (&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;) が、&lt;xref:System.Windows.Controls.ContextMenu.Closed&gt;イベントは、ユーザーの操作をキャンセルすることが提供されません&lt;/xref:System.Windows.Controls.ContextMenu.Closed&gt;&lt;/xref:System.Windows.Controls.ContextMenu.Closed&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A&gt;&lt;/xref:System.Windows.Controls.ContextMenuEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.ContextMenuClosingEvent&gt;。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Occurs when any context menu on the element is opened.</source>
          <target state="translated">要素のコンテキスト メニューを開いたときに発生します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>To manually open context menus, handlers of the events should mark the relevant event as handled.</source>
          <target state="translated">コンテキスト メニューを手動で開く、処理済みとして、イベントのハンドラーは、関連するイベントをマークする必要があります。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Otherwise, the existing value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property will be used to automatically open a context menu.</source>
          <target state="translated">それ以外の場合の既存の値、&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;プロパティが自動的にコンテキスト メニューを開き、使用されます&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property and then open the new &lt;xref:System.Windows.Controls.ContextMenu&gt;.</source>
          <target state="translated">既定のアクションを効果的に取り消し処理イベントをマークすること&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;プロパティとし、開く新しい&lt;xref:System.Windows.Controls.ContextMenu&gt;.&lt;/xref:System.Windows.Controls.ContextMenu&gt;&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;の値にリセットすること</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>However, there is a timing issue you should be aware of.</source>
          <target state="translated">ただしはタイミングの問題を認識する必要があります。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In order to completely replace the context menu through a ContextMenuOpening handler, the initial context menu must not be null / empty.</source>
          <target state="translated">ContextMenuOpening ハンドラーによりコンテキスト メニューを完全に置換するために、初期コンテキスト メニューは null/空には指定できません。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Alternatively, you might need to handle the event and then manually open a new context menu.</source>
          <target state="translated">また、イベントを処理し、新しいコンテキスト メニューを手動で開く必要があります。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>How to: Handle the ContextMenuOpening Event<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>する方法: ContextMenuOpening イベントを処理<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To use this event as an &lt;xref:System.Windows.EventTrigger&gt; in a style, you must reference the underlying attached event:       <bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CorePseudocode#FEContextMenuOpening<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)</ept><ept id="p1">]</ept>       (This usage is required because the event implementation on &lt;xref:System.Windows.FrameworkElement&gt; that exposes the underlying service event does not map the ContextMenuOpening identifier such that you can use it in triggers).</source>
          <target state="translated">としては、このイベントを使用して、&lt;xref:System.Windows.EventTrigger&gt;スタイルでは、基になる添付イベントを参照する必要があります: <bpt id="p1">[!code-xml</bpt> <bpt id="p2">[</bpt>CorePseudocode #FEContextMenuOpening<ept id="p2">](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening)</ept> <ept id="p1">]</ept> (ために、この使用法が必要でイベントの実装&lt;xref:System.Windows.FrameworkElement&gt;、基になるを公開するトリガーで使用することになるように、サービスのイベントで ContextMenuOpening 識別子がマップされていない).&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.ContextMenu&gt; itself is a &lt;xref:System.Windows.FrameworkElement&gt; derived class, but this event will not be raised from the context menu being opened as a source.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;自体は、&lt;xref:System.Windows.FrameworkElement&gt;派生クラスには、ソースとして開かれている、コンテキスト メニューからこのイベントは発生しません&lt;/xref:System.Windows.FrameworkElement&gt;。&lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</source>
          <target state="translated">イベントは、プロパティとして、コンテキスト メニューを"所有"して、ユーザーが UI のコンテキスト メニューを開くしようとしたときにだけ発生する要素から発生します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>It is possible for &lt;xref:System.Windows.Controls.ContextMenu&gt; itself to have a &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; property, but you should avoid this scenario (for details, see &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;).</source>
          <target state="translated">ことが&lt;xref:System.Windows.Controls.ContextMenu&gt;自体が、&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;がプロパティには、このシナリオを避ける必要があります (詳細については、「 &lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;).&lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.FrameworkElement.ContextMenu%2A&gt; &lt;/xref:System.Windows.Controls.ContextMenu&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Controls.ContextMenu&gt; class itself also has a similar event (&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;) but &lt;xref:System.Windows.Controls.ContextMenu.Opened&gt; does not provide you the opportunity to cancel the user action.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ContextMenu&gt;クラス自体は、類似のイベントもあります (&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;) が、&lt;xref:System.Windows.Controls.ContextMenu.Opened&gt;ユーザーの操作をキャンセルする機会を提供しません&lt;/xref:System.Windows.Controls.ContextMenu.Opened&gt;&lt;/xref:System.Windows.Controls.ContextMenu.Opened&gt;&lt;/xref:System.Windows.Controls.ContextMenu&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Controls.ContextMenuEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A&gt;&lt;/xref:System.Windows.Controls.ContextMenuEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent&gt;。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ContextMenu*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.ContextMenu*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.ContextMenu*&gt;。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets or sets the cursor that displays when the mouse pointer is over this element.</source>
          <target state="translated">取得またはこの要素上にマウス ポインターがときに表示されるカーソルを設定します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>When you set this property in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor relies on type conversion for the &lt;xref:System.Windows.Input.Cursor&gt; class to evaluate the string.</source>
          <target state="translated">このプロパティを設定すると<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサがの型の変換に依存しています、&lt;xref:System.Windows.Input.Cursor&gt;文字列を評価するクラス&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The provided string should evaluate to a &lt;xref:System.Windows.Input.CursorType&gt; value.</source>
          <target state="translated">指定された文字列に評価される必要があります、&lt;xref:System.Windows.Input.CursorType&gt;値&lt;/xref:System.Windows.Input.CursorType&gt;。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Input.Cursor&gt; for details.</source>
          <target state="translated">参照してください&lt;xref:System.Windows.Input.Cursor&gt;詳細についてはします&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; property.</source>
          <target state="translated">このプロパティによって設定されるカーソルは、マウス ポインターがこの要素上に表示されないかどうかの値に依存しても、&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</source>
          <target state="translated">また、アクティブなドラッグ、マウスのキャプチャ、テキスト コントロール、および、内のモードの編集など、イベント関連の考慮事項も影響を与えますカーソル、このプロパティで指定した値よりも優先順位の高い。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>To revert the behavior of setting this property to the eventual default, set it to <ph id="ph1">`null`</ph> again.</source>
          <target state="translated">最終的な既定値にこのプロパティの設定の動作を戻すには、設定<ph id="ph1">`null`</ph>もう一度です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`null`</ph> default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</source>
          <target state="translated"><ph id="ph1">`null`</ph>既定を意味実際的なカーソルの値の決定がここでは遅延し、別の場所から入手してください。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If presented without programmatic values from any source, the default cursor that is visually over a <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> application will be an arrow.</source>
          <target state="translated">提示された場合、ソースからプログラムで値を使用せず、既定のカーソルが視覚的に以上、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーションは矢印になります。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>However, the transient cursor changes are not set to the Cursor values of the elements when they are passed over.</source>
          <target state="translated">ただし、経由で渡されるとき、カーソルの一時的な変更は、要素のカーソルの値に設定されません。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The Cursor property will only report non null values in cases where it was actually set, for instance through code or a style.</source>
          <target state="translated">実際には、インスタンスまたは使用して設定コード スタイルだプロパティのみの非 null 値がレポートされます、カーソルの場合です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Each movement of the mouse over a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> application raises a &lt;xref:System.Windows.UIElement.QueryCursor&gt; event.</source>
          <target state="translated">上にあるマウスが移動するたび、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>アプリケーションが発生し、&lt;xref:System.Windows.UIElement.QueryCursor&gt;イベント&lt;/xref:System.Windows.UIElement.QueryCursor&gt;。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</source>
          <target state="translated">イベント バブルと経路上の任意の要素、イベントを処理し、このイベントの引数をカーソルの値を設定する機会があります。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This is the mechanism that produces the visually apparent cursor in most cases.</source>
          <target state="translated">これは、ほとんどの場合、視覚的に明らかなカーソルを生成するメカニズムです。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Windows.UIElement.QueryCursor&gt; handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the Cursor property at any level, unless &lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt; is set.</source>
          <target state="translated">場合、&lt;xref:System.Windows.UIElement.QueryCursor&gt;ハンドラーは、カーソルの結果を返すし、イベントが処理され、引数に変更された値を持つファクトよりも優先任意のレベルでは、カーソルのプロパティの値しない限り、&lt;xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;が設定されています&lt;/xref:System.Windows.FrameworkElement.ForceCursor%2A&gt;&lt;/xref:System.Windows.UIElement.QueryCursor&gt;。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If not are not creating a custom cursor, you typically set this property to a static property value of the &lt;xref:System.Windows.Input.Cursors&gt; class.</source>
          <target state="translated">通常、&lt;xref:System.Windows.Input.Cursors&gt;クラス&lt;/xref:System.Windows.Input.Cursors&gt;の静的プロパティの値にこのプロパティを設定する場合は、カスタムのカーソルを作成しない、</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Setting Cursor in code requires one of the following:      -   Call the &lt;xref:System.Windows.Input.Cursor&gt; constructor to get a &lt;xref:System.Windows.Input.Cursor&gt; instance.</source>
          <target state="translated">次のいずれかのコードにカーソルを設定する必要があります:-呼び出し、&lt;xref:System.Windows.Input.Cursor&gt;を取得するコンス トラクター、&lt;xref:System.Windows.Input.Cursor&gt;インスタンス&lt;/xref:System.Windows.Input.Cursor&gt;&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Both signatures of the &lt;xref:System.Windows.Input.Cursor&gt; constructor use streams or files, in anticipation that you are creating the &lt;xref:System.Windows.Input.Cursor&gt; object for a custom cursor.</source>
          <target state="translated">両方の署名、&lt;xref:System.Windows.Input.Cursor&gt;ストリームまたはファイルの作成中に応じるために、コンス トラクターを使用して、&lt;xref:System.Windows.Input.Cursor&gt;カーソルのカスタム オブジェクトです&lt;/xref:System.Windows.Input.Cursor&gt;&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>-   Use the &lt;xref:System.Windows.Input.CursorConverter&gt; class and its &lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt; method to specify a cursor by &lt;xref:System.Windows.Input.CursorType&gt;, or a string that can evaluate to a &lt;xref:System.Windows.Input.CursorType&gt;, and cast the return to &lt;xref:System.Windows.Input.Cursor&gt;.</source>
          <target state="translated">-を使用して、&lt;xref:System.Windows.Input.CursorConverter&gt;クラスとその&lt;xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;メソッドによって、カーソルを指定する&lt;xref:System.Windows.Input.CursorType&gt;、または文字列に評価される、 &lt;xref:System.Windows.Input.CursorType&gt;、 &lt;xref:System.Windows.Input.Cursor&gt;.&lt;/xref:System.Windows.Input.Cursor&gt;に戻り値のキャストと&lt;/xref:System.Windows.Input.CursorType&gt;&lt;/xref:System.Windows.Input.CursorType&gt;&lt;/xref:System.Windows.Input.CursorConverter.ConvertFrom%2A&gt;&lt;/xref:System.Windows.Input.CursorConverter&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Setting the &lt;xref:System.Windows.Input.Cursor&gt; to a custom value is not enabled in partial trust.</source>
          <target state="translated">設定、&lt;xref:System.Windows.Input.Cursor&gt;にカスタム値が有効でない部分的な信頼&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>For more information on custom cursors, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">カスタム カーソルの詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Cursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.CursorProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Cursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.CursorProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.CursorProperty&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The cursor to display.</source>
          <target state="translated">表示するカーソル。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The default value is defined as <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> per this dependency property.</source>
          <target state="translated">既定値として定義<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この依存関係プロパティごとです。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>However, the practical default at run time will come from a variety of factors.</source>
          <target state="translated">ただし、実行時に実用的な既定値は、さまざまな要因から取得されます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Cursor*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt;。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Gets or sets the data context for an element when it participates in data binding.</source>
          <target state="translated">取得または、データ バインディングに含まれているときに、要素のデータ コンテキストを設定します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Data context<ept id="p1">*</ept> is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</source>
          <target state="translated"><bpt id="p1">*</bpt>データ コンテキスト<ept id="p1">*</ept>概念により、バインディング、だけでなく、バインディング、パスなどの他の特性に使用されるデータ ソースについて、親要素から情報を継承する要素です。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Data context can be set directly to a <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, with the bindings evaluating to properties of that object.</source>
          <target state="translated">直接データ コンテキストを設定することができます、<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>オブジェクト、そのオブジェクトのプロパティを評価する、バインディングを使用します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Alternatively, you can set the data context to a &lt;xref:System.Windows.Data.DataSourceProvider&gt; object.</source>
          <target state="translated">または、データ コンテキストを設定、&lt;xref:System.Windows.Data.DataSourceProvider&gt;オブジェクト&lt;/xref:System.Windows.Data.DataSourceProvider&gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>If there are child elements without other values for DataContext established through local values or styles, then the property system will set the value to be the DataContext value of the nearest parent element with this value assigned.</source>
          <target state="translated">ローカル値またはスタイルを介して確立 DataContext の他の値を使用せずに子要素がある場合は、プロパティのシステムの間で割り当てられているこの値を持つ最も近い親要素の DataContext の値を指定する値が設定されます。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use one of the following properties of the &lt;xref:System.Windows.Data.Binding&gt; class to specify the binding source explicitly: &lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;, &lt;xref:System.Windows.Data.Binding.Source%2A&gt;, or &lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;.</source>
          <target state="translated">次のプロパティのいずれかを使用する代わりに、&lt;xref:System.Windows.Data.Binding&gt;バインディング ソースを明示的に指定するクラス: &lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;、 &lt;xref:System.Windows.Data.Binding.Source%2A&gt;、または&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;.&lt;/xref:System.Windows.Data.Binding.RelativeSource%2A&gt; &lt;/xref:System.Windows.Data.Binding.Source%2A&gt; &lt;/xref:System.Windows.Data.Binding.ElementName%2A&gt; &lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: バインド ソースを指定して<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, DataContext is most typically set to as a &lt;xref:System.Windows.Data.Binding&gt; declaration.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>、DataContext として設定最も一般的な&lt;xref:System.Windows.Data.Binding&gt;宣言&lt;/xref:System.Windows.Data.Binding&gt;。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>You can use either property element syntax or attribute syntax.</source>
          <target state="translated">プロパティ要素構文または属性の構文のいずれかを使用することができます。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Attribute syntax is shown in the example on this page.</source>
          <target state="translated">属性構文は、このページの例に示しています。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>You can also use code to set DataContext.</source>
          <target state="translated">コードを使用して、DataContext を設定することもできます。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>DataContext is a bindable property, to facilitate scenarios where one context might be bound to another.</source>
          <target state="translated">DataContext は、別に&amp;1; つのコンテキストをバインドする場合がありますのシナリオを容易にするために、バインド可能なプロパティです。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>However, if you bind to DataContext, be careful to not create circular binding references (do not bind a DataContext to itself, which is possible to do because of the property value inheritance nature of the DataContext property).</source>
          <target state="translated">ただし、DataContext にバインドする場合は、(バインドしない DataContext をそれ自体に、プロパティ値の継承の性質、DataContext プロパティが可能である) の循環バインディング参照を作成しないように注意します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.DataContext&gt;       &lt;dataContextObject /&gt;     &lt;/object.DataContext&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlAttributeUsage_DataContext"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph2">```   &lt;object DataContext="bindingUsage"/&gt;   - or -   &lt;object DataContext="{resourceExtension contextResourceKey}"/&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_DataContext"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>dataContextObject<ept id="p4">*</ept>    A directly embedded object that serves as data context for any bindings within the parent element.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.DataContext&gt;       &lt;dataContextObject /&gt;     &lt;/object.DataContext&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlAttributeUsage_DataContext"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 属性の使用<ph id="ph2">```   &lt;object DataContext="bindingUsage"/&gt;   - or -   &lt;object DataContext="{resourceExtension contextResourceKey}"/&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_DataContext"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>dataContextObject<ept id="p4">*</ept>親要素内のすべてのバインディングのデータ コンテキストとして機能する直接埋め込まれたオブジェクト。            </target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Typically, this object is a &lt;xref:System.Windows.Data.Binding&gt; or another &lt;xref:System.Windows.Data.BindingBase&gt; derived class.</source>
          <target state="translated">通常、このオブジェクトは、&lt;xref:System.Windows.Data.Binding&gt;&lt;xref:System.Windows.Data.BindingBase&gt;派生したクラスの&lt;/xref:System.Windows.Data.BindingBase&gt;別、または&lt;/xref:System.Windows.Data.Binding&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Alternatively, raw data of any <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> object type intended for binding may be placed here, with the actual bindings defined later.</source>
          <target state="translated">または、いずれかの生データ<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>オブジェクトの種類のバインディングは、後で定義されている実際のバインディングをここでは、配置することも対象としています。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept>    A binding usage that evaluates to an appropriate data context.</source>
          <target state="translated"><bpt id="p1">*</bpt>bindingUsage<ept id="p1">*</ept>適切なデータ コンテキストに評価されるバインディングの使用方法です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>マークアップ拡張機能のバインド<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept>    One of the following:  or .</source>
          <target state="translated"><bpt id="p1">*</bpt>resourceExtension<ept id="p1">*</ept>次のいずれか。 またはします。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This usage is used when referring to raw data defined as an object in resources.</source>
          <target state="translated">この使用法は、リソース内のオブジェクトとして定義されている、生データを参照するときに使用されます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept>    The key identifier for the object being requested from within a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated"><bpt id="p1">*</bpt>contextResourceKey<ept id="p1">*</ept> &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;内から要求されたオブジェクトのキー識別子</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DataContextProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_DataContext"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.DataContextProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.DataContextProperty&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The object to use as data context.</source>
          <target state="translated">データ コンテキストとして使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Occurs when the data context for this element changes.</source>
          <target state="translated">この要素のデータ コンテキストが変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>For an explanation of data contexts and data binding, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">データ コンテキストおよびデータ バインディングの詳細については、次を参照してください。<bpt id="p1">[</bpt>データ バインディングの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When the &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; for an element changes, all data-bound properties on this element are potentially affected.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ときに、&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;要素変更では、この要素上のすべてのデータ バインド プロパティ可能性のある影響を受けます&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</source>
          <target state="translated">これは、データ コンテキストを継承するには、論理ツリーで、現在の要素の子要素である任意の要素も、現在の要素自体に適用されます。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>All such existing bindings must re-interpret the new &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; and will reevaluate the binding results.</source>
          <target state="translated">このような既存のすべてのバインドは、新しい再解釈する必要があります&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;バインドの結果を再評価および&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the DataContextChanged event.</source>
          <target state="translated">データ バインディング エンジンは、DataContextChanged イベントの発生に対して、これらの再評価の順序に関する決定的ではないです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The reevaluations can occur before the event, after the event, or in any mixture.</source>
          <target state="translated">イベントの後、または任意の組み合わせで、再評価は、イベントの前に発生します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.DataContext*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.DataContext*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.DataContext*&gt;。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</source>
          <target state="translated">取得または設定を使用してテーマ スタイルを使用または定義されているときに、このコントロールのスタイルを参照するキー。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This property is typically not set through any of its direct property accessors.</source>
          <target state="translated">このプロパティは、通常はその直接のプロパティ アクセサーのいずれかを設定されません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Instead, you override the type-specific metadata of this dependency property every time you create a new &lt;xref:System.Windows.FrameworkElement&gt; derived class.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;派生したクラスの&lt;/xref:System.Windows.FrameworkElement&gt;新しいを作成するたびにこの依存関係プロパティの型に固有のメタデータをオーバーライドする代わりに、</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>When you derive a control, call the &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method against the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt; identifier, within the static constructor of the control derived class (or equivalent class initialization).</source>
          <target state="translated">コントロールを派生するときに呼び出す、&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;メソッドに対して、&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;識別子、コントロールの静的コンス トラクター内で派生したクラス (または同等のクラス初期化) します&lt;/xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</source>
          <target state="translated">コントロール通常独自の型にするには、このプロパティの既定値が上書きが場合によってはでしたも使用してテーマ ディクショナリ内のスタイルが存在する基本型です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</source>
          <target state="translated">これは、基本コントロールのコントロールのテンプレートが完全にその派生したコントロールのビジュアル表現を定義し、どのような追加のメンバーが派生型を公開では、コントロール テンプレートの一部としては、追加の要素は不要な場合のみ実用的です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>If you want your element or control to deliberately not use theme styles, set the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">要素またはコントロールは意図的にテーマのスタイルを使用する場合は、設定、&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_DefaultStyleKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_DefaultStyleKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The style key.</source>
          <target state="translated">スタイルのキー。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To work correctly as part of theme style lookup, this value is expected to be the &lt;xref:System.Type&gt; of the control being styled.</source>
          <target state="translated">テーマ スタイル参照の一部として正常に機能するこの値は必要であるが、&lt;xref:System.Type&gt;コントロールのスタイルを設定します&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.DefaultStyleKey*&gt;。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Indicates that the initialization process for the element is complete.</source>
          <target state="translated">要素の初期化プロセスが完了したことを示します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was previously called, the base implementation will raise the &lt;xref:System.Windows.FrameworkElement.Initialized&gt; event.</source>
          <target state="translated">場合&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;が既に呼び出されて、基本実装を発生させる、&lt;xref:System.Windows.FrameworkElement.Initialized&gt;イベント&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;&lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was not called or it could not be determined whether &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; was called, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; is not raised and an exception is thrown instead.</source>
          <target state="translated">それ以外の場合&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;が呼び出されていないかではない可能性があるかどうかを確認&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;、呼び出された&lt;xref:System.Windows.FrameworkElement.Initialized&gt;は発生しません代わりに、例外がスローされます&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;&lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;&lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>EndInit was called without &lt;xref:System.Windows.FrameworkElement.BeginInit*&gt; having previously been called on the element.</source>
          <target state="translated">EndInit なしで呼び出されました&lt;xref:System.Windows.FrameworkElement.BeginInit*&gt;以前に、要素で呼び出されるず&lt;/xref:System.Windows.FrameworkElement.BeginInit*&gt;。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Finds an element that has the provided identifier name.</source>
          <target state="translated">指定した識別子の名前を持つ要素を検索します。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>If the element has child elements, these child elements are all searched recursively for the requested named element.</source>
          <target state="translated">要素に子要素がある場合は、要求された名前を持つ要素を再帰的には、すべて検索は、これらの子要素です。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>FindName operates within the current element's namescope.</source>
          <target state="translated">FindName は、現在の要素の名前スコープ内で動作します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The name of the requested element.</source>
          <target state="translated">要求された要素の名前。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The requested element.</source>
          <target state="translated">要求された要素。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no matching element was found.</source>
          <target state="translated">これは、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>一致する要素が見つからなかった場合です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</source>
          <target state="translated">指定されたキーにリソースを検索し、要求されたリソースが見つからない場合に例外をスローします。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; が見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If you do not want to handle exceptions that result from calling FindResource, call &lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; instead.</source>
          <target state="translated">FindResource、呼び出しを呼び出すことに起因する例外を処理したくない場合&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;代わりにします&lt;/xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt; returns <ph id="ph1">`null`</ph> when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;返します<ph id="ph1">`null`</ph>要求されたリソースが見つからないし、例外はスローされません。&lt;/xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</source>
          <target state="translated">呼び出し元の要素で、リソースが見つからない場合論理ツリー内の親要素、検索結果の 次へし、アプリケーション、し、テーマ、最後にシステム リソースです。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</source>
          <target state="translated">この参照方法は、リソースがマークアップで動的リソース参照によって要求された場合に、ツリーを検索する方法と同じです。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For more information about resource lookup, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">リソースの検索の詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Typically, you immediately cast a FindResource return value to the type of the property that you setting with the returned resource value.</source>
          <target state="translated">通常、戻り値をプロパティの型で返されたリソースの値を設定する FindResource はすぐにキャストします。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Resource keys are not necessarily strings.</source>
          <target state="translated">リソース キーは必ずしも文字列です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>For instance, styles for controls at the theme level are deliberately keyed to the &lt;xref:System.Type&gt; of the control, and application or page styles for controls typically use this same key convention.</source>
          <target state="translated">たとえば、スタイル、テーマのレベルでのコントロールが意図的と適合するため、&lt;xref:System.Type&gt;の管理、およびアプリケーションまたはページのスタイルのコントロールを通常使用してこの同じキー規約&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>XAML Resources<ept id="p2">](../Topic/XAML%20Resources.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>または<bpt id="p2">[</bpt>XAML リソース<ept id="p2">](../Topic/XAML%20Resources.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The key identifier for the requested resource.</source>
          <target state="translated">要求されたリソースのキー識別子。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The requested resource.</source>
          <target state="translated">要求されたリソースです。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>If no resource with the provided key was found, an exception is thrown.</source>
          <target state="translated">指定されたキーを持つリソースが見つからなかった場合、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value might also be returned in the exception case.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>例外の場合で、値を返すも可能性があります。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and an event handler does not exist for the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph>見つからず、用、イベント ハンドラーがない、 <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> was not found and the <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*&gt;</ph> property is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">- または -<ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph>が見つかりませんでした、<ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*&gt;</ph>プロパティは<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>で、 <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher.UnhandledException"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceKey&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Gets or sets the direction that text and other <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> elements flow within any parent element that controls their layout.</source>
          <target state="translated">取得またはテキストおよびその他の方向を設定<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>要素のレイアウトを制御する親要素内でのフローします。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The direction that text and other <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> elements flow within their parent element, as a value of the enumeration.</source>
          <target state="translated">方向そのテキストおよびその他の<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>列挙体の値、親要素内で要素のフローします。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.FlowDirection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.FlowDirection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</source>
          <target state="translated">取得または外観、効果、またはこの要素にキーボード フォーカスを受け取ったときに適用するその他のスタイル特性のカスタマイズを可能にするプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>This property affects visual appearance but does not report &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt; in metadata.</source>
          <target state="translated">このプロパティは、視覚的な外観に影響を与えますが、状況は報告されません&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;メタデータにします&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</source>
          <target state="translated">これは、視覚的な外観の変更イベント ドリブンなすべての時刻に適用されるおよびしたがっては限らないメタデータに、visual またはレイアウトの情報です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</source>
          <target state="translated">概念的には、フォーカスがコントロールに適用される視覚的な動作は、コントロール間で一貫している必要があります。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</source>
          <target state="translated">一貫性を実現するための最もわかりやすい方法では、全体のテーマを作成している場合にのみフォーカス visual スタイルを変更します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</source>
          <target state="translated">個々 のコントロールのスタイルとテーマの一部ではなくこのプロパティを設定キーボード フォーカスに関するユーザー エクスペリエンスに混乱をこれは、このプロパティの使用目的はありません。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as &lt;xref:System.Windows.UIElement.IsFocused%2A&gt; or &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;, and to do so in a way that does not visually interfere with any existing focus visual style.</source>
          <target state="translated">コントロール固有の動作は意図的に一貫したテーマにする場合は、はるかに優れた方法を使用してトリガーのスタイルで入力状態の個々 のプロパティのように&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;または&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;が既存のフォーカス visual スタイルに視覚的に干渉しないようにするためです&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;&lt;/xref:System.Windows.UIElement.IsFocused%2A&gt;。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>For more information on the design intention of FocusVisualStyle and alternative focus properties, see <bpt id="p1">[</bpt>Styling for Focus in Controls, and FocusVisualStyle<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">FocusVisualStyle と代替フォーカス プロパティの目的で設計の詳細については、次を参照してください。<bpt id="p1">[</bpt>コントロール、および FocusVisualStyle でフォーカスのスタイルは<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object FocusVisualStyle="{resourceExtension styleResourceKey}"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_FocusVisualStyle"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id="p3">&lt;a name="xamlValues_FocusVisualStyle"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>    One of the following: , or .</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object FocusVisualStyle="{resourceExtension styleResourceKey}"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_FocusVisualStyle"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<bpt id="p3">&lt;a name="xamlValues_FocusVisualStyle"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>次のいずれかの: または。      </target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>    The key that identifies the style being requested.</source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>要求されているスタイルを識別するキー。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">このキーは&lt;xref:System.Windows.ResourceDictionary&gt;。&lt;/xref:System.Windows.ResourceDictionary&gt;で既存のリソース</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; プロパティ要素構文は技術的に可能ですが、推奨されません。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>インライン スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.</source>
          <target state="translated">バインドの参照を使用して、または&lt;xref:System.Windows.Data.Binding&gt;も可能ですが、一般的ではない&lt;/xref:System.Windows.Data.Binding&gt;。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_FocusVisualStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.FocusVisualStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The desired style to apply on focus.</source>
          <target state="translated">フォーカスに適用する目的のスタイル。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The default value as declared in the dependency property is an empty static <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">依存関係プロパティで宣言されている既定値は、空の静的<bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</source>
          <target state="translated">ただし、実行時に有効な値は多くの場合 (必ずではありませんが) コントロールのテーマ サポートによって提供されたスタイルです。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.FocusVisualStyle*&gt;。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should force the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> to render the cursor as declared by the &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; property.</source>
          <target state="translated">取得または設定を示す値かどうかこの<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>強制する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>によって宣言されたカーソルを表示するために、&lt;xref:System.Windows.FrameworkElement.Cursor*&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt;。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If you set this property to <ph id="ph1">`true`</ph> you will override the cursor preferences established by child elements.</source>
          <target state="translated">このプロパティを設定する場合<ph id="ph1">`true`</ph>子要素で設定されているカーソル設定よりも優先されます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Doing so in general application <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> might be confusing for the user, particularly if child elements are attempting to specify cursors.</source>
          <target state="translated">そのため、一般にアプリケーション<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>子要素は、カーソルを指定しようとしている場合は特に、ユーザーの混乱する可能性があります。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Setting ForceCursor is more appropriate in control subclassing or compositing scenarios.</source>
          <target state="translated">ForceCursor の設定は、コントロールのサブクラス化または複合のシナリオに適しています。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ForceCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ForceCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.ForceCursorProperty&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if cursor presentation while over this element is forced to use current &lt;xref:System.Windows.FrameworkElement.Cursor*&gt; settings for the cursor (including on all child elements); otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素上でのカーソルの表示を強制的に現在を使用するかどうか&lt;xref:System.Windows.FrameworkElement.Cursor*&gt;(すべての子要素を含む); カーソルの設定をそれ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.Cursor*&gt; 。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ForceCursor*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.ForceCursor*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.ForceCursor*&gt;。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the binding on the specified property.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を表す、指定したプロパティにバインドします。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Checking the return value for <ph id="ph1">`null`</ph> is a technique you can use to determine whether a property has an active binding.</source>
          <target state="translated">戻り値の確認<ph id="ph1">`null`</ph>プロパティがアクティブなバインディングを持つかどうかを決定する手法は、します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method is really just a convenience wrapper around the &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">このメソッドは、実際には利便性のためのラッパー、&lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>GetBindingExpression passes the current instance and the <ph id="ph1">`dp`</ph> parameter to &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">GetBindingExpression が現在のインスタンスを渡すと、 <ph id="ph1">`dp`</ph> &lt;xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName&gt;パラメーター。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The target <bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to get the binding from.</source>
          <target state="translated">ターゲット<bpt id="p1">&lt;xref href="System.Windows.DependencyProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>からバインドを取得します。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the target property has an active binding; otherwise, returns <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Data.BindingExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ターゲット プロパティにアクティブなバインディングがある場合を返しますそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Gets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the specified <bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を取得、&lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;添付プロパティを指定した<bpt id="p1">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt; 。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The main purpose of this method is to support attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">添付プロパティの構文をサポートするためには、このメソッドの主な目的、&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;プロパティ、したがって、指定された要素を子に許可&lt;xref:System.Windows.FrameworkElement&gt;を親要素内での配置のフローの方向を指定します&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To get the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.</source>
          <target state="translated">現在の値を取得する&lt;xref:System.Windows.FrameworkElement&gt;、ダイレクトを使用して<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>アクセサー &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The element to return a &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; for.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;データ型&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;を返す要素</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The requested flow direction, as a value of the enumeration.</source>
          <target state="translated">要求されたフローの方向、列挙体の値。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Returns a geometry for a clipping mask.</source>
          <target state="translated">クリッピング マスクのジオメトリを返します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</source>
          <target state="translated">使用できる表示スペースよりも大きい要素を整列するレイアウト システムしようとすると、マスクが適用されます。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Margins will be subtracted from the <ph id="ph1">`layoutSlotSize`</ph> as part of layout system behavior.</source>
          <target state="translated">減算する余白、<ph id="ph1">`layoutSlotSize`</ph>レイアウト システムの動作の一部として。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>A returned null reference indicates that no clipping will occur.</source>
          <target state="translated">返される null 参照では、クリップが発生しないことを示します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The default implementation always returns <ph id="ph1">`null`</ph> when &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">既定の実装を常に返します<ph id="ph1">`null`</ph>とき&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;は<ph id="ph2">`false`</ph>&lt;/xref:System.Windows.UIElement.ClipToBounds%2A&gt;。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation uses &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; in its calculations.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実装を使用して&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;と&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;計算&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Several subclasses of &lt;xref:System.Windows.FrameworkElement&gt; override this method again.</source>
          <target state="translated">いくつかのサブクラスの&lt;xref:System.Windows.FrameworkElement&gt;再度このメソッドをオーバーライドします&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;, overrides to always return <ph id="ph1">`null`</ph> because adorners are often deliberately outside the ordinary bounds.</source>
          <target state="translated">&lt;xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;、戻り値を常にオーバーライド<ph id="ph1">`null`</ph>のため装飾多くの場合、意図的に通常の範囲外です。&lt;/xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt; and &lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt; return <ph id="ph1">`null`</ph> if &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt;and &lt;xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt; return <ph id="ph1">`null`</ph> if &lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt; is <ph id="ph2">`false`</ph>.&lt;/xref:System.Windows.UIElement.ClipToBounds%2A&gt;&lt;/xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The size of the part of the element that does visual presentation.</source>
          <target state="translated">視覚的な表示を行う要素の一部のサイズ。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The clipping geometry.</source>
          <target state="translated">クリッピング ジオメトリ。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Returns the named element in the visual tree of an instantiated <bpt id="p1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">インスタンス化のビジュアル ツリーの名前付きの要素を返します<bpt id="p1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Templates in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> have a self-contained namescope.</source>
          <target state="translated">テンプレートで<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>自己完結型の名前スコープがあります。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</source>
          <target state="translated">テンプレートは、再利用し、各コントロールの複数のインスタンスがそのテンプレートをインスタンス化時にテンプレートで定義されている任意の名前の一意性が維持できないためにです。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Call the GetTemplateChild method to return references to objects that come from the template after it is instantiated.</source>
          <target state="translated">インスタンス化した後、テンプレートからのオブジェクトへの参照を返す GetTemplateChild メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; method to find items from templates because &lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt; acts in a more general scope, and there is no connection between the &lt;xref:System.Windows.Controls.ControlTemplate&gt; class itself and the instantiated template once it is applied.</source>
          <target state="translated">使用することはできません、&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;ために、テンプレートから項目を検索するメソッド&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;はで動作しより一般的なスコープとの間の接続がない、&lt;xref:System.Windows.Controls.ControlTemplate&gt;は、クラス自体およびインスタンス化されたテンプレートが適用される&lt;/xref:System.Windows.Controls.ControlTemplate&gt;&lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; supplies the same function as this method.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;このメソッドと同じ機能を提供します。&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;代わりにパブリックが保護されている、正しい名前スコープの考慮事項要素およびその中の項目を名前付き検索内でテンプレートにアクセスできるようにするを使用しています。&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Use &lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt; when you need to get an element outside of its parent control.</source>
          <target state="translated">使用して&lt;xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;する必要がある場合、親コントロールの外部要素を取得します&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Name of the child to find.</source>
          <target state="translated">検索する子の名前です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The requested element.</source>
          <target state="translated">要求された要素。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no element of the requested name exists.</source>
          <target state="translated">あります<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要求の名前の要素が存在しない場合。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Returns an alternative logical parent for this element if there is no visual parent.</source>
          <target state="translated">ビジュアル親がない場合は、この要素の代替の論理親を返します。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The default &lt;xref:System.Windows.FrameworkElement&gt; implementation returns the expected single visual parent, which is the same result as getting the &lt;xref:System.Windows.FrameworkElement.Parent%2A&gt; value.</source>
          <target state="translated">既定値&lt;xref:System.Windows.FrameworkElement&gt;実装、予想される&amp;1; つ visual の親を返しますの結果の取得と同じである、&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;値&lt;/xref:System.Windows.FrameworkElement.Parent%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Derived class implementations might return alternate parent relationships.</source>
          <target state="translated">派生クラスの実装では、代替親リレーションシップを返す場合があります。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Returns something other than <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</source>
          <target state="translated">以外の値を返します<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このメソッドの WPF フレームワーク レベルの実装が非ビジュアルの親接続を持つ場合です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Overrides <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>, and returns a child at the specified index from a collection of child elements.</source>
          <target state="translated">オーバーライド<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>、し、子要素のコレクションから指定したインデックス位置の子を返します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>In the &lt;xref:System.Windows.FrameworkElement&gt; implementation, the only valid index is zero.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実装では、唯一の有効なインデックスは&amp;0; です&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The content model for GetVisualChild supports either zero or one child elements, not a collection.</source>
          <target state="translated">GetVisualChild のコンテンツ モデルには、0 個または&amp;1; つの子要素コレクションではありませんがサポートしています。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The zero-based index of the requested child element in the collection.</source>
          <target state="translated">コレクション内の要求された子要素の&amp;0; から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The requested child element.</source>
          <target state="translated">要求された子要素です。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This should not return <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; if the provided index is out of range, an exception is thrown.</source>
          <target state="translated">これは返されません<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>のうち、指定されたインデックスのかどうかは; 範囲、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets or sets the suggested height of the element.</source>
          <target state="translated">取得または要素の高さの推奨値を設定します。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Height is one of three writable properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">高さは、3 つの書き込み可能なプロパティのいずれかで&lt;xref:System.Windows.FrameworkElement&gt;高さ情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;および&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual height determination is that first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally, if it is within bounds, Height.</source>
          <target state="translated">間の競合がある場合これらの値、実際の高さを決定するためのアプリケーションの順序は最初&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;、受け入れられ、する必要があります&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;、最後に、高さの境界内にある場合&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;&lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</source>
          <target state="translated">この要素がその他の要素内の子要素の場合は、値にこのプロパティを設定、本当にのみ推奨される値です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</source>
          <target state="translated">レイアウト システムだけでなく、親要素の特定のレイアウト ロジックが値として使用 nonbinding 入力レイアウトの処理中にします。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>In practical terms, a &lt;xref:System.Windows.FrameworkElement&gt; is almost always the child element of something else; even when you set the Height on &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">実際&lt;xref:System.Windows.FrameworkElement&gt;;&lt;xref:System.Windows.Window&gt;&lt;/xref:System.Windows.Window&gt;高さを設定する場合でも、何か他の子要素ではほとんどの場合は、&lt;/xref:System.Windows.FrameworkElement&gt; 。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>(For &lt;xref:System.Windows.Window&gt;, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)       In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.</source>
          <target state="translated">(の&lt;xref:System.Windows.Window&gt;、基になるアプリケーション モデルは、Hwnd を作成する基本的なレンダリング前提条件を確立するときに、値を使用するアプリケーションをホストします)&lt;/xref:System.Windows.Window&gt; 。     さらに許容される&lt;xref:System.Double&gt;値、このプロパティには、 &lt;xref:System.Double.NaN?displayProperty=fullName&gt;。&lt;/xref:System.Double.NaN?displayProperty=fullName&gt;ことができます。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>This is how you specify auto sizing behavior in code.</source>
          <target state="translated">これは、コードの自動サイズ変更動作を指定する方法です。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Auto sizing behavior implies that the element will fill the height available to it.</source>
          <target state="translated">自動サイズ変更動作は、要素が利用できる高さいっぱいになることを意味します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のテーマのスタイルを使用して既定値を頻繁に指定します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; may vary.</source>
          <target state="translated">これに対しての値、&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;異なる場合があります&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</source>
          <target state="translated">これは、原因が考えられますか静的にレイアウトが何らかの理由により推奨されるサイズを拒否または一時的にします。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The layout system itself works asynchronously relative to the property system's set of Height and may not have processed that particular sizing property change yet.</source>
          <target state="translated">レイアウト システム自体では、高さのプロパティ システムのセットに対して相対的に非同期的に機能し、処理されない可能性がある特定のプロパティの変更をまだサイズ変更します。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">値の制限、&lt;xref:System.Double&gt;によって値が適用される、&lt;xref:System.Windows.ValidateValueCallback&gt;メカニズム&lt;/xref:System.Windows.ValidateValueCallback&gt;&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for Height that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).</source>
          <target state="translated">レイアウト システムによって適用される高さにバインドされている、非決定的上限の値があるだけでなく、検証チェック (これは非常に大きな数より大きい&lt;xref:System.Single.MaxValue?displayProperty=fullName&gt;がよりも小さい&lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).&lt;/xref:System.Double.MaxValue?displayProperty=fullName&gt; &lt;/xref:System.Single.MaxValue?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">この上限値を超えた場合は、要素は表示されず、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Do not set Height to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">高さは表示可能な最大サイズよりもずっと大きな値に設定しないでください、またはこの非決定的の上限を超える可能性があります。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Height="double"/&gt;   - or -   &lt;object Height="qualifiedDouble"/&gt;   - or -   &lt;object Height="Auto"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Height"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object Height="double"/&gt;   - or -   &lt;object Height="qualifiedDouble"/&gt;   - or -   &lt;object Height="Auto"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Height"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">この値として解釈されます、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px       <bpt id="p1">**</bpt>Auto<ept id="p1">**</ept>    Enables autosizing behavior.</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; に 1 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px<bpt id="p1">**</bpt>自動<ept id="p1">**</ept>自動動作を有効にします。       </target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HeightProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Height"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.HeightProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.HeightProperty&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の高さの<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">既定値は<ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Height*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Height*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Height*&gt;。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</source>
          <target state="translated">取得またはなど、panel またはアイテム コントロールの親要素内で構成されるときに、この要素に適用される水平方向の配置特性を設定します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting HorizontalAlignment to &lt;xref:System.Windows.HorizontalAlignment&gt;.</source>
          <target state="translated">ときに&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;要素のプロパティが明示的に設定されている&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;、これらの測定値より高い優先レイアウト時に行い&lt;xref:System.Windows.HorizontalAlignment&gt;&lt;/xref:System.Windows.HorizontalAlignment&gt;HorizontalAlignment の設定の標準的な効果が取り消されます&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>HorizontalAlignment is the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated">HorizontalAlignment は、<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</source>
          <target state="translated">この特定の依存関係プロパティでは、コントロールでは特に、サブクラス化された要素で設定が異なります見かけ上の「既定」値がよくあります。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">これは、2 つの方法のいずれかで一般的に発生します特定のサブクラスでは、にはその既定値を設定するためのさまざまなメタデータと、依存関係プロパティが再登録。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>For example, the apparent "default" of HorizontalAlignment for a &lt;xref:System.Windows.Controls.Label&gt; control will be &lt;xref:System.Windows.HorizontalAlignment&gt;, even though &lt;xref:System.Windows.Controls.Label&gt; inherits HorizontalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">など、明確な"default"の HorizontalAlignment の&lt;xref:System.Windows.Controls.Label&gt;コントロールする&lt;xref:System.Windows.HorizontalAlignment&gt;場合でも、&lt;xref:System.Windows.Controls.Label&gt;継承&lt;xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;HorizontalAlignment ダイレクト&lt;/xref:System.Windows.Controls.Label&gt;&lt;/xref:System.Windows.HorizontalAlignment&gt;&lt;/xref:System.Windows.Controls.Label&gt;。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.Label&gt;, within the style's control template.</source>
          <target state="translated">これは、既定のスタイル内でその値がリセットされたため&lt;xref:System.Windows.Controls.Label&gt;、スタイルのコントロール テンプレート内で&lt;/xref:System.Windows.Controls.Label&gt;。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Canvas&gt; does not use HorizontalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas&gt;使用しません HorizontalAlignment のレイアウトを作成するときに&lt;xref:System.Windows.Controls.Canvas&gt;絶対位置に基づきます&lt;/xref:System.Windows.Controls.Canvas&gt;。&lt;/xref:System.Windows.Controls.Canvas&gt;</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Controls.Label&gt; or derived classes, &lt;xref:System.Windows.Controls.Label&gt; redefines the default value of this dependency property to be &lt;xref:System.Windows.HorizontalAlignment&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Label&gt;または&lt;xref:System.Windows.Controls.Label&gt;&lt;xref:System.Windows.HorizontalAlignment&gt;.&lt;/xref:System.Windows.HorizontalAlignment&gt;にするには、この依存関係プロパティの既定値を再定義&lt;/xref:System.Windows.Controls.Label&gt;の派生クラス&lt;/xref:System.Windows.Controls.Label&gt;によって継承された場合</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A horizontal alignment setting, as a value of the enumeration.</source>
          <target state="translated">列挙体の値としての水平方向の配置設定します。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.HorizontalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.HorizontalAlignment*&gt;。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</source>
          <target state="translated">取得またはプロパティ値の継承、リソース キーの検索、および RelativeSource FindAncestor 参照スコープの制限を設定します。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Certain boundaries in the element tree set InheritanceBehavior to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</source>
          <target state="translated">要素ツリー内の特定の境界は、意図的に、アプリケーションのリソースを確認したり、さらに、現在の要素またはそのいずれかのクエリから RelativeSource FindAncestor 参照を防ぐためには、force リソースの検索に、継承動作のスコープを制限する InheritanceBehavior を設定します。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>RelativeSource FindAncestor lookup occurs when a binding uses a &lt;xref:System.Windows.Data.RelativeSource&gt; that has its &lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt; property set to the &lt;xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt; value.</source>
          <target state="translated">RelativeSource FindAncestor 参照の場合は、バインディングを使用して、&lt;xref:System.Windows.Data.RelativeSource&gt;を持つその&lt;xref:System.Windows.Data.RelativeSource.Mode%2A&gt;プロパティに設定、&lt;xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt;値&lt;/xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName&gt;&lt;/xref:System.Windows.Data.RelativeSource.Mode%2A&gt;&lt;/xref:System.Windows.Data.RelativeSource&gt;。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</source>
          <target state="translated">派生クラスをこのプロパティを設定する場合は、する必要がありますこれを行う、静的コンス トラクター内またはその他の初期化ルーチンです。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">列挙体の値です。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.InheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.InheritanceBehavior"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Occurs when this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized.</source>
          <target state="translated">発生したときにこの<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が初期化されています。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>This event coincides with cases where the value of the &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; property changes from <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (or undefined) to <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このイベントがケースに一致している場所の値、&lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt;からプロパティの変更<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (または未定義) を<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.IsInitialized*&gt; 。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>This event will be raised whenever the &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; or &lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt; methods are called.</source>
          <target state="translated">このイベントになるたびに発生、&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;または&lt;xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;メソッドが呼び出される&lt;/xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A&gt;&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Calls to either method could have come from application code, or through the <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> processor behavior when a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> page is processed.</source>
          <target state="translated">アプリケーション コードからまたはいずれかのメソッドの呼び出しが同梱されている可能性があります、<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>プロセッサの動作時に、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ページを処理します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Whether you choose to handle &lt;xref:System.Windows.FrameworkElement.Loaded&gt; or Initialized depends on your requirements.</source>
          <target state="translated">処理するかどうかを選択する&lt;xref:System.Windows.FrameworkElement.Loaded&gt;または Initialized ニーズによって異なります&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, Initialized might be the better event to act upon.</source>
          <target state="translated">要素のプロパティを読み取りのプロパティをリセットする必要はありませんし場合、レイアウト情報は必要ありません、Initialized が対象となるイベントの向上にあります。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, &lt;xref:System.Windows.FrameworkElement.Loaded&gt; might be the better event to act upon.</source>
          <target state="translated">使用できる要素のすべてのプロパティを必要と、レイアウトをリセットすると思われるプロパティを設定する場合&lt;xref:System.Windows.FrameworkElement.Loaded&gt;の対象となるイベントの向上があります&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">(を確認する必要があります、&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; 。     オブジェクトのイベントのシーケンスに関する詳細については、&lt;xref:System.Windows.FrameworkElement&gt;もいくつかの関連アプリケーションと要素のクラスを参照してください、<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Gets or sets the context for input used by this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これで使用される入力のコンテキストを設定を取得または<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>If there are child elements without other values for InputScope established through local values or styles, then the property system will set the value to be the InputScope value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">ローカル値またはスタイルを介して確立 InputScope の他の値を使用せずに子要素がある場合は、プロパティのシステムの間で割り当てられているこの値を持つ最も近い先祖の要素の InputScope 値に値が設定されます。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Although a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax usage is listed and is syntactically allowed, setting this property in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is not common.</source>
          <target state="translated">ただし、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>構文の使用状況が表示されているし、は構文的に許可されているのこのプロパティを設定<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>一般的ではありません。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_InputScope"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.InputScopeProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_InputScope"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.InputScopeProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.InputScopeProperty&gt;</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The input scope, which modifies how input from alternative input methods is interpreted.</source>
          <target state="translated">代替の入力メソッドからの入力を解釈する方法を変更する入力スコープ。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (which results in a default handling of commands).</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (結果はコマンドの既定の処理)。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.InputScope*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.InputScope*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.InputScope*&gt;。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has been initialized, either during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor, or by explicitly having its &lt;xref:System.Windows.FrameworkElement.EndInit*&gt; method called.</source>
          <target state="translated">この要素が初期化されているかどうかを示す値を取得で処理中にいずれか、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサ、または明示的に用意することによってその&lt;xref:System.Windows.FrameworkElement.EndInit*&gt;呼び出されるメソッドです&lt;/xref:System.Windows.FrameworkElement.EndInit*&gt;。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This property may also be <ph id="ph1">`true`</ph> if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</source>
          <target state="translated">このプロパティがありますも<ph id="ph1">`true`</ph>新しい親要素を持つし、そのために再読み込みされたことになるように、この要素が論理ツリー内で移動されたかどうか。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>This property is useful if you also are using &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;.</source>
          <target state="translated">このプロパティは、使用する場合も&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;、 &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;&lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;便利です。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Elements in the logical tree that is loaded by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor are assured to be initialized.</source>
          <target state="translated">によって読み込まれる論理ツリー内の要素、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサを初期化する確実に実行されます。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Elements not in the logical tree are initialized when &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt; is called.</source>
          <target state="translated">論理ツリーに存在しない要素が初期化されるときに&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;が呼び出された&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>In absence of any specific handling of &lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt; and &lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;, this will happen as soon as the constructor returns the initialized result.</source>
          <target state="translated">特定の処理がない場合に&lt;xref:System.Windows.FrameworkElement.BeginInit%2A&gt;と&lt;xref:System.Windows.FrameworkElement.EndInit%2A&gt;、コンス トラクターが初期化された結果を返すとすぐにこれは行われます&lt;/xref:System.Windows.FrameworkElement.EndInit%2A&gt;&lt;/xref:System.Windows.FrameworkElement.BeginInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is initialized per the aforementioned <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processing or method calls; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、ここに挙げたごとに、要素が初期化された<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>処理やメソッドの呼び出し、それ以外の<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has been loaded for presentation.</source>
          <target state="translated">プレゼンテーションについては、この要素が読み込まれているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>From a newly constructed &lt;xref:System.Windows.FrameworkElement&gt;, this property starts off <ph id="ph1">`false`</ph>, and remains <ph id="ph2">`true`</ph> after it is set to <ph id="ph3">`true`</ph>, even if the element is subsequently removed from a connected logical tree by code.</source>
          <target state="translated">新しく構築されたから&lt;xref:System.Windows.FrameworkElement&gt;、このプロパティは、まず<ph id="ph1">`false`</ph>、開いたまま<ph id="ph2">`true`</ph>に設定されている後<ph id="ph3">`true`</ph>コードによって接続されている論理ツリーから要素が、後で削除された場合でも、&lt;/xref:System.Windows.FrameworkElement&gt; 。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> state is set by the general presentation logic when elements are loaded into the presentation engine.</source>
          <target state="translated"><ph id="ph1">`true`</ph>状態は、要素が、プレゼンテーション エンジンに読み込まれるときに、一般的なプレゼンテーション ロジックによって設定されます。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Typically, loaded elements are rendered, but not all &lt;xref:System.Windows.FrameworkElement&gt; derived classes have a presentation, and other properties such as &lt;xref:System.Windows.UIElement.Visibility%2A&gt; can influence presentation.</source>
          <target state="translated">通常、読み込まれた要素は、レンダリングされた、すべてではなく&lt;xref:System.Windows.FrameworkElement&gt;派生クラスは、プレゼンテーション、およびなどの他のプロパティがある&lt;xref:System.Windows.UIElement.Visibility%2A&gt;プレゼンテーションに影響を与えることができます&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current element is attached to an element tree; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the element has never been attached to a loaded element tree.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在の要素が、要素ツリーにアタッチされている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>要素が読み込まれた要素ツリーにアタッチされていない場合。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Gets or sets localization/globalization language information that applies to an element.</source>
          <target state="translated">取得または要素に適用されるローカリゼーション/グローバリゼーション言語情報を設定します。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The string formats follow the RFC 3066 standard.</source>
          <target state="translated">文字列の形式では、RFC 3066 標準に従います。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>For example, U.S. English is "en-US".</source>
          <target state="translated">たとえば、米国"EN-US"は英語です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>For more information on the values and format, see &lt;xref:System.Windows.Markup.XmlLanguage&gt;.</source>
          <target state="translated">値と形式の詳細については、 &lt;xref:System.Windows.Markup.XmlLanguage&gt;。&lt;/xref:System.Windows.Markup.XmlLanguage&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>This dependency property inherits property values.</source>
          <target state="translated">この依存関係プロパティでは、プロパティの値を継承します。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>If there are child elements without other values for Language established through local values or styles, the property system will set the value to be the Language value of the nearest ancestor element with this value assigned.</source>
          <target state="translated">ローカル値またはスタイルを介して確立言語の他の値を使用せずに子要素がある場合は、プロパティのシステムは、値を割り当てられているこの値を持つ最も近い先祖の要素の言語の値を設定します。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph> defines the general meaning of the <ph id="ph2">`xml:lang`</ph> attribute.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>一般的な意味を定義、<ph id="ph2">`xml:lang`</ph>属性。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Language essentially exposes the meaning of this attribute as a dependency property.</source>
          <target state="translated">言語は、本質的には、依存関係プロパティとして、この属性の意味を公開します。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Language can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the <ph id="ph1">`xml:lang`</ph> attribute can inherit to child element scope in <ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>.</source>
          <target state="translated">言語が、プログラムで調整されることができます、匹敵する方法でプロパティ システムの値の継承に参加できますが、どのように<ph id="ph1">`xml:lang`</ph>子要素のスコープ内に属性が継承される<ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>If you set Language, that value becomes the <ph id="ph1">`xml:lang`</ph> and overwrites any previous value.</source>
          <target state="translated">言語を設定すると、その値が、<ph id="ph1">`xml:lang`</ph>し、以前の値を上書きします。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>xml:lang Handling in XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>xml:lang XAML での処理<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_CultureInfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LanguageProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_CultureInfo"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.LanguageProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement.LanguageProperty&gt;</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The language information for this element.</source>
          <target state="translated">この要素の言語情報。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The default value is an <bpt id="p1">&lt;xref href="System.Windows.Markup.XmlLanguage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with its &lt;xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt; value set to the string "en-US".</source>
          <target state="translated">既定値は、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XmlLanguage"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>でその&lt;xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt;値、文字列"EN-US"に設定します&lt;/xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*&gt;。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Language*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Language*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Language*&gt;。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</source>
          <target state="translated">取得またはレイアウトの実行時にこの要素に適用されるグラフィックス変換を設定します。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;, LayoutTransform will affect results of layout.</source>
          <target state="translated">対照的に&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;、LayoutTransform がレイアウトの結果に影響されます&lt;/xref:System.Windows.UIElement.RenderTransform%2A&gt;。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Setting a transform provides powerful capabilities of scaling and rotating.</source>
          <target state="translated">トランス フォームを設定するには、スケールおよび回転の強力な機能が備わっています。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>However, LayoutTransform ignores &lt;xref:System.Windows.Media.TranslateTransform&gt; operations.</source>
          <target state="translated">しかし、LayoutTransform を無視&lt;xref:System.Windows.Media.TranslateTransform&gt;操作&lt;/xref:System.Windows.Media.TranslateTransform&gt;。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>This is because the layout system behavior for child elements of a &lt;xref:System.Windows.FrameworkElement&gt; auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</source>
          <target state="translated">これは子要素をレイアウト システムの動作、&lt;xref:System.Windows.FrameworkElement&gt;任意のオフセットがレイアウトにスケールまたは回転した要素の位置および親要素の座標システムへの自動修正します&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>LayoutTransform can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</source>
          <target state="translated">レイアウト システムで完全パスを必要としないシナリオで起動する場合、LayoutTransform は不十分なアプリケーションのパフォーマンスにつながります。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>When you apply a LayoutTransform to the &lt;xref:System.Windows.Controls.Panel.Children%2A&gt; collection of the &lt;xref:System.Windows.Controls.Panel&gt;, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</source>
          <target state="translated">LayoutTransform を適用すると、&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;を集めた、&lt;xref:System.Windows.Controls.Panel&gt;レイアウト システムによって新しいパスがトリガー、および画面に表示されるすべて remeasured して再配置するオブジェクトを強制的に実行します&lt;/xref:System.Windows.Controls.Panel&gt;&lt;/xref:System.Windows.Controls.Panel.Children%2A&gt;。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>If you are updating the complete application <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>, this functionality might be exactly what you need.</source>
          <target state="translated">完全なアプリケーションを更新する場合は<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>、この機能は必要なものだけする可能性があります。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>However, if you do not need a full layout pass, use the &lt;xref:System.Windows.UIElement.RenderTransform%2A&gt; property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</source>
          <target state="translated">ただし、完全な配置パスを使用する必要はありません、使用、&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;プロパティが、レイアウト システムを呼び出しませんそのため、このシナリオの方が適切では通常。&lt;/xref:System.Windows.UIElement.RenderTransform%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Example scenarios where LayoutTransform would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.      <bpt id="p1">&lt;a name="dependencyPropertyInfo_LayoutTransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated">LayoutTransform が役に立つ、シナリオ例にはが含まれます: フォーカス、編集の動作などを提供することで (拡大) 要素を拡大/縮小から水平方向の垂直方向に、またはその逆の場合は、メニュー コンポーネントなどの要素を回転します。     <bpt id="p1">&lt;a name="dependencyPropertyInfo_LayoutTransform"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.LayoutTransformProperty&gt;</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The transform this element should use.</source>
          <target state="translated">変換で、この要素を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The default is &lt;xref:System.Windows.Media.Transform.Identity*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Windows.Media.Transform.Identity*&gt;.&lt;/xref:System.Windows.Media.Transform.Identity*&gt;</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.LayoutTransform*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.LayoutTransform*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.LayoutTransform*&gt;。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Occurs when the element is laid out, rendered, and ready for interaction.</source>
          <target state="translated">要素のレイアウト、レンダリングされ、操作を受け入れる準備と発生します。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Loaded is usually the last event raised in an element initialization sequence.</source>
          <target state="translated">読み込まれたは通常最後のイベント発生要素の初期化シーケンスでします。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>It will always be raised after &lt;xref:System.Windows.FrameworkElement.Initialized&gt;.</source>
          <target state="translated">常に&lt;xref:System.Windows.FrameworkElement.Initialized&gt;。&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;後に発生します。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Whether you choose to handle Loaded or &lt;xref:System.Windows.FrameworkElement.Initialized&gt; depends on your requirements.</source>
          <target state="translated">Loaded を処理するかどうかを選択するか、&lt;xref:System.Windows.FrameworkElement.Initialized&gt;要件によって異なります&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>If you do not need to read element properties, intend to reset properties, and do not need any layout information, &lt;xref:System.Windows.FrameworkElement.Initialized&gt; might be the better event to act upon.</source>
          <target state="translated">要素のプロパティを読み取る必要がない場合、プロパティをリセットして、レイアウト情報は必要ありません&lt;xref:System.Windows.FrameworkElement.Initialized&gt;対象となるイベントの向上があります&lt;/xref:System.Windows.FrameworkElement.Initialized&gt;。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, Loaded might be the better event to act upon.</source>
          <target state="translated">すべてのプロパティを必要がある場合に、使用できる要素とするプロパティも設定するレイアウトをリセットすると思われる、読み込まれる可能性がありますが作用するイベントの向上。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</source>
          <target state="translated">必ず再入の場合は、ハンドラーが新しいレイアウト パスが必要であることを意味するレイアウト システムで解釈される任意のプロパティをリセットします。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>(You might need to check the &lt;xref:System.Windows.FrameworkPropertyMetadata&gt; values on the property if you are unsure of which properties can require a new layout pass if they are changed.)       For more information about the sequence of object events for a &lt;xref:System.Windows.FrameworkElement&gt;, and also for several related application and element classes, see <bpt id="p1">[</bpt>Object Lifetime Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">(を確認する必要があります、&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;プロパティは、新しいレイアウトを要求できますのことを確認していない場合は、プロパティの値が変更された場合に通過します)&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; 。     オブジェクトのイベントのシーケンスに関する詳細については、&lt;xref:System.Windows.FrameworkElement&gt;もいくつかの関連アプリケーションと要素のクラスを参照してください、<bpt id="p1">[</bpt>オブジェクトの有効期間イベント<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、&lt;xref:System.Windows.EventTrigger&gt;スタイルでします&lt;/xref:System.Windows.EventTrigger&gt;。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Loaded and &lt;xref:System.Windows.FrameworkElement.Unloaded&gt; might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated">読み込まれると&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;両方のユーザーによるシステムのテーマを変更した結果のコントロールで発生する可能性があります&lt;/xref:System.Windows.FrameworkElement.Unloaded&gt;。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Therefore Loaded cannot be assumed to occur only when a page is first loaded through navigation to the page.</source>
          <target state="translated">したがってロードの場合は、のみページが最初に読み込まれるときに、ページへの移動を発生すると見なされますことはできません。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Loaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.LoadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Loaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.LoadedEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.RoutedEventHandler&gt;|&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.LoadedEvent&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Loaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Loaded"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for logical child elements of this element.</source>
          <target state="translated">この要素の論理上の子要素の列挙子を取得します。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>LogicalChildren allows you to iterate over child elements.</source>
          <target state="translated">LogicalChildren では、子要素を反復処理することができます。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly &lt;xref:System.Windows.FrameworkContentElement&gt; child elements.</source>
          <target state="translated">これは、可能性があります、定義済みの専用のコレクションはありませんが、まだ特に複数の子要素が含まれている要素に便利です&lt;xref:System.Windows.FrameworkContentElement&gt;子要素です&lt;/xref:System.Windows.FrameworkContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>For more information on how to use LogicalChildren and &lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">LogicalChildren を使用する方法の詳細については、&lt;xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt;を参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>&lt;/xref:System.Windows.FrameworkElement.AddLogicalChild%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>An enumerator for logical child elements of this element.</source>
          <target state="translated">この要素の論理上の子要素に対する列挙子。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Gets or sets the outer margin of an element.</source>
          <target state="translated">取得または要素の外側の余白を設定します。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The margin is the space between this element and other elements that will be adjacent when layout creates the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">余白は、この要素とレイアウトを作成するときに、隣接するその他の要素間の空白、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</source>
          <target state="translated">共有要素は、ピア要素 (その他のコレクション内の要素、共通の親コントロールの) などがあります。 または、この要素の親の場合もあります。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Margin is set as a &lt;xref:System.Windows.Thickness&gt; structure rather than as a number so that the margin can be set asymmetrically.</source>
          <target state="translated">として余白が設定されて、&lt;xref:System.Windows.Thickness&gt;構造数値としてではなく、余白を非対称的設定できるようにします&lt;/xref:System.Windows.Thickness&gt;。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Thickness&gt; structure itself supports string type conversion so that you can specify an asymmetric Margin in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax also.</source>
          <target state="translated">&lt;xref:System.Windows.Thickness&gt;構造体自体は、非対称の余白を指定できるように、文字列型の変換をサポートしている<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>属性構文も&lt;/xref:System.Windows.Thickness&gt;。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>A non-zero margin applies space outside the element layout's &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;.</source>
          <target state="translated">0 以外の余白は要素のレイアウト&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;と&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;&lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</source>
          <target state="translated">余白は、レイアウトの兄弟要素の追加たとえば、2 つの隣接する要素が隣接する端に 30 の余白がどちらも設定は、60 の単位の間にスペースがあります。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Elements that have margins set will not typically constrain the size of the specified Margin if the allotted rectangle space is not large enough for the margin plus the element content area.</source>
          <target state="translated">余白の設定を持つ要素通常を制約しない指定の余白のサイズ、割り当てられた四角形領域がない場合、余白と要素のコンテンツ領域に十分な大きさです。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The element content area will be constrained instead when layout is calculated.</source>
          <target state="translated">要素のコンテンツ領域は、代わりにレイアウトの計算時に制限されます。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The only case where margins would be constrained also is if the content is already constrained all the way to zero.</source>
          <target state="translated">コンテンツが既に&amp;0; に制約されていますもは余白が制限される場合だけです。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Margin="left,top,right,bottom"/&gt;   - or -   &lt;object Margin="left,top"/&gt;   - or -   &lt;object Margin="thicknessReference"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Margin"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     &lt;object.Margin&gt;       &lt;Thickness Left="left" Top="top" Right="right" Bottom="bottom"/&gt;     &lt;/object.Margin&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_Margin"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>left, top, right, bottom<ept id="p4">*</ept>    Number values between 0 and &lt;xref:System.Double.PositiveInfinity&gt; that specify the four possible dimension properties of a &lt;xref:System.Windows.Thickness&gt; structure.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object Margin="left,top,right,bottom"/&gt;   - or -   &lt;object Margin="left,top"/&gt;   - or -   &lt;object Margin="thicknessReference"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Margin"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph2">```   &lt;object&gt;     &lt;object.Margin&gt;       &lt;Thickness Left="left" Top="top" Right="right" Bottom="bottom"/&gt;     &lt;/object.Margin&gt;   &lt;/object&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_Margin"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>左、上、右、下の<ept id="p4">*</ept>番号を 0 までの値と&lt;xref:System.Double.PositiveInfinity&gt;の 4 つの可能なディメンション プロパティを指定する、&lt;xref:System.Windows.Thickness&gt;構造&lt;/xref:System.Windows.Thickness&gt;&lt;/xref:System.Double.PositiveInfinity&gt;。            </target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</source>
          <target state="translated">属性の使用方法も指定すると、対称的、論理的な順序で適用される省略形の値を受け取ります。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>For instance, <ph id="ph1">`Margin="20"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with all properties set to 20.</source>
          <target state="translated">たとえば、<ph id="ph1">`Margin="20"`</ph>という意味に解釈されます、&lt;xref:System.Windows.Thickness&gt;すべてのプロパティが 20 に設定します&lt;/xref:System.Windows.Thickness&gt;。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Margin="20,50"`</ph> will be interpreted to mean a &lt;xref:System.Windows.Thickness&gt; with &lt;xref:System.Windows.Thickness.Left%2A&gt; and &lt;xref:System.Windows.Thickness.Right%2A&gt; set to 20, and &lt;xref:System.Windows.Thickness.Top%2A&gt; and &lt;xref:System.Windows.Thickness.Bottom%2A&gt; set to 50.</source>
          <target state="translated"><ph id="ph1">`Margin="20,50"`</ph>という意味に解釈されます、&lt;xref:System.Windows.Thickness&gt;で&lt;xref:System.Windows.Thickness.Left%2A&gt;と&lt;xref:System.Windows.Thickness.Right%2A&gt;を 20 に設定し、&lt;xref:System.Windows.Thickness.Top%2A&gt;と&lt;xref:System.Windows.Thickness.Bottom%2A&gt;は 50 に設定します&lt;/xref:System.Windows.Thickness.Bottom%2A&gt;&lt;/xref:System.Windows.Thickness.Top%2A&gt;&lt;/xref:System.Windows.Thickness.Right%2A&gt;&lt;/xref:System.Windows.Thickness.Left%2A&gt;&lt;/xref:System.Windows.Thickness&gt;。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The default unit for a &lt;xref:System.Windows.Thickness&gt; measure is <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>.</source>
          <target state="translated">既定の単位、&lt;xref:System.Windows.Thickness&gt;メジャーが<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>&lt;/xref:System.Windows.Thickness&gt;。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>You can also specify other units by appending the unit type strings <ph id="ph1">`cm`</ph>, <ph id="ph2">`in`</ph>, or <ph id="ph3">`pt`</ph> to any measure.</source>
          <target state="translated">単位の種類の文字列を追加することによって、他の単位を指定することも<ph id="ph1">`cm`</ph>、 <ph id="ph2">`in`</ph>、または<ph id="ph3">`pt`</ph>任意の測定値にします。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Number values provided as <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</source>
          <target state="translated">数値として提供される<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>属性が必要な 10 進数のポイントを指定しない (0 が許容される、0.0 として指定する必要はありません)。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated">詳細については<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>使用状況、 &lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept>    An object reference to an existing &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated"><bpt id="p1">*</bpt>thicknessReference<ept id="p1">*</ept>既存&lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt;へのオブジェクト参照</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>This might be a <ph id="ph1">`}`</ph>, a , or <ph id="ph2">`}`</ph> reference.</source>
          <target state="translated">可能性があります、 <ph id="ph1">`}`</ph>、または<ph id="ph2">`}`</ph>参照します。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> usage, see &lt;xref:System.Windows.Thickness&gt;.</source>
          <target state="translated">詳細については<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>使用状況、 &lt;xref:System.Windows.Thickness&gt;.&lt;/xref:System.Windows.Thickness&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MarginProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Margin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.MarginProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MarginProperty&gt;</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Provides margin values for the element.</source>
          <target state="translated">要素の余白の値を提供します。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The default value is a <bpt id="p1">&lt;xref href="System.Windows.Thickness"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with all properties equal to 0 (zero).</source>
          <target state="translated">既定値は、 <bpt id="p1">&lt;xref href="System.Windows.Thickness"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>すべてのプロパティが 0 (ゼロ)。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Margin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Margin*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Margin*&gt;。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum height constraint of the element.</source>
          <target state="translated">取得または要素の高さの最大値の制約を設定します。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">これには&amp;3; つのプロパティのいずれかの&lt;xref:System.Windows.FrameworkElement&gt;高さ情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;および&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual height determination is first &lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt; must be honored, then MaxHeight, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">実際の高さを決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;受け入れられ、する必要があります、MaxHeight、最後に&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;の境界内にある場合のこれら各&lt;/xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">値の制限、&lt;xref:System.Double&gt;によって値が適用される、&lt;xref:System.Windows.ValidateValueCallback&gt;メカニズム&lt;/xref:System.Windows.ValidateValueCallback&gt;&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>If you attempt to set an invalid value a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとする場合、実行時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MaxHeight="double"/&gt;   - or –   &lt;object MaxHeight ="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MaxHeight"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object MaxHeight="double"/&gt;   - or –   &lt;object MaxHeight ="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MaxHeight"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> if you need to explicitly set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.</source>
          <target state="translated">同じ&lt;xref:System.Double&gt;プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて<bpt id="p1">[</bpt>X:static マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> &lt;xref:System.Double.PositiveInfinity&gt;.&lt;/xref:System.Double.PositiveInfinity&gt;られる値を明示的に設定する必要があるかどうかは&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; は、1 in 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxHeight"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;|  |メタデータ プロパティに設定<ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxHeightProperty&gt;       </target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>The maximum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の高さの最大値で、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Double&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Double&gt;。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double&gt; is also valid.</source>
          <target state="translated">&lt;xref:System.Double&gt;でも有効です。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MaxHeight*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.MaxHeight*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.MaxHeight*&gt;。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum width constraint of the element.</source>
          <target state="translated">取得または要素の幅の最大値の制約を設定します。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">これには&amp;3; つのプロパティのいずれかの&lt;xref:System.Windows.FrameworkElement&gt;幅情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;および&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then MaxWidth, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;受け入れられ、する必要があります MaxWidth、し、最後に、 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;境界内にあるこれらの各場合&lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">値の制限、&lt;xref:System.Double&gt;によって値が適用される、&lt;xref:System.Windows.ValidateValueCallback&gt;メカニズム&lt;/xref:System.Windows.ValidateValueCallback&gt;&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MaxWidth="double"/&gt;   - or -   &lt;object MaxWidth="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MaxWidth"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object MaxWidth="double"/&gt;   - or -   &lt;object MaxWidth="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MaxWidth"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply, except that you must use <bpt id="p1">[</bpt>x:Static Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> to set the value to be &lt;xref:System.Double.PositiveInfinity&gt;.</source>
          <target state="translated">同じ&lt;xref:System.Double&gt;プロパティの値セクションで説明したように範囲の制限を適用する必要がありますを使用する点を除いて<bpt id="p1">[</bpt>X:static マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> &lt;xref:System.Double.PositiveInfinity&gt;.&lt;/xref:System.Double.PositiveInfinity&gt;する値を設定する&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; は、1 in 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MaxWidth"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;|  |メタデータ プロパティに設定<ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxWidthProperty&gt;       </target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The maximum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の最大の幅の<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Double&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Double&gt;。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double&gt; is also valid.</source>
          <target state="translated">&lt;xref:System.Double&gt;でも有効です。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MaxWidth*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.MaxWidth*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.MaxWidth*&gt;。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Implements basic measure-pass layout system behavior for <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">実装して basic 測定パス レイアウト システムの動作<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt; to connect the  WPF core-level and WPF framework-level layout measure implementations.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;WPF コア レベルと WPF フレームワーク レベルのレイアウトの測定の実装に接続する&lt;/xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation seals the method.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実装メソッドをシールします&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt; instead.</source>
          <target state="translated">WPF フレームワーク レベル上に構築される要素の測定パス レイアウト動作を調整するのには、オーバーライド&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;代わりにします&lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use &lt;xref:System.Windows.FrameworkElement&gt;, override &lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">意図的に、WPF フレームワーク レベルでの構築やしない&lt;xref:System.Windows.FrameworkElement&gt;&lt;xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName&gt;の上書き&lt;/xref:System.Windows.FrameworkElement&gt;を使用して要素の測定パス レイアウト動作を調整するには</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The available size that the parent element can give to the child elements.</source>
          <target state="translated">親要素が子要素に提供できるサイズ。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The desired size of this element in layout.</source>
          <target state="translated">この要素のレイアウトでの目的のサイズ。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>-derived class.</source>
          <target state="translated">派生クラスでオーバーライドされると、子要素に必要なレイアウトのサイズを測定しのサイズを決定、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>-クラスを派生します。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Override MeasureOverride to implement custom layout sizing behavior for your element as it participates in the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> layout system.</source>
          <target state="translated">上書きに含まれているように、要素のカスタム レイアウトのサイズ変更動作を実装する MeasureOverride、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>レイアウト システムです。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Your implementation should do the following:      1.</source>
          <target state="translated">実装は、以下を実行する必要があります: 1。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Iterate your element's particular collection of children that are part of layout, call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child element.</source>
          <target state="translated">レイアウト、呼び出しの一部である子の要素の特定のコレクションを反復処理する&lt;xref:System.Windows.UIElement.Measure%2A&gt;で各子要素です&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Immediately get &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; on the child (this is set as a property after &lt;xref:System.Windows.UIElement.Measure%2A&gt; is called).</source>
          <target state="translated">すぐに&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;の子で (これには、設定後にプロパティとして&lt;xref:System.Windows.UIElement.Measure%2A&gt;と呼びます).&lt;/xref:System.Windows.UIElement.Measure%2A&gt; &lt;/xref:System.Windows.UIElement.DesiredSize%2A&gt;</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Compute the net desired size of the parent based upon the measurement of the child elements.</source>
          <target state="translated">子要素の測定に基づく親の net 目的のサイズを計算します。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The return value of MeasureOverride should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</source>
          <target state="translated">MeasureOverride の戻り値は、現在の要素の親要素のメジャーの入力となる要素の独自必要なサイズにする必要があります。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>This same process continues through the layout system until the root element of the page is reached.</source>
          <target state="translated">ページのルート要素に到達するまでは、レイアウト システムでこの同じプロセスが続行されます。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>During this process, child elements might return a larger &lt;xref:System.Windows.UIElement.DesiredSize%2A&gt; size than the initial <ph id="ph1">`availableSize`</ph> to indicate that the child element wants more space.</source>
          <target state="translated">このプロセス中には、子要素より大規模なに返す場合があります&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;最初よりもサイズ<ph id="ph1">`availableSize`</ph>を子要素がより多くの領域を依頼するかを示します&lt;/xref:System.Windows.UIElement.DesiredSize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</source>
          <target state="translated">これは、何らかのスタックの順序、または任意の数の測定] または [コンテンツの配置のソリューションを確立することによって、親コントロールのサイズを変更して、スクロール可能な領域を導入することにより、独自の実装で処理可能性があります。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Elements should call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child during this process, otherwise the child elements will not be correctly sized or arranged.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 要素を呼び出す必要があります&lt;xref:System.Windows.UIElement.Measure%2A&gt;でこの処理中にそれぞれの子では、それ以外の場合、子要素は正しくサイズまたはされません配置&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The available size that this element can give to child elements.</source>
          <target state="translated">この要素は子要素に提供できるサイズ。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Infinity can be specified as a value to indicate that the element will size to whatever content is available.</source>
          <target state="translated">無限大は、どのようなコンテンツが利用可能な要素のサイズはことを示す値として指定できます。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The size that this element determines it needs during layout, based on its calculations of child element sizes.</source>
          <target state="translated">この要素が判断するサイズは、子要素のサイズの計算に基づいて、レイアウト時に必要があります。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum height constraint of the element.</source>
          <target state="translated">取得または要素の高さの最小値制約を設定します。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify height information.</source>
          <target state="translated">これには&amp;3; つのプロパティのいずれかの&lt;xref:System.Windows.FrameworkElement&gt;高さ情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;および&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual height determination is first MinHeight must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.</source>
          <target state="translated">競合する場合、これらの値では、アプリケーションの順序との間の実際の高さの決定は、最初の MinHeight 受け付ける必要があります、し&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;、最後に、 &lt;xref:System.Windows.FrameworkElement.Height%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;境界内にあるこれらの各場合&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">値の制限、&lt;xref:System.Double&gt;によって値が適用される、&lt;xref:System.Windows.ValidateValueCallback&gt;メカニズム&lt;/xref:System.Windows.ValidateValueCallback&gt;&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MinHeight="double"/&gt;   - or -   &lt;object MinHeight="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MinHeight"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object MinHeight="double"/&gt;   - or -   &lt;object MinHeight="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MinHeight"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">同じ&lt;xref:System.Double&gt;プロパティの値セクションで説明したように範囲の制限が適用されます&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinHeight"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinHeightProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; は、1 in 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinHeight"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.MinHeightProperty&gt;|  |メタデータ プロパティに設定<ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinHeightProperty&gt;       </target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The minimum height of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の高さの最小値で、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The default value is 0.0.</source>
          <target state="translated">既定値は 0.0 です。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Double&gt; is NOT valid, nor is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">ただし、&lt;xref:System.Double&gt;が有効でもありません<ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>&lt;/xref:System.Double&gt; 。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MinHeight*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.MinHeight*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.MinHeight*&gt;。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum width constraint of the element.</source>
          <target state="translated">取得または要素の幅の最小値制約を設定します。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">これには&amp;3; つのプロパティのいずれかの&lt;xref:System.Windows.FrameworkElement&gt;幅情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;および&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual width determination is first MinWidth must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.</source>
          <target state="translated">競合する場合、これらの値では、アプリケーションの順序との間の実際の幅の決定は、最初の MinWidth 受け付ける必要があります、し&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;、最後に、 &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;境界内にあるこれらの各場合&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The value restrictions on the &lt;xref:System.Double&gt; value are enforced by a &lt;xref:System.Windows.ValidateValueCallback&gt; mechanism.</source>
          <target state="translated">値の制限、&lt;xref:System.Double&gt;によって値が適用される、&lt;xref:System.Windows.ValidateValueCallback&gt;メカニズム&lt;/xref:System.Windows.ValidateValueCallback&gt;&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>If you attempt to set an invalid value, a run-time exception is thrown.</source>
          <target state="translated">無効な値を設定しようとすると、実行時例外がスローされます。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object MinWidth="double"/&gt;   - or -   &lt;object MinWidth="qualifiedDouble"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_MinWidth"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object MinWidth="double"/&gt;   - or -   &lt;object MinWidth="qualifiedDouble"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_MinWidth"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>The same &lt;xref:System.Double&gt; range restrictions as mentioned in the Property Value section apply.</source>
          <target state="translated">同じ&lt;xref:System.Double&gt;プロパティの値セクションで説明したように範囲の制限が適用されます&lt;/xref:System.Double&gt;。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px      <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinWidth"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.MinWidthProperty&gt;|   |Metadata properties set to <ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; は、1 in 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px <bpt id="p1">&lt;a name="dependencyPropertyInfo_MinWidth"&gt;</bpt> <ept id="p1">&lt;/a&gt;</ept> ## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.MinWidthProperty&gt;|  |メタデータ プロパティに設定<ph id="ph6">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidthProperty&gt;       </target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The minimum width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の幅の最小値で、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The default value is 0.0.</source>
          <target state="translated">既定値は 0.0 です。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>This value can be any value equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上の任意の値を指定できます。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Double&gt; is not valid, nor is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">ただし、&lt;xref:System.Double&gt;が無効でもありません<ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>&lt;/xref:System.Double&gt; 。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.MinWidth*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.MinWidth*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.MinWidth*&gt;。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</source>
          <target state="translated">指定した移動の方向には、この要素から離れた場所および別の要素にキーボード フォーカスを移動します。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>This implementation overrides &lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt; and seals the method.</source>
          <target state="translated">この実装をオーバーライド&lt;xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt;メソッドをシールと&lt;/xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>The direction that focus is to be moved, as a value of the enumeration.</source>
          <target state="translated">フォーカスが列挙体の値として、移動するのには方向です。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if focus is moved successfully; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the target element in direction as specified does not exist or could not be keyboard focused.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>フォーカスが正常に移動された場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>でしたいないキーボード フォーカスするか、存在しないと方向にターゲット要素が指定されている場合。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Gets or sets the identifying name of the element.</source>
          <target state="translated">取得または要素の識別名を設定します。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> processor.</source>
          <target state="translated">処理中に、構築された後、マークアップ要素を分離コード、イベント ハンドラー コードなどが参照できるように、この名前が、参照を提供する<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>プロセッサ。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The most common usage of this property is to specify a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> element name as an attribute in markup.</source>
          <target state="translated">このプロパティの最も一般的な使用法を指定する、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>マークアップの属性と要素の名前。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>This property essentially provides a WPF framework-level convenience property to set the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">このプロパティでは、WPF フレームワーク レベルの便利なプロパティを設定する基本的にでは、 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Names must be unique within a namescope.</source>
          <target state="translated">名は、名前スコープ内で一意でなければなりません。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Getting a Name if you are creating elements in code is not common.</source>
          <target state="translated">コード内の要素を作成する場合、名前を取得することは、一般的ではありません。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the Name.</source>
          <target state="translated">既に適切な参照をコードにある場合だけメソッドを呼び出すことができ、要素のプロパティを参照し、名前を通常は必要はありません。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>An exception to this is if the Name string has some overloaded meaning, for instance if it is useful to display that name in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">この例外は、名前文字列オーバー ロードされたに意味が内でその名前を表示すると便利である場合<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Setting a Name from code-behind if the original Name was set from markup is also not recommended, and changing the property after loading the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will not change the original object reference.</source>
          <target state="translated">元の名前は、マークアップから設定した場合のコード ビハインドから名前もお勧めしません設定と読み込み後、プロパティを変更する、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>元のオブジェクト参照は変更されません。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The object references are created only when the underlying namescopes are explicitly created during parsing.</source>
          <target state="translated">基になる名前スコープは、解析時に明示的に作成された場合にのみ、オブジェクト参照が作成されます。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>You must specifically call &lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt; to make an effective change to the Name property of an already loaded element.</source>
          <target state="translated">具体的に呼び出す必要があります&lt;xref:System.Windows.FrameworkElement.RegisterName%2A&gt;、効果的な既に読み込まれた要素の Name プロパティに変更します&lt;/xref:System.Windows.FrameworkElement.RegisterName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>One notable case where setting Name from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</source>
          <target state="translated">コードから設定名が重要となる&amp;1; つの主なケースは、実行時に参照できるように、ストーリー ボードの実行対象を要素の名前を登録する場合です。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Before you can register a name, might also need to instantiate and assign a &lt;xref:System.Windows.NameScope&gt; instance.</source>
          <target state="translated">名前を登録することができます、前にも必要になるをインスタンス化し、割り当てます、&lt;xref:System.Windows.NameScope&gt;インスタンス&lt;/xref:System.Windows.NameScope&gt;。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>See the Example section, or <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">使用例」を参照してください。 または<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Setting Name from code has limited applications, but getting an element by Name is more common.</source>
          <target state="translated">アプリケーションが制限されているコードから設定名が、名前で要素を取得するが一般的です。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</source>
          <target state="translated">1 つのシナリオは、アプリケーションがここで、アプリケーションにページが再読み込みされ、必ずしもそのページに対して定義されている分離コードが実行時のコードではありませんは、ナビゲーション モデルをサポートするかどうかです。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>The utility method &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;, which is available from any &lt;xref:System.Windows.FrameworkElement&gt;, can find any element by Name in the logical tree for that element, searching the tree recursively as necessary.</source>
          <target state="translated">ユーティリティ メソッド&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;、これは、 &lt;xref:System.Windows.FrameworkElement&gt;、検索の必要に応じて、ツリーを再帰的に、その要素の論理ツリーの名前で要素を検索できます&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement.FindName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Or you can use the &lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt; static method of &lt;xref:System.Windows.LogicalTreeHelper&gt;, which also takes a Name string as an argument.</source>
          <target state="translated">使用することができます、&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;の静的メソッド&lt;xref:System.Windows.LogicalTreeHelper&gt;、名前の文字列を引数としても扱う&lt;/xref:System.Windows.LogicalTreeHelper&gt;&lt;/xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Typically used root elements (&lt;xref:System.Windows.Window&gt;, &lt;xref:System.Windows.Controls.Page&gt; for example) implement the interface &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">通常使用されるルート要素 (&lt;xref:System.Windows.Window&gt;、&lt;xref:System.Windows.Controls.Page&gt;たとえば) &lt;xref:System.Windows.Markup.INameScope&gt;.&lt;/xref:System.Windows.Markup.INameScope&gt;インターフェイスを実装して&lt;/xref:System.Windows.Controls.Page&gt;&lt;/xref:System.Windows.Window&gt;</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Implementations of this interface are expected to enforce that names be unambiguous within their scope.</source>
          <target state="translated">名前をそのスコープ内で明確にすることを強制するには、このインターフェイスの実装が予想されます。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>The root elements that define this interface also define the namescope behavior boundaries for all the related <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">このインターフェイスを定義するルート要素は、すべての名前スコープの動作の境界を定義するも、関連する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The Name property also serves as an identifier for other processes.</source>
          <target state="translated">Name プロパティは、他のプロセスの識別子としても機能します。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>For instance, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> automation model will use Name as the AutomationId for clients and providers.</source>
          <target state="translated">インスタンス、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>オートメーション モデルはクライアントとプロバイダーの AutomationId として名前を使用するがします。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The string values used for Name have some restrictions, as imposed by the underlying <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../Topic/x:Name%20Directive.md)</ept> defined by the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> specification.</source>
          <target state="translated">名に使用される文字列値は、基になるによって課されるようにいくつかの制限をある<bpt id="p1">[</bpt>X:name ディレクティブ<ept id="p1">](../Topic/x:Name%20Directive.md)</ept>によって定義された、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>仕様です。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Most notably, a Name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</source>
          <target state="translated">最も顕著な名前はアルファベットまたはアンダー スコア文字 (_) で始める必要があり、文字、数字、またはアンダー スコアのみを含める必要があります。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](../Topic/WPF%20XAML%20Namescopes.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](../Topic/WPF%20XAML%20Namescopes.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Name is one of the very few dependency properties that cannot be animated (&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; is <ph id="ph1">`true`</ph> in metadata), because the name itself is vital for targeting an animation.</source>
          <target state="translated">アニメーション化することはできません非常にいくつかの依存関係プロパティのいずれかが名 (&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;は<ph id="ph1">`true`</ph>メタデータに) 名前自体は、アニメーションを対象とするための重要なので、&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Data binding a Name is technically possible, but is an extremely uncommon scenario because a data-bound Name cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</source>
          <target state="translated">名前のバインド データ技術的に可能ですが、非常に一般的ではないシナリオでは、データ バインドの名前がプロパティの主な使用目的を使用できません。 分離コードの識別子の接続ポイントを提供します。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Name"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.NameProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Name"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.NameProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;|&lt;/xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt; &lt;/xref:System.Windows.FrameworkElement.NameProperty&gt;</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The name of the element.</source>
          <target state="translated">要素の名前です。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The default is an empty string.</source>
          <target state="translated">既定では、空の文字列です。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Name*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Name*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Name*&gt;。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is invoked whenever application code or internal processes call &lt;xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;.</source>
          <target state="translated">派生クラスでオーバーライドされるが必ず呼び出されます&lt;xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;。&lt;/xref:System.Windows.FrameworkElement.ApplyTemplate*&gt;を呼び出すアプリケーション コードまたは内部プロセス</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Templates are the section of an element's completed visual tree that comes from the Template property of a &lt;xref:System.Windows.Style&gt; that is applied for the element.</source>
          <target state="translated">テンプレートのテンプレートのプロパティから派生した要素の完成したビジュアル ツリーのセクションでは、&lt;xref:System.Windows.Style&gt;要素に適用されている&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">未処理のたびに呼び出されます<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上で、このクラスに到達します。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">未処理のたびに呼び出されます<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上で、このクラスに到達します。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event reaches this element in its route.</source>
          <target state="translated">未処理のたびに呼び出されます<bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがそのルート上でこの要素に到達します。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Unlike some other On* methods exposed by the base elements, OnGotFocus does have a default implementation.</source>
          <target state="translated">その他のとは異なり * ベースの要素では、フォーカスで公開されたメソッドには、既定の実装です。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Specifically, it has an implementation that overrides the null implementation in the next level of base element down, &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;.</source>
          <target state="translated">具体的には、 &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;。&lt;/xref:System.Windows.UIElement.OnGotFocus%2A&gt;ダウン基本要素の次のレベルで null の実装をオーバーライドする実装があります。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>When invoked, OnGotFocus sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</source>
          <target state="translated">呼び出されると、フォーカスはキーボード フォーカスのため、現在の要素からイベントが発生した場合は、この要素の適切なフォーカスの動作を設定します。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>The OnGotFocus handler does not mark the event arguments as handled, even when focus is set to the current element.</source>
          <target state="translated">フォーカス ハンドラーは、現在の要素にフォーカスが設定されている場合でも、処理済みとしてイベント引数をマークしません。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>If the event's source was another element in the tree (not the current element), the handler does nothing.</source>
          <target state="translated">イベントのソースが別の要素ツリーで、(現在の要素ではなく) の場合は、ハンドラーは、何も実行します。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see &lt;xref:System.Windows.UIElement.Focusable%2A&gt;).</source>
          <target state="translated">要素のフォーカスの既定の動作を変更するは、この方法でフォーカスの動作を変更する向上を実現するのにまったくフォーカス可能な要素を許可しないことによって対応するためにこのメソッドをオーバーライドすることができます (を参照してください&lt;xref:System.Windows.UIElement.Focusable%2A&gt;).&lt;/xref:System.Windows.UIElement.Focusable%2A&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Initialized"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Initialized"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>This method is invoked whenever &lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt; is set to <bpt id="p1">&lt;xref uid="langword_csharp_true " name="true " href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>internally.</source>
          <target state="translated">このメソッドが呼び出されるたびに&lt;xref:System.Windows.FrameworkElement.IsInitialized*&gt;に設定されている<bpt id="p1">&lt;xref uid="langword_csharp_true " name="true " href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>内部的にします&lt;/xref:System.Windows.FrameworkElement.IsInitialized*&gt;。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Invoked whenever the effective value of any dependency property on this <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been updated.</source>
          <target state="translated">ときに呼び出されるこの依存関係プロパティの有効な値<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が更新されました。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The specific dependency property that changed is reported in the arguments parameter.</source>
          <target state="translated">変更された特定の依存関係プロパティが引数パラメーターで報告されます。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Overrides &lt;xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;。&lt;/xref:System.Windows.DependencyObject.OnPropertyChanged*&gt;をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>This method is not intended to generally detect property changes or invalidations.</source>
          <target state="translated">このメソッドは、通常、プロパティの変更または無効化を検出するものではありません。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</source>
          <target state="translated">代わりに目的が、一般的な無効化パターンの変更があったプロパティの広範な分類に関する特定の情報がわかっている場合。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>This method is potentially invoked many times during the life of an object.</source>
          <target state="translated">このメソッドでは、オブジェクトの有効期間中に何度もを呼び出す可能性があります。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Therefore, you can achieve better performance if you override the metadata of specific properties and then attach &lt;xref:System.Windows.CoerceValueCallback&gt; or &lt;xref:System.Windows.PropertyChangedCallback&gt; functions for individual properties.</source>
          <target state="translated">したがって、特定のプロパティのメタデータをオーバーライドし、適用するを使用するパフォーマンスが向上を実現できます&lt;xref:System.Windows.CoerceValueCallback&gt;または&lt;xref:System.Windows.PropertyChangedCallback&gt;個々 のプロパティ&lt;/xref:System.Windows.PropertyChangedCallback&gt;&lt;/xref:System.Windows.CoerceValueCallback&gt;。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>However, you would use this method if a &lt;xref:System.Windows.FrameworkElement&gt; includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">場合にこのメソッドを使用すると、&lt;xref:System.Windows.FrameworkElement&gt;多数の値と相互に依存関係プロパティを含む動作をレンダリングする必要がありますを再実行関連のプロパティの無効化のケースのいくつかのようにロジックが含まれている場合またはします&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Note that there is an identically named <ph id="ph1">`OnPropertyChanged`</ph> method with a different signature (the parameter type is &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;) that can appear on a number of classes.</source>
          <target state="translated">ある同じ名前に注意してください<ph id="ph1">`OnPropertyChanged`</ph>異なるシグネチャを持つメソッド (パラメーターの型が&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;) に多数のクラスに表示されることができます&lt;/xref:System.ComponentModel.PropertyChangedEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>That <ph id="ph1">`OnPropertyChanged`</ph> is used for data object notifications, and is part of the contract for &lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;.</source>
          <target state="translated">ある<ph id="ph1">`OnPropertyChanged`</ph> &lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;.&lt;/xref:System.ComponentModel.INotifyPropertyChanged&gt;のコントラクトの一部であり、データ オブジェクトの通知に使用</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The event data that describes the property that changed, as well as old and new values.</source>
          <target state="translated">変更されたプロパティを説明するイベント データだけでなく古い値と新しい値。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event, using the specified information as part of the eventual event data.</source>
          <target state="translated">発生させます、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント、最終的なイベント データの一部として指定した情報を使用します。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;。&lt;/xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>If you call this method you will reset the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; property, the &lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt; property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</source>
          <target state="translated">このメソッドを呼び出す場合は、リセット、 &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;、プロパティ、&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;プロパティ、またはその両方として指定されている内容によっては、指定された引数で変更されは常にイベントが発生する&lt;/xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;&lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Details of the old and new size involved in the change.</source>
          <target state="translated">古いマスター_キーと新しいサイズ変更に関係の詳細です。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Invoked when the style in use on this element changes, which will invalidate the layout.</source>
          <target state="translated">この要素で使用中でスタイルが変更されたときに呼び出されると、レイアウトを無効になります。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>This method has a default implementation that sets an internal flag that notes the style changed condition.</source>
          <target state="translated">このメソッドには、スタイルが変更された状態を記録する内部フラグを設定する既定の実装があります。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The old style.</source>
          <target state="translated">古いスタイルです。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>The new style.</source>
          <target state="translated">新しいスタイルです。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">未処理のたびに呼び出されます<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上で、このクラスに到達します。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Invoked whenever the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches this class in its route.</source>
          <target state="translated">呼び出されるたびに、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上で、このクラスに到達します。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
          <target state="translated">イベントに関するデータを提供します。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Invoked when the parent of this element in the visual tree is changed.</source>
          <target state="translated">ビジュアル ツリー内のこの要素の親が変更されたときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Overrides &lt;xref:System.Windows.UIElement.OnVisualParentChanged*&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.OnVisualParentChanged*&gt;。&lt;/xref:System.Windows.UIElement.OnVisualParentChanged*&gt;をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</source>
          <target state="translated">ビジュアル ツリーは、コレクションなどに視覚的にレンダリングされない要素を省略しているので、論理ツリーから異なる可能性がありますし、そのテーマとスタイルの合成に基づいていくつかの要素を展開します。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>The old parent element.</source>
          <target state="translated">前の親要素です。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the element did not have a visual parent previously.</source>
          <target state="translated">あります<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>する要素がありませんでしたビジュアル親以前を示すためにします。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</source>
          <target state="translated">取得またはテーマ スタイルのスタイル プロパティがこの要素に組み込むかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</source>
          <target state="translated">このプロパティの最も一般的な使用法は、テーマとスタイルを提供しているスタイルのセッター内の間接的な使用率です。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you set OverridesDefaultStyle to <ph id="ph2">`true`</ph> on a control, you will be suppressing the default control template supplied by the theme styles.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 設定した場合は、OverridesDefaultStyle<ph id="ph2">`true`</ph>テーマ スタイルによって提供される既定のコントロール テンプレートをコントロールに抑制されます。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>That control template typically includes the content presenter and other composited elements that provide basic <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> functionality and visualization for the control.</source>
          <target state="translated">コンテンツの発表者と基本を提供するその他の合成要素が通常コントロール テンプレートに含まれています<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>機能およびコントロールのビジュアル化。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</source>
          <target state="translated">を、既定のテーマ スタイルと同じ機能をサポートするために続行するには、制御する場合は、同じ構造をレプリケートするコントロール テンプレートを使用して別のスタイルを指定してください。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>コントロールの作成の概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_OverridesDefaultStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_OverridesDefaultStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素は、テーマのスタイル プロパティを使用していない場合すべての元のスタイル プロパティはローカル アプリケーションのスタイルから取り出され、テーマのスタイル プロパティは適用されません。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合はアプリケーション スタイルが最初に、適用し、アプリケーションのスタイルで具体的には設定されていないプロパティのテーマ スタイルを適用します。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.OverridesDefaultStyle*&gt;。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Gets the logical parent  element of this element.</source>
          <target state="translated">この要素の論理上の親要素を取得します。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Parent may be <ph id="ph1">`null`</ph> in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</source>
          <target state="translated">親があります<ph id="ph1">`null`</ph>要素がインスタンス化されましたが、最終的に、ページ レベルのルート要素、または、アプリケーション オブジェクトに接続するすべての論理ツリーにアタッチされていない場合。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</source>
          <target state="translated">要素の論理上の親が、アプリケーションの機能に応じて変わることが可能性のある、このプロパティの値を維持するその変更は反映されないことに注意してください。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>You typically should get the value immediately before you need it.</source>
          <target state="translated">通常必要があります値を取得する必要がある直前です。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> for more information about logical tree  traversal, and the scenarios where using  Parent as a technique of parent element discovery is appropriate.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>wpf ツリー<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>論理ツリーの移動、および親要素の検出の手法として親を使用して、適切なシナリオの詳細についてはします。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</source>
          <target state="translated">プロパティのエンジンは可能性があると再計算要素のすべてのプロパティ値が親を再指定、いくつかのプロパティは、論理ツリーを使用して値を継承するため。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt; that applies for bindings can also change when elements are reparented.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;にバインドできますも変更を適用します&lt;/xref:System.Windows.FrameworkElement.DataContext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</source>
          <target state="translated">要素の親の変更は通常によってのみ行われますコレクションの操作、dedicated を使用して追加または削除メソッド、または、要素のコンテンツのプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The most typical scenario for using the Parent property is to obtain a reference and then get various &lt;xref:System.Windows.FrameworkElement&gt; property values from the parent.</source>
          <target state="translated">親プロパティを使用する最も一般的なシナリオでは参照を取得して、さまざまな取得を&lt;xref:System.Windows.FrameworkElement&gt;親からのプロパティ値&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>For templates, the Parent of the template eventually will be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">最終的に、テンプレートの親であるが、テンプレートの<ph id="ph1">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>To get past this point and extend into the logical tree where the template is actually applied, use &lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;.</source>
          <target state="translated">このポイント以降をテンプレートが実際に適用されている論理ツリーにまで拡張&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</source>
          <target state="translated">このプロパティに論理ツリーの親と異なる場合のビジュアル ツリーの親が報告されていないことに注意してください。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</source>
          <target state="translated">ビジュアル ツリーの親では、通常重要アプリケーションの一般的なケースではないが、visual 特定レベルの場合に必要な親要素があります。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Media.VisualTreeHelper&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;。&lt;/xref:System.Windows.Media.VisualTreeHelper&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>This element's logical parent.</source>
          <target state="translated">この要素の論理上の親です。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Supports incremental layout implementations in specialized subclasses of <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">特殊なサブクラスでインクリメンタル レイアウトの実装をサポートしている<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>ParentLayoutInvalidated is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</source>
          <target state="translated">ParentLayoutInvalidated は子要素が親のメジャーに影響を与えるとしてのメタデータでマークされているプロパティを無効にすると呼び出されるまたは配置レイアウト時にパスします。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>If this element has a child element on which some property was invalidated and the property was marked as &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt; or &lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt; in property metadata during registration, this method is invoked.</source>
          <target state="translated">この要素の子要素をいくつかのプロパティは無効化およびプロパティがあるとマークされた場合&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;または&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;でプロパティのメタデータの登録中に、このメソッドが呼び出されます&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</source>
          <target state="translated">メソッドの呼び出しでは、この要素は、レイアウトの部分 (増分) の更新をサポートしている場合は、特定の子要素を再測定する必要があります、親要素に通知します。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>By default, &lt;xref:System.Windows.FrameworkElement&gt; does not support incremental layout, and in the &lt;xref:System.Windows.FrameworkElement&gt; class this method has no default implementation.</source>
          <target state="translated">既定では、&lt;xref:System.Windows.FrameworkElement&gt;増分のレイアウトをサポートしていませんし、、&lt;xref:System.Windows.FrameworkElement&gt;クラスのこのメソッドは既定の実装を持ちません&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</source>
          <target state="translated">既定のレイアウト システムの動作を変更することが必要なために、ここでこのメソッドをオーバーライドする必要があるシナリオは一般的ではありません。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</source>
          <target state="translated">クラスが、WPF フレームワーク レベルのレイアウト システムよりも大幅に制限は、使用可能な子要素の型の制限を持っているかどうかには、実装のシナリオ例があります。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</source>
          <target state="translated">これらのカスタム要素の性質上、プロパティが変更された可能性があります意図的を延期する一部のカスタム レイアウトの動作を実装する場合。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</source>
          <target state="translated">たとえば、特定の種類別のレイアウト パスになる通常の変更のメジャー/配置メソッドのオーバーライドを描画パスを子要素を最適化しようとするを遅らせることができます。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>The child element reporting the change.</source>
          <target state="translated">変更を報告する子要素です。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</source>
          <target state="translated">指定したフォーカスの移動方向をこの要素に相対的なフォーカスを受け取るが、実際には、フォーカスを移動できない次の要素を決定します。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt; is the related method that actually does move focus.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;実際には、フォーカスを移動するが関連する方法です。&lt;/xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The direction for which a prospective focus change should be determined.</source>
          <target state="translated">使用予定のフォーカスの変更を決定する必要があります方向です。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The next element that focus would move to if focus were actually traversed.</source>
          <target state="translated">対象にした次の要素は、フォーカスが実際に走査された場合に移動します。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>May return <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if focus cannot be moved relative to this element for the provided direction.</source>
          <target state="translated">返す可能性があります<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>フォーカスをこの要素に相対的な指定した方向に移動できない場合。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Specified one of the following directions in the <bpt id="p1">&lt;xref href="System.Windows.Input.TraversalRequest"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>: <bpt id="p2">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Specified one of the following directions in the <bpt id="p1">&lt;xref href="System.Windows.Input.TraversalRequest"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>: <bpt id="p2">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, <bpt id="p4">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>, <bpt id="p5">&lt;xref href="System.Windows.Input.FocusNavigationDirection"&gt;</bpt><ept id="p5">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>These directions are not legal for PredictFocus (but they are legal for &lt;xref:System.Windows.FrameworkElement.MoveFocus*&gt;).</source>
          <target state="translated">PredictFocus を次の手順はできません (の法律が&lt;xref:System.Windows.FrameworkElement.MoveFocus*&gt;).&lt;/xref:System.Windows.FrameworkElement.MoveFocus*&gt;</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Provides an accessor that simplifies access to the &lt;xref:System.Windows.NameScope&gt; registration method.</source>
          <target state="translated">アクセスを簡素化するアクセサーを提供、&lt;xref:System.Windows.NameScope&gt;登録方法&lt;/xref:System.Windows.NameScope&gt;。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.NameScope.RegisterName%2A&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;。&lt;/xref:System.Windows.NameScope.RegisterName%2A&gt;を呼び出すための便利なメソッド</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The implementation will check successive parent elements until it finds the applicable &lt;xref:System.Windows.NameScope&gt; implementation, which is found by finding an element that implements &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">実装は、該当する&lt;xref:System.Windows.NameScope&gt;&lt;xref:System.Windows.Markup.INameScope&gt;。&lt;/xref:System.Windows.Markup.INameScope&gt;を実装する要素を検索して検出される実装&lt;/xref:System.Windows.NameScope&gt;が見つかるまで、連続する親要素は確認します。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>For more information about namescopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">名前スコープの詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF XAML 名前スコープ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Calling RegisterName is necessary in order to correctly hook up animation storyboards for applications when created in code.</source>
          <target state="translated">RegisterName を呼び出すことは、アプリケーション コードで作成されたときのアニメーションのストーリー ボードを正しくフックするために必要があります。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>This is because one of the key storyboard properties, &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;, uses a run-time name lookup instead of being able to take a reference to a target element.</source>
          <target state="translated">これは、プロパティ、キーのいずれかのストーリー ボード作成ため&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;、ターゲット要素への参照を実行することではなく実行時の名前検索を使用します&lt;/xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>This is true even if that element is accessible by reference from the code.</source>
          <target state="translated">これは、その要素が、コードから参照渡しでアクセス可能な場合でも当てはまります。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>For more information on why you need to register names for storyboard targets, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">ストーリー ボードのターゲットの名前を登録する必要がある理由の詳細については、次を参照してください。<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Name to use for the specified name-object mapping.</source>
          <target state="translated">指定した名前とオブジェクトのマッピングに使用する名前です。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Object for the mapping.</source>
          <target state="translated">マッピングのオブジェクトです。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Removes the provided object from this element's logical tree.</source>
          <target state="translated">この要素の論理ツリーから指定されたオブジェクトを削除します。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> updates the affected logical tree parent pointers to keep in sync with this deletion.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この削除と同期を維持する影響を受ける論理ツリーの親ポインターを更新します。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Use this method for the implementation of collections on objects that represent logical children of an element.</source>
          <target state="translated">要素の論理子を表すオブジェクトのコレクションの実装には、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>This might be done in property getters or setters, class handlers of <ph id="ph1">`Changed`</ph> events, constructors, or within the collection types themselves.</source>
          <target state="translated">これは、プロパティの getter または setter、クラスのハンドラーで行うことがあります<ph id="ph1">`Changed`</ph>イベント、コンス トラクター、またはコレクション内でそれ自体の種類します。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</source>
          <target state="translated">指定された基本コントロール クラスのコンテンツ モデルに適切なものがない限りは、コントロールの作成者がこのレベルで論理ツリーを操作するはお勧めできません。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Consider subclassing at the level of &lt;xref:System.Windows.Controls.ContentControl&gt;, &lt;xref:System.Windows.Controls.ItemsControl&gt;, and &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;.</source>
          <target state="translated">レベルのサブクラス化を検討してください&lt;xref:System.Windows.Controls.ContentControl&gt;、 &lt;xref:System.Windows.Controls.ItemsControl&gt;、 &lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;&lt;/xref:System.Windows.Controls.HeaderedItemsControl&gt; &lt;/xref:System.Windows.Controls.ItemsControl&gt; &lt;/xref:System.Windows.Controls.ContentControl&gt; 。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>These classes provide a content model with particular enforcement of logical children through dedicated <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, as well as support for other features typically desirable in a <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> control such as styling through templates.</source>
          <target state="translated">これらのクラスを介して専用の論理子の特定の強制使用したモデルのコンテンツを提供する<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>、その他の機能では通常望ましくのサポートに加えて、<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>テンプレートを介してスタイルなどのコントロールです。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>The element to remove.</source>
          <target state="translated">削除する要素。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Occurs when &lt;xref:System.Windows.FrameworkElement.BringIntoView*&gt; is called on this element.</source>
          <target state="translated">発生したときに&lt;xref:System.Windows.FrameworkElement.BringIntoView*&gt;はこの要素で呼び出されます&lt;/xref:System.Windows.FrameworkElement.BringIntoView*&gt;。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>This event indicates to a parent &lt;xref:System.Windows.Controls.ScrollViewer&gt; (or derived class) that the element that raises the RequestBringIntoView event should be made visible within the scrollable region.</source>
          <target state="translated">このイベントは、親を示します&lt;xref:System.Windows.Controls.ScrollViewer&gt;(またはその派生クラス) を RequestBringIntoView イベントを発生させる要素表示できるようにする、スクロール可能な地域内。&lt;/xref:System.Windows.Controls.ScrollViewer&gt; 。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Controls.ScrollViewer&gt; will then mark the RequestBringIntoView event as handled, by using class handling of the event.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ScrollViewer&gt;イベントのクラス処理を使用して、処理されると、マークは、RequestBringIntoView イベントが&lt;/xref:System.Windows.Controls.ScrollViewer&gt;。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>In general RequestBringIntoView event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;.</source>
          <target state="translated">一般にイベント データ マークしないでまたはいずれかではスクロール可能な領域を制御するすべてのクラスによって処理される RequestBringIntoView インスタンス ハンドラー &lt;xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.BringIntoView%2A&gt;と呼ばれる要素の目的の目標を妨害するそう</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RequestBringIntoViewEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.RequestBringIntoViewEventHandler&gt;|&lt;/xref:System.Windows.RequestBringIntoViewEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent&gt;</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.RequestBringIntoView"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Gets or sets the locally-defined resource dictionary.</source>
          <target state="translated">取得またはローカルに定義されたリソース ディクショナリを設定します。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Resource dictionaries that can be defined completely or partially in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> are typically created as a property element, and are typically on the root element for any individual page or for the application.</source>
          <target state="translated">完全または部分的に定義できるリソース ディクショナリ<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>は、通常、プロパティ要素として作成し、個々 のページまたはアプリケーションのルート要素には、通常します。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</source>
          <target state="translated">このレベルでリソース ディクショナリを配置すると、ページ内の個々 の子要素 (またはアプリケーションの場合、任意のページ) を検索しやすきます。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</source>
          <target state="translated">ほとんどのアプリケーション シナリオでは、ことをお勧めスタイルが、リソース ディクショナリ内のオブジェクト要素として定義されているスタイル リソース全体を自己完結型できるように、外部リソースとして定義するか (このアプローチは、分担デザイナーと開発者の責任を編集することが必要な物理ファイルを分離することにより、役立ちます)。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Note that this property returns only the resource dictionary declared directly within that element.</source>
          <target state="translated">このプロパティをリソース ディクショナリだけがその要素内で直接宣言を返すことに注意してください。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</source>
          <target state="translated">これは、実際のリソース ルックアップ プロセスの子要素がアクセスできる場所の検索方向を再帰的に、各親要素で定義されているリソースとは異なるです。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Resources can also be referenced by code from within the collection, but be aware that resources created in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> will definitely not be accessible until after &lt;xref:System.Windows.FrameworkElement.Loaded&gt; is raised by the element that declares the dictionary.</source>
          <target state="translated">リソースは、コレクション内からコードで参照することもできますでリソースが作成されたことに注意してください<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>確実アクセスできなくなりますまで後&lt;xref:System.Windows.FrameworkElement.Loaded&gt;ディクショナリを宣言する要素で発生します&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>In fact, resources are parsed asynchronously and not even the &lt;xref:System.Windows.FrameworkElement.Loaded&gt; event is an assurance that you can reference a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resource.</source>
          <target state="translated">実際には、リソースが解析されるに非同期的におよび not であっても、&lt;xref:System.Windows.FrameworkElement.Loaded&gt;イベントが参照できるように保証、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>リソースを定義します&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>For this reason you should generally only access <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> defined resources as part of run-time code, or through other <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> techniques such as styles or resource extension references for attribute values.</source>
          <target state="translated">このため、通常のみにアクセスする<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>またはその他の実行時のコードの一部としてリソースを定義<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>スタイルや属性の値をリソース拡張機能の参照などの手法です。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>When you access resources through code, it is essentially equivalent to a  reference made from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">コードによって、リソースにアクセスするときに基本的と等価であるから行われます。 参照に<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The underlying &lt;xref:System.Windows.ResourceDictionary&gt; supports the methods required to add, remove or query resources from within the collection by using code.</source>
          <target state="translated">基になる&lt;xref:System.Windows.ResourceDictionary&gt;追加、削除、またはコードを使用してから、コレクション内のリソースを照会するために必要なメソッドをサポートします&lt;/xref:System.Windows.ResourceDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The Resources property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">リソース プロパティは、完全に新しい要素のリソースのコレクションを置き換えるのシナリオをサポートする設定、または異なる&lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax shown does not include an element for the &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">注意して、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>に示す構文は&lt;xref:System.Windows.ResourceDictionary&gt;&lt;/xref:System.Windows.ResourceDictionary&gt;要素が含まれません。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</source>
          <target state="translated">これは、暗黙の型のコレクション構文の例コレクションの要素を表すタグを省略できます。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The elements that are added as items to the collection are specified instead.</source>
          <target state="translated">代わりに、コレクションに項目として追加される要素を指定します。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>For more information about implicit collections and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">暗黙の型のコレクションの詳細については、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>XAML 構文の詳細<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>One case where a &lt;xref:System.Windows.ResourceDictionary&gt; is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">1 つ&lt;xref:System.Windows.ResourceDictionary&gt;要素は、マージされたディクショナリを導入する場合に要素がある通常ありません子&lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;のように明示的に指定されています&lt;/xref:System.Windows.ResourceDictionary&gt;がの場合</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>リソース ディクショナリのトピックとマージ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Resources"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.Resources&gt;       oneOrMoreResourceElements     &lt;/object.Resources&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Resources"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreResourceElements<ept id="p3">*</ept>    One or more object elements, each of which defines a resource.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Resources"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.Resources&gt;       oneOrMoreResourceElements     &lt;/object.Resources&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Resources"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreResourceElements<ept id="p3">*</ept>&amp;1; つまたは複数のオブジェクト要素、それぞれのリソースを定義します。      </target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Each resource property element within each &lt;xref:System.Windows.ResourceDictionary&gt; must have a unique value for the <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, which serves as the unique key when values are retrieved from the &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">各リソースのプロパティ要素内で各&lt;xref:System.Windows.ResourceDictionary&gt;に一意の値を持つ必要があります、 <bpt id="p1">[</bpt>X:key ディレクティブ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>、 &lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;から値を取得する際に一意のキーとして機能する&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The current locally-defined dictionary of resources, where each resource can be accessed by key.</source>
          <target state="translated">ローカルで定義されたの現在のディクショナリ キーで各リソースにアクセスできる場所のリソース。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</source>
          <target state="translated">データ ソースへのパスの修飾として指定されたソースのプロパティ名に基づく、この要素にバインドをアタッチします。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;, and creates a new &lt;xref:System.Windows.Data.Binding&gt; based on the provided <ph id="ph1">`path`</ph> parameter.</source>
          <target state="translated">このメソッドは、便利なメソッドを呼び出す&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;、として現在のインスタンスを渡しますが、 &lt;xref:System.Windows.DependencyObject&gt;、新たに作成および&lt;xref:System.Windows.Data.Binding&gt;に基づいて、指定した<ph id="ph1">`path`</ph>パラメーター&lt;/xref:System.Windows.Data.Binding&gt; &lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>This signature is more convenient if you are establishing a simple default binding.</source>
          <target state="translated">この署名は、単純な既定のバインディングを確立する場合に便利です。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>If you need to specify any binding properties to non-default conditions, or want to use a &lt;xref:System.Windows.Data.MultiBinding&gt; or &lt;xref:System.Windows.Data.PriorityBinding&gt;,you should use the &lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt; signature.</source>
          <target state="translated">既定以外の条件へのバインディング プロパティを指定するか、使用する必要がある場合、&lt;xref:System.Windows.Data.MultiBinding&gt;または&lt;xref:System.Windows.Data.PriorityBinding&gt;、使用する必要があります、&lt;xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;署名&lt;/xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29&gt;&lt;/xref:System.Windows.Data.PriorityBinding&gt;&lt;/xref:System.Windows.Data.MultiBinding&gt;。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Identifies the destination property where the binding should be established.</source>
          <target state="translated">バインドを確立する必要がある対象になるプロパティを識別します。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The source property name or the path to the property used for the binding.</source>
          <target state="translated">ソースのプロパティ名、または、バインディングの使用プロパティへのパス。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Records the conditions of the binding.</source>
          <target state="translated">バインドの条件を記録します。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">この戻り値は、エラーをチェックするために役立ちます。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Attaches a binding to this element, based on the provided binding object.</source>
          <target state="translated">指定したバインディング オブジェクトに基づいて、この要素にバインドをアタッチします。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>This method is a convenience method for calling &lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;, which passes the current instance as the &lt;xref:System.Windows.DependencyObject&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;&lt;xref:System.Windows.DependencyObject&gt;。&lt;/xref:System.Windows.DependencyObject&gt;として現在のインスタンスを渡します&lt;/xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName&gt;を呼び出すための便利なメソッド</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Identifies the property where the binding should be established.</source>
          <target state="translated">バインドを確立する必要があるプロパティを識別します。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Represents the specifics of the data binding.</source>
          <target state="translated">データ バインディングの詳細を表します。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Records the conditions of the binding.</source>
          <target state="translated">バインドの条件を記録します。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>This return value can be useful for error checking.</source>
          <target state="translated">この戻り値は、エラーをチェックするために役立ちます。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Sets the value of the &lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt; attached property for the provided element.</source>
          <target state="translated">値を設定、&lt;xref:System.Windows.FrameworkElement.FlowDirection*&gt;添付プロパティを指定した要素&lt;/xref:System.Windows.FrameworkElement.FlowDirection*&gt;。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>This method supports attached property syntax for the &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; property, therefore allowing child elements of a provided &lt;xref:System.Windows.FrameworkElement&gt; to specify flow direction for the arrangement within their parent element.</source>
          <target state="translated">このメソッドは、の添付プロパティの構文をサポートしている、&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;プロパティを指定された要素に子をそのためようにする&lt;xref:System.Windows.FrameworkElement&gt;親要素内での配置のフロー方向を指定します&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>To set the value on the current &lt;xref:System.Windows.FrameworkElement&gt;, use the direct <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> accessor &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.</source>
          <target state="translated">現在の値を設定する&lt;xref:System.Windows.FrameworkElement&gt;、ダイレクトを使用して<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>アクセサー &lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.FlowDirection%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>The element that specifies a flow direction.</source>
          <target state="translated">フローの方向を指定する要素。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, specifying the direction.</source>
          <target state="translated">方向を指定する列挙体の値です。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</source>
          <target state="translated">指定した名前のリソースを検索しへのリソース参照を指定したプロパティを設定します。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>A resource reference is similar to the use of a <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> in markup.</source>
          <target state="translated">リソースの参照の使用に似ていますが、 <bpt id="p1">[</bpt>DynamicResource マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>マークアップでします。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</source>
          <target state="translated">リソース参照では、実行時の遅延単位で指定したプロパティの値を提供する内部式を作成します。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</source>
          <target state="translated">式は、現在の要素が親を再指定する場合や、リソース ディクショナリが内部のイベントによって変更された値が示すされるたびに再評価されます (親の変更は、ディクショナリの検索パスを変更は)。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The property to which the resource is bound.</source>
          <target state="translated">リソースがバインドされているプロパティです。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>The name of the resource.</source>
          <target state="translated">リソースの名前。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property.</source>
          <target state="translated">シリアル化プロセスでの内容をシリアル化する必要かどうかを返します、&lt;xref:System.Windows.FrameworkElement.Resources*&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.Resources*&gt;。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> as long as there is at least one keyed resource in the local &lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;.</source>
          <target state="translated">これは、戻り値は<ph id="ph1">`true`</ph>ローカル&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.Resources%2A&gt;の少なくとも&amp;1; つのキーを持つリソースがある限り、</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Resources*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、&lt;xref:System.Windows.FrameworkElement.Resources*&gt;プロパティの値が、それ以外のシリアル化する必要があります<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.Resources*&gt; 。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property.</source>
          <target state="translated">シリアル化プロセスでの内容をシリアル化する必要かどうかを返します、&lt;xref:System.Windows.FrameworkElement.Style*&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.Style*&gt;。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> if the &lt;xref:System.Windows.Style&gt; is locally set.</source>
          <target state="translated">返されます<ph id="ph1">`true`</ph>場合、&lt;xref:System.Windows.Style&gt;ローカルに設定します&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Style*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、&lt;xref:System.Windows.FrameworkElement.Style*&gt;プロパティの値が、それ以外のシリアル化する必要があります<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.Style*&gt; 。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property.</source>
          <target state="translated">シリアル化プロセスでの内容をシリアル化する必要かどうかを返します、&lt;xref:System.Windows.FrameworkElement.Triggers*&gt;プロパティ&lt;/xref:System.Windows.FrameworkElement.Triggers*&gt;。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`true`</ph> if the &lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt; property is locally set.</source>
          <target state="translated">このメソッドが戻る<ph id="ph1">`true`</ph>場合、&lt;xref:System.Windows.FrameworkElement.Triggers%2A&gt;プロパティがローカルに設定します&lt;/xref:System.Windows.FrameworkElement.Triggers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.FrameworkElement.Triggers*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、&lt;xref:System.Windows.FrameworkElement.Triggers*&gt;プロパティの値が、それ以外のシリアル化する必要があります<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.FrameworkElement.Triggers*&gt; 。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Occurs when either the &lt;xref:System.Windows.FrameworkElement.ActualHeight<bpt id="p1">*</bpt>&gt; or the &lt;xref:System.Windows.FrameworkElement.ActualWidth<ept id="p1">*</ept>&gt; properties change value on this element.</source>
          <target state="translated">発生したときにいずれか、 &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; または&lt;&gt; <ept id="p1">*</ept>&gt; プロパティは、この要素の値を変更します。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、&lt;xref:System.Windows.EventTrigger&gt;スタイルでします&lt;/xref:System.Windows.EventTrigger&gt;。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The layout system reads properties within the &lt;xref:System.Windows.SizeChangedEventArgs&gt; argument class of this event, to  determine whether the reported size changes should be considered significant.</source>
          <target state="translated">レイアウト システム内のプロパティを読み取り、&lt;xref:System.Windows.SizeChangedEventArgs&gt;報告されるサイズの変更を重要な考慮するかどうかを決定する、このイベントの引数のクラス&lt;/xref:System.Windows.SizeChangedEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</source>
          <target state="translated">これにより、レイアウト システムや、コントロールに固有のレイアウトの実装を強制的に新旧の高さまたは幅の値の視覚的にこうしたわずかな違いのためのレイアウト変更を回避します。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</source>
          <target state="translated">こうしたわずかな違いは、浮動小数点データ型の丸め処理を行うか、同じ結果の計算があります。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_SizeChanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.SizeChangedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_SizeChanged"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.SizeChangedEventHandler&gt;|&lt;/xref:System.Windows.SizeChangedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.SizeChangedEvent&gt;</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.SizeChanged"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Occurs when the source value changes for any existing property binding on this element.</source>
          <target state="translated">この要素にバインドする既存のプロパティの元の値が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Data.Binding.SourceUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Data.Binding.SourceUpdated&gt;いずれかが発生するイベントを&lt;xref:System.Windows.Data.Binding&gt;この要素に関連付けられている&lt;/xref:System.Windows.Data.Binding&gt;&lt;/xref:System.Windows.Data.Binding.SourceUpdated&gt;。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_SourceUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object SourceUpdated="eventHandler"/&gt;   ```</ph></source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_SourceUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用方法<ph id="ph1">```   &lt;object SourceUpdated="eventHandler"/&gt;   ```</ph></target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Gets or sets the style used by this element when it is rendered.</source>
          <target state="translated">取得またはが表示される場合、この要素で使用されるスタイルを設定します。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</source>
          <target state="translated">コントロールの現在のスタイルは多くの場合、コントロール テーマから既定のスタイルによって提供されるまたはスタイルから通常によって適用されるその種類のコントロールにページまたはアプリケーション レベル (暗黙的なスタイル) のリソース。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</source>
          <target state="translated">このプロパティは既定の設定したり返したり (テーマ) のスタイルが、暗黙的なスタイルまたは明示的なスタイル要素で動作しているのか、返します。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</source>
          <target state="translated">暗黙的または明示的なスタイルの場合、スタイルをリソースとして指定またはローカルに定義されているかどうかは関係ありません。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Setting the styles has some restrictions.</source>
          <target state="translated">スタイルの設定の制限があります。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>You can reset the entire Style property to a new &lt;xref:System.Windows.Style&gt; at any time, which will force a layout recomposition.</source>
          <target state="translated">全体のスタイル プロパティをリセットするには新しい&lt;xref:System.Windows.Style&gt;、いつでもレイアウト再構成を強制する&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>However, as soon as that style is placed in use by a loaded element, the &lt;xref:System.Windows.Style&gt; should be considered sealed.</source>
          <target state="translated">ただし、そのスタイルが使用中で読み込まれた要素で配置されるとすぐとして、&lt;xref:System.Windows.Style&gt;と見なすべきシール&lt;/xref:System.Windows.Style&gt;。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Attempting to make a change to any individual property of an in-use style (such as anything within the collection of &lt;xref:System.Windows.Style.Setters%2A&gt;) causes an exception to be thrown.</source>
          <target state="translated">使用するスタイルの個々 のプロパティを変更しようとしています (などのコレクション内のすべて&lt;xref:System.Windows.Style.Setters%2A&gt;) 例外がスローされます&lt;/xref:System.Windows.Style.Setters%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</source>
          <target state="translated">マークアップで定義されているスタイルは、(リソース) のリソース ディクショナリから読み込まれるか (インライン スタイル) に含まれているページが読み込まれるとすぐに使用すると見なされます。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Style is a dependency property with special precedence.</source>
          <target state="translated">スタイルは、特別な優先順位を持つ依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>The locally set style generally operates at the highest precedence in the property system.</source>
          <target state="translated">ローカルに設定スタイルが通常プロパティ システムに最高の優先順位で動作します。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>If the Style is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</source>
          <target state="translated">スタイルが null の場合この時点でのプロパティの読み込み中に、システムがその型を指定するローカルまたはアプリケーションのリソースで暗黙的なスタイルを確認します。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the Style property value.</source>
          <target state="translated">スタイルがこの手順の後にも null である場合、し、プレゼンテーションのための機能を実行するスタイル一般にソース (テーマ) の既定のスタイル、にもかかわらずスタイル プロパティの値に既定のスタイルは返されません。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Styling and Templating<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>依存関係プロパティの値の優先順位<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>または<bpt id="p2">[</bpt>スタイルとテンプレート<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Style="{resourceExtension styleResourceKey}"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Style"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <bpt id="p3">&lt;a name="xamlValues_Style"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>    One of the following: , or .</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object Style="{resourceExtension styleResourceKey}"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Style"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<bpt id="p3">&lt;a name="xamlValues_Style"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>resourceExtension<ept id="p4">*</ept>次のいずれかの: または。      </target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XAML リソース<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>    The key that identifies the style being requested.</source>
          <target state="translated"><bpt id="p1">*</bpt>styleResourceKey<ept id="p1">*</ept>要求されているスタイルを識別するキー。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The key refers to an existing resource in a &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">このキーは&lt;xref:System.Windows.ResourceDictionary&gt;。&lt;/xref:System.Windows.ResourceDictionary&gt;で既存のリソース</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Property element syntax is technically possible, but not recommended for most style scenarios.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; プロパティ要素構文は技術的に可能ですが、ほとんどのシナリオでスタイルをお勧めしません。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Inline Styles and Templates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>インライン スタイルとテンプレート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>A binding reference using  or &lt;xref:System.Windows.Data.Binding&gt; is also possible, but uncommon.</source>
          <target state="translated">バインドの参照を使用して、または&lt;xref:System.Windows.Data.Binding&gt;も可能ですが、一般的ではない&lt;/xref:System.Windows.Data.Binding&gt;。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.StyleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Style"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.StyleProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.StyleProperty&gt;</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The applied, nondefault style for the element, if present.</source>
          <target state="translated">存在する場合は、要素に適用すると、既定以外のスタイル。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">それ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The default for a default-constructed <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定で構築された既定<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Style*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Style*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Style*&gt;。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>For a description of this member, see the &lt;xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt; method.</source>
          <target state="translated">このメンバーの説明は、次を参照してください、&lt;xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt;メソッド。&lt;/xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*&gt; 。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Windows.FrameworkElement&gt; instance is cast to an &lt;xref:System.Windows.Markup.IQueryAmbient&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Windows.FrameworkElement&gt;にインスタンスをキャスト、&lt;xref:System.Windows.Markup.IQueryAmbient&gt;インターフェイス&lt;/xref:System.Windows.Markup.IQueryAmbient&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>The name of the requested ambient property.</source>
          <target state="translated">要求されたアンビエント プロパティの名前。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">propertyName</ph><ept id="p2">&lt;/code&gt;</ept> is available; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">propertyName</ph> <ept id="p2">&lt;/code&gt;</ept> 、それ以外の使用可能な<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Gets or sets an arbitrary object value that can be used to store custom information about this element.</source>
          <target state="translated">取得またはこの要素のカスタム情報を格納するために使用する任意のオブジェクトの値を設定します。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>This property is analogous to Tag properties in other <ph id="ph1">[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]</ph> programming models, such as <ph id="ph2">[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]</ph> or <ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">このプロパティは、他のタグのプロパティに似た<ph id="ph1">[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]</ph>などのプログラミング モデル<ph id="ph2">[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]</ph>または<ph id="ph3">[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>Tag is intended to provide a pre-existing property location where you can store some basic custom information about any &lt;xref:System.Windows.FrameworkElement&gt; without requiring you to subclass an element.</source>
          <target state="translated">タグは、いずれかに関する基本的なカスタム情報を格納する既存プロパティの場所を指定して&lt;xref:System.Windows.FrameworkElement&gt;しなくてをサブクラス化要素です&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Because this property takes an object, you would need to use the property element usage in order to set the Tag property in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> to anything other than an object with a known and built-in type converter, such as a string.</source>
          <target state="translated">このプロパティは、オブジェクトを受け取り、ためにはタグ プロパティで設定するためにプロパティ要素の使用方法を使用する必要があります。<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>文字列などの、組み込みの既知の型コンバーターを使用したオブジェクト以外のすべてにします。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Objects used in this manner are typically not within the standard <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> elements.</source>
          <target state="translated">この方法で使用されるオブジェクトが、通常、標準<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>名前空間として導入するためを外部の名前空間を名前空間のマッピングに要する場合がありますので<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>要素。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>XAML and Custom Classes for WPF<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>XAML 名前空間と WPF XAML のマッピングの Namespace<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>XAML と WPF のカスタム クラス<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Tag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.TagProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Tag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.TagProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.TagProperty&gt;</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>The intended value.</source>
          <target state="translated">任意の値。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
          <target state="translated">このプロパティには、既定値はありません。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Tag*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Tag*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Tag*&gt;。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Occurs when the target value changes for any property binding on this element.</source>
          <target state="translated">この要素にプロパティ バインディングのターゲット値が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Data.Binding.TargetUpdated&gt; event that is raised by any &lt;xref:System.Windows.Data.Binding&gt; associated with this element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Data.Binding.TargetUpdated&gt;いずれかが発生するイベントを&lt;xref:System.Windows.Data.Binding&gt;この要素に関連付けられている&lt;/xref:System.Windows.Data.Binding&gt;&lt;/xref:System.Windows.Data.Binding.TargetUpdated&gt;。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</source>
          <target state="translated">通常つまり、対象のバインディングは双方向のバインドおよびバインドされた依存関係プロパティが確認された、以前プロパティの値が現在の検証またはプロパティまたはデータ ソースをサポートするキャッシュのスキームに従った有効なです。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Use the event data of the TargetUpdated event to determine the specific property that is reporting the target value update.</source>
          <target state="translated">TargetUpdated イベントのイベント データを使用して、ターゲット値の更新を報告している特定のプロパティを決定します。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object TargetUpdated="eventHandler"/&gt;   ```</ph></source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_TargetUpdated"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用方法<ph id="ph1">```   &lt;object TargetUpdated="eventHandler"/&gt;   ```</ph></target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Gets a reference to the template parent of this element.</source>
          <target state="translated">この要素の親テンプレートへの参照を取得します。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>This property is not relevant if the element was not created through a template.</source>
          <target state="translated">このプロパティは無効、要素がテンプレートから作成されていない場合です。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>TemplatedParent is frequently <ph id="ph1">`null`</ph> for objects that are created in your application markup or code.</source>
          <target state="translated">TemplatedParent が頻繁に<ph id="ph1">`null`</ph>アプリケーション マークアップやコード内に作成されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>This is because you create those objects directly, not via a template.</source>
          <target state="translated">これは、テンプレートではなく、それらのオブジェクトを直接作成するためです。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</source>
          <target state="translated">オブジェクト参照を取得するかの一般的な名前参照で、ルートから論理ツリーをウォークすることによって、テンプレートから付属していません。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Cases where TemplatedParent might not be <ph id="ph1">`null`</ph> include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with &lt;xref:System.Windows.Media.VisualTreeHelper&gt;, or working with enumerators, which might return elements that came from templates.</source>
          <target state="translated">TemplatedParent ができない場合<ph id="ph1">`null`</ph>visual を使用してツリーをウォーク特定低水準入力イベントのイベント処理のヒット テストなどの操作を含める&lt;xref:System.Windows.Media.VisualTreeHelper&gt;、または列挙子を使用する場合があります戻り値のテンプレートから得られた要素&lt;/xref:System.Windows.Media.VisualTreeHelper&gt;。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Another case is if you specifically call &lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt; against an existing &lt;xref:System.Windows.FrameworkTemplate&gt; and are work with the returned object.</source>
          <target state="translated">別の場合は、明示的に呼び出すかどうか&lt;xref:System.Windows.FrameworkTemplate.FindName%2A&gt;既存に対して&lt;xref:System.Windows.FrameworkTemplate&gt;され、返されたオブジェクトを操作します&lt;/xref:System.Windows.FrameworkTemplate&gt;&lt;/xref:System.Windows.FrameworkTemplate.FindName%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Templates are actually shared objects, where the contents of the template are created only once.</source>
          <target state="translated">テンプレートは、実際には共有オブジェクト、テンプレートの内容が&amp;1; 回だけ作成される場所です。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</source>
          <target state="translated">そのため、テンプレートから得られた要素へのオブジェクト参照を取得する場合があります、見かけ上の論理ツリーは、ページのルートには到達できません。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>In order to connect such a template reference to the page's logical tree, you should get the TemplatedParent value and continue to navigate that element tree as desired.</source>
          <target state="translated">このようなテンプレートへの参照をページの論理ツリーを接続するのには、TemplatedParent 値を取得し、必要に応じて、その要素ツリーのナビゲーションを続行する必要があります。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>The element whose <bpt id="p1">&lt;xref href="System.Windows.FrameworkTemplate"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Windows.FrameworkTemplate.VisualTree*&gt; caused this element to be created.</source>
          <target state="translated">要素が<bpt id="p1">&lt;xref href="System.Windows.FrameworkTemplate"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Windows.FrameworkTemplate.VisualTree*&gt;を作成するには、この要素の原因となった&lt;/xref:System.Windows.FrameworkTemplate.VisualTree*&gt;。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>This value is frequently <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; see Remarks.</source>
          <target state="translated">この値は、頻繁に<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Gets or sets the tool-tip object that is displayed for this element in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得または設定でこの要素に対して表示されるツールヒント オブジェクト、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>If the value of this property is of type &lt;xref:System.Windows.Controls.ToolTip&gt;, then that value is the tool-tip that will be used in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">このプロパティの値が型の場合&lt;xref:System.Windows.Controls.ToolTip&gt;、その値は、ツール ヒントで使用される、 <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>&lt;/xref:System.Windows.Controls.ToolTip&gt; 。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>If the value is of any other type, then that value will be used as the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> for a &lt;xref:System.Windows.Controls.ToolTip&gt; provided (constructed) by the system.</source>
          <target state="translated">値は、他の任意の型のかどうかは、その値として使用されます、<bpt id="p1">*</bpt>コンテンツ<ept id="p1">*</ept>の&lt;xref:System.Windows.Controls.ToolTip&gt;提供システムによって (作成).&lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Windows.Controls.ToolTipService&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Controls.ToolTipService&gt;。&lt;/xref:System.Windows.Controls.ToolTipService&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>The service class provides attached properties that can be used to further customize a &lt;xref:System.Windows.Controls.ToolTip&gt;.</source>
          <target state="translated">サービス クラスには、 &lt;xref:System.Windows.Controls.ToolTip&gt;。&lt;/xref:System.Windows.Controls.ToolTip&gt;をさらにカスタマイズするために使用する接続のプロパティが用意されています</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object ToolTip="toolTipContent"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_ToolTip"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     &lt;object.ToolTip&gt;       &lt;ToolTip .../&gt;     &lt;/object.ToolTip&gt;   &lt;/object&gt;   - or -   &lt;object&gt;     &lt;object.ToolTip&gt;       toolTipObjectContent     &lt;/object.ToolTip&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_ToolTip"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>toolTipContent<ept id="p4">*</ept>    A string that becomes the display text for the ToolTip.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object ToolTip="toolTipContent"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_ToolTip"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph2">```   &lt;object&gt;     &lt;object.ToolTip&gt;       &lt;ToolTip .../&gt;     &lt;/object.ToolTip&gt;   &lt;/object&gt;   - or -   &lt;object&gt;     &lt;object.ToolTip&gt;       toolTipObjectContent     &lt;/object.ToolTip&gt;   &lt;/object&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_ToolTip"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>toolTipContent<ept id="p4">*</ept>ツールヒントの表示テキストになる文字列。            </target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept>    Some object, provided in object element form, that should be used as the content for the &lt;xref:System.Windows.FrameworkElement&gt; .</source>
          <target state="translated"><bpt id="p1">*</bpt>方法<ept id="p1">*</ept>&lt;xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;コンテンツとして使用されるオブジェクト要素の形式、で提供される一部のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Typically this would be a &lt;xref:System.Windows.FrameworkElement&gt; or some other element that creates layout compositing for the ToolTip, eventually containing text content within the compositing.</source>
          <target state="translated">通常、&lt;xref:System.Windows.FrameworkElement&gt;または最終的にテキストを含む、ツールヒントのレイアウトの合成を複合内でコンテンツを作成するその他の要素&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>In this usage, the &lt;xref:System.Windows.Controls.ToolTip&gt; element is created implicitly from the parsed <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>, and the <bpt id="p1">*</bpt>toolTipObjectContent<ept id="p1">*</ept> content is set as its &lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">この使用率、&lt;xref:System.Windows.Controls.ToolTip&gt;要素が作成、解析されたから暗黙的に<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>、および<bpt id="p1">*</bpt>方法<ept id="p1">*</ept>としてコンテンツを設定その&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Controls.ToolTip&gt;。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>&lt;<ph id="ph1">`ToolTip`</ph> .../&gt;    See &lt;xref:System.Windows.Controls.ToolTip&gt;.</source>
          <target state="translated"><ph id="ph1">`ToolTip`</ph>.../&gt;    See &lt;xref:System.Windows.Controls.ToolTip&gt;.&lt;/xref:System.Windows.Controls.ToolTip&gt;</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ToolTip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ToolTipProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.FrameworkElement.ToolTipProperty&gt;</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The tooltip object.</source>
          <target state="translated">ツールヒントのオブジェクト。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>See Remarks below for details on why this parameter is not strongly typed.</source>
          <target state="translated">なぜこのパラメーターがない厳密に型指定の詳細については、下の「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Occurs just before any tooltip on the element is closed.</source>
          <target state="translated">要素のツールヒントが閉じられる直前に発生します。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Marking the ToolTipClosing event as handled does not cancel closing the tooltip.</source>
          <target state="translated">ToolTipClosing イベントを処理済みとしてマークすることがキャンセルしていない、ツールヒントを終了します。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</source>
          <target state="translated">ツールヒントが表示されたらは、UI でのユーザー操作への応答でのみ行われますツールヒントを終了します。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>This event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">このイベントをすることはできません、&lt;xref:System.Windows.EventTrigger&gt;スタイルでします&lt;/xref:System.Windows.EventTrigger&gt;。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;&lt;/xref:System.Windows.Controls.ToolTipEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.ToolTipClosingEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipClosing"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Occurs when any tooltip on the element is opened.</source>
          <target state="translated">要素のツールヒントが開かれたときに発生します。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>To prevent a tooltip from appearing in the UI, your handler for ToolTipOpening can mark the &lt;xref:System.Windows.Controls.ToolTipEventArgs&gt; event data handled.</source>
          <target state="translated">ツールヒントが UI に表示されないようにするに関するのハンドラーをマークできます、&lt;xref:System.Windows.Controls.ToolTipEventArgs&gt;処理されるイベント データ&lt;/xref:System.Windows.Controls.ToolTipEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Otherwise, the tooltip is displayed, using the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property as the tooltip content.</source>
          <target state="translated">それ以外の場合、ツールヒントが表示されるの値を使用して、&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;ツールヒントのコンテンツとプロパティ&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Another possible scenario is that you could write a handler that resets the value of the &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; property for the element that is the event source, just before the tooltip is displayed.</source>
          <target state="translated">もう&amp;1; つの可能なシナリオは、の値をリセットするハンドラーを記述することも、&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;ツールヒントが表示される直前にイベント ソースである要素のプロパティ&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>ToolTipOpening will not be raised if the value of &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; is <ph id="ph1">`null`</ph> or otherwise unset.</source>
          <target state="translated">関するは発生しません場合の値&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;は<ph id="ph1">`null`</ph>それ以外の場合、または設定解除します。&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Do not deliberately set &lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt; to <ph id="ph1">`null`</ph> while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</source>
          <target state="translated">意図的に設定しないでください&lt;xref:System.Windows.FrameworkElement.ToolTip%2A&gt;に<ph id="ph1">`null`</ph>tooltip が開いているか、; これは、ツールヒントを閉じるための効果がありませんを開き、UI に望ましくない visual アーティファクトを作成、代わりにします&lt;/xref:System.Windows.FrameworkElement.ToolTip%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The ToolTipOpening event cannot be an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">関するをすることはできません、&lt;xref:System.Windows.EventTrigger&gt;スタイルでします&lt;/xref:System.Windows.EventTrigger&gt;。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</source>
          <target state="translated">これは、このイベントの識別子フィールドが、サービスからのサービス レベルのイベントの追加と削除イベント メソッドを公開しない実装を再使用するためです。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|      -   Override &lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Controls.ToolTipEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.FrameworkElement.OnToolTipClosing%2A&gt;&lt;/xref:System.Windows.Controls.ToolTipEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.ToolTipOpeningEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.ToolTipOpening"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.ToolTip*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.ToolTip*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.ToolTip*&gt;。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Gets the collection of triggers established directly on this element, or in child elements.</source>
          <target state="translated">この要素に直接または子要素で設定されているトリガーのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This property can only be set in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; このプロパティのみ設定できます<ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>コレクション オブジェクトにアクセスして、追加などのさまざまなメソッドを使用して、表示、コレクション構文を使用します。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>The property to access the collection object itself is read-only, the collection itself is read-write.</source>
          <target state="translated">コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込みです。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</source>
          <target state="translated">プロパティは、ルート要素にのみ存在します。検索や他の場所で設定しようとしています。 には、スローされる例外が発生します。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>This property does not enable you to examine triggers that exist as part of styles in use on this element.</source>
          <target state="translated">このプロパティでは、この要素で使用されているスタイルの一部として存在するトリガーを確認できません。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>It only reports the collection of triggers that are literally added to the collection, either in markup or code.</source>
          <target state="translated">マークアップまたはコードで、このコレクションに追加されることはトリガーのコレクションを報告するだけです。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</source>
          <target state="translated">要素は、既存の既定では、このような要素を通常必要はありません (テンプレートからのインスタンス)。コントロールの複合スタイルの代わりに確立されるまでに由来するトリガーの一般的なであります。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>In terms of behavior (and trying to establish which effect came from which element's declared Triggers collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</source>
          <target state="translated">動作 (およびのどの要素には、トリガーのコレクションが宣言されている元のどちらの効果を確立しようとしています) の観点からは、この要素があります、トリガーを起動する条件とトリガーの影響の両方または、論理ツリーの子要素にあります。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>Note that if you use lifetime events such as &lt;xref:System.Windows.FrameworkElement.Loaded&gt; to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</source>
          <target state="translated">などの有効期間イベントを使用する場合は、&lt;xref:System.Windows.FrameworkElement.Loaded&gt;をこのコレクションを取得するには、子要素のトリガーできない可能性がありますまだ完全に読み込まれると、コレクションが実行時に真にするより小さくなります&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Note that the collection of triggers established on an element only supports &lt;xref:System.Windows.EventTrigger&gt;, not property triggers (&lt;xref:System.Windows.Trigger&gt;).</source>
          <target state="translated">要素に設定されているトリガーのコレクションのみをサポートする注&lt;xref:System.Windows.EventTrigger&gt;、ありませんプロパティ トリガー (&lt;xref:System.Windows.Trigger&gt;).&lt;/xref:System.Windows.Trigger&gt; &lt;/xref:System.Windows.EventTrigger&gt;</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the &lt;xref:System.Windows.FrameworkElement.Style%2A&gt; property, or indirectly through an implicit style reference.</source>
          <target state="translated">プロパティ トリガーを必要とする場合は、スタイルまたはテンプレート内でこれらを挿入し、し、そのスタイルまたはテンプレートの要素に代入するかする必要があります経由で直接、&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;プロパティ、または暗黙的なスタイル参照を通じて間接的にします&lt;/xref:System.Windows.FrameworkElement.Style%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept>    One or more defined &lt;xref:System.Windows.EventTrigger&gt; elements.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_Triggers"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.Triggers&gt;       oneOrMoreTriggers     &lt;/object.Triggers&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Triggers"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreTriggers<ept id="p3">*</ept>&amp;1; つ以上定義されている&lt;xref:System.Windows.EventTrigger&gt;要素&lt;/xref:System.Windows.EventTrigger&gt;。      </target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Each such trigger is expected to contain valid storyboard actions and references.</source>
          <target state="translated">このような個々 のトリガーは、有効なストーリー ボード操作および参照を格納すると想定されます。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Note that this collection can only be established on the root element of a page.</source>
          <target state="translated">このコレクションは、ページのルート要素でのみ設定できますに注意してください。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ストーリー ボードの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>A strongly typed collection of <bpt id="p1">&lt;xref href="System.Windows.Trigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">厳密に型指定されたコレクションの<bpt id="p1">&lt;xref href="System.Windows.Trigger"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Searches for a resource with the specified key, and returns that resource if found.</source>
          <target state="translated">指定されたキーにリソースを検索し、場合、そのリソースを返しますが見つかりました。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</source>
          <target state="translated">呼び出し元の要素で、リソースが見つからない場合は、親リソースのツリーが論理ツリーを上方向へ検索ツリーになる同じ方法で検索すると、リソースが要求されたキーによって実行時にします。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The method returns <ph id="ph1">`null`</ph> only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that TryFindResource is called.</source>
          <target state="translated">このメソッドを返します<ph id="ph1">`null`</ph>任意の場所、リソースのツリーでそのキーのリソースが存在しなかった時点で、ツリーの既存の条件ごとその TryFindResource が呼び出された場合のみです。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</source>
          <target state="translated">通常返されたリソース値に設定しようとしているプロパティの型を戻り値をキャストするとすぐにします。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt; method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;メソッドが指定されたキーを持つリソースが返されない場合、例外をスローする点を除いて、同様の動作が&lt;/xref:System.Windows.FrameworkElement.FindResource%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The key identifier of the resource to be found.</source>
          <target state="translated">検索するリソースのキー識別子。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>The found resource, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no resource with the provided <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p2">&lt;/code&gt;</ept> is found.</source>
          <target state="translated">見つかったリソースまたは<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合に指定されたリソースがありません<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">key</ph> <ept id="p2">&lt;/code&gt;</ept>が見つかった。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Occurs when the element is removed from within an element tree of loaded elements.</source>
          <target state="translated">要素が読み込まれた要素の要素ツリーから削除されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</source>
          <target state="translated">ルーティング イベントを直接ルートに従っていない、発生したが、同じ要素内でのみ処理されます。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an &lt;xref:System.Windows.EventTrigger&gt; in a style.</source>
          <target state="translated">ルーティング イベントがその他のルーティング イベントの動作をサポートして直接: アクセスできるハンドラーのコレクションをサポートし、として使用できる、&lt;xref:System.Windows.EventTrigger&gt;スタイルでします&lt;/xref:System.Windows.EventTrigger&gt;。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement.Loaded&gt; and Unloaded might both be raised on controls as a result of user-initiated system theme changes.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;アンロードが両方で発生するユーザーによるシステムのテーマを変更した結果のコントロールです。&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</source>
          <target state="translated">テーマの変更では、コントロール テンプレートと、コントロール全体をアンロードして再読み込みが含まれているビジュアル ツリーの無効化が発生します。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Therefore Unloaded cannot be assumed to occur only on navigation away from the page.</source>
          <target state="translated">したがってアンロードの場合は、そのページから移動したときにのみ発生すると見なされますことはできません。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Note that the Unloaded event is not raised after an application begins shutting down.</source>
          <target state="translated">アプリケーションがシャット ダウン後にアンロード イベントは発生しませんに注意してください。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Application shutdown occurs when the condition defined by the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property occurs.</source>
          <target state="translated">によって、条件が定義されているときに、アプリケーションのシャット ダウンが発生、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;プロパティが発生します&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>If you place cleanup code within a handler for the Unloaded event, such as for a &lt;xref:System.Windows.Window&gt; or a &lt;xref:System.Windows.Controls.UserControl&gt;, it may not be called as expected.</source>
          <target state="translated">ように、アンロード イベントのハンドラー内でクリーンアップ コードを配置した場合、&lt;xref:System.Windows.Window&gt;または&lt;xref:System.Windows.Controls.UserControl&gt;が呼び出すことはできませんどおり&lt;/xref:System.Windows.Controls.UserControl&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Unloaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.UnloadedEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Unloaded"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.UnloadedEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.RoutedEventHandler&gt;|&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.FrameworkElement.UnloadedEvent&gt;</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Unloaded"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement.Unloaded"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Simplifies access to the &lt;xref:System.Windows.NameScope&gt; de-registration method.</source>
          <target state="translated">アクセスを簡素化、&lt;xref:System.Windows.NameScope&gt;メソッドの登録を解除します&lt;/xref:System.Windows.NameScope&gt;。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>You only need to un-register names if you intend to re-register another element with that same name.</source>
          <target state="translated">だけで済みます名の登録解除に同じ名前の別の要素を再登録する場合。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Name of the name-object pair to remove from the current scope.</source>
          <target state="translated">現在のスコープから削除する名前とオブジェクトのペアの名前です。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Reapplies the default style to the current <bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在の既定のスタイルを再適用<bpt id="p1">&lt;xref href="System.Windows.FrameworkElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</source>
          <target state="translated">取得またはレイアウトの丸め適用するかをこの要素のサイズと位置レイアウト時を示す値を設定します。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>When the UseLayoutRounding property for an element is <ph id="ph1">`true`</ph>, all non-integral pixel values that are calculated during the &lt;xref:System.Windows.UIElement.Measure%2A&gt; and &lt;xref:System.Windows.UIElement.Arrange%2A&gt; passes are rounded to whole pixel values.</source>
          <target state="translated">要素を受けるプロパティが<ph id="ph1">`true`</ph>、中に計算されるすべての整数以外のピクセル値、&lt;xref:System.Windows.UIElement.Measure%2A&gt;と&lt;xref:System.Windows.UIElement.Arrange%2A&gt;パスは全体のピクセル値に丸められます&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>This property is inherited by child elements.</source>
          <target state="translated">このプロパティは、子要素によって継承されます。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You should set UseLayoutRounding to <ph id="ph2">`true`</ph> on the root element.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を受ける可能性を設定する必要があります<ph id="ph2">`true`</ph>ルート要素にします。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</source>
          <target state="translated">レイアウト システムを親座標です。 子座標を追加します。そのため、親座標がピクセルの境界にない場合は、子座標もいないピクセルの境界にします。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>If UseLayoutRounding cannot be set at the root, set &lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt; on the child to obtain the effect that you want.</source>
          <target state="translated">受けるは、ルートに設定することはできません、設定&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;を希望する効果を取得する子にします&lt;/xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</source>
          <target state="translated">半透明のエッジ デバイス ピクセルの途中で、エッジになった場合に、アンチ エイリアス処理によって生成されるを排除するピクセルの境界にオブジェクトを描画します。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</source>
          <target state="translated">次の図は、デバイスのピクセルの中央にある単一のピクセル幅の行の出力を示します。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The line on the left does not use layout rounding and is anti-aliased.</source>
          <target state="translated">左側の線はレイアウトの丸めが使用されないため、アンチ エイリアス処理します。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The line on the right uses layout rounding.</source>
          <target state="translated">右側の線は、レイアウトの丸めを使用します。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Anti&amp;#45;aliased line compared to single pixel line.<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>Anti-aliased line compared to single pixel line.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>単一のピクセル線と比較したアンチ エイリアス線。<ept id="p1">]</ept><bpt id="p2">(~/add/media/pixelsnaplinecompare.PNG "</bpt>単一のピクセル線と比較したアンチ エイリアス線。<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>When you use layout rounding and &lt;xref:System.Windows.GridUnitType&gt; sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</source>
          <target state="translated">レイアウトの丸めを使用する場合と&lt;xref:System.Windows.GridUnitType&gt;サイズ変更、レイアウト システムを作成小さな違いサブピクセル レンダリングを避けるために、列または行の計測結果にします&lt;/xref:System.Windows.GridUnitType&gt;。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>For example, if a grid has a total width of 100 with 3 columns each of size &lt;xref:System.Windows.GridUnitType&gt;, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</source>
          <target state="translated">たとえば、グリッドがある 3 列のサイズの 100 の合計幅&lt;xref:System.Windows.GridUnitType&gt;、3 つの列を作成する代わりに 33.3 の幅が同じ、レイアウト システムは、幅が 33 と 34 の幅を持つ 2 つの列を作成します&lt;/xref:System.Windows.GridUnitType&gt;。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;.NET 4.6 に変更を加えましたレイアウトの丸めを枠で囲まれたコントロールのクリッピングの発生を削減します。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</source>
          <target state="translated">既定では、この機能は、ターゲット フレームワークが .NET Framework 4.6 以降である場合に有効にします。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: <ph id="ph1">`&lt;runtime&gt;``&lt;AppContextSwitchOverrides      value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;``&lt;/runtime&gt;`</ph> The setting only takes effect when the application is running on the .NET Framework 4.6.</source>
          <target state="translated">App.config ファイルに次の設定を追加することで、新しい動作を以前のバージョンの framework を対象とするアプリケーションで選択できます:<ph id="ph1">`&lt;runtime&gt;``&lt;AppContextSwitchOverrides      value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/&gt;``&lt;/runtime&gt;`</ph>設定は、のみ、アプリケーションが .NET Framework 4.6 で実行されているときにします。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if layout rounding is applied; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>レイアウトの丸めが適用される場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.UseLayoutRounding*&gt;。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</source>
          <target state="translated">取得または、panel またはアイテム コントロールのような親要素内で構成されるときに、この要素に適用される垂直方向の配置特性を設定します。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to &lt;xref:System.Windows.VerticalAlignment&gt;.</source>
          <target state="translated">とき&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;と&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;要素でプロパティが明示的に設定は、これらの測定値がレイアウトで優先に行い&lt;xref:System.Windows.VerticalAlignment&gt;.&lt;/xref:System.Windows.VerticalAlignment&gt;にこのプロパティの設定の通常の効果を取り消す&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>VerticalAlignment is the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated">VerticalAlignment は、<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</source>
          <target state="translated">この特定の依存関係プロパティでは、派生した要素のクラス、特にコントロールで設定が異なります見かけ上の「既定」値がよくあります。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</source>
          <target state="translated">これは、2 つの方法のいずれかで一般的に発生します特定の派生クラスがその既定値を設定するためのさまざまなメタデータ、依存関係プロパティが再登録されている。またはが適用されている既定のスタイルが異なるその依存関係プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>For example, the apparent "default" of VerticalAlignment for a &lt;xref:System.Windows.Controls.ComboBoxItem&gt; control will be &lt;xref:System.Windows.VerticalAlignment&gt;, even though &lt;xref:System.Windows.Controls.ComboBoxItem&gt; inherits VerticalAlignment direct from &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">たとえば、明らかな「既定」の VerticalAlignment の&lt;xref:System.Windows.Controls.ComboBoxItem&gt;コントロールがある&lt;xref:System.Windows.VerticalAlignment&gt;場合でも、 &lt;xref:System.Windows.Controls.ComboBoxItem&gt; &lt;xref:System.Windows.FrameworkElement&gt;.&lt;/xref:System.Windows.FrameworkElement&gt;から VerticalAlignment 直接の継承&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;&lt;/xref:System.Windows.VerticalAlignment&gt;&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>This is because that value was reset within the default style of &lt;xref:System.Windows.Controls.ComboBoxItem&gt;, within the style's control template.</source>
          <target state="translated">これは、既定のスタイル内でその値がリセットされたため&lt;xref:System.Windows.Controls.ComboBoxItem&gt;、スタイルのコントロール テンプレート内で&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Canvas&gt; does not use VerticalAlignment when composing layout, because &lt;xref:System.Windows.Controls.Canvas&gt; is based on absolute positioning.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Canvas&gt;使用しません VerticalAlignment レイアウトを作成するときに&lt;xref:System.Windows.Controls.Canvas&gt;絶対位置に基づきます&lt;/xref:System.Windows.Controls.Canvas&gt;。&lt;/xref:System.Windows.Controls.Canvas&gt;</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Controls.ComboBoxItem&gt; or any derived classes, &lt;xref:System.Windows.Controls.ComboBoxItem&gt; redefines the default value of this property to be &lt;xref:System.Windows.VerticalAlignment&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.ComboBoxItem&gt;または&lt;xref:System.Windows.Controls.ComboBoxItem&gt;&lt;xref:System.Windows.VerticalAlignment&gt;。&lt;/xref:System.Windows.VerticalAlignment&gt;にするには、このプロパティの既定値を再定義&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;のすべての派生クラス&lt;/xref:System.Windows.Controls.ComboBoxItem&gt;によって継承された場合</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt; &lt;/xref:System.Windows.FrameworkElement.VerticalAlignmentProperty&gt;</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>A vertical alignment setting.</source>
          <target state="translated">垂直方向の配置設定です。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.VerticalAlignment"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.VerticalAlignment*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.VerticalAlignment*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.VerticalAlignment*&gt;。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Gets the number of visual child elements within this element.</source>
          <target state="translated">この要素内でビジュアル子要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation of VisualChildrenCount always returns either zero or one.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;VisualChildrenCount の実装は常に&amp;0; または&amp;1; 個のいずれかを返します&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>Classes that maintain a visual child collection that might exceed one must override both this property and &lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;.</source>
          <target state="translated">クラスで&amp;1; つを超える可能性がある子ビジュアル コレクションを保持するには、このプロパティと&lt;xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.GetVisualChild%2A&gt;の両方を上書きする必要があります。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;, &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;).</source>
          <target state="translated">このプロパティは、現在の子コレクションのレイアウトのオーバーライドを実装するための上限を決定する使用一般的に (&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;、 &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;).&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The number of visual child elements for this element.</source>
          <target state="translated">この要素のビジュアル子要素の数。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Gets or sets the width of the element.</source>
          <target state="translated">取得または要素の幅を設定します。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>This is one of three properties on &lt;xref:System.Windows.FrameworkElement&gt; that specify width information.</source>
          <target state="translated">これには&amp;3; つのプロパティのいずれかの&lt;xref:System.Windows.FrameworkElement&gt;幅情報を指定する&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>The other two are &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; and &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.</source>
          <target state="translated">他の&amp;2; つは&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;および&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>If there is a conflict between these values, the order of application for actual width determination is first &lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt; must be honored, then &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;, and finally if each of these are within bounds, Width.</source>
          <target state="translated">実際の幅を決定するためのアプリケーションの順序は最初、これらの値の間で競合がある場合&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;、受け入れられ、する必要があります&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;、し、最後に、境界の幅内では、これらの各場合&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;&lt;/xref:System.Windows.FrameworkElement.MinWidth%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>The return value of this property is always the same as any value that was set to it.</source>
          <target state="translated">このプロパティの戻り値は、それに設定された任意の値と同じでは常にします。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>In contrast, the value of the &lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt; may vary.</source>
          <target state="translated">これに対しての値、&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;異なる場合があります&lt;/xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>The layout may have rejected the suggested size for some reason.</source>
          <target state="translated">レイアウトが、何らかの理由により推奨されるサイズを拒否している可能性がありますがします。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Also, the layout system itself works asynchronously relative to the property system set of Width and may not have processed that particular sizing property change yet.</source>
          <target state="translated">また、レイアウト システム自体は、システムのプロパティ セットの幅に対して相対的に非同期的に動作し、処理されない可能性がある特定のプロパティの変更をまだサイズ変更します。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>In addition to acceptable &lt;xref:System.Double&gt; values, this property can also be &lt;xref:System.Double.NaN?displayProperty=fullName&gt;.</source>
          <target state="translated">さらに許容される&lt;xref:System.Double&gt;値、このプロパティには、 &lt;xref:System.Double.NaN?displayProperty=fullName&gt;。&lt;/xref:System.Double.NaN?displayProperty=fullName&gt;ことができます。&lt;/xref:System.Double&gt;</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>This is how you specify auto sizing behavior.</source>
          <target state="translated">これは、自動サイズ変更動作を指定する方法です。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> 「自動」(大文字と小文字) を自動サイズ変更動作を有効にする文字列値を設定します。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Auto sizing behavior implies that the element will fill the width available to it.</source>
          <target state="translated">自動サイズ変更動作は、要素が利用できる幅いっぱいになることを意味します。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</source>
          <target state="translated">ただし、特定のコントロールがサイズ変更動作を具体的には、再度有効にしない限り、自動を無効にする既定のスタイルでの既定値を頻繁に指定します。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>In addition to the validation check, there is a nondeterministic upper value bound for Width that is enforced by the layout system (this is a very large number, larger than &lt;xref:System.Single.MaxValue?displayProperty=fullName&gt; but smaller than &lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).</source>
          <target state="translated">レイアウト システムによって適用される幅にバインドされている、非決定的上限の値があるだけでなく、検証チェック (非常に大きな数より大きいです&lt;xref:System.Single.MaxValue?displayProperty=fullName&gt;がよりも小さい&lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;).&lt;/xref:System.Double.MaxValue?displayProperty=fullName&gt; &lt;/xref:System.Single.MaxValue?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>If you exceed this bound, the element will not render, and no exception is thrown.</source>
          <target state="translated">この上限値を超えた場合は、要素は表示されず、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Do not set Width to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</source>
          <target state="translated">幅は表示可能な最大サイズよりもずっと大きな値に設定しないでください、またはこの非決定的の上限を超える可能性があります。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object Width="double"/&gt;   - or –   &lt;object Width ="qualifiedDouble"/&gt;   - or -   &lt;object Width ="Auto"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_Width"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>double<ept id="p3">*</ept>    &lt;xref:System.Double&gt;       String representation of a &lt;xref:System.Double&gt; value equal to or greater than 0.0.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object Width="double"/&gt;   - or –   &lt;object Width ="qualifiedDouble"/&gt;   - or -   &lt;object Width ="Auto"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_Width"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>二重<ept id="p3">*</ept>&lt;xref:System.Double&gt;の文字列表現を&lt;xref:System.Double&gt;0.0 以上の値&lt;/xref:System.Double&gt;&lt;/xref:System.Double&gt;。          </target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>This value is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
          <target state="translated">この値として解釈されます、<ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]</ph>測定します。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Strings need not explicitly include decimal points.</source>
          <target state="translated">明示的に、文字列では、小数点を含める必要がありますされません。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>For instance a value of <ph id="ph1">`1`</ph> is acceptable.</source>
          <target state="translated">値のインスタンス<ph id="ph1">`1`</ph>は許容されます。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept>    A <bpt id="p2">*</bpt>double<ept id="p2">*</ept> value as described above, followed by one of the following unit declaration strings: <ph id="ph1">`px`</ph>, <ph id="ph2">`in`</ph>, <ph id="ph3">`cm`</ph>, <ph id="ph4">`pt`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>qualifiedDouble<ept id="p1">*</ept> A<bpt id="p2">*</bpt>二重<ept id="p2">*</ept>値、上記と続けて次の単位の宣言文字列のいずれかの: <ph id="ph1">`px`</ph>、 <ph id="ph2">`in`</ph>、 <ph id="ph3">`cm`</ph>、<ph id="ph4">`pt`</ph>です。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>       <ph id="ph3">`in`</ph> is inches; 1in==96px       <ph id="ph4">`cm`</ph> is centimeters; 1cm==(96/2.54) px       <ph id="ph5">`pt`</ph> is points; 1pt==(96/72) px       <ph id="ph6">`Auto`</ph>    Enables autosizing behavior.</source>
          <target state="translated"><ph id="ph1">`px`</ph>(既定値) は<ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph><ph id="ph3">`in`</ph>インチ; に 1 96px を = =<ph id="ph4">`cm`</ph>センチメートル; は、1cm==(96/2.54) px<ph id="ph5">`pt`</ph>ポイント; 1pt==(96/72) px<ph id="ph6">`Auto`</ph>自動動作を有効にします。       </target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.FrameworkElement.WidthProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Width"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.FrameworkElement.WidthProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;|&lt;/xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt; &lt;/xref:System.Windows.FrameworkElement.WidthProperty&gt;</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>The width of the element, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">要素の幅の<ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]</ph>します。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">既定値は<ph id="ph1">&amp;lt;</ph>xref:System.Double?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>This value must be equal to or greater than 0.0.</source>
          <target state="translated">この値は、0.0 以上にする必要があります。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>See Remarks for upper bound information.</source>
          <target state="translated">上限については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.FrameworkElement.Width*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.FrameworkElement.Width*&gt;依存関係プロパティ&lt;/xref:System.Windows.FrameworkElement.Width*&gt;。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>