<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28b1e81979ebc849327a7bcfeaf3313aabfc00d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.HostExecutionContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c89f039547f44265d7ffd8217f003ceb25aa5dfd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad0dfa8499f5dc01731c0f78d674dd7bbbb60fd5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates and propagates the host execution context across threads.</source>
          <target state="translated">カプセル化し、スレッド間でホストの実行コンテキストを伝達します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The HostExecutionContext is part of a larger &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">大きな&lt;xref:System.Threading.ExecutionContext&gt;。&lt;/xref:System.Threading.ExecutionContext&gt;の一部である、HostExecutionContext</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The host context migrates, or flows, with the execution context.</source>
          <target state="translated">ホストのコンテキストでは、移行、または実行コンテキストをフローします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default constructor creates a host execution context whose &lt;xref:System.Threading.HostExecutionContext.State%2A&gt; property value is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定のコンス トラクターを作成、ホストの実行コンテキストが&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;プロパティの値が<ph id="ph1">`null`</ph>&lt;/xref:System.Threading.HostExecutionContext.State%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified state.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定された状態を使用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.HostExecutionContext&gt; is included with the &lt;xref:System.Threading.ExecutionContext&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext&gt; &lt;xref:System.Threading.ExecutionContext&gt;。&lt;/xref:System.Threading.ExecutionContext&gt;付属している&lt;/xref:System.Threading.HostExecutionContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`state`</ph> represents a safe handle containing the <ph id="ph2">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated"><ph id="ph1">`state`</ph>を表すセーフ ハンドルを表す、<ph id="ph2">`IUnknown`</ph>ホストへのポインター。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">ホストの実行コンテキストの状態を表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current host execution context.</source>
          <target state="translated">現在のホストの実行コンテキストのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The copy can be used as the parameter to a &lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt; method call.</source>
          <target state="translated">パラメーターとして使用できます、コピー、&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;メソッドの呼び出し&lt;/xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing the host context for the current thread.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在のスレッドのホスト コンテキストを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">現在のインスタンスによって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Threading.HostExecutionContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph> &lt;xref:System.Threading.HostExecutionContext&gt;.&lt;/xref:System.Threading.HostExecutionContext&gt;の使用が終了したときに</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the &lt;xref:System.Threading.HostExecutionContext&gt; in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>メソッドによって、&lt;xref:System.Threading.HostExecutionContext&gt;使用不可の状態&lt;/xref:System.Threading.HostExecutionContext&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the &lt;xref:System.Threading.HostExecutionContext&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Threading.HostExecutionContext&gt; was occupying.</source>
          <target state="translated">呼び出した後に<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、&lt;xref:System.Threading.HostExecutionContext&gt;ガベージ コレクターがメモリを再利用できるようにする、&lt;xref:System.Threading.HostExecutionContext&gt;占有されていた&lt;/xref:System.Threading.HostExecutionContext&gt;&lt;/xref:System.Threading.HostExecutionContext&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call <ph id="ph2">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Threading.HostExecutionContext&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 常に呼び出し<ph id="ph2">`Dispose`</ph>&lt;xref:System.Threading.HostExecutionContext&gt;&lt;/xref:System.Threading.HostExecutionContext&gt;の最後の参照を解放する前に。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Threading.HostExecutionContext&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、&lt;xref:System.Threading.HostExecutionContext&gt;オブジェクトの<ph id="ph1">`Finalize`</ph>メソッド&lt;/xref:System.Threading.HostExecutionContext&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, releases the unmanaged resources used by the &lt;xref:System.Threading.WaitHandle&gt;, and optionally releases the managed resources.</source>
          <target state="translated">派生クラスでオーバーライドされるで使用されるアンマネージ リソースを解放、 &lt;xref:System.Threading.WaitHandle&gt;、マネージ リソースも解放します&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method is called by the &lt;xref:System.Threading.HostExecutionContext.Dispose&gt; method overload and the finalizer.</source>
          <target state="translated">このメソッドは、&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;メソッドのオーバー ロードとファイナライザー&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt; 。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Threading.HostExecutionContext.Dispose&gt; invokes this protected method with the <ph id="ph1">`disposing`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;保護されているこのメソッドを呼び出して、<ph id="ph1">`disposing`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。&lt;/xref:System.Threading.HostExecutionContext.Dispose&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The finalizer invokes this method with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">ファイナライザーでは、このメソッドを呼び出します<ph id="ph1">`disposing`</ph>'éý'<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Threading.HostExecutionContext&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.Threading.HostExecutionContext&gt;参照。&lt;/xref:System.Threading.HostExecutionContext&gt; 。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method can be called multiple times by other objects.</source>
          <target state="translated">このメソッドを他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</source>
          <target state="translated">このメソッドをオーバーライドする場合は、以前の呼び出しで既に破棄されているオブジェクトを参照しないように注意します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets the state of the host execution context.</source>
          <target state="translated">取得またはホストの実行コンテキストの状態を設定します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The State property value represents a safe handle containing the <ph id="ph1">`IUnknown`</ph> pointer for the host.</source>
          <target state="translated">状態プロパティの値を表すセーフ ハンドルを含む、<ph id="ph1">`IUnknown`</ph>ホストへのポインター。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An object representing the host execution context state.</source>
          <target state="translated">ホストの実行コンテキストの状態を表すオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>