<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3babf752cda1959b9fe1dc4066dab91e524618cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.WeakEventManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45b51d56744bdeb27308fc24e1c01c03b015f762</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea2a89fc5ac37f0d3a6ebf9c4b7068aa0c1bba2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">イベント マネージャーで使用される基本クラスを提供、<bpt id="p1">*</bpt>弱いイベント パターン<ept id="p1">*</ept>です。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">管理者は、追加し、パターンを使用してもイベント (またはコールバック) のリスナーを削除します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">通常、イベント ソースにオブジェクトの有効期間とは別のイベント リスナーがある場合は、弱いイベント パターンを使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">ガベージ コレクションされるソース オブジェクトが解決しない場合でも、リスナーのハンドラーを、WeakEventManager の中心となるイベントのディスパッチ機能を使用できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">これに対し、通常のイベント フックアップを使用して、<ph id="ph1">`+=`</ph>演算子では、リスナーへの参照を保持するために切断された可能性のあるソースがします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">これは、受信側がガベージ コレクション、迅速にすることを防ぎます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">1 つ一般的なソースとリスナーの有効期間の関係を使用する必要がありますの弱いイベント パターンは、データのバインドからの更新イベントの処理です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">弱いイベント パターンは、コールバックと通常のイベントにも使用できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">派生クラスのコンス トラクターによって初期化子として使用される場合は、基本クラスの値を初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">各リスナーに管理対象のイベントを提供します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the DeliverEvent method from within the event handlers that are added or removed by the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; and &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; implementations of subclasses.</source>
          <target state="translated">追加または削除されるイベント ハンドラー内から DeliverEvent メソッドを呼び出して、&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;と&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;サブクラスの実装&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt;&lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you call the &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; method in your <ph id="ph1">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">呼び出す場合は、&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;メソッドで、<ph id="ph1">`AddListener`</ph>イベントを受け取るリスナーのリストは、クラスの実装は、基になるコレクションで保持します&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph>インターフェイスまたはクラスのコントラクトの一部ではありません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; and adds weak event pattern listeners for the event.)       &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;を呼び出すし、イベントの弱いイベント パターン リスナーを追加するためのマネージャー クラスのメソッドに推奨される名前)。      &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;リスナーを&amp;1; つのリストに追加します&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.</source>
          <target state="translated">場合は、マネージャーの実装では、イベントごとのリスナーの&amp;1; つ以上のリストを保持、または使用しないで DeliverEvent &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;。&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.</source>
          <target state="translated">代わりに、実装する必要があります作成独自&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;インスタンス、<ph id="ph1">`AddListener`</ph>適切なリストでは、リスナーを追加する必要があり、イベントの配信先の適切なリスナー リスト&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.&lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;を呼び出すことによって&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object on which the event is being handled.</source>
          <target state="translated">イベントを処理するオブジェクト。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data for the event to deliver.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;を配信するイベントのイベント データを格納している&lt;/xref:System.EventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is used for the provided type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は指定された型の使用を実装します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt; implementations call this method using their passed <ph id="ph1">`managerType`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;実装は、渡されたを使用してこのメソッドを呼び出す<ph id="ph1">`managerType`</ph>です。&lt;/xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Windows.WeakEventManager&gt; is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">返された&lt;xref:System.Windows.WeakEventManager&gt;を調べ、どのイベントを受信しましたがどのプライベート クラス ハンドラーを呼び出すための差別化要因として使用されます&lt;/xref:System.Windows.WeakEventManager&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type to obtain the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">取得する型、 <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>用です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The matching <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">一致する<bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">取得または指定したソースに格納されているデータを設定します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">派生クラスには、データとこのインデクサーに格納する型を選択できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically this is implemented as a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;, which is a list of weak references to listeners.</source>
          <target state="translated">通常これとして実装される、 &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;、リスナーへの弱い参照の一覧します&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You would only have to change this type if the &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; type cannot contain your required information.</source>
          <target state="translated">この型を変更する場合にのみ必要があります、&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;型は、必要な情報を含めることはできません&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If so, you will have to override the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">そのため、オーバーライドする必要が場合、&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;メソッド基になる型のすべてのクリーンアップが正常に実行できるようにします&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">要求されたソースの&amp;0; から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">このソースのマネージャーによって格納されるデータ。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">イベントのリスナーを格納する新しいオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">イベントのリスナーを格納する新しいオブジェクト。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">指定したソースのイベント ハンドラーとして指定されたデリゲートを追加します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">ハンドラーのデリゲートがサブスクライブしているソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The delegate that handles the event that is raised by <ph id="ph1">`source`</ph>.</source>
          <target state="translated">によって発生するイベントを処理するデリゲート<ph id="ph1">`source`</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">管理対象のイベントの指定されたソースを指定したリスナーを追加します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">マネージャー クラス内には、このメソッドを呼び出す<ph id="ph1">`AddListener`</ph>メソッド&lt;xref:System.Windows.WeakEventManager&gt;実装&lt;/xref:System.Windows.WeakEventManager&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>推奨される名前は、弱いイベント パターンにリスナーを追加するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>2 つのパラメーターを受け取る必要があります。<ph id="ph2">`source`</ph>リスナーが接続されている場所と<ph id="ph3">`listener`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>実装では、現在のマネージャーの ProtectedAddListener メソッドを呼び出すし、同じ&amp;2; つのパラメーターを渡します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the list of listeners was previously empty, ProtectedAddListener calls the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; override through polymorphism.</source>
          <target state="translated">ProtectedAddListener を呼び出すリスナーのリストが空だった場合、&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;メソッドに固有の仕様を呼び出すを内部的には、&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;ポリモーフィズムをオーバーライドします&lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;&lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ProtectedAddListener adds listeners to a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">ProtectedAddListener では、リスナーを追加すると、単一の内部&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;あたり<ph id="ph1">`source`</ph>&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener.</source>
          <target state="translated">マネージャーの実装にイベント ソースの組み合わせごとのリスナーの&amp;1; つ以上のリストが保持している場合は、ProtectedAddListener を使用しないでください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; event instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">代わりに、実装する必要があります作成独自&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;インスタンス、<ph id="ph1">`AddListener`</ph>リスナーを該当する一覧に追加する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;イベントの代わりに、&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;メソッド&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;&lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The source to attach listeners to.</source>
          <target state="translated">リスナーを関連付けるソース。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">リッスンしているクラス (実装する必要があります<bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">指定したソースから、以前に追加されたハンドラーを削除します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The source to remove the handler from.</source>
          <target state="translated">ハンドラーを削除するソースです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to remove from <ph id="ph1">`source`</ph>.</source>
          <target state="translated">削除するデリゲート<ph id="ph1">`source`</ph>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">指定されたソースから、以前に追加リスナーを削除します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">マネージャー クラス内には、このメソッドを呼び出す<ph id="ph1">`RemoveListener`</ph>メソッド&lt;xref:System.Windows.WeakEventManager&gt;実装&lt;/xref:System.Windows.WeakEventManager&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>推奨される名前は、弱いイベント パターンにリスナーを削除するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>2 つのパラメーターを受け取る必要があります。<ph id="ph2">`source`</ph>リスナーを削除すると、場所、および<ph id="ph3">`listener`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>実装では、現在のマネージャーの ProtectedRemoveListener メソッドを呼び出すし、同じ&amp;2; つのパラメーターを渡します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; override through polymorphism.</source>
          <target state="translated">ProtectedRemoveListener を呼び出す ProtectedRemoveListener への呼び出しは、リスト内の最後のリスナーを削除した場合、&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;メソッド、固有の仕様を呼び出すを内部的には、&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;ポリモーフィズムをオーバーライドします&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt;&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>ProtectedRemoveListener removes listeners from a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">ProtectedRemoveListener が&amp;1; つの内部からのリスナーを削除&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;あたり<ph id="ph1">`source`</ph>&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener.</source>
          <target state="translated">マネージャーの実装にイベント ソースの組み合わせごとのリスナーの&amp;1; つ以上のリストが保持している場合は、ProtectedRemoveListener を使用しないでください。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; method instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">代わりに、実装する必要があります作成独自&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;インスタンス、 <ph id="ph1">`RemoveListener`</ph> 、該当する一覧からのリスナーを削除する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;メソッドの代わりに、&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;メソッド&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;&lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The source to remove listeners from.</source>
          <target state="translated">リスナーを削除するソースです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">リッスンしているクラス (実装する必要があります<bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">指定されたソースのデータの一覧から非アクティブなリスナー エントリを削除します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed from the list.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>いくつかのエントリが実際には、一覧から削除された場合。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Purge method has a default implementation that will remove all entries when data is a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;.</source>
          <target state="translated">Purge メソッドはデータが&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;ときにすべてのエントリを削除する既定の実装</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The source for events being listened to.</source>
          <target state="translated">リッスンされているイベントのソース。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The data to check.</source>
          <target state="translated">チェックするデータ。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This object is expected to be a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; implementation.</source>
          <target state="translated">このオブジェクトができると予想される、&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;実装&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to stop listening to <ph id="ph1">`source`</ph>, and completely remove all entries from <ph id="ph2">`data`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>待機を停止する<ph id="ph1">`source`</ph>からすべてのエントリを完全に削除<ph id="ph2">`data`</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>いくつかのエントリが実際に削除された場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Establishes a read-lock on the underlying data table, and returns an &lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">基になるデータ テーブルに読み取りロックを確立し、 &lt;xref:System.IDisposable&gt;。&lt;/xref:System.IDisposable&gt;を返します</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In derived classes, queries to the table contained in &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; should always occur within a <ph id="ph1">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">派生クラスでクエリに含まれるテーブル&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;内で常に実行する必要があります、<ph id="ph1">`using (ReadLock) { ... }`</ph>書き込みロック内では、既にクエリを除くの句&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">これらのクエリは、クラスがより高度なサポートされている場合に必要な可能性があります<ph id="ph1">`AddListener`</ph>を超える複数のデータを必要とする実装、<ph id="ph2">`source`</ph>と<ph id="ph3">`listener`</ph>を使用して、&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;余分な情報を格納するコレクション&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">テーブルのデータ メンバーのロックを確立しで破棄適切に使用できるオブジェクト、 <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を構築します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">指定されたソースのすべてのリスナーを削除します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The source to remove listener information for.</source>
          <target state="translated">情報をリスナーを削除するソース。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">要求の優先度の低いスレッドで、基になるリスナー リスト内の未使用のエントリの消去を実行することです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Calling the ScheduleCleanup method is similar to calling the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method on the current manager's list, at lower thread priority, with the <ph id="ph1">`purgeAll`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">呼び出しに似ていますが、ScheduleCleanup メソッドを呼び出すと、&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;現在マネージャーの一覧で、スレッドの優先順位の低い、メソッドで、<ph id="ph1">`purgeAll`</ph>パラメーターに設定<ph id="ph2">`false`</ph>&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">指定したマネージャーの種類の現在のマネージャーを設定します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Call the SetCurrentManager method to initialize a manager, if that is required by a call to your <ph id="ph1">`CurrentManager`</ph> property on a &lt;xref:System.Windows.WeakEventManager&gt; implementation.</source>
          <target state="translated">呼び出しに必要な場合は、マネージャーは、初期化 SetCurrentManager メソッドを呼び出して、<ph id="ph1">`CurrentManager`</ph>プロパティを&lt;xref:System.Windows.WeakEventManager&gt;実装&lt;/xref:System.Windows.WeakEventManager&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The type to set the new event manager.</source>
          <target state="translated">新しいイベント マネージャーを設定する型。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The new event manager.</source>
          <target state="translated">新しいイベント マネージャー。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After the StartListening method is first called, the manager should be in the state of calling &lt;xref:System.Windows.WeakEventManager.DeliverEvent<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.WeakEventManager.DeliverEventToList<ept id="p1">*</ept>&gt; whenever the relevant event from the provided source is handled.</source>
          <target state="translated">マネージャーが、呼び出し元の状態にする必要があります StartListening メソッドが最初に呼び出された後&lt;&gt; <bpt id="p1">*</bpt>&gt; または&lt;&gt; <ept id="p1">*</ept>&gt; 指定されたソースから関連するイベントを処理するたびにします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The source to begin listening on.</source>
          <target state="translated">リッスンを開始するソース。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">派生クラスでオーバーライドされると、指定されたソース管理されているイベントのリッスンを停止します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The source to stop listening on.</source>
          <target state="translated">リッスンを停止するソース。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Establishes a write-lock on the underlying data table, and returns an&lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">基になるデータ テーブルに対して書き込みロックを確立し、&lt;xref:System.IDisposable&gt;。&lt;/xref:System.IDisposable&gt;を返します</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">派生クラスでは行った変更はすべて、基になるデータ テーブル内で発生する必要があります、<ph id="ph1">`using (WriteLock) { ... }`</ph>句。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">これらの変更は、クラスがより高度なサポートされている場合に必要な可能性があります<ph id="ph1">`AddListener`</ph>を超える複数のデータを必要とする実装、<ph id="ph2">`source`</ph>と<ph id="ph3">`listener`</ph>を使用して、&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;余分な情報を格納するコレクション&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">テーブルのデータ メンバーのロックを確立しで破棄適切に使用できるオブジェクト、 <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を構築します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>