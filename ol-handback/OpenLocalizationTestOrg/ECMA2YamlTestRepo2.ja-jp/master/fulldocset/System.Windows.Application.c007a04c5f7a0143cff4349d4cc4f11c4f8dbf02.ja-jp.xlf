<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97b8f0e925aa738f8cee4da0329367baf7c6407e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Application.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaa1a724eded114c5c0d84abac223d153f3bdc9f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b75537628da94f6b326c9ea337d189d986f59a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated">カプセル化、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application is a class that encapsulates <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> application-specific functionality, including the following:      -   <bpt id="p1">**</bpt>Application Lifetime<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.Activated&gt;, &lt;xref:System.Windows.Application.Current%2A&gt;, &lt;xref:System.Windows.Application.Deactivated&gt;, &lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;, &lt;xref:System.Windows.Application.Exit&gt;, &lt;xref:System.Windows.Application.Run%2A&gt;, &lt;xref:System.Windows.Application.SessionEnding&gt;, &lt;xref:System.Windows.Application.Shutdown%2A&gt;, &lt;xref:System.Windows.Application.ShutdownMode%2A&gt;, &lt;xref:System.Windows.Application.Startup&gt;.</source>
          <target state="translated">アプリケーションがカプセル化するクラス<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>、次を含む、アプリケーション固有の機能:-<bpt id="p1">**</bpt>アプリケーションの有効期間<ept id="p1">**</ept> &lt;xref:System.Windows.Application.Activated&gt; &lt;xref:System.Windows.Application.Current%2A&gt; &lt;xref:System.Windows.Application.Deactivated&gt; &lt;xref:System.Windows.Application.DispatcherUnhandledException&gt; &lt;xref:System.Windows.Application.Exit&gt; &lt;xref:System.Windows.Application.Run%2A&gt; &lt;xref:System.Windows.Application.SessionEnding&gt; &lt;xref:System.Windows.Application.Shutdown%2A&gt; &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; &lt;xref:System.Windows.Application.Startup&gt;。&lt;/xref:System.Windows.Application.Startup&gt; 、&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt; 、&lt;/xref:System.Windows.Application.Shutdown%2A&gt; 、&lt;/xref:System.Windows.Application.SessionEnding&gt; 、&lt;/xref:System.Windows.Application.Run%2A&gt; 、&lt;/xref:System.Windows.Application.Exit&gt; 、&lt;/xref:System.Windows.Application.DispatcherUnhandledException&gt; 、&lt;/xref:System.Windows.Application.Deactivated&gt; 、&lt;/xref:System.Windows.Application.Current%2A&gt; 、&lt;/xref:System.Windows.Application.Activated&gt; 。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Application-Scope Window, Property, and Resource Management<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.FindResource%2A&gt;, &lt;xref:System.Windows.Application.GetContentStream%2A&gt;, &lt;xref:System.Windows.Application.GetResourceStream%2A&gt;, &lt;xref:System.Windows.Application.LoadComponent%2A&gt;, &lt;xref:System.Windows.Application.MainWindow%2A&gt;, &lt;xref:System.Windows.Application.Properties%2A&gt;, &lt;xref:System.Windows.Application.Resources%2A&gt;, &lt;xref:System.Windows.Application.StartupUri%2A&gt;, &lt;xref:System.Windows.Application.Windows%2A&gt;.</source>
          <target state="translated">-<bpt id="p1">**</bpt>アプリケーション スコープ ウィンドウ、プロパティ、およびリソース管理<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.FindResource%2A&gt; &lt;xref:System.Windows.Application.GetContentStream%2A&gt; &lt;xref:System.Windows.Application.GetResourceStream%2A&gt; &lt;xref:System.Windows.Application.LoadComponent%2A&gt; &lt;xref:System.Windows.Application.MainWindow%2A&gt; &lt;xref:System.Windows.Application.Properties%2A&gt; &lt;xref:System.Windows.Application.Resources%2A&gt; &lt;xref:System.Windows.Application.StartupUri%2A&gt; &lt;xref:System.Windows.Application.Windows%2A&gt;.&lt;/xref:System.Windows.Application.Windows%2A&gt; &lt;/xref:System.Windows.Application.StartupUri%2A&gt; &lt;/xref:System.Windows.Application.Resources%2A&gt; &lt;/xref:System.Windows.Application.Properties%2A&gt; &lt;/xref:System.Windows.Application.MainWindow%2A&gt; &lt;/xref:System.Windows.Application.LoadComponent%2A&gt; &lt;/xref:System.Windows.Application.GetResourceStream%2A&gt; &lt;/xref:System.Windows.Application.GetContentStream%2A&gt; 、&lt;/xref:System.Windows.Application.FindResource%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Command-Line Parameter and Exit Code Processing<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.Startup?displayProperty=fullName&gt;, &lt;xref:System.Windows.Application.Exit?displayProperty=fullName&gt;, &lt;xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">-<bpt id="p1">**</bpt>コマンド ライン パラメーターおよび終了コード処理<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.Startup?displayProperty=fullName&gt; &lt;xref:System.Windows.Application.Exit?displayProperty=fullName&gt; &lt;xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.Application.Exit?displayProperty=fullName&gt; 、&lt;/xref:System.Windows.Application.Startup?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   <bpt id="p1">**</bpt>Navigation<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.FragmentNavigation&gt;, &lt;xref:System.Windows.Application.LoadCompleted&gt;, &lt;xref:System.Windows.Application.Navigated&gt;, &lt;xref:System.Windows.Application.Navigating&gt;, &lt;xref:System.Windows.Application.NavigationProgress&gt;, &lt;xref:System.Windows.Application.NavigationStopped&gt;, &lt;xref:System.Windows.Application.NavigationFailed&gt;, &lt;xref:System.Windows.Application.SetCookie%2A&gt;, &lt;xref:System.Windows.Application.GetCookie%2A&gt;.</source>
          <target state="translated">-   <bpt id="p1">**</bpt>Navigation<ept id="p1">**</ept>: &lt;xref:System.Windows.Application.FragmentNavigation&gt;, &lt;xref:System.Windows.Application.LoadCompleted&gt;, &lt;xref:System.Windows.Application.Navigated&gt;, &lt;xref:System.Windows.Application.Navigating&gt;, &lt;xref:System.Windows.Application.NavigationProgress&gt;, &lt;xref:System.Windows.Application.NavigationStopped&gt;, &lt;xref:System.Windows.Application.NavigationFailed&gt;, &lt;xref:System.Windows.Application.SetCookie%2A&gt;, &lt;xref:System.Windows.Application.GetCookie%2A&gt;.&lt;/xref:System.Windows.Application.GetCookie%2A&gt;&lt;/xref:System.Windows.Application.SetCookie%2A&gt;&lt;/xref:System.Windows.Application.NavigationFailed&gt;&lt;/xref:System.Windows.Application.NavigationStopped&gt;&lt;/xref:System.Windows.Application.NavigationProgress&gt;&lt;/xref:System.Windows.Application.Navigating&gt;&lt;/xref:System.Windows.Application.Navigated&gt;&lt;/xref:System.Windows.Application.LoadCompleted&gt;&lt;/xref:System.Windows.Application.FragmentNavigation&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Application implements the singleton pattern to provide shared access to its window, property, and resource scope services.</source>
          <target state="translated">アプリケーションでは、そのウィンドウ、プロパティ、およびリソースのスコープのサービスへの共有アクセスを提供するシングルトン パターンを実装します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Consequently, only one instance of the Application class can be created per &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">その結果、 &lt;xref:System.AppDomain&gt;。&lt;/xref:System.AppDomain&gt;あたりアプリケーション クラスのインスタンスを&amp;1; つだけを作成できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can implement an Application using markup, markup and code-behind, or code.</source>
          <target state="translated">マークアップ、マークアップと分離コード、またはコードを使用してアプリケーションを実装することができます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If Application is implemented with markup, whether markup or markup and code-behind, the markup file must be configured as an <ph id="ph1">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph> <ph id="ph2">`ApplicationDefinition`</ph> item.</source>
          <target state="translated">アプリケーション マークアップまたはマークアップと分離コードでは、マークアップ ファイルとして構成されているかどうか、マークアップで実装される、 <ph id="ph1">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph> <ph id="ph2">`ApplicationDefinition`</ph>項目。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  A standalone application does not require an Application object; it is possible to implement a custom <ph id="ph2">`static`</ph> entry point method (<ph id="ph3">`Main`</ph>) that opens a window without creating an instance of Application.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; スタンドアロン アプリケーションには、Application オブジェクトは不要です。 カスタムを実装することは<ph id="ph2">`static`</ph>エントリ ポイント メソッド (<ph id="ph3">`Main`</ph>) アプリケーションのインスタンスを作成せず、ウィンドウが開きます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph> require an Application object.</source>
          <target state="translated">ただし、<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーション オブジェクトが必要です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only one instance of the &lt;xref:System.Windows.Application&gt; class can be created per &lt;xref:System.AppDomain&gt;, to ensure shared access to a single set of application-scope window, property, and resource data.</source>
          <target state="translated">インスタンスを&amp;1; つだけ、&lt;xref:System.Windows.Application&gt;あたりクラスを作成することができます&lt;xref:System.AppDomain&gt;アプリケーション スコープ ウィンドウ、プロパティ、およびリソース データの単一のセットを共有のアクセスを確実にします&lt;/xref:System.AppDomain&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Consequently, the default constructor of the &lt;xref:System.Windows.Application&gt; class detects whether the instance being initialized is the first instance in an &lt;xref:System.AppDomain&gt;; if it is not, an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">したがって、既定のコンス トラクターの&lt;xref:System.Windows.Application&gt;クラスを検出したかどうか、インスタンスを初期化中に最初のインスタンス、&lt;xref:System.AppDomain&gt;以外の場合、それ以外は、&lt;xref:System.InvalidOperationException&gt;がスローされます&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.AppDomain&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Application&gt; object for the current &lt;xref:System.AppDomain&gt; is exposed from the static &lt;xref:System.Windows.Application.Current%2A&gt; property.</source>
          <target state="translated">&lt;xref:System.Windows.Application&gt;現在のオブジェクト&lt;xref:System.AppDomain&gt;静的から公開される&lt;xref:System.Windows.Application.Current%2A&gt;プロパティ&lt;/xref:System.Windows.Application.Current%2A&gt;&lt;/xref:System.AppDomain&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>More than one instance of the <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is created per <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">2 つ以上のインスタンス、 <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ごとに、クラスが作成された<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Occurs when an application becomes the foreground application.</source>
          <target state="translated">アプリケーションがフォア グラウンド アプリケーションになったときに発生します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows is activated (becomes the foreground application) when one of the windows is activated for the first time since the application was launched, or when one of the windows is activated while the application is inactive: Specifically, activation occurs when:      -   An application opens its first window.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>を&amp;1; つ以上の開いているウィンドウを持つアプリケーションをアクティブ化 (フォア グラウンド アプリケーションになります)、windows のいずれかが有効な場合、最初にアプリケーションが起動されるため、または、windows のいずれかが有効な場合、アプリケーションがアクティブな間。 具体的には、アクティブ化を行うときに:-アプリケーションが最初のウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-   A user switches to the application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">-ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、アプリケーションに切り替えます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-   A user clicks the taskbar button for one of the windows in an application.</source>
          <target state="translated">は、ユーザーは、アプリケーションで windows のいずれかのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Applications that need to detect when they activate can handle the Activated event.</source>
          <target state="translated">アクティブ化するときを検出するために必要とするアプリケーションでは、アクティブ化イベントを処理できます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">アプリケーションが最初に有効化した後非アクティブ化されその有効期間中に何度も再アクティブ化する可能性があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can handle both Activated and &lt;xref:System.Windows.Application.Deactivated&gt; events to determine which activation state it's in.</source>
          <target state="translated">アクティブ化と&lt;xref:System.Windows.Application.Deactivated&gt;イベントがアクティブ化の状態のインチ&lt;/xref:System.Windows.Application.Deactivated&gt;処理できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once an application becomes active, Activated will not be raised again until the application is deactivated, irrespective of how many windows within an application are activated while the application is active.</source>
          <target state="translated">アプリケーションがアクティブになると、アクティブ化は発生しません。 もう一度、アプリケーションがアクティブなときに、アプリケーション内でウィンドウの数がアクティブ化に関係なく、アプリケーションが非アクティブ化までです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Activated is not raised for <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">アクティブ化は発生しません<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the current <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクト<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Application&gt; is a per-&lt;xref:System.AppDomain&gt; singleton type that implements the static Current property to provide shared access to the &lt;xref:System.Windows.Application&gt; instance for the current &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Application&gt;あたり-&lt;xref:System.AppDomain&gt; &lt;xref:System.Windows.Application&gt; &lt;xref:System.AppDomain&gt;.&lt;/xref:System.AppDomain&gt;の現在のインスタンス&lt;/xref:System.Windows.Application&gt;への共有アクセスを提供する現在の静的プロパティを実装するシングルトン型&lt;/xref:System.AppDomain&gt;&lt;/xref:System.Windows.Application&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This design guarantees that state managed by &lt;xref:System.Windows.Application&gt;, including shared resources and state, is available from a single, shared location.</source>
          <target state="translated">この設計のため管理されている状態にある&lt;xref:System.Windows.Application&gt;、共有リソースや状態は、単一の共有の場所から入手できます&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This property is thread safe and is available from any thread.</source>
          <target state="translated">このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the current <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクト<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Occurs when an application stops being the foreground application.</source>
          <target state="translated">アプリケーションでは、フォア グラウンド アプリケーションが停止したときに発生します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows deactivates (stops being the foreground application) when a user does the following:      -   Switches to another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>を&amp;1; つ以上の開いているウィンドウを持つアプリケーションは、(前面のアプリケーションを停止) を非アクティブ化、ユーザーが次:-ALT + TAB キーを使用して、またはタスク マネージャーを使用して、別のアプリケーションに切り替えます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-   Clicks the taskbar button for a window in another application.</source>
          <target state="translated">-別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Applications that need to detect deactivation can handle the Deactivated event.</source>
          <target state="translated">非アクティブ化を検出するために必要とするアプリケーションでは、非アクティブ化イベントを処理できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">アプリケーションが最初に有効化した後非アクティブ化されその有効期間中に何度も再アクティブ化する可能性があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If an application's behavior or state depends on its activation state, it can handle both Deactivated and &lt;xref:System.Windows.Application.Activated&gt; events to determine which state it's in.</source>
          <target state="translated">両方の非アクティブ化を処理できるアプリケーションの動作または状態のアクティブ化状態に依存する場合と&lt;xref:System.Windows.Application.Activated&gt;イベントがどの状態を確認インチ&lt;/xref:System.Windows.Application.Activated&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Deactivated is not raised for <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">非アクティブになるは発生しません<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is thrown by an application but not handled.</source>
          <target state="translated">例外がアプリケーションによってスローされたが、処理されないときに発生します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> catches unhandled exceptions, notifies users of the exception from a dialog box (from which they can report the exception), and automatically shuts down an application.</source>
          <target state="translated">既定では、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>未処理の例外をキャッチ、(元の報告できる例外) ダイアログ ボックスで、例外のユーザーに通知およびアプリケーションを自動的にシャット ダウンします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, if an application needs to perform custom unhandled exception processing from a centralized location, you should handle DispatcherUnhandledException.</source>
          <target state="translated">ただし、アプリケーションは、カスタムのハンドルされない例外が処理を一元的な場所からを実行する必要があります、DispatcherUnhandledException を処理する必要があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>DispatcherUnhandledException is raised by an &lt;xref:System.Windows.Application&gt; for each exception that is unhandled by code running on the main UI thread.</source>
          <target state="translated">DispatcherUnhandledException がによって発生した、&lt;xref:System.Windows.Application&gt;メイン UI スレッドで実行されているコードによってハンドルされない例外ごとにします&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If an exception is not handled on either a background <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> thread (a thread with its own &lt;xref:System.Windows.Threading.Dispatcher&gt;) or a background worker thread (a thread without a &lt;xref:System.Windows.Threading.Dispatcher&gt;), the exception is not forwarded to the main <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">例外が処理されない場合に、バック グラウンド<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>スレッド (独自のスレッド&lt;xref:System.Windows.Threading.Dispatcher&gt;) またはバック グラウンド ワーカー スレッド (せず、スレッド、 &lt;xref:System.Windows.Threading.Dispatcher&gt;)、例外が、主に転送されません<ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>スレッド&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Consequently, DispatcherUnhandledException is not raised.</source>
          <target state="translated">その結果、DispatcherUnhandledException は発生しません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In these circumstances, you will need to write code to do the following:      1.</source>
          <target state="translated">このような場合に、次のコードを記述する必要があります: 1。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Handle exceptions on the background thread.</source>
          <target state="translated">バック グラウンド スレッドで例外を処理します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Dispatch those exceptions to the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">これらの例外、メインのディスパッチ<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rethrow them on the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread without handling them to allow DispatcherUnhandledException to be raised.</source>
          <target state="translated">メインでそれらを再スロー<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>を発生させる DispatcherUnhandledException を許可するための処理なくスレッドです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Threading Model<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> overview.</source>
          <target state="translated">詳細については、次を参照してください。、<bpt id="p1">[</bpt>スレッド モデル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>の概要です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The DispatcherUnhandledException event handler is passed a &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt; argument that contains contextual information regarding the exception, including:      -   The exception (&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;).</source>
          <target state="translated">DispatcherUnhandledException イベント ハンドラーに渡されます、 &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;、例外に関するコンテキスト情報を含む引数を含む:-例外 (&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;) です&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Threading.Dispatcher&gt; from which it originated (&lt;xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt;).</source>
          <target state="translated">-&lt;xref:System.Windows.Threading.Dispatcher&gt;出所から (&lt;xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt;).&lt;/xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can use this information to determine whether an exception is recoverable or not.</source>
          <target state="translated">この情報を使用するには、例外が回復可能かどうかどうかを判別します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A recoverable exception might be a &lt;xref:System.IO.FileNotFoundException&gt;, for example, while an unrecoverable exception might be a &lt;xref:System.StackOverflowException&gt;, for example.</source>
          <target state="translated">回復可能な例外があります、&lt;xref:System.IO.FileNotFoundException&gt;など、回復不能な例外があります、 &lt;xref:System.StackOverflowException&gt;、たとえば&lt;/xref:System.StackOverflowException&gt;&lt;/xref:System.IO.FileNotFoundException&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you process an unhandled exception from DispatcherUnhandledException, and you don't want <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> to continue processing it, you need to set the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt; property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">ときに、DispatcherUnhandledException から未処理の例外を処理して、したくない<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>処理を続行するには、設定する必要があります、&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;プロパティを<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Unlike the other events that &lt;xref:System.Windows.Application&gt; raises, DispatcherUnhandledException does not have a matching protected virtual implementation (OnDispatcherUnhandledException).</source>
          <target state="translated">他のイベントとは異なりを&lt;xref:System.Windows.Application&gt;が発生し、DispatcherUnhandledException は一致するプロテクト仮想実装 (OnDispatcherUnhandledException) がありません&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Consequently, classes that derive from &lt;xref:System.Windows.Application&gt; must always register an event handler with DispatcherUnhandledException to process unhandled exceptions.</source>
          <target state="translated">そのため、クラスから派生した&lt;xref:System.Windows.Application&gt;DispatcherUnhandledException 未処理の例外を処理すると、イベント ハンドラーを登録常にする必要があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Occurs just before an application shuts down, and cannot be canceled.</source>
          <target state="translated">アプリケーションがシャット ダウンし、キャンセルできません直前に発生します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An application can shut down for either of the following reasons:      -   The &lt;xref:System.Windows.Application.Shutdown%2A&gt; method of the &lt;xref:System.Windows.Application&gt; object is called, either explicitly or as determined by the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property.</source>
          <target state="translated">アプリケーションは、次の理由のいずれかのシャット ダウンできます: -&lt;xref:System.Windows.Application.Shutdown%2A&gt;のメソッド、&lt;xref:System.Windows.Application&gt;オブジェクトが呼び出されると、によって明示的にまたは決定される、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;プロパティ&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;&lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-   The user ends the session by logging off or shutting down.</source>
          <target state="translated">-ユーザーは、ログオフまたはシャット ダウンによって、セッションを終了します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can detect when application shutdown occurs by handling the Exit event, and perform any additional processing as required.</source>
          <target state="translated">終了イベントを処理することによってアプリケーションのシャット ダウンが発生したときを検出し、必要に応じて、追加の処理を実行できます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can also handle Exit to inspect or change the application exit code when you don't need to call &lt;xref:System.Windows.Application.Shutdown%2A&gt; explicitly.</source>
          <target state="translated">検査または呼び出す必要がある場合に、アプリケーションの終了コードを変更する場合は終了を処理することも&lt;xref:System.Windows.Application.Shutdown%2A&gt;明示的にします&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The exit code is exposed from the &lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt; property of the &lt;xref:System.Windows.ExitEventArgs&gt; argument that's passed to the Exit event handler.</source>
          <target state="translated">終了コードの公開元である、&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;のプロパティ、&lt;xref:System.Windows.ExitEventArgs&gt;終了イベント ハンドラーに渡される引数&lt;/xref:System.Windows.ExitEventArgs&gt;&lt;/xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When the application stops running, the exit code is passed to the operating system for subsequent processing.</source>
          <target state="translated">アプリケーションの実行が停止、終了コードは後続の処理のオペレーティング システムに渡されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If your application handles the &lt;xref:System.Windows.Application.SessionEnding&gt; event and subsequently cancels it, Exit is not raised and the application continues running in accordance with the shutdown mode.</source>
          <target state="translated">アプリケーションが処理する場合、&lt;xref:System.Windows.Application.SessionEnding&gt;イベントし、後では発生しませんが、終了をキャンセルし、アプリケーションによって配布されたシャット ダウン モードで実行されている&lt;/xref:System.Windows.Application.SessionEnding&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The exit code can be set from an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>, although the value is ignored.</source>
          <target state="translated">終了コードから設定できる、<ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>値は無視されますが、します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, Exit is raised in the following circumstances:      -   An <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph> is navigated away from.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>、終了が次の状況で発生します: -<ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph>から移動します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-   In <ph id="ph1">[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]</ph>, when the tab that is hosting the <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph> is closed.</source>
          <target state="translated">- <ph id="ph1">[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]</ph>、ときに、タブをホストしている、<ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph>が閉じられます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-   When the browser is closed.</source>
          <target state="translated">場合、ブラウザーは閉じられます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In all cases, the value of the &lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt; property is ignored.</source>
          <target state="translated">値の場合、&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;プロパティは無視されます&lt;/xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Searches for a <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> resource, such as a <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Windows.Media.Brush"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, with the specified key, and throws an exception if the requested resource is not found (see <bpt id="p3">[</bpt>XAML Resources<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated">検索、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>リソースなど、 <bpt id="p1">&lt;xref href="System.Windows.Style"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>または<bpt id="p2">&lt;xref href="System.Windows.Media.Brush"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>では、指定したキーとがスローされます、要求されたリソースが見つからない場合に例外 (を参照してください<bpt id="p3">[</bpt>XAML リソース<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>FindResource will first look in application-scope resources for the specified resource.</source>
          <target state="translated">FindResource は、アプリケーション スコープの指定されたリソースのリソースでは、まずします。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Application-scope resources are managed by &lt;xref:System.Windows.Application&gt;, and are exposed from the &lt;xref:System.Windows.Application.Resources%2A&gt; property.</source>
          <target state="translated">アプリケーション スコープのリソースで管理されて&lt;xref:System.Windows.Application&gt;から公開されると、&lt;xref:System.Windows.Application.Resources%2A&gt;プロパティ&lt;/xref:System.Windows.Application.Resources%2A&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the specified resource is not found in the set of application-scope resources, FindResource then next searches the system resources.</source>
          <target state="translated">アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合 FindResource し、次を検索、システム リソースです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
          <target state="translated">システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>These are exposed from the &lt;xref:System.Windows.SystemColors&gt;, &lt;xref:System.Windows.SystemFonts&gt;, and &lt;xref:System.Windows.SystemParameters&gt; types, respectively, as static properties.</source>
          <target state="translated">これらは、 &lt;xref:System.Windows.SystemColors&gt;、 &lt;xref:System.Windows.SystemFonts&gt;、および&lt;xref:System.Windows.SystemParameters&gt;型をそれぞれ、静的なプロパティです&lt;/xref:System.Windows.SystemParameters&gt;&lt;/xref:System.Windows.SystemFonts&gt;&lt;/xref:System.Windows.SystemColors&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To use FindResource to acquire them, these types also expose resource key properties that are designed to be passed to FindResource; for example, &lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;.</source>
          <target state="translated">FindResource を使用すると、それらを取得して、これらの型も公開 FindResource; に渡されるように設計されているリソースのキー プロパティたとえば、 &lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;。&lt;/xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because FindResource returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
          <target state="translated">FindResource オブジェクトを返すために、リソースが見つかった場合に、適切な型に返される値をキャストする必要があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; が見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you do not want to handle exceptions that result from calling FindResource, call &lt;xref:System.Windows.Application.TryFindResource%2A&gt; instead; &lt;xref:System.Windows.Application.TryFindResource%2A&gt; returns a <ph id="ph1">`null`</ph> reference when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated">呼び出し元 FindResource に起因する例外を処理しない場合は、&lt;xref:System.Windows.Application.TryFindResource%2A&gt;を呼び出してください。&lt;xref:System.Windows.Application.TryFindResource%2A&gt;を返します、<ph id="ph1">`null`</ph>要求されたリソースが見つからないし、例外をスローしないときに参照します&lt;/xref:System.Windows.Application.TryFindResource%2A&gt;&lt;/xref:System.Windows.Application.TryFindResource%2A&gt;。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This method is thread safe and can be called from any thread.</source>
          <target state="translated">このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The name of the resource to find.</source>
          <target state="translated">検索するリソースの名前。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The requested resource object.</source>
          <target state="translated">要求されたリソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the requested resource is not found, a <bpt id="p1">&lt;xref href="System.Windows.ResourceReferenceKeyNotFoundException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is thrown.</source>
          <target state="translated">要求されたリソースが見つからない場合、 <bpt id="p1">&lt;xref href="System.Windows.ResourceReferenceKeyNotFoundException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>がスローされます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The resource cannot be found.</source>
          <target state="translated">リソースが見つかりません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs when a navigator in the application begins navigation to a content fragment, Navigation occurs immediately if the desired fragment is in the current content, or after the source <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph> content has been loaded if the desired fragment is in different content.</source>
          <target state="translated">アプリケーションのナビゲーターは、コンテンツ フラグメントへのナビゲーションを開始すると発生ナビゲーションがすぐに発生した理由は、目的のフラグメントは、現在のコンテンツまたはソースの後に場合<ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>目的のフラグメントが別のコンテンツがある場合、コンテンツが読み込まれました。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a content data file that is located at the specified &lt;xref:System.Uri&gt; (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated">指定した位置にあるコンテンツのデータ ファイルのリソース ストリームを返す&lt;xref:System.Uri&gt;(を参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The relative &lt;xref:System.Uri&gt; that maps to a loose resource.</source>
          <target state="translated">相対&lt;xref:System.Uri&gt;厳密でないリソースにマップされる&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains a content data file that is located at the specified &lt;xref:System.Uri&gt;.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.Uri&gt;.&lt;/xref:System.Uri&gt;に配置されているコンテンツのデータ ファイルを格納しています。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If a loose resource is not found, null is returned.</source>
          <target state="translated">厳密でないリソースが見つからない場合は、null が返されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetContentStream is null.</source>
          <target state="translated">&lt;xref:System.Uri&gt;に渡される GetContentStream が null です&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetContentStream is an absolute &lt;xref:System.Uri&gt;.</source>
          <target state="translated">&lt;xref:System.Uri&gt;は絶対&lt;xref:System.Uri&gt;.&lt;/xref:System.Uri&gt; GetContentStream に渡されるが&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Retrieves a cookie for the location specified by a &lt;xref:System.Uri&gt;.</source>
          <target state="translated">&lt;xref:System.Uri&gt;。&lt;/xref:System.Uri&gt;で指定された場所の cookie を取得します</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>GetCookie retrieves a cookie for the specified &lt;xref:System.Uri&gt;.</source>
          <target state="translated">GetCookie 指定&lt;xref:System.Uri&gt;。&lt;/xref:System.Uri&gt;の cookie を取得します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If the cookie can't be retrieved, a &lt;xref:System.ComponentModel.Win32Exception&gt; is thrown.</source>
          <target state="translated">Cookie を取得できない場合、&lt;xref:System.ComponentModel.Win32Exception&gt;がスローされます&lt;/xref:System.ComponentModel.Win32Exception&gt;。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You need to write the code to parse the cookie string into a list of name/value pairs.</source>
          <target state="translated">名前/値ペアの一覧に、cookie の文字列を解析するコードを記述する必要があります。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クッキーの概要については<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>ナビゲーション概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that specifies the location for which a cookie was created.</source>
          <target state="translated">&lt;xref:System.Uri&gt;Cookie の作成対象の場所を指定します&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; value, if the cookie exists; otherwise, a <bpt id="p1">&lt;xref href="System.ComponentModel.Win32Exception"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is thrown.</source>
          <target state="translated">A &lt;xref:System.String&gt;cookie が存在する場合は値それ以外の場合、 <bpt id="p1">&lt;xref href="System.ComponentModel.Win32Exception"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>がスローされます。&lt;/xref:System.String&gt; 。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <bpt id="p1">&lt;xref uid="langword_csharp_InternetGetCookie" name="InternetGetCookie" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function (called by GetCookie) if a problem occurs when attempting to retrieve the specified cookie.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>によってエラーが発生しました、 <bpt id="p1">&lt;xref uid="langword_csharp_InternetGetCookie" name="InternetGetCookie" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (GetCookie によって呼び出される) 関数、指定された cookie を取得しようとするときに問題が発生した場合。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a site-of-origin data file that is located at the specified &lt;xref:System.Uri&gt; (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated">指定した位置にあるサイトの発信元のデータ ファイルのリソース ストリームを返す&lt;xref:System.Uri&gt;(を参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that maps to a loose resource at the site of origin.</source>
          <target state="translated">&lt;xref:System.Uri&gt;元のサイトでの厳密でないリソースにマップされる&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains a resource stream for a site-of-origin data file that is located at the specified &lt;xref:System.Uri&gt;.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>サイト-元のデータ ファイルの指定した&lt;xref:System.Uri&gt;.&lt;/xref:System.Uri&gt;に配置されているリソース ストリームを格納しています。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the loose resource is not found, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is returned.</source>
          <target state="translated">厳密でないリソースが見つからない場合<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が返されます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetRemoteStream is null.</source>
          <target state="translated">&lt;xref:System.Uri&gt;に渡される GetRemoteStream が null です&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetRemoteStream is either not relative, or is absolute but not in the <ph id="ph1">`pack://siteoforigin:,,,/`</ph> form.</source>
          <target state="translated">&lt;xref:System.Uri&gt;か GetRemoteStream に渡されるない相対は絶対値ではなく、または、<ph id="ph1">`pack://siteoforigin:,,,/`</ph>フォーム&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns a resource stream for a resource data file that is located at the specified &lt;xref:System.Uri&gt; (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated">指定した位置にあるリソースのデータ ファイルのリソース ストリームを返す&lt;xref:System.Uri&gt;(を参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that maps to an embedded resource.</source>
          <target state="translated">&lt;xref:System.Uri&gt;埋め込みリソースにマップされる&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains a resource stream for resource data file that is located at the specified &lt;xref:System.Uri&gt;.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Resources.StreamResourceInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.Uri&gt;.&lt;/xref:System.Uri&gt;に配置されているリソースのデータ ファイルのリソース ストリームを格納しています。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetResourceStream is null.</source>
          <target state="translated">&lt;xref:System.Uri&gt;に渡される GetResourceStream が null です&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetResourceStream is either not relative, or is absolute but not in the <ph id="ph1">`pack://application:,,,/`</ph> form.</source>
          <target state="translated">&lt;xref:System.Uri&gt;か GetResourceStream に渡されるない相対は絶対値ではなく、または、<ph id="ph1">`pack://application:,,,/`</ph>フォーム&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that is passed to GetResourceStream cannot be found.</source>
          <target state="translated">&lt;xref:System.Uri&gt;に渡される GetResourceStream が見つかりません&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Occurs when content that was navigated to by a navigator in the application has been loaded, parsed, and has begun rendering.</source>
          <target state="translated">移動先アプリケーション内のナビゲーターによってコンテンツが読み込まれ、解析されて、レンダリングが開始されると発生します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Listen for events on the navigated content such as the &lt;xref:System.Windows.FrameworkElement.Loaded&gt;event on &lt;xref:System.Windows.Controls.Page&gt; before you access properties of the navigated content.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; などの移動、コンテンツに対するイベントのリッスン、&lt;xref:System.Windows.FrameworkElement.Loaded&gt;でイベントを&lt;xref:System.Windows.Controls.Page&gt;移動のコンテンツのプロパティにアクセスする前にします&lt;/xref:System.Windows.Controls.Page&gt;&lt;/xref:System.Windows.FrameworkElement.Loaded&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]</ph>, and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> file.</source>
          <target state="translated">読み込み、 <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> 、指定した位置にあるファイル<ph id="ph2">[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]</ph>のルート要素で指定されているオブジェクトのインスタンスに変換し、<ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>ファイルです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You must explicitly convert the return value to the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> file.</source>
          <target state="translated">ルート要素と同じ型を戻り値を明示的に変換する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、<ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph>ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method is not thread-safe.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Uri&gt; that maps to a relative <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">A&lt;xref:System.Uri&gt;相対パスにマップされる<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An instance of the root element specified by the XAML file loaded.</source>
          <target state="translated">XAML ファイルによって指定されるルート要素のインスタンスが読み込まれます。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph>null です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The file is not a <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph> file.</source>
          <target state="translated">ファイルがない、<ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]</ph> and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> file.</source>
          <target state="translated">読み込み、 <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> 、指定した位置にあるファイル<ph id="ph2">[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]</ph>のルート要素で指定されているオブジェクトのインスタンスに変換し、<ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、<ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]</ph>ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This method is not thread-safe.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An object of the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">ルート要素と同じ型のオブジェクト、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Uri&gt; that maps to a relative <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">A&lt;xref:System.Uri&gt;相対パスにマップされる<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;resourceLocator&lt;/code&gt;</ph>null です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceLocator</ph><ept id="p1">&lt;/code&gt;</ept> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;component&lt;/code&gt;</ph> is of a type that does not match the root element of the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;component&lt;/code&gt;</ph>型のルート要素と一致しませんが、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Gets or sets the main window of the application.</source>
          <target state="translated">取得またはアプリケーションのメイン ウィンドウを設定します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>MainWindow is automatically set with a reference to the first &lt;xref:System.Windows.Window&gt; object to be instantiated in the &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">最初の&lt;xref:System.Windows.Window&gt;&lt;xref:System.AppDomain&gt;。&lt;/xref:System.AppDomain&gt;でインスタンス化するオブジェクト&lt;/xref:System.Windows.Window&gt;への参照を MainWindow が自動的に設定します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can specify a different main window by setting MainWindow assigning another &lt;xref:System.Windows.Application.Windows%2A&gt; object to the MainWindow property.</source>
          <target state="translated">メイン ウィンドウの別の割り当てを設定して、別のメイン ウィンドウを指定できます&lt;xref:System.Windows.Application.Windows%2A&gt;MainWindow プロパティ オブジェクト&lt;/xref:System.Windows.Application.Windows%2A&gt;。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property of the &lt;xref:System.Windows.Application&gt; object is set to &lt;xref:System.Windows.ShutdownMode&gt;, closing the main window causes the application to shut down.</source>
          <target state="translated">場合、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;のプロパティ、&lt;xref:System.Windows.Application&gt;にオブジェクトが設定されている&lt;xref:System.Windows.ShutdownMode&gt;、メイン ウィンドウを閉じると、アプリケーションをシャット ダウンする&lt;/xref:System.Windows.ShutdownMode&gt;&lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It is possible to set the MainWindow property from <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>, if an application's main window is not the window that is produced by setting the &lt;xref:System.Windows.Application.StartupUri%2A&gt; property in <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>.</source>
          <target state="translated">MainWindow プロパティを設定することは<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>、アプリケーションのメイン ウィンドウは、設定によって生成されるウィンドウではない場合、&lt;xref:System.Windows.Application.StartupUri%2A&gt;プロパティ<ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>&lt;/xref:System.Windows.Application.StartupUri%2A&gt;。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The two limitations of the <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph> approach are:      -   You can specify either a <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>-only &lt;xref:System.Windows.Window&gt; or a <ph id="ph3">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>-only &lt;xref:System.Windows.Navigation.NavigationWindow&gt; as the main window.</source>
          <target state="translated">2 つの制限、<ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>アプローチは、: どちらかを指定することができます、 <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>-のみ&lt;xref:System.Windows.Window&gt;または<ph id="ph3">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>-のみ&lt;xref:System.Windows.Navigation.NavigationWindow&gt;メイン ウィンドウとして&lt;/xref:System.Windows.Navigation.NavigationWindow&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>-   You must set the &lt;xref:System.Windows.UIElement.Visibility%2A&gt; property of the window you specify, otherwise it won't be shown.</source>
          <target state="translated">に設定する必要があります、&lt;xref:System.Windows.UIElement.Visibility%2A&gt;ウィンドウのプロパティを指定して、それ以外の場合に表示されません&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The reference to the first &lt;xref:System.Windows.Window&gt; object to be instantiated is also added as the first item to the &lt;xref:System.Windows.Application.Windows%2A&gt; collection.</source>
          <target state="translated">最初に参照&lt;xref:System.Windows.Window&gt;インスタンス化されるオブジェクトが最初の項目としても追加、&lt;xref:System.Windows.Application.Windows%2A&gt;コレクションです&lt;/xref:System.Windows.Application.Windows%2A&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If MainWindow is subsequently set with a reference to a different &lt;xref:System.Windows.Window&gt;, the position of the item with the reference to the main window will change, while the order of items in &lt;xref:System.Windows.Application.Windows%2A&gt; remains the same.</source>
          <target state="translated">MainWindow が、別の参照に設定したかどうかは&lt;xref:System.Windows.Window&gt;、内の項目の順序の中に、メイン ウィンドウへの参照を持つ項目の位置が変更される&lt;xref:System.Windows.Application.Windows%2A&gt;は変わりません&lt;/xref:System.Windows.Application.Windows%2A&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Consequently, always use MainWindow to refer to the main window instead of the first item in &lt;xref:System.Windows.Application.Windows%2A&gt;.</source>
          <target state="translated">そのため、常にメイン ウィンドウを使用して&lt;xref:System.Windows.Application.Windows%2A&gt;。&lt;/xref:System.Windows.Application.Windows%2A&gt;の最初の項目ではなくメイン ウィンドウを参照してください。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the main window is a &lt;xref:System.Windows.Navigation.NavigationWindow&gt;, and you need specific access to &lt;xref:System.Windows.Navigation.NavigationWindow&gt; members, you will need to cast the value of MainWindow to &lt;xref:System.Windows.Navigation.NavigationWindow&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; メイン ウィンドウがある場合、 &lt;xref:System.Windows.Navigation.NavigationWindow&gt;、 &lt;xref:System.Windows.Navigation.NavigationWindow&gt; &lt;xref:System.Windows.Navigation.NavigationWindow&gt;&lt;/xref:System.Windows.Navigation.NavigationWindow&gt; MainWindow の値をキャストする必要が、メンバー&lt;/xref:System.Windows.Navigation.NavigationWindow&gt;へのアクセスを必要と&lt;/xref:System.Windows.Navigation.NavigationWindow&gt;。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>&gt;    &gt;  This property is available only from the thread that created the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">&gt;&gt; このプロパティは、作成したスレッドからのみ使用可能な&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is designated as the main application window.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>アプリケーションのメイン ウィンドウとして指定されています。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>MainWindow is set from an application that's hosted in a browser, such as an <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">など、ブラウザーでホストされているアプリケーションから MainWindow が設定されている、<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Occurs when the content that is being navigated to by a navigator in the application has been found, although it may not have completed loading.</source>
          <target state="translated">可能性がありますが、完了していない読み込みは、アプリケーションのナビゲーターを移動先のコンテンツが見つかるとときに、発生します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Occurs when a new navigation is requested by a navigator in the application.</source>
          <target state="translated">新しいナビゲーションは、アプリケーション内のナビゲーターによって要求されたときに発生します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Occurs when an error occurs while a navigator in the application is navigating to the requested content.</source>
          <target state="translated">アプリケーションのナビゲーターは、要求されたコンテンツに移動するときにエラーが発生したときに発生します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Occurs periodically during a download that is being managed by a navigator in the application to provide navigation progress information.</source>
          <target state="translated">ナビゲーション進行状況に関する情報を提供するアプリケーションでナビゲーターによって管理されているダウンロード中に定期的に発生します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref uid="langword_csharp_StopLoading" name="StopLoading" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method of a navigator in the application is called, or when a new navigation is requested by a navigator while a current navigation is in progress.</source>
          <target state="translated">発生したときに、 <bpt id="p1">&lt;xref uid="langword_csharp_StopLoading" name="StopLoading" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>アプリケーションのナビゲーターのメソッドが呼び出されて、または新しいナビゲーションがナビゲーターによって要求された現在のナビゲーションが進行中はときにします。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A navigator is either a &lt;xref:System.Windows.Navigation.NavigationWindow&gt; or a &lt;xref:System.Windows.Controls.Frame&gt;.</source>
          <target state="translated">ナビゲーターは、いずれか&lt;xref:System.Windows.Navigation.NavigationWindow&gt;または&lt;xref:System.Windows.Controls.Frame&gt;.&lt;/xref:System.Windows.Controls.Frame&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Activated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Activated"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>OnActivated raises the &lt;xref:System.Windows.Application.Activated&gt; event.</source>
          <target state="translated">OnActivated を発生させる、&lt;xref:System.Windows.Application.Activated&gt;イベント&lt;/xref:System.Windows.Application.Activated&gt;。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnActivated.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnActivated を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnActivated in the base class if &lt;xref:System.Windows.Application.Activated&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnActivated を呼び出す必要があります&lt;xref:System.Windows.Application.Activated&gt;発生する必要があります&lt;/xref:System.Windows.Application.Activated&gt;。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;イベント データを格納します&lt;/xref:System.EventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Deactivated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Deactivated"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>OnDeactivated raises the &lt;xref:System.Windows.Application.Deactivated&gt; event.</source>
          <target state="translated">OnDeactivated を発生させる、&lt;xref:System.Windows.Application.Deactivated&gt;イベント&lt;/xref:System.Windows.Application.Deactivated&gt;。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnDeactivated.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnDeactivated を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnDeactivated in the base class if &lt;xref:System.Windows.Application.Deactivated&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnDeactivated を呼び出す必要があります&lt;xref:System.Windows.Application.Deactivated&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.Deactivated&gt;。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;イベント データを格納します&lt;/xref:System.EventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Exit"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Exit"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>OnExit raises the &lt;xref:System.Windows.Application.Exit&gt; event.</source>
          <target state="translated">OnExit 発生、&lt;xref:System.Windows.Application.Exit&gt;イベント&lt;/xref:System.Windows.Application.Exit&gt;。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override the OnExit method.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnExit メソッドをオーバーライドする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnExit in the base class if &lt;xref:System.Windows.Application.Exit&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnExit を呼び出す必要があります&lt;xref:System.Windows.Application.Exit&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.Exit&gt;。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.ExitEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.ExitEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.FragmentNavigation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.FragmentNavigation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>OnFragmentNavigation raises the &lt;xref:System.Windows.Application.FragmentNavigation&gt; event.</source>
          <target state="translated">OnFragmentNavigation を発生させる、&lt;xref:System.Windows.Application.FragmentNavigation&gt;イベント&lt;/xref:System.Windows.Application.FragmentNavigation&gt;。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnFragmentNavigation.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnFragmentNavigation を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnFragmentNavigation in the base class if &lt;xref:System.Windows.Application.FragmentNavigation&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnFragmentNavigation を呼び出す必要があります&lt;xref:System.Windows.Application.FragmentNavigation&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.FragmentNavigation&gt;。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.FragmentNavigationEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.FragmentNavigationEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.LoadCompleted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.LoadCompleted"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>OnLoadCompleted raises the &lt;xref:System.Windows.Application.LoadCompleted&gt; event.</source>
          <target state="translated">OnLoadCompleted 発生、&lt;xref:System.Windows.Application.LoadCompleted&gt;イベント&lt;/xref:System.Windows.Application.LoadCompleted&gt;。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnLoadCompleted.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnLoadCompleted を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnLoadCompleted in the base class if &lt;xref:System.Windows.Application.LoadCompleted&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnLoadCompleted を呼び出す必要があります&lt;xref:System.Windows.Application.LoadCompleted&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.LoadCompleted&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Navigated"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Navigated"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>OnNavigated raises the &lt;xref:System.Windows.Application.Navigated&gt; event.</source>
          <target state="translated">OnNavigated を発生させる、&lt;xref:System.Windows.Application.Navigated&gt;イベント&lt;/xref:System.Windows.Application.Navigated&gt;。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnNavigated.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnNavigated を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnNavigated in the base class if &lt;xref:System.Windows.Application.Navigated&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigated を呼び出す必要があります&lt;xref:System.Windows.Application.Navigated&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.Navigated&gt;。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Navigating"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Navigating"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>OnNavigating raises the &lt;xref:System.Windows.Application.Navigating&gt; event.</source>
          <target state="translated">OnNavigating 発生、&lt;xref:System.Windows.Application.Navigating&gt;イベント&lt;/xref:System.Windows.Application.Navigating&gt;。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnNavigating.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnNavigating を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnNavigating in the base class if &lt;xref:System.Windows.Application.Navigating&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigating を呼び出す必要があります&lt;xref:System.Windows.Application.Navigating&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.Navigating&gt;。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigatingCancelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigatingCancelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationFailed"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationFailed"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>OnNavigationFailed raises the &lt;xref:System.Windows.Application.NavigationFailed&gt; event.</source>
          <target state="translated">OnNavigationFailed を発生させる、&lt;xref:System.Windows.Application.NavigationFailed&gt;イベント&lt;/xref:System.Windows.Application.NavigationFailed&gt;。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnNavigationFailed.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnNavigationFailed を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnNavigationFailed in the base class if &lt;xref:System.Windows.Application.NavigationFailed&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigationFailed を呼び出す必要があります&lt;xref:System.Windows.Application.NavigationFailed&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.NavigationFailed&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationFailedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationFailedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationProgress"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationProgress"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>OnNavigationProgress raises the &lt;xref:System.Windows.Application.NavigationProgress&gt; event.</source>
          <target state="translated">OnNavigationProgress を発生させる、&lt;xref:System.Windows.Application.NavigationProgress&gt;イベント&lt;/xref:System.Windows.Application.NavigationProgress&gt;。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnNavigationProgress.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnNavigationProgress を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The overridden method must explicitly call OnNavigationProgress in the base class if &lt;xref:System.Windows.Application.NavigationProgress&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、明示的に、場合、基底クラスで OnNavigationProgress を呼び出す必要があります&lt;xref:System.Windows.Application.NavigationProgress&gt;発生する必要があります&lt;/xref:System.Windows.Application.NavigationProgress&gt;。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationProgressEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationProgressEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationStopped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.NavigationStopped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>OnNavigationStopped raises the &lt;xref:System.Windows.Application.NavigationStopped&gt; event.</source>
          <target state="translated">OnNavigationStopped を発生させる、&lt;xref:System.Windows.Application.NavigationStopped&gt;イベント&lt;/xref:System.Windows.Application.NavigationStopped&gt;。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnNavigationStopped.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnNavigationStopped を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnNavigationStopped in the base class if &lt;xref:System.Windows.Application.NavigationStopped&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigationStopped を呼び出す必要があります&lt;xref:System.Windows.Application.NavigationStopped&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.NavigationStopped&gt;。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Navigation.NavigationEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.SessionEnding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.SessionEnding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>OnSessionEnding raises the &lt;xref:System.Windows.Application.SessionEnding&gt; event.</source>
          <target state="translated">OnSessionEnding を発生させる、&lt;xref:System.Windows.Application.SessionEnding&gt;イベント&lt;/xref:System.Windows.Application.SessionEnding&gt;。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnSessionEnding.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnSessionEnding を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnSessionEnding in the base class if &lt;xref:System.Windows.Application.SessionEnding&gt; needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnSessionEnding を呼び出す必要があります&lt;xref:System.Windows.Application.SessionEnding&gt;を発生させる必要があります&lt;/xref:System.Windows.Application.SessionEnding&gt;。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.SessionEndingCancelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.SessionEndingCancelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.Application.Startup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.Application.Startup"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>OnStartup raises the &lt;xref:System.Windows.Application.Startup&gt; event.</source>
          <target state="translated">OnStartup を発生させる、&lt;xref:System.Windows.Application.Startup&gt;イベント&lt;/xref:System.Windows.Application.Startup&gt;。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A type that derives from &lt;xref:System.Windows.Application&gt; may override OnStartup.</source>
          <target state="translated">派生する型&lt;xref:System.Windows.Application&gt;OnStartup を上書きする可能性があります&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The overridden method must call OnStartup in the base class if the &lt;xref:System.Windows.Application.Startup&gt; event needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドは、場合に、基底クラスでの OnStartup を呼び出す必要があります、&lt;xref:System.Windows.Application.Startup&gt;イベントを発生させる必要があります&lt;/xref:System.Windows.Application.Startup&gt;。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.StartupEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.StartupEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Gets a collection of application-scope properties.</source>
          <target state="translated">アプリケーション スコープのプロパティのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Application&gt; exposes a dictionary via Properties which you can use to store application-scope properties.</source>
          <target state="translated">&lt;xref:System.Windows.Application&gt;アプリケーション スコープのプロパティの保存に使用できるプロパティを使用してディクショナリを公開します。&lt;/xref:System.Windows.Application&gt;</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This allows you to share state amongst all code in an &lt;xref:System.AppDomain&gt; in a thread-safe fashion, without the need to write your own state code.</source>
          <target state="translated">これによりのすべてのコードの間で状態を共有する、&lt;xref:System.AppDomain&gt;スレッド セーフである的に、状態コードを記述する必要はありません&lt;/xref:System.AppDomain&gt;。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Properties stored in Properties must be converted to the appropriate type returned.</source>
          <target state="translated">プロパティに格納されているプロパティは、返される適切な型に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>TheProperties property is thread safe and is available from any thread.</source>
          <target state="translated">プロパティ プロパティでは、スレッド セーフであるし、はどのスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IDictionary&gt; that contains the application-scope properties.</source>
          <target state="translated">&lt;xref:System.Collections.IDictionary&gt;アプリケーション スコープのプロパティを格納します&lt;/xref:System.Collections.IDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Reflection.Assembly&gt; that provides the pack <ph id="ph1">[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> application.</source>
          <target state="translated">取得または設定、 &lt;xref:System.Reflection.Assembly&gt;、パックを提供する<ph id="ph1">[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]</ph>内のリソースに対して、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーション&lt;/xref:System.Reflection.Assembly&gt;。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> resources are resolved at run time with respect to the entry assembly, which is identified by the value returned from the &lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt; method.</source>
          <target state="translated">既定では、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>から返される値によって識別されるエントリのアセンブリに対して実行時にリソースが解決される、&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;メソッド&lt;/xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The entry assembly is the assembly that is returned by &lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt; and could be the following:      -   The executable assembly in the default application domain.</source>
          <target state="translated">入力アセンブリがによって返されるアセンブリ&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;し、次にある可能性があります:-既定のアプリケーション ドメインで実行可能アセンブリ&lt;/xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>-   The first assembly to be executed by calling &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;.</source>
          <target state="translated">- &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;.&lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt;を呼び出すことによって実行される最初のアセンブリ</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In the following cases, however, a <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly cannot get a reference to the entry assembly:      -   An unmanaged (native) application hosts the <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly.</source>
          <target state="translated">次の場合、ただし、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アセンブリは、入力アセンブリへの参照を取得できません: - アンマネージ (ネイティブ) アプリケーションのホスト、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アセンブリ。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>-   A managed application hosts the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly by loading it into a new application domain using a method other than &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;.</source>
          <target state="translated">は、マネージ アプリケーションのホスト、 <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> 、新しいアプリケーション ドメイン以外のメソッドを使用して&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;.&lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt;に読み込んでアセンブリ</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>In both of these cases, &lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt; returns <ph id="ph1">`null`</ph>, and the <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly's resources cannot be resolved.</source>
          <target state="translated">このような場合の両方で&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;を返します<ph id="ph1">`null`</ph>、および<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アセンブリのリソースを解決することはできません&lt;/xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In these cases, ResourceAssembly can be set, once only, with a reference to the assembly that should be used to resolve resources.</source>
          <target state="translated">このような場合は、ResourceAssembly で設定できます、1 回だけ、アセンブリへの参照、リソースの解決に使用する必要があります。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>ResourceAssembly can only be set once because it is unlikely that the resource assembly will change after the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly is loaded.</source>
          <target state="translated">ResourceAssembly のみ設定できます&amp;1; 回の後に、リソース アセンブリが変更されること可能性は高くありませんので、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アセンブリが読み込まれています。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  ResourceAssembly cannot be set when a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> assembly can discover the entry assembly—that is, when &lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt; returns a reference to an assembly rather than <ph id="ph3">`null`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合 ResourceAssembly を設定することはできません、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アセンブリは、入力アセンブリを検出できる — されているときに、&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;アセンブリへの参照を返しますのではなく<ph id="ph3">`null`</ph>です&lt;/xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This property is thread safe and is available from any thread.</source>
          <target state="translated">このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>ResourceAssembly is introduced in the .NET Framework version 3.5.</source>
          <target state="translated">ResourceAssembly は、.NET Framework version 3.5 で導入されました。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>バージョンおよび依存関係<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A reference to the &lt;xref:System.Reflection.Assembly&gt; that provides the pack <ph id="ph1">[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> application.</source>
          <target state="translated">参照、 &lt;xref:System.Reflection.Assembly&gt;、パックを提供する<ph id="ph1">[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]</ph>内のリソースに対して、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーション&lt;/xref:System.Reflection.Assembly&gt;。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> application has an entry assembly, or ResourceAssembly has already been set.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーションには、入力アセンブリまたは ResourceAssembly は既に設定されています。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Gets or sets a collection of application-scope resources, such as styles and brushes.</source>
          <target state="translated">取得またはスタイルとブラシなどのアプリケーション スコープのリソースのコレクションを設定します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The Resources property can be used to share resources across the windows and elements of an application.</source>
          <target state="translated">Windows およびアプリケーションの要素間でリソースを共有するリソース プロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Additionally, the Resources property is included in the resource lookup path, which is traversed in the following order:      1.</source>
          <target state="translated">さらに、リソース プロパティがパスに含まれて、リソース参照は、次の順序で走査: 1。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Elements      2.</source>
          <target state="translated">2 の要素です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Windows      3.</source>
          <target state="translated">Windows 3 です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Resources      4.</source>
          <target state="translated">4 のリソース。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>System       Consequently, <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> elements can bind to application-scope resources.</source>
          <target state="translated">システムその結果、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>要素は、アプリケーション スコープのリソースにバインドできます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Additionally, if resources change, the resource system ensures that element properties which are bound to those resources are automatically updated to reflect the change.</source>
          <target state="translated">さらに、リソースが変更された場合、リソース システムにより、その要素の変更を反映するようにそれらのリソースにバインドされているプロパティが自動的に更新します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Application-scope resources provide a simple way to support a consistent theme across your application.</source>
          <target state="translated">アプリケーション スコープのリソースは、アプリケーション間で一貫性のあるテーマをサポートする簡単な方法を提供します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>You can easily create a theme in <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> by using the <ph id="ph2">`Application.Resources`</ph> tag.</source>
          <target state="translated">テーマを簡単に作成できます<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>を使用して、<ph id="ph2">`Application.Resources`</ph>タグ。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>However, if your application supports multiple themes, which may contain a large number of theme elements, it might be easier to manage them using one &lt;xref:System.Windows.ResourceDictionary&gt; instance for each theme.</source>
          <target state="translated">ただし、アプリケーションは、多数のテーマの要素を含むことが、複数のテーマをサポートしている場合ありますいずれかを使用してそれらを管理しやすい&lt;xref:System.Windows.ResourceDictionary&gt;各テーマのインスタンス&lt;/xref:System.Windows.ResourceDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>In this way, a new theme can be applied by setting the Resources property to the appropriate &lt;xref:System.Windows.ResourceDictionary&gt;.</source>
          <target state="translated">この方法でリソース プロパティを適切な&lt;xref:System.Windows.ResourceDictionary&gt;.&lt;/xref:System.Windows.ResourceDictionary&gt;に設定して新しいテーマを適用できます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>There are two considerations to make when using Resources.</source>
          <target state="translated">2 つの考慮事項のリソースを使用する場合があります。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>First, the dictionary <bpt id="p1">*</bpt>key<ept id="p1">*</ept> is an object, so you need to use exactly the same object instance when both setting and getting a property value (note that the key is case-sensitive when using a string).</source>
          <target state="translated">まず、ディクショナリ<bpt id="p1">*</bpt>キー<ept id="p1">*</ept>が、オブジェクトを設定およびプロパティの値 (文字列を使用するときに、キーが大文字小文字を区別であることに注意してください) を取得するときに正確に同じオブジェクト インスタンスを使用する必要があるためです。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Second, the dictionary <bpt id="p1">*</bpt>value<ept id="p1">*</ept> is an object, so you will need to convert the value to the desired type when getting a property value.</source>
          <target state="translated">2 番目、ディクショナリ<bpt id="p1">*</bpt>値<ept id="p1">*</ept>オブジェクトはプロパティの値を取得するときに、目的の型に値を変換する必要があります。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Resources is thread safe and is available from any thread.</source>
          <target state="translated">リソースは、スレッド セーフであるし、はどのスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.ResourceDictionary"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that contains zero or more application-scope resources.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.ResourceDictionary"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&amp;0; 個以上のアプリケーション スコープのリソースを含むオブジェクトです。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated">開始、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Application.Run%2A&gt; is called to start a <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> application.</source>
          <target state="translated">&lt;xref:System.Windows.Application.Run%2A&gt;開始するために呼び出される、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>アプリケーションです。&lt;/xref:System.Windows.Application.Run%2A&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>If you define your &lt;xref:System.Windows.Application&gt; using markup, or markup and code-behind, &lt;xref:System.Windows.Application.Run%2A&gt; will be called implicitly.</source>
          <target state="translated">定義した場合、&lt;xref:System.Windows.Application&gt;マークアップ、またはマークアップと分離コードを使用して&lt;xref:System.Windows.Application.Run%2A&gt;が暗黙的に呼び出されます&lt;/xref:System.Windows.Application.Run%2A&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>However, if you define your &lt;xref:System.Windows.Application&gt; using code, you will need to explicitly call &lt;xref:System.Windows.Application.Run%2A&gt;.</source>
          <target state="translated">ただし、&lt;xref:System.Windows.Application&gt;コードを使用する必要がありますを明示的に呼び出す&lt;xref:System.Windows.Application.Run%2A&gt;.&lt;/xref:System.Windows.Application.Run%2A&gt;&lt;/xref:System.Windows.Application&gt;を定義する場合</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Windows.Application.Run%2A&gt; is called, &lt;xref:System.Windows.Application&gt; attaches a new &lt;xref:System.Windows.Threading.Dispatcher&gt; instance to the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">ときに&lt;xref:System.Windows.Application.Run%2A&gt;が呼び出されると、&lt;xref:System.Windows.Application&gt;新しいアタッチ&lt;xref:System.Windows.Threading.Dispatcher&gt;インスタンスを<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>スレッド&lt;/xref:System.Windows.Threading.Dispatcher&gt;&lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Application.Run%2A&gt;。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Next, the &lt;xref:System.Windows.Threading.Dispatcher&gt; object's &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt; method is called, which starts a message pump to process windows messages.</source>
          <target state="translated">次に、&lt;xref:System.Windows.Threading.Dispatcher&gt;オブジェクトの&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;メソッドは、windows メッセージを処理するメッセージ ポンプを開始します&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;xref:System.Windows.Threading.Dispatcher&gt; object calls the &lt;xref:System.Windows.Application&gt; object's the &lt;xref:System.Windows.Application.OnStartup%2A&gt; method to raise the &lt;xref:System.Windows.Application.Startup&gt; event.</source>
          <target state="translated">最後に、&lt;xref:System.Windows.Threading.Dispatcher&gt;オブジェクトの呼び出し、&lt;xref:System.Windows.Application&gt;オブジェクトの&lt;xref:System.Windows.Application.OnStartup%2A&gt;メソッドを&lt;xref:System.Windows.Application.Startup&gt;イベント&lt;/xref:System.Windows.Application.Startup&gt;&lt;/xref:System.Windows.Application.OnStartup%2A&gt;&lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Consequently, the application execution model has been established by the time you handle &lt;xref:System.Windows.Application.Startup&gt;, at which point the application is considered to be running.</source>
          <target state="translated">その結果、アプリケーションの実行モデルが確立されたらを処理する時間&lt;xref:System.Windows.Application.Startup&gt;、アプリケーションが実行されている時点&lt;/xref:System.Windows.Application.Startup&gt;。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An application stops running when &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called; the value of the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; property determines when &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called, and whether it happens automatically or you need to explicitly call it.</source>
          <target state="translated">アプリケーションの停止時に実行して&lt;xref:System.Windows.Application.Shutdown%2A&gt;が呼び出されますの値、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;タイミングを決定するプロパティ&lt;xref:System.Windows.Application.Shutdown%2A&gt;が呼び出され、自動的に行われますか、明示的にする必要があるかどうかは、それを呼び出す&lt;/xref:System.Windows.Application.Shutdown%2A&gt;&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Application.Run%2A&gt; can be called only from the thread that creates the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">&lt;xref:System.Windows.Application.Run%2A&gt;作成したスレッドからのみ呼び出すことができます、&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。&lt;/xref:System.Windows.Application.Run%2A&gt;</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Also, &lt;xref:System.Windows.Application.Run%2A&gt; cannot be called from a <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">また、&lt;xref:System.Windows.Application.Run%2A&gt;から呼び出すことはできません、 <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</ph>&lt;/xref:System.Windows.Application.Run%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Int32&gt; application exit code that is returned to the operating system when the application shuts down.</source>
          <target state="translated">&lt;xref:System.Int32&gt;アプリケーションのシャット ダウン時に、オペレーティング システムに返されるアプリケーションの終了コード&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>By default, the exit code value is 0.</source>
          <target state="translated">既定では、終了コード値は 0 です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Run is called from a browser-hosted application (for example, an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>).</source>
          <target state="translated">実行がブラウザーによってホストされるアプリケーションから呼び出されます (たとえば、 <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>)。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application and opens the specified window.</source>
          <target state="translated">開始、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>アプリケーションし、指定されたウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This overload extends the &lt;xref:System.Windows.Application.Run%2A&gt; method to open the specified window after an application starts running.</source>
          <target state="translated">このオーバー ロードを拡張、&lt;xref:System.Windows.Application.Run%2A&gt;をアプリケーションの実行が開始した後に指定されたウィンドウを開くメソッドです&lt;/xref:System.Windows.Application.Run%2A&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>If you define a code &lt;xref:System.Windows.Application&gt; that opens a window when it starts running, you explicitly call Run.</source>
          <target state="translated">コードを定義する場合&lt;xref:System.Windows.Application&gt;を実行開始時にウィンドウを開く、実行を明示的に呼び出します&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>If you create your &lt;xref:System.Windows.Application&gt; using markup, or markup and code-behind, you can automatically open a window during using either of the following techniques:      -   Declaratively, by setting &lt;xref:System.Windows.Application.StartupUri%2A&gt;.</source>
          <target state="translated">作成する場合、&lt;xref:System.Windows.Application&gt;マークアップ、またはマークアップと分離コードを使用して、自動的にウィンドウを開き、次の手法のいずれかを使用中に: - &lt;xref:System.Windows.Application.StartupUri%2A&gt;.&lt;/xref:System.Windows.Application.StartupUri%2A&gt;を設定することによって宣言によって、&lt;/xref:System.Windows.Application&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-   Programmatically, by handling &lt;xref:System.Windows.Application.Startup&gt;.</source>
          <target state="translated">、 &lt;xref:System.Windows.Application.Startup&gt;。&lt;/xref:System.Windows.Application.Startup&gt;を処理することによってプログラムでは、</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that opens automatically when an application starts.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Window"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>は、アプリケーションの起動時に自動的と開きます。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Int32&gt; application exit code that is returned to the operating system when the application shuts down.</source>
          <target state="translated">&lt;xref:System.Int32&gt;アプリケーションのシャット ダウン時に、オペレーティング システムに返されるアプリケーションの終了コード&lt;/xref:System.Int32&gt;。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>By default, the exit code value is 0.</source>
          <target state="translated">既定では、終了コード値は 0 です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Application.Run*&gt; is called from a browser-hosted application (for example, an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>).</source>
          <target state="translated">&lt;xref:System.Windows.Application.Run*&gt;ブラウザーによってホストされるアプリケーションから呼び出されます (たとえば、 <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>)。&lt;/xref:System.Windows.Application.Run*&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Occurs when the user ends the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph> session by logging off or shutting down the operating system.</source>
          <target state="translated">ユーザーが終了したときに発生、<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>セッションをログオフするか、オペレーティング システムのシャット ダウンします。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>By default, an application shuts down when the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph> session ends, which occurs when a user logs off or shuts down.</source>
          <target state="translated">既定では、アプリケーションのシャット ダウン、<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>セッション終了すると、ユーザーがログオフまたはシャット ダウン時に発生します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>When this happens, <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph> asks each open application to shut down.</source>
          <target state="translated">この場合、<ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</ph>各アプリケーションをシャット ダウンを要求します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>However, it is possible that an application may not be ready to shut down when this occurs.</source>
          <target state="translated">ただしは、アプリケーションがシャット ダウンこのエラーが発生する準備ができていない可能性があります。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>For example, an application may have data that is in an inconsistent state, or in the middle of a long-running operation.</source>
          <target state="translated">たとえば、アプリケーションには、実行時間の長い操作中または不整合な状態であるデータがあります。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>In these situations, it may be desirable to prevent the session from ending, and may be more desirable to allow users the option to decide whether or not to let the session to end.</source>
          <target state="translated">これらの状況で、セッションの終了を防ぐことが望ましい場合がありますしてセッションを終了させるかどうかを決定するオプションをユーザーに許可するが望ましい場合があります。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>You can detect when a session ends by handling the SessionEnding event.</source>
          <target state="translated">SessionEnding イベントを処理することによって、セッションの終了時に検出できます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>If an application needs to prevent the session from ending, the &lt;xref:System.Windows.SessionEndingCancelEventArgs&gt; argument that is passed to the event handler exposes the &lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; that you set to <ph id="ph1">`true`</ph> (the default value is <ph id="ph2">`false`</ph>).</source>
          <target state="translated">アプリケーションは、セッションの終了を防ぐ必要がある場合、&lt;xref:System.Windows.SessionEndingCancelEventArgs&gt;イベント ハンドラーに渡される引数を公開、&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;設定した<ph id="ph1">`true`</ph>(既定値は<ph id="ph2">`false`</ph>).&lt;/xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt; &lt;/xref:System.Windows.SessionEndingCancelEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If SessionEnding is unhandled, or is handled without being cancelled, &lt;xref:System.Windows.Application.Shutdown%2A&gt; is called and the &lt;xref:System.Windows.Application.Exit&gt; event is raised.</source>
          <target state="translated">SessionEnding が処理される、または取り消されてなしで処理される場合&lt;xref:System.Windows.Application.Shutdown%2A&gt;が呼び出されたと&lt;xref:System.Windows.Application.Exit&gt;イベントが発生します&lt;/xref:System.Windows.Application.Exit&gt;&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>To obtain more information about why the session is ending, an application can inspect &lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;, which is one of the &lt;xref:System.Windows.ReasonSessionEnding&gt; values (&lt;xref:System.Windows.ReasonSessionEnding&gt; and &lt;xref:System.Windows.ReasonSessionEnding&gt;).</source>
          <target state="translated">詳細については、セッションが終了する理由を取得するアプリケーションを調査できます&lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;の&amp;1; つである、&lt;xref:System.Windows.ReasonSessionEnding&gt;値 (&lt;xref:System.Windows.ReasonSessionEnding&gt;と&lt;xref:System.Windows.ReasonSessionEnding&gt;).&lt;/xref:System.Windows.ReasonSessionEnding&gt; &lt;/xref:System.Windows.ReasonSessionEnding&gt; &lt;/xref:System.Windows.ReasonSessionEnding&gt; &lt;/xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>SessionEnding is not raised by console applications.</source>
          <target state="translated">SessionEnding はコンソール アプリケーションでは発生しません。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>SessionEnding is raised only on the thread that creates the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">作成したスレッドでのみ SessionEnding が発生した、&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>SessionEnding is not raised for <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">SessionEnding は発生しません<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Creates a cookie for the location specified by a &lt;xref:System.Uri&gt;.</source>
          <target state="translated">&lt;xref:System.Uri&gt;。&lt;/xref:System.Uri&gt;で指定された場所のクッキーを作成します。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>A cookie is an arbitrary piece of data that can be stored by an application on the client machine during application sessions (session cookies) or across application sessions (persistent cookies).</source>
          <target state="translated">Cookie とは、アプリケーションのセッション (セッション cookie) 中、またはアプリケーション セッション (永続的な cookie) 間でクライアント コンピューターで、アプリケーションで格納できるデータの任意の部分です。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>You can create both types of cookies by calling SetCookie.</source>
          <target state="translated">SetCookie を呼び出すことによって、両方の種類の cookie を作成できます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Cookie data typically takes the form of a name/value pair in the following format:       <ph id="ph1">`Name=Value`</ph>       You pass a string of this format to SetCookie, along with the &lt;xref:System.Uri&gt; of the location for which the cookie should be set (typically, the application domain).</source>
          <target state="translated">Cookie のデータは通常、次の形式で名前/値ペアの形式を取ります:<ph id="ph1">`Name=Value`</ph>と共に SetCookie にこの形式の文字列を渡す、 &lt;xref:System.Uri&gt;cookie を設定する場所 (通常は、アプリケーション ドメイン).&lt;/xref:System.Uri&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Whether a cookie is a session cookie or a persistent cookie depends on whether the cookie string that you pass to SetCookie includes an expiry date.</source>
          <target state="translated">Cookie とは、セッションの cookie、または永続的な cookie かどうかは、SetCookie に渡すクッキー文字列に有効期限日が含まれているかどうかによって異なります。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The string for a session cookie does not include an expiry date.</source>
          <target state="translated">セッション cookie の文字列では、有効期限日は含まれません。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The string for a persistent cookie does, and must be in the following format:       <ph id="ph1">`NAME=VALUE; expires=DAY, DD-MMM-YYYY HH:MM:SS GMT`</ph>       Persistent cookies are stored in the current <ph id="ph2">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph> installation's Temporary Internet Files folder until they expire, in which case they are deleted.</source>
          <target state="translated">永続的な cookie の文字列は、次の形式にする必要があります:<ph id="ph1">`NAME=VALUE; expires=DAY, DD-MMM-YYYY HH:MM:SS GMT`</ph>永続的な cookie が現在格納されている<ph id="ph2">[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]</ph>期限が切れるまで、削除された場合に、インストールのインターネット一時ファイル フォルダーです。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>You can delete a persistent cookie from your application by setting its expiry date to a date/time value that is in the past.</source>
          <target state="translated">アプリケーションから永続的な cookie を削除するには、過去の日付/時刻値に、有効期限を設定します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クッキーの概要については<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>ナビゲーション概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Uri&gt; that specifies the location for which the cookie should be created.</source>
          <target state="translated">&lt;xref:System.Uri&gt;Cookie の作成対象となる場所を指定します&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.String&gt; that contains the cookie data.</source>
          <target state="translated">&lt;xref:System.String&gt;Cookie のデータを格納している&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <bpt id="p1">&lt;xref uid="langword_csharp_InternetSetCookie" name="InternetSetCookie" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> function (called by SetCookie) if a problem occurs when attempting to create the specified cookie.</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>によってエラーが発生しました、 <bpt id="p1">&lt;xref uid="langword_csharp_InternetSetCookie" name="InternetSetCookie" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (SetCookie によって呼び出される) 関数、指定された cookie を作成する際に問題が発生した場合。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Shuts down an application.</source>
          <target state="translated">アプリケーションを終了します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>When Shutdown is called, an application stops running.</source>
          <target state="translated">シャット ダウンが呼び出されると、アプリケーションが実行を停止します。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>You can handle the &lt;xref:System.Windows.Application.Exit&gt; event to detect when an application is about to stop running, to perform any appropriate processing.</source>
          <target state="translated">処理することができます、&lt;xref:System.Windows.Application.Exit&gt;イベント、アプリケーションが実行を停止しようとする、適切な処理を実行するタイミングを検出します&lt;/xref:System.Windows.Application.Exit&gt;。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Shutdown is implicitly called by <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> in the following situations:      -   When &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is set to &lt;xref:System.Windows.ShutdownMode&gt;.</source>
          <target state="translated">シャット ダウンは、暗黙的にによって呼び出されます<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>次の状況で:: &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; &lt;xref:System.Windows.ShutdownMode&gt;。&lt;/xref:System.Windows.ShutdownMode&gt;に設定されている&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>-   When the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is set to &lt;xref:System.Windows.ShutdownMode&gt;.</source>
          <target state="translated">- &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; &lt;xref:System.Windows.ShutdownMode&gt;.&lt;/xref:System.Windows.ShutdownMode&gt;に設定されています。&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>-   When a user ends a session and the &lt;xref:System.Windows.Application.SessionEnding&gt; event is either unhandled, or handled without cancellation.</source>
          <target state="translated">-ユーザーがセッションを終了する および&lt;xref:System.Windows.Application.SessionEnding&gt;イベントがハンドルされていないとき、またはキャンセルせずに処理します&lt;/xref:System.Windows.Application.SessionEnding&gt;。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Calling Shutdown explicitly causes an application to shut down, regardless of the &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; setting.</source>
          <target state="translated">シャット ダウンを明示的に呼び出すことにより、アプリケーションをシャット ダウンに関係なく、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;設定&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>However, if &lt;xref:System.Windows.Application.ShutdownMode%2A&gt; is set to &lt;xref:System.Windows.ShutdownMode&gt;, you must call Shutdown to shut down an application.</source>
          <target state="translated">ただし場合、&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;に設定されている&lt;xref:System.Windows.ShutdownMode&gt;、アプリケーションのシャット ダウンをシャット ダウンを呼び出す必要があります&lt;/xref:System.Windows.ShutdownMode&gt;&lt;/xref:System.Windows.Application.ShutdownMode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When Shutdown is called, the application will shut down irrespective of whether the &lt;xref:System.Windows.Window.Closing&gt; event of any open windows is canceled.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ときにシャット ダウンが呼び出されると、かどうかに関係なく、アプリケーションはシャット ダウン、 &lt;xref:System.Windows.Window.Closing&gt;、開いているウィンドウのイベントが取り消されました&lt;/xref:System.Windows.Window.Closing&gt;。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This method can be called only from the thread that created the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">このメソッドは、作成したスレッドからのみ呼び出すことが、&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Shuts down an application that returns the specified exit code to the operating system.</source>
          <target state="translated">オペレーティング システムに指定した終了コードを返すアプリケーションを終了します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You can handle the &lt;xref:System.Windows.Application.Exit&gt; event to set an exit code.</source>
          <target state="translated">処理することができます、&lt;xref:System.Windows.Application.Exit&gt;終了コードを設定するイベントです&lt;/xref:System.Windows.Application.Exit&gt;。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>However, if you explicitly call &lt;xref:System.Windows.Application.Shutdown%2A&gt;, and you handle &lt;xref:System.Windows.Application.Exit&gt; only to set an exit code, you can call Shutdown instead.</source>
          <target state="translated">ただし、明示的に呼び出す場合&lt;xref:System.Windows.Application.Shutdown%2A&gt;、および処理する&lt;xref:System.Windows.Application.Exit&gt;だけで、終了コードを設定するに呼び出せるシャット ダウン代わりにします&lt;/xref:System.Windows.Application.Exit&gt;&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This method can be called only from the thread that created the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">このメソッドは、作成したスレッドからのみ呼び出すことが、&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>An integer exit code for an application.</source>
          <target state="translated">アプリケーションの整数の終了コード。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The default exit code is 0.</source>
          <target state="translated">既定の終了コードは 0 です。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Gets or sets the condition that causes the &lt;xref:System.Windows.Application.Shutdown*&gt; method to be called.</source>
          <target state="translated">取得または設定の原因となる条件、&lt;xref:System.Windows.Application.Shutdown*&gt;に呼び出されるメソッド&lt;/xref:System.Windows.Application.Shutdown*&gt;。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Applications stop running only when the &lt;xref:System.Windows.Application.Shutdown%2A&gt; method of the Application is called.</source>
          <target state="translated">アプリケーションが停止される場合にのみを実行している、&lt;xref:System.Windows.Application.Shutdown%2A&gt;アプリケーションのメソッドが呼び出されます&lt;/xref:System.Windows.Application.Shutdown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Shut down can occur implicitly or explicitly, as specified by the value of the ShutdownMode property.</source>
          <target state="translated">シャット ダウンは、暗黙的または明示的に、ShutdownMode プロパティの値で指定したとおりに発生します。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>If you set ShutdownMode to &lt;xref:System.Windows.ShutdownMode&gt;, <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> implicitly calls &lt;xref:System.Windows.Application.Shutdown%2A&gt; when the last window in an application closes, even if any currently instantiated windows are set as the main window (see &lt;xref:System.Windows.Application.MainWindow%2A&gt;).</source>
          <target state="translated">ShutdownMode を設定すると&lt;xref:System.Windows.ShutdownMode&gt;、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>暗黙的に呼び出す&lt;xref:System.Windows.Application.Shutdown%2A&gt;アプリケーションの最後のウィンドウが閉じたときに、メイン ウィンドウとして、現在インスタンス化されたウィンドウが設定されている場合でも (を参照してください&lt;xref:System.Windows.Application.MainWindow%2A&gt;).&lt;/xref:System.Windows.Application.MainWindow%2A&gt; &lt;/xref:System.Windows.Application.Shutdown%2A&gt; &lt;/xref:System.Windows.ShutdownMode&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>A ShutdownMode of &lt;xref:System.Windows.ShutdownMode&gt; causes <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>to implicitly call &lt;xref:System.Windows.Application.Shutdown%2A&gt; when the &lt;xref:System.Windows.Application.MainWindow%2A&gt; closes, even if other windows are currently open.</source>
          <target state="translated">ShutdownMode&lt;xref:System.Windows.ShutdownMode&gt;により<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>を暗黙的に呼び出す&lt;xref:System.Windows.Application.Shutdown%2A&gt;ときに、&lt;xref:System.Windows.Application.MainWindow%2A&gt;閉じると、その他のウィンドウが現在開いている場合でも&lt;/xref:System.Windows.Application.MainWindow%2A&gt;&lt;/xref:System.Windows.Application.Shutdown%2A&gt;&lt;/xref:System.Windows.ShutdownMode&gt;。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The lifetime of some applications may not be dependent on when the main window or last window is closed, or may not be dependent on windows at all.</source>
          <target state="translated">一部のアプリケーションの有効期間は、メイン ウィンドウまたは最後のウィンドウが閉じるか、またはできない可能性があります windows に依存するすべての場合に依存できない可能性があります。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>For these scenarios you need to set the ShutdownMode property to &lt;xref:System.Windows.ShutdownMode&gt;, which requires an explicit &lt;xref:System.Windows.Application.Shutdown%2A&gt; method call to stop the application.</source>
          <target state="translated">このようなシナリオに ShutdownMode プロパティを設定する必要があります&lt;xref:System.Windows.ShutdownMode&gt;、がありますが、明示的な&lt;xref:System.Windows.Application.Shutdown%2A&gt;アプリケーションを停止するメソッドの呼び出し。&lt;/xref:System.Windows.Application.Shutdown%2A&gt; &lt;/xref:System.Windows.ShutdownMode&gt; 。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Otherwise, the application continues running in the background.</source>
          <target state="translated">それ以外の場合、アプリケーションは引き続きバック グラウンドで実行されます。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>ShutdownMode can be configured declaratively from <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> or programmatically from code.</source>
          <target state="translated">ShutdownMode を宣言して構成できます<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>またはプログラムによってコード。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>This property is available only from the thread that created the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">このプロパティは、作成したスレッドからのみ使用可能な&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.ShutdownMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration value.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.ShutdownMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>列挙値。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.ShutdownMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.ShutdownMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Occurs when the &lt;xref:System.Windows.Application.Run*&gt; method of the <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is called.</source>
          <target state="translated">発生したときに、&lt;xref:System.Windows.Application.Run*&gt;のメソッド、 <bpt id="p1">&lt;xref href="System.Windows.Application"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトが呼び出されます&lt;/xref:System.Windows.Application.Run*&gt;。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A typical <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> application may perform a variety of initialization tasks when it starts up, including:      -   Processing command-line parameters.</source>
          <target state="translated">一般的な<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph>など、開始時に、アプリケーションは、さまざまな初期化タスクを実行可能性があります:-コマンド ライン パラメーターを処理します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>-   Opening the main window.</source>
          <target state="translated">メイン ウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>-   Initializing application-scope resources.</source>
          <target state="translated">アプリケーション スコープのリソースを初期化します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>-   Initializing application-scope properties.</source>
          <target state="translated">アプリケーション スコープのプロパティを初期化します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>You can declaratively specify the main window and application-scope resources using <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph> (&lt;xref:System.Windows.Application.StartupUri%2A&gt; and &lt;xref:System.Windows.Application.Resources%2A&gt;, respectively).</source>
          <target state="translated">メイン ウィンドウとアプリケーション スコープのリソースを使用して宣言によって指定できます<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>(&lt;xref:System.Windows.Application.StartupUri%2A&gt;と&lt;xref:System.Windows.Application.Resources%2A&gt;、それぞれ).&lt;/xref:System.Windows.Application.Resources%2A&gt; &lt;/xref:System.Windows.Application.StartupUri%2A&gt;</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Sometimes, however, the resources or main window of your application can only be determined programmatically at run time.</source>
          <target state="translated">場合によっては、ただし、リソースや、アプリケーションのメイン ウィンドウできますのみするプログラムで実行時に決定します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Additionally, application-scope properties and command-line parameters can only be used programmatically.</source>
          <target state="translated">さらに、アプリケーション スコープのプロパティとコマンド ライン パラメーターのみするプログラムにより使用できます。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Programmatic initialization can be performed by handling the Startup event, including the following:      -   Acquire and process command-line parameters, which are available from the &lt;xref:System.Windows.StartupEventArgs.Args%2A&gt; property of the &lt;xref:System.Windows.StartupEventArgs&gt; class that is passed to the Startup event handler.</source>
          <target state="translated">プログラムによる初期化を次を含む、スタートアップ イベントを処理することによって実行できます: - 取得およびから使用できるコマンド ライン パラメーターを処理、&lt;xref:System.Windows.StartupEventArgs.Args%2A&gt;のプロパティ、&lt;xref:System.Windows.StartupEventArgs&gt;スタートアップ イベント ハンドラーに渡されるクラス&lt;/xref:System.Windows.StartupEventArgs&gt;&lt;/xref:System.Windows.StartupEventArgs.Args%2A&gt;。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>-   Initialize application-scope resources by using the &lt;xref:System.Windows.Application.Resources%2A&gt; property.</source>
          <target state="translated">-アプリケーション スコープのリソースを使用して初期化、&lt;xref:System.Windows.Application.Resources%2A&gt;プロパティ&lt;/xref:System.Windows.Application.Resources%2A&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>-   Initialize application-scope properties by using the &lt;xref:System.Windows.Application.Properties%2A&gt; property.</source>
          <target state="translated">-アプリケーション スコープのプロパティを使用して初期化、&lt;xref:System.Windows.Application.Properties%2A&gt;プロパティ&lt;/xref:System.Windows.Application.Properties%2A&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>-   Instantiate and show one (or more) windows.</source>
          <target state="translated">インスタンスを作成し、1 つ (以上) のウィンドウを表示します。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Command-line parameters can also be acquired by calling the static &lt;xref:System.Environment.GetCommandLineArgs%2A&gt; method of the &lt;xref:System.Environment&gt; object.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; コマンド ライン パラメーターは、静的なを呼び出すことによって取得することも&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;方法、&lt;xref:System.Environment&gt;オブジェクト&lt;/xref:System.Environment&gt;&lt;/xref:System.Environment.GetCommandLineArgs%2A&gt;。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Environment.GetCommandLineArgs%2A&gt; requires full trust to execute.</source>
          <target state="translated">ただし、&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;を実行する完全な信頼が必要です&lt;/xref:System.Environment.GetCommandLineArgs%2A&gt;。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>If you set &lt;xref:System.Windows.Application.StartupUri%2A&gt; using <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>, the main window that is created is not available from either the &lt;xref:System.Windows.Application.MainWindow%2A&gt; property or the &lt;xref:System.Windows.Application.Windows%2A&gt; property of the &lt;xref:System.Windows.Application&gt; object until after the Startup event is processed.</source>
          <target state="translated">設定した場合&lt;xref:System.Windows.Application.StartupUri%2A&gt;を使用して<ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</ph>、作成されるメイン ウィンドウからは使用できないか、&lt;xref:System.Windows.Application.MainWindow%2A&gt;プロパティまたは&lt;xref:System.Windows.Application.Windows%2A&gt;のプロパティ、&lt;xref:System.Windows.Application&gt;スタートアップ イベントが処理された後までオブジェクトします&lt;/xref:System.Windows.Application&gt;&lt;/xref:System.Windows.Application.Windows%2A&gt;&lt;/xref:System.Windows.Application.MainWindow%2A&gt;&lt;/xref:System.Windows.Application.StartupUri%2A&gt;。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If you need access to the main window during startup, you need to manually create a new window object from your Startup event handler.</source>
          <target state="translated">起動中にメイン ウィンドウへのアクセスを必要がある場合は、スタートアップ イベント ハンドラーから新しいウィンドウ オブジェクトを手動で作成する必要があります。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If your application uses &lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt; to specify a credential policy, you need to set &lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt; after Startup is raised; otherwise, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph> sets it to a default internal policy directly after the Startup event has been raised.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、アプリケーションで使用する場合&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;ポリシーを指定する、資格情報を設定する必要があります&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;スタートアップが発生した、それ以外の<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]</ph>設定に既定の内部ポリシーに直接スタートアップ イベントが発生した後。&lt;/xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt; &lt;/xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The command-line arguments that are passed to the Startup event handler are not the same as the <ph id="ph1">[!INCLUDE[TLA#tla_url](~/add/includes/tlasharptla-url-md.md)]</ph> query string parameters that are passed to an <ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>.</source>
          <target state="translated">スタートアップ イベント ハンドラーに渡されるコマンドライン引数と同じではない、<ph id="ph1">[!INCLUDE[TLA#tla_url](~/add/includes/tlasharptla-url-md.md)]</ph>クエリ文字列パラメーターに渡される、<ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> that is automatically shown when an application starts.</source>
          <target state="translated">取得または設定、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>をアプリケーションの起動時に自動的に表示します。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>You can use StartupUri to automatically load a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> resource when an application starts.</source>
          <target state="translated">自動的に読み込む StartupUri を使用することができます、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>リソース アプリケーションの起動時にします。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The following table shows the types of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> resources that can be loaded, the type of window they are opened into, and the type of application that these resources can be set as the StartupUri.</source>
          <target state="translated">次の表は、種類の<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>読み込むことができるリソースには、開かれたウィンドウの種類と、StartupUri として設定できます。 これらのリソース アプリケーションの種類。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>|Type|Window|Application type|   |----------|------------|----------------------|   |&lt;xref:System.Windows.Window&gt;|&lt;xref:System.Windows.Window&gt;|Standalone only|   |&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|Standalone only|   |&lt;xref:System.Windows.Controls.Page&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|Standalone/browser-hosted|   |&lt;xref:System.Windows.Controls.UserControl&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|Standalone/browser-hosted|   |&lt;xref:System.Windows.Documents.FlowDocument&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|Standalone/browser-hosted|   |&lt;xref:System.Windows.Navigation.PageFunction%601&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|Standalone/browser-hosted|       Typically, you set the StartupUri property declaratively in <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">|型 |ウィンドウ |アプリケーションの種類 |  |----------|------------|----------------------|  |&lt;xref:System.Windows.Window&gt;|&lt;xref:System.Windows.Window&gt;|スタンドアロンのみ |  |&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|スタンドアロンのみ |  |&lt;xref:System.Windows.Controls.Page&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|スタンドアロン/ブラウザーでホストされる |  |&lt;xref:System.Windows.Controls.UserControl&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|スタンドアロン/ブラウザーでホストされる |  |&lt;xref:System.Windows.Documents.FlowDocument&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|スタンドアロン/ブラウザーでホストされる |  |&lt;xref:System.Windows.Navigation.PageFunction%601&gt;|&lt;xref:System.Windows.Navigation.NavigationWindow&gt;|スタンドアロン/ブラウザーでホストされる |      宣言的に、StartupUri プロパティを設定する通常、 <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</ph>&lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Navigation.PageFunction%601&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Documents.FlowDocument&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Controls.UserControl&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Controls.Page&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Navigation.NavigationWindow&gt; &lt;/xref:System.Windows.Window&gt; &lt;/xref:System.Windows.Window&gt; 。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>However, you can set StartupUri programmatically, such as from a &lt;xref:System.Windows.Application.Startup&gt; event handler, which is useful if for applications that can only load the necessary <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> resources at run time.</source>
          <target state="translated">ただし、StartupUri をプログラムに設定できますからこのような&lt;xref:System.Windows.Application.Startup&gt;のみの読み込みを行える、必要なアプリケーションの場合に便利ですが、イベント ハンドラー<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>実行時にリソース&lt;/xref:System.Windows.Application.Startup&gt;。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>For example, an application might wait until run time to load its resources if the name of the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> resource is stored in a configuration file.</source>
          <target state="translated">アプリケーションが場合、そのリソースを読み込むために実行時まで待つことがありますなどの名前、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>リソースが構成ファイルに格納されています。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Whether you set StartupUri declaratively or programmatically, the corresponding <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> resource is not loaded until after the &lt;xref:System.Windows.Application.Startup&gt; event is handled.</source>
          <target state="translated">宣言的 StartupUri を設定するかどうか、またはプログラムでは、対応する<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>までリソースが読み込まれていない後、&lt;xref:System.Windows.Application.Startup&gt;イベントを処理します&lt;/xref:System.Windows.Application.Startup&gt;。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Consequently, you won't have access to the resulting window from either the &lt;xref:System.Windows.Application.Windows%2A&gt; property or the &lt;xref:System.Windows.Application.MainWindow%2A&gt; property when handling &lt;xref:System.Windows.Application.Startup&gt;.</source>
          <target state="translated">その結果はアクセスできませんされたウィンドウをいずれかから、&lt;xref:System.Windows.Application.Windows%2A&gt;プロパティまたは&lt;xref:System.Windows.Application.MainWindow%2A&gt;&lt;xref:System.Windows.Application.Startup&gt;。&lt;/xref:System.Windows.Application.Startup&gt;を処理するときにプロパティ&lt;/xref:System.Windows.Application.MainWindow%2A&gt;&lt;/xref:System.Windows.Application.Windows%2A&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Uri&gt; that refers to the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> that automatically opens when an application starts.</source>
          <target state="translated">A&lt;xref:System.Uri&gt;を参照する、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>は、アプリケーションの起動時に自動的に開きます&lt;/xref:System.Uri&gt;。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>StartupUri is set with a value of null.</source>
          <target state="translated">StartupUri は、値は null に設定されます。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Queries for whether a specified ambient property is available in the current scope.</source>
          <target state="translated">かどうか、指定したアンビエント プロパティが使用可能な現在のスコープを照会します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Windows.Application&gt; instance is cast to an &lt;xref:System.Windows.Markup.IQueryAmbient&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Windows.Application&gt;にインスタンスをキャスト、&lt;xref:System.Windows.Markup.IQueryAmbient&gt;インターフェイス&lt;/xref:System.Windows.Markup.IQueryAmbient&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The name of the requested ambient property.</source>
          <target state="translated">要求されたアンビエント プロパティの名前。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the requested ambient property is available; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要求されたアンビエント プロパティがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Searches for the specified resource.</source>
          <target state="translated">指定したリソースを検索します。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>TryFindResource will first look in application-scope resources for the specified resource.</source>
          <target state="translated">TryFindResource は、アプリケーション スコープの指定されたリソースのリソースでは、まずします。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Application-scope resources are managed by &lt;xref:System.Windows.Application&gt;, and are exposed from the &lt;xref:System.Windows.Application.Resources%2A&gt; property.</source>
          <target state="translated">アプリケーション スコープのリソースで管理されて&lt;xref:System.Windows.Application&gt;から公開されると、&lt;xref:System.Windows.Application.Resources%2A&gt;プロパティ&lt;/xref:System.Windows.Application.Resources%2A&gt;&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If the specified resource is not found in the set of application-scope resources, TryFindResource then next searches the system resources.</source>
          <target state="translated">アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合 TryFindResource し、次を検索、システム リソースです。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
          <target state="translated">システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>These are exposed from the &lt;xref:System.Windows.SystemColors&gt;, &lt;xref:System.Windows.SystemFonts&gt;, and &lt;xref:System.Windows.SystemParameters&gt; types, respectively, as static properties.</source>
          <target state="translated">これらは、 &lt;xref:System.Windows.SystemColors&gt;、 &lt;xref:System.Windows.SystemFonts&gt;、および&lt;xref:System.Windows.SystemParameters&gt;型をそれぞれ、静的なプロパティです&lt;/xref:System.Windows.SystemParameters&gt;&lt;/xref:System.Windows.SystemFonts&gt;&lt;/xref:System.Windows.SystemColors&gt;。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>To use TryFindResource to acquire them, these types also expose resource key properties that are designed to be passed to TryFindResource; for example, &lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;.</source>
          <target state="translated">TryFindResource を使用すると、それらを取得して、これらの型も公開 TryFindResource; に渡されるように設計されているリソースのキー プロパティたとえば、 &lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;。&lt;/xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Because TryFindResource returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
          <target state="translated">TryFindResource オブジェクトを返すために、リソースが見つかった場合に、適切な型に返される値をキャストする必要があります。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This method is thread safe and can be called from any thread.</source>
          <target state="translated">このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The name of the resource to find.</source>
          <target state="translated">検索するリソースの名前。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The requested resource object.</source>
          <target state="translated">要求されたリソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>If the requested resource is not found, a null reference is returned.</source>
          <target state="translated">要求されたリソースが見つからない場合は null 参照が返されます。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Gets the instantiated windows in an application.</source>
          <target state="translated">アプリケーションでインスタンス化されたウィンドウを取得します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; reference is automatically added to Windows as soon as a window is instantiated on the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> thread; windows that are created by worker threads are not added.</source>
          <target state="translated">A&lt;xref:System.Windows.Window&gt;参照はで、ウィンドウがインスタンス化するとすぐに、自動的に Windows に追加、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>スレッド以外のスレッドが追加されませんワーカーによって作成される windows&lt;/xref:System.Windows.Window&gt; 。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Window&gt; reference is automatically removed after its &lt;xref:System.Windows.Window.Closing&gt; event has been handled and before its &lt;xref:System.Windows.Window.Closed&gt; event is raised.</source>
          <target state="translated">A&lt;xref:System.Windows.Window&gt;参照が自動的に削除後、&lt;xref:System.Windows.Window.Closing&gt;イベントが処理されたとする前にその&lt;xref:System.Windows.Window.Closed&gt;イベントが発生します&lt;/xref:System.Windows.Window.Closed&gt;&lt;/xref:System.Windows.Window.Closing&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>By default, the first item added to the Windows property becomes the &lt;xref:System.Windows.Application.MainWindow%2A&gt;.</source>
          <target state="translated">既定では、Windows のプロパティに追加された最初の項目が&lt;xref:System.Windows.Application.MainWindow%2A&gt;。&lt;/xref:System.Windows.Application.MainWindow%2A&gt;</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>This property is available only from the thread that created the &lt;xref:System.Windows.Application&gt; object.</source>
          <target state="translated">このプロパティは、作成したスレッドからのみ使用可能な&lt;xref:System.Windows.Application&gt;オブジェクト&lt;/xref:System.Windows.Application&gt;。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains references to all window objects in the current <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.WindowCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、現在のすべてのウィンドウ オブジェクトへの参照を格納している<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>