<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccad41ad00ba86be0f4041b848c7b9b43afa6fe1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Transactions.CommittableTransaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">054586e338584f4c459150aa6b8d59431d48945b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5dfad97f107ec792589460840ed49fc52c7bd8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Describes a committable transaction.</source>
          <target state="translated">コミットできるトランザクションをについて説明します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The CommittableTransaction class provides an explicit way for applications to use a transaction, as opposed to using the &lt;xref:System.Transactions.TransactionScope&gt; class implicitly.</source>
          <target state="translated">CommittableTransaction クラスには、アプリケーションを使用してではなく、トランザクションを使用するための明示的な方法が用意されています、&lt;xref:System.Transactions.TransactionScope&gt;クラスが暗黙的にします&lt;/xref:System.Transactions.TransactionScope&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;xref:System.Transactions.TransactionScope&gt; class, the application writer needs to specifically call the &lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt; and &lt;xref:System.Transactions.Transaction.Rollback%2A&gt; methods in order to commit or abort the transaction.</source>
          <target state="translated">異なり、&lt;xref:System.Transactions.TransactionScope&gt;クラス、アプリケーションの作成者を具体的に呼び出す必要がある、&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;と&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;コミットするか、トランザクションを中止するためにメソッド&lt;/xref:System.Transactions.Transaction.Rollback%2A&gt;&lt;/xref:System.Transactions.CommittableTransaction.Commit%2A&gt;&lt;/xref:System.Transactions.TransactionScope&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, only the creator of a transaction can commit the transaction.</source>
          <target state="translated">ただし、トランザクションの作成者のみがトランザクションをコミットすることができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, copies of a committable transaction, obtained through the &lt;xref:System.Transactions.Transaction.Clone%2A&gt; method are not committable.</source>
          <target state="translated">コミットできるトランザクションのコピーがを介して取得されたため、&lt;xref:System.Transactions.Transaction.Clone%2A&gt;メソッドはコミットされません&lt;/xref:System.Transactions.Transaction.Clone%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  It is recommended that you create implicit transactions using the &lt;xref:System.Transactions.TransactionScope&gt; class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用して暗黙のトランザクションを作成することをお勧めしますが、&lt;xref:System.Transactions.TransactionScope&gt;クラスのアンビエント トランザクションのコンテキストが自動的に管理できるようにします&lt;/xref:System.Transactions.TransactionScope&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You should also use the &lt;xref:System.Transactions.TransactionScope&gt; and &lt;xref:System.Transactions.DependentTransaction&gt; class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">使用する必要も、&lt;xref:System.Transactions.TransactionScope&gt;と&lt;xref:System.Transactions.DependentTransaction&gt;複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラス&lt;/xref:System.Transactions.DependentTransaction&gt;&lt;/xref:System.Transactions.TransactionScope&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">このモデルの詳細については、次を参照してください。、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a CommittableTransaction does not automatically set the ambient transaction, which is the transaction your code executes in.</source>
          <target state="translated">CommittableTransaction の作成、アンビエント トランザクションで、コードが実行されるトランザクションは、自動的に設定しません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can get or set the ambient transaction by calling the static &lt;xref:System.Transactions.Transaction.Current%2A&gt; property of the global &lt;xref:System.Transactions.Transaction&gt; object.</source>
          <target state="translated">取得または静的なを呼び出すことによって、アンビエント トランザクションを設定することができます&lt;xref:System.Transactions.Transaction.Current%2A&gt;のグローバル プロパティ&lt;xref:System.Transactions.Transaction&gt;オブジェクト&lt;/xref:System.Transactions.Transaction&gt;&lt;/xref:System.Transactions.Transaction.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.</source>
          <target state="translated">アンビエント トランザクションの詳細については、の「管理するトランザクションを使用してフロー TransactionScopeOption」を参照してください、<bpt id="p1">[</bpt>を実装する、暗黙的なトランザクションを使用してトランザクション スコープ<ept id="p1">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</source>
          <target state="translated">アンビエント トランザクションが設定されていない場合、リソース マネージャーで任意の操作はこのトランザクションの一部ではありません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context.</source>
          <target state="translated">明示的に設定し、リソース マネージャーが右のトランザクション コンテキストで動作することを確認する、アンビエント トランザクションをリセットする必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Until a CommittableTransaction has been committed, all the resources involved with the transaction are still locked.</source>
          <target state="translated">CommittableTransaction がコミットされるまで、トランザクションに関連するすべてのリソースがまだロックされています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A CommittableTransaction object cannot be reused.</source>
          <target state="translated">CommittableTransaction のオブジェクトを再利用できません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</source>
          <target state="translated">コミットまたはロールバックされましたが、トランザクションで再度使用または現在のアンビエント トランザクションのコンテキストとして設定することはできません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p2">&lt;/code&gt;</ept> value.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定したクラス<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p2">&lt;/code&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The maximum amount of time the transaction can exist, before it is aborted.</source>
          <target state="translated">最長時間を中止する前に、トランザクションが存在できます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified transaction options.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Transactions.CommittableTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス トランザクション オプションを指定します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure that describes the transaction options to use for the new transaction.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Transactions.TransactionOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>新しいトランザクションを使用するトランザクション オプションを記述する構造体。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;options&lt;/code&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;options&lt;/code&gt;</ph>正しくありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Begins an attempt to commit the transaction asynchronously.</source>
          <target state="translated">非同期的に、トランザクションをコミットを開始します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This method returns immediately, before the transaction has been completed.</source>
          <target state="translated">このメソッドは、トランザクションが完了する前に、すぐに返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The transaction then commits on a different thread, and the <ph id="ph1">`asyncCallback`</ph> delegate is invoked when it has completed.</source>
          <target state="translated">トランザクション、別のスレッドでのコミットと<ph id="ph1">`asyncCallback`</ph>が完了したときに、デリゲートが呼び出されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After this method is called, you do not receive the outcome of the transaction until you call &lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;.</source>
          <target state="translated">このメソッドが呼び出された後に表示されません、トランザクションの結果&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;。&lt;/xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;が呼び出されるまで</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The commit process may complete synchronously inside this method call.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; コミット処理は、このメソッドの呼び出しの内部同期をとって実行可能性があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AsyncCallback&gt; delegate that is invoked when the transaction completes.</source>
          <target state="translated">&lt;xref:System.AsyncCallback&gt;トランザクションが完了したときに呼び出されるデリゲート&lt;/xref:System.AsyncCallback&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This parameter can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, in which case the application is not notified of the transaction's completion.</source>
          <target state="translated">このパラメーターを指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、いる場合、アプリケーションは、トランザクションの完了の通知されません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instead, the application must use the &lt;xref:System.IAsyncResult&gt; interface to check for completion and wait accordingly, or call &lt;xref:System.Transactions.CommittableTransaction.EndCommit*&gt; to wait for completion.</source>
          <target state="translated">代わりに、アプリケーションが使用する必要があります、&lt;xref:System.IAsyncResult&gt;の完了を確認し、それに応じて待機するためのインターフェイスを呼び出したり&lt;xref:System.Transactions.CommittableTransaction.EndCommit*&gt;完了するまで待機します&lt;/xref:System.Transactions.CommittableTransaction.EndCommit*&gt;&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An object, which might contain arbitrary state information, associated with the asynchronous commitment.</source>
          <target state="translated">非同期のコミットに関連付けられた任意の状態情報が含まれているオブジェクト。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This object is passed to the callback, and is not interpreted by <bpt id="p1">&lt;xref href="System.Transactions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このオブジェクトは、コールバックに渡されで解釈されない<bpt id="p1">&lt;xref href="System.Transactions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A null reference is permitted.</source>
          <target state="translated">Null 参照が許可されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IAsyncResult&gt; interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</source>
          <target state="translated">&lt;xref:System.IAsyncResult&gt;、非同期操作の状態を確認するか、操作が完了するまで待機する、呼び出し元が使用できるインターフェイス&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attempts to commit the transaction.</source>
          <target state="translated">トランザクションをコミットしようとしています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</source>
          <target state="translated">このメソッドが呼び出されると、トランザクションに参加する登録されているすべてのオブジェクトをポーリングして、コミットまたはトランザクションをロールバックするには、その投票が個別に示さです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If any participant votes to roll back the transaction, it is rolled back and this method throws a &lt;xref:System.Transactions.TransactionException&gt; exception.</source>
          <target state="translated">すべての参加要素は、トランザクションをロールバックする投票する場合、はロールバックし、このメソッドはスロー、&lt;xref:System.Transactions.TransactionException&gt;例外です&lt;/xref:System.Transactions.TransactionException&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is a normal occurrence for a transaction and your code should catch and process such exceptions.</source>
          <target state="translated">これは、トランザクションに対する通常の動作であり、コードでキャッチしてこのような例外を処理する必要があります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Commit and &lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt; block until the first phase of transaction processing is complete.</source>
          <target state="translated">コミットと&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;トランザクション処理の最初のフェーズが完了するまでブロックします&lt;/xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the &lt;xref:System.Transactions.TransactionManager&gt; has durably decided to commit or abort the transaction.</source>
          <target state="translated">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、&lt;xref:System.Transactions.TransactionManager&gt;コミットするか、トランザクションを中止することにしました永続的に&lt;/xref:System.Transactions.TransactionManager&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">処理の&amp;2; 番目のフェーズは、常に非同期にします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">トランザクション処理の最初のフェーズが完了するまでに十分な注意する必要があります (WinForm) の Windows フォーム アプリケーションの場合、またはデッドロックでこのメソッドを使用するときにこのメソッドはブロックが発生することができます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">(たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;、デッドロックが発生するトランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッド&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is because the &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">これは、ため、&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You should use &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; rather than &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">使用する必要があります&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;なく&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;可能な限り、非同期、したがってにくくなりましたデッドロックになっているためです。&lt;/xref:System.Windows.Forms.Control.Invoke%2A&gt; &lt;/xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Commit is called on a transaction and the transaction becomes <bpt id="p1">&lt;xref href="System.Transactions.TransactionStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">トランザクションで commit が呼び出され、トランザクションになります<bpt id="p1">&lt;xref href="System.Transactions.TransactionStatus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Commit is called and the transaction rolls back for the first time.</source>
          <target state="translated">コミットが呼び出され、最初にトランザクションがロールバックされます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ends an attempt to commit the transaction asynchronously.</source>
          <target state="translated">非同期的に、トランザクションをコミットする試みを終了します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You should call this method in the callback delegate specified as a parameter to the &lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt; method, when you have finished any cleanup work associated with the asynchronous commitment.</source>
          <target state="translated">パラメーターとして指定されたコールバック デリゲートでこのメソッドを呼び出す必要があります、&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;メソッドは、非同期のコミットに関連するクリーンアップ作業を完了するとします&lt;/xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can also call this method early without waiting for the delegate.</source>
          <target state="translated">デリゲートを待たずに早い段階このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If, by the time you call this method, the transaction has not completed, this method waits for its completion.</source>
          <target state="translated">このメソッドを呼び出すまで、トランザクションが完了していない場合は、このメソッドは、その完了を待機します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The &lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt; property returned by <ph id="ph2">`asyncResult`</ph> is always <ph id="ph3">`false`</ph>, even if the operation completed synchronously.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;、&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;プロパティから返される<ph id="ph2">`asyncResult`</ph>は常に<ph id="ph3">`false`</ph>場合でも、同期的に、操作を完了します&lt;/xref:System.IAsyncResult.CompletedSynchronously%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt; and EndCommit block until the first phase of transaction processing is complete.</source>
          <target state="translated">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;トランザクション処理の最初のフェーズが完了するまで EndCommit ブロックします。&lt;/xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the &lt;xref:System.Transactions.TransactionManager&gt; has durably decided to commit or abort the transaction.</source>
          <target state="translated">すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、&lt;xref:System.Transactions.TransactionManager&gt;コミットするか、トランザクションを中止することにしました永続的に&lt;/xref:System.Transactions.TransactionManager&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">処理の&amp;2; 番目のフェーズは、常に非同期にします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IAsyncResult&gt; object associated with the asynchronous commitment.</source>
          <target state="translated">&lt;xref:System.IAsyncResult&gt;非同期のコミットに関連付けられているオブジェクト&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt; is called and the transaction rolls back for the first time.</source>
          <target state="translated">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;呼び出されたし、最初にトランザクションがロールバックされます。&lt;/xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the object provided as the last parameter of the &lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt; method call.</source>
          <target state="translated">最後のパラメーターとして指定されたオブジェクトを取得、&lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;メソッドの呼び出し&lt;/xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The object provided as the last parameter of the &lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt; method call.</source>
          <target state="translated">最後のパラメーターとして指定されたオブジェクト、&lt;xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;メソッドの呼び出し&lt;/xref:System.Transactions.CommittableTransaction.BeginCommit*&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets a &lt;xref:System.Threading.WaitHandle&gt; that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">取得、&lt;xref:System.Threading.WaitHandle&gt;非同期操作が完了するまで待機するために使用されます&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Threading.WaitHandle&gt; that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">A&lt;xref:System.Threading.WaitHandle&gt;非同期操作が完了するまで待機するために使用されます&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets an indication of whether the asynchronous commit operation completed synchronously.</source>
          <target state="translated">かどうかを示す値を取得、非同期コミット操作を同期的に完了します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the asynchronous commit operation completed synchronously; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>非同期のコミット操作が同期的に完了した場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This property always returns <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> even if the operation completed synchronously.</source>
          <target state="translated">このプロパティは常に返します<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合でも、同期的に、操作を完了します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets an indication whether the asynchronous commit operation has completed.</source>
          <target state="translated">非同期のコミット操作が完了したかどうか示す値を取得します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the operation is complete; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、操作が完了しました。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>