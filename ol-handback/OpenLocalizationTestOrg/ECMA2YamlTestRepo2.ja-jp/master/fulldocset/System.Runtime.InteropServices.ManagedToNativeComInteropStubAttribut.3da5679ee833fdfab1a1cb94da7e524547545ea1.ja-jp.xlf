<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">622d983b53c274129793847d685acbdd440b7fa2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3114df2d94f35da3a16257cd30002677db5ea038</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7dba3e780d88fd1bff1362801691f4fb4116ef3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</source>
          <target state="translated">マネージ型から COM への相互運用シナリオでの相互運用機能のスタブのユーザーのカスタマイズのサポートを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This attribute enables interop developers who have knowledge about marshaling and the inner workings of interop calls to do the following:      -   Take advantage of customized interop stubs at build time instead of run time.</source>
          <target state="translated">この属性により、マーシャ リングの概要の知識と、次の操作への相互運用機能の呼び出しの内部動作開発者が相互運用機能:-実行時ではなく、ビルド時にカスタマイズされた相互運用機能のスタブを活用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   Debug customized interop stubs.</source>
          <target state="translated">デバッグは、相互運用機能のスタブをカスタマイズします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Provide marshaling capabilities within a stub that the runtime does not provide.</source>
          <target state="translated">ランタイムが提供していないスタブ内のマーシャ リングの機能を提供します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   Provide user-specific method dispatch capabilities.</source>
          <target state="translated">機能を提供ユーザー固有メソッド ディスパッチします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You apply the attribute on a method in an interface to specify a corresponding stub method for managed-to-native COM interop.</source>
          <target state="translated">この属性は、マネージからネイティブへの COM 相互運用機能の対応するスタブ メソッドを指定するインターフェイスのメソッドに適用します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this attribute is encountered during run time, the common language runtime does not dynamically generate an interop stub.</source>
          <target state="translated">この属性は、実行時に検出した場合、共通言語ランタイムの相互運用機能のスタブは動的に生成されません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Instead, it invokes the custom stub that was created at build time.</source>
          <target state="translated">代わりに、ビルド時に作成されたカスタムのスタブを呼び出します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The ManagedToNativeComInteropStubAttribute attribute has the following characteristics:      -   The attribute can be used only on methods from interfaces that are marked <ph id="ph1">`[ComImport]`</ph>.</source>
          <target state="translated">ManagedToNativeComInteropStubAttribute 属性は、次の特性を持つ:-この属性は、マークされているインターフェイスのメソッドでのみ使用できます<ph id="ph1">`[ComImport]`</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the attribute is applied to non-interface types, it is ignored by the runtime.</source>
          <target state="translated">属性はインターフェイス以外の型に適用する場合は、ランタイムによって無視されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-   The attribute can be used only once on the same method in an interface.</source>
          <target state="translated">-属性は、インターフェイス内で同じ方法で&amp;1; 回だけ使用できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If it is used more than once, the compiler generates a duplicated attribute error.</source>
          <target state="translated">複数回使用されている場合、コンパイラは、属性の重複エラーを生成します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>-   The attribute is not inheritable from a base interface.</source>
          <target state="translated">-属性は、基本インターフェイスからは継承ではありません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Derived interfaces must explicitly assign the attribute.</source>
          <target state="translated">派生インターフェイスは、属性を明示的に割り当てる必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-   The assembly that contains the attributed method must also contain the customized stub.</source>
          <target state="translated">-属性付きメソッドを含むアセンブリには、カスタマイズされたスタブする必要がありますも含まれます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Overloaded stub methods are valid.</source>
          <target state="translated">オーバー ロードされたスタブ メソッドは、有効です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Although you specify only the type and the name of the stub method, the runtime will discover the corresponding stub.</source>
          <target state="translated">型のみおよびスタブ メソッドの名前を指定すると、ランタイムは、対応するスタブを検出します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It does this by examining all the arguments on the interface method, and then performing full signature matching by using an explicit <ph id="ph1">`this`</ph> pointer.</source>
          <target state="translated">これは、インターフェイス メソッド上のすべての引数を確認して、完全署名の明示的なを使用して照合を実行することで<ph id="ph1">`this`</ph>ポインター。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is also possible for multiple methods in an interface to share the same stub method; however, you should be careful when you use shared stubs.</source>
          <target state="translated">同じスタブ メソッド; の共有へのインターフェイスで複数のメソッドのこともただし、必要がありますに注意する共有のスタブを使用するとします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Stub methods must be static.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; スタブ メソッドは静的である必要があります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You could inform the runtime to use a customized interop stub at build time instead of run time with the following C# code:      <ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>       You could then use the following code to declare the corresponding stub method:      <ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></source>
          <target state="translated">次の c# コードの実行時ではなく、ビルド時にカスタマイズされた相互運用機能のスタブを使用するランタイムに通知する可能性があります:<ph id="ph1">```   [ComImport]   interface IMyInterface   {       [ManagedToNativeComInteropStubAttribute(typeof(TestStubClass),                 "ForwardTestStub")]       void GetString (string arg);   }   ```</ph>しを対応するスタブのメソッドを宣言する次のコードを使用する可能性があります。<ph id="ph2">```   class TestStubClass   {       internal static void ForwardTestStub(IMyInterface thisObject,                string arg) {…}   }   ```</ph></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified class type and method name.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したクラスの型とメソッドの名前を持つクラス。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The class that contains the required stub method.</source>
          <target state="translated">必要なスタブ メソッドを含むクラスです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the stub method.</source>
          <target state="translated">スタブ メソッドの名前。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph> cannot be found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;methodName&lt;/code&gt;</ph>見つかりません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-or-       The method is not static or non-generic.</source>
          <target state="translated">- または - メソッドは静的か非ジェネリックではありません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-       The method's parameter list does not match the expected parameter list for the stub.</source>
          <target state="translated">または、メソッドのパラメーター リストが、スタブに必要なパラメーター リストと一致しません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</source>
          <target state="translated">スタブ メソッドがプライベートまたはプロテクトのアクセシビリティを持つため、またはセキュリティ上の問題のため、マネージ相互運用メソッドを格納しているインターフェイスは、スタブ メソッドへのアクセスがありません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the class that contains the required stub method.</source>
          <target state="translated">必要なスタブ メソッドを含むクラスを取得します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The class that contains the customized interop stub.</source>
          <target state="translated">このクラスは、カスタマイズされた相互運用機能のスタブが含まれています。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the name of the stub method.</source>
          <target state="translated">スタブ メソッドの名前を取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The name of a customized interop stub.</source>
          <target state="translated">カスタマイズされた相互運用機能のスタブの名前。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>